
LoRaWAN_End_Node_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014aa0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  08014be0  08014be0  00024be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c20  08015c20  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08015c20  08015c20  00025c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c28  08015c28  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015c28  08015c28  00025c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08015c30  08015c30  00025c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08015c38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b18  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00004358  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20004470  20004470  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20004470  20004470  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   000720c8  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000de2c  00000000  00000000  000b06b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0003ae1d  00000000  00000000  000be4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003bf0  00000000  00000000  000f9300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003f08  00000000  00000000  000fcef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f82d  00000000  00000000  00100df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00068a9e  00000000  00000000  00130625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f72b0  00000000  00000000  001990c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  00290373  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000aba8  00000000  00000000  002903c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	08014bc8 	.word	0x08014bc8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	08014bc8 	.word	0x08014bc8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008d6:	2afd      	cmp	r2, #253	; 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	; 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	; 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	; 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2iz>:
 8000b24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b2c:	d30f      	bcc.n	8000b4e <__aeabi_f2iz+0x2a>
 8000b2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_f2iz+0x30>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b44:	fa23 f002 	lsr.w	r0, r3, r2
 8000b48:	bf18      	it	ne
 8000b4a:	4240      	negne	r0, r0
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b58:	d101      	bne.n	8000b5e <__aeabi_f2iz+0x3a>
 8000b5a:	0242      	lsls	r2, r0, #9
 8000b5c:	d105      	bne.n	8000b6a <__aeabi_f2iz+0x46>
 8000b5e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b62:	bf08      	it	eq
 8000b64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_f2uiz>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	d20e      	bcs.n	8000b92 <__aeabi_f2uiz+0x22>
 8000b74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b78:	d30b      	bcc.n	8000b92 <__aeabi_f2uiz+0x22>
 8000b7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b82:	d409      	bmi.n	8000b98 <__aeabi_f2uiz+0x28>
 8000b84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr
 8000b98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b9c:	d101      	bne.n	8000ba2 <__aeabi_f2uiz+0x32>
 8000b9e:	0242      	lsls	r2, r0, #9
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_f2uiz+0x38>
 8000ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b974 	b.w	8000eb0 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	4688      	mov	r8, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14d      	bne.n	8000c8c <__udivmoddi4+0xac>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4694      	mov	ip, r2
 8000bf4:	d968      	bls.n	8000cc8 <__udivmoddi4+0xe8>
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	b152      	cbz	r2, 8000c12 <__udivmoddi4+0x32>
 8000bfc:	fa01 f302 	lsl.w	r3, r1, r2
 8000c00:	f1c2 0120 	rsb	r1, r2, #32
 8000c04:	fa20 f101 	lsr.w	r1, r0, r1
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	ea41 0803 	orr.w	r8, r1, r3
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c16:	0c21      	lsrs	r1, r4, #16
 8000c18:	fbb8 fef5 	udiv	lr, r8, r5
 8000c1c:	fa1f f78c 	uxth.w	r7, ip
 8000c20:	fb05 831e 	mls	r3, r5, lr, r8
 8000c24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c28:	fb0e f107 	mul.w	r1, lr, r7
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d90b      	bls.n	8000c48 <__udivmoddi4+0x68>
 8000c30:	eb1c 0303 	adds.w	r3, ip, r3
 8000c34:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c38:	f080 811e 	bcs.w	8000e78 <__udivmoddi4+0x298>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f240 811b 	bls.w	8000e78 <__udivmoddi4+0x298>
 8000c42:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c50:	fb05 3310 	mls	r3, r5, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x96>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 8108 	bcs.w	8000e7c <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8105 	bls.w	8000e7c <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	1be4      	subs	r4, r4, r7
 8000c78:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa8>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0xc2>
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	f000 80ee 	beq.w	8000e72 <__udivmoddi4+0x292>
 8000c96:	2100      	movs	r1, #0
 8000c98:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x160>
 8000caa:	42ab      	cmp	r3, r5
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xd4>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80f9 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb65 0303 	sbc.w	r3, r5, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d0e2      	beq.n	8000c88 <__udivmoddi4+0xa8>
 8000cc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc6:	e7df      	b.n	8000c88 <__udivmoddi4+0xa8>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xec>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	f040 8091 	bne.w	8000df8 <__udivmoddi4+0x218>
 8000cd6:	eba1 050c 	sub.w	r5, r1, ip
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce8:	fb07 5013 	mls	r0, r7, r3, r5
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cf2:	fb0e f003 	mul.w	r0, lr, r3
 8000cf6:	42a8      	cmp	r0, r5
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x12c>
 8000cfa:	eb1c 0505 	adds.w	r5, ip, r5
 8000cfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x12a>
 8000d04:	42a8      	cmp	r0, r5
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	1a2d      	subs	r5, r5, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d14:	fb07 5510 	mls	r5, r7, r0, r5
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x156>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x154>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d34:	4628      	mov	r0, r5
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3e:	e79e      	b.n	8000c7e <__udivmoddi4+0x9e>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d52:	fa05 f301 	lsl.w	r3, r5, r1
 8000d56:	431c      	orrs	r4, r3
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	0c20      	lsrs	r0, r4, #16
 8000d68:	fa1f fe8c 	uxth.w	lr, ip
 8000d6c:	fb09 5518 	mls	r5, r9, r8, r5
 8000d70:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d74:	fb08 f00e 	mul.w	r0, r8, lr
 8000d78:	42a8      	cmp	r0, r5
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d80:	eb1c 0505 	adds.w	r5, ip, r5
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2bc>
 8000d8c:	42a8      	cmp	r0, r5
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2bc>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4465      	add	r5, ip
 8000d98:	1a2d      	subs	r5, r5, r0
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000da0:	fb09 5510 	mls	r5, r9, r0, r5
 8000da4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45ae      	cmp	lr, r5
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1e2>
 8000db0:	eb1c 0505 	adds.w	r5, ip, r5
 8000db4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2b4>
 8000dba:	45ae      	cmp	lr, r5
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2b4>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4465      	add	r5, ip
 8000dc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dca:	eba5 050e 	sub.w	r5, r5, lr
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46a6      	mov	lr, r4
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x2a4>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x2a0>
 8000dd8:	b15e      	cbz	r6, 8000df2 <__udivmoddi4+0x212>
 8000dda:	ebb3 0208 	subs.w	r2, r3, r8
 8000dde:	eb65 050e 	sbc.w	r5, r5, lr
 8000de2:	fa05 f707 	lsl.w	r7, r5, r7
 8000de6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dea:	40cd      	lsrs	r5, r1
 8000dec:	431f      	orrs	r7, r3
 8000dee:	e9c6 7500 	strd	r7, r5, [r6]
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	fa25 f303 	lsr.w	r3, r5, r3
 8000e08:	4095      	lsls	r5, r2
 8000e0a:	430d      	orrs	r5, r1
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e18:	fb07 3011 	mls	r0, r7, r1, r3
 8000e1c:	0c2b      	lsrs	r3, r5, #16
 8000e1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e22:	fb01 f00e 	mul.w	r0, r1, lr
 8000e26:	4298      	cmp	r0, r3
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x260>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b8>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b8>
 8000e3c:	3902      	subs	r1, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a1b      	subs	r3, r3, r0
 8000e42:	b2ad      	uxth	r5, r5
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3310 	mls	r3, r7, r0, r3
 8000e4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e50:	fb00 f30e 	mul.w	r3, r0, lr
 8000e54:	42ab      	cmp	r3, r5
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x28a>
 8000e58:	eb1c 0505 	adds.w	r5, ip, r5
 8000e5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2b0>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2b0>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4465      	add	r5, ip
 8000e6a:	1aed      	subs	r5, r5, r3
 8000e6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0x104>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e707      	b.n	8000c88 <__udivmoddi4+0xa8>
 8000e78:	4686      	mov	lr, r0
 8000e7a:	e6e5      	b.n	8000c48 <__udivmoddi4+0x68>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fa      	b.n	8000c76 <__udivmoddi4+0x96>
 8000e80:	454b      	cmp	r3, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f8>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f8>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x28a>
 8000e94:	4620      	mov	r0, r4
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1e2>
 8000e98:	4641      	mov	r1, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x260>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b8>
 8000ea0:	3b02      	subs	r3, #2
 8000ea2:	4465      	add	r5, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x12c>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e709      	b.n	8000cbe <__udivmoddi4+0xde>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x156>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eb4:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_ADC_Init+0x50>)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_ADC_Init+0x54>)
 8000eba:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ec0:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec8:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	2204      	movs	r2, #4
 8000ecc:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ece:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed0:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ed2:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ede:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ee0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000eea:	2207      	movs	r2, #7
 8000eec:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000eee:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ef0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ef4:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ef6:	f002 f891 	bl	800301c <HAL_ADC_Init>
 8000efa:	b900      	cbnz	r0, 8000efe <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000efc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000efe:	f000 fc69 	bl	80017d4 <Error_Handler>
}
 8000f02:	e7fb      	b.n	8000efc <MX_ADC_Init+0x48>
 8000f04:	20000134 	.word	0x20000134
 8000f08:	40012400 	.word	0x40012400

08000f0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f0c:	6802      	ldr	r2, [r0, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_ADC_MspInit+0x28>)
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d000      	beq.n	8000f16 <HAL_ADC_MspInit+0xa>
 8000f14:	4770      	bx	lr
{
 8000f16:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f22:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f2a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f2c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f2e:	b002      	add	sp, #8
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40012400 	.word	0x40012400

08000f38 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f38:	6802      	ldr	r2, [r0, #0]
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_ADC_MspDeInit+0x18>)
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d000      	beq.n	8000f42 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f40:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f46:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	e7f7      	b.n	8000f40 <HAL_ADC_MspDeInit+0x8>
 8000f50:	40012400 	.word	0x40012400

08000f54 <ADC_ReadChannels>:


/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f54:	b530      	push	{r4, r5, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f62:	f7ff ffa7 	bl	8000eb4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f66:	4816      	ldr	r0, [pc, #88]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f68:	f002 fc9c 	bl	80038a4 <HAL_ADCEx_Calibration_Start>
 8000f6c:	b9f8      	cbnz	r0, 8000fae <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f6e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f74:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f76:	a901      	add	r1, sp, #4
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f7a:	f002 f9dd 	bl	8003338 <HAL_ADC_ConfigChannel>
 8000f7e:	b9c8      	cbnz	r0, 8000fb4 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f80:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f82:	f002 fb9d 	bl	80036c0 <HAL_ADC_Start>
 8000f86:	b9c0      	cbnz	r0, 8000fba <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f88:	4c0d      	ldr	r4, [pc, #52]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f002 f970 	bl	8003274 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f94:	4620      	mov	r0, r4
 8000f96:	f002 fc65 	bl	8003864 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f002 f9c9 	bl	8003332 <HAL_ADC_GetValue>
 8000fa0:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f002 fc08 	bl	80037b8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa8:	4628      	mov	r0, r5
 8000faa:	b005      	add	sp, #20
 8000fac:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fae:	f000 fc11 	bl	80017d4 <Error_Handler>
 8000fb2:	e7dc      	b.n	8000f6e <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fb4:	f000 fc0e 	bl	80017d4 <Error_Handler>
 8000fb8:	e7e2      	b.n	8000f80 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fba:	f000 fc0b 	bl	80017d4 <Error_Handler>
 8000fbe:	e7e3      	b.n	8000f88 <ADC_ReadChannels+0x34>
 8000fc0:	20000134 	.word	0x20000134

08000fc4 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <SYS_InitMeasurement+0x8>)
 8000fc6:	4a02      	ldr	r2, [pc, #8]	; (8000fd0 <SYS_InitMeasurement+0xc>)
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	4770      	bx	lr
 8000fcc:	20000134 	.word	0x20000134
 8000fd0:	40012400 	.word	0x40012400

08000fd4 <SYS_GetBatteryLevel>:
{
 8000fd4:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <SYS_GetBatteryLevel+0x38>)
 8000fd8:	f7ff ffbc 	bl	8000f54 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fdc:	b1a0      	cbz	r0, 8001008 <SYS_GetBatteryLevel+0x34>
 8000fde:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <SYS_GetBatteryLevel+0x3c>)
 8000fe2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d007      	beq.n	8000ffe <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fee:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000ff2:	fb03 f000 	mul.w	r0, r3, r0
 8000ff6:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ffa:	b280      	uxth	r0, r0
 8000ffc:	e005      	b.n	800100a <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <SYS_GetBatteryLevel+0x40>)
 8001000:	fbb0 f0f2 	udiv	r0, r0, r2
 8001004:	b280      	uxth	r0, r0
 8001006:	e000      	b.n	800100a <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001008:	2000      	movs	r0, #0
}
 800100a:	bd08      	pop	{r3, pc}
 800100c:	b4002000 	.word	0xb4002000
 8001010:	1fff7500 	.word	0x1fff7500
 8001014:	004c08d8 	.word	0x004c08d8

08001018 <SYS_GetTemperatureLevel>:
{
 8001018:	b510      	push	{r4, lr}
 800101a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001022:	f7ff ffd7 	bl	8000fd4 <SYS_GetBatteryLevel>
 8001026:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001028:	4821      	ldr	r0, [pc, #132]	; (80010b0 <SYS_GetTemperatureLevel+0x98>)
 800102a:	f7ff ff93 	bl	8000f54 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SYS_GetTemperatureLevel+0x9c>)
 8001030:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001034:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001038:	428a      	cmp	r2, r1
 800103a:	d01d      	beq.n	8001078 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800103c:	fb00 f304 	mul.w	r3, r0, r4
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	4c1d      	ldr	r4, [pc, #116]	; (80010b8 <SYS_GetTemperatureLevel+0xa0>)
 8001044:	fba4 0303 	umull	r0, r3, r4, r3
 8001048:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	fb00 f303 	mul.w	r3, r0, r3
 8001052:	1a52      	subs	r2, r2, r1
 8001054:	fb93 f3f2 	sdiv	r3, r3, r2
 8001058:	331e      	adds	r3, #30
 800105a:	b21b      	sxth	r3, r3
 800105c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001060:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001064:	b21b      	sxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21b      	sxth	r3, r3
 800106a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 800106e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001072:	b200      	sxth	r0, r0
 8001074:	b002      	add	sp, #8
 8001076:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001078:	fb00 f404 	mul.w	r4, r0, r4
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <SYS_GetTemperatureLevel+0xa4>)
 800107e:	fba3 2304 	umull	r2, r3, r3, r4
 8001082:	1ae4      	subs	r4, r4, r3
 8001084:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001088:	0ae4      	lsrs	r4, r4, #11
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fb03 f404 	mul.w	r4, r3, r4
 8001092:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 8001096:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <SYS_GetTemperatureLevel+0xa8>)
 800109c:	fb83 2304 	smull	r2, r3, r3, r4
 80010a0:	17e4      	asrs	r4, r4, #31
 80010a2:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80010a6:	341e      	adds	r4, #30
 80010a8:	b224      	sxth	r4, r4
 80010aa:	f8ad 4006 	strh.w	r4, [sp, #6]
 80010ae:	e7d7      	b.n	8001060 <SYS_GetTemperatureLevel+0x48>
 80010b0:	b0001000 	.word	0xb0001000
 80010b4:	1fff7500 	.word	0x1fff7500
 80010b8:	09ee009f 	.word	0x09ee009f
 80010bc:	00100101 	.word	0x00100101
 80010c0:	68db8bad 	.word	0x68db8bad

080010c4 <SYS_Lectura_CP>:
{
 80010c4:	b508      	push	{r3, lr}
  voltaje_leer = ADC_ReadChannels(ADC_CHANNEL_4);
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <SYS_Lectura_CP+0x18>)
 80010c8:	f7ff ff44 	bl	8000f54 <ADC_ReadChannels>
  voltaje_CP = (voltaje_leer * 3300)/4096;
 80010cc:	b280      	uxth	r0, r0
 80010ce:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010d2:	fb03 f000 	mul.w	r0, r3, r0
}
 80010d6:	f3c0 300f 	ubfx	r0, r0, #12, #16
 80010da:	bd08      	pop	{r3, pc}
 80010dc:	10000010 	.word	0x10000010

080010e0 <WakeUpTimer_Cb>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void  WakeUpTimer_Cb(void *context)
{
  /*Nothing to do*/
}
 80010e0:	4770      	bx	lr

080010e2 <app_freertos_ms_to_tick>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    tick = (uint32_t)((((uint64_t)(ms)) * configTICK_RATE_HZ) / configTICK_RATE_HZ_1MS);
  }
  return tick;
}
 80010e2:	4770      	bx	lr

080010e4 <app_freertos_tick_to_ms>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    ms = (uint32_t)((((uint64_t)(tick)) * configTICK_RATE_HZ_1MS) / configTICK_RATE_HZ);
  }
  return ms;
}
 80010e4:	4770      	bx	lr

080010e6 <Cargador_Coche>:
	{
 80010e6:	b508      	push	{r3, lr}
		cargador_coche_inicio();
 80010e8:	f000 f898 	bl	800121c <cargador_coche_inicio>
		HAL_Delay(500); // Tarea periódica para la FSM
 80010ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f0:	f000 fdc6 	bl	8001c80 <HAL_Delay>
		while(1){
 80010f4:	e7f8      	b.n	80010e8 <Cargador_Coche+0x2>

080010f6 <StartDefaultTask>:
{
 80010f6:	b508      	push	{r3, lr}
  MX_LoRaWAN_Init();
 80010f8:	f001 f978 	bl	80023ec <MX_LoRaWAN_Init>
    osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	2101      	movs	r1, #1
 8001102:	4608      	mov	r0, r1
 8001104:	f006 fe2c 	bl	8007d60 <osThreadFlagsWait>
  for(;;)
 8001108:	e7f8      	b.n	80010fc <StartDefaultTask+0x6>
	...

0800110c <PreSleepProcessing>:
{
 800110c:	b570      	push	{r4, r5, r6, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	4604      	mov	r4, r0
  uint32_t WakeUpTimer_timeOut_ms = app_freertos_tick_to_ms(*ulExpectedIdleTime);
 8001112:	6800      	ldr	r0, [r0, #0]
 8001114:	f7ff ffe6 	bl	80010e4 <app_freertos_tick_to_ms>
 8001118:	4601      	mov	r1, r0
  UTIL_TIMER_Create(&WakeUpTimer, WakeUpTimer_timeOut_ms, UTIL_TIMER_ONESHOT, WakeUpTimer_Cb, NULL);
 800111a:	4e0a      	ldr	r6, [pc, #40]	; (8001144 <PreSleepProcessing+0x38>)
 800111c:	2500      	movs	r5, #0
 800111e:	9500      	str	r5, [sp, #0]
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <PreSleepProcessing+0x3c>)
 8001122:	462a      	mov	r2, r5
 8001124:	4630      	mov	r0, r6
 8001126:	f013 f9d7 	bl	80144d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&WakeUpTimer);
 800112a:	4630      	mov	r0, r6
 800112c:	f013 fa8c 	bl	8014648 <UTIL_TIMER_Start>
  Time_BeforeSleep = UTIL_TIMER_GetCurrentTime();
 8001130:	f013 f9f0 	bl	8014514 <UTIL_TIMER_GetCurrentTime>
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <PreSleepProcessing+0x40>)
 8001136:	6018      	str	r0, [r3, #0]
  UTIL_LPM_EnterLowPower();
 8001138:	f013 f8a6 	bl	8014288 <UTIL_LPM_EnterLowPower>
  *ulExpectedIdleTime = 0;
 800113c:	6025      	str	r5, [r4, #0]
}
 800113e:	b002      	add	sp, #8
 8001140:	bd70      	pop	{r4, r5, r6, pc}
 8001142:	bf00      	nop
 8001144:	200001a0 	.word	0x200001a0
 8001148:	080010e1 	.word	0x080010e1
 800114c:	2000019c 	.word	0x2000019c

08001150 <PostSleepProcessing>:
{
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	4604      	mov	r4, r0
  uint32_t SleepDuration = UTIL_TIMER_GetElapsedTime(Time_BeforeSleep);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <PostSleepProcessing+0x20>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	f013 f9e6 	bl	8014528 <UTIL_TIMER_GetElapsedTime>
 800115c:	4605      	mov	r5, r0
  UTIL_TIMER_Stop(&WakeUpTimer);
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <PostSleepProcessing+0x24>)
 8001160:	f013 fa18 	bl	8014594 <UTIL_TIMER_Stop>
  *ulExpectedIdleTime = app_freertos_ms_to_tick(SleepDuration);
 8001164:	4628      	mov	r0, r5
 8001166:	f7ff ffbc 	bl	80010e2 <app_freertos_ms_to_tick>
 800116a:	6020      	str	r0, [r4, #0]
}
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop
 8001170:	2000019c 	.word	0x2000019c
 8001174:	200001a0 	.word	0x200001a0

08001178 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001178:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800117a:	4a07      	ldr	r2, [pc, #28]	; (8001198 <MX_FREERTOS_Init+0x20>)
 800117c:	2100      	movs	r1, #0
 800117e:	4807      	ldr	r0, [pc, #28]	; (800119c <MX_FREERTOS_Init+0x24>)
 8001180:	f006 fd3a 	bl	8007bf8 <osThreadNew>
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <MX_FREERTOS_Init+0x28>)
 8001186:	6018      	str	r0, [r3, #0]
  THREADHandle = osThreadNew(Cargador_Coche, NULL, &THREAD_attributes);//Este es mi hilo para el CARGADOR DEL COCHE
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <MX_FREERTOS_Init+0x2c>)
 800118a:	2100      	movs	r1, #0
 800118c:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_FREERTOS_Init+0x30>)
 800118e:	f006 fd33 	bl	8007bf8 <osThreadNew>
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_FREERTOS_Init+0x34>)
 8001194:	6018      	str	r0, [r3, #0]
}
 8001196:	bd08      	pop	{r3, pc}
 8001198:	08014ca0 	.word	0x08014ca0
 800119c:	080010f7 	.word	0x080010f7
 80011a0:	200001b8 	.word	0x200001b8
 80011a4:	08014c7c 	.word	0x08014c7c
 80011a8:	080010e7 	.word	0x080010e7
 80011ac:	20000198 	.word	0x20000198

080011b0 <decodifica_estado>:
ESTADO_CARGADOR estado;


void decodifica_estado(uint16_t voltaje_CP)
{
	if ( voltaje_CP > 2800 ) // 3299mV -> +12V
 80011b0:	f5b0 6f2f 	cmp.w	r0, #2800	; 0xaf0
 80011b4:	d903      	bls.n	80011be <decodifica_estado+0xe>
			{
				estado = STANDBY;
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <decodifica_estado+0x68>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
 80011bc:	4770      	bx	lr
			}

	else if  (voltaje_CP > 1900  && voltaje_CP < 2800 )  // 2250mV -> +9V +-1
 80011be:	f2a0 736d 	subw	r3, r0, #1901	; 0x76d
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	f240 3282 	movw	r2, #898	; 0x382
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d803      	bhi.n	80011d4 <decodifica_estado+0x24>
			{
				estado = VEHICULO_DETECTADO;
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <decodifica_estado+0x68>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	4770      	bx	lr
			}

	else if ( voltaje_CP > 1000  && voltaje_CP < 1900 ) // 1500mV -> + 3V +-1
 80011d4:	f2a0 33e9 	subw	r3, r0, #1001	; 0x3e9
 80011d8:	b29b      	uxth	r3, r3
 80011da:	f240 3282 	movw	r2, #898	; 0x382
 80011de:	4293      	cmp	r3, r2
 80011e0:	d803      	bhi.n	80011ea <decodifica_estado+0x3a>
			{
				estado = CARGANDO;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <decodifica_estado+0x68>)
 80011e4:	2202      	movs	r2, #2
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	4770      	bx	lr
			}

	else if ( voltaje_CP > 600  && voltaje_CP < 1000 ) // 750mV -> + 6V +-1
 80011ea:	f2a0 2359 	subw	r3, r0, #601	; 0x259
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 80011f4:	d803      	bhi.n	80011fe <decodifica_estado+0x4e>
			{
				estado = VENTILACION;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <decodifica_estado+0x68>)
 80011f8:	2203      	movs	r2, #3
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	4770      	bx	lr
			}

	else if ( voltaje_CP > 50  && voltaje_CP < 600 ) //  0V
 80011fe:	3833      	subs	r0, #51	; 0x33
 8001200:	b280      	uxth	r0, r0
 8001202:	f5b0 7f09 	cmp.w	r0, #548	; 0x224
 8001206:	d803      	bhi.n	8001210 <decodifica_estado+0x60>
			{
				estado = NO_POWER;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <decodifica_estado+0x68>)
 800120a:	2204      	movs	r2, #4
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	4770      	bx	lr
			}
	else
			{
				estado = FALLO; //  - 12V
 8001210:	4b01      	ldr	r3, [pc, #4]	; (8001218 <decodifica_estado+0x68>)
 8001212:	2205      	movs	r2, #5
 8001214:	701a      	strb	r2, [r3, #0]
			}

}
 8001216:	4770      	bx	lr
 8001218:	200001bc 	.word	0x200001bc

0800121c <cargador_coche_inicio>:

/* Functions */


void cargador_coche_inicio()
{
 800121c:	b510      	push	{r4, lr}


	//while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)){

	voltaje_CP=GetLectura_CP();
 800121e:	f000 fcfd 	bl	8001c1c <GetLectura_CP>
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <cargador_coche_inicio+0x6c>)
 8001224:	8018      	strh	r0, [r3, #0]

	//}

	decodifica_estado(voltaje_CP);
 8001226:	f7ff ffc3 	bl	80011b0 <decodifica_estado>


	    switch (estado) {
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <cargador_coche_inicio+0x70>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b113      	cbz	r3, 8001236 <cargador_coche_inicio+0x1a>
 8001230:	2b03      	cmp	r3, #3
 8001232:	d014      	beq.n	800125e <cargador_coche_inicio+0x42>

	       	    break;
	        default:
	            break;
	    }
}
 8001234:	bd10      	pop	{r4, pc}
	        	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8001236:	4c16      	ldr	r4, [pc, #88]	; (8001290 <cargador_coche_inicio+0x74>)
 8001238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123c:	4620      	mov	r0, r4
 800123e:	f003 f998 	bl	8004572 <HAL_GPIO_TogglePin>
	        	HAL_Delay(1000);
 8001242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001246:	f000 fd1b 	bl	8001c80 <HAL_Delay>
	        	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800124a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800124e:	4620      	mov	r0, r4
 8001250:	f003 f98f 	bl	8004572 <HAL_GPIO_TogglePin>
	            HAL_Delay(1000);
 8001254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001258:	f000 fd12 	bl	8001c80 <HAL_Delay>
	            break;
 800125c:	e7ea      	b.n	8001234 <cargador_coche_inicio+0x18>
	        	HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 800125e:	4c0c      	ldr	r4, [pc, #48]	; (8001290 <cargador_coche_inicio+0x74>)
 8001260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001264:	4620      	mov	r0, r4
 8001266:	f003 f984 	bl	8004572 <HAL_GPIO_TogglePin>
	        	HAL_Delay(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126e:	f000 fd07 	bl	8001c80 <HAL_Delay>
	        	HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8001272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001276:	4620      	mov	r0, r4
 8001278:	f003 f97b 	bl	8004572 <HAL_GPIO_TogglePin>
	        	HAL_Delay(1000);
 800127c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001280:	f000 fcfe 	bl	8001c80 <HAL_Delay>
}
 8001284:	e7d6      	b.n	8001234 <cargador_coche_inicio+0x18>
 8001286:	bf00      	nop
 8001288:	200001be 	.word	0x200001be
 800128c:	200001bc 	.word	0x200001bc
 8001290:	48000400 	.word	0x48000400

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001294:	b500      	push	{lr}
 8001296:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800129e:	f042 0204 	orr.w	r2, r2, #4
 80012a2:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012a6:	f002 0204 	and.w	r2, r2, #4
 80012aa:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80012ac:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012b0:	f042 0201 	orr.w	r2, r2, #1
 80012b4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80012be:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2107      	movs	r1, #7
 80012c4:	200f      	movs	r0, #15
 80012c6:	f002 fb9f 	bl	8003a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f002 fbd4 	bl	8003a78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  /*
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
  */
}
 80012d0:	b003      	add	sp, #12
 80012d2:	f85d fb04 	ldr.w	pc, [sp], #4

080012d6 <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012d6:	e000      	b.n	80012da <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 80012d8:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80012da:	f010 0307 	ands.w	r3, r0, #7
 80012de:	d012      	beq.n	8001306 <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 80012e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80012e4:	2bff      	cmp	r3, #255	; 0xff
 80012e6:	d0f7      	beq.n	80012d8 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 80012e8:	2001      	movs	r0, #1
 80012ea:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 80012ec:	3901      	subs	r1, #1
  while (size != 0)
 80012ee:	b129      	cbz	r1, 80012fc <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 80012f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80012f4:	2bff      	cmp	r3, #255	; 0xff
 80012f6:	d0f9      	beq.n	80012ec <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 80012f8:	2001      	movs	r0, #1
 80012fa:	e002      	b.n	8001302 <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 80012fc:	2000      	movs	r0, #0
 80012fe:	e000      	b.n	8001302 <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001300:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001302:	bc10      	pop	{r4}
 8001304:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001306:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800130a:	d212      	bcs.n	8001332 <FLASH_IF_IsEmpty+0x5c>
{
 800130c:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 800130e:	4602      	mov	r2, r0
 8001310:	f852 4b08 	ldr.w	r4, [r2], #8
 8001314:	6840      	ldr	r0, [r0, #4]
 8001316:	f1b0 3fff 	cmp.w	r0, #4294967295
 800131a:	bf08      	it	eq
 800131c:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001320:	d1ee      	bne.n	8001300 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001322:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001324:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001326:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800132a:	d3f0      	bcc.n	800130e <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 800132c:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001330:	e7dd      	b.n	80012ee <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 8001332:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 8001336:	b129      	cbz	r1, 8001344 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 8001338:	f810 3b01 	ldrb.w	r3, [r0], #1
 800133c:	2bff      	cmp	r3, #255	; 0xff
 800133e:	d103      	bne.n	8001348 <FLASH_IF_IsEmpty+0x72>
    size--;
 8001340:	3901      	subs	r1, #1
 8001342:	e7f8      	b.n	8001336 <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 8001344:	2000      	movs	r0, #0
 8001346:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 8001348:	2001      	movs	r0, #1
}
 800134a:	4770      	bx	lr

0800134c <FLASH_IF_Write64>:
{
 800134c:	b570      	push	{r4, r5, r6, lr}
 800134e:	4604      	mov	r4, r0
 8001350:	4616      	mov	r6, r2
 8001352:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 8001354:	e005      	b.n	8001362 <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001356:	4632      	mov	r2, r6
 8001358:	462b      	mov	r3, r5
 800135a:	4621      	mov	r1, r4
 800135c:	2001      	movs	r0, #1
 800135e:	f002 feb7 	bl	80040d0 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001362:	6822      	ldr	r2, [r4, #0]
 8001364:	6863      	ldr	r3, [r4, #4]
 8001366:	42ab      	cmp	r3, r5
 8001368:	bf08      	it	eq
 800136a:	42b2      	cmpeq	r2, r6
 800136c:	d005      	beq.n	800137a <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800136e:	4904      	ldr	r1, [pc, #16]	; (8001380 <FLASH_IF_Write64+0x34>)
 8001370:	6909      	ldr	r1, [r1, #16]
 8001372:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 8001376:	d1fa      	bne.n	800136e <FLASH_IF_Write64+0x22>
 8001378:	e7ed      	b.n	8001356 <FLASH_IF_Write64+0xa>
}
 800137a:	2000      	movs	r0, #0
 800137c:	bd70      	pop	{r4, r5, r6, pc}
 800137e:	bf00      	nop
 8001380:	58004000 	.word	0x58004000

08001384 <FLASH_IF_Write_Buffer>:
{
 8001384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	4606      	mov	r6, r0
 800138c:	460c      	mov	r4, r1
 800138e:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001390:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 8001392:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001394:	e003      	b.n	800139e <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 8001396:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 8001398:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 800139a:	b9af      	cbnz	r7, 80013c8 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800139c:	3501      	adds	r5, #1
 800139e:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 80013a2:	d211      	bcs.n	80013c8 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013a4:	2208      	movs	r2, #8
 80013a6:	4621      	mov	r1, r4
 80013a8:	4668      	mov	r0, sp
 80013aa:	f012 ff91 	bl	80142d0 <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 80013ae:	9a00      	ldr	r2, [sp, #0]
 80013b0:	9b01      	ldr	r3, [sp, #4]
 80013b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b6:	bf08      	it	eq
 80013b8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013bc:	d0eb      	beq.n	8001396 <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 80013be:	4630      	mov	r0, r6
 80013c0:	f7ff ffc4 	bl	800134c <FLASH_IF_Write64>
 80013c4:	4607      	mov	r7, r0
 80013c6:	e7e6      	b.n	8001396 <FLASH_IF_Write_Buffer+0x12>
}
 80013c8:	4638      	mov	r0, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013d0 <FLASH_IF_EraseByPages>:
{
 80013d0:	b500      	push	{lr}
 80013d2:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80013d4:	2302      	movs	r3, #2
 80013d6:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 80013d8:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 80013da:	9103      	str	r1, [sp, #12]
  if (interrupt)
 80013dc:	b13a      	cbz	r2, 80013ee <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 80013de:	a801      	add	r0, sp, #4
 80013e0:	f002 ff3e 	bl	8004260 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80013e4:	b140      	cbz	r0, 80013f8 <FLASH_IF_EraseByPages+0x28>
 80013e6:	2802      	cmp	r0, #2
 80013e8:	d10a      	bne.n	8001400 <FLASH_IF_EraseByPages+0x30>
 80013ea:	2001      	movs	r0, #1
 80013ec:	e005      	b.n	80013fa <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 80013ee:	4669      	mov	r1, sp
 80013f0:	a801      	add	r0, sp, #4
 80013f2:	f002 fef5 	bl	80041e0 <HAL_FLASHEx_Erase>
 80013f6:	e7f5      	b.n	80013e4 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80013f8:	2000      	movs	r0, #0
}
 80013fa:	b005      	add	sp, #20
 80013fc:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001400:	f06f 0001 	mvn.w	r0, #1
 8001404:	e7f9      	b.n	80013fa <FLASH_IF_EraseByPages+0x2a>
	...

08001408 <FLASH_IF_Write>:
{
 8001408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800140c:	4693      	mov	fp, r2
 800140e:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001410:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001414:	4b3e      	ldr	r3, [pc, #248]	; (8001510 <FLASH_IF_Write+0x108>)
 8001416:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800141a:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <FLASH_IF_Write+0x10c>)
 800141c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001420:	fbb5 f2f3 	udiv	r2, r5, r3
 8001424:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001428:	eb00 0a0b 	add.w	sl, r0, fp
 800142c:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 8001430:	f10a 3aff 	add.w	sl, sl, #4294967295
 8001434:	fbba f2f3 	udiv	r2, sl, r3
 8001438:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 800143c:	2900      	cmp	r1, #0
 800143e:	d052      	beq.n	80014e6 <FLASH_IF_Write+0xde>
 8001440:	4606      	mov	r6, r0
 8001442:	0aed      	lsrs	r5, r5, #11
 8001444:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 8001448:	4688      	mov	r8, r1
 800144a:	f01b 0f07 	tst.w	fp, #7
 800144e:	d14d      	bne.n	80014ec <FLASH_IF_Write+0xe4>
 8001450:	f010 0f07 	tst.w	r0, #7
 8001454:	d14d      	bne.n	80014f2 <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <FLASH_IF_Write+0x110>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db4c      	blt.n	80014f8 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 800145e:	4555      	cmp	r5, sl
 8001460:	d004      	beq.n	800146c <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 8001462:	f3c0 040a 	ubfx	r4, r0, #0, #11
 8001466:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 800146a:	e00d      	b.n	8001488 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 800146c:	465c      	mov	r4, fp
 800146e:	e00b      	b.n	8001488 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001470:	4622      	mov	r2, r4
 8001472:	4641      	mov	r1, r8
 8001474:	4630      	mov	r0, r6
 8001476:	f7ff ff85 	bl	8001384 <FLASH_IF_Write_Buffer>
 800147a:	2800      	cmp	r0, #0
 800147c:	d145      	bne.n	800150a <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 800147e:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 8001480:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 8001482:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001486:	3501      	adds	r5, #1
 8001488:	4555      	cmp	r5, sl
 800148a:	d829      	bhi.n	80014e0 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800148c:	4621      	mov	r1, r4
 800148e:	4630      	mov	r0, r6
 8001490:	f7ff ff21 	bl	80012d6 <FLASH_IF_IsEmpty>
 8001494:	2800      	cmp	r0, #0
 8001496:	d0eb      	beq.n	8001470 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 8001498:	f1b9 0f00 	cmp.w	r9, #0
 800149c:	d02f      	beq.n	80014fe <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800149e:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 80014a2:	02ff      	lsls	r7, r7, #11
 80014a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a8:	4639      	mov	r1, r7
 80014aa:	4648      	mov	r0, r9
 80014ac:	f012 ff10 	bl	80142d0 <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 80014b0:	f3c6 000a 	ubfx	r0, r6, #0, #11
 80014b4:	b2a2      	uxth	r2, r4
 80014b6:	4641      	mov	r1, r8
 80014b8:	4448      	add	r0, r9
 80014ba:	f012 ff09 	bl	80142d0 <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 80014be:	2200      	movs	r2, #0
 80014c0:	2101      	movs	r1, #1
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7ff ff84 	bl	80013d0 <FLASH_IF_EraseByPages>
 80014c8:	b9e0      	cbnz	r0, 8001504 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80014ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014ce:	4649      	mov	r1, r9
 80014d0:	4638      	mov	r0, r7
 80014d2:	f7ff ff57 	bl	8001384 <FLASH_IF_Write_Buffer>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d0d1      	beq.n	800147e <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 80014da:	f06f 0002 	mvn.w	r0, #2
 80014de:	e000      	b.n	80014e2 <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 80014e0:	2000      	movs	r0, #0
}
 80014e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 80014e6:	f06f 0004 	mvn.w	r0, #4
 80014ea:	e7fa      	b.n	80014e2 <FLASH_IF_Write+0xda>
 80014ec:	f06f 0004 	mvn.w	r0, #4
 80014f0:	e7f7      	b.n	80014e2 <FLASH_IF_Write+0xda>
 80014f2:	f06f 0004 	mvn.w	r0, #4
 80014f6:	e7f4      	b.n	80014e2 <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 80014f8:	f06f 0003 	mvn.w	r0, #3
 80014fc:	e7f1      	b.n	80014e2 <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 80014fe:	f06f 0004 	mvn.w	r0, #4
 8001502:	e7ee      	b.n	80014e2 <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001504:	f06f 0001 	mvn.w	r0, #1
 8001508:	e7eb      	b.n	80014e2 <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 800150a:	f06f 0002 	mvn.w	r0, #2
 800150e:	e7e8      	b.n	80014e2 <FLASH_IF_Write+0xda>
 8001510:	1fff7000 	.word	0x1fff7000
 8001514:	03fffc00 	.word	0x03fffc00
 8001518:	58004000 	.word	0x58004000

0800151c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800151c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001520:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	2400      	movs	r4, #0
 8001524:	9403      	str	r4, [sp, #12]
 8001526:	9404      	str	r4, [sp, #16]
 8001528:	9405      	str	r4, [sp, #20]
 800152a:	9406      	str	r4, [sp, #24]
 800152c:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001534:	f042 0201 	orr.w	r2, r2, #1
 8001538:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800153a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800153c:	f002 0201 	and.w	r2, r2, #1
 8001540:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001542:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001546:	f042 0202 	orr.w	r2, r2, #2
 800154a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800154c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800154e:	f002 0202 	and.w	r2, r2, #2
 8001552:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001554:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001558:	f042 0204 	orr.w	r2, r2, #4
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001566:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001568:	4e2e      	ldr	r6, [pc, #184]	; (8001624 <MX_GPIO_Init+0x108>)
 800156a:	4622      	mov	r2, r4
 800156c:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 8001570:	4630      	mov	r0, r6
 8001572:	f002 fff9 	bl	8004568 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONTROL_CONTACTOR_GPIO_Port, CONTROL_CONTACTOR_Pin, GPIO_PIN_RESET);
 8001576:	4622      	mov	r2, r4
 8001578:	2140      	movs	r1, #64	; 0x40
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f002 fff3 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001582:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001586:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2501      	movs	r5, #1
 800158a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158e:	2302      	movs	r3, #2
 8001590:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001592:	a903      	add	r1, sp, #12
 8001594:	4630      	mov	r0, r6
 8001596:	f002 fe97 	bl	80042c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800159a:	f04f 0803 	mov.w	r8, #3
 800159e:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015a2:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80015a6:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	a903      	add	r1, sp, #12
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f002 fe8a 	bl	80042c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80015b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015b8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	a903      	add	r1, sp, #12
 80015c4:	4630      	mov	r0, r6
 80015c6:	f002 fe7f 	bl	80042c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTROL_CONTACTOR_Pin;
 80015ca:	2640      	movs	r6, #64	; 0x40
 80015cc:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CONTROL_CONTACTOR_GPIO_Port, &GPIO_InitStruct);
 80015d4:	a903      	add	r1, sp, #12
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f002 fe75 	bl	80042c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80015de:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015e0:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80015e4:	a903      	add	r1, sp, #12
 80015e6:	4810      	ldr	r0, [pc, #64]	; (8001628 <MX_GPIO_Init+0x10c>)
 80015e8:	f002 fe6e 	bl	80042c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80015ec:	4622      	mov	r2, r4
 80015ee:	2105      	movs	r1, #5
 80015f0:	2006      	movs	r0, #6
 80015f2:	f002 fa09 	bl	8003a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015f6:	2006      	movs	r0, #6
 80015f8:	f002 fa3e 	bl	8003a78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80015fc:	4622      	mov	r2, r4
 80015fe:	2105      	movs	r1, #5
 8001600:	2007      	movs	r0, #7
 8001602:	f002 fa01 	bl	8003a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001606:	2007      	movs	r0, #7
 8001608:	f002 fa36 	bl	8003a78 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800160c:	4622      	mov	r2, r4
 800160e:	2105      	movs	r1, #5
 8001610:	2016      	movs	r0, #22
 8001612:	f002 f9f9 	bl	8003a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001616:	2016      	movs	r0, #22
 8001618:	f002 fa2e 	bl	8003a78 <HAL_NVIC_EnableIRQ>

}
 800161c:	b008      	add	sp, #32
 800161e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001622:	bf00      	nop
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800

0800162c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800162c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800162e:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_I2C1_Init+0x50>)
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <MX_I2C1_Init+0x54>)
 8001632:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x0000090F;
 8001634:	f640 130f 	movw	r3, #2319	; 0x90f
 8001638:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163e:	2201      	movs	r2, #1
 8001640:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001642:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001644:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001646:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001648:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800164c:	f002 ffa8 	bl	80045a0 <HAL_I2C_Init>
 8001650:	b950      	cbnz	r0, 8001668 <MX_I2C1_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_I2C1_Init+0x50>)
 8001656:	f003 f801 	bl	800465c <HAL_I2CEx_ConfigAnalogFilter>
 800165a:	b940      	cbnz	r0, 800166e <MX_I2C1_Init+0x42>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	4807      	ldr	r0, [pc, #28]	; (800167c <MX_I2C1_Init+0x50>)
 8001660:	f003 f82a 	bl	80046b8 <HAL_I2CEx_ConfigDigitalFilter>
 8001664:	b930      	cbnz	r0, 8001674 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001666:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001668:	f000 f8b4 	bl	80017d4 <Error_Handler>
 800166c:	e7f1      	b.n	8001652 <MX_I2C1_Init+0x26>
    Error_Handler();
 800166e:	f000 f8b1 	bl	80017d4 <Error_Handler>
 8001672:	e7f3      	b.n	800165c <MX_I2C1_Init+0x30>
    Error_Handler();
 8001674:	f000 f8ae 	bl	80017d4 <Error_Handler>
}
 8001678:	e7f5      	b.n	8001666 <MX_I2C1_Init+0x3a>
 800167a:	bf00      	nop
 800167c:	200001c0 	.word	0x200001c0
 8001680:	40005400 	.word	0x40005400

08001684 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001684:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001686:	4813      	ldr	r0, [pc, #76]	; (80016d4 <MX_I2C2_Init+0x50>)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_I2C2_Init+0x54>)
 800168a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x0000090F;
 800168c:	f640 130f 	movw	r3, #2319	; 0x90f
 8001690:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001696:	2201      	movs	r2, #1
 8001698:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800169a:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800169c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800169e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a0:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016a4:	f002 ff7c 	bl	80045a0 <HAL_I2C_Init>
 80016a8:	b950      	cbnz	r0, 80016c0 <MX_I2C2_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <MX_I2C2_Init+0x50>)
 80016ae:	f002 ffd5 	bl	800465c <HAL_I2CEx_ConfigAnalogFilter>
 80016b2:	b940      	cbnz	r0, 80016c6 <MX_I2C2_Init+0x42>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <MX_I2C2_Init+0x50>)
 80016b8:	f002 fffe 	bl	80046b8 <HAL_I2CEx_ConfigDigitalFilter>
 80016bc:	b930      	cbnz	r0, 80016cc <MX_I2C2_Init+0x48>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016c0:	f000 f888 	bl	80017d4 <Error_Handler>
 80016c4:	e7f1      	b.n	80016aa <MX_I2C2_Init+0x26>
    Error_Handler();
 80016c6:	f000 f885 	bl	80017d4 <Error_Handler>
 80016ca:	e7f3      	b.n	80016b4 <MX_I2C2_Init+0x30>
    Error_Handler();
 80016cc:	f000 f882 	bl	80017d4 <Error_Handler>
}
 80016d0:	e7f5      	b.n	80016be <MX_I2C2_Init+0x3a>
 80016d2:	bf00      	nop
 80016d4:	2000020c 	.word	0x2000020c
 80016d8:	40005800 	.word	0x40005800

080016dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	b098      	sub	sp, #96	; 0x60
 80016e0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e2:	2100      	movs	r1, #0
 80016e4:	9113      	str	r1, [sp, #76]	; 0x4c
 80016e6:	9114      	str	r1, [sp, #80]	; 0x50
 80016e8:	9115      	str	r1, [sp, #84]	; 0x54
 80016ea:	9116      	str	r1, [sp, #88]	; 0x58
 80016ec:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ee:	2238      	movs	r2, #56	; 0x38
 80016f0:	a805      	add	r0, sp, #20
 80016f2:	f013 f9e1 	bl	8014ab8 <memset>
  if(i2cHandle->Instance==I2C1)
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	4a33      	ldr	r2, [pc, #204]	; (80017c8 <HAL_I2C_MspInit+0xec>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_I2C_MspInit+0x2c>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 80016fe:	4a33      	ldr	r2, [pc, #204]	; (80017cc <HAL_I2C_MspInit+0xf0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d031      	beq.n	8001768 <HAL_I2C_MspInit+0x8c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001704:	b018      	add	sp, #96	; 0x60
 8001706:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;//100000;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;//100000;
 800170c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001710:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001712:	a805      	add	r0, sp, #20
 8001714:	f003 fe26 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 8001718:	bb18      	cbnz	r0, 8001762 <HAL_I2C_MspInit+0x86>
  SET_BIT(RCC->AHB2ENR, Periphs);
 800171a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800171e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001726:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800172e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001730:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001734:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001736:	2312      	movs	r3, #18
 8001738:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;//GPIO_PULLUP;
 800173a:	2301      	movs	r3, #1
 800173c:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	2300      	movs	r3, #0
 8001740:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001742:	2304      	movs	r3, #4
 8001744:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	a913      	add	r1, sp, #76	; 0x4c
 8001748:	4821      	ldr	r0, [pc, #132]	; (80017d0 <HAL_I2C_MspInit+0xf4>)
 800174a:	f002 fdbd 	bl	80042c8 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800174e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001754:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001756:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800175e:	9b01      	ldr	r3, [sp, #4]
}
 8001760:	e7d0      	b.n	8001704 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8001762:	f000 f837 	bl	80017d4 <Error_Handler>
 8001766:	e7d8      	b.n	800171a <HAL_I2C_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection =10240;// RCC_PERIPHCLK_I2C2;
 8001768:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800176c:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c2ClockSelection = 10240;//RCC_I2C2CLKSOURCE_PCLK1;
 800176e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001770:	a805      	add	r0, sp, #20
 8001772:	f003 fdf7 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	bb20      	cbnz	r0, 80017c2 <HAL_I2C_MspInit+0xe6>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001778:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800177c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001784:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800178c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 800178e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001792:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001794:	2312      	movs	r3, #18
 8001796:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8001798:	2301      	movs	r3, #1
 800179a:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;//GPIO_SPEED_FREQ_LOW;
 800179c:	2302      	movs	r3, #2
 800179e:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017a0:	2304      	movs	r3, #4
 80017a2:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	a913      	add	r1, sp, #76	; 0x4c
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f002 fd8d 	bl	80042c8 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b4:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017bc:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80017be:	9b03      	ldr	r3, [sp, #12]
}
 80017c0:	e7a0      	b.n	8001704 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80017c2:	f000 f807 	bl	80017d4 <Error_Handler>
 80017c6:	e7d7      	b.n	8001778 <HAL_I2C_MspInit+0x9c>
 80017c8:	40005400 	.word	0x40005400
 80017cc:	40005800 	.word	0x40005800
 80017d0:	48000400 	.word	0x48000400

080017d4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <Error_Handler+0x2>

080017d8 <SystemClock_Config>:
{
 80017d8:	b510      	push	{r4, lr}
 80017da:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017dc:	2248      	movs	r2, #72	; 0x48
 80017de:	2100      	movs	r1, #0
 80017e0:	a808      	add	r0, sp, #32
 80017e2:	f013 f969 	bl	8014ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e6:	2400      	movs	r4, #0
 80017e8:	9401      	str	r4, [sp, #4]
 80017ea:	9402      	str	r4, [sp, #8]
 80017ec:	9403      	str	r4, [sp, #12]
 80017ee:	9404      	str	r4, [sp, #16]
 80017f0:	9405      	str	r4, [sp, #20]
 80017f2:	9406      	str	r4, [sp, #24]
 80017f4:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80017f6:	f002 ff8b 	bl	8004710 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80017fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001802:	f023 0318 	bic.w	r3, r3, #24
 8001806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800180a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800180e:	6813      	ldr	r3, [r2, #0]
 8001810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001824:	2324      	movs	r3, #36	; 0x24
 8001826:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001828:	2381      	movs	r3, #129	; 0x81
 800182a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800182c:	2301      	movs	r3, #1
 800182e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001830:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001832:	23b0      	movs	r3, #176	; 0xb0
 8001834:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001836:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001838:	a808      	add	r0, sp, #32
 800183a:	f003 f903 	bl	8004a44 <HAL_RCC_OscConfig>
 800183e:	b988      	cbnz	r0, 8001864 <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001840:	234f      	movs	r3, #79	; 0x4f
 8001842:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001844:	2300      	movs	r3, #0
 8001846:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800184c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001850:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001852:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001854:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001856:	2102      	movs	r1, #2
 8001858:	a801      	add	r0, sp, #4
 800185a:	f003 fc2f 	bl	80050bc <HAL_RCC_ClockConfig>
 800185e:	b918      	cbnz	r0, 8001868 <SystemClock_Config+0x90>
}
 8001860:	b01a      	add	sp, #104	; 0x68
 8001862:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001864:	f7ff ffb6 	bl	80017d4 <Error_Handler>
    Error_Handler();
 8001868:	f7ff ffb4 	bl	80017d4 <Error_Handler>

0800186c <main>:
{
 800186c:	b508      	push	{r3, lr}
  HAL_Init();
 800186e:	f001 fb87 	bl	8002f80 <HAL_Init>
  SystemClock_Config();
 8001872:	f7ff ffb1 	bl	80017d8 <SystemClock_Config>
  MX_GPIO_Init();
 8001876:	f7ff fe51 	bl	800151c <MX_GPIO_Init>
  MX_I2C1_Init();
 800187a:	f7ff fed7 	bl	800162c <MX_I2C1_Init>
  MX_I2C2_Init();
 800187e:	f7ff ff01 	bl	8001684 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001882:	f000 faab 	bl	8001ddc <MX_TIM1_Init>
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) //Aquí inicio el PWM para el CP.
 8001886:	2104      	movs	r1, #4
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <main+0x38>)
 800188a:	f004 fed9 	bl	8006640 <HAL_TIM_PWM_Start>
 800188e:	b108      	cbz	r0, 8001894 <main+0x28>
     Error_Handler();
 8001890:	f7ff ffa0 	bl	80017d4 <Error_Handler>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001894:	f006 f96e 	bl	8007b74 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001898:	f7ff fc6e 	bl	8001178 <MX_FREERTOS_Init>
  osKernelStart();
 800189c:	f006 f988 	bl	8007bb0 <osKernelStart>
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <main+0x34>
 80018a2:	bf00      	nop
 80018a4:	200002a0 	.word	0x200002a0

080018a8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018a8:	b500      	push	{lr}
 80018aa:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80018ac:	222c      	movs	r2, #44	; 0x2c
 80018ae:	2100      	movs	r1, #0
 80018b0:	a801      	add	r0, sp, #4
 80018b2:	f013 f901 	bl	8014ab8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018b6:	4819      	ldr	r0, [pc, #100]	; (800191c <MX_RTC_Init+0x74>)
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_RTC_Init+0x78>)
 80018ba:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80018bc:	231f      	movs	r3, #31
 80018be:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018c4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018c6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018cc:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018ce:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80018d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018d6:	f003 ff57 	bl	8005788 <HAL_RTC_Init>
 80018da:	b9a8      	cbnz	r0, 8001908 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80018dc:	480f      	ldr	r0, [pc, #60]	; (800191c <MX_RTC_Init+0x74>)
 80018de:	f004 f88d 	bl	80059fc <HAL_RTCEx_SetSSRU_IT>
 80018e2:	b9a0      	cbnz	r0, 800190e <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80018e4:	2200      	movs	r2, #0
 80018e6:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80018e8:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80018ea:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80018ec:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018f0:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80018f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80018f8:	a901      	add	r1, sp, #4
 80018fa:	4808      	ldr	r0, [pc, #32]	; (800191c <MX_RTC_Init+0x74>)
 80018fc:	f003 ffa2 	bl	8005844 <HAL_RTC_SetAlarm_IT>
 8001900:	b940      	cbnz	r0, 8001914 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001902:	b00d      	add	sp, #52	; 0x34
 8001904:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001908:	f7ff ff64 	bl	80017d4 <Error_Handler>
 800190c:	e7e6      	b.n	80018dc <MX_RTC_Init+0x34>
    Error_Handler();
 800190e:	f7ff ff61 	bl	80017d4 <Error_Handler>
 8001912:	e7e7      	b.n	80018e4 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001914:	f7ff ff5e 	bl	80017d4 <Error_Handler>
}
 8001918:	e7f3      	b.n	8001902 <MX_RTC_Init+0x5a>
 800191a:	bf00      	nop
 800191c:	20000258 	.word	0x20000258
 8001920:	40002800 	.word	0x40002800

08001924 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001924:	b510      	push	{r4, lr}
 8001926:	b090      	sub	sp, #64	; 0x40
 8001928:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800192a:	2238      	movs	r2, #56	; 0x38
 800192c:	2100      	movs	r1, #0
 800192e:	a802      	add	r0, sp, #8
 8001930:	f013 f8c2 	bl	8014ab8 <memset>
  if(rtcHandle->Instance==RTC)
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <HAL_RTC_MspInit+0x7c>)
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800193c:	b010      	add	sp, #64	; 0x40
 800193e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001944:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194a:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194c:	a802      	add	r0, sp, #8
 800194e:	f003 fd09 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 8001952:	bb08      	cbnz	r0, 8001998 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800195c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001966:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800196a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001972:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001974:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 5, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2105      	movs	r1, #5
 800197a:	2002      	movs	r0, #2
 800197c:	f002 f844 	bl	8003a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001980:	2002      	movs	r0, #2
 8001982:	f002 f879 	bl	8003a78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2105      	movs	r1, #5
 800198a:	202a      	movs	r0, #42	; 0x2a
 800198c:	f002 f83c 	bl	8003a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001990:	202a      	movs	r0, #42	; 0x2a
 8001992:	f002 f871 	bl	8003a78 <HAL_NVIC_EnableIRQ>
}
 8001996:	e7d1      	b.n	800193c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001998:	f7ff ff1c 	bl	80017d4 <Error_Handler>
 800199c:	e7da      	b.n	8001954 <HAL_RTC_MspInit+0x30>
 800199e:	bf00      	nop
 80019a0:	40002800 	.word	0x40002800

080019a4 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80019a4:	4770      	bx	lr

080019a6 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80019a6:	4770      	bx	lr

080019a8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80019a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80019aa:	f001 faff 	bl	8002fac <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80019ae:	2001      	movs	r0, #1
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <PWR_EnterStopMode+0x14>)
 80019b2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80019b6:	f002 ff0f 	bl	80047d8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80019ba:	bd08      	pop	{r3, pc}
 80019bc:	58000400 	.word	0x58000400

080019c0 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80019c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80019c2:	f001 fafa 	bl	8002fba <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80019c6:	bd08      	pop	{r3, pc}

080019c8 <PWR_ExitStopMode>:
{
 80019c8:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80019ca:	f001 faf6 	bl	8002fba <HAL_ResumeTick>
  vcom_Resume();
 80019ce:	f000 fccd 	bl	800236c <vcom_Resume>
}
 80019d2:	bd08      	pop	{r3, pc}

080019d4 <PWR_EnterSleepMode>:
{
 80019d4:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80019d6:	f001 fae9 	bl	8002fac <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80019da:	2101      	movs	r1, #1
 80019dc:	2000      	movs	r0, #0
 80019de:	f002 fe9f 	bl	8004720 <HAL_PWR_EnterSLEEPMode>
}
 80019e2:	bd08      	pop	{r3, pc}

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	210f      	movs	r1, #15
 80019ea:	f06f 0001 	mvn.w	r0, #1
 80019ee:	f002 f80b 	bl	8003a08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f2:	bd08      	pop	{r3, pc}

080019f4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <NMI_Handler>

080019f6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler>

080019f8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler>

080019fa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler>

080019fc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler>

080019fe <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	4770      	bx	lr

08001a00 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001a00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001a02:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001a04:	f004 f826 	bl	8005a54 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001a08:	bd08      	pop	{r3, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000258 	.word	0x20000258

08001a10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f002 fdb6 	bl	8004584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a18:	bd08      	pop	{r3, pc}

08001a1a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a1a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f002 fdb1 	bl	8004584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a22:	bd08      	pop	{r3, pc}

08001a24 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a26:	4802      	ldr	r0, [pc, #8]	; (8001a30 <DMA1_Channel5_IRQHandler+0xc>)
 8001a28:	f002 fa44 	bl	8003eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001a2c:	bd08      	pop	{r3, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002f4 	.word	0x200002f4

08001a34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001a36:	2040      	movs	r0, #64	; 0x40
 8001a38:	f002 fda4 	bl	8004584 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a3c:	bd08      	pop	{r3, pc}
	...

08001a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a42:	4802      	ldr	r0, [pc, #8]	; (8001a4c <USART2_IRQHandler+0xc>)
 8001a44:	f005 f82a 	bl	8006a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a48:	bd08      	pop	{r3, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000354 	.word	0x20000354

08001a50 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a52:	4802      	ldr	r0, [pc, #8]	; (8001a5c <RTC_Alarm_IRQHandler+0xc>)
 8001a54:	f003 fe10 	bl	8005678 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a58:	bd08      	pop	{r3, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000258 	.word	0x20000258

08001a60 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a62:	4802      	ldr	r0, [pc, #8]	; (8001a6c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001a64:	f004 faa0 	bl	8005fa8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a68:	bd08      	pop	{r3, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000290 	.word	0x20000290

08001a70 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001a70:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_SUBGHZ_Init+0x18>)
 8001a74:	2308      	movs	r3, #8
 8001a76:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001a78:	f004 f822 	bl	8005ac0 <HAL_SUBGHZ_Init>
 8001a7c:	b900      	cbnz	r0, 8001a80 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001a7e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a80:	f7ff fea8 	bl	80017d4 <Error_Handler>
}
 8001a84:	e7fb      	b.n	8001a7e <MX_SUBGHZ_Init+0xe>
 8001a86:	bf00      	nop
 8001a88:	20000290 	.word	0x20000290

08001a8c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a8c:	b500      	push	{lr}
 8001a8e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001aa4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	2032      	movs	r0, #50	; 0x32
 8001aac:	f001 ffac 	bl	8003a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ab0:	2032      	movs	r0, #50	; 0x32
 8001ab2:	f001 ffe1 	bl	8003a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ab6:	b003      	add	sp, #12
 8001ab8:	f85d fb04 	ldr.w	pc, [sp], #4

08001abc <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001abc:	b40c      	push	{r2, r3}
 8001abe:	b500      	push	{lr}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	ab04      	add	r3, sp, #16
 8001ac4:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001ac8:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001aca:	f012 feff 	bl	80148cc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001ace:	b003      	add	sp, #12
 8001ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ad4:	b002      	add	sp, #8
 8001ad6:	4770      	bx	lr

08001ad8 <TimestampNow>:
{
 8001ad8:	b530      	push	{r4, r5, lr}
 8001ada:	b085      	sub	sp, #20
 8001adc:	4604      	mov	r4, r0
 8001ade:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001ae0:	a802      	add	r0, sp, #8
 8001ae2:	f012 fc69 	bl	80143b8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001ae6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	9b02      	ldr	r3, [sp, #8]
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <TimestampNow+0x2c>)
 8001af0:	2110      	movs	r1, #16
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff ffe2 	bl	8001abc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001af8:	4620      	mov	r0, r4
 8001afa:	f7fe fb41 	bl	8000180 <strlen>
 8001afe:	8028      	strh	r0, [r5, #0]
}
 8001b00:	b005      	add	sp, #20
 8001b02:	bd30      	pop	{r4, r5, pc}
 8001b04:	08014cdc 	.word	0x08014cdc

08001b08 <SystemApp_Init>:
{
 8001b08:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b0e:	6893      	ldr	r3, [r2, #8]
 8001b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b14:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001b16:	f012 fcd3 	bl	80144c0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001b1a:	2401      	movs	r4, #1
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <SystemApp_Init+0x4c>)
 8001b1e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001b20:	f000 f8b8 	bl	8001c94 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001b24:	f012 fa4a 	bl	8013fbc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <SystemApp_Init+0x50>)
 8001b2a:	f012 fa61 	bl	8013ff0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <SystemApp_Init+0x54>)
 8001b30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b34:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001b36:	2002      	movs	r0, #2
 8001b38:	f012 fa60 	bl	8013ffc <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001b3c:	f7ff fa42 	bl	8000fc4 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001b40:	f000 f908 	bl	8001d54 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001b44:	f012 fb6a 	bl	801421c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001b48:	4621      	mov	r1, r4
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f012 fb86 	bl	801425c <UTIL_LPM_SetOffMode>
}
 8001b50:	bd10      	pop	{r4, pc}
 8001b52:	bf00      	nop
 8001b54:	2000029c 	.word	0x2000029c
 8001b58:	08001ad9 	.word	0x08001ad9
 8001b5c:	58004000 	.word	0x58004000

08001b60 <GetBatteryLevel>:
{
 8001b60:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001b62:	f7ff fa37 	bl	8000fd4 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001b66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b6a:	4298      	cmp	r0, r3
 8001b6c:	d80d      	bhi.n	8001b8a <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001b6e:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001b72:	d30c      	bcc.n	8001b8e <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001b74:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001b78:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001b7c:	0040      	lsls	r0, r0, #1
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <GetBatteryLevel+0x34>)
 8001b80:	fba3 3000 	umull	r3, r0, r3, r0
 8001b84:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001b88:	e000      	b.n	8001b8c <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001b8a:	20fe      	movs	r0, #254	; 0xfe
}
 8001b8c:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e7fc      	b.n	8001b8c <GetBatteryLevel+0x2c>
 8001b92:	bf00      	nop
 8001b94:	1b4e81b5 	.word	0x1b4e81b5

08001b98 <GetTemperatureLevel>:
{
 8001b98:	b500      	push	{lr}
 8001b9a:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001b9c:	4668      	mov	r0, sp
 8001b9e:	f000 f8bd 	bl	8001d1c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001ba2:	9801      	ldr	r0, [sp, #4]
 8001ba4:	f7fe ffbe 	bl	8000b24 <__aeabi_f2iz>
}
 8001ba8:	b200      	sxth	r0, r0
 8001baa:	b007      	add	sp, #28
 8001bac:	f85d fb04 	ldr.w	pc, [sp], #4

08001bb0 <GetUniqueId>:
{
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <GetUniqueId+0x68>)
 8001bb6:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d013      	beq.n	8001be8 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001bc0:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001bc2:	0a1a      	lsrs	r2, r3, #8
 8001bc4:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001bc6:	0c1a      	lsrs	r2, r3, #16
 8001bc8:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001bca:	0e1b      	lsrs	r3, r3, #24
 8001bcc:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <GetUniqueId+0x68>)
 8001bd0:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001bd4:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001bd6:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001bda:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001bdc:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001bde:	0c1a      	lsrs	r2, r3, #16
 8001be0:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001be2:	0e1b      	lsrs	r3, r3, #24
 8001be4:	7003      	strb	r3, [r0, #0]
}
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001be8:	f001 f9ee 	bl	8002fc8 <HAL_GetUIDw0>
 8001bec:	4605      	mov	r5, r0
 8001bee:	f001 f9f7 	bl	8002fe0 <HAL_GetUIDw2>
 8001bf2:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001bf4:	f001 f9ee 	bl	8002fd4 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001bf8:	0e2b      	lsrs	r3, r5, #24
 8001bfa:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001bfc:	0c2b      	lsrs	r3, r5, #16
 8001bfe:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001c00:	0a2b      	lsrs	r3, r5, #8
 8001c02:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001c04:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001c06:	0e03      	lsrs	r3, r0, #24
 8001c08:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001c0a:	0c03      	lsrs	r3, r0, #16
 8001c0c:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001c0e:	0a03      	lsrs	r3, r0, #8
 8001c10:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001c12:	7020      	strb	r0, [r4, #0]
 8001c14:	e7e7      	b.n	8001be6 <GetUniqueId+0x36>
 8001c16:	bf00      	nop
 8001c18:	1fff7000 	.word	0x1fff7000

08001c1c <GetLectura_CP>:
  {
 8001c1c:	b508      	push	{r3, lr}
	  voltaje_CP = (uint16_t) SYS_Lectura_CP();
 8001c1e:	f7ff fa51 	bl	80010c4 <SYS_Lectura_CP>
  }
 8001c22:	bd08      	pop	{r3, pc}

08001c24 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <GetDevAddr+0x24>)
 8001c26:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 8001c2a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001c2e:	d000      	beq.n	8001c32 <GetDevAddr+0xe>
}
 8001c30:	4770      	bx	lr
{
 8001c32:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c34:	f001 f9c8 	bl	8002fc8 <HAL_GetUIDw0>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	f001 f9cb 	bl	8002fd4 <HAL_GetUIDw1>
 8001c3e:	4044      	eors	r4, r0
 8001c40:	f001 f9ce 	bl	8002fe0 <HAL_GetUIDw2>
 8001c44:	4060      	eors	r0, r4
}
 8001c46:	bd10      	pop	{r4, pc}
 8001c48:	1fff7000 	.word	0x1fff7000

08001c4c <UTIL_ADV_TRACE_PreSendHook>:
{
 8001c4c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2002      	movs	r0, #2
 8001c52:	f012 faed 	bl	8014230 <UTIL_LPM_SetStopMode>
}
 8001c56:	bd08      	pop	{r3, pc}

08001c58 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001c58:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f012 fae7 	bl	8014230 <UTIL_LPM_SetStopMode>
}
 8001c62:	bd08      	pop	{r3, pc}

08001c64 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001c64:	2000      	movs	r0, #0
 8001c66:	4770      	bx	lr

08001c68 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c68:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <HAL_GetTick+0x14>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b90b      	cbnz	r3, 8001c74 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001c70:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001c72:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001c74:	f000 f944 	bl	8001f00 <TIMER_IF_GetTimerValue>
 8001c78:	e7fb      	b.n	8001c72 <HAL_GetTick+0xa>
 8001c7a:	bf00      	nop
 8001c7c:	2000029c 	.word	0x2000029c

08001c80 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c80:	b500      	push	{lr}
 8001c82:	b083      	sub	sp, #12
 8001c84:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c86:	9801      	ldr	r0, [sp, #4]
 8001c88:	f000 fa20 	bl	80020cc <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c8c:	b003      	add	sp, #12
 8001c8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c94 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c96:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001c98:	f001 f9a8 	bl	8002fec <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001c9c:	f001 f9ae 	bl	8002ffc <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001ca0:	f001 f9b4 	bl	800300c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001ca4:	2400      	movs	r4, #0
 8001ca6:	9403      	str	r4, [sp, #12]
 8001ca8:	9404      	str	r4, [sp, #16]
 8001caa:	9405      	str	r4, [sp, #20]
 8001cac:	9406      	str	r4, [sp, #24]
 8001cae:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cbe:	f042 0202 	orr.w	r2, r2, #2
 8001cc2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cc6:	f002 0202 	and.w	r2, r2, #2
 8001cca:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001ccc:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cd0:	f042 0202 	orr.w	r2, r2, #2
 8001cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001cde:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001ce0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001ce4:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001ce6:	4d0c      	ldr	r5, [pc, #48]	; (8001d18 <DBG_Init+0x84>)
 8001ce8:	a903      	add	r1, sp, #12
 8001cea:	4628      	mov	r0, r5
 8001cec:	f002 faec 	bl	80042c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001cf0:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001cf4:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001cf6:	a903      	add	r1, sp, #12
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f002 fae5 	bl	80042c8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001cfe:	4622      	mov	r2, r4
 8001d00:	4639      	mov	r1, r7
 8001d02:	4628      	mov	r0, r5
 8001d04:	f002 fc30 	bl	8004568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001d08:	4622      	mov	r2, r4
 8001d0a:	4631      	mov	r1, r6
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f002 fc2b 	bl	8004568 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001d12:	b009      	add	sp, #36	; 0x24
 8001d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	48000400 	.word	0x48000400

08001d1c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001d1c:	b510      	push	{r4, lr}
 8001d1e:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001d20:	f7ff f97a 	bl	8001018 <SYS_GetTemperatureLevel>
 8001d24:	f340 200f 	sbfx	r0, r0, #8, #16
 8001d28:	f7fe fd58 	bl	80007dc <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <EnvSensors_Read+0x28>)
 8001d2e:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001d30:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <EnvSensors_Read+0x2c>)
 8001d34:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <EnvSensors_Read+0x30>)
 8001d38:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <EnvSensors_Read+0x34>)
 8001d3c:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001d3e:	2000      	movs	r0, #0
 8001d40:	bd10      	pop	{r4, pc}
 8001d42:	bf00      	nop
 8001d44:	42480000 	.word	0x42480000
 8001d48:	447a0000 	.word	0x447a0000
 8001d4c:	003e090d 	.word	0x003e090d
 8001d50:	000503ab 	.word	0x000503ab

08001d54 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001d54:	2000      	movs	r0, #0
 8001d56:	4770      	bx	lr

08001d58 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8001d58:	6802      	ldr	r2, [r0, #0]
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_TIM_PWM_MspInit+0x28>)
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d000      	beq.n	8001d62 <HAL_TIM_PWM_MspInit+0xa>
 8001d60:	4770      	bx	lr
{
 8001d62:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6e:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d76:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d78:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d7a:	b002      	add	sp, #8
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40012c00 	.word	0x40012c00

08001d84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d84:	b500      	push	{lr}
 8001d86:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	9303      	str	r3, [sp, #12]
 8001d90:	9304      	str	r3, [sp, #16]
 8001d92:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 8001d94:	6802      	ldr	r2, [r0, #0]
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_TIM_MspPostInit+0x54>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d002      	beq.n	8001da2 <HAL_TIM_MspPostInit+0x1e>


  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d9c:	b007      	add	sp, #28
 8001d9e:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001db6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dbc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	a901      	add	r1, sp, #4
 8001dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd2:	f002 fa79 	bl	80042c8 <HAL_GPIO_Init>
}
 8001dd6:	e7e1      	b.n	8001d9c <HAL_TIM_MspPostInit+0x18>
 8001dd8:	40012c00 	.word	0x40012c00

08001ddc <MX_TIM1_Init>:
{
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	2400      	movs	r4, #0
 8001de2:	9415      	str	r4, [sp, #84]	; 0x54
 8001de4:	9416      	str	r4, [sp, #88]	; 0x58
 8001de6:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de8:	940e      	str	r4, [sp, #56]	; 0x38
 8001dea:	940f      	str	r4, [sp, #60]	; 0x3c
 8001dec:	9410      	str	r4, [sp, #64]	; 0x40
 8001dee:	9411      	str	r4, [sp, #68]	; 0x44
 8001df0:	9412      	str	r4, [sp, #72]	; 0x48
 8001df2:	9413      	str	r4, [sp, #76]	; 0x4c
 8001df4:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df6:	2234      	movs	r2, #52	; 0x34
 8001df8:	4621      	mov	r1, r4
 8001dfa:	a801      	add	r0, sp, #4
 8001dfc:	f012 fe5c 	bl	8014ab8 <memset>
  htim1.Instance = TIM1;
 8001e00:	4828      	ldr	r0, [pc, #160]	; (8001ea4 <MX_TIM1_Init+0xc8>)
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_TIM1_Init+0xcc>)
 8001e04:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8001e06:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 6000;
 8001e0a:	f241 7370 	movw	r3, #6000	; 0x1770
 8001e0e:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e10:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e12:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e16:	f004 fafb 	bl	8006410 <HAL_TIM_PWM_Init>
 8001e1a:	2800      	cmp	r0, #0
 8001e1c:	d136      	bne.n	8001e8c <MX_TIM1_Init+0xb0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e22:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e24:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e26:	a915      	add	r1, sp, #84	; 0x54
 8001e28:	481e      	ldr	r0, [pc, #120]	; (8001ea4 <MX_TIM1_Init+0xc8>)
 8001e2a:	f004 fc9b 	bl	8006764 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d12f      	bne.n	8001e92 <MX_TIM1_Init+0xb6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e32:	2360      	movs	r3, #96	; 0x60
 8001e34:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 960;
 8001e36:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e3a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e40:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e44:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e46:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e48:	2204      	movs	r2, #4
 8001e4a:	a90e      	add	r1, sp, #56	; 0x38
 8001e4c:	4815      	ldr	r0, [pc, #84]	; (8001ea4 <MX_TIM1_Init+0xc8>)
 8001e4e:	f004 fb4b 	bl	80064e8 <HAL_TIM_PWM_ConfigChannel>
 8001e52:	bb08      	cbnz	r0, 8001e98 <MX_TIM1_Init+0xbc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e58:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e5a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e5c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e5e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e64:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e66:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e68:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e6a:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e70:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e72:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e74:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e76:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e78:	a901      	add	r1, sp, #4
 8001e7a:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <MX_TIM1_Init+0xc8>)
 8001e7c:	f004 fca6 	bl	80067cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001e80:	b968      	cbnz	r0, 8001e9e <MX_TIM1_Init+0xc2>
  HAL_TIM_MspPostInit(&htim1);
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MX_TIM1_Init+0xc8>)
 8001e84:	f7ff ff7e 	bl	8001d84 <HAL_TIM_MspPostInit>
}
 8001e88:	b018      	add	sp, #96	; 0x60
 8001e8a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e8c:	f7ff fca2 	bl	80017d4 <Error_Handler>
 8001e90:	e7c5      	b.n	8001e1e <MX_TIM1_Init+0x42>
    Error_Handler();
 8001e92:	f7ff fc9f 	bl	80017d4 <Error_Handler>
 8001e96:	e7cc      	b.n	8001e32 <MX_TIM1_Init+0x56>
    Error_Handler();
 8001e98:	f7ff fc9c 	bl	80017d4 <Error_Handler>
 8001e9c:	e7da      	b.n	8001e54 <MX_TIM1_Init+0x78>
    Error_Handler();
 8001e9e:	f7ff fc99 	bl	80017d4 <Error_Handler>
 8001ea2:	e7ee      	b.n	8001e82 <MX_TIM1_Init+0xa6>
 8001ea4:	200002a0 	.word	0x200002a0
 8001ea8:	40012c00 	.word	0x40012c00

08001eac <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <TIMER_IF_SetTimerContext+0x1c>)
 8001eae:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001eb0:	e001      	b.n	8001eb6 <TIMER_IF_SetTimerContext+0xa>
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <TIMER_IF_SetTimerContext+0x1c>)
 8001eb4:	6898      	ldr	r0, [r3, #8]
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <TIMER_IF_SetTimerContext+0x1c>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	4283      	cmp	r3, r0
 8001ebc:	d1f9      	bne.n	8001eb2 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001ebe:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <TIMER_IF_SetTimerContext+0x20>)
 8001ec2:	6018      	str	r0, [r3, #0]
}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40002800 	.word	0x40002800
 8001ecc:	200002f0 	.word	0x200002f0

08001ed0 <TIMER_IF_GetTimerContext>:
}
 8001ed0:	4b01      	ldr	r3, [pc, #4]	; (8001ed8 <TIMER_IF_GetTimerContext+0x8>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	200002f0 	.word	0x200002f0

08001edc <TIMER_IF_GetTimerElapsedTime>:
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ede:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001ee0:	e001      	b.n	8001ee6 <TIMER_IF_GetTimerElapsedTime+0xa>
 8001ee2:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ee4:	6898      	ldr	r0, [r3, #8]
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	4283      	cmp	r3, r0
 8001eec:	d1f9      	bne.n	8001ee2 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001eee:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ef0:	4b02      	ldr	r3, [pc, #8]	; (8001efc <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	1ac0      	subs	r0, r0, r3
 8001ef6:	4770      	bx	lr
 8001ef8:	40002800 	.word	0x40002800
 8001efc:	200002f0 	.word	0x200002f0

08001f00 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <TIMER_IF_GetTimerValue+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b153      	cbz	r3, 8001f1c <TIMER_IF_GetTimerValue+0x1c>
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <TIMER_IF_GetTimerValue+0x24>)
 8001f08:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f0a:	e001      	b.n	8001f10 <TIMER_IF_GetTimerValue+0x10>
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <TIMER_IF_GetTimerValue+0x24>)
 8001f0e:	6898      	ldr	r0, [r3, #8]
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <TIMER_IF_GetTimerValue+0x24>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4283      	cmp	r3, r0
 8001f16:	d1f9      	bne.n	8001f0c <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001f18:	43c0      	mvns	r0, r0
 8001f1a:	4770      	bx	lr
  uint32_t ret = 0;
 8001f1c:	2000      	movs	r0, #0
}
 8001f1e:	4770      	bx	lr
 8001f20:	200002ec 	.word	0x200002ec
 8001f24:	40002800 	.word	0x40002800

08001f28 <TIMER_IF_GetMinimumTimeout>:
}
 8001f28:	2003      	movs	r0, #3
 8001f2a:	4770      	bx	lr

08001f2c <TIMER_IF_Convert_ms2Tick>:
{
 8001f2c:	b508      	push	{r3, lr}
 8001f2e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f34:	2300      	movs	r3, #0
 8001f36:	0280      	lsls	r0, r0, #10
 8001f38:	0d89      	lsrs	r1, r1, #22
 8001f3a:	f7fe fe39 	bl	8000bb0 <__aeabi_uldivmod>
}
 8001f3e:	bd08      	pop	{r3, pc}

08001f40 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001f40:	0ec2      	lsrs	r2, r0, #27
 8001f42:	0143      	lsls	r3, r0, #5
 8001f44:	1a1b      	subs	r3, r3, r0
 8001f46:	f162 0200 	sbc.w	r2, r2, #0
 8001f4a:	0092      	lsls	r2, r2, #2
 8001f4c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	181b      	adds	r3, r3, r0
 8001f54:	f142 0000 	adc.w	r0, r2, #0
 8001f58:	00c0      	lsls	r0, r0, #3
 8001f5a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001f5e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001f62:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001f66:	4770      	bx	lr

08001f68 <TIMER_IF_StopTimer>:
{
 8001f68:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <TIMER_IF_StopTimer+0x20>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f70:	4c06      	ldr	r4, [pc, #24]	; (8001f8c <TIMER_IF_StopTimer+0x24>)
 8001f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f76:	4620      	mov	r0, r4
 8001f78:	f003 fb3e 	bl	80055f8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001f82:	2000      	movs	r0, #0
 8001f84:	bd10      	pop	{r4, pc}
 8001f86:	bf00      	nop
 8001f88:	40002800 	.word	0x40002800
 8001f8c:	20000258 	.word	0x20000258

08001f90 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001f90:	b508      	push	{r3, lr}
 8001f92:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001f94:	2102      	movs	r1, #2
 8001f96:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001f98:	f003 fd71 	bl	8005a7e <HAL_RTCEx_BKUPWrite>
}
 8001f9c:	bd08      	pop	{r3, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000258 	.word	0x20000258

08001fa4 <TIMER_IF_Init>:
{
 8001fa4:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <TIMER_IF_Init+0x40>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b10b      	cbz	r3, 8001fb0 <TIMER_IF_Init+0xc>
}
 8001fac:	2000      	movs	r0, #0
 8001fae:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fb0:	4c0d      	ldr	r4, [pc, #52]	; (8001fe8 <TIMER_IF_Init+0x44>)
 8001fb2:	f04f 35ff 	mov.w	r5, #4294967295
 8001fb6:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001fb8:	f7ff fc76 	bl	80018a8 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001fbc:	f7ff ffd4 	bl	8001f68 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f003 fb17 	bl	80055f8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fca:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f003 fcf5 	bl	80059bc <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7ff ffdc 	bl	8001f90 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001fd8:	f7ff ff68 	bl	8001eac <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001fdc:	4b01      	ldr	r3, [pc, #4]	; (8001fe4 <TIMER_IF_Init+0x40>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	e7e3      	b.n	8001fac <TIMER_IF_Init+0x8>
 8001fe4:	200002ec 	.word	0x200002ec
 8001fe8:	20000258 	.word	0x20000258

08001fec <TIMER_IF_BkUp_Write_Seconds>:
{
 8001fec:	b508      	push	{r3, lr}
 8001fee:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4802      	ldr	r0, [pc, #8]	; (8001ffc <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001ff4:	f003 fd43 	bl	8005a7e <HAL_RTCEx_BKUPWrite>
}
 8001ff8:	bd08      	pop	{r3, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000258 	.word	0x20000258

08002000 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002000:	b508      	push	{r3, lr}
 8002002:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002004:	2101      	movs	r1, #1
 8002006:	4802      	ldr	r0, [pc, #8]	; (8002010 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002008:	f003 fd39 	bl	8005a7e <HAL_RTCEx_BKUPWrite>
}
 800200c:	bd08      	pop	{r3, pc}
 800200e:	bf00      	nop
 8002010:	20000258 	.word	0x20000258

08002014 <TIMER_IF_StartTimer>:
{
 8002014:	b510      	push	{r4, lr}
 8002016:	b08c      	sub	sp, #48	; 0x30
 8002018:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800201a:	222c      	movs	r2, #44	; 0x2c
 800201c:	2100      	movs	r1, #0
 800201e:	a801      	add	r0, sp, #4
 8002020:	f012 fd4a 	bl	8014ab8 <memset>
  TIMER_IF_StopTimer();
 8002024:	f7ff ffa0 	bl	8001f68 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <TIMER_IF_StartTimer+0x48>)
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800202e:	2300      	movs	r3, #0
 8002030:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002032:	43e4      	mvns	r4, r4
 8002034:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002036:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002038:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800203c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800203e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002042:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002044:	2201      	movs	r2, #1
 8002046:	a901      	add	r1, sp, #4
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <TIMER_IF_StartTimer+0x4c>)
 800204a:	f003 fbfb 	bl	8005844 <HAL_RTC_SetAlarm_IT>
 800204e:	b910      	cbnz	r0, 8002056 <TIMER_IF_StartTimer+0x42>
}
 8002050:	2000      	movs	r0, #0
 8002052:	b00c      	add	sp, #48	; 0x30
 8002054:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002056:	f7ff fbbd 	bl	80017d4 <Error_Handler>
 800205a:	e7f9      	b.n	8002050 <TIMER_IF_StartTimer+0x3c>
 800205c:	200002f0 	.word	0x200002f0
 8002060:	20000258 	.word	0x20000258

08002064 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002064:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002066:	2102      	movs	r1, #2
 8002068:	4801      	ldr	r0, [pc, #4]	; (8002070 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800206a:	f003 fd0f 	bl	8005a8c <HAL_RTCEx_BKUPRead>
}
 800206e:	bd08      	pop	{r3, pc}
 8002070:	20000258 	.word	0x20000258

08002074 <TIMER_IF_GetTime>:
{
 8002074:	b538      	push	{r3, r4, r5, lr}
 8002076:	4605      	mov	r5, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <TIMER_IF_GetTime+0x34>)
 800207a:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800207c:	e001      	b.n	8002082 <TIMER_IF_GetTime+0xe>
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <TIMER_IF_GetTime+0x34>)
 8002080:	689c      	ldr	r4, [r3, #8]
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <TIMER_IF_GetTime+0x34>)
 8002084:	6892      	ldr	r2, [r2, #8]
 8002086:	42a2      	cmp	r2, r4
 8002088:	d1f9      	bne.n	800207e <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 800208a:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800208c:	f7ff ffea 	bl	8002064 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002090:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002092:	0aa4      	lsrs	r4, r4, #10
 8002094:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002098:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800209c:	f7ff ff50 	bl	8001f40 <TIMER_IF_Convert_Tick2ms>
 80020a0:	8028      	strh	r0, [r5, #0]
}
 80020a2:	4620      	mov	r0, r4
 80020a4:	bd38      	pop	{r3, r4, r5, pc}
 80020a6:	bf00      	nop
 80020a8:	40002800 	.word	0x40002800

080020ac <TIMER_IF_BkUp_Read_Seconds>:
{
 80020ac:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80020ae:	2100      	movs	r1, #0
 80020b0:	4801      	ldr	r0, [pc, #4]	; (80020b8 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80020b2:	f003 fceb 	bl	8005a8c <HAL_RTCEx_BKUPRead>
}
 80020b6:	bd08      	pop	{r3, pc}
 80020b8:	20000258 	.word	0x20000258

080020bc <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80020bc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80020be:	2101      	movs	r1, #1
 80020c0:	4801      	ldr	r0, [pc, #4]	; (80020c8 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80020c2:	f003 fce3 	bl	8005a8c <HAL_RTCEx_BKUPRead>
}
 80020c6:	bd08      	pop	{r3, pc}
 80020c8:	20000258 	.word	0x20000258

080020cc <TIMER_IF_DelayMs>:
{
 80020cc:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80020ce:	f7ff ff2d 	bl	8001f2c <TIMER_IF_Convert_ms2Tick>
 80020d2:	4b0d      	ldr	r3, [pc, #52]	; (8002108 <TIMER_IF_DelayMs+0x3c>)
 80020d4:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020d6:	e001      	b.n	80020dc <TIMER_IF_DelayMs+0x10>
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <TIMER_IF_DelayMs+0x3c>)
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <TIMER_IF_DelayMs+0x3c>)
 80020de:	6892      	ldr	r2, [r2, #8]
 80020e0:	428a      	cmp	r2, r1
 80020e2:	d1f9      	bne.n	80020d8 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 80020e4:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020e6:	e00a      	b.n	80020fe <TIMER_IF_DelayMs+0x32>
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <TIMER_IF_DelayMs+0x3c>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a06      	ldr	r2, [pc, #24]	; (8002108 <TIMER_IF_DelayMs+0x3c>)
 80020ee:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1f9      	bne.n	80020e8 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80020f4:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80020f6:	1a5b      	subs	r3, r3, r1
 80020f8:	4283      	cmp	r3, r0
 80020fa:	d203      	bcs.n	8002104 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80020fc:	bf00      	nop
 80020fe:	4b02      	ldr	r3, [pc, #8]	; (8002108 <TIMER_IF_DelayMs+0x3c>)
 8002100:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002102:	e7f3      	b.n	80020ec <TIMER_IF_DelayMs+0x20>
}
 8002104:	bd08      	pop	{r3, pc}
 8002106:	bf00      	nop
 8002108:	40002800 	.word	0x40002800

0800210c <HAL_RTC_AlarmAEventCallback>:
{
 800210c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800210e:	f012 fafb 	bl	8014708 <UTIL_TIMER_IRQ_Handler>
}
 8002112:	bd08      	pop	{r3, pc}

08002114 <HAL_RTCEx_SSRUEventCallback>:
{
 8002114:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002116:	f7ff ffa5 	bl	8002064 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800211a:	3001      	adds	r0, #1
 800211c:	f7ff ff38 	bl	8001f90 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002120:	bd08      	pop	{r3, pc}
	...

08002124 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002124:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002126:	4817      	ldr	r0, [pc, #92]	; (8002184 <MX_USART2_UART_Init+0x60>)
 8002128:	4b17      	ldr	r3, [pc, #92]	; (8002188 <MX_USART2_UART_Init+0x64>)
 800212a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800212c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002130:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002132:	2300      	movs	r3, #0
 8002134:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002136:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002138:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213a:	220c      	movs	r2, #12
 800213c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002142:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002144:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002146:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002148:	f005 fb07 	bl	800775a <HAL_UART_Init>
 800214c:	b970      	cbnz	r0, 800216c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800214e:	2100      	movs	r1, #0
 8002150:	480c      	ldr	r0, [pc, #48]	; (8002184 <MX_USART2_UART_Init+0x60>)
 8002152:	f005 fcc4 	bl	8007ade <HAL_UARTEx_SetTxFifoThreshold>
 8002156:	b960      	cbnz	r0, 8002172 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002158:	2100      	movs	r1, #0
 800215a:	480a      	ldr	r0, [pc, #40]	; (8002184 <MX_USART2_UART_Init+0x60>)
 800215c:	f005 fce4 	bl	8007b28 <HAL_UARTEx_SetRxFifoThreshold>
 8002160:	b950      	cbnz	r0, 8002178 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002162:	4808      	ldr	r0, [pc, #32]	; (8002184 <MX_USART2_UART_Init+0x60>)
 8002164:	f005 fc97 	bl	8007a96 <HAL_UARTEx_EnableFifoMode>
 8002168:	b948      	cbnz	r0, 800217e <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800216c:	f7ff fb32 	bl	80017d4 <Error_Handler>
 8002170:	e7ed      	b.n	800214e <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002172:	f7ff fb2f 	bl	80017d4 <Error_Handler>
 8002176:	e7ef      	b.n	8002158 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002178:	f7ff fb2c 	bl	80017d4 <Error_Handler>
 800217c:	e7f1      	b.n	8002162 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800217e:	f7ff fb29 	bl	80017d4 <Error_Handler>
}
 8002182:	e7f2      	b.n	800216a <MX_USART2_UART_Init+0x46>
 8002184:	20000354 	.word	0x20000354
 8002188:	40004400 	.word	0x40004400

0800218c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800218c:	b530      	push	{r4, r5, lr}
 800218e:	b097      	sub	sp, #92	; 0x5c
 8002190:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	2100      	movs	r1, #0
 8002194:	9111      	str	r1, [sp, #68]	; 0x44
 8002196:	9112      	str	r1, [sp, #72]	; 0x48
 8002198:	9113      	str	r1, [sp, #76]	; 0x4c
 800219a:	9114      	str	r1, [sp, #80]	; 0x50
 800219c:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800219e:	2238      	movs	r2, #56	; 0x38
 80021a0:	a803      	add	r0, sp, #12
 80021a2:	f012 fc89 	bl	8014ab8 <memset>
  if(uartHandle->Instance==USART2)
 80021a6:	6822      	ldr	r2, [r4, #0]
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_UART_MspInit+0xd4>)
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d001      	beq.n	80021b2 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021ae:	b017      	add	sp, #92	; 0x5c
 80021b0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021b2:	2302      	movs	r3, #2
 80021b4:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_UART_MspInit+0xd8>)
 80021b8:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ba:	a803      	add	r0, sp, #12
 80021bc:	f003 f8d2 	bl	8005364 <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d144      	bne.n	800224e <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021ce:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021d2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80021d6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80021d8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80021ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80021ec:	230c      	movs	r3, #12
 80021ee:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2500      	movs	r5, #0
 80021f6:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f8:	2303      	movs	r3, #3
 80021fa:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021fc:	2307      	movs	r3, #7
 80021fe:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002200:	a911      	add	r1, sp, #68	; 0x44
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f002 f85f 	bl	80042c8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800220a:	4817      	ldr	r0, [pc, #92]	; (8002268 <HAL_UART_MspInit+0xdc>)
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_UART_MspInit+0xe0>)
 800220e:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002210:	2314      	movs	r3, #20
 8002212:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002214:	2310      	movs	r3, #16
 8002216:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002218:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800221a:	2380      	movs	r3, #128	; 0x80
 800221c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800221e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002220:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002222:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002224:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002226:	f001 fcb7 	bl	8003b98 <HAL_DMA_Init>
 800222a:	b998      	cbnz	r0, 8002254 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800222c:	2110      	movs	r1, #16
 800222e:	480e      	ldr	r0, [pc, #56]	; (8002268 <HAL_UART_MspInit+0xdc>)
 8002230:	f001 feb4 	bl	8003f9c <HAL_DMA_ConfigChannelAttributes>
 8002234:	b988      	cbnz	r0, 800225a <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_UART_MspInit+0xdc>)
 8002238:	67a3      	str	r3, [r4, #120]	; 0x78
 800223a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2107      	movs	r1, #7
 8002240:	2025      	movs	r0, #37	; 0x25
 8002242:	f001 fbe1 	bl	8003a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002246:	2025      	movs	r0, #37	; 0x25
 8002248:	f001 fc16 	bl	8003a78 <HAL_NVIC_EnableIRQ>
}
 800224c:	e7af      	b.n	80021ae <HAL_UART_MspInit+0x22>
      Error_Handler();
 800224e:	f7ff fac1 	bl	80017d4 <Error_Handler>
 8002252:	e7b7      	b.n	80021c4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002254:	f7ff fabe 	bl	80017d4 <Error_Handler>
 8002258:	e7e8      	b.n	800222c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800225a:	f7ff fabb 	bl	80017d4 <Error_Handler>
 800225e:	e7ea      	b.n	8002236 <HAL_UART_MspInit+0xaa>
 8002260:	40004400 	.word	0x40004400
 8002264:	000c0004 	.word	0x000c0004
 8002268:	200002f4 	.word	0x200002f4
 800226c:	40020058 	.word	0x40020058

08002270 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002270:	6802      	ldr	r2, [r0, #0]
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_UART_MspDeInit+0x34>)
 8002274:	429a      	cmp	r2, r3
 8002276:	d000      	beq.n	800227a <HAL_UART_MspDeInit+0xa>
 8002278:	4770      	bx	lr
{
 800227a:	b510      	push	{r4, lr}
 800227c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800227e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002282:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002284:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002288:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800228a:	210c      	movs	r1, #12
 800228c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002290:	f002 f8ec 	bl	800446c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002294:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002296:	f001 fcf1 	bl	8003c7c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800229a:	2025      	movs	r0, #37	; 0x25
 800229c:	f001 fbfa 	bl	8003a94 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80022a0:	bd10      	pop	{r4, pc}
 80022a2:	bf00      	nop
 80022a4:	40004400 	.word	0x40004400

080022a8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80022a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <vcom_Init+0x20>)
 80022ac:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80022ae:	f7fe fff1 	bl	8001294 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80022b2:	f7ff ff37 	bl	8002124 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <vcom_Init+0x24>)
 80022b8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80022bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80022c4:	2000      	movs	r0, #0
 80022c6:	bd08      	pop	{r3, pc}
 80022c8:	200003e8 	.word	0x200003e8
 80022cc:	58000800 	.word	0x58000800

080022d0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80022d0:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80022d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80022de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022e0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80022e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80022e6:	4804      	ldr	r0, [pc, #16]	; (80022f8 <vcom_DeInit+0x28>)
 80022e8:	f7ff ffc2 	bl	8002270 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80022ec:	200f      	movs	r0, #15
 80022ee:	f001 fbd1 	bl	8003a94 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80022f2:	2000      	movs	r0, #0
 80022f4:	bd08      	pop	{r3, pc}
 80022f6:	bf00      	nop
 80022f8:	20000354 	.word	0x20000354

080022fc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80022fc:	b508      	push	{r3, lr}
 80022fe:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002300:	4601      	mov	r1, r0
 8002302:	4802      	ldr	r0, [pc, #8]	; (800230c <vcom_Trace_DMA+0x10>)
 8002304:	f004 faf6 	bl	80068f4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002308:	2000      	movs	r0, #0
 800230a:	bd08      	pop	{r3, pc}
 800230c:	20000354 	.word	0x20000354

08002310 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002310:	b510      	push	{r4, lr}
 8002312:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <vcom_ReceiveInit+0x50>)
 8002316:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800231c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800231e:	ab02      	add	r3, sp, #8
 8002320:	e913 0006 	ldmdb	r3, {r1, r2}
 8002324:	480f      	ldr	r0, [pc, #60]	; (8002364 <vcom_ReceiveInit+0x54>)
 8002326:	f005 fb5e 	bl	80079e6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <vcom_ReceiveInit+0x54>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002334:	d1f9      	bne.n	800232a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800233c:	d0fb      	beq.n	8002336 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002344:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002346:	4c07      	ldr	r4, [pc, #28]	; (8002364 <vcom_ReceiveInit+0x54>)
 8002348:	4620      	mov	r0, r4
 800234a:	f005 fb8d 	bl	8007a68 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800234e:	2201      	movs	r2, #1
 8002350:	4905      	ldr	r1, [pc, #20]	; (8002368 <vcom_ReceiveInit+0x58>)
 8002352:	4620      	mov	r0, r4
 8002354:	f005 fad8 	bl	8007908 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002358:	2000      	movs	r0, #0
 800235a:	b002      	add	sp, #8
 800235c:	bd10      	pop	{r4, pc}
 800235e:	bf00      	nop
 8002360:	200003e4 	.word	0x200003e4
 8002364:	20000354 	.word	0x20000354
 8002368:	200003ec 	.word	0x200003ec

0800236c <vcom_Resume>:

void vcom_Resume(void)
{
 800236c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800236e:	4807      	ldr	r0, [pc, #28]	; (800238c <vcom_Resume+0x20>)
 8002370:	f005 f9f3 	bl	800775a <HAL_UART_Init>
 8002374:	b920      	cbnz	r0, 8002380 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <vcom_Resume+0x24>)
 8002378:	f001 fc0e 	bl	8003b98 <HAL_DMA_Init>
 800237c:	b918      	cbnz	r0, 8002386 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800237e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002380:	f7ff fa28 	bl	80017d4 <Error_Handler>
 8002384:	e7f7      	b.n	8002376 <vcom_Resume+0xa>
    Error_Handler();
 8002386:	f7ff fa25 	bl	80017d4 <Error_Handler>
}
 800238a:	e7f8      	b.n	800237e <vcom_Resume+0x12>
 800238c:	20000354 	.word	0x20000354
 8002390:	200002f4 	.word	0x200002f4

08002394 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002396:	6802      	ldr	r2, [r0, #0]
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_UART_TxCpltCallback+0x18>)
 800239a:	429a      	cmp	r2, r3
 800239c:	d000      	beq.n	80023a0 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800239e:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_UART_TxCpltCallback+0x1c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2000      	movs	r0, #0
 80023a6:	4798      	blx	r3
}
 80023a8:	e7f9      	b.n	800239e <HAL_UART_TxCpltCallback+0xa>
 80023aa:	bf00      	nop
 80023ac:	40004400 	.word	0x40004400
 80023b0:	200003e8 	.word	0x200003e8

080023b4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80023b4:	6802      	ldr	r2, [r0, #0]
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_UART_RxCpltCallback+0x2c>)
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d000      	beq.n	80023be <HAL_UART_RxCpltCallback+0xa>
 80023bc:	4770      	bx	lr
{
 80023be:	b510      	push	{r4, lr}
 80023c0:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_UART_RxCpltCallback+0x30>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	b12b      	cbz	r3, 80023d4 <HAL_UART_RxCpltCallback+0x20>
 80023c8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80023cc:	b912      	cbnz	r2, 80023d4 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 80023ce:	2101      	movs	r1, #1
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_UART_RxCpltCallback+0x34>)
 80023d2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80023d4:	2201      	movs	r2, #1
 80023d6:	4904      	ldr	r1, [pc, #16]	; (80023e8 <HAL_UART_RxCpltCallback+0x34>)
 80023d8:	4620      	mov	r0, r4
 80023da:	f005 fa95 	bl	8007908 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80023de:	bd10      	pop	{r4, pc}
 80023e0:	40004400 	.word	0x40004400
 80023e4:	200003e4 	.word	0x200003e4
 80023e8:	200003ec 	.word	0x200003ec

080023ec <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80023ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80023ee:	f7ff fb8b 	bl	8001b08 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80023f2:	f000 fbc7 	bl	8002b84 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80023f6:	bd08      	pop	{r3, pc}

080023f8 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 80023f8:	4b01      	ldr	r3, [pc, #4]	; (8002400 <OnTxFrameCtrlChanged+0x8>)
 80023fa:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000058 	.word	0x20000058

08002404 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002404:	4b01      	ldr	r3, [pc, #4]	; (800240c <OnPingSlotPeriodicityChanged+0x8>)
 8002406:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000058 	.word	0x20000058

08002410 <OnBeaconStatusChange>:
  if (params != NULL)
 8002410:	2800      	cmp	r0, #0
 8002412:	d03f      	beq.n	8002494 <OnBeaconStatusChange+0x84>
{
 8002414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002418:	b08c      	sub	sp, #48	; 0x30
 800241a:	4603      	mov	r3, r0
    switch (params->State)
 800241c:	7842      	ldrb	r2, [r0, #1]
 800241e:	2a02      	cmp	r2, #2
 8002420:	d00a      	beq.n	8002438 <OnBeaconStatusChange+0x28>
 8002422:	2a03      	cmp	r2, #3
 8002424:	d02f      	beq.n	8002486 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <OnBeaconStatusChange+0x88>)
 8002428:	2200      	movs	r2, #0
 800242a:	4611      	mov	r1, r2
 800242c:	2002      	movs	r0, #2
 800242e:	f011 fe39 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002432:	b00c      	add	sp, #48	; 0x30
 8002434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002438:	7c02      	ldrb	r2, [r0, #16]
 800243a:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800243e:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002442:	7d9c      	ldrb	r4, [r3, #22]
 8002444:	7ddd      	ldrb	r5, [r3, #23]
 8002446:	7e1e      	ldrb	r6, [r3, #24]
 8002448:	7e5f      	ldrb	r7, [r3, #25]
 800244a:	f893 c01a 	ldrb.w	ip, [r3, #26]
 800244e:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002452:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002456:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800245a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800245e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002462:	9708      	str	r7, [sp, #32]
 8002464:	9607      	str	r6, [sp, #28]
 8002466:	9506      	str	r5, [sp, #24]
 8002468:	9405      	str	r4, [sp, #20]
 800246a:	685c      	ldr	r4, [r3, #4]
 800246c:	9404      	str	r4, [sp, #16]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	9303      	str	r3, [sp, #12]
 8002472:	9002      	str	r0, [sp, #8]
 8002474:	9101      	str	r1, [sp, #4]
 8002476:	9200      	str	r2, [sp, #0]
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <OnBeaconStatusChange+0x8c>)
 800247a:	2200      	movs	r2, #0
 800247c:	4611      	mov	r1, r2
 800247e:	2002      	movs	r0, #2
 8002480:	f011 fe10 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002484:	e7d5      	b.n	8002432 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <OnBeaconStatusChange+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	4611      	mov	r1, r2
 800248c:	2002      	movs	r0, #2
 800248e:	f011 fe09 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002492:	e7ce      	b.n	8002432 <OnBeaconStatusChange+0x22>
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	08014d38 	.word	0x08014d38
 800249c:	08014d50 	.word	0x08014d50
 80024a0:	08014dc4 	.word	0x08014dc4

080024a4 <OnClassChange>:
{
 80024a4:	b500      	push	{lr}
 80024a6:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <OnClassChange+0x1c>)
 80024aa:	5c1b      	ldrb	r3, [r3, r0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <OnClassChange+0x20>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	4611      	mov	r1, r2
 80024b4:	2002      	movs	r0, #2
 80024b6:	f011 fdf5 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 80024ba:	b003      	add	sp, #12
 80024bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c0:	08014e00 	.word	0x08014e00
 80024c4:	08014de4 	.word	0x08014de4

080024c8 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80024c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80024ca:	2801      	cmp	r0, #1
 80024cc:	d006      	beq.n	80024dc <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <OnNvmDataChange+0x24>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	4611      	mov	r1, r2
 80024d4:	2002      	movs	r0, #2
 80024d6:	f011 fde5 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80024da:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <OnNvmDataChange+0x28>)
 80024de:	2200      	movs	r2, #0
 80024e0:	4611      	mov	r1, r2
 80024e2:	2002      	movs	r0, #2
 80024e4:	f011 fdde 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 80024e8:	e7f7      	b.n	80024da <OnNvmDataChange+0x12>
 80024ea:	bf00      	nop
 80024ec:	08014e18 	.word	0x08014e18
 80024f0:	08014e04 	.word	0x08014e04

080024f4 <OnTxTimerEvent>:
{
 80024f4:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LoraSendProcessId, 1);
 80024f6:	2101      	movs	r1, #1
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <OnTxTimerEvent+0x14>)
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	f005 fbe8 	bl	8007cd0 <osThreadFlagsSet>
  UTIL_TIMER_Start(&TxTimer);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <OnTxTimerEvent+0x18>)
 8002502:	f012 f8a1 	bl	8014648 <UTIL_TIMER_Start>
}
 8002506:	bd08      	pop	{r3, pc}
 8002508:	20000530 	.word	0x20000530
 800250c:	20000554 	.word	0x20000554

08002510 <OnMacProcessNotify>:
{
 8002510:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LmHandlerProcessId, 1);
 8002512:	2101      	movs	r1, #1
 8002514:	4b02      	ldr	r3, [pc, #8]	; (8002520 <OnMacProcessNotify+0x10>)
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	f005 fbda 	bl	8007cd0 <osThreadFlagsSet>
}
 800251c:	bd08      	pop	{r3, pc}
 800251e:	bf00      	nop
 8002520:	2000052c 	.word	0x2000052c

08002524 <OnSystemReset>:
{
 8002524:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002526:	f008 f8fd 	bl	800a724 <LmHandlerHalt>
 800252a:	b100      	cbz	r0, 800252e <OnSystemReset+0xa>
}
 800252c:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800252e:	f007 fd7b 	bl	800a028 <LmHandlerJoinStatus>
 8002532:	2801      	cmp	r0, #1
 8002534:	d1fa      	bne.n	800252c <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002536:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800253a:	4905      	ldr	r1, [pc, #20]	; (8002550 <OnSystemReset+0x2c>)
 800253c:	68ca      	ldr	r2, [r1, #12]
 800253e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <OnSystemReset+0x30>)
 8002544:	4313      	orrs	r3, r2
 8002546:	60cb      	str	r3, [r1, #12]
 8002548:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800254c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800254e:	e7fd      	b.n	800254c <OnSystemReset+0x28>
 8002550:	e000ed00 	.word	0xe000ed00
 8002554:	05fa0004 	.word	0x05fa0004

08002558 <OnTxPeriodicityChanged>:
{
 8002558:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <OnTxPeriodicityChanged+0x28>)
 800255c:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800255e:	b910      	cbnz	r0, 8002566 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002560:	f242 7210 	movw	r2, #10000	; 0x2710
 8002564:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002566:	4c07      	ldr	r4, [pc, #28]	; (8002584 <OnTxPeriodicityChanged+0x2c>)
 8002568:	4620      	mov	r0, r4
 800256a:	f012 f813 	bl	8014594 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <OnTxPeriodicityChanged+0x28>)
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	4620      	mov	r0, r4
 8002574:	f012 f8ae 	bl	80146d4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002578:	4620      	mov	r0, r4
 800257a:	f012 f865 	bl	8014648 <UTIL_TIMER_Start>
}
 800257e:	bd10      	pop	{r4, pc}
 8002580:	2000006c 	.word	0x2000006c
 8002584:	20000554 	.word	0x20000554

08002588 <OnTxData>:
  if ((params != NULL))
 8002588:	2800      	cmp	r0, #0
 800258a:	d042      	beq.n	8002612 <OnTxData+0x8a>
{
 800258c:	b510      	push	{r4, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 8002592:	7803      	ldrb	r3, [r0, #0]
 8002594:	b90b      	cbnz	r3, 800259a <OnTxData+0x12>
}
 8002596:	b004      	add	sp, #16
 8002598:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 800259a:	2201      	movs	r2, #1
 800259c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a0:	481c      	ldr	r0, [pc, #112]	; (8002614 <OnTxData+0x8c>)
 80025a2:	f001 ffe1 	bl	8004568 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80025a6:	481c      	ldr	r0, [pc, #112]	; (8002618 <OnTxData+0x90>)
 80025a8:	f012 f84e 	bl	8014648 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80025ac:	4b1b      	ldr	r3, [pc, #108]	; (800261c <OnTxData+0x94>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	4611      	mov	r1, r2
 80025b2:	2002      	movs	r0, #2
 80025b4:	f011 fd76 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80025b8:	7c23      	ldrb	r3, [r4, #16]
 80025ba:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80025be:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80025c2:	9103      	str	r1, [sp, #12]
 80025c4:	9202      	str	r2, [sp, #8]
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	68e3      	ldr	r3, [r4, #12]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <OnTxData+0x98>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	4611      	mov	r1, r2
 80025d2:	2003      	movs	r0, #3
 80025d4:	f011 fd66 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <OnTxData+0x9c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	4611      	mov	r1, r2
 80025de:	2003      	movs	r0, #3
 80025e0:	f011 fd60 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80025e4:	7a23      	ldrb	r3, [r4, #8]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d10c      	bne.n	8002604 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80025ea:	7a63      	ldrb	r3, [r4, #9]
 80025ec:	b143      	cbz	r3, 8002600 <OnTxData+0x78>
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <OnTxData+0xa0>)
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	4b0e      	ldr	r3, [pc, #56]	; (800262c <OnTxData+0xa4>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	4611      	mov	r1, r2
 80025f8:	2003      	movs	r0, #3
 80025fa:	f011 fd53 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 80025fe:	e7ca      	b.n	8002596 <OnTxData+0xe>
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <OnTxData+0xa8>)
 8002602:	e7f5      	b.n	80025f0 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <OnTxData+0xac>)
 8002606:	2200      	movs	r2, #0
 8002608:	4611      	mov	r1, r2
 800260a:	2003      	movs	r0, #3
 800260c:	f011 fd4a 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002610:	e7c1      	b.n	8002596 <OnTxData+0xe>
 8002612:	4770      	bx	lr
 8002614:	48000400 	.word	0x48000400
 8002618:	2000053c 	.word	0x2000053c
 800261c:	08014e38 	.word	0x08014e38
 8002620:	08014e6c 	.word	0x08014e6c
 8002624:	08014ea0 	.word	0x08014ea0
 8002628:	08014e34 	.word	0x08014e34
 800262c:	08014eb0 	.word	0x08014eb0
 8002630:	08014e2c 	.word	0x08014e2c
 8002634:	08014ec4 	.word	0x08014ec4

08002638 <OnJoinRequest>:
  if (joinParams != NULL)
 8002638:	b358      	cbz	r0, 8002692 <OnJoinRequest+0x5a>
{
 800263a:	b510      	push	{r4, lr}
 800263c:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800263e:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8002642:	b9fb      	cbnz	r3, 8002684 <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002644:	4813      	ldr	r0, [pc, #76]	; (8002694 <OnJoinRequest+0x5c>)
 8002646:	f011 ffa5 	bl	8014594 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002650:	4811      	ldr	r0, [pc, #68]	; (8002698 <OnJoinRequest+0x60>)
 8002652:	f001 ff89 	bl	8004568 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <OnJoinRequest+0x64>)
 8002658:	2200      	movs	r2, #0
 800265a:	4611      	mov	r1, r2
 800265c:	2002      	movs	r0, #2
 800265e:	f011 fd21 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002662:	79a3      	ldrb	r3, [r4, #6]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d006      	beq.n	8002676 <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002668:	4b0d      	ldr	r3, [pc, #52]	; (80026a0 <OnJoinRequest+0x68>)
 800266a:	2200      	movs	r2, #0
 800266c:	4611      	mov	r1, r2
 800266e:	2002      	movs	r0, #2
 8002670:	f011 fd18 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8002674:	e00c      	b.n	8002690 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <OnJoinRequest+0x6c>)
 8002678:	2200      	movs	r2, #0
 800267a:	4611      	mov	r1, r2
 800267c:	2002      	movs	r0, #2
 800267e:	f011 fd11 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8002682:	e005      	b.n	8002690 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <OnJoinRequest+0x70>)
 8002686:	2200      	movs	r2, #0
 8002688:	4611      	mov	r1, r2
 800268a:	2002      	movs	r0, #2
 800268c:	f011 fd0a 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002690:	bd10      	pop	{r4, pc}
 8002692:	4770      	bx	lr
 8002694:	200004e4 	.word	0x200004e4
 8002698:	48000400 	.word	0x48000400
 800269c:	08014ed4 	.word	0x08014ed4
 80026a0:	08014f0c 	.word	0x08014f0c
 80026a4:	08014eec 	.word	0x08014eec
 80026a8:	08014f2c 	.word	0x08014f2c

080026ac <OnStopJoinTimerEvent>:
{
 80026ac:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <OnStopJoinTimerEvent+0x40>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d013      	beq.n	80026de <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026b6:	4c0e      	ldr	r4, [pc, #56]	; (80026f0 <OnStopJoinTimerEvent+0x44>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026be:	4620      	mov	r0, r4
 80026c0:	f001 ff52 	bl	8004568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80026c4:	2200      	movs	r2, #0
 80026c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ca:	4620      	mov	r0, r4
 80026cc:	f001 ff4c 	bl	8004568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026d0:	2200      	movs	r2, #0
 80026d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026d6:	4620      	mov	r0, r4
 80026d8:	f001 ff46 	bl	8004568 <HAL_GPIO_WritePin>
}
 80026dc:	bd10      	pop	{r4, pc}
    osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 80026de:	2101      	movs	r1, #1
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <OnStopJoinTimerEvent+0x48>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f005 faf4 	bl	8007cd0 <osThreadFlagsSet>
 80026e8:	e7e5      	b.n	80026b6 <OnStopJoinTimerEvent+0xa>
 80026ea:	bf00      	nop
 80026ec:	20000000 	.word	0x20000000
 80026f0:	48000400 	.word	0x48000400
 80026f4:	20000534 	.word	0x20000534

080026f8 <OnRxTimerLedEvent>:
{
 80026f8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80026fa:	2200      	movs	r2, #0
 80026fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002700:	4801      	ldr	r0, [pc, #4]	; (8002708 <OnRxTimerLedEvent+0x10>)
 8002702:	f001 ff31 	bl	8004568 <HAL_GPIO_WritePin>
}
 8002706:	bd08      	pop	{r3, pc}
 8002708:	48000400 	.word	0x48000400

0800270c <OnTxTimerLedEvent>:
{
 800270c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 800270e:	2200      	movs	r2, #0
 8002710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002714:	4801      	ldr	r0, [pc, #4]	; (800271c <OnTxTimerLedEvent+0x10>)
 8002716:	f001 ff27 	bl	8004568 <HAL_GPIO_WritePin>
}
 800271a:	bd08      	pop	{r3, pc}
 800271c:	48000400 	.word	0x48000400

08002720 <OnRxData>:
  if (params != NULL)
 8002720:	2900      	cmp	r1, #0
 8002722:	d06e      	beq.n	8002802 <OnRxData+0xe2>
{
 8002724:	b570      	push	{r4, r5, r6, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	4604      	mov	r4, r0
 800272a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800272c:	2201      	movs	r2, #1
 800272e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002732:	4834      	ldr	r0, [pc, #208]	; (8002804 <OnRxData+0xe4>)
 8002734:	f001 ff18 	bl	8004568 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002738:	4833      	ldr	r0, [pc, #204]	; (8002808 <OnRxData+0xe8>)
 800273a:	f011 ff85 	bl	8014648 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800273e:	782e      	ldrb	r6, [r5, #0]
 8002740:	2e00      	cmp	r6, #0
 8002742:	d042      	beq.n	80027ca <OnRxData+0xaa>
      if (appData != NULL)
 8002744:	2c00      	cmp	r4, #0
 8002746:	d03f      	beq.n	80027c8 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002748:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800274a:	6863      	ldr	r3, [r4, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d03c      	beq.n	80027ca <OnRxData+0xaa>
          switch (appData->Port)
 8002750:	2e02      	cmp	r6, #2
 8002752:	d016      	beq.n	8002782 <OnRxData+0x62>
 8002754:	2e03      	cmp	r6, #3
 8002756:	d138      	bne.n	80027ca <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002758:	7862      	ldrb	r2, [r4, #1]
 800275a:	2a01      	cmp	r2, #1
 800275c:	d135      	bne.n	80027ca <OnRxData+0xaa>
                switch (appData->Buffer[0])
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d006      	beq.n	8002772 <OnRxData+0x52>
 8002764:	2b02      	cmp	r3, #2
 8002766:	d008      	beq.n	800277a <OnRxData+0x5a>
 8002768:	bb7b      	cbnz	r3, 80027ca <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800276a:	2000      	movs	r0, #0
 800276c:	f007 fd10 	bl	800a190 <LmHandlerRequestClass>
                    break;
 8002770:	e02b      	b.n	80027ca <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002772:	2001      	movs	r0, #1
 8002774:	f007 fd0c 	bl	800a190 <LmHandlerRequestClass>
                    break;
 8002778:	e027      	b.n	80027ca <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800277a:	2002      	movs	r0, #2
 800277c:	f007 fd08 	bl	800a190 <LmHandlerRequestClass>
                    break;
 8002780:	e023      	b.n	80027ca <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002782:	7862      	ldrb	r2, [r4, #1]
 8002784:	2a01      	cmp	r2, #1
 8002786:	d120      	bne.n	80027ca <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <OnRxData+0xec>)
 8002790:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002792:	b963      	cbnz	r3, 80027ae <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002794:	4b1e      	ldr	r3, [pc, #120]	; (8002810 <OnRxData+0xf0>)
 8002796:	2200      	movs	r2, #0
 8002798:	4611      	mov	r1, r2
 800279a:	2003      	movs	r0, #3
 800279c:	f011 fc82 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027a6:	4817      	ldr	r0, [pc, #92]	; (8002804 <OnRxData+0xe4>)
 80027a8:	f001 fede 	bl	8004568 <HAL_GPIO_WritePin>
 80027ac:	e00d      	b.n	80027ca <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 80027ae:	4b19      	ldr	r3, [pc, #100]	; (8002814 <OnRxData+0xf4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	4611      	mov	r1, r2
 80027b4:	2003      	movs	r0, #3
 80027b6:	f011 fc75 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80027ba:	2201      	movs	r2, #1
 80027bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027c0:	4810      	ldr	r0, [pc, #64]	; (8002804 <OnRxData+0xe4>)
 80027c2:	f001 fed1 	bl	8004568 <HAL_GPIO_WritePin>
 80027c6:	e000      	b.n	80027ca <OnRxData+0xaa>
  uint8_t RxPort = 0;
 80027c8:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 80027ca:	7c2b      	ldrb	r3, [r5, #16]
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d901      	bls.n	80027d4 <OnRxData+0xb4>
}
 80027d0:	b006      	add	sp, #24
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 80027d4:	f995 2008 	ldrsb.w	r2, [r5, #8]
 80027d8:	f995 1009 	ldrsb.w	r1, [r5, #9]
 80027dc:	f995 000a 	ldrsb.w	r0, [r5, #10]
 80027e0:	9005      	str	r0, [sp, #20]
 80027e2:	9104      	str	r1, [sp, #16]
 80027e4:	490c      	ldr	r1, [pc, #48]	; (8002818 <OnRxData+0xf8>)
 80027e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027ea:	9303      	str	r3, [sp, #12]
 80027ec:	9202      	str	r2, [sp, #8]
 80027ee:	9601      	str	r6, [sp, #4]
 80027f0:	68eb      	ldr	r3, [r5, #12]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <OnRxData+0xfc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	4611      	mov	r1, r2
 80027fa:	2003      	movs	r0, #3
 80027fc:	f011 fc52 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002800:	e7e6      	b.n	80027d0 <OnRxData+0xb0>
 8002802:	4770      	bx	lr
 8002804:	48000400 	.word	0x48000400
 8002808:	200004fc 	.word	0x200004fc
 800280c:	200004e2 	.word	0x200004e2
 8002810:	08014f48 	.word	0x08014f48
 8002814:	08014f54 	.word	0x08014f54
 8002818:	08015230 	.word	0x08015230
 800281c:	08014f60 	.word	0x08014f60

08002820 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002820:	b538      	push	{r3, r4, r5, lr}
 8002822:	4605      	mov	r5, r0
 8002824:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8002826:	f001 fbf7 	bl	8004018 <HAL_FLASH_Unlock>
 800282a:	b100      	cbz	r0, 800282e <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800282c:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <OnStoreContextRequest+0x4c>)
 8002830:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <OnStoreContextRequest+0x50>)
 8002836:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 800283a:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 800283e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002842:	fb00 f303 	mul.w	r3, r0, r3
 8002846:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 800284a:	2200      	movs	r2, #0
 800284c:	2101      	movs	r1, #1
 800284e:	0ad8      	lsrs	r0, r3, #11
 8002850:	f7fe fdbe 	bl	80013d0 <FLASH_IF_EraseByPages>
 8002854:	b110      	cbz	r0, 800285c <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 8002856:	f001 fbf7 	bl	8004048 <HAL_FLASH_Lock>
}
 800285a:	e7e7      	b.n	800282c <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800285c:	2300      	movs	r3, #0
 800285e:	4622      	mov	r2, r4
 8002860:	4629      	mov	r1, r5
 8002862:	4804      	ldr	r0, [pc, #16]	; (8002874 <OnStoreContextRequest+0x54>)
 8002864:	f7fe fdd0 	bl	8001408 <FLASH_IF_Write>
 8002868:	e7f5      	b.n	8002856 <OnStoreContextRequest+0x36>
 800286a:	bf00      	nop
 800286c:	1fff7000 	.word	0x1fff7000
 8002870:	03fffc00 	.word	0x03fffc00
 8002874:	0803f000 	.word	0x0803f000

08002878 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800287a:	b28a      	uxth	r2, r1
 800287c:	4901      	ldr	r1, [pc, #4]	; (8002884 <OnRestoreContextRequest+0xc>)
 800287e:	f011 fd27 	bl	80142d0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002882:	bd08      	pop	{r3, pc}
 8002884:	0803f000 	.word	0x0803f000

08002888 <StopJoin>:
{
 8002888:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800288a:	4c1e      	ldr	r4, [pc, #120]	; (8002904 <StopJoin+0x7c>)
 800288c:	2201      	movs	r2, #1
 800288e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002892:	4620      	mov	r0, r4
 8002894:	f001 fe68 	bl	8004568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002898:	2201      	movs	r2, #1
 800289a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800289e:	4620      	mov	r0, r4
 80028a0:	f001 fe62 	bl	8004568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80028a4:	2201      	movs	r2, #1
 80028a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028aa:	4620      	mov	r0, r4
 80028ac:	f001 fe5c 	bl	8004568 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80028b0:	4815      	ldr	r0, [pc, #84]	; (8002908 <StopJoin+0x80>)
 80028b2:	f011 fe6f 	bl	8014594 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80028b6:	f007 ff2d 	bl	800a714 <LmHandlerStop>
 80028ba:	b148      	cbz	r0, 80028d0 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <StopJoin+0x84>)
 80028be:	2200      	movs	r2, #0
 80028c0:	4611      	mov	r1, r2
 80028c2:	2002      	movs	r0, #2
 80028c4:	f011 fbee 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80028c8:	4811      	ldr	r0, [pc, #68]	; (8002910 <StopJoin+0x88>)
 80028ca:	f011 febd 	bl	8014648 <UTIL_TIMER_Start>
}
 80028ce:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <StopJoin+0x8c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	4611      	mov	r1, r2
 80028d6:	2002      	movs	r0, #2
 80028d8:	f011 fbe4 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 80028dc:	4c0e      	ldr	r4, [pc, #56]	; (8002918 <StopJoin+0x90>)
 80028de:	2501      	movs	r5, #1
 80028e0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <StopJoin+0x94>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	4611      	mov	r1, r2
 80028e8:	2002      	movs	r0, #2
 80028ea:	f011 fbdb 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 80028ee:	480c      	ldr	r0, [pc, #48]	; (8002920 <StopJoin+0x98>)
 80028f0:	f007 fd8c 	bl	800a40c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 80028f4:	4629      	mov	r1, r5
 80028f6:	7820      	ldrb	r0, [r4, #0]
 80028f8:	f007 fb1e 	bl	8009f38 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <StopJoin+0x80>)
 80028fe:	f011 fea3 	bl	8014648 <UTIL_TIMER_Start>
 8002902:	e7e1      	b.n	80028c8 <StopJoin+0x40>
 8002904:	48000400 	.word	0x48000400
 8002908:	20000554 	.word	0x20000554
 800290c:	08014fa8 	.word	0x08014fa8
 8002910:	20000514 	.word	0x20000514
 8002914:	08014fc8 	.word	0x08014fc8
 8002918:	20000000 	.word	0x20000000
 800291c:	08014fdc 	.word	0x08014fdc
 8002920:	20000058 	.word	0x20000058

08002924 <Thd_LoraStopJoin>:
{
 8002924:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002926:	f04f 32ff 	mov.w	r2, #4294967295
 800292a:	2100      	movs	r1, #0
 800292c:	2001      	movs	r0, #1
 800292e:	f005 fa17 	bl	8007d60 <osThreadFlagsWait>
    StopJoin();  /*what you want to do*/
 8002932:	f7ff ffa9 	bl	8002888 <StopJoin>
  for (;;)
 8002936:	e7f6      	b.n	8002926 <Thd_LoraStopJoin+0x2>

08002938 <StoreContext>:
{
 8002938:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 800293a:	f007 fefb 	bl	800a734 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800293e:	f110 0f08 	cmn.w	r0, #8
 8002942:	d003      	beq.n	800294c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002944:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002948:	d007      	beq.n	800295a <StoreContext+0x22>
}
 800294a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <StoreContext+0x30>)
 800294e:	2200      	movs	r2, #0
 8002950:	4611      	mov	r1, r2
 8002952:	2002      	movs	r0, #2
 8002954:	f011 fba6 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8002958:	e7f7      	b.n	800294a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <StoreContext+0x34>)
 800295c:	2200      	movs	r2, #0
 800295e:	4611      	mov	r1, r2
 8002960:	2002      	movs	r0, #2
 8002962:	f011 fb9f 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002966:	e7f0      	b.n	800294a <StoreContext+0x12>
 8002968:	08014ffc 	.word	0x08014ffc
 800296c:	08015014 	.word	0x08015014

08002970 <Thd_LoraStoreContext>:
{
 8002970:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002972:	f04f 32ff 	mov.w	r2, #4294967295
 8002976:	2100      	movs	r1, #0
 8002978:	2001      	movs	r0, #1
 800297a:	f005 f9f1 	bl	8007d60 <osThreadFlagsWait>
    StoreContext();  /*what you want to do*/
 800297e:	f7ff ffdb 	bl	8002938 <StoreContext>
  for (;;)
 8002982:	e7f6      	b.n	8002972 <Thd_LoraStoreContext+0x2>

08002984 <SendTxData>:
{
 8002984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002986:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002988:	f7ff f8ea 	bl	8001b60 <GetBatteryLevel>
 800298c:	4605      	mov	r5, r0
  uint16_t voltaje_CP =  GetLectura_CP();//es el mío
 800298e:	f7ff f945 	bl	8001c1c <GetLectura_CP>
 8002992:	4604      	mov	r4, r0
  EnvSensors_Read(&sensor_data);
 8002994:	a802      	add	r0, sp, #8
 8002996:	f7ff f9c1 	bl	8001d1c <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800299a:	9500      	str	r5, [sp, #0]
 800299c:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <SendTxData+0x188>)
 800299e:	2201      	movs	r2, #1
 80029a0:	2100      	movs	r1, #0
 80029a2:	2002      	movs	r0, #2
 80029a4:	f011 fb7e 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 80029a8:	9803      	ldr	r0, [sp, #12]
 80029aa:	f7fe f8bb 	bl	8000b24 <__aeabi_f2iz>
 80029ae:	b200      	sxth	r0, r0
 80029b0:	9000      	str	r0, [sp, #0]
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <SendTxData+0x18c>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	2100      	movs	r1, #0
 80029b8:	2002      	movs	r0, #2
 80029ba:	f011 fb73 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "CP: %d\r\n", voltaje_CP);
 80029be:	9400      	str	r4, [sp, #0]
 80029c0:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <SendTxData+0x190>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	2100      	movs	r1, #0
 80029c6:	2002      	movs	r0, #2
 80029c8:	f011 fb6c 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 80029cc:	4c52      	ldr	r4, [pc, #328]	; (8002b18 <SendTxData+0x194>)
 80029ce:	2302      	movs	r3, #2
 80029d0:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 80029d2:	4952      	ldr	r1, [pc, #328]	; (8002b1c <SendTxData+0x198>)
 80029d4:	9804      	ldr	r0, [sp, #16]
 80029d6:	f7fd ff55 	bl	8000884 <__aeabi_fmul>
 80029da:	f7fe f8c9 	bl	8000b70 <__aeabi_f2uiz>
 80029de:	b285      	uxth	r5, r0
  temperature = (int16_t)(sensor_data.temperature);
 80029e0:	9803      	ldr	r0, [sp, #12]
 80029e2:	f7fe f89f 	bl	8000b24 <__aeabi_f2iz>
 80029e6:	b206      	sxth	r6, r0
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 80029e8:	494d      	ldr	r1, [pc, #308]	; (8002b20 <SendTxData+0x19c>)
 80029ea:	9802      	ldr	r0, [sp, #8]
 80029ec:	f7fd ff4a 	bl	8000884 <__aeabi_fmul>
 80029f0:	494a      	ldr	r1, [pc, #296]	; (8002b1c <SendTxData+0x198>)
 80029f2:	f7fd fffb 	bl	80009ec <__aeabi_fdiv>
 80029f6:	f7fe f8bb 	bl	8000b70 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 80029fa:	6863      	ldr	r3, [r4, #4]
 80029fc:	4a49      	ldr	r2, [pc, #292]	; (8002b24 <SendTxData+0x1a0>)
 80029fe:	7812      	ldrb	r2, [r2, #0]
 8002a00:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8002a02:	6863      	ldr	r3, [r4, #4]
 8002a04:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002a08:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002a0a:	6863      	ldr	r3, [r4, #4]
 8002a0c:	7098      	strb	r0, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002a0e:	6863      	ldr	r3, [r4, #4]
 8002a10:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002a12:	6863      	ldr	r3, [r4, #4]
 8002a14:	0a2a      	lsrs	r2, r5, #8
 8002a16:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002a18:	6863      	ldr	r3, [r4, #4]
 8002a1a:	715d      	strb	r5, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002a1c:	4b42      	ldr	r3, [pc, #264]	; (8002b28 <SendTxData+0x1a4>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d002      	beq.n	8002a2a <SendTxData+0xa6>
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d000      	beq.n	8002a2a <SendTxData+0xa6>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002a28:	bb63      	cbnz	r3, 8002a84 <SendTxData+0x100>
    AppData.Buffer[i++] = 0;
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	; (8002b18 <SendTxData+0x194>)
 8002a2c:	6851      	ldr	r1, [r2, #4]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8002a32:	6851      	ldr	r1, [r2, #4]
 8002a34:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8002a36:	6852      	ldr	r2, [r2, #4]
 8002a38:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8002a3a:	7253      	strb	r3, [r2, #9]
 8002a3c:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <SendTxData+0x194>)
 8002a40:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002a42:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <SendTxData+0x1a8>)
 8002a44:	7a5b      	ldrb	r3, [r3, #9]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d138      	bne.n	8002abc <SendTxData+0x138>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <SendTxData+0x1a4>)
 8002a4e:	78d9      	ldrb	r1, [r3, #3]
 8002a50:	4831      	ldr	r0, [pc, #196]	; (8002b18 <SendTxData+0x194>)
 8002a52:	f007 fafb 	bl	800a04c <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d03e      	beq.n	8002ad8 <SendTxData+0x154>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002a5a:	f110 0f06 	cmn.w	r0, #6
 8002a5e:	d043      	beq.n	8002ae8 <SendTxData+0x164>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a60:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002a62:	4c33      	ldr	r4, [pc, #204]	; (8002b30 <SendTxData+0x1ac>)
 8002a64:	4620      	mov	r0, r4
 8002a66:	f011 fd95 	bl	8014594 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002a6a:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <SendTxData+0x1b0>)
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	42a9      	cmp	r1, r5
 8002a70:	bf38      	it	cc
 8002a72:	4629      	movcc	r1, r5
 8002a74:	4620      	mov	r0, r4
 8002a76:	f011 fe2d 	bl	80146d4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f011 fde4 	bl	8014648 <UTIL_TIMER_Start>
}
 8002a80:	b009      	add	sp, #36	; 0x24
 8002a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8002a84:	9d05      	ldr	r5, [sp, #20]
    longitude = sensor_data.longitude;
 8002a86:	9c06      	ldr	r4, [sp, #24]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002a88:	4e23      	ldr	r6, [pc, #140]	; (8002b18 <SendTxData+0x194>)
 8002a8a:	6877      	ldr	r7, [r6, #4]
 8002a8c:	f7ff f868 	bl	8001b60 <GetBatteryLevel>
 8002a90:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002a92:	6873      	ldr	r3, [r6, #4]
 8002a94:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002a98:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002a9a:	6873      	ldr	r3, [r6, #4]
 8002a9c:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002aa0:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002aa2:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002aa4:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002aa8:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002aaa:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002aae:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002ab0:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002ab6:	739a      	strb	r2, [r3, #14]
 8002ab8:	220f      	movs	r2, #15
 8002aba:	e7c0      	b.n	8002a3e <SendTxData+0xba>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002abc:	f007 fab4 	bl	800a028 <LmHandlerJoinStatus>
 8002ac0:	2801      	cmp	r0, #1
 8002ac2:	d1c2      	bne.n	8002a4a <SendTxData+0xc6>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002ac4:	4819      	ldr	r0, [pc, #100]	; (8002b2c <SendTxData+0x1a8>)
 8002ac6:	f011 fd65 	bl	8014594 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002aca:	2200      	movs	r2, #0
 8002acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ad0:	4819      	ldr	r0, [pc, #100]	; (8002b38 <SendTxData+0x1b4>)
 8002ad2:	f001 fd49 	bl	8004568 <HAL_GPIO_WritePin>
 8002ad6:	e7b8      	b.n	8002a4a <SendTxData+0xc6>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <SendTxData+0x1b8>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	2100      	movs	r1, #0
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f011 fae0 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002ae4:	2500      	movs	r5, #0
 8002ae6:	e7bc      	b.n	8002a62 <SendTxData+0xde>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002ae8:	f007 fa98 	bl	800a01c <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002aec:	4605      	mov	r5, r0
 8002aee:	2800      	cmp	r0, #0
 8002af0:	d0b7      	beq.n	8002a62 <SendTxData+0xde>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <SendTxData+0x1bc>)
 8002af4:	fba3 2300 	umull	r2, r3, r3, r0
 8002af8:	099b      	lsrs	r3, r3, #6
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <SendTxData+0x1c0>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	2100      	movs	r1, #0
 8002b02:	4610      	mov	r0, r2
 8002b04:	f011 face 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8002b08:	e7ab      	b.n	8002a62 <SendTxData+0xde>
 8002b0a:	bf00      	nop
 8002b0c:	0801502c 	.word	0x0801502c
 8002b10:	08015038 	.word	0x08015038
 8002b14:	08015044 	.word	0x08015044
 8002b18:	20000004 	.word	0x20000004
 8002b1c:	41200000 	.word	0x41200000
 8002b20:	42c80000 	.word	0x42c80000
 8002b24:	200004e2 	.word	0x200004e2
 8002b28:	20000058 	.word	0x20000058
 8002b2c:	200004e4 	.word	0x200004e4
 8002b30:	20000554 	.word	0x20000554
 8002b34:	2000006c 	.word	0x2000006c
 8002b38:	48000400 	.word	0x48000400
 8002b3c:	08015050 	.word	0x08015050
 8002b40:	10624dd3 	.word	0x10624dd3
 8002b44:	08015060 	.word	0x08015060

08002b48 <Thd_LoraSendProcess>:
{
 8002b48:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4e:	2100      	movs	r1, #0
 8002b50:	2001      	movs	r0, #1
 8002b52:	f005 f905 	bl	8007d60 <osThreadFlagsWait>
    SendTxData();  /*what you want to do*/
 8002b56:	f7ff ff15 	bl	8002984 <SendTxData>
  for (;;)
 8002b5a:	e7f6      	b.n	8002b4a <Thd_LoraSendProcess+0x2>

08002b5c <Thd_LmHandlerProcess>:
{
 8002b5c:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b62:	2100      	movs	r1, #0
 8002b64:	2001      	movs	r0, #1
 8002b66:	f005 f8fb 	bl	8007d60 <osThreadFlagsWait>
    LmHandlerProcess(); /*what you want to do*/
 8002b6a:	f007 faed 	bl	800a148 <LmHandlerProcess>
  for (;;)
 8002b6e:	e7f6      	b.n	8002b5e <Thd_LmHandlerProcess+0x2>

08002b70 <OnJoinTimerLedEvent>:
{
 8002b70:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002b72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b76:	4802      	ldr	r0, [pc, #8]	; (8002b80 <OnJoinTimerLedEvent+0x10>)
 8002b78:	f001 fcfb 	bl	8004572 <HAL_GPIO_TogglePin>
}
 8002b7c:	bd08      	pop	{r3, pc}
 8002b7e:	bf00      	nop
 8002b80:	48000400 	.word	0x48000400

08002b84 <LoRaWAN_Init>:
{
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002b88:	2400      	movs	r4, #0
 8002b8a:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002b8c:	9402      	str	r4, [sp, #8]
 8002b8e:	2502      	movs	r5, #2
 8002b90:	9501      	str	r5, [sp, #4]
 8002b92:	2601      	movs	r6, #1
 8002b94:	9600      	str	r6, [sp, #0]
 8002b96:	4b57      	ldr	r3, [pc, #348]	; (8002cf4 <LoRaWAN_Init+0x170>)
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f011 fa81 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002ba2:	9402      	str	r4, [sp, #8]
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	9500      	str	r5, [sp, #0]
 8002baa:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <LoRaWAN_Init+0x174>)
 8002bac:	4622      	mov	r2, r4
 8002bae:	4621      	mov	r1, r4
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f011 fa77 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002bb6:	9402      	str	r4, [sp, #8]
 8002bb8:	9501      	str	r5, [sp, #4]
 8002bba:	9600      	str	r6, [sp, #0]
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <LoRaWAN_Init+0x178>)
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	4628      	mov	r0, r5
 8002bc4:	f011 fa6e 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002bc8:	a905      	add	r1, sp, #20
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f007 fd8c 	bl	800a6e8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002bd0:	9b05      	ldr	r3, [sp, #20]
 8002bd2:	0e1a      	lsrs	r2, r3, #24
 8002bd4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bd8:	9102      	str	r1, [sp, #8]
 8002bda:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	9200      	str	r2, [sp, #0]
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <LoRaWAN_Init+0x17c>)
 8002be4:	4622      	mov	r2, r4
 8002be6:	4621      	mov	r1, r4
 8002be8:	4628      	mov	r0, r5
 8002bea:	f011 fa5b 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002bee:	a905      	add	r1, sp, #20
 8002bf0:	4630      	mov	r0, r6
 8002bf2:	f007 fd79 	bl	800a6e8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002bf6:	9b05      	ldr	r3, [sp, #20]
 8002bf8:	0e1a      	lsrs	r2, r3, #24
 8002bfa:	b2d9      	uxtb	r1, r3
 8002bfc:	9103      	str	r1, [sp, #12]
 8002bfe:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002c02:	9102      	str	r1, [sp, #8]
 8002c04:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	9200      	str	r2, [sp, #0]
 8002c0c:	4b3d      	ldr	r3, [pc, #244]	; (8002d04 <LoRaWAN_Init+0x180>)
 8002c0e:	4622      	mov	r2, r4
 8002c10:	4621      	mov	r1, r4
 8002c12:	4628      	mov	r0, r5
 8002c14:	f011 fa46 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002c18:	9400      	str	r4, [sp, #0]
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <LoRaWAN_Init+0x184>)
 8002c1c:	4622      	mov	r2, r4
 8002c1e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c22:	483a      	ldr	r0, [pc, #232]	; (8002d0c <LoRaWAN_Init+0x188>)
 8002c24:	f011 fc58 	bl	80144d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002c28:	9400      	str	r4, [sp, #0]
 8002c2a:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <LoRaWAN_Init+0x18c>)
 8002c2c:	4622      	mov	r2, r4
 8002c2e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c32:	4838      	ldr	r0, [pc, #224]	; (8002d14 <LoRaWAN_Init+0x190>)
 8002c34:	f011 fc50 	bl	80144d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002c38:	9400      	str	r4, [sp, #0]
 8002c3a:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <LoRaWAN_Init+0x194>)
 8002c3c:	4632      	mov	r2, r6
 8002c3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c42:	4836      	ldr	r0, [pc, #216]	; (8002d1c <LoRaWAN_Init+0x198>)
 8002c44:	f011 fc48 	bl	80144d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002c48:	9400      	str	r4, [sp, #0]
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <LoRaWAN_Init+0x19c>)
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002c52:	4834      	ldr	r0, [pc, #208]	; (8002d24 <LoRaWAN_Init+0x1a0>)
 8002c54:	f011 fc40 	bl	80144d8 <UTIL_TIMER_Create>
  Thd_LmHandlerProcessId = osThreadNew(Thd_LmHandlerProcess, NULL, &Thd_LmHandlerProcess_attr);
 8002c58:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <LoRaWAN_Init+0x1a4>)
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	4833      	ldr	r0, [pc, #204]	; (8002d2c <LoRaWAN_Init+0x1a8>)
 8002c5e:	f004 ffcb 	bl	8007bf8 <osThreadNew>
 8002c62:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <LoRaWAN_Init+0x1ac>)
 8002c64:	6018      	str	r0, [r3, #0]
  if (Thd_LmHandlerProcessId == NULL)
 8002c66:	2800      	cmp	r0, #0
 8002c68:	d038      	beq.n	8002cdc <LoRaWAN_Init+0x158>
  Thd_LoraSendProcessId = osThreadNew(Thd_LoraSendProcess, NULL, &Thd_LoraSendProcess_attr);
 8002c6a:	4a32      	ldr	r2, [pc, #200]	; (8002d34 <LoRaWAN_Init+0x1b0>)
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4832      	ldr	r0, [pc, #200]	; (8002d38 <LoRaWAN_Init+0x1b4>)
 8002c70:	f004 ffc2 	bl	8007bf8 <osThreadNew>
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <LoRaWAN_Init+0x1b8>)
 8002c76:	6018      	str	r0, [r3, #0]
  if (Thd_LoraSendProcessId == NULL)
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d032      	beq.n	8002ce2 <LoRaWAN_Init+0x15e>
  Thd_LoraStoreContextId = osThreadNew(Thd_LoraStoreContext, NULL, &Thd_LoraStoreContext_attr);
 8002c7c:	4a30      	ldr	r2, [pc, #192]	; (8002d40 <LoRaWAN_Init+0x1bc>)
 8002c7e:	2100      	movs	r1, #0
 8002c80:	4830      	ldr	r0, [pc, #192]	; (8002d44 <LoRaWAN_Init+0x1c0>)
 8002c82:	f004 ffb9 	bl	8007bf8 <osThreadNew>
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <LoRaWAN_Init+0x1c4>)
 8002c88:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStoreContextId == NULL)
 8002c8a:	b368      	cbz	r0, 8002ce8 <LoRaWAN_Init+0x164>
  Thd_LoraStopJoinId = osThreadNew(Thd_LoraStopJoin, NULL, &Thd_LoraStopJoin_attr);
 8002c8c:	4a2f      	ldr	r2, [pc, #188]	; (8002d4c <LoRaWAN_Init+0x1c8>)
 8002c8e:	2100      	movs	r1, #0
 8002c90:	482f      	ldr	r0, [pc, #188]	; (8002d50 <LoRaWAN_Init+0x1cc>)
 8002c92:	f004 ffb1 	bl	8007bf8 <osThreadNew>
 8002c96:	4b2f      	ldr	r3, [pc, #188]	; (8002d54 <LoRaWAN_Init+0x1d0>)
 8002c98:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStopJoinId == NULL)
 8002c9a:	b340      	cbz	r0, 8002cee <LoRaWAN_Init+0x16a>
  LoraInfo_Init();
 8002c9c:	f000 f87e 	bl	8002d9c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002ca0:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8002ca4:	482c      	ldr	r0, [pc, #176]	; (8002d58 <LoRaWAN_Init+0x1d4>)
 8002ca6:	f007 fce5 	bl	800a674 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002caa:	482c      	ldr	r0, [pc, #176]	; (8002d5c <LoRaWAN_Init+0x1d8>)
 8002cac:	f007 fbae 	bl	800a40c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002cb0:	481a      	ldr	r0, [pc, #104]	; (8002d1c <LoRaWAN_Init+0x198>)
 8002cb2:	f011 fcc9 	bl	8014648 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <LoRaWAN_Init+0x1dc>)
 8002cba:	7818      	ldrb	r0, [r3, #0]
 8002cbc:	f007 f93c 	bl	8009f38 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002cc0:	4c28      	ldr	r4, [pc, #160]	; (8002d64 <LoRaWAN_Init+0x1e0>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	9200      	str	r2, [sp, #0]
 8002cc6:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <LoRaWAN_Init+0x1e4>)
 8002cc8:	4928      	ldr	r1, [pc, #160]	; (8002d6c <LoRaWAN_Init+0x1e8>)
 8002cca:	6809      	ldr	r1, [r1, #0]
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f011 fc03 	bl	80144d8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f011 fcb8 	bl	8014648 <UTIL_TIMER_Start>
}
 8002cd8:	b006      	add	sp, #24
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002cdc:	f7fe fd7a 	bl	80017d4 <Error_Handler>
 8002ce0:	e7c3      	b.n	8002c6a <LoRaWAN_Init+0xe6>
    Error_Handler();
 8002ce2:	f7fe fd77 	bl	80017d4 <Error_Handler>
 8002ce6:	e7c9      	b.n	8002c7c <LoRaWAN_Init+0xf8>
    Error_Handler();
 8002ce8:	f7fe fd74 	bl	80017d4 <Error_Handler>
 8002cec:	e7ce      	b.n	8002c8c <LoRaWAN_Init+0x108>
    Error_Handler();
 8002cee:	f7fe fd71 	bl	80017d4 <Error_Handler>
 8002cf2:	e7d3      	b.n	8002c9c <LoRaWAN_Init+0x118>
 8002cf4:	08015080 	.word	0x08015080
 8002cf8:	080150a4 	.word	0x080150a4
 8002cfc:	080150c8 	.word	0x080150c8
 8002d00:	080150ec 	.word	0x080150ec
 8002d04:	08015110 	.word	0x08015110
 8002d08:	0800270d 	.word	0x0800270d
 8002d0c:	2000053c 	.word	0x2000053c
 8002d10:	080026f9 	.word	0x080026f9
 8002d14:	200004fc 	.word	0x200004fc
 8002d18:	08002b71 	.word	0x08002b71
 8002d1c:	200004e4 	.word	0x200004e4
 8002d20:	080026ad 	.word	0x080026ad
 8002d24:	20000514 	.word	0x20000514
 8002d28:	080151a0 	.word	0x080151a0
 8002d2c:	08002b5d 	.word	0x08002b5d
 8002d30:	2000052c 	.word	0x2000052c
 8002d34:	080151c4 	.word	0x080151c4
 8002d38:	08002b49 	.word	0x08002b49
 8002d3c:	20000530 	.word	0x20000530
 8002d40:	0801520c 	.word	0x0801520c
 8002d44:	08002971 	.word	0x08002971
 8002d48:	20000538 	.word	0x20000538
 8002d4c:	080151e8 	.word	0x080151e8
 8002d50:	08002925 	.word	0x08002925
 8002d54:	20000534 	.word	0x20000534
 8002d58:	2000000c 	.word	0x2000000c
 8002d5c:	20000058 	.word	0x20000058
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000554 	.word	0x20000554
 8002d68:	080024f5 	.word	0x080024f5
 8002d6c:	2000006c 	.word	0x2000006c

08002d70 <HAL_GPIO_EXTI_Callback>:
{
 8002d70:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8002d72:	2802      	cmp	r0, #2
 8002d74:	d002      	beq.n	8002d7c <HAL_GPIO_EXTI_Callback+0xc>
 8002d76:	2840      	cmp	r0, #64	; 0x40
 8002d78:	d006      	beq.n	8002d88 <HAL_GPIO_EXTI_Callback+0x18>
}
 8002d7a:	bd08      	pop	{r3, pc}
      osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_GPIO_EXTI_Callback+0x24>)
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	f004 ffa5 	bl	8007cd0 <osThreadFlagsSet>
      break;
 8002d86:	e7f8      	b.n	8002d7a <HAL_GPIO_EXTI_Callback+0xa>
      osThreadFlagsSet(Thd_LoraStoreContextId, 1);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <HAL_GPIO_EXTI_Callback+0x28>)
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	f004 ff9f 	bl	8007cd0 <osThreadFlagsSet>
}
 8002d92:	e7f2      	b.n	8002d7a <HAL_GPIO_EXTI_Callback+0xa>
 8002d94:	20000534 	.word	0x20000534
 8002d98:	20000538 	.word	0x20000538

08002d9c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <LoraInfo_Init+0x1c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002da2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002da4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002da6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002da8:	2220      	movs	r2, #32
 8002daa:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002dac:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002db0:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8002db2:	2203      	movs	r2, #3
 8002db4:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002db6:	4770      	bx	lr
 8002db8:	2000056c 	.word	0x2000056c

08002dbc <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002dbc:	4800      	ldr	r0, [pc, #0]	; (8002dc0 <LoraInfo_GetPtr+0x4>)
 8002dbe:	4770      	bx	lr
 8002dc0:	2000056c 	.word	0x2000056c

08002dc4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002dc4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002dc6:	f000 f83f 	bl	8002e48 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002dca:	bd08      	pop	{r3, pc}

08002dcc <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002dcc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002dce:	f000 f87d 	bl	8002ecc <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002dd2:	bd08      	pop	{r3, pc}

08002dd4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002dd4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002dd6:	f000 f8c7 	bl	8002f68 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002dda:	bd08      	pop	{r3, pc}

08002ddc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002ddc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002dde:	f000 f8c5 	bl	8002f6c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002de2:	bd08      	pop	{r3, pc}

08002de4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002de4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002de6:	f000 f8c3 	bl	8002f70 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002dea:	bd08      	pop	{r3, pc}

08002dec <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002dec:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002dee:	f000 f8c1 	bl	8002f74 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002df2:	bd08      	pop	{r3, pc}

08002df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002df6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002df8:	f000 f8c1 	bl	8002f7e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dfe:	490d      	ldr	r1, [pc, #52]	; (8002e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e00:	4a0d      	ldr	r2, [pc, #52]	; (8002e38 <LoopForever+0xe>)
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e04:	e002      	b.n	8002e0c <LoopCopyDataInit>

08002e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0a:	3304      	adds	r3, #4

08002e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e10:	d3f9      	bcc.n	8002e06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e12:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e14:	4c0a      	ldr	r4, [pc, #40]	; (8002e40 <LoopForever+0x16>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e18:	e001      	b.n	8002e1e <LoopFillZerobss>

08002e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e1c:	3204      	adds	r2, #4

08002e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e20:	d3fb      	bcc.n	8002e1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e22:	f011 fe17 	bl	8014a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e26:	f7fe fd21 	bl	800186c <main>

08002e2a <LoopForever>:

LoopForever:
    b LoopForever
 8002e2a:	e7fe      	b.n	8002e2a <LoopForever>
  ldr   r0, =_estack
 8002e2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e34:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002e38:	08015c38 	.word	0x08015c38
  ldr r2, =_sbss
 8002e3c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002e40:	20004470 	.word	0x20004470

08002e44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e44:	e7fe      	b.n	8002e44 <ADC_IRQHandler>
	...

08002e48 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e4c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e4e:	2400      	movs	r4, #0
 8002e50:	9401      	str	r4, [sp, #4]
 8002e52:	9402      	str	r4, [sp, #8]
 8002e54:	9403      	str	r4, [sp, #12]
 8002e56:	9404      	str	r4, [sp, #16]
 8002e58:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e60:	f042 0204 	orr.w	r2, r2, #4
 8002e64:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002e6e:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002e70:	2710      	movs	r7, #16
 8002e72:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e74:	2301      	movs	r3, #1
 8002e76:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002e7c:	4d12      	ldr	r5, [pc, #72]	; (8002ec8 <BSP_RADIO_Init+0x80>)
 8002e7e:	a901      	add	r1, sp, #4
 8002e80:	4628      	mov	r0, r5
 8002e82:	f001 fa21 	bl	80042c8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002e86:	f04f 0820 	mov.w	r8, #32
 8002e8a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002e8e:	a901      	add	r1, sp, #4
 8002e90:	4628      	mov	r0, r5
 8002e92:	f001 fa19 	bl	80042c8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002e96:	2608      	movs	r6, #8
 8002e98:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002e9a:	a901      	add	r1, sp, #4
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f001 fa13 	bl	80042c8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	4641      	mov	r1, r8
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f001 fb5e 	bl	8004568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002eac:	4622      	mov	r2, r4
 8002eae:	4639      	mov	r1, r7
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	f001 fb59 	bl	8004568 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	4631      	mov	r1, r6
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f001 fb54 	bl	8004568 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	b006      	add	sp, #24
 8002ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ec8:	48000800 	.word	0x48000800

08002ecc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002ecc:	b510      	push	{r4, lr}
  switch (Config)
 8002ece:	2803      	cmp	r0, #3
 8002ed0:	d813      	bhi.n	8002efa <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002ed2:	e8df f000 	tbb	[pc, r0]
 8002ed6:	1402      	.short	0x1402
 8002ed8:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002eda:	4c22      	ldr	r4, [pc, #136]	; (8002f64 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	2108      	movs	r1, #8
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f001 fb41 	bl	8004568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2110      	movs	r1, #16
 8002eea:	4620      	mov	r0, r4
 8002eec:	f001 fb3c 	bl	8004568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2120      	movs	r1, #32
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f001 fb37 	bl	8004568 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002efa:	2000      	movs	r0, #0
 8002efc:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002efe:	4c19      	ldr	r4, [pc, #100]	; (8002f64 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	2108      	movs	r1, #8
 8002f04:	4620      	mov	r0, r4
 8002f06:	f001 fb2f 	bl	8004568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f001 fb2a 	bl	8004568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002f14:	2200      	movs	r2, #0
 8002f16:	2120      	movs	r1, #32
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f001 fb25 	bl	8004568 <HAL_GPIO_WritePin>
      break;
 8002f1e:	e7ec      	b.n	8002efa <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f20:	4c10      	ldr	r4, [pc, #64]	; (8002f64 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	2108      	movs	r1, #8
 8002f26:	4620      	mov	r0, r4
 8002f28:	f001 fb1e 	bl	8004568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2110      	movs	r1, #16
 8002f30:	4620      	mov	r0, r4
 8002f32:	f001 fb19 	bl	8004568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f36:	2201      	movs	r2, #1
 8002f38:	2120      	movs	r1, #32
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	f001 fb14 	bl	8004568 <HAL_GPIO_WritePin>
      break;
 8002f40:	e7db      	b.n	8002efa <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f42:	4c08      	ldr	r4, [pc, #32]	; (8002f64 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	2108      	movs	r1, #8
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f001 fb0d 	bl	8004568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2110      	movs	r1, #16
 8002f52:	4620      	mov	r0, r4
 8002f54:	f001 fb08 	bl	8004568 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f58:	2201      	movs	r2, #1
 8002f5a:	2120      	movs	r1, #32
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f001 fb03 	bl	8004568 <HAL_GPIO_WritePin>
      break;
 8002f62:	e7ca      	b.n	8002efa <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002f64:	48000800 	.word	0x48000800

08002f68 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002f68:	2000      	movs	r0, #0
 8002f6a:	4770      	bx	lr

08002f6c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	4770      	bx	lr

08002f70 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002f70:	2001      	movs	r0, #1
 8002f72:	4770      	bx	lr

08002f74 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002f74:	b908      	cbnz	r0, 8002f7a <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002f76:	200f      	movs	r0, #15
 8002f78:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002f7a:	2016      	movs	r0, #22
  }

  return ret;
}
 8002f7c:	4770      	bx	lr

08002f7e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002f7e:	4770      	bx	lr

08002f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f80:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f82:	2003      	movs	r0, #3
 8002f84:	f000 fd2e 	bl	80039e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f88:	f001 fd4c 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_Init+0x28>)
 8002f8e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f90:	200f      	movs	r0, #15
 8002f92:	f7fe fe67 	bl	8001c64 <HAL_InitTick>
 8002f96:	b110      	cbz	r0, 8002f9e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8002f98:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	bd10      	pop	{r4, pc}
 8002f9e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002fa0:	f7fe fd20 	bl	80019e4 <HAL_MspInit>
 8002fa4:	e7f9      	b.n	8002f9a <HAL_Init+0x1a>
 8002fa6:	bf00      	nop
 8002fa8:	20000070 	.word	0x20000070

08002fac <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002fac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002fb0:	6913      	ldr	r3, [r2, #16]
 8002fb2:	f023 0302 	bic.w	r3, r3, #2
 8002fb6:	6113      	str	r3, [r2, #16]
}
 8002fb8:	4770      	bx	lr

08002fba <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002fba:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8002fbe:	6913      	ldr	r3, [r2, #16]
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6113      	str	r3, [r2, #16]
}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8002fc8:	4b01      	ldr	r3, [pc, #4]	; (8002fd0 <HAL_GetUIDw0+0x8>)
 8002fca:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8002fce:	4770      	bx	lr
 8002fd0:	1fff7000 	.word	0x1fff7000

08002fd4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8002fd4:	4b01      	ldr	r3, [pc, #4]	; (8002fdc <HAL_GetUIDw1+0x8>)
 8002fd6:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8002fda:	4770      	bx	lr
 8002fdc:	1fff7000 	.word	0x1fff7000

08002fe0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8002fe0:	4b01      	ldr	r3, [pc, #4]	; (8002fe8 <HAL_GetUIDw2+0x8>)
 8002fe2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8002fe6:	4770      	bx	lr
 8002fe8:	1fff7000 	.word	0x1fff7000

08002fec <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002fec:	4a02      	ldr	r2, [pc, #8]	; (8002ff8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8002fee:	6853      	ldr	r3, [r2, #4]
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8002ff6:	4770      	bx	lr
 8002ff8:	e0042000 	.word	0xe0042000

08002ffc <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002ffc:	4a02      	ldr	r2, [pc, #8]	; (8003008 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002ffe:	6853      	ldr	r3, [r2, #4]
 8003000:	f023 0302 	bic.w	r3, r3, #2
 8003004:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8003006:	4770      	bx	lr
 8003008:	e0042000 	.word	0xe0042000

0800300c <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800300c:	4a02      	ldr	r2, [pc, #8]	; (8003018 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800300e:	6853      	ldr	r3, [r2, #4]
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8003016:	4770      	bx	lr
 8003018:	e0042000 	.word	0xe0042000

0800301c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003020:	2300      	movs	r3, #0
 8003022:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003024:	2800      	cmp	r0, #0
 8003026:	f000 811b 	beq.w	8003260 <HAL_ADC_Init+0x244>
 800302a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800302c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800302e:	b1bb      	cbz	r3, 8003060 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003030:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003032:	6893      	ldr	r3, [r2, #8]
 8003034:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003038:	d11f      	bne.n	800307a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800303a:	6893      	ldr	r3, [r2, #8]
 800303c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003040:	f023 0317 	bic.w	r3, r3, #23
 8003044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003048:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800304a:	4b86      	ldr	r3, [pc, #536]	; (8003264 <HAL_ADC_Init+0x248>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	099b      	lsrs	r3, r3, #6
 8003050:	4a85      	ldr	r2, [pc, #532]	; (8003268 <HAL_ADC_Init+0x24c>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	3301      	adds	r3, #1
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800305e:	e009      	b.n	8003074 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003060:	f7fd ff54 	bl	8000f0c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003064:	2300      	movs	r3, #0
 8003066:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003068:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800306c:	e7e0      	b.n	8003030 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800306e:	9b01      	ldr	r3, [sp, #4]
 8003070:	3b01      	subs	r3, #1
 8003072:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003074:	9b01      	ldr	r3, [sp, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f9      	bne.n	800306e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800307a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800307c:	6893      	ldr	r3, [r2, #8]
 800307e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003082:	f040 809c 	bne.w	80031be <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003088:	f043 0310 	orr.w	r3, r3, #16
 800308c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800308e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003096:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003098:	6893      	ldr	r3, [r2, #8]
 800309a:	f013 0304 	ands.w	r3, r3, #4
 800309e:	d000      	beq.n	80030a2 <HAL_ADC_Init+0x86>
 80030a0:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80030a4:	f011 0f10 	tst.w	r1, #16
 80030a8:	f040 80d3 	bne.w	8003252 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 80d0 	bne.w	8003252 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80030b4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80030b8:	f041 0102 	orr.w	r1, r1, #2
 80030bc:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030be:	6891      	ldr	r1, [r2, #8]
 80030c0:	f011 0f01 	tst.w	r1, #1
 80030c4:	d151      	bne.n	800316a <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80030c6:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030c8:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80030ca:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80030ce:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030d0:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80030d4:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80030d6:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80030da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80030dc:	b10d      	cbz	r5, 80030e2 <HAL_ADC_Init+0xc6>
 80030de:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80030e2:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 80030e4:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80030e6:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80030e8:	6925      	ldr	r5, [r4, #16]
 80030ea:	2d00      	cmp	r5, #0
 80030ec:	db69      	blt.n	80031c2 <HAL_ADC_Init+0x1a6>
 80030ee:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80030f2:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80030f4:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80030f8:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030fc:	f894 5020 	ldrb.w	r5, [r4, #32]
 8003100:	2d01      	cmp	r5, #1
 8003102:	d061      	beq.n	80031c8 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003104:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003106:	b125      	cbz	r5, 8003112 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003108:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800310c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800310e:	4335      	orrs	r5, r6
 8003110:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003112:	68d5      	ldr	r5, [r2, #12]
 8003114:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8003118:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 800311c:	ea4c 0101 	orr.w	r1, ip, r1
 8003120:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003122:	6862      	ldr	r2, [r4, #4]
 8003124:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003128:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800312a:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800312e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003132:	2901      	cmp	r1, #1
 8003134:	d055      	beq.n	80031e2 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003136:	6822      	ldr	r2, [r4, #0]
 8003138:	6916      	ldr	r6, [r2, #16]
 800313a:	494c      	ldr	r1, [pc, #304]	; (800326c <HAL_ADC_Init+0x250>)
 800313c:	4031      	ands	r1, r6
 800313e:	4329      	orrs	r1, r5
 8003140:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003142:	6862      	ldr	r2, [r4, #4]
 8003144:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8003148:	d00f      	beq.n	800316a <HAL_ADC_Init+0x14e>
 800314a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800314e:	d00c      	beq.n	800316a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003150:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003154:	d009      	beq.n	800316a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003156:	4d46      	ldr	r5, [pc, #280]	; (8003270 <HAL_ADC_Init+0x254>)
 8003158:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 800315c:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003160:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8003164:	430a      	orrs	r2, r1
 8003166:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800316a:	6825      	ldr	r5, [r4, #0]
 800316c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 800316e:	6969      	ldr	r1, [r5, #20]
 8003170:	f021 0107 	bic.w	r1, r1, #7
 8003174:	430a      	orrs	r2, r1
 8003176:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003178:	6821      	ldr	r1, [r4, #0]
 800317a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800317c:	694a      	ldr	r2, [r1, #20]
 800317e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003182:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003186:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003188:	6922      	ldr	r2, [r4, #16]
 800318a:	2a00      	cmp	r2, #0
 800318c:	d133      	bne.n	80031f6 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003192:	f063 030f 	orn	r3, r3, #15
 8003196:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003198:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 80031a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d04c      	beq.n	8003240 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031a8:	f023 0312 	bic.w	r3, r3, #18
 80031ac:	f043 0310 	orr.w	r3, r3, #16
 80031b0:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80031ba:	2001      	movs	r0, #1
 80031bc:	e04e      	b.n	800325c <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031be:	2000      	movs	r0, #0
 80031c0:	e76a      	b.n	8003098 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80031c2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80031c6:	e794      	b.n	80030f2 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80031c8:	b916      	cbnz	r6, 80031d0 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031ca:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80031ce:	e799      	b.n	8003104 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d0:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80031d2:	f045 0520 	orr.w	r5, r5, #32
 80031d6:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d8:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 80031da:	f045 0501 	orr.w	r5, r5, #1
 80031de:	65e5      	str	r5, [r4, #92]	; 0x5c
 80031e0:	e790      	b.n	8003104 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 80031e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031e4:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 80031e6:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80031e8:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 80031ea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80031ec:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80031ee:	432a      	orrs	r2, r5
 80031f0:	f042 0501 	orr.w	r5, r2, #1
 80031f4:	e79f      	b.n	8003136 <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031f6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80031fa:	d1cd      	bne.n	8003198 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80031fc:	2b07      	cmp	r3, #7
 80031fe:	d808      	bhi.n	8003212 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003200:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003202:	0099      	lsls	r1, r3, #2
 8003204:	40ca      	lsrs	r2, r1
 8003206:	f002 020f 	and.w	r2, r2, #15
 800320a:	2a0f      	cmp	r2, #15
 800320c:	d001      	beq.n	8003212 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800320e:	3301      	adds	r3, #1
 8003210:	e7f4      	b.n	80031fc <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003212:	2b01      	cmp	r3, #1
 8003214:	d00e      	beq.n	8003234 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003216:	6821      	ldr	r1, [r4, #0]
 8003218:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800321a:	69e3      	ldr	r3, [r4, #28]
 800321c:	3b01      	subs	r3, #1
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	f003 031c 	and.w	r3, r3, #28
 8003224:	f06f 020f 	mvn.w	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800322e:	4313      	orrs	r3, r2
 8003230:	628b      	str	r3, [r1, #40]	; 0x28
 8003232:	e7b1      	b.n	8003198 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003238:	f063 030f 	orn	r3, r3, #15
 800323c:	6293      	str	r3, [r2, #40]	; 0x28
 800323e:	e7ab      	b.n	8003198 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003240:	2300      	movs	r3, #0
 8003242:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003244:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003250:	e004      	b.n	800325c <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003254:	f043 0310 	orr.w	r3, r3, #16
 8003258:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800325a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800325c:	b002      	add	sp, #8
 800325e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003260:	2001      	movs	r0, #1
 8003262:	e7fb      	b.n	800325c <HAL_ADC_Init+0x240>
 8003264:	20000070 	.word	0x20000070
 8003268:	053e2d63 	.word	0x053e2d63
 800326c:	1ffffc02 	.word	0x1ffffc02
 8003270:	40012000 	.word	0x40012000

08003274 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	4604      	mov	r4, r0
 8003278:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800327a:	6946      	ldr	r6, [r0, #20]
 800327c:	2e08      	cmp	r6, #8
 800327e:	d005      	beq.n	800328c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003280:	6803      	ldr	r3, [r0, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f013 0f01 	tst.w	r3, #1
 8003288:	d11e      	bne.n	80032c8 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800328a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800328c:	f7fe fcec 	bl	8001c68 <HAL_GetTick>
 8003290:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4232      	tst	r2, r6
 8003298:	d11c      	bne.n	80032d4 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800329e:	d0f8      	beq.n	8003292 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032a0:	f7fe fce2 	bl	8001c68 <HAL_GetTick>
 80032a4:	1bc3      	subs	r3, r0, r7
 80032a6:	42ab      	cmp	r3, r5
 80032a8:	d801      	bhi.n	80032ae <HAL_ADC_PollForConversion+0x3a>
 80032aa:	2d00      	cmp	r5, #0
 80032ac:	d1f1      	bne.n	8003292 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4233      	tst	r3, r6
 80032b4:	d1ed      	bne.n	8003292 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80032be:	2300      	movs	r3, #0
 80032c0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 80032c4:	2003      	movs	r0, #3
 80032c6:	e028      	b.n	800331a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032c8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80032ca:	f043 0320 	orr.w	r3, r3, #32
 80032ce:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80032d0:	2001      	movs	r0, #1
 80032d2:	e022      	b.n	800331a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032d4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80032e2:	d115      	bne.n	8003310 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032e4:	7ea2      	ldrb	r2, [r4, #26]
 80032e6:	b99a      	cbnz	r2, 8003310 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	f012 0f08 	tst.w	r2, #8
 80032ee:	d00f      	beq.n	8003310 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	f012 0f04 	tst.w	r2, #4
 80032f6:	d111      	bne.n	800331c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	f022 020c 	bic.w	r2, r2, #12
 80032fe:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003300:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003302:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003306:	f023 0301 	bic.w	r3, r3, #1
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003310:	7e20      	ldrb	r0, [r4, #24]
 8003312:	b960      	cbnz	r0, 800332e <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	220c      	movs	r2, #12
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800331a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800331c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800331e:	f043 0320 	orr.w	r3, r3, #32
 8003322:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003324:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800332c:	e7f0      	b.n	8003310 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800332e:	2000      	movs	r0, #0
 8003330:	e7f3      	b.n	800331a <HAL_ADC_PollForConversion+0xa6>

08003332 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003332:	6803      	ldr	r3, [r0, #0]
 8003334:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003336:	4770      	bx	lr

08003338 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003338:	b470      	push	{r4, r5, r6}
 800333a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800333c:	2200      	movs	r2, #0
 800333e:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003340:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003342:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8003346:	2a01      	cmp	r2, #1
 8003348:	f000 8105 	beq.w	8003556 <HAL_ADC_ConfigChannel+0x21e>
 800334c:	4603      	mov	r3, r0
 800334e:	2201      	movs	r2, #1
 8003350:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003354:	6802      	ldr	r2, [r0, #0]
 8003356:	6890      	ldr	r0, [r2, #8]
 8003358:	f010 0f04 	tst.w	r0, #4
 800335c:	d00a      	beq.n	8003374 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003360:	f042 0220 	orr.w	r2, r2, #32
 8003364:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003366:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800336e:	b003      	add	sp, #12
 8003370:	bc70      	pop	{r4, r5, r6}
 8003372:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003374:	6848      	ldr	r0, [r1, #4]
 8003376:	2802      	cmp	r0, #2
 8003378:	f000 809e 	beq.w	80034b8 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800337c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003380:	d029      	beq.n	80033d6 <HAL_ADC_ConfigChannel+0x9e>
 8003382:	4d76      	ldr	r5, [pc, #472]	; (800355c <HAL_ADC_ConfigChannel+0x224>)
 8003384:	42ac      	cmp	r4, r5
 8003386:	d026      	beq.n	80033d6 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003388:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800338a:	f000 001f 	and.w	r0, r0, #31
 800338e:	250f      	movs	r5, #15
 8003390:	4085      	lsls	r5, r0
 8003392:	ea24 0505 	bic.w	r5, r4, r5
 8003396:	680c      	ldr	r4, [r1, #0]
 8003398:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800339c:	2e00      	cmp	r6, #0
 800339e:	d133      	bne.n	8003408 <HAL_ADC_ConfigChannel+0xd0>
 80033a0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80033a4:	fa04 f000 	lsl.w	r0, r4, r0
 80033a8:	4328      	orrs	r0, r5
 80033aa:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80033ac:	684c      	ldr	r4, [r1, #4]
 80033ae:	08a0      	lsrs	r0, r4, #2
 80033b0:	3001      	adds	r0, #1
 80033b2:	69dd      	ldr	r5, [r3, #28]
 80033b4:	42a8      	cmp	r0, r5
 80033b6:	d814      	bhi.n	80033e2 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80033b8:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80033ba:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80033bc:	f004 041f 	and.w	r4, r4, #31
 80033c0:	260f      	movs	r6, #15
 80033c2:	40a6      	lsls	r6, r4
 80033c4:	ea20 0006 	bic.w	r0, r0, r6
 80033c8:	f3c5 6583 	ubfx	r5, r5, #26, #4
 80033cc:	fa05 f404 	lsl.w	r4, r5, r4
 80033d0:	4304      	orrs	r4, r0
 80033d2:	6294      	str	r4, [r2, #40]	; 0x28
}
 80033d4:	e005      	b.n	80033e2 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80033d6:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80033d8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80033da:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80033de:	4320      	orrs	r0, r4
 80033e0:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80033e2:	681c      	ldr	r4, [r3, #0]
 80033e4:	680d      	ldr	r5, [r1, #0]
 80033e6:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80033e8:	6960      	ldr	r0, [r4, #20]
 80033ea:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80033ee:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 80033f2:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 80033f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033fa:	4302      	orrs	r2, r0
 80033fc:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033fe:	680a      	ldr	r2, [r1, #0]
 8003400:	2a00      	cmp	r2, #0
 8003402:	db09      	blt.n	8003418 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003404:	2000      	movs	r0, #0
 8003406:	e7af      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800340c:	b114      	cbz	r4, 8003414 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800340e:	fab4 f484 	clz	r4, r4
 8003412:	e7c7      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8003414:	2420      	movs	r4, #32
 8003416:	e7c5      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003418:	4951      	ldr	r1, [pc, #324]	; (8003560 <HAL_ADC_ConfigChannel+0x228>)
 800341a:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 800341e:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003422:	4c50      	ldr	r4, [pc, #320]	; (8003564 <HAL_ADC_ConfigChannel+0x22c>)
 8003424:	42a2      	cmp	r2, r4
 8003426:	d007      	beq.n	8003438 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003428:	4c4f      	ldr	r4, [pc, #316]	; (8003568 <HAL_ADC_ConfigChannel+0x230>)
 800342a:	42a2      	cmp	r2, r4
 800342c:	d026      	beq.n	800347c <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800342e:	4c4f      	ldr	r4, [pc, #316]	; (800356c <HAL_ADC_ConfigChannel+0x234>)
 8003430:	42a2      	cmp	r2, r4
 8003432:	d032      	beq.n	800349a <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003434:	2000      	movs	r0, #0
 8003436:	e797      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003438:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800343c:	d1f4      	bne.n	8003428 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800343e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003442:	4847      	ldr	r0, [pc, #284]	; (8003560 <HAL_ADC_ConfigChannel+0x228>)
 8003444:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003448:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800344c:	4311      	orrs	r1, r2
 800344e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003452:	4a47      	ldr	r2, [pc, #284]	; (8003570 <HAL_ADC_ConfigChannel+0x238>)
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	0992      	lsrs	r2, r2, #6
 8003458:	4946      	ldr	r1, [pc, #280]	; (8003574 <HAL_ADC_ConfigChannel+0x23c>)
 800345a:	fba1 1202 	umull	r1, r2, r1, r2
 800345e:	0992      	lsrs	r2, r2, #6
 8003460:	3201      	adds	r2, #1
 8003462:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003466:	0092      	lsls	r2, r2, #2
 8003468:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800346a:	e002      	b.n	8003472 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 800346c:	9a01      	ldr	r2, [sp, #4]
 800346e:	3a01      	subs	r2, #1
 8003470:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003472:	9a01      	ldr	r2, [sp, #4]
 8003474:	2a00      	cmp	r2, #0
 8003476:	d1f9      	bne.n	800346c <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003478:	2000      	movs	r0, #0
 800347a:	e775      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800347c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003480:	d1d5      	bne.n	800342e <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003482:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003486:	4836      	ldr	r0, [pc, #216]	; (8003560 <HAL_ADC_ConfigChannel+0x228>)
 8003488:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800348c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003490:	4311      	orrs	r1, r2
 8003492:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003496:	2000      	movs	r0, #0
}
 8003498:	e766      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800349a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800349e:	d158      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034a0:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034a4:	482e      	ldr	r0, [pc, #184]	; (8003560 <HAL_ADC_ConfigChannel+0x228>)
 80034a6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80034aa:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80034ae:	430a      	orrs	r2, r1
 80034b0:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b4:	2000      	movs	r0, #0
}
 80034b6:	e757      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034b8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80034bc:	d002      	beq.n	80034c4 <HAL_ADC_ConfigChannel+0x18c>
 80034be:	4827      	ldr	r0, [pc, #156]	; (800355c <HAL_ADC_ConfigChannel+0x224>)
 80034c0:	4284      	cmp	r4, r0
 80034c2:	d106      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80034c4:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80034c6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80034c8:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80034cc:	ea20 0004 	bic.w	r0, r0, r4
 80034d0:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034d2:	680a      	ldr	r2, [r1, #0]
 80034d4:	2a00      	cmp	r2, #0
 80034d6:	db01      	blt.n	80034dc <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d8:	2000      	movs	r0, #0
 80034da:	e745      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034dc:	4920      	ldr	r1, [pc, #128]	; (8003560 <HAL_ADC_ConfigChannel+0x228>)
 80034de:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034e2:	4820      	ldr	r0, [pc, #128]	; (8003564 <HAL_ADC_ConfigChannel+0x22c>)
 80034e4:	4282      	cmp	r2, r0
 80034e6:	d007      	beq.n	80034f8 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80034e8:	481f      	ldr	r0, [pc, #124]	; (8003568 <HAL_ADC_ConfigChannel+0x230>)
 80034ea:	4282      	cmp	r2, r0
 80034ec:	d013      	beq.n	8003516 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ee:	481f      	ldr	r0, [pc, #124]	; (800356c <HAL_ADC_ConfigChannel+0x234>)
 80034f0:	4282      	cmp	r2, r0
 80034f2:	d01f      	beq.n	8003534 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f4:	2000      	movs	r0, #0
 80034f6:	e737      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034f8:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034fc:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003500:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003504:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003508:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800350c:	4311      	orrs	r1, r2
 800350e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003512:	2000      	movs	r0, #0
}
 8003514:	e728      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003516:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800351a:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 800351e:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8003522:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003526:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800352a:	430a      	orrs	r2, r1
 800352c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003530:	2000      	movs	r0, #0
}
 8003532:	e719      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003534:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003538:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 800353c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003540:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003544:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003548:	430a      	orrs	r2, r1
 800354a:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354e:	2000      	movs	r0, #0
}
 8003550:	e70a      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
 8003552:	2000      	movs	r0, #0
 8003554:	e708      	b.n	8003368 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003556:	2002      	movs	r0, #2
 8003558:	e709      	b.n	800336e <HAL_ADC_ConfigChannel+0x36>
 800355a:	bf00      	nop
 800355c:	80000004 	.word	0x80000004
 8003560:	40012000 	.word	0x40012000
 8003564:	b0001000 	.word	0xb0001000
 8003568:	b8004000 	.word	0xb8004000
 800356c:	b4002000 	.word	0xb4002000
 8003570:	20000070 	.word	0x20000070
 8003574:	053e2d63 	.word	0x053e2d63

08003578 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003578:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800357a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	f012 0f04 	tst.w	r2, #4
 8003582:	d02a      	beq.n	80035da <ADC_ConversionStop+0x62>
 8003584:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	f012 0f02 	tst.w	r2, #2
 800358c:	d107      	bne.n	800359e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003594:	f022 0217 	bic.w	r2, r2, #23
 8003598:	f042 0210 	orr.w	r2, r2, #16
 800359c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800359e:	f7fe fb63 	bl	8001c68 <HAL_GetTick>
 80035a2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f013 0f04 	tst.w	r3, #4
 80035ac:	d013      	beq.n	80035d6 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80035ae:	f7fe fb5b 	bl	8001c68 <HAL_GetTick>
 80035b2:	1b43      	subs	r3, r0, r5
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d9f5      	bls.n	80035a4 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f013 0f04 	tst.w	r3, #4
 80035c0:	d0f0      	beq.n	80035a4 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035c4:	f043 0310 	orr.w	r3, r3, #16
 80035c8:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80035d2:	2001      	movs	r0, #1
 80035d4:	e002      	b.n	80035dc <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80035d6:	2000      	movs	r0, #0
 80035d8:	e000      	b.n	80035dc <ADC_ConversionStop+0x64>
 80035da:	2000      	movs	r0, #0
}
 80035dc:	bd38      	pop	{r3, r4, r5, pc}
	...

080035e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035e0:	b530      	push	{r4, r5, lr}
 80035e2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035e4:	2300      	movs	r3, #0
 80035e6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	f012 0f01 	tst.w	r2, #1
 80035f0:	d15b      	bne.n	80036aa <ADC_Enable+0xca>
 80035f2:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80035f4:	6899      	ldr	r1, [r3, #8]
 80035f6:	4a2e      	ldr	r2, [pc, #184]	; (80036b0 <ADC_Enable+0xd0>)
 80035f8:	4211      	tst	r1, r2
 80035fa:	d117      	bne.n	800362c <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003602:	f022 0217 	bic.w	r2, r2, #23
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800360c:	4b29      	ldr	r3, [pc, #164]	; (80036b4 <ADC_Enable+0xd4>)
 800360e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003612:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003616:	d019      	beq.n	800364c <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <ADC_Enable+0xd8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	099b      	lsrs	r3, r3, #6
 800361e:	4a27      	ldr	r2, [pc, #156]	; (80036bc <ADC_Enable+0xdc>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	099b      	lsrs	r3, r3, #6
 8003626:	3301      	adds	r3, #1
 8003628:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800362a:	e00c      	b.n	8003646 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800362e:	f043 0310 	orr.w	r3, r3, #16
 8003632:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003634:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 800363c:	2001      	movs	r0, #1
 800363e:	e035      	b.n	80036ac <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003640:	9b01      	ldr	r3, [sp, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003646:	9b01      	ldr	r3, [sp, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f9      	bne.n	8003640 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800364c:	7e63      	ldrb	r3, [r4, #25]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003652:	2000      	movs	r0, #0
 8003654:	e02a      	b.n	80036ac <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003656:	f7fe fb07 	bl	8001c68 <HAL_GetTick>
 800365a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f012 0f01 	tst.w	r2, #1
 8003664:	d11f      	bne.n	80036a6 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	f012 0f01 	tst.w	r2, #1
 800366c:	d107      	bne.n	800367e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003674:	f022 0217 	bic.w	r2, r2, #23
 8003678:	f042 0201 	orr.w	r2, r2, #1
 800367c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800367e:	f7fe faf3 	bl	8001c68 <HAL_GetTick>
 8003682:	1b40      	subs	r0, r0, r5
 8003684:	2802      	cmp	r0, #2
 8003686:	d9e9      	bls.n	800365c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f013 0f01 	tst.w	r3, #1
 8003690:	d1e4      	bne.n	800365c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003694:	f043 0310 	orr.w	r3, r3, #16
 8003698:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800369a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80036a2:	2001      	movs	r0, #1
 80036a4:	e002      	b.n	80036ac <ADC_Enable+0xcc>
  return HAL_OK;
 80036a6:	2000      	movs	r0, #0
 80036a8:	e000      	b.n	80036ac <ADC_Enable+0xcc>
 80036aa:	2000      	movs	r0, #0
}
 80036ac:	b003      	add	sp, #12
 80036ae:	bd30      	pop	{r4, r5, pc}
 80036b0:	80000017 	.word	0x80000017
 80036b4:	40012000 	.word	0x40012000
 80036b8:	20000070 	.word	0x20000070
 80036bc:	053e2d63 	.word	0x053e2d63

080036c0 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036c0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f013 0f04 	tst.w	r3, #4
 80036c8:	d128      	bne.n	800371c <HAL_ADC_Start+0x5c>
{
 80036ca:	b510      	push	{r4, lr}
 80036cc:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 80036ce:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d024      	beq.n	8003720 <HAL_ADC_Start+0x60>
 80036d6:	2301      	movs	r3, #1
 80036d8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 80036dc:	f7ff ff80 	bl	80035e0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80036e0:	b9c0      	cbnz	r0, 8003714 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 80036e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 80036f2:	2300      	movs	r3, #0
 80036f4:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036f6:	6822      	ldr	r2, [r4, #0]
 80036f8:	211c      	movs	r1, #28
 80036fa:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80036fc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003700:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003702:	6893      	ldr	r3, [r2, #8]
 8003704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003708:	f023 0317 	bic.w	r3, r3, #23
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6093      	str	r3, [r2, #8]
}
 8003712:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003714:	2300      	movs	r3, #0
 8003716:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800371a:	e7fa      	b.n	8003712 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 800371c:	2002      	movs	r0, #2
}
 800371e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003720:	2002      	movs	r0, #2
 8003722:	e7f6      	b.n	8003712 <HAL_ADC_Start+0x52>

08003724 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003728:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800372a:	6893      	ldr	r3, [r2, #8]
 800372c:	f013 0302 	ands.w	r3, r3, #2
 8003730:	d000      	beq.n	8003734 <ADC_Disable+0x10>
 8003732:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003734:	6891      	ldr	r1, [r2, #8]
 8003736:	f011 0f01 	tst.w	r1, #1
 800373a:	d039      	beq.n	80037b0 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800373c:	2b00      	cmp	r3, #0
 800373e:	d139      	bne.n	80037b4 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003740:	6893      	ldr	r3, [r2, #8]
 8003742:	f003 0305 	and.w	r3, r3, #5
 8003746:	2b01      	cmp	r3, #1
 8003748:	d009      	beq.n	800375e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800374c:	f043 0310 	orr.w	r3, r3, #16
 8003750:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003752:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 800375a:	2001      	movs	r0, #1
 800375c:	e029      	b.n	80037b2 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800375e:	6893      	ldr	r3, [r2, #8]
 8003760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003764:	f023 0317 	bic.w	r3, r3, #23
 8003768:	f043 0302 	orr.w	r3, r3, #2
 800376c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	2203      	movs	r2, #3
 8003772:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003774:	f7fe fa78 	bl	8001c68 <HAL_GetTick>
 8003778:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f013 0f01 	tst.w	r3, #1
 8003782:	d013      	beq.n	80037ac <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003784:	f7fe fa70 	bl	8001c68 <HAL_GetTick>
 8003788:	1b40      	subs	r0, r0, r5
 800378a:	2802      	cmp	r0, #2
 800378c:	d9f5      	bls.n	800377a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f013 0f01 	tst.w	r3, #1
 8003796:	d0f0      	beq.n	800377a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800379a:	f043 0310 	orr.w	r3, r3, #16
 800379e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80037a8:	2001      	movs	r0, #1
 80037aa:	e002      	b.n	80037b2 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037ac:	2000      	movs	r0, #0
 80037ae:	e000      	b.n	80037b2 <ADC_Disable+0x8e>
 80037b0:	2000      	movs	r0, #0
}
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80037b4:	2000      	movs	r0, #0
 80037b6:	e7fc      	b.n	80037b2 <ADC_Disable+0x8e>

080037b8 <HAL_ADC_DeInit>:
{
 80037b8:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d04c      	beq.n	8003858 <HAL_ADC_DeInit+0xa0>
 80037be:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80037c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 80037c8:	f7ff fed6 	bl	8003578 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80037cc:	4606      	mov	r6, r0
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d033      	beq.n	800383a <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	6853      	ldr	r3, [r2, #4]
 80037d6:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80037da:	f023 0303 	bic.w	r3, r3, #3
 80037de:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80037e0:	6823      	ldr	r3, [r4, #0]
 80037e2:	f240 329f 	movw	r2, #927	; 0x39f
 80037e6:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	68d1      	ldr	r1, [r2, #12]
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_ADC_DeInit+0xa4>)
 80037ee:	400b      	ands	r3, r1
 80037f0:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	6913      	ldr	r3, [r2, #16]
 80037f6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80037fa:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80037fc:	6822      	ldr	r2, [r4, #0]
 80037fe:	6953      	ldr	r3, [r2, #20]
 8003800:	f023 0307 	bic.w	r3, r3, #7
 8003804:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003806:	6822      	ldr	r2, [r4, #0]
 8003808:	6a13      	ldr	r3, [r2, #32]
 800380a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800380e:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003814:	2500      	movs	r5, #0
 8003816:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003818:	4a11      	ldr	r2, [pc, #68]	; (8003860 <HAL_ADC_DeInit+0xa8>)
 800381a:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 800381e:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003822:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003826:	4620      	mov	r0, r4
 8003828:	f7fd fb86 	bl	8000f38 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800382c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 800382e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003830:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003832:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003836:	4630      	mov	r0, r6
 8003838:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800383a:	4620      	mov	r0, r4
 800383c:	f7ff ff72 	bl	8003724 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003840:	4606      	mov	r6, r0
 8003842:	b908      	cbnz	r0, 8003848 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8003844:	2301      	movs	r3, #1
 8003846:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003848:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800384a:	6893      	ldr	r3, [r2, #8]
 800384c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003850:	f023 0317 	bic.w	r3, r3, #23
 8003854:	6093      	str	r3, [r2, #8]
}
 8003856:	e7bc      	b.n	80037d2 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003858:	2601      	movs	r6, #1
 800385a:	e7ec      	b.n	8003836 <HAL_ADC_DeInit+0x7e>
 800385c:	833e0200 	.word	0x833e0200
 8003860:	40012000 	.word	0x40012000

08003864 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003864:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003868:	2b01      	cmp	r3, #1
 800386a:	d019      	beq.n	80038a0 <HAL_ADC_Stop+0x3c>
{
 800386c:	b510      	push	{r4, lr}
 800386e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003870:	2301      	movs	r3, #1
 8003872:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003876:	f7ff fe7f 	bl	8003578 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800387a:	b118      	cbz	r0, 8003884 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800387c:	2300      	movs	r3, #0
 800387e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003882:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003884:	4620      	mov	r0, r4
 8003886:	f7ff ff4d 	bl	8003724 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800388a:	2800      	cmp	r0, #0
 800388c:	d1f6      	bne.n	800387c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800388e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	65a3      	str	r3, [r4, #88]	; 0x58
 800389e:	e7ed      	b.n	800387c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80038a0:	2002      	movs	r0, #2
}
 80038a2:	4770      	bx	lr

080038a4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80038a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80038ac:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	f000 8094 	beq.w	80039de <HAL_ADCEx_Calibration_Start+0x13a>
 80038b6:	4604      	mov	r4, r0
 80038b8:	2301      	movs	r3, #1
 80038ba:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038be:	f7ff ff31 	bl	8003724 <ADC_Disable>
 80038c2:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	f012 0201 	ands.w	r2, r2, #1
 80038cc:	d009      	beq.n	80038e2 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038d0:	f043 0310 	orr.w	r3, r3, #16
 80038d4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80038d6:	2300      	movs	r3, #0
 80038d8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 80038dc:	4628      	mov	r0, r5
 80038de:	b003      	add	sp, #12
 80038e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80038e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038e4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80038e8:	f041 0102 	orr.w	r1, r1, #2
 80038ec:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80038ee:	68de      	ldr	r6, [r3, #12]
 80038f0:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80038f4:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 80038f8:	0436      	lsls	r6, r6, #16
 80038fa:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003902:	f021 0103 	bic.w	r1, r1, #3
 8003906:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003908:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800390a:	e005      	b.n	8003918 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800390c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003914:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003916:	3201      	adds	r2, #1
 8003918:	2a07      	cmp	r2, #7
 800391a:	d81e      	bhi.n	800395a <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 800391c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800391e:	688b      	ldr	r3, [r1, #8]
 8003920:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003924:	f023 0317 	bic.w	r3, r3, #23
 8003928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800392c:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800392e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	2900      	cmp	r1, #0
 8003934:	daea      	bge.n	800390c <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003936:	9b01      	ldr	r3, [sp, #4]
 8003938:	3301      	adds	r3, #1
 800393a:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800393c:	9b01      	ldr	r3, [sp, #4]
 800393e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003942:	d3f4      	bcc.n	800392e <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003944:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003946:	f023 0312 	bic.w	r3, r3, #18
 800394a:	f043 0310 	orr.w	r3, r3, #16
 800394e:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003950:	2300      	movs	r3, #0
 8003952:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003956:	2501      	movs	r5, #1
 8003958:	e7c0      	b.n	80038dc <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 800395a:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 800395e:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003960:	688b      	ldr	r3, [r1, #8]
 8003962:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003966:	f023 0317 	bic.w	r3, r3, #23
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003970:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003972:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003976:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 800397a:	4302      	orrs	r2, r0
 800397c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003980:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003982:	6893      	ldr	r3, [r2, #8]
 8003984:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003988:	f023 0317 	bic.w	r3, r3, #23
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003992:	f7fe f969 	bl	8001c68 <HAL_GetTick>
 8003996:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003998:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	f012 0f01 	tst.w	r2, #1
 80039a0:	d109      	bne.n	80039b6 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4316      	orrs	r6, r2
 80039a6:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80039a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80039b4:	e78f      	b.n	80038d6 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039b6:	f7fe f957 	bl	8001c68 <HAL_GetTick>
 80039ba:	1bc3      	subs	r3, r0, r7
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d9eb      	bls.n	8003998 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f013 0f01 	tst.w	r3, #1
 80039c8:	d0e6      	beq.n	8003998 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039cc:	f043 0310 	orr.w	r3, r3, #16
 80039d0:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 80039da:	2501      	movs	r5, #1
 80039dc:	e77e      	b.n	80038dc <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 80039de:	2502      	movs	r5, #2
 80039e0:	e77c      	b.n	80038dc <HAL_ADCEx_Calibration_Start+0x38>
	...

080039e4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80039e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f0:	0200      	lsls	r0, r0, #8
 80039f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80039f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003a00:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003a02:	4770      	bx	lr
 8003a04:	e000ed00 	.word	0xe000ed00

08003a08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a08:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a0a:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_NVIC_SetPriority+0x68>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a12:	f1c3 0c07 	rsb	ip, r3, #7
 8003a16:	f1bc 0f04 	cmp.w	ip, #4
 8003a1a:	bf28      	it	cs
 8003a1c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a20:	f103 0e04 	add.w	lr, r3, #4
 8003a24:	f1be 0f06 	cmp.w	lr, #6
 8003a28:	d918      	bls.n	8003a5c <HAL_NVIC_SetPriority+0x54>
 8003a2a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 3eff 	mov.w	lr, #4294967295
 8003a30:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003a34:	ea21 010c 	bic.w	r1, r1, ip
 8003a38:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a3a:	fa0e f303 	lsl.w	r3, lr, r3
 8003a3e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a42:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003a44:	2800      	cmp	r0, #0
 8003a46:	db0b      	blt.n	8003a60 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a48:	0109      	lsls	r1, r1, #4
 8003a4a:	b2c9      	uxtb	r1, r1
 8003a4c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003a50:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003a54:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a58:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e7e5      	b.n	8003a2c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a60:	f000 000f 	and.w	r0, r0, #15
 8003a64:	0109      	lsls	r1, r1, #4
 8003a66:	b2c9      	uxtb	r1, r1
 8003a68:	4b02      	ldr	r3, [pc, #8]	; (8003a74 <HAL_NVIC_SetPriority+0x6c>)
 8003a6a:	5419      	strb	r1, [r3, r0]
 8003a6c:	e7f4      	b.n	8003a58 <HAL_NVIC_SetPriority+0x50>
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00
 8003a74:	e000ed14 	.word	0xe000ed14

08003a78 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a78:	2800      	cmp	r0, #0
 8003a7a:	db07      	blt.n	8003a8c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a7c:	f000 021f 	and.w	r2, r0, #31
 8003a80:	0940      	lsrs	r0, r0, #5
 8003a82:	2301      	movs	r3, #1
 8003a84:	4093      	lsls	r3, r2
 8003a86:	4a02      	ldr	r2, [pc, #8]	; (8003a90 <HAL_NVIC_EnableIRQ+0x18>)
 8003a88:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	e000e100 	.word	0xe000e100

08003a94 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a94:	2800      	cmp	r0, #0
 8003a96:	db0c      	blt.n	8003ab2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a98:	f000 021f 	and.w	r2, r0, #31
 8003a9c:	0940      	lsrs	r0, r0, #5
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	3020      	adds	r0, #32
 8003aa4:	4a03      	ldr	r2, [pc, #12]	; (8003ab4 <HAL_NVIC_DisableIRQ+0x20>)
 8003aa6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003aaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003aae:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003ab2:	4770      	bx	lr
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab8:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aba:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003abc:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003ac0:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ac4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003ac6:	b124      	cbz	r4, 8003ad2 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003aca:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003ace:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ad2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003ad4:	f004 0c1c 	and.w	ip, r4, #28
 8003ad8:	2401      	movs	r4, #1
 8003ada:	fa04 f40c 	lsl.w	r4, r4, ip
 8003ade:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003ae2:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ae6:	6804      	ldr	r4, [r0, #0]
 8003ae8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aea:	6883      	ldr	r3, [r0, #8]
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d005      	beq.n	8003afc <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003af0:	6803      	ldr	r3, [r0, #0]
 8003af2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003af4:	6803      	ldr	r3, [r0, #0]
 8003af6:	60da      	str	r2, [r3, #12]
  }
}
 8003af8:	bc10      	pop	{r4}
 8003afa:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003afc:	6803      	ldr	r3, [r0, #0]
 8003afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003b00:	6803      	ldr	r3, [r0, #0]
 8003b02:	60d9      	str	r1, [r3, #12]
 8003b04:	e7f8      	b.n	8003af8 <DMA_SetConfig+0x40>
	...

08003b08 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b08:	6803      	ldr	r3, [r0, #0]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d816      	bhi.n	8003b3e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003b12:	f022 0203 	bic.w	r2, r2, #3
 8003b16:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003b1a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003b1e:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	3b08      	subs	r3, #8
 8003b24:	4a0e      	ldr	r2, [pc, #56]	; (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003b2e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2201      	movs	r2, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003b3c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b3e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003b40:	f022 0103 	bic.w	r1, r2, #3
 8003b44:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003b46:	440a      	add	r2, r1
 8003b48:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	3b08      	subs	r3, #8
 8003b4e:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	3307      	adds	r3, #7
 8003b58:	e7e8      	b.n	8003b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003b5a:	bf00      	nop
 8003b5c:	40020407 	.word	0x40020407
 8003b60:	cccccccd 	.word	0xcccccccd
 8003b64:	40020880 	.word	0x40020880
 8003b68:	4002081c 	.word	0x4002081c

08003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b6c:	6843      	ldr	r3, [r0, #4]
 8003b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b72:	4a07      	ldr	r2, [pc, #28]	; (8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003b74:	441a      	add	r2, r3
 8003b76:	0092      	lsls	r2, r2, #2
 8003b78:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b7a:	4a06      	ldr	r2, [pc, #24]	; (8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003b7c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2201      	movs	r2, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	1000823f 	.word	0x1000823f
 8003b94:	40020940 	.word	0x40020940

08003b98 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	d060      	beq.n	8003c5e <HAL_DMA_Init+0xc6>
{
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ba0:	6802      	ldr	r2, [r0, #0]
 8003ba2:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <HAL_DMA_Init+0xcc>)
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d842      	bhi.n	8003c2e <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_DMA_Init+0xd0>)
 8003baa:	4413      	add	r3, r2
 8003bac:	492f      	ldr	r1, [pc, #188]	; (8003c6c <HAL_DMA_Init+0xd4>)
 8003bae:	fba1 1303 	umull	r1, r3, r1, r3
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bb8:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_DMA_Init+0xd8>)
 8003bba:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bcc:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003bce:	6821      	ldr	r1, [r4, #0]
 8003bd0:	680a      	ldr	r2, [r1, #0]
 8003bd2:	68a3      	ldr	r3, [r4, #8]
 8003bd4:	68e0      	ldr	r0, [r4, #12]
 8003bd6:	4303      	orrs	r3, r0
 8003bd8:	6920      	ldr	r0, [r4, #16]
 8003bda:	4303      	orrs	r3, r0
 8003bdc:	6960      	ldr	r0, [r4, #20]
 8003bde:	4303      	orrs	r3, r0
 8003be0:	69a0      	ldr	r0, [r4, #24]
 8003be2:	4303      	orrs	r3, r0
 8003be4:	69e0      	ldr	r0, [r4, #28]
 8003be6:	4303      	orrs	r3, r0
 8003be8:	6a20      	ldr	r0, [r4, #32]
 8003bea:	4303      	orrs	r3, r0
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff ff89 	bl	8003b08 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bf6:	68a3      	ldr	r3, [r4, #8]
 8003bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bfc:	d022      	beq.n	8003c44 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bfe:	6863      	ldr	r3, [r4, #4]
 8003c00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c06:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c08:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c0a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003c0c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c0e:	6863      	ldr	r3, [r4, #4]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d919      	bls.n	8003c4a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c1a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c1c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1e:	2000      	movs	r0, #0
 8003c20:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003c28:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003c2c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c2e:	4b11      	ldr	r3, [pc, #68]	; (8003c74 <HAL_DMA_Init+0xdc>)
 8003c30:	4413      	add	r3, r2
 8003c32:	490e      	ldr	r1, [pc, #56]	; (8003c6c <HAL_DMA_Init+0xd4>)
 8003c34:	fba1 1303 	umull	r1, r3, r1, r3
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <HAL_DMA_Init+0xe0>)
 8003c40:	6403      	str	r3, [r0, #64]	; 0x40
 8003c42:	e7bb      	b.n	8003bbc <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c44:	2300      	movs	r3, #0
 8003c46:	6063      	str	r3, [r4, #4]
 8003c48:	e7d9      	b.n	8003bfe <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff ff8e 	bl	8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c58:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	e7df      	b.n	8003c1e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8003c5e:	2001      	movs	r0, #1
}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40020407 	.word	0x40020407
 8003c68:	bffdfff8 	.word	0xbffdfff8
 8003c6c:	cccccccd 	.word	0xcccccccd
 8003c70:	40020000 	.word	0x40020000
 8003c74:	bffdfbf8 	.word	0xbffdfbf8
 8003c78:	40020400 	.word	0x40020400

08003c7c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d04b      	beq.n	8003d18 <HAL_DMA_DeInit+0x9c>
{
 8003c80:	b538      	push	{r3, r4, r5, lr}
 8003c82:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8003c84:	6802      	ldr	r2, [r0, #0]
 8003c86:	6813      	ldr	r3, [r2, #0]
 8003c88:	f023 0301 	bic.w	r3, r3, #1
 8003c8c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c8e:	6802      	ldr	r2, [r0, #0]
 8003c90:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_DMA_DeInit+0xa0>)
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d82c      	bhi.n	8003cf0 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <HAL_DMA_DeInit+0xa4>)
 8003c98:	4413      	add	r3, r2
 8003c9a:	4922      	ldr	r1, [pc, #136]	; (8003d24 <HAL_DMA_DeInit+0xa8>)
 8003c9c:	fba1 1303 	umull	r1, r3, r1, r3
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <HAL_DMA_DeInit+0xac>)
 8003ca8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 8003caa:	2500      	movs	r5, #0
 8003cac:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003cb0:	f003 021c 	and.w	r2, r3, #28
 8003cb4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4093      	lsls	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	f7ff ff23 	bl	8003b08 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8003cc2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003cc4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003cc8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003cca:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ccc:	6863      	ldr	r3, [r4, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d918      	bls.n	8003d06 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003cd8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003cda:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8003cdc:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003cde:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003ce0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003ce2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003ce6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003cea:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <HAL_DMA_DeInit+0xb0>)
 8003cf2:	4413      	add	r3, r2
 8003cf4:	490b      	ldr	r1, [pc, #44]	; (8003d24 <HAL_DMA_DeInit+0xa8>)
 8003cf6:	fba1 1303 	umull	r1, r3, r1, r3
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_DMA_DeInit+0xb4>)
 8003d02:	6403      	str	r3, [r0, #64]	; 0x40
 8003d04:	e7d1      	b.n	8003caa <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d06:	4620      	mov	r0, r4
 8003d08:	f7ff ff30 	bl	8003b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d0e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d12:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	e7dd      	b.n	8003cd4 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003d18:	2001      	movs	r0, #1
}
 8003d1a:	4770      	bx	lr
 8003d1c:	40020407 	.word	0x40020407
 8003d20:	bffdfff8 	.word	0xbffdfff8
 8003d24:	cccccccd 	.word	0xcccccccd
 8003d28:	40020000 	.word	0x40020000
 8003d2c:	bffdfbf8 	.word	0xbffdfbf8
 8003d30:	40020400 	.word	0x40020400

08003d34 <HAL_DMA_Start_IT>:
{
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003d38:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8003d3c:	2801      	cmp	r0, #1
 8003d3e:	d043      	beq.n	8003dc8 <HAL_DMA_Start_IT+0x94>
 8003d40:	2001      	movs	r0, #1
 8003d42:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003d46:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8003d4a:	b2c0      	uxtb	r0, r0
 8003d4c:	2801      	cmp	r0, #1
 8003d4e:	d006      	beq.n	8003d5e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003d54:	2300      	movs	r3, #0
 8003d56:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8003d5a:	2001      	movs	r0, #1
}
 8003d5c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d64:	2000      	movs	r0, #0
 8003d66:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003d68:	6825      	ldr	r5, [r4, #0]
 8003d6a:	6828      	ldr	r0, [r5, #0]
 8003d6c:	f020 0001 	bic.w	r0, r0, #1
 8003d70:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d72:	4620      	mov	r0, r4
 8003d74:	f7ff fea0 	bl	8003ab8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8003d78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d7a:	b1d3      	cbz	r3, 8003db2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7c:	6822      	ldr	r2, [r4, #0]
 8003d7e:	6813      	ldr	r3, [r2, #0]
 8003d80:	f043 030e 	orr.w	r3, r3, #14
 8003d84:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d96:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003d98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003d9a:	b11b      	cbz	r3, 8003da4 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003da4:	6822      	ldr	r2, [r4, #0]
 8003da6:	6813      	ldr	r3, [r2, #0]
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2000      	movs	r0, #0
 8003db0:	e7d4      	b.n	8003d5c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003db2:	6822      	ldr	r2, [r4, #0]
 8003db4:	6813      	ldr	r3, [r2, #0]
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dbc:	6822      	ldr	r2, [r4, #0]
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	f043 030a 	orr.w	r3, r3, #10
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e7de      	b.n	8003d86 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003dc8:	2002      	movs	r0, #2
 8003dca:	e7c7      	b.n	8003d5c <HAL_DMA_Start_IT+0x28>

08003dcc <HAL_DMA_Abort>:
  if (NULL == hdma)
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d034      	beq.n	8003e3c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003dd2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	2a02      	cmp	r2, #2
 8003dda:	d006      	beq.n	8003dea <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ddc:	2204      	movs	r2, #4
 8003dde:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003de0:	2200      	movs	r2, #0
 8003de2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8003de6:	2001      	movs	r0, #1
 8003de8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dea:	6801      	ldr	r1, [r0, #0]
 8003dec:	680a      	ldr	r2, [r1, #0]
 8003dee:	f022 020e 	bic.w	r2, r2, #14
 8003df2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003df4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003df6:	680a      	ldr	r2, [r1, #0]
 8003df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dfc:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8003dfe:	6801      	ldr	r1, [r0, #0]
 8003e00:	680a      	ldr	r2, [r1, #0]
 8003e02:	f022 0201 	bic.w	r2, r2, #1
 8003e06:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e0a:	f002 011c 	and.w	r1, r2, #28
 8003e0e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8003e10:	2201      	movs	r2, #1
 8003e12:	408a      	lsls	r2, r1
 8003e14:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e1a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e1e:	b132      	cbz	r2, 8003e2e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e20:	6811      	ldr	r1, [r2, #0]
 8003e22:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003e26:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e2a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003e2c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e34:	2000      	movs	r0, #0
 8003e36:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8003e3a:	4770      	bx	lr
    return HAL_ERROR;
 8003e3c:	2001      	movs	r0, #1
}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_DMA_Abort_IT>:
{
 8003e40:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003e42:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d003      	beq.n	8003e54 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003e50:	2001      	movs	r0, #1
}
 8003e52:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e54:	6802      	ldr	r2, [r0, #0]
 8003e56:	6813      	ldr	r3, [r2, #0]
 8003e58:	f023 030e 	bic.w	r3, r3, #14
 8003e5c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003e5e:	6802      	ldr	r2, [r0, #0]
 8003e60:	6813      	ldr	r3, [r2, #0]
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e68:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e70:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003e74:	f003 021c 	and.w	r2, r3, #28
 8003e78:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4093      	lsls	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003e82:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003e84:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8003e86:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003e88:	b133      	cbz	r3, 8003e98 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e92:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003e94:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8003e96:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8003ea4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003ea6:	b113      	cbz	r3, 8003eae <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8003ea8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2000      	movs	r0, #0
 8003eac:	e7d1      	b.n	8003e52 <HAL_DMA_Abort_IT+0x12>
 8003eae:	2000      	movs	r0, #0
 8003eb0:	e7cf      	b.n	8003e52 <HAL_DMA_Abort_IT+0x12>
	...

08003eb4 <HAL_DMA_IRQHandler>:
{
 8003eb4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003eb8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003eba:	6804      	ldr	r4, [r0, #0]
 8003ebc:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ebe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ec0:	f003 031c 	and.w	r3, r3, #28
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	420a      	tst	r2, r1
 8003eca:	d015      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x44>
 8003ecc:	f015 0f04 	tst.w	r5, #4
 8003ed0:	d012      	beq.n	8003ef8 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	f013 0f20 	tst.w	r3, #32
 8003ed8:	d103      	bne.n	8003ee2 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f023 0304 	bic.w	r3, r3, #4
 8003ee0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ee2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003ee4:	f003 021c 	and.w	r2, r3, #28
 8003ee8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003eea:	2304      	movs	r3, #4
 8003eec:	4093      	lsls	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003ef0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ef2:	b103      	cbz	r3, 8003ef6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003ef4:	4798      	blx	r3
}
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ef8:	2202      	movs	r2, #2
 8003efa:	409a      	lsls	r2, r3
 8003efc:	420a      	tst	r2, r1
 8003efe:	d028      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x9e>
 8003f00:	f015 0f02 	tst.w	r5, #2
 8003f04:	d025      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	f013 0f20 	tst.w	r3, #32
 8003f0c:	d106      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	f023 030a 	bic.w	r3, r3, #10
 8003f14:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003f1c:	6802      	ldr	r2, [r0, #0]
 8003f1e:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <HAL_DMA_IRQHandler+0xdc>)
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d90e      	bls.n	8003f42 <HAL_DMA_IRQHandler+0x8e>
 8003f24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f26:	f003 021c 	and.w	r2, r3, #28
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	4093      	lsls	r3, r2
 8003f2e:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_DMA_IRQHandler+0xe0>)
 8003f30:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003f32:	2300      	movs	r3, #0
 8003f34:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8003f38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0db      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003f3e:	4798      	blx	r3
 8003f40:	e7d9      	b.n	8003ef6 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003f42:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f44:	f003 021c 	and.w	r2, r3, #28
 8003f48:	2302      	movs	r3, #2
 8003f4a:	4093      	lsls	r3, r2
 8003f4c:	4a12      	ldr	r2, [pc, #72]	; (8003f98 <HAL_DMA_IRQHandler+0xe4>)
 8003f4e:	6053      	str	r3, [r2, #4]
 8003f50:	e7ef      	b.n	8003f32 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f52:	2208      	movs	r2, #8
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	420b      	tst	r3, r1
 8003f5a:	d0cc      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x42>
 8003f5c:	f015 0f08 	tst.w	r5, #8
 8003f60:	d0c9      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	f023 030e 	bic.w	r3, r3, #14
 8003f68:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003f6c:	f003 031c 	and.w	r3, r3, #28
 8003f70:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003f72:	2201      	movs	r2, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f7a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003f7c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8003f80:	2300      	movs	r3, #0
 8003f82:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8003f86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0b4      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003f8c:	4798      	blx	r3
  return;
 8003f8e:	e7b2      	b.n	8003ef6 <HAL_DMA_IRQHandler+0x42>
 8003f90:	40020080 	.word	0x40020080
 8003f94:	40020400 	.word	0x40020400
 8003f98:	40020000 	.word	0x40020000

08003f9c <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003f9c:	b178      	cbz	r0, 8003fbe <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003f9e:	6803      	ldr	r3, [r0, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003fa2:	f011 0f10 	tst.w	r1, #16
 8003fa6:	d004      	beq.n	8003fb2 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003fa8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003fac:	d004      	beq.n	8003fb8 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003fae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003fb2:	601a      	str	r2, [r3, #0]
  return status;
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003fb8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003fbc:	e7f9      	b.n	8003fb2 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003fbe:	2001      	movs	r0, #1
}
 8003fc0:	4770      	bx	lr
	...

08003fc4 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003fc4:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003fc6:	4c05      	ldr	r4, [pc, #20]	; (8003fdc <FLASH_Program_DoubleWord+0x18>)
 8003fc8:	6961      	ldr	r1, [r4, #20]
 8003fca:	f041 0101 	orr.w	r1, r1, #1
 8003fce:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003fd0:	6002      	str	r2, [r0, #0]
 8003fd2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003fd6:	6043      	str	r3, [r0, #4]
}
 8003fd8:	bc10      	pop	{r4}
 8003fda:	4770      	bx	lr
 8003fdc:	58004000 	.word	0x58004000

08003fe0 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003fe0:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <FLASH_Program_Fast+0x34>)
 8003fe2:	6953      	ldr	r3, [r2, #20]
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fea:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003fee:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003ff0:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8003ff2:	f851 2b04 	ldr.w	r2, [r1], #4
 8003ff6:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8003ffa:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8003ffc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004000:	d1f7      	bne.n	8003ff2 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004002:	4b04      	ldr	r3, [pc, #16]	; (8004014 <FLASH_Program_Fast+0x34>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800400a:	d1fa      	bne.n	8004002 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400c:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	58004000 	.word	0x58004000

08004018 <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_FLASH_Unlock+0x28>)
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	db01      	blt.n	8004024 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004020:	2000      	movs	r0, #0
 8004022:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004024:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_FLASH_Unlock+0x28>)
 8004026:	4a07      	ldr	r2, [pc, #28]	; (8004044 <HAL_FLASH_Unlock+0x2c>)
 8004028:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800402a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800402e:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	db01      	blt.n	800403a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2000      	movs	r0, #0
 8004038:	4770      	bx	lr
      status = HAL_ERROR;
 800403a:	2001      	movs	r0, #1
}
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	58004000 	.word	0x58004000
 8004044:	45670123 	.word	0x45670123

08004048 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <HAL_FLASH_Lock+0x18>)
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004050:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	db01      	blt.n	800405c <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8004058:	2001      	movs	r0, #1
}
 800405a:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2000      	movs	r0, #0
 800405e:	4770      	bx	lr
 8004060:	58004000 	.word	0x58004000

08004064 <FLASH_WaitForLastOperation>:
{
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8004068:	f7fd fdfe 	bl	8001c68 <HAL_GetTick>
 800406c:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800406e:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <FLASH_WaitForLastOperation+0x64>)
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004076:	d006      	beq.n	8004086 <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004078:	f7fd fdf6 	bl	8001c68 <HAL_GetTick>
 800407c:	1b00      	subs	r0, r0, r4
 800407e:	42a8      	cmp	r0, r5
 8004080:	d3f5      	bcc.n	800406e <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004082:	2003      	movs	r0, #3
}
 8004084:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <FLASH_WaitForLastOperation+0x64>)
 8004088:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800408a:	f013 0f01 	tst.w	r3, #1
 800408e:	d002      	beq.n	8004096 <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <FLASH_WaitForLastOperation+0x64>)
 8004092:	2101      	movs	r1, #1
 8004094:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8004096:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800409a:	4013      	ands	r3, r2
 800409c:	d001      	beq.n	80040a2 <FLASH_WaitForLastOperation+0x3e>
 800409e:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <FLASH_WaitForLastOperation+0x64>)
 80040a0:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 80040a2:	b95b      	cbnz	r3, 80040bc <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80040a4:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <FLASH_WaitForLastOperation+0x64>)
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80040ac:	d00a      	beq.n	80040c4 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80040ae:	f7fd fddb 	bl	8001c68 <HAL_GetTick>
 80040b2:	1b00      	subs	r0, r0, r4
 80040b4:	42a8      	cmp	r0, r5
 80040b6:	d3f5      	bcc.n	80040a4 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 80040b8:	2003      	movs	r0, #3
 80040ba:	e7e3      	b.n	8004084 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 80040bc:	4a03      	ldr	r2, [pc, #12]	; (80040cc <FLASH_WaitForLastOperation+0x68>)
 80040be:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80040c0:	2001      	movs	r0, #1
 80040c2:	e7df      	b.n	8004084 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 80040c4:	2000      	movs	r0, #0
 80040c6:	e7dd      	b.n	8004084 <FLASH_WaitForLastOperation+0x20>
 80040c8:	58004000 	.word	0x58004000
 80040cc:	2000057c 	.word	0x2000057c

080040d0 <HAL_FLASH_Program>:
{
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <HAL_FLASH_Program+0x5c>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d025      	beq.n	8004128 <HAL_FLASH_Program+0x58>
 80040dc:	4604      	mov	r4, r0
 80040de:	460d      	mov	r5, r1
 80040e0:	4616      	mov	r6, r2
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_FLASH_Program+0x5c>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040e8:	2200      	movs	r2, #0
 80040ea:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80040ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040f0:	f7ff ffb8 	bl	8004064 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80040f4:	b970      	cbnz	r0, 8004114 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80040f6:	2c01      	cmp	r4, #1
 80040f8:	d010      	beq.n	800411c <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80040fa:	4631      	mov	r1, r6
 80040fc:	4628      	mov	r0, r5
 80040fe:	f7ff ff6f 	bl	8003fe0 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004106:	f7ff ffad 	bl	8004064 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800410a:	4a09      	ldr	r2, [pc, #36]	; (8004130 <HAL_FLASH_Program+0x60>)
 800410c:	6953      	ldr	r3, [r2, #20]
 800410e:	ea23 0404 	bic.w	r4, r3, r4
 8004112:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_FLASH_Program+0x5c>)
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
}
 800411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 800411c:	4632      	mov	r2, r6
 800411e:	463b      	mov	r3, r7
 8004120:	4628      	mov	r0, r5
 8004122:	f7ff ff4f 	bl	8003fc4 <FLASH_Program_DoubleWord>
 8004126:	e7ec      	b.n	8004102 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8004128:	2002      	movs	r0, #2
 800412a:	e7f6      	b.n	800411a <HAL_FLASH_Program+0x4a>
 800412c:	2000057c 	.word	0x2000057c
 8004130:	58004000 	.word	0x58004000

08004134 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004134:	4a03      	ldr	r2, [pc, #12]	; (8004144 <FLASH_MassErase+0x10>)
 8004136:	6953      	ldr	r3, [r2, #20]
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	6153      	str	r3, [r2, #20]
#endif
}
 8004142:	4770      	bx	lr
 8004144:	58004000 	.word	0x58004000

08004148 <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004148:	4b18      	ldr	r3, [pc, #96]	; (80041ac <FLASH_FlushCaches+0x64>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004150:	2b01      	cmp	r3, #1
 8004152:	d006      	beq.n	8004162 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004154:	4b15      	ldr	r3, [pc, #84]	; (80041ac <FLASH_FlushCaches+0x64>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	2b01      	cmp	r3, #1
 800415e:	d012      	beq.n	8004186 <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004160:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <FLASH_FlushCaches+0x64>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800416a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800417a:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	e7e6      	b.n	8004154 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <FLASH_FlushCaches+0x64>)
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800419e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a6:	601a      	str	r2, [r3, #0]
}
 80041a8:	e7da      	b.n	8004160 <FLASH_FlushCaches+0x18>
 80041aa:	bf00      	nop
 80041ac:	58004000 	.word	0x58004000

080041b0 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80041b0:	4a03      	ldr	r2, [pc, #12]	; (80041c0 <FLASH_AcknowledgePageErase+0x10>)
 80041b2:	6953      	ldr	r3, [r2, #20]
 80041b4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80041b8:	f023 0302 	bic.w	r3, r3, #2
 80041bc:	6153      	str	r3, [r2, #20]
#endif
}
 80041be:	4770      	bx	lr
 80041c0:	58004000 	.word	0x58004000

080041c4 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80041c4:	4a05      	ldr	r2, [pc, #20]	; (80041dc <FLASH_PageErase+0x18>)
 80041c6:	6953      	ldr	r3, [r2, #20]
 80041c8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80041cc:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80041d0:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80041d4:	f040 0002 	orr.w	r0, r0, #2
 80041d8:	6150      	str	r0, [r2, #20]
}
 80041da:	4770      	bx	lr
 80041dc:	58004000 	.word	0x58004000

080041e0 <HAL_FLASHEx_Erase>:
{
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80041e2:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_FLASHEx_Erase+0x7c>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d035      	beq.n	8004256 <HAL_FLASHEx_Erase+0x76>
 80041ea:	4605      	mov	r5, r0
 80041ec:	460f      	mov	r7, r1
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_FLASHEx_Erase+0x7c>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80041f4:	2200      	movs	r2, #0
 80041f6:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80041f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80041fc:	f7ff ff32 	bl	8004064 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004200:	4606      	mov	r6, r0
 8004202:	bb18      	cbnz	r0, 800424c <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d013      	beq.n	8004232 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 800420a:	f04f 33ff 	mov.w	r3, #4294967295
 800420e:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004210:	686c      	ldr	r4, [r5, #4]
 8004212:	686b      	ldr	r3, [r5, #4]
 8004214:	68aa      	ldr	r2, [r5, #8]
 8004216:	4413      	add	r3, r2
 8004218:	42a3      	cmp	r3, r4
 800421a:	d913      	bls.n	8004244 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 800421c:	4620      	mov	r0, r4
 800421e:	f7ff ffd1 	bl	80041c4 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004226:	f7ff ff1d 	bl	8004064 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800422a:	4606      	mov	r6, r0
 800422c:	b948      	cbnz	r0, 8004242 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800422e:	3401      	adds	r4, #1
 8004230:	e7ef      	b.n	8004212 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004232:	f7ff ff7f 	bl	8004134 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800423a:	f7ff ff13 	bl	8004064 <FLASH_WaitForLastOperation>
 800423e:	4606      	mov	r6, r0
 8004240:	e002      	b.n	8004248 <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004242:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004244:	f7ff ffb4 	bl	80041b0 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8004248:	f7ff ff7e 	bl	8004148 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800424c:	4b03      	ldr	r3, [pc, #12]	; (800425c <HAL_FLASHEx_Erase+0x7c>)
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
}
 8004252:	4630      	mov	r0, r6
 8004254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8004256:	2602      	movs	r6, #2
 8004258:	e7fb      	b.n	8004252 <HAL_FLASHEx_Erase+0x72>
 800425a:	bf00      	nop
 800425c:	2000057c 	.word	0x2000057c

08004260 <HAL_FLASHEx_Erase_IT>:
{
 8004260:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8004262:	4b17      	ldr	r3, [pc, #92]	; (80042c0 <HAL_FLASHEx_Erase_IT+0x60>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d028      	beq.n	80042bc <HAL_FLASHEx_Erase_IT+0x5c>
 800426a:	4604      	mov	r4, r0
 800426c:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <HAL_FLASHEx_Erase_IT+0x60>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004272:	2200      	movs	r2, #0
 8004274:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004276:	6802      	ldr	r2, [r0, #0]
 8004278:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800427a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800427e:	f7ff fef1 	bl	8004064 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8004282:	4605      	mov	r5, r0
 8004284:	b120      	cbz	r0, 8004290 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 8004286:	4b0e      	ldr	r3, [pc, #56]	; (80042c0 <HAL_FLASHEx_Erase_IT+0x60>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]
}
 800428c:	4628      	mov	r0, r5
 800428e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004290:	4a0c      	ldr	r2, [pc, #48]	; (80042c4 <HAL_FLASHEx_Erase_IT+0x64>)
 8004292:	6953      	ldr	r3, [r2, #20]
 8004294:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004298:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	2b04      	cmp	r3, #4
 800429e:	d007      	beq.n	80042b0 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80042a0:	68a2      	ldr	r2, [r4, #8]
 80042a2:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <HAL_FLASHEx_Erase_IT+0x60>)
 80042a4:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 80042a6:	6860      	ldr	r0, [r4, #4]
 80042a8:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 80042aa:	f7ff ff8b 	bl	80041c4 <FLASH_PageErase>
 80042ae:	e7ed      	b.n	800428c <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_FLASHEx_Erase_IT+0x60>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 80042b6:	f7ff ff3d 	bl	8004134 <FLASH_MassErase>
 80042ba:	e7e7      	b.n	800428c <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 80042bc:	2502      	movs	r5, #2
 80042be:	e7e5      	b.n	800428c <HAL_FLASHEx_Erase_IT+0x2c>
 80042c0:	2000057c 	.word	0x2000057c
 80042c4:	58004000 	.word	0x58004000

080042c8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80042ca:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042cc:	e069      	b.n	80043a2 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042ce:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042d0:	005e      	lsls	r6, r3, #1
 80042d2:	2403      	movs	r4, #3
 80042d4:	40b4      	lsls	r4, r6
 80042d6:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042da:	68cc      	ldr	r4, [r1, #12]
 80042dc:	40b4      	lsls	r4, r6
 80042de:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80042e0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042e2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042e4:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e8:	684c      	ldr	r4, [r1, #4]
 80042ea:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80042ee:	409c      	lsls	r4, r3
 80042f0:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 80042f4:	6044      	str	r4, [r0, #4]
 80042f6:	e065      	b.n	80043c4 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042f8:	08dd      	lsrs	r5, r3, #3
 80042fa:	3508      	adds	r5, #8
 80042fc:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004300:	f003 0407 	and.w	r4, r3, #7
 8004304:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004308:	240f      	movs	r4, #15
 800430a:	fa04 f40c 	lsl.w	r4, r4, ip
 800430e:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004312:	690c      	ldr	r4, [r1, #16]
 8004314:	fa04 f40c 	lsl.w	r4, r4, ip
 8004318:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800431c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004320:	e067      	b.n	80043f2 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004322:	2402      	movs	r4, #2
 8004324:	e000      	b.n	8004328 <HAL_GPIO_Init+0x60>
 8004326:	2400      	movs	r4, #0
 8004328:	fa04 f40e 	lsl.w	r4, r4, lr
 800432c:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800432e:	f10c 0c02 	add.w	ip, ip, #2
 8004332:	4d4b      	ldr	r5, [pc, #300]	; (8004460 <HAL_GPIO_Init+0x198>)
 8004334:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004338:	4c4a      	ldr	r4, [pc, #296]	; (8004464 <HAL_GPIO_Init+0x19c>)
 800433a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800433c:	43d4      	mvns	r4, r2
 800433e:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004342:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004346:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 800434a:	d001      	beq.n	8004350 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800434c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004350:	4d44      	ldr	r5, [pc, #272]	; (8004464 <HAL_GPIO_Init+0x19c>)
 8004352:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004354:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004356:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800435a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800435e:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8004362:	d001      	beq.n	8004368 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004364:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004368:	4d3e      	ldr	r5, [pc, #248]	; (8004464 <HAL_GPIO_Init+0x19c>)
 800436a:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800436c:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004370:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004374:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004378:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 800437c:	d001      	beq.n	8004382 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 800437e:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004382:	4d38      	ldr	r5, [pc, #224]	; (8004464 <HAL_GPIO_Init+0x19c>)
 8004384:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004388:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800438c:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800438e:	684e      	ldr	r6, [r1, #4]
 8004390:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004394:	d001      	beq.n	800439a <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8004396:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800439a:	4a32      	ldr	r2, [pc, #200]	; (8004464 <HAL_GPIO_Init+0x19c>)
 800439c:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80043a0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043a2:	680a      	ldr	r2, [r1, #0]
 80043a4:	fa32 f403 	lsrs.w	r4, r2, r3
 80043a8:	d058      	beq.n	800445c <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043aa:	f04f 0c01 	mov.w	ip, #1
 80043ae:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80043b2:	ea1c 0202 	ands.w	r2, ip, r2
 80043b6:	d0f3      	beq.n	80043a0 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043b8:	684c      	ldr	r4, [r1, #4]
 80043ba:	f004 0403 	and.w	r4, r4, #3
 80043be:	3c01      	subs	r4, #1
 80043c0:	2c01      	cmp	r4, #1
 80043c2:	d984      	bls.n	80042ce <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c4:	684c      	ldr	r4, [r1, #4]
 80043c6:	f004 0403 	and.w	r4, r4, #3
 80043ca:	2c03      	cmp	r4, #3
 80043cc:	d00c      	beq.n	80043e8 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80043ce:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043d0:	005d      	lsls	r5, r3, #1
 80043d2:	f04f 0c03 	mov.w	ip, #3
 80043d6:	fa0c fc05 	lsl.w	ip, ip, r5
 80043da:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043de:	688c      	ldr	r4, [r1, #8]
 80043e0:	40ac      	lsls	r4, r5
 80043e2:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80043e6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043e8:	684c      	ldr	r4, [r1, #4]
 80043ea:	f004 0403 	and.w	r4, r4, #3
 80043ee:	2c02      	cmp	r4, #2
 80043f0:	d082      	beq.n	80042f8 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80043f2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043f4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80043f8:	f04f 0c03 	mov.w	ip, #3
 80043fc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004400:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004404:	684c      	ldr	r4, [r1, #4]
 8004406:	f004 0403 	and.w	r4, r4, #3
 800440a:	fa04 f40e 	lsl.w	r4, r4, lr
 800440e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004412:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004414:	684c      	ldr	r4, [r1, #4]
 8004416:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800441a:	d0c1      	beq.n	80043a0 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 800441c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004420:	f10c 0502 	add.w	r5, ip, #2
 8004424:	4c0e      	ldr	r4, [pc, #56]	; (8004460 <HAL_GPIO_Init+0x198>)
 8004426:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800442a:	f003 0403 	and.w	r4, r3, #3
 800442e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004432:	2407      	movs	r4, #7
 8004434:	fa04 f40e 	lsl.w	r4, r4, lr
 8004438:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800443c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004440:	f43f af71 	beq.w	8004326 <HAL_GPIO_Init+0x5e>
 8004444:	4c08      	ldr	r4, [pc, #32]	; (8004468 <HAL_GPIO_Init+0x1a0>)
 8004446:	42a0      	cmp	r0, r4
 8004448:	d006      	beq.n	8004458 <HAL_GPIO_Init+0x190>
 800444a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800444e:	42a0      	cmp	r0, r4
 8004450:	f43f af67 	beq.w	8004322 <HAL_GPIO_Init+0x5a>
 8004454:	2407      	movs	r4, #7
 8004456:	e767      	b.n	8004328 <HAL_GPIO_Init+0x60>
 8004458:	2401      	movs	r4, #1
 800445a:	e765      	b.n	8004328 <HAL_GPIO_Init+0x60>
  }
}
 800445c:	bd70      	pop	{r4, r5, r6, pc}
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000
 8004464:	58000800 	.word	0x58000800
 8004468:	48000400 	.word	0x48000400

0800446c <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 800446c:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800446e:	fa31 f203 	lsrs.w	r2, r1, r3
 8004472:	d071      	beq.n	8004558 <HAL_GPIO_DeInit+0xec>
{
 8004474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004476:	e02e      	b.n	80044d6 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004478:	2502      	movs	r5, #2
 800447a:	e000      	b.n	800447e <HAL_GPIO_DeInit+0x12>
 800447c:	2500      	movs	r5, #0
 800447e:	fa05 fc0c 	lsl.w	ip, r5, ip
 8004482:	45a4      	cmp	ip, r4
 8004484:	d049      	beq.n	800451a <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004486:	6804      	ldr	r4, [r0, #0]
 8004488:	005d      	lsls	r5, r3, #1
 800448a:	f04f 0c03 	mov.w	ip, #3
 800448e:	fa0c fc05 	lsl.w	ip, ip, r5
 8004492:	ea44 040c 	orr.w	r4, r4, ip
 8004496:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004498:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800449c:	f10e 0e08 	add.w	lr, lr, #8
 80044a0:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80044a4:	f003 0507 	and.w	r5, r3, #7
 80044a8:	00ae      	lsls	r6, r5, #2
 80044aa:	250f      	movs	r5, #15
 80044ac:	40b5      	lsls	r5, r6
 80044ae:	ea24 0405 	bic.w	r4, r4, r5
 80044b2:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044b6:	6884      	ldr	r4, [r0, #8]
 80044b8:	ea24 040c 	bic.w	r4, r4, ip
 80044bc:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80044be:	6844      	ldr	r4, [r0, #4]
 80044c0:	ea24 0202 	bic.w	r2, r4, r2
 80044c4:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044c6:	68c2      	ldr	r2, [r0, #12]
 80044c8:	ea22 020c 	bic.w	r2, r2, ip
 80044cc:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80044ce:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80044d0:	fa31 f203 	lsrs.w	r2, r1, r3
 80044d4:	d03f      	beq.n	8004556 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80044d6:	2201      	movs	r2, #1
 80044d8:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80044da:	ea12 0701 	ands.w	r7, r2, r1
 80044de:	d0f6      	beq.n	80044ce <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80044e0:	089e      	lsrs	r6, r3, #2
 80044e2:	1cb5      	adds	r5, r6, #2
 80044e4:	4c1d      	ldr	r4, [pc, #116]	; (800455c <HAL_GPIO_DeInit+0xf0>)
 80044e6:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80044ea:	f003 0c03 	and.w	ip, r3, #3
 80044ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80044f2:	f04f 0e07 	mov.w	lr, #7
 80044f6:	fa0e fe0c 	lsl.w	lr, lr, ip
 80044fa:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80044fe:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004502:	d0bb      	beq.n	800447c <HAL_GPIO_DeInit+0x10>
 8004504:	4d16      	ldr	r5, [pc, #88]	; (8004560 <HAL_GPIO_DeInit+0xf4>)
 8004506:	42a8      	cmp	r0, r5
 8004508:	d005      	beq.n	8004516 <HAL_GPIO_DeInit+0xaa>
 800450a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800450e:	42a8      	cmp	r0, r5
 8004510:	d0b2      	beq.n	8004478 <HAL_GPIO_DeInit+0xc>
 8004512:	2507      	movs	r5, #7
 8004514:	e7b3      	b.n	800447e <HAL_GPIO_DeInit+0x12>
 8004516:	2501      	movs	r5, #1
 8004518:	e7b1      	b.n	800447e <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800451a:	4c12      	ldr	r4, [pc, #72]	; (8004564 <HAL_GPIO_DeInit+0xf8>)
 800451c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004520:	ea25 0507 	bic.w	r5, r5, r7
 8004524:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004528:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800452c:	ea25 0507 	bic.w	r5, r5, r7
 8004530:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004534:	6825      	ldr	r5, [r4, #0]
 8004536:	ea25 0507 	bic.w	r5, r5, r7
 800453a:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800453c:	6865      	ldr	r5, [r4, #4]
 800453e:	ea25 0707 	bic.w	r7, r5, r7
 8004542:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004544:	4d05      	ldr	r5, [pc, #20]	; (800455c <HAL_GPIO_DeInit+0xf0>)
 8004546:	3602      	adds	r6, #2
 8004548:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 800454c:	ea24 040e 	bic.w	r4, r4, lr
 8004550:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004554:	e797      	b.n	8004486 <HAL_GPIO_DeInit+0x1a>
  }
}
 8004556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40010000 	.word	0x40010000
 8004560:	48000400 	.word	0x48000400
 8004564:	58000800 	.word	0x58000800

08004568 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004568:	b10a      	cbz	r2, 800456e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800456a:	6181      	str	r1, [r0, #24]
 800456c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800456e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004570:	4770      	bx	lr

08004572 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004572:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004574:	ea01 0203 	and.w	r2, r1, r3
 8004578:	ea21 0103 	bic.w	r1, r1, r3
 800457c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004580:	6181      	str	r1, [r0, #24]
}
 8004582:	4770      	bx	lr

08004584 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004584:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	4203      	tst	r3, r0
 800458c:	d100      	bne.n	8004590 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800458e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004590:	4b02      	ldr	r3, [pc, #8]	; (800459c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004592:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004594:	f7fe fbec 	bl	8002d70 <HAL_GPIO_EXTI_Callback>
}
 8004598:	e7f9      	b.n	800458e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800459a:	bf00      	nop
 800459c:	58000800 	.word	0x58000800

080045a0 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d059      	beq.n	8004658 <HAL_I2C_Init+0xb8>
{
 80045a4:	b510      	push	{r4, lr}
 80045a6:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045a8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d043      	beq.n	8004638 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b0:	2324      	movs	r3, #36	; 0x24
 80045b2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	6813      	ldr	r3, [r2, #0]
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045c0:	6863      	ldr	r3, [r4, #4]
 80045c2:	6822      	ldr	r2, [r4, #0]
 80045c4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80045c8:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80045ca:	6822      	ldr	r2, [r4, #0]
 80045cc:	6893      	ldr	r3, [r2, #8]
 80045ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045d2:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045d4:	68e3      	ldr	r3, [r4, #12]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d033      	beq.n	8004642 <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045da:	68a3      	ldr	r3, [r4, #8]
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80045e2:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045e4:	68e3      	ldr	r3, [r4, #12]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d031      	beq.n	800464e <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045ea:	6822      	ldr	r2, [r4, #0]
 80045ec:	6853      	ldr	r3, [r2, #4]
 80045ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	68d3      	ldr	r3, [r2, #12]
 80045fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004600:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	6962      	ldr	r2, [r4, #20]
 8004606:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004608:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800460a:	6822      	ldr	r2, [r4, #0]
 800460c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004610:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004612:	69e3      	ldr	r3, [r4, #28]
 8004614:	6a21      	ldr	r1, [r4, #32]
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	430b      	orrs	r3, r1
 800461a:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004626:	2000      	movs	r0, #0
 8004628:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800462a:	2320      	movs	r3, #32
 800462c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004630:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8004636:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004638:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800463c:	f7fd f84e 	bl	80016dc <HAL_I2C_MspInit>
 8004640:	e7b6      	b.n	80045b0 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004642:	68a3      	ldr	r3, [r4, #8]
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464a:	6093      	str	r3, [r2, #8]
 800464c:	e7ca      	b.n	80045e4 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	e7c8      	b.n	80045ea <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004658:	2001      	movs	r0, #1
}
 800465a:	4770      	bx	lr

0800465c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	d124      	bne.n	80046b0 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004666:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800466a:	2b01      	cmp	r3, #1
 800466c:	d022      	beq.n	80046b4 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800466e:	2301      	movs	r3, #1
 8004670:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004674:	2324      	movs	r3, #36	; 0x24
 8004676:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800467a:	6802      	ldr	r2, [r0, #0]
 800467c:	6813      	ldr	r3, [r2, #0]
 800467e:	f023 0301 	bic.w	r3, r3, #1
 8004682:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004684:	6802      	ldr	r2, [r0, #0]
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800468c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800468e:	6802      	ldr	r2, [r0, #0]
 8004690:	6813      	ldr	r3, [r2, #0]
 8004692:	4319      	orrs	r1, r3
 8004694:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004696:	6802      	ldr	r2, [r0, #0]
 8004698:	6813      	ldr	r3, [r2, #0]
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	2320      	movs	r3, #32
 80046a2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a6:	2300      	movs	r3, #0
 80046a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80046ac:	4618      	mov	r0, r3
 80046ae:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2002      	movs	r0, #2
 80046b2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80046b4:	2002      	movs	r0, #2
  }
}
 80046b6:	4770      	bx	lr

080046b8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d122      	bne.n	8004708 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d020      	beq.n	800470c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80046ca:	2301      	movs	r3, #1
 80046cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d0:	2324      	movs	r3, #36	; 0x24
 80046d2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046d6:	6802      	ldr	r2, [r0, #0]
 80046d8:	6813      	ldr	r3, [r2, #0]
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046e0:	6802      	ldr	r2, [r0, #0]
 80046e2:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046e8:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046ec:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046ee:	6802      	ldr	r2, [r0, #0]
 80046f0:	6813      	ldr	r3, [r2, #0]
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	2320      	movs	r3, #32
 80046fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fe:	2300      	movs	r3, #0
 8004700:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004704:	4618      	mov	r0, r3
 8004706:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004708:	2002      	movs	r0, #2
 800470a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800470c:	2002      	movs	r0, #2
  }
}
 800470e:	4770      	bx	lr

08004710 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004710:	4a02      	ldr	r2, [pc, #8]	; (800471c <HAL_PWR_EnableBkUpAccess+0xc>)
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004718:	6013      	str	r3, [r2, #0]
}
 800471a:	4770      	bx	lr
 800471c:	58000400 	.word	0x58000400

08004720 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004720:	b510      	push	{r4, lr}
 8004722:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004724:	b9a0      	cbnz	r0, 8004750 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800472e:	d10a      	bne.n	8004746 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004730:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <HAL_PWR_EnterSLEEPMode+0x48>)
 8004732:	6913      	ldr	r3, [r2, #16]
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800473a:	2c01      	cmp	r4, #1
 800473c:	d010      	beq.n	8004760 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800473e:	bf40      	sev
    __WFE();
 8004740:	bf20      	wfe
    __WFE();
 8004742:	bf20      	wfe
  }
}
 8004744:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004746:	f000 f821 	bl	800478c <HAL_PWREx_DisableLowPowerRunMode>
 800474a:	2800      	cmp	r0, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_PWR_EnterSLEEPMode+0x10>
 800474e:	e7f9      	b.n	8004744 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004750:	4b04      	ldr	r3, [pc, #16]	; (8004764 <HAL_PWR_EnterSLEEPMode+0x44>)
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004758:	d1ea      	bne.n	8004730 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800475a:	f000 f80f 	bl	800477c <HAL_PWREx_EnableLowPowerRunMode>
 800475e:	e7e7      	b.n	8004730 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8004760:	bf30      	wfi
 8004762:	e7ef      	b.n	8004744 <HAL_PWR_EnterSLEEPMode+0x24>
 8004764:	58000400 	.word	0x58000400
 8004768:	e000ed00 	.word	0xe000ed00

0800476c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800476c:	4b02      	ldr	r3, [pc, #8]	; (8004778 <HAL_PWREx_GetVoltageRange+0xc>)
 800476e:	6818      	ldr	r0, [r3, #0]
}
 8004770:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	58000400 	.word	0x58000400

0800477c <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800477c:	4a02      	ldr	r2, [pc, #8]	; (8004788 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800477e:	6813      	ldr	r3, [r2, #0]
 8004780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004784:	6013      	str	r3, [r2, #0]
}
 8004786:	4770      	bx	lr
 8004788:	58000400 	.word	0x58000400

0800478c <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800478c:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800478e:	6813      	ldr	r3, [r2, #0]
 8004790:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004794:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2232      	movs	r2, #50	; 0x32
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047a8:	e000      	b.n	80047ac <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80047aa:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80047ac:	4a07      	ldr	r2, [pc, #28]	; (80047cc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80047ae:	6952      	ldr	r2, [r2, #20]
 80047b0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80047b4:	d001      	beq.n	80047ba <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f7      	bne.n	80047aa <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80047ba:	4b04      	ldr	r3, [pc, #16]	; (80047cc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f413 7f00 	tst.w	r3, #512	; 0x200
 80047c2:	d101      	bne.n	80047c8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80047c4:	2000      	movs	r0, #0
 80047c6:	4770      	bx	lr
    return HAL_TIMEOUT;
 80047c8:	2003      	movs	r0, #3
}
 80047ca:	4770      	bx	lr
 80047cc:	58000400 	.word	0x58000400
 80047d0:	20000070 	.word	0x20000070
 80047d4:	431bde83 	.word	0x431bde83

080047d8 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80047d8:	4a0c      	ldr	r2, [pc, #48]	; (800480c <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	f023 0307 	bic.w	r3, r3, #7
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80047e6:	4a0a      	ldr	r2, [pc, #40]	; (8004810 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80047e8:	6913      	ldr	r3, [r2, #16]
 80047ea:	f043 0304 	orr.w	r3, r3, #4
 80047ee:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80047f0:	2801      	cmp	r0, #1
 80047f2:	d008      	beq.n	8004806 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80047f4:	bf40      	sev
    __WFE();
 80047f6:	bf20      	wfe
    __WFE();
 80047f8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80047fa:	4a05      	ldr	r2, [pc, #20]	; (8004810 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80047fc:	6913      	ldr	r3, [r2, #16]
 80047fe:	f023 0304 	bic.w	r3, r3, #4
 8004802:	6113      	str	r3, [r2, #16]
}
 8004804:	4770      	bx	lr
    __WFI();
 8004806:	bf30      	wfi
 8004808:	e7f7      	b.n	80047fa <HAL_PWREx_EnterSTOP2Mode+0x22>
 800480a:	bf00      	nop
 800480c:	58000400 	.word	0x58000400
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004814:	b530      	push	{r4, r5, lr}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	4604      	mov	r4, r0
 800481a:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800481c:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <RCC_SetFlashLatency+0xb4>)
 800481e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004822:	9006      	str	r0, [sp, #24]
 8004824:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8004828:	f103 0208 	add.w	r2, r3, #8
 800482c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004830:	9004      	str	r0, [sp, #16]
 8004832:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004836:	ad01      	add	r5, sp, #4
 8004838:	3310      	adds	r3, #16
 800483a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800483e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004842:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8004846:	d007      	beq.n	8004858 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004848:	2300      	movs	r3, #0
 800484a:	e014      	b.n	8004876 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 800484c:	aa08      	add	r2, sp, #32
 800484e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004852:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004856:	e01e      	b.n	8004896 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004858:	2300      	movs	r3, #0
 800485a:	2b02      	cmp	r3, #2
 800485c:	d808      	bhi.n	8004870 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800485e:	aa08      	add	r2, sp, #32
 8004860:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004864:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004868:	42a2      	cmp	r2, r4
 800486a:	d2ef      	bcs.n	800484c <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800486c:	3301      	adds	r3, #1
 800486e:	e7f4      	b.n	800485a <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004870:	2500      	movs	r5, #0
 8004872:	e010      	b.n	8004896 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004874:	3301      	adds	r3, #1
 8004876:	2b02      	cmp	r3, #2
 8004878:	d80c      	bhi.n	8004894 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800487a:	aa08      	add	r2, sp, #32
 800487c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004880:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004884:	42a2      	cmp	r2, r4
 8004886:	d3f5      	bcc.n	8004874 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004888:	aa08      	add	r2, sp, #32
 800488a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800488e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004892:	e000      	b.n	8004896 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004894:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004896:	4a0d      	ldr	r2, [pc, #52]	; (80048cc <RCC_SetFlashLatency+0xb8>)
 8004898:	6813      	ldr	r3, [r2, #0]
 800489a:	f023 0307 	bic.w	r3, r3, #7
 800489e:	432b      	orrs	r3, r5
 80048a0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80048a2:	f7fd f9e1 	bl	8001c68 <HAL_GetTick>
 80048a6:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048a8:	4b08      	ldr	r3, [pc, #32]	; (80048cc <RCC_SetFlashLatency+0xb8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	d006      	beq.n	80048c2 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80048b4:	f7fd f9d8 	bl	8001c68 <HAL_GetTick>
 80048b8:	1b00      	subs	r0, r0, r4
 80048ba:	2802      	cmp	r0, #2
 80048bc:	d9f4      	bls.n	80048a8 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80048be:	2003      	movs	r0, #3
 80048c0:	e000      	b.n	80048c4 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80048c2:	2000      	movs	r0, #0
}
 80048c4:	b009      	add	sp, #36	; 0x24
 80048c6:	bd30      	pop	{r4, r5, pc}
 80048c8:	08014be0 	.word	0x08014be0
 80048cc:	58004000 	.word	0x58004000

080048d0 <RCC_SetFlashLatencyFromMSIRange>:
{
 80048d0:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80048d2:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80048d8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80048dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80048ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80048ee:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80048f2:	f7ff ff3b 	bl	800476c <HAL_PWREx_GetVoltageRange>
 80048f6:	4601      	mov	r1, r0
 80048f8:	4805      	ldr	r0, [pc, #20]	; (8004910 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80048fa:	fba0 3004 	umull	r3, r0, r0, r4
 80048fe:	0c80      	lsrs	r0, r0, #18
 8004900:	f7ff ff88 	bl	8004814 <RCC_SetFlashLatency>
}
 8004904:	bd10      	pop	{r4, pc}
 8004906:	bf00      	nop
 8004908:	080152a8 	.word	0x080152a8
 800490c:	08015248 	.word	0x08015248
 8004910:	431bde83 	.word	0x431bde83

08004914 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004918:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004920:	f011 010c 	ands.w	r1, r1, #12
 8004924:	d00a      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0x28>
 8004926:	290c      	cmp	r1, #12
 8004928:	d006      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800492a:	2904      	cmp	r1, #4
 800492c:	d047      	beq.n	80049be <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800492e:	2908      	cmp	r1, #8
 8004930:	d03b      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8004932:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8004934:	4610      	mov	r0, r2
 8004936:	e026      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004938:	2b01      	cmp	r3, #1
 800493a:	d1f6      	bne.n	800492a <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f013 0308 	ands.w	r3, r3, #8
 8004946:	d00d      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x50>
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f013 0308 	ands.w	r3, r3, #8
 8004952:	d124      	bne.n	800499e <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004958:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800495c:	4a2e      	ldr	r2, [pc, #184]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x104>)
 800495e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004962:	e00e      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	f012 0f08 	tst.w	r2, #8
 800496e:	d112      	bne.n	8004996 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004978:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x104>)
 800497e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004982:	b1d1      	cbz	r1, 80049ba <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004984:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d01a      	beq.n	80049ca <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004994:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800499a:	6812      	ldr	r2, [r2, #0]
 800499c:	e7ee      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x68>
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80049a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80049a8:	e7d8      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80049b4:	d106      	bne.n	80049c4 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80049b6:	4819      	ldr	r0, [pc, #100]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80049b8:	e7e5      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80049ba:	4610      	mov	r0, r2
 80049bc:	e7e3      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80049be:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80049c0:	4817      	ldr	r0, [pc, #92]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049c2:	e7e0      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80049c4:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80049c6:	4816      	ldr	r0, [pc, #88]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 80049c8:	e7dd      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d009      	beq.n	80049ec <HAL_RCC_GetSysClockFreq+0xd8>
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d108      	bne.n	80049ee <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80049dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80049e6:	d115      	bne.n	8004a14 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80049ea:	e000      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80049ec:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80049ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f2:	68d8      	ldr	r0, [r3, #12]
 80049f4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80049f8:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80049fc:	68d8      	ldr	r0, [r3, #12]
 80049fe:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8004a02:	3001      	adds	r0, #1
 8004a04:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a08:	68d8      	ldr	r0, [r3, #12]
 8004a0a:	0f40      	lsrs	r0, r0, #29
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8004a12:	e7bf      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004a14:	4a02      	ldr	r2, [pc, #8]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a16:	e7ea      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0xda>
 8004a18:	080152a8 	.word	0x080152a8
 8004a1c:	01e84800 	.word	0x01e84800
 8004a20:	00f42400 	.word	0x00f42400

08004a24 <HAL_RCC_GetHCLKFreq>:
{
 8004a24:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004a26:	f7ff ff75 	bl	8004914 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a34:	4a02      	ldr	r2, [pc, #8]	; (8004a40 <HAL_RCC_GetHCLKFreq+0x1c>)
 8004a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004a3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a3e:	bd08      	pop	{r3, pc}
 8004a40:	08015248 	.word	0x08015248

08004a44 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004a44:	2800      	cmp	r0, #0
 8004a46:	f000 8319 	beq.w	800507c <HAL_RCC_OscConfig+0x638>
{
 8004a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	689d      	ldr	r5, [r3, #8]
 8004a54:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a58:	68de      	ldr	r6, [r3, #12]
 8004a5a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a5e:	6803      	ldr	r3, [r0, #0]
 8004a60:	f013 0f20 	tst.w	r3, #32
 8004a64:	f000 808f 	beq.w	8004b86 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a68:	b1ed      	cbz	r5, 8004aa6 <HAL_RCC_OscConfig+0x62>
 8004a6a:	2d0c      	cmp	r5, #12
 8004a6c:	d019      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a6e:	6a23      	ldr	r3, [r4, #32]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80bc 	beq.w	8004bee <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a82:	f7fd f8f1 	bl	8001c68 <HAL_GetTick>
 8004a86:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f013 0f02 	tst.w	r3, #2
 8004a92:	d165      	bne.n	8004b60 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a94:	f7fd f8e8 	bl	8001c68 <HAL_GetTick>
 8004a98:	1bc0      	subs	r0, r0, r7
 8004a9a:	2802      	cmp	r0, #2
 8004a9c:	d9f4      	bls.n	8004a88 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004a9e:	2003      	movs	r0, #3
 8004aa0:	e2f9      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004aa2:	2e01      	cmp	r6, #1
 8004aa4:	d1e3      	bne.n	8004a6e <HAL_RCC_OscConfig+0x2a>
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f013 0f02 	tst.w	r3, #2
 8004ab0:	d003      	beq.n	8004aba <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ab2:	6a23      	ldr	r3, [r4, #32]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 82e3 	beq.w	8005080 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f013 0f08 	tst.w	r3, #8
 8004ac6:	d029      	beq.n	8004b1c <HAL_RCC_OscConfig+0xd8>
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad2:	4298      	cmp	r0, r3
 8004ad4:	d92a      	bls.n	8004b2c <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ad6:	f7ff fefb 	bl	80048d0 <RCC_SetFlashLatencyFromMSIRange>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	f040 82d2 	bne.w	8005084 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f042 0208 	orr.w	r2, r2, #8
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004af2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004af8:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b04:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b06:	f7ff ff8d 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004b0a:	4bb0      	ldr	r3, [pc, #704]	; (8004dcc <HAL_RCC_OscConfig+0x388>)
 8004b0c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004b0e:	4bb0      	ldr	r3, [pc, #704]	; (8004dd0 <HAL_RCC_OscConfig+0x38c>)
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	f7fd f8a7 	bl	8001c64 <HAL_InitTick>
        if (status != HAL_OK)
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d035      	beq.n	8004b86 <HAL_RCC_OscConfig+0x142>
 8004b1a:	e2bc      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b2a:	e7d2      	b.n	8004ad2 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f042 0208 	orr.w	r2, r2, #8
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b3e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b40:	430a      	orrs	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b50:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004b54:	f7ff febc 	bl	80048d0 <RCC_SetFlashLatencyFromMSIRange>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d0d4      	beq.n	8004b06 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	e29a      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	f042 0208 	orr.w	r2, r2, #8
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8004b80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b84:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	f013 0f01 	tst.w	r3, #1
 8004b8c:	d051      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b8e:	2d08      	cmp	r5, #8
 8004b90:	d045      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1da>
 8004b92:	2d0c      	cmp	r5, #12
 8004b94:	d041      	beq.n	8004c1a <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9a:	6813      	ldr	r3, [r2, #0]
 8004b9c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ba0:	68a1      	ldr	r1, [r4, #8]
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba6:	6863      	ldr	r3, [r4, #4]
 8004ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bac:	d063      	beq.n	8004c76 <HAL_RCC_OscConfig+0x232>
 8004bae:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004bb2:	d065      	beq.n	8004c80 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bbe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004bc6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc8:	6863      	ldr	r3, [r4, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d063      	beq.n	8004c96 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8004bce:	f7fd f84b 	bl	8001c68 <HAL_GetTick>
 8004bd2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004bde:	d128      	bne.n	8004c32 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fd f842 	bl	8001c68 <HAL_GetTick>
 8004be4:	1bc0      	subs	r0, r0, r7
 8004be6:	2864      	cmp	r0, #100	; 0x64
 8004be8:	d9f4      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8004bea:	2003      	movs	r0, #3
 8004bec:	e253      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004bfa:	f7fd f835 	bl	8001c68 <HAL_GetTick>
 8004bfe:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f013 0f02 	tst.w	r3, #2
 8004c0a:	d0bc      	beq.n	8004b86 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c0c:	f7fd f82c 	bl	8001c68 <HAL_GetTick>
 8004c10:	1bc0      	subs	r0, r0, r7
 8004c12:	2802      	cmp	r0, #2
 8004c14:	d9f4      	bls.n	8004c00 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8004c16:	2003      	movs	r0, #3
 8004c18:	e23d      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c1a:	2e03      	cmp	r6, #3
 8004c1c:	d1bb      	bne.n	8004b96 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c28:	d003      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2a:	6863      	ldr	r3, [r4, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 822b 	beq.w	8005088 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	f013 0f02 	tst.w	r3, #2
 8004c38:	d052      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c3a:	2d04      	cmp	r5, #4
 8004c3c:	d03d      	beq.n	8004cba <HAL_RCC_OscConfig+0x276>
 8004c3e:	2d0c      	cmp	r5, #12
 8004c40:	d039      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8091 	beq.w	8004d6c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c4e:	6813      	ldr	r3, [r2, #0]
 8004c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c56:	f7fd f807 	bl	8001c68 <HAL_GetTick>
 8004c5a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c66:	d177      	bne.n	8004d58 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c68:	f7fc fffe 	bl	8001c68 <HAL_GetTick>
 8004c6c:	1b80      	subs	r0, r0, r6
 8004c6e:	2802      	cmp	r0, #2
 8004c70:	d9f4      	bls.n	8004c5c <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8004c72:	2003      	movs	r0, #3
 8004c74:	e20f      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
}
 8004c7e:	e7a3      	b.n	8004bc8 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004c8a:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004c92:	601a      	str	r2, [r3, #0]
}
 8004c94:	e798      	b.n	8004bc8 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8004c96:	f7fc ffe7 	bl	8001c68 <HAL_GetTick>
 8004c9a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004ca6:	d0c4      	beq.n	8004c32 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fc ffde 	bl	8001c68 <HAL_GetTick>
 8004cac:	1bc0      	subs	r0, r0, r7
 8004cae:	2864      	cmp	r0, #100	; 0x64
 8004cb0:	d9f4      	bls.n	8004c9c <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8004cb2:	2003      	movs	r0, #3
 8004cb4:	e1ef      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cb6:	2e02      	cmp	r6, #2
 8004cb8:	d1c3      	bne.n	8004c42 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004cc4:	d003      	beq.n	8004cce <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 81df 	beq.w	800508c <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cce:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cd4:	6853      	ldr	r3, [r2, #4]
 8004cd6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004cda:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004cde:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	f013 0f08 	tst.w	r3, #8
 8004ce6:	f000 808e 	beq.w	8004e06 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cea:	69a3      	ldr	r3, [r4, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d071      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8004cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004cf8:	69e1      	ldr	r1, [r4, #28]
 8004cfa:	f003 0210 	and.w	r2, r3, #16
 8004cfe:	4291      	cmp	r1, r2
 8004d00:	d011      	beq.n	8004d26 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004d02:	f003 0203 	and.w	r2, r3, #3
 8004d06:	2a02      	cmp	r2, #2
 8004d08:	f000 81c2 	beq.w	8005090 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004d0c:	f013 0f01 	tst.w	r3, #1
 8004d10:	d142      	bne.n	8004d98 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d16:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	69e1      	ldr	r1, [r4, #28]
 8004d20:	430b      	orrs	r3, r1
 8004d22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d2a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004d36:	f7fc ff97 	bl	8001c68 <HAL_GetTick>
 8004d3a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d44:	f013 0f02 	tst.w	r3, #2
 8004d48:	d15d      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d4a:	f7fc ff8d 	bl	8001c68 <HAL_GetTick>
 8004d4e:	1b80      	subs	r0, r0, r6
 8004d50:	2811      	cmp	r0, #17
 8004d52:	d9f3      	bls.n	8004d3c <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8004d54:	2003      	movs	r0, #3
 8004d56:	e19e      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5e:	6853      	ldr	r3, [r2, #4]
 8004d60:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d64:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d68:	6053      	str	r3, [r2, #4]
}
 8004d6a:	e7b9      	b.n	8004ce0 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d70:	6813      	ldr	r3, [r2, #0]
 8004d72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d76:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d78:	f7fc ff76 	bl	8001c68 <HAL_GetTick>
 8004d7c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004d88:	d0aa      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8a:	f7fc ff6d 	bl	8001c68 <HAL_GetTick>
 8004d8e:	1b80      	subs	r0, r0, r6
 8004d90:	2802      	cmp	r0, #2
 8004d92:	d9f4      	bls.n	8004d7e <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8004d94:	2003      	movs	r0, #3
 8004d96:	e17e      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8004da8:	f7fc ff5e 	bl	8001c68 <HAL_GetTick>
 8004dac:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db6:	f013 0f02 	tst.w	r3, #2
 8004dba:	d0aa      	beq.n	8004d12 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fc ff54 	bl	8001c68 <HAL_GetTick>
 8004dc0:	1b80      	subs	r0, r0, r6
 8004dc2:	2811      	cmp	r0, #17
 8004dc4:	d9f3      	bls.n	8004dae <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8004dc6:	2003      	movs	r0, #3
 8004dc8:	e165      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
 8004dca:	bf00      	nop
 8004dcc:	20000070 	.word	0x20000070
 8004dd0:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004de4:	f7fc ff40 	bl	8001c68 <HAL_GetTick>
 8004de8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df2:	f013 0f02 	tst.w	r3, #2
 8004df6:	d006      	beq.n	8004e06 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df8:	f7fc ff36 	bl	8001c68 <HAL_GetTick>
 8004dfc:	1b80      	subs	r0, r0, r6
 8004dfe:	2811      	cmp	r0, #17
 8004e00:	d9f3      	bls.n	8004dea <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8004e02:	2003      	movs	r0, #3
 8004e04:	e147      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	f013 0f04 	tst.w	r3, #4
 8004e0c:	f000 80b1 	beq.w	8004f72 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004e10:	4ba8      	ldr	r3, [pc, #672]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e18:	d110      	bne.n	8004e3c <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 8004e1a:	f7ff fc79 	bl	8004710 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004e1e:	f7fc ff23 	bl	8001c68 <HAL_GetTick>
 8004e22:	4606      	mov	r6, r0
 8004e24:	4ba3      	ldr	r3, [pc, #652]	; (80050b4 <HAL_RCC_OscConfig+0x670>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2e:	f7fc ff1b 	bl	8001c68 <HAL_GetTick>
 8004e32:	1b80      	subs	r0, r0, r6
 8004e34:	2802      	cmp	r0, #2
 8004e36:	d9f5      	bls.n	8004e24 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8004e38:	2003      	movs	r0, #3
 8004e3a:	e12c      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e3c:	68e3      	ldr	r3, [r4, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d061      	beq.n	8004f06 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004e42:	2b85      	cmp	r3, #133	; 0x85
 8004e44:	d001      	beq.n	8004e4a <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e4e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e52:	f043 0304 	orr.w	r3, r3, #4
 8004e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004e5a:	f7fc ff05 	bl	8001c68 <HAL_GetTick>
 8004e5e:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e64:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e78:	f013 0f02 	tst.w	r3, #2
 8004e7c:	d108      	bne.n	8004e90 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f7fc fef3 	bl	8001c68 <HAL_GetTick>
 8004e82:	1b80      	subs	r0, r0, r6
 8004e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e88:	4298      	cmp	r0, r3
 8004e8a:	d9f1      	bls.n	8004e70 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 8004e8c:	2003      	movs	r0, #3
 8004e8e:	e102      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004e90:	68e3      	ldr	r3, [r4, #12]
 8004e92:	2b81      	cmp	r3, #129	; 0x81
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004e96:	2b85      	cmp	r3, #133	; 0x85
 8004e98:	d11a      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 8004e9a:	f7fc fee5 	bl	8001c68 <HAL_GetTick>
 8004e9e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ea4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ebc:	d159      	bne.n	8004f72 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fc fed3 	bl	8001c68 <HAL_GetTick>
 8004ec2:	1b80      	subs	r0, r0, r6
 8004ec4:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ec8:	4298      	cmp	r0, r3
 8004eca:	d9f1      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 8004ecc:	2003      	movs	r0, #3
 8004ece:	e0e2      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8004ed0:	f7fc feca 	bl	8001c68 <HAL_GetTick>
 8004ed4:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eda:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ef2:	d03e      	beq.n	8004f72 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef4:	f7fc feb8 	bl	8001c68 <HAL_GetTick>
 8004ef8:	1b80      	subs	r0, r0, r6
 8004efa:	f241 3388 	movw	r3, #5000	; 0x1388
 8004efe:	4298      	cmp	r0, r3
 8004f00:	d9f1      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8004f02:	2003      	movs	r0, #3
 8004f04:	e0c7      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8004f06:	f7fc feaf 	bl	8001c68 <HAL_GetTick>
 8004f0a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f10:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f24:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004f28:	d008      	beq.n	8004f3c <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2a:	f7fc fe9d 	bl	8001c68 <HAL_GetTick>
 8004f2e:	1b80      	subs	r0, r0, r6
 8004f30:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f34:	4298      	cmp	r0, r3
 8004f36:	d9f1      	bls.n	8004f1c <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8004f38:	2003      	movs	r0, #3
 8004f3a:	e0ac      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8004f3c:	f7fc fe94 	bl	8001c68 <HAL_GetTick>
 8004f40:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f46:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f013 0f02 	tst.w	r3, #2
 8004f5e:	d008      	beq.n	8004f72 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fc fe82 	bl	8001c68 <HAL_GetTick>
 8004f64:	1b80      	subs	r0, r0, r6
 8004f66:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f6a:	4298      	cmp	r0, r3
 8004f6c:	d9f1      	bls.n	8004f52 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 8004f6e:	2003      	movs	r0, #3
 8004f70:	e091      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 808d 	beq.w	8005094 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f7a:	2d0c      	cmp	r5, #12
 8004f7c:	d062      	beq.n	8005044 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d01f      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f8c:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	f022 0203 	bic.w	r2, r2, #3
 8004f94:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8004f9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004fa0:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 8004fa2:	f7fc fe61 	bl	8001c68 <HAL_GetTick>
 8004fa6:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fb2:	d073      	beq.n	800509c <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb4:	f7fc fe58 	bl	8001c68 <HAL_GetTick>
 8004fb8:	1b00      	subs	r0, r0, r4
 8004fba:	280a      	cmp	r0, #10
 8004fbc:	d9f4      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 8004fbe:	2003      	movs	r0, #3
 8004fc0:	e069      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fcc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004fce:	f7fc fe4b 	bl	8001c68 <HAL_GetTick>
 8004fd2:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004fde:	d12a      	bne.n	8005036 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe4:	68d3      	ldr	r3, [r2, #12]
 8004fe6:	4934      	ldr	r1, [pc, #208]	; (80050b8 <HAL_RCC_OscConfig+0x674>)
 8004fe8:	4019      	ands	r1, r3
 8004fea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fec:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004fee:	4303      	orrs	r3, r0
 8004ff0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004ff2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004ff6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ff8:	4303      	orrs	r3, r0
 8004ffa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004ffc:	4303      	orrs	r3, r0
 8004ffe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005000:	4303      	orrs	r3, r0
 8005002:	430b      	orrs	r3, r1
 8005004:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005006:	6813      	ldr	r3, [r2, #0]
 8005008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500c:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800500e:	68d3      	ldr	r3, [r2, #12]
 8005010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005014:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005016:	f7fc fe27 	bl	8001c68 <HAL_GetTick>
 800501a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800501c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005026:	d137      	bne.n	8005098 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fc fe1e 	bl	8001c68 <HAL_GetTick>
 800502c:	1b00      	subs	r0, r0, r4
 800502e:	280a      	cmp	r0, #10
 8005030:	d9f4      	bls.n	800501c <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8005032:	2003      	movs	r0, #3
 8005034:	e02f      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005036:	f7fc fe17 	bl	8001c68 <HAL_GetTick>
 800503a:	1b40      	subs	r0, r0, r5
 800503c:	280a      	cmp	r0, #10
 800503e:	d9c9      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8005040:	2003      	movs	r0, #3
 8005042:	e028      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005044:	2b01      	cmp	r3, #1
 8005046:	d02b      	beq.n	80050a0 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8005048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800504e:	f003 0103 	and.w	r1, r3, #3
 8005052:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005054:	4291      	cmp	r1, r2
 8005056:	d125      	bne.n	80050a4 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005058:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800505c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800505e:	428a      	cmp	r2, r1
 8005060:	d122      	bne.n	80050a8 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005062:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005066:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005068:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800506c:	d11e      	bne.n	80050ac <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800506e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005072:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005074:	4293      	cmp	r3, r2
 8005076:	d11b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 8005078:	2000      	movs	r0, #0
 800507a:	e00c      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 800507c:	2001      	movs	r0, #1
}
 800507e:	4770      	bx	lr
        return HAL_ERROR;
 8005080:	2001      	movs	r0, #1
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 8005084:	2001      	movs	r0, #1
 8005086:	e006      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 8005088:	2001      	movs	r0, #1
 800508a:	e004      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 800508c:	2001      	movs	r0, #1
 800508e:	e002      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 8005090:	2001      	movs	r0, #1
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 8005094:	2000      	movs	r0, #0
}
 8005096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005098:	2000      	movs	r0, #0
 800509a:	e7fc      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
 800509c:	2000      	movs	r0, #0
 800509e:	e7fa      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80050a0:	2001      	movs	r0, #1
 80050a2:	e7f8      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 80050a4:	2001      	movs	r0, #1
 80050a6:	e7f6      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
 80050a8:	2001      	movs	r0, #1
 80050aa:	e7f4      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
 80050ac:	2001      	movs	r0, #1
 80050ae:	e7f2      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
 80050b0:	2001      	movs	r0, #1
 80050b2:	e7f0      	b.n	8005096 <HAL_RCC_OscConfig+0x652>
 80050b4:	58000400 	.word	0x58000400
 80050b8:	11c1808c 	.word	0x11c1808c

080050bc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80050bc:	2800      	cmp	r0, #0
 80050be:	f000 8127 	beq.w	8005310 <HAL_RCC_ClockConfig+0x254>
{
 80050c2:	b570      	push	{r4, r5, r6, lr}
 80050c4:	460c      	mov	r4, r1
 80050c6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050c8:	4b93      	ldr	r3, [pc, #588]	; (8005318 <HAL_RCC_ClockConfig+0x25c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	428b      	cmp	r3, r1
 80050d2:	d32d      	bcc.n	8005130 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d4:	682b      	ldr	r3, [r5, #0]
 80050d6:	f013 0f02 	tst.w	r3, #2
 80050da:	d13f      	bne.n	800515c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	f013 0f20 	tst.w	r3, #32
 80050e2:	d153      	bne.n	800518c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80050ea:	d16a      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	682b      	ldr	r3, [r5, #0]
 80050ee:	f013 0f04 	tst.w	r3, #4
 80050f2:	f040 8083 	bne.w	80051fc <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f6:	682b      	ldr	r3, [r5, #0]
 80050f8:	f013 0f08 	tst.w	r3, #8
 80050fc:	f040 8097 	bne.w	800522e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	f013 0f01 	tst.w	r3, #1
 8005106:	f000 80de 	beq.w	80052c6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	686b      	ldr	r3, [r5, #4]
 800510c:	2b02      	cmp	r3, #2
 800510e:	f000 80a8 	beq.w	8005262 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005112:	2b03      	cmp	r3, #3
 8005114:	f000 80ad 	beq.w	8005272 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005118:	2b00      	cmp	r3, #0
 800511a:	f040 80b2 	bne.w	8005282 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800511e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	f012 0f02 	tst.w	r2, #2
 8005128:	f040 80b1 	bne.w	800528e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800512c:	2001      	movs	r0, #1
 800512e:	e0ee      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005130:	4a79      	ldr	r2, [pc, #484]	; (8005318 <HAL_RCC_ClockConfig+0x25c>)
 8005132:	6813      	ldr	r3, [r2, #0]
 8005134:	f023 0307 	bic.w	r3, r3, #7
 8005138:	430b      	orrs	r3, r1
 800513a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800513c:	f7fc fd94 	bl	8001c68 <HAL_GetTick>
 8005140:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b75      	ldr	r3, [pc, #468]	; (8005318 <HAL_RCC_ClockConfig+0x25c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	42a3      	cmp	r3, r4
 800514c:	d0c2      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800514e:	f7fc fd8b 	bl	8001c68 <HAL_GetTick>
 8005152:	1b80      	subs	r0, r0, r6
 8005154:	2802      	cmp	r0, #2
 8005156:	d9f4      	bls.n	8005142 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005158:	2003      	movs	r0, #3
 800515a:	e0d8      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800515c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800515e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005162:	688a      	ldr	r2, [r1, #8]
 8005164:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800516c:	f7fc fd7c 	bl	8001c68 <HAL_GetTick>
 8005170:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800517c:	d1ae      	bne.n	80050dc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800517e:	f7fc fd73 	bl	8001c68 <HAL_GetTick>
 8005182:	1b80      	subs	r0, r0, r6
 8005184:	2802      	cmp	r0, #2
 8005186:	d9f4      	bls.n	8005172 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005188:	2003      	movs	r0, #3
 800518a:	e0c0      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800518c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800518e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005192:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8005196:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80051a0:	f7fc fd62 	bl	8001c68 <HAL_GetTick>
 80051a4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80051b2:	d197      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051b4:	f7fc fd58 	bl	8001c68 <HAL_GetTick>
 80051b8:	1b80      	subs	r0, r0, r6
 80051ba:	2802      	cmp	r0, #2
 80051bc:	d9f3      	bls.n	80051a6 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80051be:	2003      	movs	r0, #3
 80051c0:	e0a5      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80051c2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80051cc:	f023 030f 	bic.w	r3, r3, #15
 80051d0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80051d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80051d8:	f7fc fd46 	bl	8001c68 <HAL_GetTick>
 80051dc:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80051de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80051ea:	f47f af7f 	bne.w	80050ec <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051ee:	f7fc fd3b 	bl	8001c68 <HAL_GetTick>
 80051f2:	1b80      	subs	r0, r0, r6
 80051f4:	2802      	cmp	r0, #2
 80051f6:	d9f2      	bls.n	80051de <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80051f8:	2003      	movs	r0, #3
 80051fa:	e088      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80051fc:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80051fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005202:	688a      	ldr	r2, [r1, #8]
 8005204:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800520c:	f7fc fd2c 	bl	8001c68 <HAL_GetTick>
 8005210:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800521c:	f47f af6b 	bne.w	80050f6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005220:	f7fc fd22 	bl	8001c68 <HAL_GetTick>
 8005224:	1b80      	subs	r0, r0, r6
 8005226:	2802      	cmp	r0, #2
 8005228:	d9f3      	bls.n	8005212 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800522a:	2003      	movs	r0, #3
 800522c:	e06f      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800522e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005234:	6893      	ldr	r3, [r2, #8]
 8005236:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800523a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800523e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005240:	f7fc fd12 	bl	8001c68 <HAL_GetTick>
 8005244:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005250:	f47f af56 	bne.w	8005100 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005254:	f7fc fd08 	bl	8001c68 <HAL_GetTick>
 8005258:	1b80      	subs	r0, r0, r6
 800525a:	2802      	cmp	r0, #2
 800525c:	d9f3      	bls.n	8005246 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800525e:	2003      	movs	r0, #3
 8005260:	e055      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800526c:	d10f      	bne.n	800528e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800526e:	2001      	movs	r0, #1
 8005270:	e04d      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800527e:	2001      	movs	r0, #1
 8005280:	e045      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800528c:	d042      	beq.n	8005314 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800528e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005292:	688a      	ldr	r2, [r1, #8]
 8005294:	f022 0203 	bic.w	r2, r2, #3
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800529c:	f7fc fce4 	bl	8001c68 <HAL_GetTick>
 80052a0:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ac:	686a      	ldr	r2, [r5, #4]
 80052ae:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80052b2:	d008      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b4:	f7fc fcd8 	bl	8001c68 <HAL_GetTick>
 80052b8:	1b80      	subs	r0, r0, r6
 80052ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80052be:	4298      	cmp	r0, r3
 80052c0:	d9ef      	bls.n	80052a2 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80052c2:	2003      	movs	r0, #3
 80052c4:	e023      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <HAL_RCC_ClockConfig+0x25c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	42a3      	cmp	r3, r4
 80052d0:	d915      	bls.n	80052fe <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d2:	4a11      	ldr	r2, [pc, #68]	; (8005318 <HAL_RCC_ClockConfig+0x25c>)
 80052d4:	6813      	ldr	r3, [r2, #0]
 80052d6:	f023 0307 	bic.w	r3, r3, #7
 80052da:	4323      	orrs	r3, r4
 80052dc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80052de:	f7fc fcc3 	bl	8001c68 <HAL_GetTick>
 80052e2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <HAL_RCC_ClockConfig+0x25c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	42a3      	cmp	r3, r4
 80052ee:	d006      	beq.n	80052fe <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052f0:	f7fc fcba 	bl	8001c68 <HAL_GetTick>
 80052f4:	1b40      	subs	r0, r0, r5
 80052f6:	2802      	cmp	r0, #2
 80052f8:	d9f4      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80052fa:	2003      	movs	r0, #3
 80052fc:	e007      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80052fe:	f7ff fb91 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_RCC_ClockConfig+0x260>)
 8005304:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <HAL_RCC_ClockConfig+0x264>)
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	f7fc fcab 	bl	8001c64 <HAL_InitTick>
}
 800530e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005310:	2001      	movs	r0, #1
}
 8005312:	4770      	bx	lr
        return HAL_ERROR;
 8005314:	2001      	movs	r0, #1
 8005316:	e7fa      	b.n	800530e <HAL_RCC_ClockConfig+0x252>
 8005318:	58004000 	.word	0x58004000
 800531c:	20000070 	.word	0x20000070
 8005320:	20000074 	.word	0x20000074

08005324 <HAL_RCC_GetPCLK1Freq>:
{
 8005324:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005326:	f7ff fb7d 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800532a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005334:	4a02      	ldr	r2, [pc, #8]	; (8005340 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800533a:	40d8      	lsrs	r0, r3
 800533c:	bd08      	pop	{r3, pc}
 800533e:	bf00      	nop
 8005340:	08015288 	.word	0x08015288

08005344 <HAL_RCC_GetPCLK2Freq>:
{
 8005344:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005346:	f7ff fb6d 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005354:	4a02      	ldr	r2, [pc, #8]	; (8005360 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800535a:	40d8      	lsrs	r0, r3
 800535c:	bd08      	pop	{r3, pc}
 800535e:	bf00      	nop
 8005360:	08015288 	.word	0x08015288

08005364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005368:	6803      	ldr	r3, [r0, #0]
 800536a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800536e:	f040 80ab 	bne.w	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005372:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	f013 0f01 	tst.w	r3, #1
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800537c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800537e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005382:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005386:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800538a:	b292      	uxth	r2, r2
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	f013 0f02 	tst.w	r3, #2
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800539a:	68a2      	ldr	r2, [r4, #8]
 800539c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053a4:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80053a8:	b292      	uxth	r2, r2
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	f013 0f20 	tst.w	r3, #32
 80053b6:	d009      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053b8:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80053ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80053c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	f413 7f00 	tst.w	r3, #512	; 0x200
 80053d2:	d00c      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053d4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80053d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80053de:	0c02      	lsrs	r2, r0, #16
 80053e0:	0412      	lsls	r2, r2, #16
 80053e2:	ea23 0302 	bic.w	r3, r3, r2
 80053e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80053f4:	d00c      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80053f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053fc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005400:	0c02      	lsrs	r2, r0, #16
 8005402:	0412      	lsls	r2, r2, #16
 8005404:	ea23 0302 	bic.w	r3, r3, r2
 8005408:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800540c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005416:	d00c      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005418:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800541a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005422:	0c02      	lsrs	r2, r0, #16
 8005424:	0412      	lsls	r2, r2, #16
 8005426:	ea23 0302 	bic.w	r3, r3, r2
 800542a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800542e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005438:	f040 809e 	bne.w	8005578 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005442:	f040 80aa 	bne.w	800559a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	f413 7f80 	tst.w	r3, #256	; 0x100
 800544c:	f040 80b6 	bne.w	80055bc <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	f013 0f10 	tst.w	r3, #16
 8005456:	d00e      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005458:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800545a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800545e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005462:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800546c:	68e3      	ldr	r3, [r4, #12]
 800546e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005472:	f000 80b4 	beq.w	80055de <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800547c:	d00f      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800547e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005484:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005488:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005492:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005494:	b91b      	cbnz	r3, 800549e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005496:	68cb      	ldr	r3, [r1, #12]
 8005498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800549c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80054a4:	d00e      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80054a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054b4:	4313      	orrs	r3, r2
 80054b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c0:	f000 8092 	beq.w	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80054c4:	4628      	mov	r0, r5
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80054c8:	f7ff f922 	bl	8004710 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80054cc:	f7fc fbcc 	bl	8001c68 <HAL_GetTick>
 80054d0:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80054d2:	4b48      	ldr	r3, [pc, #288]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80054da:	d106      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054dc:	f7fc fbc4 	bl	8001c68 <HAL_GetTick>
 80054e0:	1b40      	subs	r0, r0, r5
 80054e2:	2802      	cmp	r0, #2
 80054e4:	d9f5      	bls.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 80054e6:	2503      	movs	r5, #3
 80054e8:	e000      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80054ea:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80054ec:	2d00      	cmp	r5, #0
 80054ee:	f47f af41 	bne.w	8005374 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80054fe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005500:	429a      	cmp	r2, r3
 8005502:	d024      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005508:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800550c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005510:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005514:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005518:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800551c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005520:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005524:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005528:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800552c:	f012 0f02 	tst.w	r2, #2
 8005530:	d10f      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8005532:	2d00      	cmp	r5, #0
 8005534:	f47f af1e 	bne.w	8005374 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005538:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800553a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800553e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005542:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800554c:	e712      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800554e:	2200      	movs	r2, #0
 8005550:	e7ec      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8005552:	f7fc fb89 	bl	8001c68 <HAL_GetTick>
 8005556:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	f013 0f02 	tst.w	r3, #2
 8005564:	d1e5      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005566:	f7fc fb7f 	bl	8001c68 <HAL_GetTick>
 800556a:	1b80      	subs	r0, r0, r6
 800556c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005570:	4298      	cmp	r0, r3
 8005572:	d9f1      	bls.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8005574:	2503      	movs	r5, #3
 8005576:	e7dc      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005578:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800557a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800557e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005582:	0919      	lsrs	r1, r3, #4
 8005584:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8005588:	ea22 0201 	bic.w	r2, r2, r1
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8005598:	e750      	b.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800559a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800559c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80055a0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80055a4:	0919      	lsrs	r1, r3, #4
 80055a6:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80055aa:	ea22 0201 	bic.w	r2, r2, r1
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80055ba:	e744      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055bc:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80055be:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80055c2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80055c6:	0919      	lsrs	r1, r3, #4
 80055c8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80055cc:	ea22 0201 	bic.w	r2, r2, r1
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80055dc:	e738      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80055de:	68cb      	ldr	r3, [r1, #12]
 80055e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e4:	60cb      	str	r3, [r1, #12]
 80055e6:	e746      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055e8:	68cb      	ldr	r3, [r1, #12]
 80055ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ee:	60cb      	str	r3, [r1, #12]
 80055f0:	e768      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055f2:	bf00      	nop
 80055f4:	58000400 	.word	0x58000400

080055f8 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055f8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d036      	beq.n	800566e <HAL_RTC_DeactivateAlarm+0x76>
 8005600:	2301      	movs	r3, #1
 8005602:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005606:	2302      	movs	r3, #2
 8005608:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <HAL_RTC_DeactivateAlarm+0x7c>)
 800560e:	22ca      	movs	r2, #202	; 0xca
 8005610:	625a      	str	r2, [r3, #36]	; 0x24
 8005612:	2253      	movs	r2, #83	; 0x53
 8005614:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8005616:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800561a:	d019      	beq.n	8005650 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800561c:	4b15      	ldr	r3, [pc, #84]	; (8005674 <HAL_RTC_DeactivateAlarm+0x7c>)
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005624:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8005626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005628:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800562c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800562e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005630:	f022 0202 	bic.w	r2, r2, #2
 8005634:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005636:	2202      	movs	r2, #2
 8005638:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800563a:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <HAL_RTC_DeactivateAlarm+0x7c>)
 800563c:	22ff      	movs	r2, #255	; 0xff
 800563e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005640:	2301      	movs	r3, #1
 8005642:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005646:	2300      	movs	r3, #0
 8005648:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800564c:	4618      	mov	r0, r3
 800564e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005656:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8005658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800565a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800565e:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005660:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005668:	2201      	movs	r2, #1
 800566a:	65da      	str	r2, [r3, #92]	; 0x5c
 800566c:	e7e5      	b.n	800563a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 800566e:	2002      	movs	r0, #2
}
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40002800 	.word	0x40002800

08005678 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800567e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8005680:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005682:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8005684:	f015 0f01 	tst.w	r5, #1
 8005688:	d106      	bne.n	8005698 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800568a:	f015 0f02 	tst.w	r5, #2
 800568e:	d109      	bne.n	80056a4 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005690:	2301      	movs	r3, #1
 8005692:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005696:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800569a:	2201      	movs	r2, #1
 800569c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800569e:	f7fc fd35 	bl	800210c <HAL_RTC_AlarmAEventCallback>
 80056a2:	e7f2      	b.n	800568a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80056a4:	4b03      	ldr	r3, [pc, #12]	; (80056b4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80056a6:	2202      	movs	r2, #2
 80056a8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 f9e6 	bl	8005a7c <HAL_RTCEx_AlarmBEventCallback>
 80056b0:	e7ee      	b.n	8005690 <HAL_RTC_AlarmIRQHandler+0x18>
 80056b2:	bf00      	nop
 80056b4:	40002800 	.word	0x40002800

080056b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056b8:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80056ba:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <HAL_RTC_WaitForSynchro+0x30>)
 80056bc:	68d3      	ldr	r3, [r2, #12]
 80056be:	f023 0320 	bic.w	r3, r3, #32
 80056c2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80056c4:	f7fc fad0 	bl	8001c68 <HAL_GetTick>
 80056c8:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <HAL_RTC_WaitForSynchro+0x30>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f013 0f20 	tst.w	r3, #32
 80056d2:	d107      	bne.n	80056e4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056d4:	f7fc fac8 	bl	8001c68 <HAL_GetTick>
 80056d8:	1b00      	subs	r0, r0, r4
 80056da:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80056de:	d9f4      	bls.n	80056ca <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80056e0:	2003      	movs	r0, #3
 80056e2:	e000      	b.n	80056e6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80056e4:	2000      	movs	r0, #0
}
 80056e6:	bd10      	pop	{r4, pc}
 80056e8:	40002800 	.word	0x40002800

080056ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056ec:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <RTC_EnterInitMode+0x48>)
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80056f6:	d002      	beq.n	80056fe <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80056f8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80056fa:	4620      	mov	r0, r4
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005700:	4a0c      	ldr	r2, [pc, #48]	; (8005734 <RTC_EnterInitMode+0x48>)
 8005702:	68d3      	ldr	r3, [r2, #12]
 8005704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005708:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800570a:	f7fc faad 	bl	8001c68 <HAL_GetTick>
 800570e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005710:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005712:	4b08      	ldr	r3, [pc, #32]	; (8005734 <RTC_EnterInitMode+0x48>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f013 0f40 	tst.w	r3, #64	; 0x40
 800571a:	d1ee      	bne.n	80056fa <RTC_EnterInitMode+0xe>
 800571c:	2c03      	cmp	r4, #3
 800571e:	d0ec      	beq.n	80056fa <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005720:	f7fc faa2 	bl	8001c68 <HAL_GetTick>
 8005724:	1b43      	subs	r3, r0, r5
 8005726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800572a:	d9f2      	bls.n	8005712 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800572c:	2403      	movs	r4, #3
 800572e:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8005732:	e7ee      	b.n	8005712 <RTC_EnterInitMode+0x26>
 8005734:	40002800 	.word	0x40002800

08005738 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005738:	b510      	push	{r4, lr}
 800573a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800573c:	4b11      	ldr	r3, [pc, #68]	; (8005784 <RTC_ExitInitMode+0x4c>)
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005744:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f013 0f20 	tst.w	r3, #32
 800574c:	d107      	bne.n	800575e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800574e:	f7ff ffb3 	bl	80056b8 <HAL_RTC_WaitForSynchro>
 8005752:	4603      	mov	r3, r0
 8005754:	b1a0      	cbz	r0, 8005780 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800575c:	e010      	b.n	8005780 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <RTC_ExitInitMode+0x4c>)
 8005760:	6993      	ldr	r3, [r2, #24]
 8005762:	f023 0320 	bic.w	r3, r3, #32
 8005766:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005768:	f7ff ffa6 	bl	80056b8 <HAL_RTC_WaitForSynchro>
 800576c:	4603      	mov	r3, r0
 800576e:	b110      	cbz	r0, 8005776 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005776:	4903      	ldr	r1, [pc, #12]	; (8005784 <RTC_ExitInitMode+0x4c>)
 8005778:	698a      	ldr	r2, [r1, #24]
 800577a:	f042 0220 	orr.w	r2, r2, #32
 800577e:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd10      	pop	{r4, pc}
 8005784:	40002800 	.word	0x40002800

08005788 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005788:	2800      	cmp	r0, #0
 800578a:	d04a      	beq.n	8005822 <HAL_RTC_Init+0x9a>
{
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005790:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8005794:	b19b      	cbz	r3, 80057be <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005796:	2302      	movs	r3, #2
 8005798:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800579c:	4b22      	ldr	r3, [pc, #136]	; (8005828 <HAL_RTC_Init+0xa0>)
 800579e:	22ca      	movs	r2, #202	; 0xca
 80057a0:	625a      	str	r2, [r3, #36]	; 0x24
 80057a2:	2253      	movs	r2, #83	; 0x53
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80057a6:	4620      	mov	r0, r4
 80057a8:	f7ff ffa0 	bl	80056ec <RTC_EnterInitMode>
    if (status == HAL_OK)
 80057ac:	b160      	cbz	r0, 80057c8 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ae:	4b1e      	ldr	r3, [pc, #120]	; (8005828 <HAL_RTC_Init+0xa0>)
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80057b4:	b910      	cbnz	r0, 80057bc <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80057be:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80057c2:	f7fc f8af 	bl	8001924 <HAL_RTC_MspInit>
 80057c6:	e7e6      	b.n	8005796 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80057c8:	4b17      	ldr	r3, [pc, #92]	; (8005828 <HAL_RTC_Init+0xa0>)
 80057ca:	699a      	ldr	r2, [r3, #24]
 80057cc:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 80057d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d4:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80057d6:	6999      	ldr	r1, [r3, #24]
 80057d8:	6862      	ldr	r2, [r4, #4]
 80057da:	6920      	ldr	r0, [r4, #16]
 80057dc:	4302      	orrs	r2, r0
 80057de:	69a0      	ldr	r0, [r4, #24]
 80057e0:	4302      	orrs	r2, r0
 80057e2:	430a      	orrs	r2, r1
 80057e4:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80057e6:	68e2      	ldr	r2, [r4, #12]
 80057e8:	68a1      	ldr	r1, [r4, #8]
 80057ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80057ee:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80057f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80057f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80057fa:	4301      	orrs	r1, r0
 80057fc:	430a      	orrs	r2, r1
 80057fe:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8005800:	4620      	mov	r0, r4
 8005802:	f7ff ff99 	bl	8005738 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8005806:	2800      	cmp	r0, #0
 8005808:	d1d1      	bne.n	80057ae <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 800580a:	4907      	ldr	r1, [pc, #28]	; (8005828 <HAL_RTC_Init+0xa0>)
 800580c:	698b      	ldr	r3, [r1, #24]
 800580e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005812:	6a22      	ldr	r2, [r4, #32]
 8005814:	69e5      	ldr	r5, [r4, #28]
 8005816:	432a      	orrs	r2, r5
 8005818:	6965      	ldr	r5, [r4, #20]
 800581a:	432a      	orrs	r2, r5
 800581c:	4313      	orrs	r3, r2
 800581e:	618b      	str	r3, [r1, #24]
 8005820:	e7c5      	b.n	80057ae <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005822:	2001      	movs	r0, #1
}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40002800 	.word	0x40002800

0800582c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800582c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800582e:	e002      	b.n	8005836 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005830:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8005832:	380a      	subs	r0, #10
 8005834:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005836:	2809      	cmp	r0, #9
 8005838:	d8fa      	bhi.n	8005830 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	b2db      	uxtb	r3, r3
}
 800583e:	4318      	orrs	r0, r3
 8005840:	4770      	bx	lr
	...

08005844 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005844:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005848:	2b01      	cmp	r3, #1
 800584a:	f000 80b0 	beq.w	80059ae <HAL_RTC_SetAlarm_IT+0x16a>
{
 800584e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005852:	4605      	mov	r5, r0
 8005854:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005856:	2301      	movs	r3, #1
 8005858:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800585c:	2302      	movs	r3, #2
 800585e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005862:	4b54      	ldr	r3, [pc, #336]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005864:	68de      	ldr	r6, [r3, #12]
 8005866:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800586a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800586e:	d043      	beq.n	80058f8 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005870:	bb12      	cbnz	r2, 80058b8 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005878:	d101      	bne.n	800587e <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800587a:	2300      	movs	r3, #0
 800587c:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800587e:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005882:	7820      	ldrb	r0, [r4, #0]
 8005884:	f7ff ffd2 	bl	800582c <RTC_ByteToBcd2>
 8005888:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800588a:	7860      	ldrb	r0, [r4, #1]
 800588c:	f7ff ffce 	bl	800582c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005890:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005894:	78a0      	ldrb	r0, [r4, #2]
 8005896:	f7ff ffc9 	bl	800582c <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800589a:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800589c:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800589e:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058a2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80058a6:	f7ff ffc1 	bl	800582c <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058aa:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058ae:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058b0:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058b2:	ea48 0000 	orr.w	r0, r8, r0
 80058b6:	e020      	b.n	80058fa <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80058b8:	6948      	ldr	r0, [r1, #20]
 80058ba:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80058be:	d009      	beq.n	80058d4 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80058c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80058c4:	d006      	beq.n	80058d4 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80058c6:	4b3b      	ldr	r3, [pc, #236]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80058ce:	d101      	bne.n	80058d4 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058d4:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058d6:	7863      	ldrb	r3, [r4, #1]
 80058d8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058de:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80058e0:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058e2:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80058e4:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058e8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80058ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80058f0:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80058f2:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80058f4:	4318      	orrs	r0, r3
 80058f6:	e000      	b.n	80058fa <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80058f8:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058fa:	4b2e      	ldr	r3, [pc, #184]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 80058fc:	22ca      	movs	r2, #202	; 0xca
 80058fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005900:	2253      	movs	r2, #83	; 0x53
 8005902:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005904:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d02a      	beq.n	8005962 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800590c:	4b29      	ldr	r3, [pc, #164]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005914:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005916:	2202      	movs	r2, #2
 8005918:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800591a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800591e:	d040      	beq.n	80059a2 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005920:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005922:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005924:	69a2      	ldr	r2, [r4, #24]
 8005926:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005928:	6862      	ldr	r2, [r4, #4]
 800592a:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 800592c:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800592e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005930:	f042 0202 	orr.w	r2, r2, #2
 8005934:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 800593c:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <HAL_RTC_SetAlarm_IT+0x174>)
 8005940:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8005944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005948:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800594c:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 800594e:	22ff      	movs	r2, #255	; 0xff
 8005950:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005952:	2301      	movs	r3, #1
 8005954:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8005958:	2000      	movs	r0, #0
 800595a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800595e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800596a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800596c:	2201      	movs	r2, #1
 800596e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005970:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005974:	d00f      	beq.n	8005996 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005978:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800597a:	69a2      	ldr	r2, [r4, #24]
 800597c:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800597e:	6862      	ldr	r2, [r4, #4]
 8005980:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 8005982:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005984:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800598c:	699a      	ldr	r2, [r3, #24]
 800598e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8005992:	619a      	str	r2, [r3, #24]
 8005994:	e7d3      	b.n	800593e <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005996:	69a3      	ldr	r3, [r4, #24]
 8005998:	69e2      	ldr	r2, [r4, #28]
 800599a:	4313      	orrs	r3, r2
 800599c:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 800599e:	6453      	str	r3, [r2, #68]	; 0x44
 80059a0:	e7ed      	b.n	800597e <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80059a2:	69a3      	ldr	r3, [r4, #24]
 80059a4:	69e2      	ldr	r2, [r4, #28]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	4a02      	ldr	r2, [pc, #8]	; (80059b4 <HAL_RTC_SetAlarm_IT+0x170>)
 80059aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059ac:	e7bc      	b.n	8005928 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80059ae:	2002      	movs	r0, #2
}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40002800 	.word	0x40002800
 80059b8:	58000800 	.word	0x58000800

080059bc <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d017      	beq.n	80059f4 <HAL_RTCEx_EnableBypassShadow+0x38>
 80059c4:	2101      	movs	r1, #1
 80059c6:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ca:	2302      	movs	r3, #2
 80059cc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80059d2:	22ca      	movs	r2, #202	; 0xca
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24
 80059d6:	2253      	movs	r2, #83	; 0x53
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059da:	699a      	ldr	r2, [r3, #24]
 80059dc:	f042 0220 	orr.w	r2, r2, #32
 80059e0:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059e2:	22ff      	movs	r2, #255	; 0xff
 80059e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80059e6:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ea:	2300      	movs	r3, #0
 80059ec:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80059f0:	4618      	mov	r0, r3
 80059f2:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80059f4:	2002      	movs	r0, #2
}
 80059f6:	4770      	bx	lr
 80059f8:	40002800 	.word	0x40002800

080059fc <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d020      	beq.n	8005a46 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8005a04:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8005a06:	2101      	movs	r1, #1
 8005a08:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a12:	4b0e      	ldr	r3, [pc, #56]	; (8005a4c <HAL_RTCEx_SetSSRU_IT+0x50>)
 8005a14:	22ca      	movs	r2, #202	; 0xca
 8005a16:	625a      	str	r2, [r3, #36]	; 0x24
 8005a18:	2253      	movs	r2, #83	; 0x53
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a22:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8005a24:	4c0a      	ldr	r4, [pc, #40]	; (8005a50 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8005a26:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8005a2a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005a2e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a32:	22ff      	movs	r2, #255	; 0xff
 8005a34:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005a36:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8005a40:	4618      	mov	r0, r3
}
 8005a42:	bc10      	pop	{r4}
 8005a44:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005a46:	2002      	movs	r0, #2
}
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40002800 	.word	0x40002800
 8005a50:	58000800 	.word	0x58000800

08005a54 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005a54:	b510      	push	{r4, lr}
 8005a56:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8005a58:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a60:	d103      	bne.n	8005a6a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8005a68:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8005a6c:	2240      	movs	r2, #64	; 0x40
 8005a6e:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8005a70:	f7fc fb50 	bl	8002114 <HAL_RTCEx_SSRUEventCallback>
 8005a74:	e7f5      	b.n	8005a62 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8005a76:	bf00      	nop
 8005a78:	40002800 	.word	0x40002800

08005a7c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005a7c:	4770      	bx	lr

08005a7e <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005a7e:	0089      	lsls	r1, r1, #2
 8005a80:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005a84:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005a88:	600a      	str	r2, [r1, #0]
}
 8005a8a:	4770      	bx	lr

08005a8c <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005a8c:	0089      	lsls	r1, r1, #2
 8005a8e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005a92:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005a96:	6808      	ldr	r0, [r1, #0]
}
 8005a98:	4770      	bx	lr
	...

08005a9c <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005a9c:	4b07      	ldr	r3, [pc, #28]	; (8005abc <SUBGHZSPI_Init+0x20>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa4:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005aa6:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8005aaa:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005aac:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ab8:	601a      	str	r2, [r3, #0]
}
 8005aba:	4770      	bx	lr
 8005abc:	58010000 	.word	0x58010000

08005ac0 <HAL_SUBGHZ_Init>:
{
 8005ac0:	b530      	push	{r4, r5, lr}
 8005ac2:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d04e      	beq.n	8005b66 <HAL_SUBGHZ_Init+0xa6>
 8005ac8:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8005aca:	7983      	ldrb	r3, [r0, #6]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d03b      	beq.n	8005b48 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ad8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005adc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005ae4:	4b21      	ldr	r3, [pc, #132]	; (8005b6c <HAL_SUBGHZ_Init+0xac>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005aec:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005af0:	2264      	movs	r2, #100	; 0x64
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
 8005af6:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8005af8:	9b01      	ldr	r3, [sp, #4]
 8005afa:	b34b      	cbz	r3, 8005b50 <HAL_SUBGHZ_Init+0x90>
    count--;
 8005afc:	9b01      	ldr	r3, [sp, #4]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005b0e:	d1f3      	bne.n	8005af8 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8005b10:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005b12:	4b17      	ldr	r3, [pc, #92]	; (8005b70 <HAL_SUBGHZ_Init+0xb0>)
 8005b14:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005b20:	4914      	ldr	r1, [pc, #80]	; (8005b74 <HAL_SUBGHZ_Init+0xb4>)
 8005b22:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005b26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b2a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b34:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b3a:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8005b3c:	b15d      	cbz	r5, 8005b56 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	71a3      	strb	r3, [r4, #6]
}
 8005b42:	4628      	mov	r0, r5
 8005b44:	b003      	add	sp, #12
 8005b46:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8005b48:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8005b4a:	f7fb ff9f 	bl	8001a8c <HAL_SUBGHZ_MspInit>
 8005b4e:	e7bf      	b.n	8005ad0 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005b50:	2501      	movs	r5, #1
 8005b52:	60a5      	str	r5, [r4, #8]
      break;
 8005b54:	e7dd      	b.n	8005b12 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005b56:	6820      	ldr	r0, [r4, #0]
 8005b58:	f7ff ffa0 	bl	8005a9c <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60a3      	str	r3, [r4, #8]
 8005b64:	e7eb      	b.n	8005b3e <HAL_SUBGHZ_Init+0x7e>
    return status;
 8005b66:	2501      	movs	r5, #1
 8005b68:	e7eb      	b.n	8005b42 <HAL_SUBGHZ_Init+0x82>
 8005b6a:	bf00      	nop
 8005b6c:	20000070 	.word	0x20000070
 8005b70:	58000400 	.word	0x58000400
 8005b74:	58000800 	.word	0x58000800

08005b78 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005b78:	b082      	sub	sp, #8
 8005b7a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005b7c:	4b1a      	ldr	r3, [pc, #104]	; (8005be8 <SUBGHZSPI_Transmit+0x70>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005b84:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005b88:	2064      	movs	r0, #100	; 0x64
 8005b8a:	fb00 f303 	mul.w	r3, r0, r3
 8005b8e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005b90:	9b01      	ldr	r3, [sp, #4]
 8005b92:	b14b      	cbz	r3, 8005ba8 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005b94:	9b01      	ldr	r3, [sp, #4]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005b9a:	4b14      	ldr	r3, [pc, #80]	; (8005bec <SUBGHZSPI_Transmit+0x74>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f013 0f02 	tst.w	r3, #2
 8005ba2:	d0f5      	beq.n	8005b90 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	e001      	b.n	8005bac <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005ba8:	2001      	movs	r0, #1
 8005baa:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8005bac:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <SUBGHZSPI_Transmit+0x74>)
 8005bae:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005bb0:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <SUBGHZSPI_Transmit+0x70>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005bb8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005bbc:	2164      	movs	r1, #100	; 0x64
 8005bbe:	fb01 f303 	mul.w	r3, r1, r3
 8005bc2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	b143      	cbz	r3, 8005bda <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005bc8:	9b01      	ldr	r3, [sp, #4]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005bce:	4b07      	ldr	r3, [pc, #28]	; (8005bec <SUBGHZSPI_Transmit+0x74>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f013 0f01 	tst.w	r3, #1
 8005bd6:	d0f5      	beq.n	8005bc4 <SUBGHZSPI_Transmit+0x4c>
 8005bd8:	e001      	b.n	8005bde <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005bda:	2001      	movs	r0, #1
 8005bdc:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005bde:	4b03      	ldr	r3, [pc, #12]	; (8005bec <SUBGHZSPI_Transmit+0x74>)
 8005be0:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8005be2:	b002      	add	sp, #8
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000070 	.word	0x20000070
 8005bec:	58010000 	.word	0x58010000

08005bf0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005bf4:	4b1c      	ldr	r3, [pc, #112]	; (8005c68 <SUBGHZSPI_Receive+0x78>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005bfc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005c00:	2064      	movs	r0, #100	; 0x64
 8005c02:	fb00 f303 	mul.w	r3, r0, r3
 8005c06:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005c08:	9b01      	ldr	r3, [sp, #4]
 8005c0a:	b14b      	cbz	r3, 8005c20 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005c12:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <SUBGHZSPI_Receive+0x7c>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f013 0f02 	tst.w	r3, #2
 8005c1a:	d0f5      	beq.n	8005c08 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	e001      	b.n	8005c24 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005c20:	2001      	movs	r0, #1
 8005c22:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8005c24:	4b11      	ldr	r3, [pc, #68]	; (8005c6c <SUBGHZSPI_Receive+0x7c>)
 8005c26:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8005c2a:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <SUBGHZSPI_Receive+0x78>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005c36:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8005c3a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8005c3e:	fb0c f303 	mul.w	r3, ip, r3
 8005c42:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	b143      	cbz	r3, 8005c5a <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005c4e:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <SUBGHZSPI_Receive+0x7c>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f013 0f01 	tst.w	r3, #1
 8005c56:	d0f5      	beq.n	8005c44 <SUBGHZSPI_Receive+0x54>
 8005c58:	e001      	b.n	8005c5e <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005c5e:	4b03      	ldr	r3, [pc, #12]	; (8005c6c <SUBGHZSPI_Receive+0x7c>)
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	700b      	strb	r3, [r1, #0]

  return status;
}
 8005c64:	b002      	add	sp, #8
 8005c66:	4770      	bx	lr
 8005c68:	20000070 	.word	0x20000070
 8005c6c:	58010000 	.word	0x58010000

08005c70 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005c70:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005c72:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <SUBGHZ_WaitOnBusy+0x50>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c7a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8005c7e:	2264      	movs	r2, #100	; 0x64
 8005c80:	fb02 f303 	mul.w	r3, r2, r3
 8005c84:	9301      	str	r3, [sp, #4]
 8005c86:	e006      	b.n	8005c96 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005c88:	2302      	movs	r3, #2
 8005c8a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8005c8c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8005c8e:	b002      	add	sp, #8
 8005c90:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005c92:	4213      	tst	r3, r2
 8005c94:	d012      	beq.n	8005cbc <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <SUBGHZ_WaitOnBusy+0x54>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f013 0304 	ands.w	r3, r3, #4
 8005c9e:	d000      	beq.n	8005ca2 <SUBGHZ_WaitOnBusy+0x32>
 8005ca0:	2301      	movs	r3, #1
    if (count == 0U)
 8005ca2:	9a01      	ldr	r2, [sp, #4]
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	d0ef      	beq.n	8005c88 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8005ca8:	9a01      	ldr	r2, [sp, #4]
 8005caa:	3a01      	subs	r2, #1
 8005cac:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005cae:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <SUBGHZ_WaitOnBusy+0x54>)
 8005cb0:	6952      	ldr	r2, [r2, #20]
 8005cb2:	f012 0202 	ands.w	r2, r2, #2
 8005cb6:	d0ec      	beq.n	8005c92 <SUBGHZ_WaitOnBusy+0x22>
 8005cb8:	2201      	movs	r2, #1
 8005cba:	e7ea      	b.n	8005c92 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	e7e6      	b.n	8005c8e <SUBGHZ_WaitOnBusy+0x1e>
 8005cc0:	20000070 	.word	0x20000070
 8005cc4:	58000400 	.word	0x58000400

08005cc8 <SUBGHZ_CheckDeviceReady>:
{
 8005cc8:	b500      	push	{lr}
 8005cca:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005ccc:	7903      	ldrb	r3, [r0, #4]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d004      	beq.n	8005cdc <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005cd2:	f7ff ffcd 	bl	8005c70 <SUBGHZ_WaitOnBusy>
}
 8005cd6:	b003      	add	sp, #12
 8005cd8:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	; (8005d14 <SUBGHZ_CheckDeviceReady+0x4c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005ce4:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8005ce8:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005cea:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <SUBGHZ_CheckDeviceReady+0x50>)
 8005cec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005cf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8005cf8:	9b01      	ldr	r3, [sp, #4]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8005cfe:	9b01      	ldr	r3, [sp, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f9      	bne.n	8005cf8 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d04:	4a04      	ldr	r2, [pc, #16]	; (8005d18 <SUBGHZ_CheckDeviceReady+0x50>)
 8005d06:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d12:	e7de      	b.n	8005cd2 <SUBGHZ_CheckDeviceReady+0xa>
 8005d14:	20000070 	.word	0x20000070
 8005d18:	58000400 	.word	0x58000400

08005d1c <HAL_SUBGHZ_WriteRegisters>:
{
 8005d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d20:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d22:	7980      	ldrb	r0, [r0, #6]
 8005d24:	fa5f f880 	uxtb.w	r8, r0
 8005d28:	f1b8 0f01 	cmp.w	r8, #1
 8005d2c:	d13e      	bne.n	8005dac <HAL_SUBGHZ_WriteRegisters+0x90>
 8005d2e:	460c      	mov	r4, r1
 8005d30:	4617      	mov	r7, r2
 8005d32:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005d34:	796b      	ldrb	r3, [r5, #5]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d03b      	beq.n	8005db2 <HAL_SUBGHZ_WriteRegisters+0x96>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005d3e:	2302      	movs	r3, #2
 8005d40:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7ff ffc0 	bl	8005cc8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005d4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005d56:	210d      	movs	r1, #13
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f7ff ff0d 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005d5e:	0a21      	lsrs	r1, r4, #8
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7ff ff09 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005d66:	b2e1      	uxtb	r1, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7ff ff05 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d6e:	2400      	movs	r4, #0
 8005d70:	e005      	b.n	8005d7e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005d72:	5d39      	ldrb	r1, [r7, r4]
 8005d74:	4628      	mov	r0, r5
 8005d76:	f7ff feff 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005d7a:	3401      	adds	r4, #1
 8005d7c:	b2a4      	uxth	r4, r4
 8005d7e:	42b4      	cmp	r4, r6
 8005d80:	d3f7      	bcc.n	8005d72 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005d82:	4a0d      	ldr	r2, [pc, #52]	; (8005db8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8005d84:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d90:	4628      	mov	r0, r5
 8005d92:	f7ff ff6d 	bl	8005c70 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d96:	68ab      	ldr	r3, [r5, #8]
 8005d98:	b90b      	cbnz	r3, 8005d9e <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8005d9a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005da2:	2300      	movs	r3, #0
 8005da4:	716b      	strb	r3, [r5, #5]
}
 8005da6:	4640      	mov	r0, r8
 8005da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005dac:	f04f 0802 	mov.w	r8, #2
 8005db0:	e7f9      	b.n	8005da6 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8005db2:	f04f 0802 	mov.w	r8, #2
 8005db6:	e7f6      	b.n	8005da6 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8005db8:	58000400 	.word	0x58000400

08005dbc <HAL_SUBGHZ_ReadRegisters>:
{
 8005dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005dc2:	7980      	ldrb	r0, [r0, #6]
 8005dc4:	fa5f f880 	uxtb.w	r8, r0
 8005dc8:	f1b8 0f01 	cmp.w	r8, #1
 8005dcc:	d141      	bne.n	8005e52 <HAL_SUBGHZ_ReadRegisters+0x96>
 8005dce:	460c      	mov	r4, r1
 8005dd0:	4615      	mov	r5, r2
 8005dd2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005dd4:	7973      	ldrb	r3, [r6, #5]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d03e      	beq.n	8005e58 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005dde:	4630      	mov	r0, r6
 8005de0:	f7ff ff72 	bl	8005cc8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005de4:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005de6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005dea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005df2:	211d      	movs	r1, #29
 8005df4:	4630      	mov	r0, r6
 8005df6:	f7ff febf 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005dfa:	0a21      	lsrs	r1, r4, #8
 8005dfc:	4630      	mov	r0, r6
 8005dfe:	f7ff febb 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005e02:	b2e1      	uxtb	r1, r4
 8005e04:	4630      	mov	r0, r6
 8005e06:	f7ff feb7 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f7ff feb3 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005e12:	2400      	movs	r4, #0
 8005e14:	e006      	b.n	8005e24 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005e16:	4629      	mov	r1, r5
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff fee9 	bl	8005bf0 <SUBGHZSPI_Receive>
      pData++;
 8005e1e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005e20:	3401      	adds	r4, #1
 8005e22:	b2a4      	uxth	r4, r4
 8005e24:	42bc      	cmp	r4, r7
 8005e26:	d3f6      	bcc.n	8005e16 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005e28:	4a0d      	ldr	r2, [pc, #52]	; (8005e60 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8005e2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005e36:	4630      	mov	r0, r6
 8005e38:	f7ff ff1a 	bl	8005c70 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005e3c:	68b3      	ldr	r3, [r6, #8]
 8005e3e:	b90b      	cbnz	r3, 8005e44 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8005e40:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e44:	2301      	movs	r3, #1
 8005e46:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005e48:	2300      	movs	r3, #0
 8005e4a:	7173      	strb	r3, [r6, #5]
}
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005e52:	f04f 0802 	mov.w	r8, #2
 8005e56:	e7f9      	b.n	8005e4c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8005e58:	f04f 0802 	mov.w	r8, #2
 8005e5c:	e7f6      	b.n	8005e4c <HAL_SUBGHZ_ReadRegisters+0x90>
 8005e5e:	bf00      	nop
 8005e60:	58000400 	.word	0x58000400

08005e64 <HAL_SUBGHZ_ExecSetCmd>:
{
 8005e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e68:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e6a:	7980      	ldrb	r0, [r0, #6]
 8005e6c:	fa5f f980 	uxtb.w	r9, r0
 8005e70:	f1b9 0f01 	cmp.w	r9, #1
 8005e74:	d143      	bne.n	8005efe <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8005e76:	4688      	mov	r8, r1
 8005e78:	4617      	mov	r7, r2
 8005e7a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8005e7c:	796b      	ldrb	r3, [r5, #5]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d040      	beq.n	8005f04 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 8005e82:	2301      	movs	r3, #1
 8005e84:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e86:	4628      	mov	r0, r5
 8005e88:	f7ff ff1e 	bl	8005cc8 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005e8c:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005e90:	d005      	beq.n	8005e9e <HAL_SUBGHZ_ExecSetCmd+0x3a>
 8005e92:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8005e96:	d002      	beq.n	8005e9e <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	712b      	strb	r3, [r5, #4]
 8005e9c:	e001      	b.n	8005ea2 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ea2:	4a1a      	ldr	r2, [pc, #104]	; (8005f0c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005ea4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ea8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f7ff fe60 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005eb8:	2400      	movs	r4, #0
 8005eba:	e005      	b.n	8005ec8 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ebc:	5d39      	ldrb	r1, [r7, r4]
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f7ff fe5a 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ec4:	3401      	adds	r4, #1
 8005ec6:	b2a4      	uxth	r4, r4
 8005ec8:	42b4      	cmp	r4, r6
 8005eca:	d3f7      	bcc.n	8005ebc <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005ecc:	4a0f      	ldr	r2, [pc, #60]	; (8005f0c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8005ece:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8005eda:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 8005ede:	d10a      	bne.n	8005ef6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ee0:	68ab      	ldr	r3, [r5, #8]
 8005ee2:	b90b      	cbnz	r3, 8005ee8 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8005ee4:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8005eec:	2300      	movs	r3, #0
 8005eee:	716b      	strb	r3, [r5, #5]
}
 8005ef0:	4648      	mov	r0, r9
 8005ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f7ff feba 	bl	8005c70 <SUBGHZ_WaitOnBusy>
 8005efc:	e7f0      	b.n	8005ee0 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8005efe:	f04f 0902 	mov.w	r9, #2
 8005f02:	e7f5      	b.n	8005ef0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8005f04:	f04f 0902 	mov.w	r9, #2
 8005f08:	e7f2      	b.n	8005ef0 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8005f0a:	bf00      	nop
 8005f0c:	58000400 	.word	0x58000400

08005f10 <HAL_SUBGHZ_ExecGetCmd>:
{
 8005f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f14:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005f16:	7980      	ldrb	r0, [r0, #6]
 8005f18:	fa5f f880 	uxtb.w	r8, r0
 8005f1c:	f1b8 0f01 	cmp.w	r8, #1
 8005f20:	d139      	bne.n	8005f96 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8005f22:	460c      	mov	r4, r1
 8005f24:	4615      	mov	r5, r2
 8005f26:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8005f28:	7973      	ldrb	r3, [r6, #5]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d036      	beq.n	8005f9c <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005f32:	4630      	mov	r0, r6
 8005f34:	f7ff fec8 	bl	8005cc8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f38:	4a1a      	ldr	r2, [pc, #104]	; (8005fa4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005f3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005f3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005f46:	4621      	mov	r1, r4
 8005f48:	4630      	mov	r0, r6
 8005f4a:	f7ff fe15 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005f4e:	2100      	movs	r1, #0
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fe11 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005f56:	2400      	movs	r4, #0
 8005f58:	e006      	b.n	8005f68 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f7ff fe47 	bl	8005bf0 <SUBGHZSPI_Receive>
      pData++;
 8005f62:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8005f64:	3401      	adds	r4, #1
 8005f66:	b2a4      	uxth	r4, r4
 8005f68:	42bc      	cmp	r4, r7
 8005f6a:	d3f6      	bcc.n	8005f5a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005f6c:	4a0d      	ldr	r2, [pc, #52]	; (8005fa4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8005f6e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7ff fe78 	bl	8005c70 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005f80:	68b3      	ldr	r3, [r6, #8]
 8005f82:	b90b      	cbnz	r3, 8005f88 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8005f84:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	7173      	strb	r3, [r6, #5]
}
 8005f90:	4640      	mov	r0, r8
 8005f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8005f96:	f04f 0802 	mov.w	r8, #2
 8005f9a:	e7f9      	b.n	8005f90 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8005f9c:	f04f 0802 	mov.w	r8, #2
 8005fa0:	e7f6      	b.n	8005f90 <HAL_SUBGHZ_ExecGetCmd+0x80>
 8005fa2:	bf00      	nop
 8005fa4:	58000400 	.word	0x58000400

08005fa8 <HAL_SUBGHZ_IRQHandler>:
{
 8005fa8:	b530      	push	{r4, r5, lr}
 8005faa:	b083      	sub	sp, #12
 8005fac:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	aa01      	add	r2, sp, #4
 8005fb8:	2112      	movs	r1, #18
 8005fba:	f7ff ffa9 	bl	8005f10 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005fbe:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005fc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005fc6:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005fca:	f013 0f01 	tst.w	r3, #1
 8005fce:	d126      	bne.n	800601e <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005fd0:	f014 0f02 	tst.w	r4, #2
 8005fd4:	d127      	bne.n	8006026 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005fd6:	f014 0f04 	tst.w	r4, #4
 8005fda:	d128      	bne.n	800602e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005fdc:	f014 0f08 	tst.w	r4, #8
 8005fe0:	d129      	bne.n	8006036 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005fe2:	f014 0f10 	tst.w	r4, #16
 8005fe6:	d12a      	bne.n	800603e <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005fe8:	f014 0f20 	tst.w	r4, #32
 8005fec:	d12b      	bne.n	8006046 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005fee:	f014 0f40 	tst.w	r4, #64	; 0x40
 8005ff2:	d12c      	bne.n	800604e <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005ff4:	f014 0f80 	tst.w	r4, #128	; 0x80
 8005ff8:	d006      	beq.n	8006008 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005ffa:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005ffe:	d02a      	beq.n	8006056 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006000:	2101      	movs	r1, #1
 8006002:	4628      	mov	r0, r5
 8006004:	f00d fec8 	bl	8013d98 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006008:	f414 7f00 	tst.w	r4, #512	; 0x200
 800600c:	d128      	bne.n	8006060 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800600e:	2302      	movs	r3, #2
 8006010:	aa01      	add	r2, sp, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4628      	mov	r0, r5
 8006016:	f7ff ff25 	bl	8005e64 <HAL_SUBGHZ_ExecSetCmd>
}
 800601a:	b003      	add	sp, #12
 800601c:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800601e:	4628      	mov	r0, r5
 8006020:	f00d fea2 	bl	8013d68 <HAL_SUBGHZ_TxCpltCallback>
 8006024:	e7d4      	b.n	8005fd0 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006026:	4628      	mov	r0, r5
 8006028:	f00d fea6 	bl	8013d78 <HAL_SUBGHZ_RxCpltCallback>
 800602c:	e7d3      	b.n	8005fd6 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800602e:	4628      	mov	r0, r5
 8006030:	f00d fed6 	bl	8013de0 <HAL_SUBGHZ_PreambleDetectedCallback>
 8006034:	e7d2      	b.n	8005fdc <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006036:	4628      	mov	r0, r5
 8006038:	f00d feda 	bl	8013df0 <HAL_SUBGHZ_SyncWordValidCallback>
 800603c:	e7d1      	b.n	8005fe2 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800603e:	4628      	mov	r0, r5
 8006040:	f00d fede 	bl	8013e00 <HAL_SUBGHZ_HeaderValidCallback>
 8006044:	e7d0      	b.n	8005fe8 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006046:	4628      	mov	r0, r5
 8006048:	f00d fec2 	bl	8013dd0 <HAL_SUBGHZ_HeaderErrorCallback>
 800604c:	e7cf      	b.n	8005fee <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800604e:	4628      	mov	r0, r5
 8006050:	f00d fe9a 	bl	8013d88 <HAL_SUBGHZ_CRCErrorCallback>
 8006054:	e7ce      	b.n	8005ff4 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006056:	2100      	movs	r1, #0
 8006058:	4628      	mov	r0, r5
 800605a:	f00d fe9d 	bl	8013d98 <HAL_SUBGHZ_CADStatusCallback>
 800605e:	e7d3      	b.n	8006008 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006060:	4628      	mov	r0, r5
 8006062:	f00d feab 	bl	8013dbc <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006066:	e7d2      	b.n	800600e <HAL_SUBGHZ_IRQHandler+0x66>

08006068 <HAL_SUBGHZ_WriteBuffer>:
{
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800606e:	7980      	ldrb	r0, [r0, #6]
 8006070:	fa5f f880 	uxtb.w	r8, r0
 8006074:	f1b8 0f01 	cmp.w	r8, #1
 8006078:	d138      	bne.n	80060ec <HAL_SUBGHZ_WriteBuffer+0x84>
 800607a:	460c      	mov	r4, r1
 800607c:	4617      	mov	r7, r2
 800607e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006080:	796b      	ldrb	r3, [r5, #5]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d035      	beq.n	80060f2 <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006086:	2301      	movs	r3, #1
 8006088:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800608a:	4628      	mov	r0, r5
 800608c:	f7ff fe1c 	bl	8005cc8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006090:	4a19      	ldr	r2, [pc, #100]	; (80060f8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006092:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006096:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800609a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800609e:	210e      	movs	r1, #14
 80060a0:	4628      	mov	r0, r5
 80060a2:	f7ff fd69 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80060a6:	4621      	mov	r1, r4
 80060a8:	4628      	mov	r0, r5
 80060aa:	f7ff fd65 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80060ae:	2400      	movs	r4, #0
 80060b0:	e005      	b.n	80060be <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80060b2:	5d39      	ldrb	r1, [r7, r4]
 80060b4:	4628      	mov	r0, r5
 80060b6:	f7ff fd5f 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80060ba:	3401      	adds	r4, #1
 80060bc:	b2a4      	uxth	r4, r4
 80060be:	42b4      	cmp	r4, r6
 80060c0:	d3f7      	bcc.n	80060b2 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80060c2:	4a0d      	ldr	r2, [pc, #52]	; (80060f8 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80060c4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80060c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80060d0:	4628      	mov	r0, r5
 80060d2:	f7ff fdcd 	bl	8005c70 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80060d6:	68ab      	ldr	r3, [r5, #8]
 80060d8:	b90b      	cbnz	r3, 80060de <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 80060da:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80060de:	2301      	movs	r3, #1
 80060e0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80060e2:	2300      	movs	r3, #0
 80060e4:	716b      	strb	r3, [r5, #5]
}
 80060e6:	4640      	mov	r0, r8
 80060e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80060ec:	f04f 0802 	mov.w	r8, #2
 80060f0:	e7f9      	b.n	80060e6 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 80060f2:	f04f 0802 	mov.w	r8, #2
 80060f6:	e7f6      	b.n	80060e6 <HAL_SUBGHZ_WriteBuffer+0x7e>
 80060f8:	58000400 	.word	0x58000400

080060fc <HAL_SUBGHZ_ReadBuffer>:
{
 80060fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006100:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006102:	7980      	ldrb	r0, [r0, #6]
 8006104:	fa5f f880 	uxtb.w	r8, r0
 8006108:	f1b8 0f01 	cmp.w	r8, #1
 800610c:	d13d      	bne.n	800618a <HAL_SUBGHZ_ReadBuffer+0x8e>
 800610e:	460c      	mov	r4, r1
 8006110:	4615      	mov	r5, r2
 8006112:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006114:	7973      	ldrb	r3, [r6, #5]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d03a      	beq.n	8006190 <HAL_SUBGHZ_ReadBuffer+0x94>
 800611a:	2301      	movs	r3, #1
 800611c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800611e:	4630      	mov	r0, r6
 8006120:	f7ff fdd2 	bl	8005cc8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006124:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006126:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800612a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800612e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006132:	211e      	movs	r1, #30
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff fd1f 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800613a:	4621      	mov	r1, r4
 800613c:	4630      	mov	r0, r6
 800613e:	f7ff fd1b 	bl	8005b78 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006142:	2100      	movs	r1, #0
 8006144:	4630      	mov	r0, r6
 8006146:	f7ff fd17 	bl	8005b78 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800614a:	2400      	movs	r4, #0
 800614c:	e006      	b.n	800615c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800614e:	4629      	mov	r1, r5
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff fd4d 	bl	8005bf0 <SUBGHZSPI_Receive>
      pData++;
 8006156:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006158:	3401      	adds	r4, #1
 800615a:	b2a4      	uxth	r4, r4
 800615c:	42bc      	cmp	r4, r7
 800615e:	d3f6      	bcc.n	800614e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006160:	4a0d      	ldr	r2, [pc, #52]	; (8006198 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006162:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800616e:	4630      	mov	r0, r6
 8006170:	f7ff fd7e 	bl	8005c70 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006174:	68b3      	ldr	r3, [r6, #8]
 8006176:	b90b      	cbnz	r3, 800617c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8006178:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800617c:	2301      	movs	r3, #1
 800617e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006180:	2300      	movs	r3, #0
 8006182:	7173      	strb	r3, [r6, #5]
}
 8006184:	4640      	mov	r0, r8
 8006186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800618a:	f04f 0802 	mov.w	r8, #2
 800618e:	e7f9      	b.n	8006184 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8006190:	f04f 0802 	mov.w	r8, #2
 8006194:	e7f6      	b.n	8006184 <HAL_SUBGHZ_ReadBuffer+0x88>
 8006196:	bf00      	nop
 8006198:	58000400 	.word	0x58000400

0800619c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619e:	6a03      	ldr	r3, [r0, #32]
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061aa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061b0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b4:	680c      	ldr	r4, [r1, #0]
 80061b6:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061b8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061bc:	688c      	ldr	r4, [r1, #8]
 80061be:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061c0:	4c15      	ldr	r4, [pc, #84]	; (8006218 <TIM_OC1_SetConfig+0x7c>)
 80061c2:	42a0      	cmp	r0, r4
 80061c4:	d007      	beq.n	80061d6 <TIM_OC1_SetConfig+0x3a>
 80061c6:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80061ca:	42a0      	cmp	r0, r4
 80061cc:	d003      	beq.n	80061d6 <TIM_OC1_SetConfig+0x3a>
 80061ce:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
 80061d2:	42a0      	cmp	r0, r4
 80061d4:	d105      	bne.n	80061e2 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061d6:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061da:	68cc      	ldr	r4, [r1, #12]
 80061dc:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061de:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e2:	4c0d      	ldr	r4, [pc, #52]	; (8006218 <TIM_OC1_SetConfig+0x7c>)
 80061e4:	42a0      	cmp	r0, r4
 80061e6:	d007      	beq.n	80061f8 <TIM_OC1_SetConfig+0x5c>
 80061e8:	f504 54c0 	add.w	r4, r4, #6144	; 0x1800
 80061ec:	42a0      	cmp	r0, r4
 80061ee:	d003      	beq.n	80061f8 <TIM_OC1_SetConfig+0x5c>
 80061f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80061f4:	42a0      	cmp	r0, r4
 80061f6:	d107      	bne.n	8006208 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061f8:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061fc:	694c      	ldr	r4, [r1, #20]
 80061fe:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006202:	698d      	ldr	r5, [r1, #24]
 8006204:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800620a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800620c:	684a      	ldr	r2, [r1, #4]
 800620e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	6203      	str	r3, [r0, #32]
}
 8006212:	bc30      	pop	{r4, r5}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00

0800621c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800621e:	6a03      	ldr	r3, [r0, #32]
 8006220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006224:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006226:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800622c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006230:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006234:	680d      	ldr	r5, [r1, #0]
 8006236:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800623c:	688d      	ldr	r5, [r1, #8]
 800623e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006242:	4d12      	ldr	r5, [pc, #72]	; (800628c <TIM_OC3_SetConfig+0x70>)
 8006244:	42a8      	cmp	r0, r5
 8006246:	d019      	beq.n	800627c <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	4d10      	ldr	r5, [pc, #64]	; (800628c <TIM_OC3_SetConfig+0x70>)
 800624a:	42a8      	cmp	r0, r5
 800624c:	d007      	beq.n	800625e <TIM_OC3_SetConfig+0x42>
 800624e:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8006252:	42a8      	cmp	r0, r5
 8006254:	d003      	beq.n	800625e <TIM_OC3_SetConfig+0x42>
 8006256:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800625a:	42a8      	cmp	r0, r5
 800625c:	d107      	bne.n	800626e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800625e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006262:	694d      	ldr	r5, [r1, #20]
 8006264:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006268:	698d      	ldr	r5, [r1, #24]
 800626a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800626e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006270:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006272:	684a      	ldr	r2, [r1, #4]
 8006274:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006276:	6203      	str	r3, [r0, #32]
}
 8006278:	bc30      	pop	{r4, r5}
 800627a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800627c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006280:	68cd      	ldr	r5, [r1, #12]
 8006282:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006286:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800628a:	e7dd      	b.n	8006248 <TIM_OC3_SetConfig+0x2c>
 800628c:	40012c00 	.word	0x40012c00

08006290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006292:	6a03      	ldr	r3, [r0, #32]
 8006294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006298:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629e:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062a4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a8:	680d      	ldr	r5, [r1, #0]
 80062aa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062b2:	688d      	ldr	r5, [r1, #8]
 80062b4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b8:	4d0b      	ldr	r5, [pc, #44]	; (80062e8 <TIM_OC4_SetConfig+0x58>)
 80062ba:	42a8      	cmp	r0, r5
 80062bc:	d007      	beq.n	80062ce <TIM_OC4_SetConfig+0x3e>
 80062be:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80062c2:	42a8      	cmp	r0, r5
 80062c4:	d003      	beq.n	80062ce <TIM_OC4_SetConfig+0x3e>
 80062c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80062ca:	42a8      	cmp	r0, r5
 80062cc:	d104      	bne.n	80062d8 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062ce:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d2:	694d      	ldr	r5, [r1, #20]
 80062d4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062da:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062dc:	684b      	ldr	r3, [r1, #4]
 80062de:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e0:	6202      	str	r2, [r0, #32]
}
 80062e2:	bc30      	pop	{r4, r5}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40012c00 	.word	0x40012c00

080062ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062ee:	6a03      	ldr	r3, [r0, #32]
 80062f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062fa:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006300:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006304:	680d      	ldr	r5, [r1, #0]
 8006306:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006308:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800630c:	688d      	ldr	r5, [r1, #8]
 800630e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006312:	4d0b      	ldr	r5, [pc, #44]	; (8006340 <TIM_OC5_SetConfig+0x54>)
 8006314:	42a8      	cmp	r0, r5
 8006316:	d007      	beq.n	8006328 <TIM_OC5_SetConfig+0x3c>
 8006318:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800631c:	42a8      	cmp	r0, r5
 800631e:	d003      	beq.n	8006328 <TIM_OC5_SetConfig+0x3c>
 8006320:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006324:	42a8      	cmp	r0, r5
 8006326:	d104      	bne.n	8006332 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006328:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800632c:	694d      	ldr	r5, [r1, #20]
 800632e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006334:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006336:	684a      	ldr	r2, [r1, #4]
 8006338:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633a:	6203      	str	r3, [r0, #32]
}
 800633c:	bc30      	pop	{r4, r5}
 800633e:	4770      	bx	lr
 8006340:	40012c00 	.word	0x40012c00

08006344 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006346:	6a03      	ldr	r3, [r0, #32]
 8006348:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800634c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006352:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800635c:	680d      	ldr	r5, [r1, #0]
 800635e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006362:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006366:	688d      	ldr	r5, [r1, #8]
 8006368:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636c:	4d0b      	ldr	r5, [pc, #44]	; (800639c <TIM_OC6_SetConfig+0x58>)
 800636e:	42a8      	cmp	r0, r5
 8006370:	d007      	beq.n	8006382 <TIM_OC6_SetConfig+0x3e>
 8006372:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8006376:	42a8      	cmp	r0, r5
 8006378:	d003      	beq.n	8006382 <TIM_OC6_SetConfig+0x3e>
 800637a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800637e:	42a8      	cmp	r0, r5
 8006380:	d104      	bne.n	800638c <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006382:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006386:	694d      	ldr	r5, [r1, #20]
 8006388:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800638c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800638e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006390:	684b      	ldr	r3, [r1, #4]
 8006392:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006394:	6202      	str	r2, [r0, #32]
}
 8006396:	bc30      	pop	{r4, r5}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	40012c00 	.word	0x40012c00

080063a0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80063a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a2:	4a1a      	ldr	r2, [pc, #104]	; (800640c <TIM_Base_SetConfig+0x6c>)
 80063a4:	4290      	cmp	r0, r2
 80063a6:	d002      	beq.n	80063ae <TIM_Base_SetConfig+0xe>
 80063a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80063ac:	d103      	bne.n	80063b6 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063b2:	684a      	ldr	r2, [r1, #4]
 80063b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b6:	4a15      	ldr	r2, [pc, #84]	; (800640c <TIM_Base_SetConfig+0x6c>)
 80063b8:	4290      	cmp	r0, r2
 80063ba:	d00a      	beq.n	80063d2 <TIM_Base_SetConfig+0x32>
 80063bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80063c0:	d007      	beq.n	80063d2 <TIM_Base_SetConfig+0x32>
 80063c2:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80063c6:	4290      	cmp	r0, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_Base_SetConfig+0x32>
 80063ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063ce:	4290      	cmp	r0, r2
 80063d0:	d103      	bne.n	80063da <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063d6:	68ca      	ldr	r2, [r1, #12]
 80063d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063de:	694a      	ldr	r2, [r1, #20]
 80063e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80063e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e4:	688b      	ldr	r3, [r1, #8]
 80063e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063e8:	680b      	ldr	r3, [r1, #0]
 80063ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063ec:	4b07      	ldr	r3, [pc, #28]	; (800640c <TIM_Base_SetConfig+0x6c>)
 80063ee:	4298      	cmp	r0, r3
 80063f0:	d007      	beq.n	8006402 <TIM_Base_SetConfig+0x62>
 80063f2:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80063f6:	4298      	cmp	r0, r3
 80063f8:	d003      	beq.n	8006402 <TIM_Base_SetConfig+0x62>
 80063fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063fe:	4298      	cmp	r0, r3
 8006400:	d101      	bne.n	8006406 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006406:	2301      	movs	r3, #1
 8006408:	6143      	str	r3, [r0, #20]
}
 800640a:	4770      	bx	lr
 800640c:	40012c00 	.word	0x40012c00

08006410 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006410:	b360      	cbz	r0, 800646c <HAL_TIM_PWM_Init+0x5c>
{
 8006412:	b510      	push	{r4, lr}
 8006414:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006416:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800641a:	b313      	cbz	r3, 8006462 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	2302      	movs	r3, #2
 800641e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006422:	4621      	mov	r1, r4
 8006424:	f851 0b04 	ldr.w	r0, [r1], #4
 8006428:	f7ff ffba 	bl	80063a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642c:	2301      	movs	r3, #1
 800642e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006432:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006436:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800643a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800643e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006442:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006446:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800644e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006452:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006456:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800645a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800645e:	2000      	movs	r0, #0
}
 8006460:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006462:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006466:	f7fb fc77 	bl	8001d58 <HAL_TIM_PWM_MspInit>
 800646a:	e7d7      	b.n	800641c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800646c:	2001      	movs	r0, #1
}
 800646e:	4770      	bx	lr

08006470 <TIM_OC2_SetConfig>:
{
 8006470:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006472:	6a03      	ldr	r3, [r0, #32]
 8006474:	f023 0310 	bic.w	r3, r3, #16
 8006478:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800647a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800647c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800647e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006480:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006484:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006488:	680d      	ldr	r5, [r1, #0]
 800648a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800648e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006492:	688d      	ldr	r5, [r1, #8]
 8006494:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006498:	4d12      	ldr	r5, [pc, #72]	; (80064e4 <TIM_OC2_SetConfig+0x74>)
 800649a:	42a8      	cmp	r0, r5
 800649c:	d019      	beq.n	80064d2 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	4d11      	ldr	r5, [pc, #68]	; (80064e4 <TIM_OC2_SetConfig+0x74>)
 80064a0:	42a8      	cmp	r0, r5
 80064a2:	d007      	beq.n	80064b4 <TIM_OC2_SetConfig+0x44>
 80064a4:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80064a8:	42a8      	cmp	r0, r5
 80064aa:	d003      	beq.n	80064b4 <TIM_OC2_SetConfig+0x44>
 80064ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064b0:	42a8      	cmp	r0, r5
 80064b2:	d107      	bne.n	80064c4 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064b4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064b8:	694d      	ldr	r5, [r1, #20]
 80064ba:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064be:	698d      	ldr	r5, [r1, #24]
 80064c0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80064c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80064c6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80064c8:	684a      	ldr	r2, [r1, #4]
 80064ca:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80064cc:	6203      	str	r3, [r0, #32]
}
 80064ce:	bc30      	pop	{r4, r5}
 80064d0:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80064d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d6:	68cd      	ldr	r5, [r1, #12]
 80064d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80064dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e0:	e7dd      	b.n	800649e <TIM_OC2_SetConfig+0x2e>
 80064e2:	bf00      	nop
 80064e4:	40012c00 	.word	0x40012c00

080064e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80064e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80064ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	f000 8095 	beq.w	800661e <HAL_TIM_PWM_ConfigChannel+0x136>
 80064f4:	4604      	mov	r4, r0
 80064f6:	460d      	mov	r5, r1
 80064f8:	2301      	movs	r3, #1
 80064fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80064fe:	2a14      	cmp	r2, #20
 8006500:	f200 8088 	bhi.w	8006614 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8006504:	e8df f002 	tbb	[pc, r2]
 8006508:	8686860b 	.word	0x8686860b
 800650c:	8686861f 	.word	0x8686861f
 8006510:	86868634 	.word	0x86868634
 8006514:	86868648 	.word	0x86868648
 8006518:	8686865d 	.word	0x8686865d
 800651c:	71          	.byte	0x71
 800651d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800651e:	6800      	ldr	r0, [r0, #0]
 8006520:	f7ff fe3c 	bl	800619c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	6993      	ldr	r3, [r2, #24]
 8006528:	f043 0308 	orr.w	r3, r3, #8
 800652c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	6993      	ldr	r3, [r2, #24]
 8006532:	f023 0304 	bic.w	r3, r3, #4
 8006536:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	6993      	ldr	r3, [r2, #24]
 800653c:	6929      	ldr	r1, [r5, #16]
 800653e:	430b      	orrs	r3, r1
 8006540:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8006542:	2000      	movs	r0, #0
      break;
 8006544:	e067      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006546:	6800      	ldr	r0, [r0, #0]
 8006548:	f7ff ff92 	bl	8006470 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	6993      	ldr	r3, [r2, #24]
 8006550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006554:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	6993      	ldr	r3, [r2, #24]
 800655a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800655e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006560:	6822      	ldr	r2, [r4, #0]
 8006562:	6993      	ldr	r3, [r2, #24]
 8006564:	6929      	ldr	r1, [r5, #16]
 8006566:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800656a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800656c:	2000      	movs	r0, #0
      break;
 800656e:	e052      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006570:	6800      	ldr	r0, [r0, #0]
 8006572:	f7ff fe53 	bl	800621c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	69d3      	ldr	r3, [r2, #28]
 800657a:	f043 0308 	orr.w	r3, r3, #8
 800657e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006580:	6822      	ldr	r2, [r4, #0]
 8006582:	69d3      	ldr	r3, [r2, #28]
 8006584:	f023 0304 	bic.w	r3, r3, #4
 8006588:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	69d3      	ldr	r3, [r2, #28]
 800658e:	6929      	ldr	r1, [r5, #16]
 8006590:	430b      	orrs	r3, r1
 8006592:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8006594:	2000      	movs	r0, #0
      break;
 8006596:	e03e      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006598:	6800      	ldr	r0, [r0, #0]
 800659a:	f7ff fe79 	bl	8006290 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	69d3      	ldr	r3, [r2, #28]
 80065a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065a6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065a8:	6822      	ldr	r2, [r4, #0]
 80065aa:	69d3      	ldr	r3, [r2, #28]
 80065ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	69d3      	ldr	r3, [r2, #28]
 80065b6:	6929      	ldr	r1, [r5, #16]
 80065b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80065bc:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2000      	movs	r0, #0
      break;
 80065c0:	e029      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80065c2:	6800      	ldr	r0, [r0, #0]
 80065c4:	f7ff fe92 	bl	80062ec <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065cc:	f043 0308 	orr.w	r3, r3, #8
 80065d0:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065d6:	f023 0304 	bic.w	r3, r3, #4
 80065da:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065dc:	6822      	ldr	r2, [r4, #0]
 80065de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065e0:	6929      	ldr	r1, [r5, #16]
 80065e2:	430b      	orrs	r3, r1
 80065e4:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80065e6:	2000      	movs	r0, #0
      break;
 80065e8:	e015      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	f7ff feaa 	bl	8006344 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065f0:	6822      	ldr	r2, [r4, #0]
 80065f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80065f8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006602:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006604:	6822      	ldr	r2, [r4, #0]
 8006606:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006608:	6929      	ldr	r1, [r5, #16]
 800660a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800660e:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8006610:	2000      	movs	r0, #0
      break;
 8006612:	e000      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8006614:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006616:	2300      	movs	r3, #0
 8006618:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800661c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800661e:	2002      	movs	r0, #2
 8006620:	e7fc      	b.n	800661c <HAL_TIM_PWM_ConfigChannel+0x134>

08006622 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006622:	f001 011f 	and.w	r1, r1, #31
 8006626:	2301      	movs	r3, #1
 8006628:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800662c:	6a03      	ldr	r3, [r0, #32]
 800662e:	ea23 030c 	bic.w	r3, r3, ip
 8006632:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006634:	6a03      	ldr	r3, [r0, #32]
 8006636:	fa02 f101 	lsl.w	r1, r2, r1
 800663a:	430b      	orrs	r3, r1
 800663c:	6203      	str	r3, [r0, #32]
}
 800663e:	4770      	bx	lr

08006640 <HAL_TIM_PWM_Start>:
{
 8006640:	b510      	push	{r4, lr}
 8006642:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006644:	4608      	mov	r0, r1
 8006646:	bb71      	cbnz	r1, 80066a6 <HAL_TIM_PWM_Start+0x66>
 8006648:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800664c:	b2db      	uxtb	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	bf18      	it	ne
 8006652:	2301      	movne	r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d17b      	bne.n	8006750 <HAL_TIM_PWM_Start+0x110>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006658:	2800      	cmp	r0, #0
 800665a:	d14f      	bne.n	80066fc <HAL_TIM_PWM_Start+0xbc>
 800665c:	2302      	movs	r3, #2
 800665e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006662:	2201      	movs	r2, #1
 8006664:	4601      	mov	r1, r0
 8006666:	6820      	ldr	r0, [r4, #0]
 8006668:	f7ff ffdb 	bl	8006622 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	4a3b      	ldr	r2, [pc, #236]	; (800675c <HAL_TIM_PWM_Start+0x11c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d007      	beq.n	8006684 <HAL_TIM_PWM_Start+0x44>
 8006674:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <HAL_TIM_PWM_Start+0x44>
 800667c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006680:	4293      	cmp	r3, r2
 8006682:	d103      	bne.n	800668c <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_MOE_ENABLE(htim);
 8006684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800668a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	4a33      	ldr	r2, [pc, #204]	; (800675c <HAL_TIM_PWM_Start+0x11c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d04f      	beq.n	8006734 <HAL_TIM_PWM_Start+0xf4>
 8006694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006698:	d04c      	beq.n	8006734 <HAL_TIM_PWM_Start+0xf4>
    __HAL_TIM_ENABLE(htim);
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	f042 0201 	orr.w	r2, r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80066a2:	2000      	movs	r0, #0
 80066a4:	e055      	b.n	8006752 <HAL_TIM_PWM_Start+0x112>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066a6:	2904      	cmp	r1, #4
 80066a8:	d00c      	beq.n	80066c4 <HAL_TIM_PWM_Start+0x84>
 80066aa:	2908      	cmp	r1, #8
 80066ac:	d011      	beq.n	80066d2 <HAL_TIM_PWM_Start+0x92>
 80066ae:	290c      	cmp	r1, #12
 80066b0:	d016      	beq.n	80066e0 <HAL_TIM_PWM_Start+0xa0>
 80066b2:	2910      	cmp	r1, #16
 80066b4:	d01b      	beq.n	80066ee <HAL_TIM_PWM_Start+0xae>
 80066b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	bf18      	it	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	e7c7      	b.n	8006654 <HAL_TIM_PWM_Start+0x14>
 80066c4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	bf18      	it	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	e7c0      	b.n	8006654 <HAL_TIM_PWM_Start+0x14>
 80066d2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	bf18      	it	ne
 80066dc:	2301      	movne	r3, #1
 80066de:	e7b9      	b.n	8006654 <HAL_TIM_PWM_Start+0x14>
 80066e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	bf18      	it	ne
 80066ea:	2301      	movne	r3, #1
 80066ec:	e7b2      	b.n	8006654 <HAL_TIM_PWM_Start+0x14>
 80066ee:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	bf18      	it	ne
 80066f8:	2301      	movne	r3, #1
 80066fa:	e7ab      	b.n	8006654 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066fc:	2804      	cmp	r0, #4
 80066fe:	d009      	beq.n	8006714 <HAL_TIM_PWM_Start+0xd4>
 8006700:	2808      	cmp	r0, #8
 8006702:	d00b      	beq.n	800671c <HAL_TIM_PWM_Start+0xdc>
 8006704:	280c      	cmp	r0, #12
 8006706:	d00d      	beq.n	8006724 <HAL_TIM_PWM_Start+0xe4>
 8006708:	2810      	cmp	r0, #16
 800670a:	d00f      	beq.n	800672c <HAL_TIM_PWM_Start+0xec>
 800670c:	2302      	movs	r3, #2
 800670e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006712:	e7a6      	b.n	8006662 <HAL_TIM_PWM_Start+0x22>
 8006714:	2302      	movs	r3, #2
 8006716:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800671a:	e7a2      	b.n	8006662 <HAL_TIM_PWM_Start+0x22>
 800671c:	2302      	movs	r3, #2
 800671e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006722:	e79e      	b.n	8006662 <HAL_TIM_PWM_Start+0x22>
 8006724:	2302      	movs	r3, #2
 8006726:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800672a:	e79a      	b.n	8006662 <HAL_TIM_PWM_Start+0x22>
 800672c:	2302      	movs	r3, #2
 800672e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006732:	e796      	b.n	8006662 <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006734:	6899      	ldr	r1, [r3, #8]
 8006736:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <HAL_TIM_PWM_Start+0x120>)
 8006738:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800673a:	2a06      	cmp	r2, #6
 800673c:	d00a      	beq.n	8006754 <HAL_TIM_PWM_Start+0x114>
 800673e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006742:	d009      	beq.n	8006758 <HAL_TIM_PWM_Start+0x118>
      __HAL_TIM_ENABLE(htim);
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	f042 0201 	orr.w	r2, r2, #1
 800674a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800674c:	2000      	movs	r0, #0
 800674e:	e000      	b.n	8006752 <HAL_TIM_PWM_Start+0x112>
    return HAL_ERROR;
 8006750:	2001      	movs	r0, #1
}
 8006752:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8006754:	2000      	movs	r0, #0
 8006756:	e7fc      	b.n	8006752 <HAL_TIM_PWM_Start+0x112>
 8006758:	2000      	movs	r0, #0
 800675a:	e7fa      	b.n	8006752 <HAL_TIM_PWM_Start+0x112>
 800675c:	40012c00 	.word	0x40012c00
 8006760:	00010007 	.word	0x00010007

08006764 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006764:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d02b      	beq.n	80067c4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800676c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800676e:	2301      	movs	r3, #1
 8006770:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006774:	2302      	movs	r3, #2
 8006776:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800677a:	6802      	ldr	r2, [r0, #0]
 800677c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800677e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006780:	4d11      	ldr	r5, [pc, #68]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8006782:	42aa      	cmp	r2, r5
 8006784:	d019      	beq.n	80067ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800678a:	680d      	ldr	r5, [r1, #0]
 800678c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800678e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006790:	6803      	ldr	r3, [r0, #0]
 8006792:	4a0d      	ldr	r2, [pc, #52]	; (80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d002      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8006798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679c:	d104      	bne.n	80067a8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800679e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a2:	688a      	ldr	r2, [r1, #8]
 80067a4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067a6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067a8:	2301      	movs	r3, #1
 80067aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067ae:	2300      	movs	r3, #0
 80067b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80067b4:	4618      	mov	r0, r3
}
 80067b6:	bc30      	pop	{r4, r5}
 80067b8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067be:	684d      	ldr	r5, [r1, #4]
 80067c0:	432b      	orrs	r3, r5
 80067c2:	e7e0      	b.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80067c4:	2002      	movs	r0, #2
}
 80067c6:	4770      	bx	lr
 80067c8:	40012c00 	.word	0x40012c00

080067cc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d046      	beq.n	8006862 <HAL_TIMEx_ConfigBreakDeadTime+0x96>
{
 80067d4:	b410      	push	{r4}
  __HAL_LOCK(htim);
 80067d6:	2301      	movs	r3, #1
 80067d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067dc:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e2:	688a      	ldr	r2, [r1, #8]
 80067e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ea:	684a      	ldr	r2, [r1, #4]
 80067ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067f2:	680a      	ldr	r2, [r1, #0]
 80067f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067fa:	690a      	ldr	r2, [r1, #16]
 80067fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006802:	694a      	ldr	r2, [r1, #20]
 8006804:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800680a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800680c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800680e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006812:	698a      	ldr	r2, [r1, #24]
 8006814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006818:	6802      	ldr	r2, [r0, #0]
 800681a:	4c13      	ldr	r4, [pc, #76]	; (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 800681c:	42a2      	cmp	r2, r4
 800681e:	d009      	beq.n	8006834 <HAL_TIMEx_ConfigBreakDeadTime+0x68>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006820:	4c11      	ldr	r4, [pc, #68]	; (8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8006822:	42a2      	cmp	r2, r4
 8006824:	d00b      	beq.n	800683e <HAL_TIMEx_ConfigBreakDeadTime+0x72>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006826:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006828:	2300      	movs	r3, #0
 800682a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800682e:	4618      	mov	r0, r3
}
 8006830:	bc10      	pop	{r4}
 8006832:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006838:	69cc      	ldr	r4, [r1, #28]
 800683a:	4323      	orrs	r3, r4
 800683c:	e7f0      	b.n	8006820 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800683e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006842:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8006844:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006848:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800684c:	6a0c      	ldr	r4, [r1, #32]
 800684e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006850:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006854:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006856:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006858:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800685c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800685e:	430b      	orrs	r3, r1
 8006860:	e7e1      	b.n	8006826 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8006862:	2002      	movs	r0, #2
}
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40012c00 	.word	0x40012c00

0800686c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800686c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	e852 3f00 	ldrex	r3, [r2]
 8006872:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	e842 3100 	strex	r1, r3, [r2]
 800687a:	2900      	cmp	r1, #0
 800687c:	d1f6      	bne.n	800686c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800687e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	f102 0308 	add.w	r3, r2, #8
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	3208      	adds	r2, #8
 800688e:	e842 3100 	strex	r1, r3, [r2]
 8006892:	2900      	cmp	r1, #0
 8006894:	d1f3      	bne.n	800687e <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006896:	2320      	movs	r3, #32
 8006898:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 800689c:	4770      	bx	lr

0800689e <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800689e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a0:	e852 3f00 	ldrex	r3, [r2]
 80068a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	e842 3100 	strex	r1, r3, [r2]
 80068ac:	2900      	cmp	r1, #0
 80068ae:	d1f6      	bne.n	800689e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	f102 0308 	add.w	r3, r2, #8
 80068b6:	e853 3f00 	ldrex	r3, [r3]
 80068ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	3208      	adds	r2, #8
 80068c4:	e842 3100 	strex	r1, r3, [r2]
 80068c8:	2900      	cmp	r1, #0
 80068ca:	d1f1      	bne.n	80068b0 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068cc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d006      	beq.n	80068e0 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068d2:	2320      	movs	r3, #32
 80068d4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d8:	2300      	movs	r3, #0
 80068da:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068dc:	6703      	str	r3, [r0, #112]	; 0x70
}
 80068de:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	e852 3f00 	ldrex	r3, [r2]
 80068e6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	e842 3100 	strex	r1, r3, [r2]
 80068ee:	2900      	cmp	r1, #0
 80068f0:	d1f6      	bne.n	80068e0 <UART_EndRxTransfer+0x42>
 80068f2:	e7ee      	b.n	80068d2 <UART_EndRxTransfer+0x34>

080068f4 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 80068f4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d14c      	bne.n	8006996 <HAL_UART_Transmit_DMA+0xa2>
{
 80068fc:	b510      	push	{r4, lr}
 80068fe:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006900:	2900      	cmp	r1, #0
 8006902:	d04a      	beq.n	800699a <HAL_UART_Transmit_DMA+0xa6>
 8006904:	2a00      	cmp	r2, #0
 8006906:	d04a      	beq.n	800699e <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8006908:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800690c:	2b01      	cmp	r3, #1
 800690e:	d048      	beq.n	80069a2 <HAL_UART_Transmit_DMA+0xae>
 8006910:	2301      	movs	r3, #1
 8006912:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006916:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006918:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800691c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	2300      	movs	r3, #0
 8006922:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006926:	2321      	movs	r3, #33	; 0x21
 8006928:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 800692c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800692e:	b1f3      	cbz	r3, 800696e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006930:	491d      	ldr	r1, [pc, #116]	; (80069a8 <HAL_UART_Transmit_DMA+0xb4>)
 8006932:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006934:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006936:	491d      	ldr	r1, [pc, #116]	; (80069ac <HAL_UART_Transmit_DMA+0xb8>)
 8006938:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800693a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800693c:	491c      	ldr	r1, [pc, #112]	; (80069b0 <HAL_UART_Transmit_DMA+0xbc>)
 800693e:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006940:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006942:	2100      	movs	r1, #0
 8006944:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006946:	6801      	ldr	r1, [r0, #0]
 8006948:	4613      	mov	r3, r2
 800694a:	f101 0228 	add.w	r2, r1, #40	; 0x28
 800694e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006950:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8006952:	f7fd f9ef 	bl	8003d34 <HAL_DMA_Start_IT>
 8006956:	b150      	cbz	r0, 800696e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006958:	2310      	movs	r3, #16
 800695a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800695e:	2300      	movs	r3, #0
 8006960:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8006964:	2320      	movs	r3, #32
 8006966:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800696a:	2001      	movs	r0, #1
 800696c:	e012      	b.n	8006994 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	2240      	movs	r2, #64	; 0x40
 8006972:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006974:	2300      	movs	r3, #0
 8006976:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800697a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	f102 0308 	add.w	r3, r2, #8
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	3208      	adds	r2, #8
 800698a:	e842 3100 	strex	r1, r3, [r2]
 800698e:	2900      	cmp	r1, #0
 8006990:	d1f3      	bne.n	800697a <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8006992:	2000      	movs	r0, #0
}
 8006994:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006996:	2002      	movs	r0, #2
}
 8006998:	4770      	bx	lr
      return HAL_ERROR;
 800699a:	2001      	movs	r0, #1
 800699c:	e7fa      	b.n	8006994 <HAL_UART_Transmit_DMA+0xa0>
 800699e:	2001      	movs	r0, #1
 80069a0:	e7f8      	b.n	8006994 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 80069a2:	2002      	movs	r0, #2
 80069a4:	e7f6      	b.n	8006994 <HAL_UART_Transmit_DMA+0xa0>
 80069a6:	bf00      	nop
 80069a8:	080069b5 	.word	0x080069b5
 80069ac:	08006a23 	.word	0x08006a23
 80069b0:	08006a2f 	.word	0x08006a2f

080069b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069b4:	b508      	push	{r3, lr}
 80069b6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069b8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f013 0f20 	tst.w	r3, #32
 80069c2:	d118      	bne.n	80069f6 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069ca:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	f102 0308 	add.w	r3, r2, #8
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	3208      	adds	r2, #8
 80069da:	e842 3100 	strex	r1, r3, [r2]
 80069de:	2900      	cmp	r1, #0
 80069e0:	d1f3      	bne.n	80069ca <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	e852 3f00 	ldrex	r3, [r2]
 80069e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	e842 3100 	strex	r1, r3, [r2]
 80069f0:	2900      	cmp	r1, #0
 80069f2:	d1f6      	bne.n	80069e2 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80069f4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80069f6:	f7fb fccd 	bl	8002394 <HAL_UART_TxCpltCallback>
}
 80069fa:	e7fb      	b.n	80069f4 <UART_DMATransmitCplt+0x40>

080069fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069fc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069fe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	e852 3f00 	ldrex	r3, [r2]
 8006a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	e842 3100 	strex	r1, r3, [r2]
 8006a0c:	2900      	cmp	r1, #0
 8006a0e:	d1f6      	bne.n	80069fe <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a10:	2320      	movs	r3, #32
 8006a12:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a1a:	f7fb fcbb 	bl	8002394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a1e:	bd08      	pop	{r3, pc}

08006a20 <HAL_UART_TxHalfCpltCallback>:
}
 8006a20:	4770      	bx	lr

08006a22 <UART_DMATxHalfCplt>:
{
 8006a22:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006a24:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006a26:	f7ff fffb 	bl	8006a20 <HAL_UART_TxHalfCpltCallback>
}
 8006a2a:	bd08      	pop	{r3, pc}

08006a2c <HAL_UART_ErrorCallback>:
}
 8006a2c:	4770      	bx	lr

08006a2e <UART_DMAError>:
{
 8006a2e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a30:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a32:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a36:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a42:	d001      	beq.n	8006a48 <UART_DMAError+0x1a>
 8006a44:	2a21      	cmp	r2, #33	; 0x21
 8006a46:	d010      	beq.n	8006a6a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006a50:	d001      	beq.n	8006a56 <UART_DMAError+0x28>
 8006a52:	2d22      	cmp	r5, #34	; 0x22
 8006a54:	d010      	beq.n	8006a78 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a56:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006a5a:	f043 0310 	orr.w	r3, r3, #16
 8006a5e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff ffe2 	bl	8006a2c <HAL_UART_ErrorCallback>
}
 8006a68:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006a70:	4620      	mov	r0, r4
 8006a72:	f7ff fefb 	bl	800686c <UART_EndTxTransfer>
 8006a76:	e7e7      	b.n	8006a48 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f7ff ff0d 	bl	800689e <UART_EndRxTransfer>
 8006a84:	e7e7      	b.n	8006a56 <UART_DMAError+0x28>

08006a86 <UART_DMAAbortOnError>:
{
 8006a86:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a88:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a90:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006a94:	f7ff ffca 	bl	8006a2c <HAL_UART_ErrorCallback>
}
 8006a98:	bd08      	pop	{r3, pc}

08006a9a <HAL_UARTEx_RxEventCallback>:
}
 8006a9a:	4770      	bx	lr

08006a9c <HAL_UART_IRQHandler>:
{
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006aa0:	6801      	ldr	r1, [r0, #0]
 8006aa2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aa6:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006aa8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006aac:	401a      	ands	r2, r3
 8006aae:	d108      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ab0:	f013 0f20 	tst.w	r3, #32
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ab6:	f010 0f20 	tst.w	r0, #32
 8006aba:	d134      	bne.n	8006b26 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006abc:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006ac0:	d131      	bne.n	8006b26 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8006ac2:	b12a      	cbz	r2, 8006ad0 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ac4:	4a95      	ldr	r2, [pc, #596]	; (8006d1c <HAL_UART_IRQHandler+0x280>)
 8006ac6:	402a      	ands	r2, r5
 8006ac8:	d133      	bne.n	8006b32 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006aca:	4e95      	ldr	r6, [pc, #596]	; (8006d20 <HAL_UART_IRQHandler+0x284>)
 8006acc:	4230      	tst	r0, r6
 8006ace:	d130      	bne.n	8006b32 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006ad2:	2a01      	cmp	r2, #1
 8006ad4:	f000 80c3 	beq.w	8006c5e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ad8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006adc:	d003      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x4a>
 8006ade:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006ae2:	f040 815b 	bne.w	8006d9c <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ae6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006aea:	d007      	beq.n	8006afc <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006aec:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006af0:	f040 815b 	bne.w	8006daa <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006af4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8006af8:	f040 8157 	bne.w	8006daa <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006afc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006b00:	d003      	beq.n	8006b0a <HAL_UART_IRQHandler+0x6e>
 8006b02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b06:	f040 8157 	bne.w	8006db8 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b0a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006b0e:	d003      	beq.n	8006b18 <HAL_UART_IRQHandler+0x7c>
 8006b10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b14:	f040 8154 	bne.w	8006dc0 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b18:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006b1c:	d002      	beq.n	8006b24 <HAL_UART_IRQHandler+0x88>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	f2c0 8152 	blt.w	8006dc8 <HAL_UART_IRQHandler+0x32c>
}
 8006b24:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8006b26:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0fb      	beq.n	8006b24 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4798      	blx	r3
      return;
 8006b30:	e7f8      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b32:	f013 0f01 	tst.w	r3, #1
 8006b36:	d009      	beq.n	8006b4c <HAL_UART_IRQHandler+0xb0>
 8006b38:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006b3c:	d006      	beq.n	8006b4c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b3e:	2601      	movs	r6, #1
 8006b40:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b42:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006b46:	4331      	orrs	r1, r6
 8006b48:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b4c:	f013 0f02 	tst.w	r3, #2
 8006b50:	d00b      	beq.n	8006b6a <HAL_UART_IRQHandler+0xce>
 8006b52:	f015 0f01 	tst.w	r5, #1
 8006b56:	d008      	beq.n	8006b6a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b58:	6821      	ldr	r1, [r4, #0]
 8006b5a:	2602      	movs	r6, #2
 8006b5c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b5e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006b62:	f041 0104 	orr.w	r1, r1, #4
 8006b66:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b6a:	f013 0f04 	tst.w	r3, #4
 8006b6e:	d00b      	beq.n	8006b88 <HAL_UART_IRQHandler+0xec>
 8006b70:	f015 0f01 	tst.w	r5, #1
 8006b74:	d008      	beq.n	8006b88 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b76:	6821      	ldr	r1, [r4, #0]
 8006b78:	2604      	movs	r6, #4
 8006b7a:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b7c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8006b80:	f041 0102 	orr.w	r1, r1, #2
 8006b84:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b88:	f013 0f08 	tst.w	r3, #8
 8006b8c:	d00b      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b8e:	f010 0f20 	tst.w	r0, #32
 8006b92:	d100      	bne.n	8006b96 <HAL_UART_IRQHandler+0xfa>
 8006b94:	b13a      	cbz	r2, 8006ba6 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	2108      	movs	r1, #8
 8006b9a:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b9c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ba6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006baa:	d00c      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x12a>
 8006bac:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006bb0:	d009      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006bb8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bba:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006bbe:	f042 0220 	orr.w	r2, r2, #32
 8006bc2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bc6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8006bca:	2a00      	cmp	r2, #0
 8006bcc:	d0aa      	beq.n	8006b24 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bce:	f013 0f20 	tst.w	r3, #32
 8006bd2:	d009      	beq.n	8006be8 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bd4:	f010 0f20 	tst.w	r0, #32
 8006bd8:	d102      	bne.n	8006be0 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bda:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006bde:	d003      	beq.n	8006be8 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8006be0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006be2:	b10b      	cbz	r3, 8006be8 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8006be4:	4620      	mov	r0, r4
 8006be6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006be8:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006bf4:	d102      	bne.n	8006bfc <HAL_UART_IRQHandler+0x160>
 8006bf6:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006bfa:	d029      	beq.n	8006c50 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f7ff fe4e 	bl	800689e <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c0a:	d01d      	beq.n	8006c48 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c0c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	f102 0308 	add.w	r3, r2, #8
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	3208      	adds	r2, #8
 8006c1c:	e842 3100 	strex	r1, r3, [r2]
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d1f3      	bne.n	8006c0c <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8006c24:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c26:	b15b      	cbz	r3, 8006c40 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c28:	4a3e      	ldr	r2, [pc, #248]	; (8006d24 <HAL_UART_IRQHandler+0x288>)
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c2c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006c2e:	f7fd f907 	bl	8003e40 <HAL_DMA_Abort_IT>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f43f af76 	beq.w	8006b24 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c38:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006c3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006c3c:	4798      	blx	r3
 8006c3e:	e771      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8006c40:	4620      	mov	r0, r4
 8006c42:	f7ff fef3 	bl	8006a2c <HAL_UART_ErrorCallback>
 8006c46:	e76d      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f7ff feef 	bl	8006a2c <HAL_UART_ErrorCallback>
 8006c4e:	e769      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8006c50:	4620      	mov	r0, r4
 8006c52:	f7ff feeb 	bl	8006a2c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c56:	2300      	movs	r3, #0
 8006c58:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8006c5c:	e762      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006c5e:	f013 0f10 	tst.w	r3, #16
 8006c62:	f43f af39 	beq.w	8006ad8 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006c66:	f010 0f10 	tst.w	r0, #16
 8006c6a:	f43f af35 	beq.w	8006ad8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c6e:	2310      	movs	r3, #16
 8006c70:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c7a:	d055      	beq.n	8006d28 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c7c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	f43f af4d 	beq.w	8006b24 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006c8a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006c8e:	4299      	cmp	r1, r3
 8006c90:	f67f af48 	bls.w	8006b24 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8006c94:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c98:	6813      	ldr	r3, [r2, #0]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f013 0f20 	tst.w	r3, #32
 8006ca0:	d131      	bne.n	8006d06 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ca2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	e852 3f00 	ldrex	r3, [r2]
 8006ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	e842 3100 	strex	r1, r3, [r2]
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	d1f6      	bne.n	8006ca2 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	f102 0308 	add.w	r3, r2, #8
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	3208      	adds	r2, #8
 8006cc4:	e842 3100 	strex	r1, r3, [r2]
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	d1f3      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ccc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	f102 0308 	add.w	r3, r2, #8
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	3208      	adds	r2, #8
 8006cdc:	e842 3100 	strex	r1, r3, [r2]
 8006ce0:	2900      	cmp	r1, #0
 8006ce2:	d1f3      	bne.n	8006ccc <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8006ce4:	2320      	movs	r3, #32
 8006ce6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	2300      	movs	r3, #0
 8006cec:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	e852 3f00 	ldrex	r3, [r2]
 8006cf4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	e842 3100 	strex	r1, r3, [r2]
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d1f6      	bne.n	8006cee <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d00:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006d02:	f7fd f863 	bl	8003dcc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d06:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006d0a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	1ac9      	subs	r1, r1, r3
 8006d12:	b289      	uxth	r1, r1
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7ff fec0 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
      return;
 8006d1a:	e703      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
 8006d1c:	10000001 	.word	0x10000001
 8006d20:	04000120 	.word	0x04000120
 8006d24:	08006a87 	.word	0x08006a87
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d28:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8006d2c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	1ac9      	subs	r1, r1, r3
 8006d34:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8006d36:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f43f aef1 	beq.w	8006b24 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8006d42:	2900      	cmp	r1, #0
 8006d44:	f43f aeee 	beq.w	8006b24 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d48:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4a:	e852 3f00 	ldrex	r3, [r2]
 8006d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	e842 3000 	strex	r0, r3, [r2]
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d1f6      	bne.n	8006d48 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	f102 0308 	add.w	r3, r2, #8
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	3208      	adds	r2, #8
 8006d6e:	e842 3000 	strex	r0, r3, [r2]
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d1f1      	bne.n	8006d5a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8006d76:	2320      	movs	r3, #32
 8006d78:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8006d80:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d82:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	e852 3f00 	ldrex	r3, [r2]
 8006d88:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	e842 3000 	strex	r0, r3, [r2]
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d1f6      	bne.n	8006d82 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d94:	4620      	mov	r0, r4
 8006d96:	f7ff fe80 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
      return;
 8006d9a:	e6c3      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006da0:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006da2:	4620      	mov	r0, r4
 8006da4:	f000 fe1c 	bl	80079e0 <HAL_UARTEx_WakeupCallback>
    return;
 8006da8:	e6bc      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8006daa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f43f aeb9 	beq.w	8006b24 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8006db2:	4620      	mov	r0, r4
 8006db4:	4798      	blx	r3
    return;
 8006db6:	e6b5      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8006db8:	4620      	mov	r0, r4
 8006dba:	f7ff fe1f 	bl	80069fc <UART_EndTransmit_IT>
    return;
 8006dbe:	e6b1      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f000 fe0f 	bl	80079e4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8006dc6:	e6ad      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 fe0a 	bl	80079e2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8006dce:	e6a9      	b.n	8006b24 <HAL_UART_IRQHandler+0x88>

08006dd0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006dd0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8006dd2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dd6:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006dda:	2a22      	cmp	r2, #34	; 0x22
 8006ddc:	d005      	beq.n	8006dea <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006dde:	6802      	ldr	r2, [r0, #0]
 8006de0:	6993      	ldr	r3, [r2, #24]
 8006de2:	f043 0308 	orr.w	r3, r3, #8
 8006de6:	6193      	str	r3, [r2, #24]
  }
}
 8006de8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dea:	6802      	ldr	r2, [r0, #0]
 8006dec:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006df2:	400b      	ands	r3, r1
 8006df4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006df6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006df8:	3301      	adds	r3, #1
 8006dfa:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006dfc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8006e0a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e9      	bne.n	8006de8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e14:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	e852 3f00 	ldrex	r3, [r2]
 8006e1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	e842 3100 	strex	r1, r3, [r2]
 8006e22:	2900      	cmp	r1, #0
 8006e24:	d1f6      	bne.n	8006e14 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	f102 0308 	add.w	r3, r2, #8
 8006e2c:	e853 3f00 	ldrex	r3, [r3]
 8006e30:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	3208      	adds	r2, #8
 8006e36:	e842 3100 	strex	r1, r3, [r2]
 8006e3a:	2900      	cmp	r1, #0
 8006e3c:	d1f3      	bne.n	8006e26 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8006e3e:	2320      	movs	r3, #32
 8006e40:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e48:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d116      	bne.n	8006e7c <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e52:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	e852 3f00 	ldrex	r3, [r2]
 8006e58:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	e842 3100 	strex	r1, r3, [r2]
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d1f6      	bne.n	8006e52 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e64:	6803      	ldr	r3, [r0, #0]
 8006e66:	69da      	ldr	r2, [r3, #28]
 8006e68:	f012 0f10 	tst.w	r2, #16
 8006e6c:	d001      	beq.n	8006e72 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e6e:	2210      	movs	r2, #16
 8006e70:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e72:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006e76:	f7ff fe10 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
 8006e7a:	e7b5      	b.n	8006de8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006e7c:	f7fb fa9a 	bl	80023b4 <HAL_UART_RxCpltCallback>
 8006e80:	e7b2      	b.n	8006de8 <UART_RxISR_8BIT+0x18>

08006e82 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e82:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e84:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e88:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006e8c:	2b22      	cmp	r3, #34	; 0x22
 8006e8e:	d005      	beq.n	8006e9c <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e90:	6802      	ldr	r2, [r0, #0]
 8006e92:	6993      	ldr	r3, [r2, #24]
 8006e94:	f043 0308 	orr.w	r3, r3, #8
 8006e98:	6193      	str	r3, [r2, #24]
  }
}
 8006e9a:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e9c:	6803      	ldr	r3, [r0, #0]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ea0:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8006ea6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8006eac:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8006eba:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1ea      	bne.n	8006e9a <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ec4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	e852 3f00 	ldrex	r3, [r2]
 8006eca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	e842 3100 	strex	r1, r3, [r2]
 8006ed2:	2900      	cmp	r1, #0
 8006ed4:	d1f6      	bne.n	8006ec4 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	f102 0308 	add.w	r3, r2, #8
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	3208      	adds	r2, #8
 8006ee6:	e842 3100 	strex	r1, r3, [r2]
 8006eea:	2900      	cmp	r1, #0
 8006eec:	d1f3      	bne.n	8006ed6 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006eee:	2320      	movs	r3, #32
 8006ef0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d116      	bne.n	8006f2c <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efe:	2300      	movs	r3, #0
 8006f00:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f02:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	e852 3f00 	ldrex	r3, [r2]
 8006f08:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	e842 3100 	strex	r1, r3, [r2]
 8006f10:	2900      	cmp	r1, #0
 8006f12:	d1f6      	bne.n	8006f02 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f14:	6803      	ldr	r3, [r0, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	f012 0f10 	tst.w	r2, #16
 8006f1c:	d001      	beq.n	8006f22 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f1e:	2210      	movs	r2, #16
 8006f20:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f22:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8006f26:	f7ff fdb8 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
 8006f2a:	e7b6      	b.n	8006e9a <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8006f2c:	f7fb fa42 	bl	80023b4 <HAL_UART_RxCpltCallback>
 8006f30:	e7b3      	b.n	8006e9a <UART_RxISR_16BIT+0x18>
	...

08006f34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006f38:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f3c:	6803      	ldr	r3, [r0, #0]
 8006f3e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f40:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f44:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f48:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006f4c:	2a22      	cmp	r2, #34	; 0x22
 8006f4e:	d005      	beq.n	8006f5c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	f042 0208 	orr.w	r2, r2, #8
 8006f56:	619a      	str	r2, [r3, #24]
  }
}
 8006f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006f5e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f62:	e008      	b.n	8006f76 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f64:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d14c      	bne.n	8007006 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8006f6c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d04e      	beq.n	8007014 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f76:	2f00      	cmp	r7, #0
 8006f78:	f000 8087 	beq.w	800708a <UART_RxISR_8BIT_FIFOEN+0x156>
 8006f7c:	f015 0f20 	tst.w	r5, #32
 8006f80:	f000 8083 	beq.w	800708a <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f88:	b2f3      	uxtb	r3, r6
 8006f8a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006f8c:	400b      	ands	r3, r1
 8006f8e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8006f90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f92:	3301      	adds	r3, #1
 8006f94:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006f96:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fa8:	f015 0f07 	tst.w	r5, #7
 8006fac:	d0de      	beq.n	8006f6c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fae:	f015 0f01 	tst.w	r5, #1
 8006fb2:	d009      	beq.n	8006fc8 <UART_RxISR_8BIT_FIFOEN+0x94>
 8006fb4:	f419 7f80 	tst.w	r9, #256	; 0x100
 8006fb8:	d006      	beq.n	8006fc8 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fba:	2201      	movs	r2, #1
 8006fbc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fbe:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fc8:	f015 0f02 	tst.w	r5, #2
 8006fcc:	d00b      	beq.n	8006fe6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006fce:	f018 0f01 	tst.w	r8, #1
 8006fd2:	d008      	beq.n	8006fe6 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fda:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006fde:	f043 0304 	orr.w	r3, r3, #4
 8006fe2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fe6:	f015 0f04 	tst.w	r5, #4
 8006fea:	d0bb      	beq.n	8006f64 <UART_RxISR_8BIT_FIFOEN+0x30>
 8006fec:	f018 0f01 	tst.w	r8, #1
 8006ff0:	d0b8      	beq.n	8006f64 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	2204      	movs	r2, #4
 8006ff6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ff8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8006ffc:	f043 0302 	orr.w	r3, r3, #2
 8007000:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007004:	e7ae      	b.n	8006f64 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007006:	4620      	mov	r0, r4
 8007008:	f7ff fd10 	bl	8006a2c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700c:	2300      	movs	r3, #0
 800700e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8007012:	e7ab      	b.n	8006f6c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007014:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007016:	e852 3f00 	ldrex	r3, [r2]
 800701a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	e842 3100 	strex	r1, r3, [r2]
 8007022:	2900      	cmp	r1, #0
 8007024:	d1f6      	bne.n	8007014 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007026:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	f102 0308 	add.w	r3, r2, #8
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007034:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	3208      	adds	r2, #8
 800703a:	e842 3100 	strex	r1, r3, [r2]
 800703e:	2900      	cmp	r1, #0
 8007040:	d1f1      	bne.n	8007026 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007042:	2320      	movs	r3, #32
 8007044:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8007048:	2300      	movs	r3, #0
 800704a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800704c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d003      	beq.n	800705a <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8007052:	4620      	mov	r0, r4
 8007054:	f7fb f9ae 	bl	80023b4 <HAL_UART_RxCpltCallback>
 8007058:	e78d      	b.n	8006f76 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705a:	2300      	movs	r3, #0
 800705c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	e852 3f00 	ldrex	r3, [r2]
 8007064:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	e842 3100 	strex	r1, r3, [r2]
 800706c:	2900      	cmp	r1, #0
 800706e:	d1f6      	bne.n	800705e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	f012 0f10 	tst.w	r2, #16
 8007078:	d001      	beq.n	800707e <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800707a:	2210      	movs	r2, #16
 800707c:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800707e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007082:	4620      	mov	r0, r4
 8007084:	f7ff fd09 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
 8007088:	e775      	b.n	8006f76 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800708a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800708e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007090:	2b00      	cmp	r3, #0
 8007092:	f43f af61 	beq.w	8006f58 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007096:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800709a:	429a      	cmp	r2, r3
 800709c:	f67f af5c 	bls.w	8006f58 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	f102 0308 	add.w	r3, r2, #8
 80070a6:	e853 3f00 	ldrex	r3, [r3]
 80070aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ae:	3208      	adds	r2, #8
 80070b0:	e842 3100 	strex	r1, r3, [r2]
 80070b4:	2900      	cmp	r1, #0
 80070b6:	d1f3      	bne.n	80070a0 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 80070ba:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070bc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	e852 3f00 	ldrex	r3, [r2]
 80070c2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	e842 3100 	strex	r1, r3, [r2]
 80070ca:	2900      	cmp	r1, #0
 80070cc:	d1f6      	bne.n	80070bc <UART_RxISR_8BIT_FIFOEN+0x188>
 80070ce:	e743      	b.n	8006f58 <UART_RxISR_8BIT_FIFOEN+0x24>
 80070d0:	08006dd1 	.word	0x08006dd1

080070d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80070d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80070d8:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070dc:	6803      	ldr	r3, [r0, #0]
 80070de:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070e0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070e4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070e8:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80070ec:	2a22      	cmp	r2, #34	; 0x22
 80070ee:	d005      	beq.n	80070fc <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	f042 0208 	orr.w	r2, r2, #8
 80070f6:	619a      	str	r2, [r3, #24]
  }
}
 80070f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070fc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80070fe:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007102:	e008      	b.n	8007116 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007104:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d14b      	bne.n	80071a4 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800710c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d04d      	beq.n	80071b2 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007116:	2f00      	cmp	r7, #0
 8007118:	f000 8086 	beq.w	8007228 <UART_RxISR_16BIT_FIFOEN+0x154>
 800711c:	f015 0f20 	tst.w	r5, #32
 8007120:	f000 8082 	beq.w	8007228 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007128:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800712a:	4033      	ands	r3, r6
 800712c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800712e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007130:	3302      	adds	r3, #2
 8007132:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8007134:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29b      	uxth	r3, r3
 800713e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007146:	f015 0f07 	tst.w	r5, #7
 800714a:	d0df      	beq.n	800710c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800714c:	f015 0f01 	tst.w	r5, #1
 8007150:	d009      	beq.n	8007166 <UART_RxISR_16BIT_FIFOEN+0x92>
 8007152:	f419 7f80 	tst.w	r9, #256	; 0x100
 8007156:	d006      	beq.n	8007166 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007158:	2201      	movs	r2, #1
 800715a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800715c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007166:	f015 0f02 	tst.w	r5, #2
 800716a:	d00b      	beq.n	8007184 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800716c:	f018 0f01 	tst.w	r8, #1
 8007170:	d008      	beq.n	8007184 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	2202      	movs	r2, #2
 8007176:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007178:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800717c:	f043 0304 	orr.w	r3, r3, #4
 8007180:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007184:	f015 0f04 	tst.w	r5, #4
 8007188:	d0bc      	beq.n	8007104 <UART_RxISR_16BIT_FIFOEN+0x30>
 800718a:	f018 0f01 	tst.w	r8, #1
 800718e:	d0b9      	beq.n	8007104 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	2204      	movs	r2, #4
 8007194:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007196:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800719a:	f043 0302 	orr.w	r3, r3, #2
 800719e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80071a2:	e7af      	b.n	8007104 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80071a4:	4620      	mov	r0, r4
 80071a6:	f7ff fc41 	bl	8006a2c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80071b0:	e7ac      	b.n	800710c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	e852 3f00 	ldrex	r3, [r2]
 80071b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071bc:	e842 3100 	strex	r1, r3, [r2]
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d1f6      	bne.n	80071b2 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	f102 0308 	add.w	r3, r2, #8
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071d2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	3208      	adds	r2, #8
 80071d8:	e842 3100 	strex	r1, r3, [r2]
 80071dc:	2900      	cmp	r1, #0
 80071de:	d1f1      	bne.n	80071c4 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80071e0:	2320      	movs	r3, #32
 80071e2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d003      	beq.n	80071f8 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 80071f0:	4620      	mov	r0, r4
 80071f2:	f7fb f8df 	bl	80023b4 <HAL_UART_RxCpltCallback>
 80071f6:	e78e      	b.n	8007116 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f8:	2300      	movs	r3, #0
 80071fa:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	e852 3f00 	ldrex	r3, [r2]
 8007202:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	e842 3100 	strex	r1, r3, [r2]
 800720a:	2900      	cmp	r1, #0
 800720c:	d1f6      	bne.n	80071fc <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	69da      	ldr	r2, [r3, #28]
 8007212:	f012 0f10 	tst.w	r2, #16
 8007216:	d001      	beq.n	800721c <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007218:	2210      	movs	r2, #16
 800721a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800721c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007220:	4620      	mov	r0, r4
 8007222:	f7ff fc3a 	bl	8006a9a <HAL_UARTEx_RxEventCallback>
 8007226:	e776      	b.n	8007116 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8007228:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800722c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800722e:	2b00      	cmp	r3, #0
 8007230:	f43f af62 	beq.w	80070f8 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007234:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007238:	429a      	cmp	r2, r3
 800723a:	f67f af5d 	bls.w	80070f8 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800723e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	f102 0308 	add.w	r3, r2, #8
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	3208      	adds	r2, #8
 800724e:	e842 3100 	strex	r1, r3, [r2]
 8007252:	2900      	cmp	r1, #0
 8007254:	d1f3      	bne.n	800723e <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8007256:	4b06      	ldr	r3, [pc, #24]	; (8007270 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8007258:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800725a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725c:	e852 3f00 	ldrex	r3, [r2]
 8007260:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	e842 3100 	strex	r1, r3, [r2]
 8007268:	2900      	cmp	r1, #0
 800726a:	d1f6      	bne.n	800725a <UART_RxISR_16BIT_FIFOEN+0x186>
 800726c:	e744      	b.n	80070f8 <UART_RxISR_16BIT_FIFOEN+0x24>
 800726e:	bf00      	nop
 8007270:	08006e83 	.word	0x08006e83

08007274 <UART_SetConfig>:
{
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007278:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800727a:	6883      	ldr	r3, [r0, #8]
 800727c:	6902      	ldr	r2, [r0, #16]
 800727e:	4313      	orrs	r3, r2
 8007280:	6942      	ldr	r2, [r0, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	69c2      	ldr	r2, [r0, #28]
 8007286:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007288:	6808      	ldr	r0, [r1, #0]
 800728a:	4a9d      	ldr	r2, [pc, #628]	; (8007500 <UART_SetConfig+0x28c>)
 800728c:	4002      	ands	r2, r0
 800728e:	4313      	orrs	r3, r2
 8007290:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007292:	6822      	ldr	r2, [r4, #0]
 8007294:	6853      	ldr	r3, [r2, #4]
 8007296:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800729a:	68e1      	ldr	r1, [r4, #12]
 800729c:	430b      	orrs	r3, r1
 800729e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072a0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	4b97      	ldr	r3, [pc, #604]	; (8007504 <UART_SetConfig+0x290>)
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d001      	beq.n	80072ae <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80072aa:	6a23      	ldr	r3, [r4, #32]
 80072ac:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072ae:	6893      	ldr	r3, [r2, #8]
 80072b0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072b4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072bc:	6822      	ldr	r2, [r4, #0]
 80072be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80072c0:	f023 030f 	bic.w	r3, r3, #15
 80072c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072c6:	430b      	orrs	r3, r1
 80072c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	4a8e      	ldr	r2, [pc, #568]	; (8007508 <UART_SetConfig+0x294>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d01c      	beq.n	800730c <UART_SetConfig+0x98>
 80072d2:	4a8e      	ldr	r2, [pc, #568]	; (800750c <UART_SetConfig+0x298>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d031      	beq.n	800733c <UART_SetConfig+0xc8>
 80072d8:	4a8a      	ldr	r2, [pc, #552]	; (8007504 <UART_SetConfig+0x290>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d04b      	beq.n	8007376 <UART_SetConfig+0x102>
 80072de:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80072e0:	4988      	ldr	r1, [pc, #544]	; (8007504 <UART_SetConfig+0x290>)
 80072e2:	428b      	cmp	r3, r1
 80072e4:	d068      	beq.n	80073b8 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072e6:	69e0      	ldr	r0, [r4, #28]
 80072e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80072ec:	f000 80a5 	beq.w	800743a <UART_SetConfig+0x1c6>
    switch (clocksource)
 80072f0:	2a08      	cmp	r2, #8
 80072f2:	f200 811f 	bhi.w	8007534 <UART_SetConfig+0x2c0>
 80072f6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80072fa:	00d3      	.short	0x00d3
 80072fc:	00d100f5 	.word	0x00d100f5
 8007300:	00f8011d 	.word	0x00f8011d
 8007304:	011d011d 	.word	0x011d011d
 8007308:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800730c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007310:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007314:	f002 0203 	and.w	r2, r2, #3
 8007318:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800731c:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8007320:	2a03      	cmp	r2, #3
 8007322:	d809      	bhi.n	8007338 <UART_SetConfig+0xc4>
 8007324:	e8df f002 	tbb	[pc, r2]
 8007328:	063c0402 	.word	0x063c0402
 800732c:	2201      	movs	r2, #1
 800732e:	e7d7      	b.n	80072e0 <UART_SetConfig+0x6c>
 8007330:	2204      	movs	r2, #4
 8007332:	e7d5      	b.n	80072e0 <UART_SetConfig+0x6c>
 8007334:	2208      	movs	r2, #8
 8007336:	e7d3      	b.n	80072e0 <UART_SetConfig+0x6c>
 8007338:	2210      	movs	r2, #16
 800733a:	e7d1      	b.n	80072e0 <UART_SetConfig+0x6c>
 800733c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007340:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007344:	f002 020c 	and.w	r2, r2, #12
 8007348:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800734c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8007350:	2a0c      	cmp	r2, #12
 8007352:	d80e      	bhi.n	8007372 <UART_SetConfig+0xfe>
 8007354:	e8df f002 	tbb	[pc, r2]
 8007358:	0d0d0d07 	.word	0x0d0d0d07
 800735c:	0d0d0d09 	.word	0x0d0d0d09
 8007360:	0d0d0d26 	.word	0x0d0d0d26
 8007364:	0b          	.byte	0x0b
 8007365:	00          	.byte	0x00
 8007366:	2200      	movs	r2, #0
 8007368:	e7ba      	b.n	80072e0 <UART_SetConfig+0x6c>
 800736a:	2204      	movs	r2, #4
 800736c:	e7b8      	b.n	80072e0 <UART_SetConfig+0x6c>
 800736e:	2208      	movs	r2, #8
 8007370:	e7b6      	b.n	80072e0 <UART_SetConfig+0x6c>
 8007372:	2210      	movs	r2, #16
 8007374:	e7b4      	b.n	80072e0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800737a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800737e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007382:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007386:	d00f      	beq.n	80073a8 <UART_SetConfig+0x134>
 8007388:	d805      	bhi.n	8007396 <UART_SetConfig+0x122>
 800738a:	b17a      	cbz	r2, 80073ac <UART_SetConfig+0x138>
 800738c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007390:	d10e      	bne.n	80073b0 <UART_SetConfig+0x13c>
 8007392:	2204      	movs	r2, #4
 8007394:	e7a4      	b.n	80072e0 <UART_SetConfig+0x6c>
 8007396:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800739a:	d10b      	bne.n	80073b4 <UART_SetConfig+0x140>
 800739c:	2208      	movs	r2, #8
 800739e:	e79f      	b.n	80072e0 <UART_SetConfig+0x6c>
 80073a0:	2202      	movs	r2, #2
 80073a2:	e79d      	b.n	80072e0 <UART_SetConfig+0x6c>
 80073a4:	2202      	movs	r2, #2
 80073a6:	e79b      	b.n	80072e0 <UART_SetConfig+0x6c>
 80073a8:	2202      	movs	r2, #2
 80073aa:	e799      	b.n	80072e0 <UART_SetConfig+0x6c>
 80073ac:	2200      	movs	r2, #0
 80073ae:	e797      	b.n	80072e0 <UART_SetConfig+0x6c>
 80073b0:	2210      	movs	r2, #16
 80073b2:	e795      	b.n	80072e0 <UART_SetConfig+0x6c>
 80073b4:	2210      	movs	r2, #16
 80073b6:	e793      	b.n	80072e0 <UART_SetConfig+0x6c>
    switch (clocksource)
 80073b8:	2a08      	cmp	r2, #8
 80073ba:	f200 809c 	bhi.w	80074f6 <UART_SetConfig+0x282>
 80073be:	e8df f002 	tbb	[pc, r2]
 80073c2:	9a08      	.short	0x9a08
 80073c4:	9a379a3a 	.word	0x9a379a3a
 80073c8:	9a9a      	.short	0x9a9a
 80073ca:	05          	.byte	0x05
 80073cb:	00          	.byte	0x00
 80073cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80073d0:	e004      	b.n	80073dc <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d2:	f7fd ffa7 	bl	8005324 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f000 808f 	beq.w	80074fa <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80073de:	4b4c      	ldr	r3, [pc, #304]	; (8007510 <UART_SetConfig+0x29c>)
 80073e0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80073e4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073e8:	6865      	ldr	r5, [r4, #4]
 80073ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80073ee:	4299      	cmp	r1, r3
 80073f0:	f200 8094 	bhi.w	800751c <UART_SetConfig+0x2a8>
 80073f4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80073f8:	f200 8092 	bhi.w	8007520 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073fc:	2600      	movs	r6, #0
 80073fe:	4633      	mov	r3, r6
 8007400:	4631      	mov	r1, r6
 8007402:	f7f9 fbd5 	bl	8000bb0 <__aeabi_uldivmod>
 8007406:	0209      	lsls	r1, r1, #8
 8007408:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800740c:	0200      	lsls	r0, r0, #8
 800740e:	086b      	lsrs	r3, r5, #1
 8007410:	18c0      	adds	r0, r0, r3
 8007412:	462a      	mov	r2, r5
 8007414:	4633      	mov	r3, r6
 8007416:	f141 0100 	adc.w	r1, r1, #0
 800741a:	f7f9 fbc9 	bl	8000bb0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800741e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8007422:	4b3c      	ldr	r3, [pc, #240]	; (8007514 <UART_SetConfig+0x2a0>)
 8007424:	429a      	cmp	r2, r3
 8007426:	d87d      	bhi.n	8007524 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	60d8      	str	r0, [r3, #12]
 800742c:	4630      	mov	r0, r6
 800742e:	e050      	b.n	80074d2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007430:	f7fd fa70 	bl	8004914 <HAL_RCC_GetSysClockFreq>
        break;
 8007434:	e7cf      	b.n	80073d6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8007436:	4838      	ldr	r0, [pc, #224]	; (8007518 <UART_SetConfig+0x2a4>)
 8007438:	e7d0      	b.n	80073dc <UART_SetConfig+0x168>
    switch (clocksource)
 800743a:	2a08      	cmp	r2, #8
 800743c:	d874      	bhi.n	8007528 <UART_SetConfig+0x2b4>
 800743e:	e8df f002 	tbb	[pc, r2]
 8007442:	2707      	.short	0x2707
 8007444:	732a7305 	.word	0x732a7305
 8007448:	7373      	.short	0x7373
 800744a:	0b          	.byte	0x0b
 800744b:	00          	.byte	0x00
 800744c:	4832      	ldr	r0, [pc, #200]	; (8007518 <UART_SetConfig+0x2a4>)
 800744e:	e003      	b.n	8007458 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007450:	f7fd ff68 	bl	8005324 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007454:	2800      	cmp	r0, #0
 8007456:	d069      	beq.n	800752c <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007458:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800745a:	4b2d      	ldr	r3, [pc, #180]	; (8007510 <UART_SetConfig+0x29c>)
 800745c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007460:	fbb0 f0f3 	udiv	r0, r0, r3
 8007464:	6862      	ldr	r2, [r4, #4]
 8007466:	0853      	lsrs	r3, r2, #1
 8007468:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800746c:	fbb0 f0f2 	udiv	r0, r0, r2
 8007470:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007472:	f1a0 0210 	sub.w	r2, r0, #16
 8007476:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800747a:	429a      	cmp	r2, r3
 800747c:	d858      	bhi.n	8007530 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800747e:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007482:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8007486:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	60d8      	str	r0, [r3, #12]
 800748c:	2000      	movs	r0, #0
 800748e:	e020      	b.n	80074d2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007490:	f7fd ff58 	bl	8005344 <HAL_RCC_GetPCLK2Freq>
        break;
 8007494:	e7de      	b.n	8007454 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8007496:	f7fd fa3d 	bl	8004914 <HAL_RCC_GetSysClockFreq>
        break;
 800749a:	e7db      	b.n	8007454 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800749c:	481e      	ldr	r0, [pc, #120]	; (8007518 <UART_SetConfig+0x2a4>)
 800749e:	e003      	b.n	80074a8 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a0:	f7fd ff40 	bl	8005324 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d047      	beq.n	8007538 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80074aa:	4b19      	ldr	r3, [pc, #100]	; (8007510 <UART_SetConfig+0x29c>)
 80074ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80074b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80074ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80074be:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c0:	f1a0 0210 	sub.w	r2, r0, #16
 80074c4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d837      	bhi.n	800753c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	60d8      	str	r0, [r3, #12]
 80074d0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074d8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 80074e0:	6763      	str	r3, [r4, #116]	; 0x74
}
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80074e4:	f7fd ff2e 	bl	8005344 <HAL_RCC_GetPCLK2Freq>
        break;
 80074e8:	e7dc      	b.n	80074a4 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80074ea:	f7fd fa13 	bl	8004914 <HAL_RCC_GetSysClockFreq>
        break;
 80074ee:	e7d9      	b.n	80074a4 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80074f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80074f4:	e7d8      	b.n	80074a8 <UART_SetConfig+0x234>
    switch (clocksource)
 80074f6:	2001      	movs	r0, #1
 80074f8:	e7eb      	b.n	80074d2 <UART_SetConfig+0x25e>
 80074fa:	2000      	movs	r0, #0
 80074fc:	e7e9      	b.n	80074d2 <UART_SetConfig+0x25e>
 80074fe:	bf00      	nop
 8007500:	cfff69f3 	.word	0xcfff69f3
 8007504:	40008000 	.word	0x40008000
 8007508:	40013800 	.word	0x40013800
 800750c:	40004400 	.word	0x40004400
 8007510:	080152e8 	.word	0x080152e8
 8007514:	000ffcff 	.word	0x000ffcff
 8007518:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800751c:	2001      	movs	r0, #1
 800751e:	e7d8      	b.n	80074d2 <UART_SetConfig+0x25e>
 8007520:	2001      	movs	r0, #1
 8007522:	e7d6      	b.n	80074d2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007524:	2001      	movs	r0, #1
 8007526:	e7d4      	b.n	80074d2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007528:	2001      	movs	r0, #1
 800752a:	e7d2      	b.n	80074d2 <UART_SetConfig+0x25e>
 800752c:	2000      	movs	r0, #0
 800752e:	e7d0      	b.n	80074d2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007530:	2001      	movs	r0, #1
 8007532:	e7ce      	b.n	80074d2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007534:	2001      	movs	r0, #1
 8007536:	e7cc      	b.n	80074d2 <UART_SetConfig+0x25e>
 8007538:	2000      	movs	r0, #0
 800753a:	e7ca      	b.n	80074d2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800753c:	2001      	movs	r0, #1
 800753e:	e7c8      	b.n	80074d2 <UART_SetConfig+0x25e>

08007540 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007540:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007542:	f013 0f01 	tst.w	r3, #1
 8007546:	d006      	beq.n	8007556 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007548:	6802      	ldr	r2, [r0, #0]
 800754a:	6853      	ldr	r3, [r2, #4]
 800754c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007550:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007552:	430b      	orrs	r3, r1
 8007554:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007556:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007558:	f013 0f02 	tst.w	r3, #2
 800755c:	d006      	beq.n	800756c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800755e:	6802      	ldr	r2, [r0, #0]
 8007560:	6853      	ldr	r3, [r2, #4]
 8007562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007566:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8007568:	430b      	orrs	r3, r1
 800756a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800756c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800756e:	f013 0f04 	tst.w	r3, #4
 8007572:	d006      	beq.n	8007582 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007574:	6802      	ldr	r2, [r0, #0]
 8007576:	6853      	ldr	r3, [r2, #4]
 8007578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800757c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800757e:	430b      	orrs	r3, r1
 8007580:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007582:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007584:	f013 0f08 	tst.w	r3, #8
 8007588:	d006      	beq.n	8007598 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800758a:	6802      	ldr	r2, [r0, #0]
 800758c:	6853      	ldr	r3, [r2, #4]
 800758e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007592:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007594:	430b      	orrs	r3, r1
 8007596:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007598:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800759a:	f013 0f10 	tst.w	r3, #16
 800759e:	d006      	beq.n	80075ae <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075a0:	6802      	ldr	r2, [r0, #0]
 80075a2:	6893      	ldr	r3, [r2, #8]
 80075a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075a8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80075aa:	430b      	orrs	r3, r1
 80075ac:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80075b0:	f013 0f20 	tst.w	r3, #32
 80075b4:	d006      	beq.n	80075c4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075b6:	6802      	ldr	r2, [r0, #0]
 80075b8:	6893      	ldr	r3, [r2, #8]
 80075ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075be:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80075c0:	430b      	orrs	r3, r1
 80075c2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80075c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80075ca:	d00a      	beq.n	80075e2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075cc:	6802      	ldr	r2, [r0, #0]
 80075ce:	6853      	ldr	r3, [r2, #4]
 80075d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075d4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80075d6:	430b      	orrs	r3, r1
 80075d8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075da:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80075dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e0:	d00b      	beq.n	80075fa <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80075e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80075e8:	d006      	beq.n	80075f8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ea:	6802      	ldr	r2, [r0, #0]
 80075ec:	6853      	ldr	r3, [r2, #4]
 80075ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80075f2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6053      	str	r3, [r2, #4]
}
 80075f8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075fa:	6802      	ldr	r2, [r0, #0]
 80075fc:	6853      	ldr	r3, [r2, #4]
 80075fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007602:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007604:	430b      	orrs	r3, r1
 8007606:	6053      	str	r3, [r2, #4]
 8007608:	e7eb      	b.n	80075e2 <UART_AdvFeatureConfig+0xa2>

0800760a <UART_WaitOnFlagUntilTimeout>:
{
 800760a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800760e:	4605      	mov	r5, r0
 8007610:	460f      	mov	r7, r1
 8007612:	4616      	mov	r6, r2
 8007614:	4699      	mov	r9, r3
 8007616:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800761a:	682c      	ldr	r4, [r5, #0]
 800761c:	69e4      	ldr	r4, [r4, #28]
 800761e:	ea37 0304 	bics.w	r3, r7, r4
 8007622:	bf0c      	ite	eq
 8007624:	f04f 0c01 	moveq.w	ip, #1
 8007628:	f04f 0c00 	movne.w	ip, #0
 800762c:	45b4      	cmp	ip, r6
 800762e:	d157      	bne.n	80076e0 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8007630:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007634:	d0f1      	beq.n	800761a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007636:	f7fa fb17 	bl	8001c68 <HAL_GetTick>
 800763a:	eba0 0009 	sub.w	r0, r0, r9
 800763e:	4540      	cmp	r0, r8
 8007640:	d82f      	bhi.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x98>
 8007642:	f1b8 0f00 	cmp.w	r8, #0
 8007646:	d02c      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	f012 0f04 	tst.w	r2, #4
 8007650:	d0e3      	beq.n	800761a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007652:	69da      	ldr	r2, [r3, #28]
 8007654:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007658:	d0df      	beq.n	800761a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800765a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800765e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007660:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	e852 3f00 	ldrex	r3, [r2]
 8007666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	e842 3100 	strex	r1, r3, [r2]
 800766e:	2900      	cmp	r1, #0
 8007670:	d1f6      	bne.n	8007660 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007672:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	f102 0308 	add.w	r3, r2, #8
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	3208      	adds	r2, #8
 8007682:	e842 3100 	strex	r1, r3, [r2]
 8007686:	2900      	cmp	r1, #0
 8007688:	d1f3      	bne.n	8007672 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 800768a:	2320      	movs	r3, #32
 800768c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007690:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007694:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 8007698:	2300      	movs	r3, #0
 800769a:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800769e:	2003      	movs	r0, #3
 80076a0:	e01f      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076a2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	e852 3f00 	ldrex	r3, [r2]
 80076a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	e842 3100 	strex	r1, r3, [r2]
 80076b0:	2900      	cmp	r1, #0
 80076b2:	d1f6      	bne.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	f102 0308 	add.w	r3, r2, #8
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	3208      	adds	r2, #8
 80076c4:	e842 3100 	strex	r1, r3, [r2]
 80076c8:	2900      	cmp	r1, #0
 80076ca:	d1f3      	bne.n	80076b4 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80076cc:	2320      	movs	r3, #32
 80076ce:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80076d2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80076d6:	2300      	movs	r3, #0
 80076d8:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 80076dc:	2003      	movs	r0, #3
 80076de:	e000      	b.n	80076e2 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 80076e0:	2000      	movs	r0, #0
}
 80076e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080076e6 <UART_CheckIdleState>:
{
 80076e6:	b530      	push	{r4, r5, lr}
 80076e8:	b083      	sub	sp, #12
 80076ea:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ec:	2300      	movs	r3, #0
 80076ee:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80076f2:	f7fa fab9 	bl	8001c68 <HAL_GetTick>
 80076f6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076f8:	6822      	ldr	r2, [r4, #0]
 80076fa:	6812      	ldr	r2, [r2, #0]
 80076fc:	f012 0f08 	tst.w	r2, #8
 8007700:	d10f      	bne.n	8007722 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f013 0f04 	tst.w	r3, #4
 800770a:	d118      	bne.n	800773e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800770c:	2320      	movs	r3, #32
 800770e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007712:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007716:	2000      	movs	r0, #0
 8007718:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800771a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800771e:	b003      	add	sp, #12
 8007720:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007722:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	4603      	mov	r3, r0
 800772a:	2200      	movs	r2, #0
 800772c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007730:	4620      	mov	r0, r4
 8007732:	f7ff ff6a 	bl	800760a <UART_WaitOnFlagUntilTimeout>
 8007736:	2800      	cmp	r0, #0
 8007738:	d0e3      	beq.n	8007702 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800773a:	2003      	movs	r0, #3
 800773c:	e7ef      	b.n	800771e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800773e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	462b      	mov	r3, r5
 8007746:	2200      	movs	r2, #0
 8007748:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800774c:	4620      	mov	r0, r4
 800774e:	f7ff ff5c 	bl	800760a <UART_WaitOnFlagUntilTimeout>
 8007752:	2800      	cmp	r0, #0
 8007754:	d0da      	beq.n	800770c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007756:	2003      	movs	r0, #3
 8007758:	e7e1      	b.n	800771e <UART_CheckIdleState+0x38>

0800775a <HAL_UART_Init>:
  if (huart == NULL)
 800775a:	b378      	cbz	r0, 80077bc <HAL_UART_Init+0x62>
{
 800775c:	b510      	push	{r4, lr}
 800775e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007760:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007764:	b30b      	cbz	r3, 80077aa <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007766:	2324      	movs	r3, #36	; 0x24
 8007768:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800776c:	6822      	ldr	r2, [r4, #0]
 800776e:	6813      	ldr	r3, [r2, #0]
 8007770:	f023 0301 	bic.w	r3, r3, #1
 8007774:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007776:	4620      	mov	r0, r4
 8007778:	f7ff fd7c 	bl	8007274 <UART_SetConfig>
 800777c:	2801      	cmp	r0, #1
 800777e:	d013      	beq.n	80077a8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007780:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007782:	b9bb      	cbnz	r3, 80077b4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	6853      	ldr	r3, [r2, #4]
 8007788:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800778c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800778e:	6822      	ldr	r2, [r4, #0]
 8007790:	6893      	ldr	r3, [r2, #8]
 8007792:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007796:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007798:	6822      	ldr	r2, [r4, #0]
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff ff9f 	bl	80076e6 <UART_CheckIdleState>
}
 80077a8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80077aa:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80077ae:	f7fa fced 	bl	800218c <HAL_UART_MspInit>
 80077b2:	e7d8      	b.n	8007766 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7ff fec3 	bl	8007540 <UART_AdvFeatureConfig>
 80077ba:	e7e3      	b.n	8007784 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80077bc:	2001      	movs	r0, #1
}
 80077be:	4770      	bx	lr

080077c0 <UART_Start_Receive_IT>:
{
 80077c0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80077c2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80077c4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80077c8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 80077d0:	6883      	ldr	r3, [r0, #8]
 80077d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d6:	d006      	beq.n	80077e6 <UART_Start_Receive_IT+0x26>
 80077d8:	b9a3      	cbnz	r3, 8007804 <UART_Start_Receive_IT+0x44>
 80077da:	6903      	ldr	r3, [r0, #16]
 80077dc:	b973      	cbnz	r3, 80077fc <UART_Start_Receive_IT+0x3c>
 80077de:	23ff      	movs	r3, #255	; 0xff
 80077e0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80077e4:	e014      	b.n	8007810 <UART_Start_Receive_IT+0x50>
 80077e6:	6903      	ldr	r3, [r0, #16]
 80077e8:	b923      	cbnz	r3, 80077f4 <UART_Start_Receive_IT+0x34>
 80077ea:	f240 13ff 	movw	r3, #511	; 0x1ff
 80077ee:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80077f2:	e00d      	b.n	8007810 <UART_Start_Receive_IT+0x50>
 80077f4:	23ff      	movs	r3, #255	; 0xff
 80077f6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80077fa:	e009      	b.n	8007810 <UART_Start_Receive_IT+0x50>
 80077fc:	237f      	movs	r3, #127	; 0x7f
 80077fe:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007802:	e005      	b.n	8007810 <UART_Start_Receive_IT+0x50>
 8007804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007808:	d030      	beq.n	800786c <UART_Start_Receive_IT+0xac>
 800780a:	2300      	movs	r3, #0
 800780c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007810:	2300      	movs	r3, #0
 8007812:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007816:	2322      	movs	r3, #34	; 0x22
 8007818:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	f101 0308 	add.w	r3, r1, #8
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	3108      	adds	r1, #8
 800782c:	e841 3400 	strex	r4, r3, [r1]
 8007830:	2c00      	cmp	r4, #0
 8007832:	d1f3      	bne.n	800781c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007834:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800783a:	d021      	beq.n	8007880 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800783c:	6883      	ldr	r3, [r0, #8]
 800783e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007842:	d048      	beq.n	80078d6 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8007844:	4b2c      	ldr	r3, [pc, #176]	; (80078f8 <UART_Start_Receive_IT+0x138>)
 8007846:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007848:	2300      	movs	r3, #0
 800784a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800784e:	6903      	ldr	r3, [r0, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d046      	beq.n	80078e2 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007854:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	e852 3f00 	ldrex	r3, [r2]
 800785a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	e842 3100 	strex	r1, r3, [r2]
 8007862:	2900      	cmp	r1, #0
 8007864:	d1f6      	bne.n	8007854 <UART_Start_Receive_IT+0x94>
}
 8007866:	2000      	movs	r0, #0
 8007868:	bc10      	pop	{r4}
 800786a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800786c:	6903      	ldr	r3, [r0, #16]
 800786e:	b91b      	cbnz	r3, 8007878 <UART_Start_Receive_IT+0xb8>
 8007870:	237f      	movs	r3, #127	; 0x7f
 8007872:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007876:	e7cb      	b.n	8007810 <UART_Start_Receive_IT+0x50>
 8007878:	233f      	movs	r3, #63	; 0x3f
 800787a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800787e:	e7c7      	b.n	8007810 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007880:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007884:	4293      	cmp	r3, r2
 8007886:	d8d9      	bhi.n	800783c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007888:	6883      	ldr	r3, [r0, #8]
 800788a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788e:	d01c      	beq.n	80078ca <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007890:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <UART_Start_Receive_IT+0x13c>)
 8007892:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8007894:	2300      	movs	r3, #0
 8007896:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 800789a:	6903      	ldr	r3, [r0, #16]
 800789c:	b143      	cbz	r3, 80078b0 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800789e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	e852 3f00 	ldrex	r3, [r2]
 80078a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	e842 3100 	strex	r1, r3, [r2]
 80078ac:	2900      	cmp	r1, #0
 80078ae:	d1f6      	bne.n	800789e <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80078b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	f102 0308 	add.w	r3, r2, #8
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078be:	3208      	adds	r2, #8
 80078c0:	e842 3100 	strex	r1, r3, [r2]
 80078c4:	2900      	cmp	r1, #0
 80078c6:	d1f3      	bne.n	80078b0 <UART_Start_Receive_IT+0xf0>
 80078c8:	e7cd      	b.n	8007866 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078ca:	6903      	ldr	r3, [r0, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1df      	bne.n	8007890 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80078d0:	4b0b      	ldr	r3, [pc, #44]	; (8007900 <UART_Start_Receive_IT+0x140>)
 80078d2:	6703      	str	r3, [r0, #112]	; 0x70
 80078d4:	e7de      	b.n	8007894 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d6:	6903      	ldr	r3, [r0, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1b3      	bne.n	8007844 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <UART_Start_Receive_IT+0x144>)
 80078de:	6703      	str	r3, [r0, #112]	; 0x70
 80078e0:	e7b2      	b.n	8007848 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80078e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	e852 3f00 	ldrex	r3, [r2]
 80078e8:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ec:	e842 3100 	strex	r1, r3, [r2]
 80078f0:	2900      	cmp	r1, #0
 80078f2:	d1f6      	bne.n	80078e2 <UART_Start_Receive_IT+0x122>
 80078f4:	e7b7      	b.n	8007866 <UART_Start_Receive_IT+0xa6>
 80078f6:	bf00      	nop
 80078f8:	08006dd1 	.word	0x08006dd1
 80078fc:	08006f35 	.word	0x08006f35
 8007900:	080070d5 	.word	0x080070d5
 8007904:	08006e83 	.word	0x08006e83

08007908 <HAL_UART_Receive_IT>:
{
 8007908:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800790a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800790e:	2b20      	cmp	r3, #32
 8007910:	d11e      	bne.n	8007950 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8007912:	b1f9      	cbz	r1, 8007954 <HAL_UART_Receive_IT+0x4c>
 8007914:	b302      	cbz	r2, 8007958 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8007916:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800791a:	2b01      	cmp	r3, #1
 800791c:	d01e      	beq.n	800795c <HAL_UART_Receive_IT+0x54>
 800791e:	2301      	movs	r3, #1
 8007920:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007924:	2300      	movs	r3, #0
 8007926:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007928:	6803      	ldr	r3, [r0, #0]
 800792a:	4c0d      	ldr	r4, [pc, #52]	; (8007960 <HAL_UART_Receive_IT+0x58>)
 800792c:	42a3      	cmp	r3, r4
 800792e:	d00c      	beq.n	800794a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007936:	d008      	beq.n	800794a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007938:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	e854 3f00 	ldrex	r3, [r4]
 800793e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	e844 3500 	strex	r5, r3, [r4]
 8007946:	2d00      	cmp	r5, #0
 8007948:	d1f6      	bne.n	8007938 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 800794a:	f7ff ff39 	bl	80077c0 <UART_Start_Receive_IT>
 800794e:	e000      	b.n	8007952 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8007950:	2002      	movs	r0, #2
}
 8007952:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007954:	2001      	movs	r0, #1
 8007956:	e7fc      	b.n	8007952 <HAL_UART_Receive_IT+0x4a>
 8007958:	2001      	movs	r0, #1
 800795a:	e7fa      	b.n	8007952 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 800795c:	2002      	movs	r0, #2
 800795e:	e7f8      	b.n	8007952 <HAL_UART_Receive_IT+0x4a>
 8007960:	40008000 	.word	0x40008000

08007964 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007964:	b082      	sub	sp, #8
 8007966:	ab02      	add	r3, sp, #8
 8007968:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800796c:	6802      	ldr	r2, [r0, #0]
 800796e:	6853      	ldr	r3, [r2, #4]
 8007970:	f023 0310 	bic.w	r3, r3, #16
 8007974:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8007978:	430b      	orrs	r3, r1
 800797a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800797c:	6802      	ldr	r2, [r0, #0]
 800797e:	6853      	ldr	r3, [r2, #4]
 8007980:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007984:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007988:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800798c:	6053      	str	r3, [r2, #4]
}
 800798e:	b002      	add	sp, #8
 8007990:	4770      	bx	lr
	...

08007994 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007994:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007996:	b92b      	cbnz	r3, 80079a4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800799e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 80079a2:	4770      	bx	lr
{
 80079a4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079a6:	6803      	ldr	r3, [r0, #0]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079ae:	6899      	ldr	r1, [r3, #8]
 80079b0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079b2:	4d09      	ldr	r5, [pc, #36]	; (80079d8 <UARTEx_SetNbDataToProcess+0x44>)
 80079b4:	5c6b      	ldrb	r3, [r5, r1]
 80079b6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079b8:	4c08      	ldr	r4, [pc, #32]	; (80079dc <UARTEx_SetNbDataToProcess+0x48>)
 80079ba:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079bc:	fb93 f3f1 	sdiv	r3, r3, r1
 80079c0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079c4:	5cab      	ldrb	r3, [r5, r2]
 80079c6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079c8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80079ce:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 80079d2:	bc30      	pop	{r4, r5}
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	08015308 	.word	0x08015308
 80079dc:	08015300 	.word	0x08015300

080079e0 <HAL_UARTEx_WakeupCallback>:
}
 80079e0:	4770      	bx	lr

080079e2 <HAL_UARTEx_RxFifoFullCallback>:
}
 80079e2:	4770      	bx	lr

080079e4 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 80079e4:	4770      	bx	lr

080079e6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 80079e6:	b510      	push	{r4, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	ab04      	add	r3, sp, #16
 80079ec:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 80079f0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d035      	beq.n	8007a64 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 80079f8:	4604      	mov	r4, r0
 80079fa:	2301      	movs	r3, #1
 80079fc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007a00:	2324      	movs	r3, #36	; 0x24
 8007a02:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8007a06:	6802      	ldr	r2, [r0, #0]
 8007a08:	6813      	ldr	r3, [r2, #0]
 8007a0a:	f023 0301 	bic.w	r3, r3, #1
 8007a0e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007a10:	6801      	ldr	r1, [r0, #0]
 8007a12:	688b      	ldr	r3, [r1, #8]
 8007a14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a18:	9a02      	ldr	r2, [sp, #8]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007a1e:	b1aa      	cbz	r2, 8007a4c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8007a20:	6822      	ldr	r2, [r4, #0]
 8007a22:	6813      	ldr	r3, [r2, #0]
 8007a24:	f043 0301 	orr.w	r3, r3, #1
 8007a28:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007a2a:	f7fa f91d 	bl	8001c68 <HAL_GetTick>
 8007a2e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a30:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007a34:	9200      	str	r2, [sp, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f7ff fde4 	bl	800760a <UART_WaitOnFlagUntilTimeout>
 8007a42:	b948      	cbnz	r0, 8007a58 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8007a44:	2320      	movs	r3, #32
 8007a46:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8007a4a:	e006      	b.n	8007a5a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007a4c:	ab04      	add	r3, sp, #16
 8007a4e:	e913 0006 	ldmdb	r3, {r1, r2}
 8007a52:	f7ff ff87 	bl	8007964 <UARTEx_Wakeup_AddressConfig>
 8007a56:	e7e3      	b.n	8007a20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8007a58:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8007a60:	b004      	add	sp, #16
 8007a62:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007a64:	2002      	movs	r0, #2
 8007a66:	e7fb      	b.n	8007a60 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08007a68 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007a68:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d010      	beq.n	8007a92 <HAL_UARTEx_EnableStopMode+0x2a>
 8007a70:	2301      	movs	r3, #1
 8007a72:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007a76:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	e852 3f00 	ldrex	r3, [r2]
 8007a7c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	e842 3100 	strex	r1, r3, [r2]
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d1f6      	bne.n	8007a76 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8007a8e:	4618      	mov	r0, r3
 8007a90:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007a92:	2002      	movs	r0, #2
}
 8007a94:	4770      	bx	lr

08007a96 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8007a96:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d01d      	beq.n	8007ada <HAL_UARTEx_EnableFifoMode+0x44>
{
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007aa8:	2324      	movs	r3, #36	; 0x24
 8007aaa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aae:	6802      	ldr	r2, [r0, #0]
 8007ab0:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007ab2:	6811      	ldr	r1, [r2, #0]
 8007ab4:	f021 0101 	bic.w	r1, r1, #1
 8007ab8:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007abe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007ac2:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ac4:	6802      	ldr	r2, [r0, #0]
 8007ac6:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8007ac8:	f7ff ff64 	bl	8007994 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8007acc:	2320      	movs	r3, #32
 8007ace:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007ad8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007ada:	2002      	movs	r0, #2
}
 8007adc:	4770      	bx	lr

08007ade <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007ade:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007ae0:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d01d      	beq.n	8007b24 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007ae8:	4604      	mov	r4, r0
 8007aea:	2301      	movs	r3, #1
 8007aec:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007af0:	2324      	movs	r3, #36	; 0x24
 8007af2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007af6:	6803      	ldr	r3, [r0, #0]
 8007af8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	f022 0201 	bic.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b02:	6802      	ldr	r2, [r0, #0]
 8007b04:	6893      	ldr	r3, [r2, #8]
 8007b06:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007b0a:	4319      	orrs	r1, r3
 8007b0c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007b0e:	f7ff ff41 	bl	8007994 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007b16:	2320      	movs	r3, #32
 8007b18:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007b24:	2002      	movs	r0, #2
 8007b26:	e7fc      	b.n	8007b22 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007b28 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007b28:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007b2a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d01d      	beq.n	8007b6e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007b32:	4604      	mov	r4, r0
 8007b34:	2301      	movs	r3, #1
 8007b36:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8007b3a:	2324      	movs	r3, #36	; 0x24
 8007b3c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b40:	6803      	ldr	r3, [r0, #0]
 8007b42:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b4c:	6802      	ldr	r2, [r0, #0]
 8007b4e:	6893      	ldr	r3, [r2, #8]
 8007b50:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8007b54:	4319      	orrs	r1, r3
 8007b56:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007b58:	f7ff ff1c 	bl	8007994 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007b60:	2320      	movs	r3, #32
 8007b62:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8007b66:	2000      	movs	r0, #0
 8007b68:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007b6e:	2002      	movs	r0, #2
 8007b70:	e7fc      	b.n	8007b6c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08007b74 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b74:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b78:	b97b      	cbnz	r3, 8007b9a <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7e:	b913      	cbnz	r3, 8007b86 <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b80:	f3ef 8311 	mrs	r3, BASEPRI
 8007b84:	b11b      	cbz	r3, 8007b8e <osKernelInitialize+0x1a>
 8007b86:	4b09      	ldr	r3, [pc, #36]	; (8007bac <osKernelInitialize+0x38>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d008      	beq.n	8007ba0 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b8e:	4b07      	ldr	r3, [pc, #28]	; (8007bac <osKernelInitialize+0x38>)
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	b940      	cbnz	r0, 8007ba6 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b98:	4770      	bx	lr
    stat = osErrorISR;
 8007b9a:	f06f 0005 	mvn.w	r0, #5
 8007b9e:	4770      	bx	lr
 8007ba0:	f06f 0005 	mvn.w	r0, #5
 8007ba4:	4770      	bx	lr
    } else {
      stat = osError;
 8007ba6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8007baa:	4770      	bx	lr
 8007bac:	200007f0 	.word	0x200007f0

08007bb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007bb0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bb6:	b9a3      	cbnz	r3, 8007be2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bbc:	b913      	cbnz	r3, 8007bc4 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bbe:	f3ef 8311 	mrs	r3, BASEPRI
 8007bc2:	b11b      	cbz	r3, 8007bcc <osKernelStart+0x1c>
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <osKernelStart+0x44>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d00d      	beq.n	8007be8 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8007bcc:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <osKernelStart+0x44>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d10c      	bne.n	8007bee <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bd4:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <osKernelStart+0x44>)
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bda:	f001 fa07 	bl	8008fec <vTaskStartScheduler>
      stat = osOK;
 8007bde:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8007be0:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8007be2:	f06f 0005 	mvn.w	r0, #5
 8007be6:	e7fb      	b.n	8007be0 <osKernelStart+0x30>
 8007be8:	f06f 0005 	mvn.w	r0, #5
 8007bec:	e7f8      	b.n	8007be0 <osKernelStart+0x30>
      stat = osError;
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8007bf2:	e7f5      	b.n	8007be0 <osKernelStart+0x30>
 8007bf4:	200007f0 	.word	0x200007f0

08007bf8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bfa:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bfc:	2400      	movs	r4, #0
 8007bfe:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c00:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	d138      	bne.n	8007c7a <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c08:	f3ef 8310 	mrs	r3, PRIMASK
 8007c0c:	b913      	cbnz	r3, 8007c14 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8007c12:	b11b      	cbz	r3, 8007c1c <osThreadNew+0x24>
 8007c14:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <osThreadNew+0xd4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d02e      	beq.n	8007c7a <osThreadNew+0x82>
 8007c1c:	b368      	cbz	r0, 8007c7a <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8007c1e:	b322      	cbz	r2, 8007c6a <osThreadNew+0x72>
      if (attr->name != NULL) {
 8007c20:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8007c22:	6993      	ldr	r3, [r2, #24]
 8007c24:	b903      	cbnz	r3, 8007c28 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8007c26:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c28:	1e5c      	subs	r4, r3, #1
 8007c2a:	2c37      	cmp	r4, #55	; 0x37
 8007c2c:	d849      	bhi.n	8007cc2 <osThreadNew+0xca>
 8007c2e:	6854      	ldr	r4, [r2, #4]
 8007c30:	f014 0f01 	tst.w	r4, #1
 8007c34:	d147      	bne.n	8007cc6 <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8007c36:	6956      	ldr	r6, [r2, #20]
 8007c38:	b16e      	cbz	r6, 8007c56 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c3a:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c3e:	6894      	ldr	r4, [r2, #8]
 8007c40:	b12c      	cbz	r4, 8007c4e <osThreadNew+0x56>
 8007c42:	68d7      	ldr	r7, [r2, #12]
 8007c44:	2f5b      	cmp	r7, #91	; 0x5b
 8007c46:	d902      	bls.n	8007c4e <osThreadNew+0x56>
 8007c48:	6917      	ldr	r7, [r2, #16]
 8007c4a:	b107      	cbz	r7, 8007c4e <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c4c:	b9c6      	cbnz	r6, 8007c80 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c4e:	b12c      	cbz	r4, 8007c5c <osThreadNew+0x64>
    mem  = -1;
 8007c50:	f04f 34ff 	mov.w	r4, #4294967295
 8007c54:	e00e      	b.n	8007c74 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 8007c56:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8007c5a:	e7f0      	b.n	8007c3e <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c5c:	68d4      	ldr	r4, [r2, #12]
 8007c5e:	b98c      	cbnz	r4, 8007c84 <osThreadNew+0x8c>
 8007c60:	6914      	ldr	r4, [r2, #16]
 8007c62:	b194      	cbz	r4, 8007c8a <osThreadNew+0x92>
    mem  = -1;
 8007c64:	f04f 34ff 	mov.w	r4, #4294967295
 8007c68:	e004      	b.n	8007c74 <osThreadNew+0x7c>
    name = NULL;
 8007c6a:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8007c6c:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8007c6e:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8007c70:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8007c74:	2c01      	cmp	r4, #1
 8007c76:	d00a      	beq.n	8007c8e <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8007c78:	b1ac      	cbz	r4, 8007ca6 <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c7a:	9805      	ldr	r0, [sp, #20]
}
 8007c7c:	b007      	add	sp, #28
 8007c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8007c80:	2401      	movs	r4, #1
 8007c82:	e7f7      	b.n	8007c74 <osThreadNew+0x7c>
    mem  = -1;
 8007c84:	f04f 34ff 	mov.w	r4, #4294967295
 8007c88:	e7f4      	b.n	8007c74 <osThreadNew+0x7c>
          mem = 0;
 8007c8a:	2400      	movs	r4, #0
 8007c8c:	e7f2      	b.n	8007c74 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c8e:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007c90:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c92:	9202      	str	r2, [sp, #8]
 8007c94:	9401      	str	r4, [sp, #4]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4662      	mov	r2, ip
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	f001 f935 	bl	8008f0c <xTaskCreateStatic>
 8007ca2:	9005      	str	r0, [sp, #20]
 8007ca4:	e7e9      	b.n	8007c7a <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ca6:	aa05      	add	r2, sp, #20
 8007ca8:	9201      	str	r2, [sp, #4]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	460b      	mov	r3, r1
 8007cae:	fa1f f28c 	uxth.w	r2, ip
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	f001 f965 	bl	8008f82 <xTaskCreate>
 8007cb8:	2801      	cmp	r0, #1
 8007cba:	d0de      	beq.n	8007c7a <osThreadNew+0x82>
          hTask = NULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	e7db      	b.n	8007c7a <osThreadNew+0x82>
        return (NULL);
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e7da      	b.n	8007c7c <osThreadNew+0x84>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e7d8      	b.n	8007c7c <osThreadNew+0x84>
 8007cca:	bf00      	nop
 8007ccc:	200007f0 	.word	0x200007f0

08007cd0 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8007cd0:	b530      	push	{r4, r5, lr}
 8007cd2:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8007cd4:	b1f0      	cbz	r0, 8007d14 <osThreadFlagsSet+0x44>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	db1b      	blt.n	8007d14 <osThreadFlagsSet+0x44>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8007cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce0:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ce2:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 8007ce6:	b9db      	cbnz	r3, 8007d20 <osThreadFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8007cec:	b913      	cbnz	r3, 8007cf4 <osThreadFlagsSet+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cee:	f3ef 8311 	mrs	r3, BASEPRI
 8007cf2:	b11b      	cbz	r3, 8007cfc <osThreadFlagsSet+0x2c>
 8007cf4:	4b19      	ldr	r3, [pc, #100]	; (8007d5c <osThreadFlagsSet+0x8c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d011      	beq.n	8007d20 <osThreadFlagsSet+0x50>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);

      portYIELD_FROM_ISR (yield);
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4620      	mov	r0, r4
 8007d02:	f001 fd05 	bl	8009710 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8007d06:	ab03      	add	r3, sp, #12
 8007d08:	2200      	movs	r2, #0
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f001 fcff 	bl	8009710 <xTaskGenericNotify>
 8007d12:	e002      	b.n	8007d1a <osThreadFlagsSet+0x4a>
    rflags = (uint32_t)osErrorParameter;
 8007d14:	f06f 0303 	mvn.w	r3, #3
 8007d18:	9303      	str	r3, [sp, #12]
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8007d1a:	9803      	ldr	r0, [sp, #12]
 8007d1c:	b005      	add	sp, #20
 8007d1e:	bd30      	pop	{r4, r5, pc}
      yield = pdFALSE;
 8007d20:	2500      	movs	r5, #0
 8007d22:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8007d24:	ab02      	add	r3, sp, #8
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	462b      	mov	r3, r5
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f001 fd71 	bl	8009814 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8007d32:	9500      	str	r5, [sp, #0]
 8007d34:	ab03      	add	r3, sp, #12
 8007d36:	462a      	mov	r2, r5
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f001 fd6a 	bl	8009814 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 8007d40:	9b02      	ldr	r3, [sp, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0e9      	beq.n	8007d1a <osThreadFlagsSet+0x4a>
 8007d46:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	e7de      	b.n	8007d1a <osThreadFlagsSet+0x4a>
 8007d5c:	200007f0 	.word	0x200007f0

08007d60 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d66:	f3ef 8305 	mrs	r3, IPSR
 8007d6a:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d14c      	bne.n	8007e0a <osThreadFlagsWait+0xaa>
 8007d70:	4681      	mov	r9, r0
 8007d72:	468a      	mov	sl, r1
 8007d74:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d76:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7a:	b913      	cbnz	r3, 8007d82 <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d7c:	f3ef 8311 	mrs	r3, BASEPRI
 8007d80:	b11b      	cbz	r3, 8007d8a <osThreadFlagsWait+0x2a>
 8007d82:	4b29      	ldr	r3, [pc, #164]	; (8007e28 <osThreadFlagsWait+0xc8>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d045      	beq.n	8007e16 <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007d8a:	f1b9 0f00 	cmp.w	r9, #0
 8007d8e:	db45      	blt.n	8007e1c <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8007d90:	f01a 0f02 	tst.w	sl, #2
 8007d94:	d007      	beq.n	8007da6 <osThreadFlagsWait+0x46>
      clear = 0U;
 8007d96:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8007d9a:	f001 f97d 	bl	8009098 <xTaskGetTickCount>
 8007d9e:	4683      	mov	fp, r0
    tout   = timeout;
 8007da0:	463e      	mov	r6, r7
    rflags = 0U;
 8007da2:	9d01      	ldr	r5, [sp, #4]
 8007da4:	e023      	b.n	8007dee <osThreadFlagsWait+0x8e>
      clear = flags;
 8007da6:	46c8      	mov	r8, r9
 8007da8:	e7f7      	b.n	8007d9a <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8007daa:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8007dae:	9b03      	ldr	r3, [sp, #12]
 8007db0:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007db2:	f01a 0f01 	tst.w	sl, #1
 8007db6:	d00d      	beq.n	8007dd4 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8007db8:	ea39 0305 	bics.w	r3, r9, r5
 8007dbc:	d027      	beq.n	8007e0e <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8007dbe:	b387      	cbz	r7, 8007e22 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007dc0:	f001 f96a 	bl	8009098 <xTaskGetTickCount>
 8007dc4:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 8007dc8:	429e      	cmp	r6, r3
 8007dca:	d30b      	bcc.n	8007de4 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8007dcc:	ebab 0000 	sub.w	r0, fp, r0
 8007dd0:	4406      	add	r6, r0
 8007dd2:	e00b      	b.n	8007dec <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8007dd4:	ea19 0f05 	tst.w	r9, r5
 8007dd8:	d119      	bne.n	8007e0e <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 8007dda:	2f00      	cmp	r7, #0
 8007ddc:	d1f0      	bne.n	8007dc0 <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 8007dde:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8007de2:	e014      	b.n	8007e0e <osThreadFlagsWait+0xae>
          tout  = 0;
 8007de4:	9e01      	ldr	r6, [sp, #4]
 8007de6:	e001      	b.n	8007dec <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8007de8:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 8007dec:	b17c      	cbz	r4, 8007e0e <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8007dee:	4633      	mov	r3, r6
 8007df0:	aa03      	add	r2, sp, #12
 8007df2:	4641      	mov	r1, r8
 8007df4:	2000      	movs	r0, #0
 8007df6:	f001 fc3f 	bl	8009678 <xTaskNotifyWait>
 8007dfa:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 8007dfc:	2801      	cmp	r0, #1
 8007dfe:	d0d4      	beq.n	8007daa <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 8007e00:	2f00      	cmp	r7, #0
 8007e02:	d1f1      	bne.n	8007de8 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8007e04:	f06f 0502 	mvn.w	r5, #2
 8007e08:	e7f0      	b.n	8007dec <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 8007e0a:	f06f 0505 	mvn.w	r5, #5
}
 8007e0e:	4628      	mov	r0, r5
 8007e10:	b005      	add	sp, #20
 8007e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8007e16:	f06f 0505 	mvn.w	r5, #5
 8007e1a:	e7f8      	b.n	8007e0e <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 8007e1c:	f06f 0503 	mvn.w	r5, #3
 8007e20:	e7f5      	b.n	8007e0e <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 8007e22:	f06f 0502 	mvn.w	r5, #2
 8007e26:	e7f2      	b.n	8007e0e <osThreadFlagsWait+0xae>
 8007e28:	200007f0 	.word	0x200007f0

08007e2c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e2c:	4b03      	ldr	r3, [pc, #12]	; (8007e3c <vApplicationGetIdleTaskMemory+0x10>)
 8007e2e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e30:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <vApplicationGetIdleTaskMemory+0x14>)
 8007e32:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	6013      	str	r3, [r2, #0]
}
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000794 	.word	0x20000794
 8007e40:	20000594 	.word	0x20000594

08007e44 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e44:	4b03      	ldr	r3, [pc, #12]	; (8007e54 <vApplicationGetTimerTaskMemory+0x10>)
 8007e46:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e48:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <vApplicationGetTimerTaskMemory+0x14>)
 8007e4a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e50:	6013      	str	r3, [r2, #0]
}
 8007e52:	4770      	bx	lr
 8007e54:	20000bf4 	.word	0x20000bf4
 8007e58:	200007f4 	.word	0x200007f4

08007e5c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e5c:	4a12      	ldr	r2, [pc, #72]	; (8007ea8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e5e:	f012 0f07 	tst.w	r2, #7
 8007e62:	d01e      	beq.n	8007ea2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e64:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e66:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e6a:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 8007e6e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e70:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e72:	480e      	ldr	r0, [pc, #56]	; (8007eac <prvHeapInit+0x50>)
 8007e74:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e76:	2100      	movs	r1, #0
 8007e78:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e7a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8007e7c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e7e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8007e82:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <prvHeapInit+0x54>)
 8007e84:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8007e86:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e88:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e8a:	1a99      	subs	r1, r3, r2
 8007e8c:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e8e:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <prvHeapInit+0x58>)
 8007e92:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e94:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <prvHeapInit+0x5c>)
 8007e96:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e98:	4b08      	ldr	r3, [pc, #32]	; (8007ebc <prvHeapInit+0x60>)
 8007e9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e9e:	601a      	str	r2, [r3, #0]
}
 8007ea0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ea6:	e7e4      	b.n	8007e72 <prvHeapInit+0x16>
 8007ea8:	20000c54 	.word	0x20000c54
 8007eac:	20002c60 	.word	0x20002c60
 8007eb0:	20000c50 	.word	0x20000c50
 8007eb4:	20002c5c 	.word	0x20002c5c
 8007eb8:	20002c58 	.word	0x20002c58
 8007ebc:	20002c54 	.word	0x20002c54

08007ec0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ec0:	4b15      	ldr	r3, [pc, #84]	; (8007f18 <prvInsertBlockIntoFreeList+0x58>)
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4283      	cmp	r3, r0
 8007ec8:	d3fb      	bcc.n	8007ec2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eca:	6851      	ldr	r1, [r2, #4]
 8007ecc:	eb02 0c01 	add.w	ip, r2, r1
 8007ed0:	4584      	cmp	ip, r0
 8007ed2:	d009      	beq.n	8007ee8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ed4:	6841      	ldr	r1, [r0, #4]
 8007ed6:	eb00 0c01 	add.w	ip, r0, r1
 8007eda:	4563      	cmp	r3, ip
 8007edc:	d009      	beq.n	8007ef2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ede:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ee0:	4290      	cmp	r0, r2
 8007ee2:	d018      	beq.n	8007f16 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ee4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8007ee6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ee8:	6840      	ldr	r0, [r0, #4]
 8007eea:	4401      	add	r1, r0
 8007eec:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8007eee:	4610      	mov	r0, r2
 8007ef0:	e7f0      	b.n	8007ed4 <prvInsertBlockIntoFreeList+0x14>
{
 8007ef2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ef4:	4c09      	ldr	r4, [pc, #36]	; (8007f1c <prvInsertBlockIntoFreeList+0x5c>)
 8007ef6:	6824      	ldr	r4, [r4, #0]
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d00a      	beq.n	8007f12 <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	4419      	add	r1, r3
 8007f00:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f02:	6813      	ldr	r3, [r2, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8007f08:	4290      	cmp	r0, r2
 8007f0a:	d000      	beq.n	8007f0e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f0c:	6010      	str	r0, [r2, #0]
	}
}
 8007f0e:	bc10      	pop	{r4}
 8007f10:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f12:	6004      	str	r4, [r0, #0]
 8007f14:	e7f8      	b.n	8007f08 <prvInsertBlockIntoFreeList+0x48>
 8007f16:	4770      	bx	lr
 8007f18:	20002c60 	.word	0x20002c60
 8007f1c:	20000c50 	.word	0x20000c50

08007f20 <pvPortMalloc>:
{
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8007f24:	f001 f8b0 	bl	8009088 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007f28:	4b34      	ldr	r3, [pc, #208]	; (8007ffc <pvPortMalloc+0xdc>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	b1a3      	cbz	r3, 8007f58 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f2e:	4b34      	ldr	r3, [pc, #208]	; (8008000 <pvPortMalloc+0xe0>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	421d      	tst	r5, r3
 8007f34:	d14a      	bne.n	8007fcc <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 8007f36:	b135      	cbz	r5, 8007f46 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8007f38:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f3a:	f015 0f07 	tst.w	r5, #7
 8007f3e:	d002      	beq.n	8007f46 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f40:	f025 0507 	bic.w	r5, r5, #7
 8007f44:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	d042      	beq.n	8007fd0 <pvPortMalloc+0xb0>
 8007f4a:	4b2e      	ldr	r3, [pc, #184]	; (8008004 <pvPortMalloc+0xe4>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	42ab      	cmp	r3, r5
 8007f50:	d34d      	bcc.n	8007fee <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 8007f52:	4a2d      	ldr	r2, [pc, #180]	; (8008008 <pvPortMalloc+0xe8>)
 8007f54:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f56:	e004      	b.n	8007f62 <pvPortMalloc+0x42>
			prvHeapInit();
 8007f58:	f7ff ff80 	bl	8007e5c <prvHeapInit>
 8007f5c:	e7e7      	b.n	8007f2e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 8007f5e:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f60:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f62:	6863      	ldr	r3, [r4, #4]
 8007f64:	42ab      	cmp	r3, r5
 8007f66:	d202      	bcs.n	8007f6e <pvPortMalloc+0x4e>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f7      	bne.n	8007f5e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8007f6e:	4b23      	ldr	r3, [pc, #140]	; (8007ffc <pvPortMalloc+0xdc>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	42a3      	cmp	r3, r4
 8007f74:	d03d      	beq.n	8007ff2 <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f76:	6816      	ldr	r6, [r2, #0]
 8007f78:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f7e:	6863      	ldr	r3, [r4, #4]
 8007f80:	1b5b      	subs	r3, r3, r5
 8007f82:	2b10      	cmp	r3, #16
 8007f84:	d910      	bls.n	8007fa8 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f86:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f88:	f010 0f07 	tst.w	r0, #7
 8007f8c:	d008      	beq.n	8007fa0 <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	e7fe      	b.n	8007f9e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fa0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fa2:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fa4:	f7ff ff8c 	bl	8007ec0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fa8:	6862      	ldr	r2, [r4, #4]
 8007faa:	4916      	ldr	r1, [pc, #88]	; (8008004 <pvPortMalloc+0xe4>)
 8007fac:	680b      	ldr	r3, [r1, #0]
 8007fae:	1a9b      	subs	r3, r3, r2
 8007fb0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fb2:	4916      	ldr	r1, [pc, #88]	; (800800c <pvPortMalloc+0xec>)
 8007fb4:	6809      	ldr	r1, [r1, #0]
 8007fb6:	428b      	cmp	r3, r1
 8007fb8:	d201      	bcs.n	8007fbe <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fba:	4914      	ldr	r1, [pc, #80]	; (800800c <pvPortMalloc+0xec>)
 8007fbc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007fbe:	4b10      	ldr	r3, [pc, #64]	; (8008000 <pvPortMalloc+0xe0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	e002      	b.n	8007fd2 <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8007fcc:	2600      	movs	r6, #0
 8007fce:	e000      	b.n	8007fd2 <pvPortMalloc+0xb2>
 8007fd0:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8007fd2:	f001 f90d 	bl	80091f0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fd6:	f016 0f07 	tst.w	r6, #7
 8007fda:	d00c      	beq.n	8007ff6 <pvPortMalloc+0xd6>
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	e7fe      	b.n	8007fec <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 8007fee:	2600      	movs	r6, #0
 8007ff0:	e7ef      	b.n	8007fd2 <pvPortMalloc+0xb2>
 8007ff2:	2600      	movs	r6, #0
 8007ff4:	e7ed      	b.n	8007fd2 <pvPortMalloc+0xb2>
}
 8007ff6:	4630      	mov	r0, r6
 8007ff8:	bd70      	pop	{r4, r5, r6, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000c50 	.word	0x20000c50
 8008000:	20002c54 	.word	0x20002c54
 8008004:	20002c58 	.word	0x20002c58
 8008008:	20002c60 	.word	0x20002c60
 800800c:	20002c5c 	.word	0x20002c5c

08008010 <vPortFree>:
	if( pv != NULL )
 8008010:	b380      	cbz	r0, 8008074 <vPortFree+0x64>
{
 8008012:	b538      	push	{r3, r4, r5, lr}
 8008014:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8008016:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800801a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800801e:	4a16      	ldr	r2, [pc, #88]	; (8008078 <vPortFree+0x68>)
 8008020:	6812      	ldr	r2, [r2, #0]
 8008022:	4213      	tst	r3, r2
 8008024:	d108      	bne.n	8008038 <vPortFree+0x28>
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	e7fe      	b.n	8008036 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008038:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800803c:	b141      	cbz	r1, 8008050 <vPortFree+0x40>
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	e7fe      	b.n	800804e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008050:	ea23 0302 	bic.w	r3, r3, r2
 8008054:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8008058:	f001 f816 	bl	8009088 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800805c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8008060:	4a06      	ldr	r2, [pc, #24]	; (800807c <vPortFree+0x6c>)
 8008062:	6813      	ldr	r3, [r2, #0]
 8008064:	440b      	add	r3, r1
 8008066:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008068:	4628      	mov	r0, r5
 800806a:	f7ff ff29 	bl	8007ec0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800806e:	f001 f8bf 	bl	80091f0 <xTaskResumeAll>
}
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	20002c54 	.word	0x20002c54
 800807c:	20002c58 	.word	0x20002c58

08008080 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008080:	f100 0308 	add.w	r3, r0, #8
 8008084:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008086:	f04f 32ff 	mov.w	r2, #4294967295
 800808a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800808c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800808e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008094:	4770      	bx	lr

08008096 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008096:	2300      	movs	r3, #0
 8008098:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800809a:	4770      	bx	lr

0800809c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800809c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800809e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080a4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080a6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080a8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80080aa:	6803      	ldr	r3, [r0, #0]
 80080ac:	3301      	adds	r3, #1
 80080ae:	6003      	str	r3, [r0, #0]
}
 80080b0:	4770      	bx	lr

080080b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080b2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080b4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080b6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80080ba:	d011      	beq.n	80080e0 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080bc:	f100 0308 	add.w	r3, r0, #8
 80080c0:	461c      	mov	r4, r3
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	42aa      	cmp	r2, r5
 80080c8:	d9fa      	bls.n	80080c0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080ca:	6863      	ldr	r3, [r4, #4]
 80080cc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080ce:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080d0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80080d2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080d4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80080d6:	6803      	ldr	r3, [r0, #0]
 80080d8:	3301      	adds	r3, #1
 80080da:	6003      	str	r3, [r0, #0]
}
 80080dc:	bc30      	pop	{r4, r5}
 80080de:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80080e0:	6904      	ldr	r4, [r0, #16]
 80080e2:	e7f2      	b.n	80080ca <vListInsert+0x18>

080080e4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80080e4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080e6:	6841      	ldr	r1, [r0, #4]
 80080e8:	6882      	ldr	r2, [r0, #8]
 80080ea:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080ec:	6841      	ldr	r1, [r0, #4]
 80080ee:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	4282      	cmp	r2, r0
 80080f4:	d006      	beq.n	8008104 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80080f6:	2200      	movs	r2, #0
 80080f8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	3a01      	subs	r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008100:	6818      	ldr	r0, [r3, #0]
}
 8008102:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008104:	6882      	ldr	r2, [r0, #8]
 8008106:	605a      	str	r2, [r3, #4]
 8008108:	e7f5      	b.n	80080f6 <uxListRemove+0x12>
	...

0800810c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800810c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800810e:	2300      	movs	r3, #0
 8008110:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008112:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <prvTaskExitError+0x3c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811a:	d008      	beq.n	800812e <prvTaskExitError+0x22>
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	e7fe      	b.n	800812c <prvTaskExitError+0x20>
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d0fc      	beq.n	800813e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008144:	b002      	add	sp, #8
 8008146:	4770      	bx	lr
 8008148:	20000078 	.word	0x20000078

0800814c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800814c:	4806      	ldr	r0, [pc, #24]	; (8008168 <prvPortStartFirstTask+0x1c>)
 800814e:	6800      	ldr	r0, [r0, #0]
 8008150:	6800      	ldr	r0, [r0, #0]
 8008152:	f380 8808 	msr	MSP, r0
 8008156:	b662      	cpsie	i
 8008158:	b661      	cpsie	f
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	df00      	svc	0
 8008164:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008166:	0000      	.short	0x0000
 8008168:	e000ed08 	.word	0xe000ed08

0800816c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800816c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008170:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008174:	f021 0101 	bic.w	r1, r1, #1
 8008178:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800817c:	4b03      	ldr	r3, [pc, #12]	; (800818c <pxPortInitialiseStack+0x20>)
 800817e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008182:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008186:	3840      	subs	r0, #64	; 0x40
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	0800810d 	.word	0x0800810d

08008190 <SVC_Handler>:
	__asm volatile (
 8008190:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <pxCurrentTCBConst2>)
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6808      	ldr	r0, [r1, #0]
 8008196:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800819a:	f380 8809 	msr	PSP, r0
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80081ae:	4770      	bx	lr

080081b0 <pxCurrentTCBConst2>:
 80081b0:	20002cbc 	.word	0x20002cbc

080081b4 <vPortEnterCritical>:
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081c4:	4a0b      	ldr	r2, [pc, #44]	; (80081f4 <vPortEnterCritical+0x40>)
 80081c6:	6813      	ldr	r3, [r2, #0]
 80081c8:	3301      	adds	r3, #1
 80081ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d000      	beq.n	80081d2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80081d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80081d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80081d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80081da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081de:	d0f7      	beq.n	80081d0 <vPortEnterCritical+0x1c>
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	e7fe      	b.n	80081f0 <vPortEnterCritical+0x3c>
 80081f2:	bf00      	nop
 80081f4:	20000078 	.word	0x20000078

080081f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80081f8:	4b09      	ldr	r3, [pc, #36]	; (8008220 <vPortExitCritical+0x28>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	b943      	cbnz	r3, 8008210 <vPortExitCritical+0x18>
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	e7fe      	b.n	800820e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008210:	3b01      	subs	r3, #1
 8008212:	4a03      	ldr	r2, [pc, #12]	; (8008220 <vPortExitCritical+0x28>)
 8008214:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008216:	b90b      	cbnz	r3, 800821c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008218:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	20000078 	.word	0x20000078
	...

08008230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008230:	f3ef 8009 	mrs	r0, PSP
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <pxCurrentTCBConst>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008240:	6010      	str	r0, [r2, #0]
 8008242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800824a:	f380 8811 	msr	BASEPRI, r0
 800824e:	f001 f883 	bl	8009358 <vTaskSwitchContext>
 8008252:	f04f 0000 	mov.w	r0, #0
 8008256:	f380 8811 	msr	BASEPRI, r0
 800825a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	6808      	ldr	r0, [r1, #0]
 8008262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008266:	f380 8809 	msr	PSP, r0
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	4770      	bx	lr

08008270 <pxCurrentTCBConst>:
 8008270:	20002cbc 	.word	0x20002cbc

08008274 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008274:	b508      	push	{r3, lr}
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008286:	f000 ff27 	bl	80090d8 <xTaskIncrementTick>
 800828a:	b128      	cbz	r0, 8008298 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800828c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008294:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8008298:	2300      	movs	r3, #0
 800829a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800829e:	bd08      	pop	{r3, pc}

080082a0 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80082a0:	b510      	push	{r4, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	9001      	str	r0, [sp, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80082a6:	4b46      	ldr	r3, [pc, #280]	; (80083c0 <vPortSuppressTicksAndSleep+0x120>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4298      	cmp	r0, r3
 80082ac:	d900      	bls.n	80082b0 <vPortSuppressTicksAndSleep+0x10>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80082ae:	9301      	str	r3, [sp, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80082b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082b4:	691a      	ldr	r2, [r3, #16]
 80082b6:	f022 0201 	bic.w	r2, r2, #1
 80082ba:	611a      	str	r2, [r3, #16]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80082bc:	699c      	ldr	r4, [r3, #24]
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	4a40      	ldr	r2, [pc, #256]	; (80083c4 <vPortSuppressTicksAndSleep+0x124>)
 80082c4:	6812      	ldr	r2, [r2, #0]
 80082c6:	fb02 4403 	mla	r4, r2, r3, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 80082ca:	4b3f      	ldr	r3, [pc, #252]	; (80083c8 <vPortSuppressTicksAndSleep+0x128>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	42a3      	cmp	r3, r4
 80082d0:	d200      	bcs.n	80082d4 <vPortSuppressTicksAndSleep+0x34>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80082d2:	1ae4      	subs	r4, r4, r3
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 80082d4:	b672      	cpsid	i
		__asm volatile( "dsb" );
 80082d6:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 80082da:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80082de:	f001 f955 	bl	800958c <eTaskConfirmSleepModeStatus>
 80082e2:	b970      	cbnz	r0, 8008302 <vPortSuppressTicksAndSleep+0x62>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80082e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	615a      	str	r2, [r3, #20]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	f042 0201 	orr.w	r2, r2, #1
 80082f2:	611a      	str	r2, [r3, #16]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80082f4:	4a33      	ldr	r2, [pc, #204]	; (80083c4 <vPortSuppressTicksAndSleep+0x124>)
 80082f6:	6812      	ldr	r2, [r2, #0]
 80082f8:	3a01      	subs	r2, #1
 80082fa:	615a      	str	r2, [r3, #20]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 80082fc:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 80082fe:	b004      	add	sp, #16
 8008300:	bd10      	pop	{r4, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8008302:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008306:	615c      	str	r4, [r3, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008308:	2200      	movs	r2, #0
 800830a:	619a      	str	r2, [r3, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	f042 0201 	orr.w	r2, r2, #1
 8008312:	611a      	str	r2, [r3, #16]
			xModifiableIdleTime = xExpectedIdleTime;
 8008314:	9b01      	ldr	r3, [sp, #4]
 8008316:	9303      	str	r3, [sp, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8008318:	a803      	add	r0, sp, #12
 800831a:	f7f8 fef7 	bl	800110c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	b123      	cbz	r3, 800832c <vPortSuppressTicksAndSleep+0x8c>
				__asm volatile( "dsb" ::: "memory" );
 8008322:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8008326:	bf30      	wfi
				__asm volatile( "isb" );
 8008328:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800832c:	a801      	add	r0, sp, #4
 800832e:	f7f8 ff0f 	bl	8001150 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8008332:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8008334:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008338:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800833c:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800833e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8008342:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8008346:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800834a:	2206      	movs	r2, #6
 800834c:	611a      	str	r2, [r3, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008354:	d023      	beq.n	800839e <vPortSuppressTicksAndSleep+0xfe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8008356:	4b1b      	ldr	r3, [pc, #108]	; (80083c4 <vPortSuppressTicksAndSleep+0x124>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	1b1c      	subs	r4, r3, r4
 8008362:	4414      	add	r4, r2
 8008364:	3c01      	subs	r4, #1
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8008366:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <vPortSuppressTicksAndSleep+0x128>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	42a3      	cmp	r3, r4
 800836c:	d801      	bhi.n	8008372 <vPortSuppressTicksAndSleep+0xd2>
 800836e:	42a2      	cmp	r2, r4
 8008370:	d200      	bcs.n	8008374 <vPortSuppressTicksAndSleep+0xd4>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8008372:	1e54      	subs	r4, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8008374:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008378:	615c      	str	r4, [r3, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800837a:	9801      	ldr	r0, [sp, #4]
 800837c:	3801      	subs	r0, #1
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800837e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8008382:	2300      	movs	r3, #0
 8008384:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	f043 0301 	orr.w	r3, r3, #1
 800838c:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 800838e:	f000 fe89 	bl	80090a4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008392:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <vPortSuppressTicksAndSleep+0x124>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	3b01      	subs	r3, #1
 8008398:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 800839a:	b662      	cpsie	i
	}
 800839c:	e7af      	b.n	80082fe <vPortSuppressTicksAndSleep+0x5e>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <vPortSuppressTicksAndSleep+0x124>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	9b01      	ldr	r3, [sp, #4]
 80083a4:	fb03 f102 	mul.w	r1, r3, r2
 80083a8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 80083ac:	69a3      	ldr	r3, [r4, #24]
 80083ae:	1ac8      	subs	r0, r1, r3
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80083b0:	fbb0 f0f2 	udiv	r0, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80083b4:	fb00 2202 	mla	r2, r0, r2, r2
 80083b8:	1a5b      	subs	r3, r3, r1
 80083ba:	4413      	add	r3, r2
 80083bc:	6163      	str	r3, [r4, #20]
 80083be:	e7de      	b.n	800837e <vPortSuppressTicksAndSleep+0xde>
 80083c0:	20002c78 	.word	0x20002c78
 80083c4:	20002c74 	.word	0x20002c74
 80083c8:	20002c70 	.word	0x20002c70

080083cc <vPortSetupTimerInterrupt>:
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80083cc:	4b0f      	ldr	r3, [pc, #60]	; (800840c <vPortSetupTimerInterrupt+0x40>)
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	480f      	ldr	r0, [pc, #60]	; (8008410 <vPortSetupTimerInterrupt+0x44>)
 80083d2:	fba0 1202 	umull	r1, r2, r0, r2
 80083d6:	0992      	lsrs	r2, r2, #6
 80083d8:	490e      	ldr	r1, [pc, #56]	; (8008414 <vPortSetupTimerInterrupt+0x48>)
 80083da:	600a      	str	r2, [r1, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80083dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80083e0:	fbb1 f2f2 	udiv	r2, r1, r2
 80083e4:	490c      	ldr	r1, [pc, #48]	; (8008418 <vPortSetupTimerInterrupt+0x4c>)
 80083e6:	600a      	str	r2, [r1, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80083e8:	4a0c      	ldr	r2, [pc, #48]	; (800841c <vPortSetupTimerInterrupt+0x50>)
 80083ea:	212d      	movs	r1, #45	; 0x2d
 80083ec:	6011      	str	r1, [r2, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80083f2:	2100      	movs	r1, #0
 80083f4:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083f6:	6191      	str	r1, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	fba0 1303 	umull	r1, r3, r0, r3
 80083fe:	099b      	lsrs	r3, r3, #6
 8008400:	3b01      	subs	r3, #1
 8008402:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008404:	2307      	movs	r3, #7
 8008406:	6113      	str	r3, [r2, #16]
}
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	20000070 	.word	0x20000070
 8008410:	10624dd3 	.word	0x10624dd3
 8008414:	20002c74 	.word	0x20002c74
 8008418:	20002c78 	.word	0x20002c78
 800841c:	20002c70 	.word	0x20002c70

08008420 <xPortStartScheduler>:
{
 8008420:	b510      	push	{r4, lr}
 8008422:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008424:	4b2a      	ldr	r3, [pc, #168]	; (80084d0 <xPortStartScheduler+0xb0>)
 8008426:	781a      	ldrb	r2, [r3, #0]
 8008428:	b2d2      	uxtb	r2, r2
 800842a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800842c:	22ff      	movs	r2, #255	; 0xff
 800842e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008438:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800843c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008440:	4a24      	ldr	r2, [pc, #144]	; (80084d4 <xPortStartScheduler+0xb4>)
 8008442:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008444:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <xPortStartScheduler+0xb8>)
 8008446:	2207      	movs	r2, #7
 8008448:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800844a:	e009      	b.n	8008460 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800844c:	4a22      	ldr	r2, [pc, #136]	; (80084d8 <xPortStartScheduler+0xb8>)
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	3b01      	subs	r3, #1
 8008452:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008454:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008460:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008464:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008468:	d1f0      	bne.n	800844c <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800846a:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <xPortStartScheduler+0xb8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b03      	cmp	r3, #3
 8008470:	d008      	beq.n	8008484 <xPortStartScheduler+0x64>
	__asm volatile
 8008472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008476:	f383 8811 	msr	BASEPRI, r3
 800847a:	f3bf 8f6f 	isb	sy
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	e7fe      	b.n	8008482 <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008484:	021b      	lsls	r3, r3, #8
 8008486:	4a14      	ldr	r2, [pc, #80]	; (80084d8 <xPortStartScheduler+0xb8>)
 8008488:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800848a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800848e:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	4a0e      	ldr	r2, [pc, #56]	; (80084d0 <xPortStartScheduler+0xb0>)
 8008496:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008498:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800849c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80084a0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80084a4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084a8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80084ac:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80084b0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80084b4:	f7ff ff8a 	bl	80083cc <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80084b8:	2400      	movs	r4, #0
 80084ba:	4b08      	ldr	r3, [pc, #32]	; (80084dc <xPortStartScheduler+0xbc>)
 80084bc:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80084be:	f7ff fe45 	bl	800814c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80084c2:	f000 ff49 	bl	8009358 <vTaskSwitchContext>
	prvTaskExitError();
 80084c6:	f7ff fe21 	bl	800810c <prvTaskExitError>
}
 80084ca:	4620      	mov	r0, r4
 80084cc:	b002      	add	sp, #8
 80084ce:	bd10      	pop	{r4, pc}
 80084d0:	e000e400 	.word	0xe000e400
 80084d4:	20002c68 	.word	0x20002c68
 80084d8:	20002c6c 	.word	0x20002c6c
 80084dc:	20000078 	.word	0x20000078

080084e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80084e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80084e4:	2b0f      	cmp	r3, #15
 80084e6:	d90f      	bls.n	8008508 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80084e8:	4a11      	ldr	r2, [pc, #68]	; (8008530 <vPortValidateInterruptPriority+0x50>)
 80084ea:	5c9b      	ldrb	r3, [r3, r2]
 80084ec:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80084ee:	4a11      	ldr	r2, [pc, #68]	; (8008534 <vPortValidateInterruptPriority+0x54>)
 80084f0:	7812      	ldrb	r2, [r2, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d908      	bls.n	8008508 <vPortValidateInterruptPriority+0x28>
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	e7fe      	b.n	8008506 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008508:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800850c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008514:	4a08      	ldr	r2, [pc, #32]	; (8008538 <vPortValidateInterruptPriority+0x58>)
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	4293      	cmp	r3, r2
 800851a:	d908      	bls.n	800852e <vPortValidateInterruptPriority+0x4e>
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	e7fe      	b.n	800852c <vPortValidateInterruptPriority+0x4c>
	}
 800852e:	4770      	bx	lr
 8008530:	e000e3f0 	.word	0xe000e3f0
 8008534:	20002c68 	.word	0x20002c68
 8008538:	20002c6c 	.word	0x20002c6c

0800853c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800853c:	b510      	push	{r4, lr}
 800853e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008540:	f7ff fe38 	bl	80081b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008544:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008546:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008548:	429a      	cmp	r2, r3
 800854a:	d004      	beq.n	8008556 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800854c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800854e:	f7ff fe53 	bl	80081f8 <vPortExitCritical>

	return xReturn;
}
 8008552:	4620      	mov	r0, r4
 8008554:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008556:	2401      	movs	r4, #1
 8008558:	e7f9      	b.n	800854e <prvIsQueueFull+0x12>

0800855a <prvIsQueueEmpty>:
{
 800855a:	b510      	push	{r4, lr}
 800855c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800855e:	f7ff fe29 	bl	80081b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008564:	b923      	cbnz	r3, 8008570 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8008566:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8008568:	f7ff fe46 	bl	80081f8 <vPortExitCritical>
}
 800856c:	4620      	mov	r0, r4
 800856e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8008570:	2400      	movs	r4, #0
 8008572:	e7f9      	b.n	8008568 <prvIsQueueEmpty+0xe>

08008574 <prvCopyDataToQueue>:
{
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4604      	mov	r4, r0
 8008578:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800857a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800857c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800857e:	b95a      	cbnz	r2, 8008598 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008580:	6803      	ldr	r3, [r0, #0]
 8008582:	b11b      	cbz	r3, 800858c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8008584:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008586:	3601      	adds	r6, #1
 8008588:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800858a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800858c:	6880      	ldr	r0, [r0, #8]
 800858e:	f001 f82b 	bl	80095e8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	60a3      	str	r3, [r4, #8]
 8008596:	e7f6      	b.n	8008586 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8008598:	b96d      	cbnz	r5, 80085b6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800859a:	6840      	ldr	r0, [r0, #4]
 800859c:	f00c fa7e 	bl	8014a9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80085a2:	6863      	ldr	r3, [r4, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085a8:	68a2      	ldr	r2, [r4, #8]
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d319      	bcc.n	80085e2 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80085b2:	4628      	mov	r0, r5
 80085b4:	e7e7      	b.n	8008586 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085b6:	68c0      	ldr	r0, [r0, #12]
 80085b8:	f00c fa70 	bl	8014a9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80085be:	4251      	negs	r1, r2
 80085c0:	68e3      	ldr	r3, [r4, #12]
 80085c2:	1a9b      	subs	r3, r3, r2
 80085c4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085c6:	6822      	ldr	r2, [r4, #0]
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d202      	bcs.n	80085d2 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085cc:	68a3      	ldr	r3, [r4, #8]
 80085ce:	440b      	add	r3, r1
 80085d0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80085d2:	2d02      	cmp	r5, #2
 80085d4:	d001      	beq.n	80085da <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80085d6:	2000      	movs	r0, #0
 80085d8:	e7d5      	b.n	8008586 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085da:	b126      	cbz	r6, 80085e6 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80085dc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80085de:	2000      	movs	r0, #0
 80085e0:	e7d1      	b.n	8008586 <prvCopyDataToQueue+0x12>
 80085e2:	4628      	mov	r0, r5
 80085e4:	e7cf      	b.n	8008586 <prvCopyDataToQueue+0x12>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e7cd      	b.n	8008586 <prvCopyDataToQueue+0x12>

080085ea <prvCopyDataFromQueue>:
{
 80085ea:	b508      	push	{r3, lr}
 80085ec:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80085f0:	b162      	cbz	r2, 800860c <prvCopyDataFromQueue+0x22>
 80085f2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085f4:	68d9      	ldr	r1, [r3, #12]
 80085f6:	4411      	add	r1, r2
 80085f8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085fa:	f8d3 c008 	ldr.w	ip, [r3, #8]
 80085fe:	4561      	cmp	r1, ip
 8008600:	d301      	bcc.n	8008606 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008602:	6819      	ldr	r1, [r3, #0]
 8008604:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008606:	68d9      	ldr	r1, [r3, #12]
 8008608:	f00c fa48 	bl	8014a9c <memcpy>
}
 800860c:	bd08      	pop	{r3, pc}

0800860e <prvUnlockQueue>:
{
 800860e:	b538      	push	{r3, r4, r5, lr}
 8008610:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8008612:	f7ff fdcf 	bl	80081b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008616:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800861a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800861c:	e001      	b.n	8008622 <prvUnlockQueue+0x14>
			--cTxLock;
 800861e:	3c01      	subs	r4, #1
 8008620:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008622:	2c00      	cmp	r4, #0
 8008624:	dd0a      	ble.n	800863c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008628:	b143      	cbz	r3, 800863c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800862a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800862e:	f000 ff11 	bl	8009454 <xTaskRemoveFromEventList>
 8008632:	2800      	cmp	r0, #0
 8008634:	d0f3      	beq.n	800861e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8008636:	f000 ffa3 	bl	8009580 <vTaskMissedYield>
 800863a:	e7f0      	b.n	800861e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800863c:	23ff      	movs	r3, #255	; 0xff
 800863e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008642:	f7ff fdd9 	bl	80081f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008646:	f7ff fdb5 	bl	80081b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800864a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800864e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008650:	e001      	b.n	8008656 <prvUnlockQueue+0x48>
				--cRxLock;
 8008652:	3c01      	subs	r4, #1
 8008654:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008656:	2c00      	cmp	r4, #0
 8008658:	dd0a      	ble.n	8008670 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800865a:	692b      	ldr	r3, [r5, #16]
 800865c:	b143      	cbz	r3, 8008670 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800865e:	f105 0010 	add.w	r0, r5, #16
 8008662:	f000 fef7 	bl	8009454 <xTaskRemoveFromEventList>
 8008666:	2800      	cmp	r0, #0
 8008668:	d0f3      	beq.n	8008652 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800866a:	f000 ff89 	bl	8009580 <vTaskMissedYield>
 800866e:	e7f0      	b.n	8008652 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8008670:	23ff      	movs	r3, #255	; 0xff
 8008672:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008676:	f7ff fdbf 	bl	80081f8 <vPortExitCritical>
}
 800867a:	bd38      	pop	{r3, r4, r5, pc}

0800867c <xQueueGenericReset>:
{
 800867c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800867e:	b1e0      	cbz	r0, 80086ba <xQueueGenericReset+0x3e>
 8008680:	460d      	mov	r5, r1
 8008682:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008684:	f7ff fd96 	bl	80081b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800868c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800868e:	fb01 3002 	mla	r0, r1, r2, r3
 8008692:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008694:	2000      	movs	r0, #0
 8008696:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008698:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800869a:	3a01      	subs	r2, #1
 800869c:	fb02 3301 	mla	r3, r2, r1, r3
 80086a0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086a2:	23ff      	movs	r3, #255	; 0xff
 80086a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80086ac:	b9fd      	cbnz	r5, 80086ee <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ae:	6923      	ldr	r3, [r4, #16]
 80086b0:	b963      	cbnz	r3, 80086cc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80086b2:	f7ff fda1 	bl	80081f8 <vPortExitCritical>
}
 80086b6:	2001      	movs	r0, #1
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80086ca:	e7fe      	b.n	80086ca <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086cc:	f104 0010 	add.w	r0, r4, #16
 80086d0:	f000 fec0 	bl	8009454 <xTaskRemoveFromEventList>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d0ec      	beq.n	80086b2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80086d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80086dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	e7e1      	b.n	80086b2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086ee:	f104 0010 	add.w	r0, r4, #16
 80086f2:	f7ff fcc5 	bl	8008080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80086fa:	f7ff fcc1 	bl	8008080 <vListInitialise>
 80086fe:	e7d8      	b.n	80086b2 <xQueueGenericReset+0x36>

08008700 <prvInitialiseNewQueue>:
{
 8008700:	b538      	push	{r3, r4, r5, lr}
 8008702:	461d      	mov	r5, r3
 8008704:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008706:	460b      	mov	r3, r1
 8008708:	b949      	cbnz	r1, 800871e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800870a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800870c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800870e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008710:	2101      	movs	r1, #1
 8008712:	4620      	mov	r0, r4
 8008714:	f7ff ffb2 	bl	800867c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8008718:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800871c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	e7f4      	b.n	800870c <prvInitialiseNewQueue+0xc>

08008722 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008722:	b940      	cbnz	r0, 8008736 <xQueueGenericCreateStatic+0x14>
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	e7fe      	b.n	8008734 <xQueueGenericCreateStatic+0x12>
	{
 8008736:	b510      	push	{r4, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	461c      	mov	r4, r3
 800873c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800873e:	b153      	cbz	r3, 8008756 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008740:	b192      	cbz	r2, 8008768 <xQueueGenericCreateStatic+0x46>
 8008742:	b989      	cbnz	r1, 8008768 <xQueueGenericCreateStatic+0x46>
 8008744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008748:	f383 8811 	msr	BASEPRI, r3
 800874c:	f3bf 8f6f 	isb	sy
 8008750:	f3bf 8f4f 	dsb	sy
 8008754:	e7fe      	b.n	8008754 <xQueueGenericCreateStatic+0x32>
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8008766:	e7fe      	b.n	8008766 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008768:	b16a      	cbz	r2, 8008786 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800876a:	2350      	movs	r3, #80	; 0x50
 800876c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	2b50      	cmp	r3, #80	; 0x50
 8008772:	d013      	beq.n	800879c <xQueueGenericCreateStatic+0x7a>
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	e7fe      	b.n	8008784 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008786:	2900      	cmp	r1, #0
 8008788:	d0ef      	beq.n	800876a <xQueueGenericCreateStatic+0x48>
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	e7fe      	b.n	800879a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800879c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800879e:	2301      	movs	r3, #1
 80087a0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087a4:	9400      	str	r4, [sp, #0]
 80087a6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80087aa:	4660      	mov	r0, ip
 80087ac:	f7ff ffa8 	bl	8008700 <prvInitialiseNewQueue>
	}
 80087b0:	4620      	mov	r0, r4
 80087b2:	b004      	add	sp, #16
 80087b4:	bd10      	pop	{r4, pc}

080087b6 <xQueueGenericSend>:
{
 80087b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087b8:	b085      	sub	sp, #20
 80087ba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80087bc:	b188      	cbz	r0, 80087e2 <xQueueGenericSend+0x2c>
 80087be:	460f      	mov	r7, r1
 80087c0:	461d      	mov	r5, r3
 80087c2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087c4:	b1b1      	cbz	r1, 80087f4 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087c6:	2d02      	cmp	r5, #2
 80087c8:	d120      	bne.n	800880c <xQueueGenericSend+0x56>
 80087ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d01d      	beq.n	800880c <xQueueGenericSend+0x56>
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	e7fe      	b.n	80087e0 <xQueueGenericSend+0x2a>
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80087f2:	e7fe      	b.n	80087f2 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0e5      	beq.n	80087c6 <xQueueGenericSend+0x10>
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	e7fe      	b.n	800880a <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800880c:	f000 fedc 	bl	80095c8 <xTaskGetSchedulerState>
 8008810:	4606      	mov	r6, r0
 8008812:	b958      	cbnz	r0, 800882c <xQueueGenericSend+0x76>
 8008814:	9b01      	ldr	r3, [sp, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d048      	beq.n	80088ac <xQueueGenericSend+0xf6>
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	e7fe      	b.n	800882a <xQueueGenericSend+0x74>
 800882c:	2600      	movs	r6, #0
 800882e:	e03d      	b.n	80088ac <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008830:	462a      	mov	r2, r5
 8008832:	4639      	mov	r1, r7
 8008834:	4620      	mov	r0, r4
 8008836:	f7ff fe9d 	bl	8008574 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800883a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800883c:	b97b      	cbnz	r3, 800885e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800883e:	b148      	cbz	r0, 8008854 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8008840:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008848:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008854:	f7ff fcd0 	bl	80081f8 <vPortExitCritical>
				return pdPASS;
 8008858:	2001      	movs	r0, #1
}
 800885a:	b005      	add	sp, #20
 800885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800885e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008862:	f000 fdf7 	bl	8009454 <xTaskRemoveFromEventList>
 8008866:	2800      	cmp	r0, #0
 8008868:	d0f4      	beq.n	8008854 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800886a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800886e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008872:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	e7e9      	b.n	8008854 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8008880:	f7ff fcba 	bl	80081f8 <vPortExitCritical>
					return errQUEUE_FULL;
 8008884:	2000      	movs	r0, #0
 8008886:	e7e8      	b.n	800885a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008888:	a802      	add	r0, sp, #8
 800888a:	f000 fe2b 	bl	80094e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800888e:	2601      	movs	r6, #1
 8008890:	e019      	b.n	80088c6 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8008892:	2300      	movs	r3, #0
 8008894:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008898:	e021      	b.n	80088de <xQueueGenericSend+0x128>
 800889a:	2300      	movs	r3, #0
 800889c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088a0:	e023      	b.n	80088ea <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 80088a2:	4620      	mov	r0, r4
 80088a4:	f7ff feb3 	bl	800860e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088a8:	f000 fca2 	bl	80091f0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80088ac:	f7ff fc82 	bl	80081b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80088b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d3bb      	bcc.n	8008830 <xQueueGenericSend+0x7a>
 80088b8:	2d02      	cmp	r5, #2
 80088ba:	d0b9      	beq.n	8008830 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d0de      	beq.n	8008880 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	d0e0      	beq.n	8008888 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 80088c6:	f7ff fc97 	bl	80081f8 <vPortExitCritical>
		vTaskSuspendAll();
 80088ca:	f000 fbdd 	bl	8009088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088ce:	f7ff fc71 	bl	80081b4 <vPortEnterCritical>
 80088d2:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80088d6:	b252      	sxtb	r2, r2
 80088d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088dc:	d0d9      	beq.n	8008892 <xQueueGenericSend+0xdc>
 80088de:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80088e2:	b252      	sxtb	r2, r2
 80088e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088e8:	d0d7      	beq.n	800889a <xQueueGenericSend+0xe4>
 80088ea:	f7ff fc85 	bl	80081f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ee:	a901      	add	r1, sp, #4
 80088f0:	a802      	add	r0, sp, #8
 80088f2:	f000 fe03 	bl	80094fc <xTaskCheckForTimeOut>
 80088f6:	b9d8      	cbnz	r0, 8008930 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7ff fe1f 	bl	800853c <prvIsQueueFull>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d0cf      	beq.n	80088a2 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008902:	9901      	ldr	r1, [sp, #4]
 8008904:	f104 0010 	add.w	r0, r4, #16
 8008908:	f000 fd70 	bl	80093ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800890c:	4620      	mov	r0, r4
 800890e:	f7ff fe7e 	bl	800860e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008912:	f000 fc6d 	bl	80091f0 <xTaskResumeAll>
 8008916:	2800      	cmp	r0, #0
 8008918:	d1c8      	bne.n	80088ac <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800891a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800891e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008922:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	e7bd      	b.n	80088ac <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8008930:	4620      	mov	r0, r4
 8008932:	f7ff fe6c 	bl	800860e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008936:	f000 fc5b 	bl	80091f0 <xTaskResumeAll>
			return errQUEUE_FULL;
 800893a:	2000      	movs	r0, #0
 800893c:	e78d      	b.n	800885a <xQueueGenericSend+0xa4>

0800893e <xQueueGenericSendFromISR>:
{
 800893e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008942:	b190      	cbz	r0, 800896a <xQueueGenericSendFromISR+0x2c>
 8008944:	460f      	mov	r7, r1
 8008946:	4616      	mov	r6, r2
 8008948:	461c      	mov	r4, r3
 800894a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800894c:	b1b1      	cbz	r1, 800897c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800894e:	2c02      	cmp	r4, #2
 8008950:	d120      	bne.n	8008994 <xQueueGenericSendFromISR+0x56>
 8008952:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8008954:	2b01      	cmp	r3, #1
 8008956:	d01d      	beq.n	8008994 <xQueueGenericSendFromISR+0x56>
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	e7fe      	b.n	8008968 <xQueueGenericSendFromISR+0x2a>
 800896a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896e:	f383 8811 	msr	BASEPRI, r3
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800897a:	e7fe      	b.n	800897a <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800897c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0e5      	beq.n	800894e <xQueueGenericSendFromISR+0x10>
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	e7fe      	b.n	8008992 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008994:	f7ff fda4 	bl	80084e0 <vPortValidateInterruptPriority>
	__asm volatile
 8008998:	f3ef 8911 	mrs	r9, BASEPRI
 800899c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a0:	f383 8811 	msr	BASEPRI, r3
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089ac:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80089ae:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d306      	bcc.n	80089c2 <xQueueGenericSendFromISR+0x84>
 80089b4:	2c02      	cmp	r4, #2
 80089b6:	d004      	beq.n	80089c2 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80089b8:	2000      	movs	r0, #0
	__asm volatile
 80089ba:	f389 8811 	msr	BASEPRI, r9
}
 80089be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80089c2:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 80089c6:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089ca:	4622      	mov	r2, r4
 80089cc:	4639      	mov	r1, r7
 80089ce:	4628      	mov	r0, r5
 80089d0:	f7ff fdd0 	bl	8008574 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80089d4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80089d8:	d006      	beq.n	80089e8 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089da:	f108 0301 	add.w	r3, r8, #1
 80089de:	b25b      	sxtb	r3, r3
 80089e0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80089e4:	2001      	movs	r0, #1
 80089e6:	e7e8      	b.n	80089ba <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80089ea:	b90b      	cbnz	r3, 80089f0 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 80089ec:	2001      	movs	r0, #1
 80089ee:	e7e4      	b.n	80089ba <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089f0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80089f4:	f000 fd2e 	bl	8009454 <xTaskRemoveFromEventList>
 80089f8:	b118      	cbz	r0, 8008a02 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 80089fa:	b126      	cbz	r6, 8008a06 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80089fc:	2001      	movs	r0, #1
 80089fe:	6030      	str	r0, [r6, #0]
 8008a00:	e7db      	b.n	80089ba <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8008a02:	2001      	movs	r0, #1
 8008a04:	e7d9      	b.n	80089ba <xQueueGenericSendFromISR+0x7c>
 8008a06:	2001      	movs	r0, #1
 8008a08:	e7d7      	b.n	80089ba <xQueueGenericSendFromISR+0x7c>

08008a0a <xQueueReceive>:
{
 8008a0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a0c:	b085      	sub	sp, #20
 8008a0e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008a10:	b190      	cbz	r0, 8008a38 <xQueueReceive+0x2e>
 8008a12:	460f      	mov	r7, r1
 8008a14:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a16:	b1c1      	cbz	r1, 8008a4a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a18:	f000 fdd6 	bl	80095c8 <xTaskGetSchedulerState>
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	bb00      	cbnz	r0, 8008a62 <xQueueReceive+0x58>
 8008a20:	9b01      	ldr	r3, [sp, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d05e      	beq.n	8008ae4 <xQueueReceive+0xda>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	e7fe      	b.n	8008a36 <xQueueReceive+0x2c>
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8008a48:	e7fe      	b.n	8008a48 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a4a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0e3      	beq.n	8008a18 <xQueueReceive+0xe>
 8008a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a54:	f383 8811 	msr	BASEPRI, r3
 8008a58:	f3bf 8f6f 	isb	sy
 8008a5c:	f3bf 8f4f 	dsb	sy
 8008a60:	e7fe      	b.n	8008a60 <xQueueReceive+0x56>
 8008a62:	2600      	movs	r6, #0
 8008a64:	e03e      	b.n	8008ae4 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a66:	4639      	mov	r1, r7
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f7ff fdbe 	bl	80085ea <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a6e:	3d01      	subs	r5, #1
 8008a70:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a72:	6923      	ldr	r3, [r4, #16]
 8008a74:	b923      	cbnz	r3, 8008a80 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8008a76:	f7ff fbbf 	bl	80081f8 <vPortExitCritical>
				return pdPASS;
 8008a7a:	2001      	movs	r0, #1
}
 8008a7c:	b005      	add	sp, #20
 8008a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a80:	f104 0010 	add.w	r0, r4, #16
 8008a84:	f000 fce6 	bl	8009454 <xTaskRemoveFromEventList>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	d0f4      	beq.n	8008a76 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8008a8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	e7e9      	b.n	8008a76 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8008aa2:	f7ff fba9 	bl	80081f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e7e8      	b.n	8008a7c <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aaa:	a802      	add	r0, sp, #8
 8008aac:	f000 fd1a 	bl	80094e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ab0:	2601      	movs	r6, #1
 8008ab2:	e021      	b.n	8008af8 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008aba:	e029      	b.n	8008b10 <xQueueReceive+0x106>
 8008abc:	2300      	movs	r3, #0
 8008abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ac2:	e02b      	b.n	8008b1c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f7ff fda2 	bl	800860e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aca:	f000 fb91 	bl	80091f0 <xTaskResumeAll>
 8008ace:	e009      	b.n	8008ae4 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f7ff fd9c 	bl	800860e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ad6:	f000 fb8b 	bl	80091f0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7ff fd3d 	bl	800855a <prvIsQueueEmpty>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d13f      	bne.n	8008b64 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8008ae4:	f7ff fb66 	bl	80081b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ae8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008aea:	2d00      	cmp	r5, #0
 8008aec:	d1bb      	bne.n	8008a66 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aee:	9b01      	ldr	r3, [sp, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0d6      	beq.n	8008aa2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8008af4:	2e00      	cmp	r6, #0
 8008af6:	d0d8      	beq.n	8008aaa <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8008af8:	f7ff fb7e 	bl	80081f8 <vPortExitCritical>
		vTaskSuspendAll();
 8008afc:	f000 fac4 	bl	8009088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b00:	f7ff fb58 	bl	80081b4 <vPortEnterCritical>
 8008b04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008b08:	b25b      	sxtb	r3, r3
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0e:	d0d1      	beq.n	8008ab4 <xQueueReceive+0xaa>
 8008b10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008b14:	b25b      	sxtb	r3, r3
 8008b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1a:	d0cf      	beq.n	8008abc <xQueueReceive+0xb2>
 8008b1c:	f7ff fb6c 	bl	80081f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b20:	a901      	add	r1, sp, #4
 8008b22:	a802      	add	r0, sp, #8
 8008b24:	f000 fcea 	bl	80094fc <xTaskCheckForTimeOut>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d1d1      	bne.n	8008ad0 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f7ff fd14 	bl	800855a <prvIsQueueEmpty>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d0c6      	beq.n	8008ac4 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b36:	9901      	ldr	r1, [sp, #4]
 8008b38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008b3c:	f000 fc56 	bl	80093ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b40:	4620      	mov	r0, r4
 8008b42:	f7ff fd64 	bl	800860e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b46:	f000 fb53 	bl	80091f0 <xTaskResumeAll>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d1ca      	bne.n	8008ae4 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8008b4e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b56:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	e7bf      	b.n	8008ae4 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8008b64:	2000      	movs	r0, #0
 8008b66:	e789      	b.n	8008a7c <xQueueReceive+0x72>

08008b68 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2b07      	cmp	r3, #7
 8008b6c:	d80c      	bhi.n	8008b88 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b6e:	4a07      	ldr	r2, [pc, #28]	; (8008b8c <vQueueAddToRegistry+0x24>)
 8008b70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008b74:	b10a      	cbz	r2, 8008b7a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b76:	3301      	adds	r3, #1
 8008b78:	e7f7      	b.n	8008b6a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b7a:	4a04      	ldr	r2, [pc, #16]	; (8008b8c <vQueueAddToRegistry+0x24>)
 8008b7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008b84:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b86:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b88:	4770      	bx	lr
 8008b8a:	bf00      	nop
 8008b8c:	20002c7c 	.word	0x20002c7c

08008b90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	4604      	mov	r4, r0
 8008b94:	460d      	mov	r5, r1
 8008b96:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b98:	f7ff fb0c 	bl	80081b4 <vPortEnterCritical>
 8008b9c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ba0:	b25b      	sxtb	r3, r3
 8008ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba6:	d00d      	beq.n	8008bc4 <vQueueWaitForMessageRestricted+0x34>
 8008ba8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008bac:	b25b      	sxtb	r3, r3
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb2:	d00b      	beq.n	8008bcc <vQueueWaitForMessageRestricted+0x3c>
 8008bb4:	f7ff fb20 	bl	80081f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008bba:	b15b      	cbz	r3, 8008bd4 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f7ff fd26 	bl	800860e <prvUnlockQueue>
	}
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008bca:	e7ed      	b.n	8008ba8 <vQueueWaitForMessageRestricted+0x18>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bd2:	e7ef      	b.n	8008bb4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bd4:	4632      	mov	r2, r6
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008bdc:	f000 fc1e 	bl	800941c <vTaskPlaceOnEventListRestricted>
 8008be0:	e7ec      	b.n	8008bbc <vQueueWaitForMessageRestricted+0x2c>
	...

08008be4 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8008be4:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <prvGetExpectedIdleTime+0x2c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	b103      	cbz	r3, 8008bec <prvGetExpectedIdleTime+0x8>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8008bea:	2301      	movs	r3, #1
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8008bec:	4a09      	ldr	r2, [pc, #36]	; (8008c14 <prvGetExpectedIdleTime+0x30>)
 8008bee:	6812      	ldr	r2, [r2, #0]
 8008bf0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8008bf2:	b950      	cbnz	r0, 8008c0a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8008bf4:	4a08      	ldr	r2, [pc, #32]	; (8008c18 <prvGetExpectedIdleTime+0x34>)
 8008bf6:	6812      	ldr	r2, [r2, #0]
 8008bf8:	2a01      	cmp	r2, #1
 8008bfa:	d807      	bhi.n	8008c0c <prvGetExpectedIdleTime+0x28>
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8008bfc:	b933      	cbnz	r3, 8008c0c <prvGetExpectedIdleTime+0x28>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8008bfe:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <prvGetExpectedIdleTime+0x38>)
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	4b07      	ldr	r3, [pc, #28]	; (8008c20 <prvGetExpectedIdleTime+0x3c>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	1ac0      	subs	r0, r0, r3
 8008c08:	4770      	bx	lr
			xReturn = 0;
 8008c0a:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	2000313c 	.word	0x2000313c
 8008c14:	20002cbc 	.word	0x20002cbc
 8008c18:	20002cc8 	.word	0x20002cc8
 8008c1c:	2000316c 	.word	0x2000316c
 8008c20:	200031b4 	.word	0x200031b4

08008c24 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c24:	4b08      	ldr	r3, [pc, #32]	; (8008c48 <prvResetNextTaskUnblockTime+0x24>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	b923      	cbnz	r3, 8008c36 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c2c:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <prvResetNextTaskUnblockTime+0x28>)
 8008c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c36:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <prvResetNextTaskUnblockTime+0x24>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	4b02      	ldr	r3, [pc, #8]	; (8008c4c <prvResetNextTaskUnblockTime+0x28>)
 8008c42:	601a      	str	r2, [r3, #0]
	}
}
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20002cc0 	.word	0x20002cc0
 8008c4c:	2000316c 	.word	0x2000316c

08008c50 <prvInitialiseNewTask>:
{
 8008c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c54:	4680      	mov	r8, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	4617      	mov	r7, r2
 8008c5a:	4699      	mov	r9, r3
 8008c5c:	9e08      	ldr	r6, [sp, #32]
 8008c5e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008c62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008c64:	0092      	lsls	r2, r2, #2
 8008c66:	21a5      	movs	r1, #165	; 0xa5
 8008c68:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008c6a:	f00b ff25 	bl	8014ab8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c70:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8008c74:	3a01      	subs	r2, #1
 8008c76:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c7a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8008c7e:	b3b5      	cbz	r5, 8008cee <prvInitialiseNewTask+0x9e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c80:	f04f 0c00 	mov.w	ip, #0
 8008c84:	f1bc 0f0f 	cmp.w	ip, #15
 8008c88:	d80b      	bhi.n	8008ca2 <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c8a:	f815 200c 	ldrb.w	r2, [r5, ip]
 8008c8e:	eb04 030c 	add.w	r3, r4, ip
 8008c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8008c96:	f815 300c 	ldrb.w	r3, [r5, ip]
 8008c9a:	b113      	cbz	r3, 8008ca2 <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c9c:	f10c 0c01 	add.w	ip, ip, #1
 8008ca0:	e7f0      	b.n	8008c84 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ca8:	2e37      	cmp	r6, #55	; 0x37
 8008caa:	d900      	bls.n	8008cae <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cac:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008cae:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008cb0:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008cb2:	2500      	movs	r5, #0
 8008cb4:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cb6:	1d20      	adds	r0, r4, #4
 8008cb8:	f7ff f9ed 	bl	8008096 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cbc:	f104 0018 	add.w	r0, r4, #24
 8008cc0:	f7ff f9e9 	bl	8008096 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cc4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc6:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8008cca:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ccc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8008cce:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cd0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cd4:	464a      	mov	r2, r9
 8008cd6:	4641      	mov	r1, r8
 8008cd8:	4638      	mov	r0, r7
 8008cda:	f7ff fa47 	bl	800816c <pxPortInitialiseStack>
 8008cde:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008ce0:	f1ba 0f00 	cmp.w	sl, #0
 8008ce4:	d001      	beq.n	8008cea <prvInitialiseNewTask+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ce6:	f8ca 4000 	str.w	r4, [sl]
}
 8008cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8008cf4:	e7d8      	b.n	8008ca8 <prvInitialiseNewTask+0x58>
	...

08008cf8 <prvInitialiseTaskLists>:
{
 8008cf8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cfa:	2400      	movs	r4, #0
 8008cfc:	e007      	b.n	8008d0e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cfe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8008d02:	0093      	lsls	r3, r2, #2
 8008d04:	480e      	ldr	r0, [pc, #56]	; (8008d40 <prvInitialiseTaskLists+0x48>)
 8008d06:	4418      	add	r0, r3
 8008d08:	f7ff f9ba 	bl	8008080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d0c:	3401      	adds	r4, #1
 8008d0e:	2c37      	cmp	r4, #55	; 0x37
 8008d10:	d9f5      	bls.n	8008cfe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8008d12:	4d0c      	ldr	r5, [pc, #48]	; (8008d44 <prvInitialiseTaskLists+0x4c>)
 8008d14:	4628      	mov	r0, r5
 8008d16:	f7ff f9b3 	bl	8008080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008d1a:	4c0b      	ldr	r4, [pc, #44]	; (8008d48 <prvInitialiseTaskLists+0x50>)
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f7ff f9af 	bl	8008080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008d22:	480a      	ldr	r0, [pc, #40]	; (8008d4c <prvInitialiseTaskLists+0x54>)
 8008d24:	f7ff f9ac 	bl	8008080 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8008d28:	4809      	ldr	r0, [pc, #36]	; (8008d50 <prvInitialiseTaskLists+0x58>)
 8008d2a:	f7ff f9a9 	bl	8008080 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8008d2e:	4809      	ldr	r0, [pc, #36]	; (8008d54 <prvInitialiseTaskLists+0x5c>)
 8008d30:	f7ff f9a6 	bl	8008080 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8008d34:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <prvInitialiseTaskLists+0x60>)
 8008d36:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008d38:	4b08      	ldr	r3, [pc, #32]	; (8008d5c <prvInitialiseTaskLists+0x64>)
 8008d3a:	601c      	str	r4, [r3, #0]
}
 8008d3c:	bd38      	pop	{r3, r4, r5, pc}
 8008d3e:	bf00      	nop
 8008d40:	20002cc8 	.word	0x20002cc8
 8008d44:	20003140 	.word	0x20003140
 8008d48:	20003154 	.word	0x20003154
 8008d4c:	20003174 	.word	0x20003174
 8008d50:	200031a0 	.word	0x200031a0
 8008d54:	2000318c 	.word	0x2000318c
 8008d58:	20002cc0 	.word	0x20002cc0
 8008d5c:	20002cc4 	.word	0x20002cc4

08008d60 <prvAddNewTaskToReadyList>:
{
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008d64:	f7ff fa26 	bl	80081b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008d68:	4a22      	ldr	r2, [pc, #136]	; (8008df4 <prvAddNewTaskToReadyList+0x94>)
 8008d6a:	6813      	ldr	r3, [r2, #0]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d70:	4b21      	ldr	r3, [pc, #132]	; (8008df8 <prvAddNewTaskToReadyList+0x98>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	b15b      	cbz	r3, 8008d8e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8008d76:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <prvAddNewTaskToReadyList+0x9c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	b96b      	cbnz	r3, 8008d98 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d7c:	4b1e      	ldr	r3, [pc, #120]	; (8008df8 <prvAddNewTaskToReadyList+0x98>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d807      	bhi.n	8008d98 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8008d88:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <prvAddNewTaskToReadyList+0x98>)
 8008d8a:	601c      	str	r4, [r3, #0]
 8008d8c:	e004      	b.n	8008d98 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8008d8e:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <prvAddNewTaskToReadyList+0x98>)
 8008d90:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d92:	6813      	ldr	r3, [r2, #0]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d029      	beq.n	8008dec <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8008d98:	4a19      	ldr	r2, [pc, #100]	; (8008e00 <prvAddNewTaskToReadyList+0xa0>)
 8008d9a:	6813      	ldr	r3, [r2, #0]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008da0:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008da2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008da4:	4b17      	ldr	r3, [pc, #92]	; (8008e04 <prvAddNewTaskToReadyList+0xa4>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4298      	cmp	r0, r3
 8008daa:	d901      	bls.n	8008db0 <prvAddNewTaskToReadyList+0x50>
 8008dac:	4b15      	ldr	r3, [pc, #84]	; (8008e04 <prvAddNewTaskToReadyList+0xa4>)
 8008dae:	6018      	str	r0, [r3, #0]
 8008db0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008db4:	1d21      	adds	r1, r4, #4
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <prvAddNewTaskToReadyList+0xa8>)
 8008db8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008dbc:	f7ff f96e 	bl	800809c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008dc0:	f7ff fa1a 	bl	80081f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008dc4:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <prvAddNewTaskToReadyList+0x9c>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	b17b      	cbz	r3, 8008dea <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dca:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <prvAddNewTaskToReadyList+0x98>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d209      	bcs.n	8008dea <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 8008dd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dde:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	f3bf 8f6f 	isb	sy
}
 8008dea:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8008dec:	f7ff ff84 	bl	8008cf8 <prvInitialiseTaskLists>
 8008df0:	e7d2      	b.n	8008d98 <prvAddNewTaskToReadyList+0x38>
 8008df2:	bf00      	nop
 8008df4:	20003128 	.word	0x20003128
 8008df8:	20002cbc 	.word	0x20002cbc
 8008dfc:	20003188 	.word	0x20003188
 8008e00:	20003138 	.word	0x20003138
 8008e04:	2000313c 	.word	0x2000313c
 8008e08:	20002cc8 	.word	0x20002cc8

08008e0c <prvDeleteTCB>:
	{
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e10:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8008e14:	b163      	cbz	r3, 8008e30 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d011      	beq.n	8008e3e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d00e      	beq.n	8008e3c <prvDeleteTCB+0x30>
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	e7fe      	b.n	8008e2e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8008e30:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008e32:	f7ff f8ed 	bl	8008010 <vPortFree>
				vPortFree( pxTCB );
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7ff f8ea 	bl	8008010 <vPortFree>
	}
 8008e3c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8008e3e:	f7ff f8e7 	bl	8008010 <vPortFree>
 8008e42:	e7fb      	b.n	8008e3c <prvDeleteTCB+0x30>

08008e44 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e44:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <prvCheckTasksWaitingTermination+0x40>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	b1d3      	cbz	r3, 8008e80 <prvCheckTasksWaitingTermination+0x3c>
{
 8008e4a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8008e4c:	f7ff f9b2 	bl	80081b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e50:	4b0d      	ldr	r3, [pc, #52]	; (8008e88 <prvCheckTasksWaitingTermination+0x44>)
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e56:	1d20      	adds	r0, r4, #4
 8008e58:	f7ff f944 	bl	80080e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e5c:	4a0b      	ldr	r2, [pc, #44]	; (8008e8c <prvCheckTasksWaitingTermination+0x48>)
 8008e5e:	6813      	ldr	r3, [r2, #0]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e64:	4a07      	ldr	r2, [pc, #28]	; (8008e84 <prvCheckTasksWaitingTermination+0x40>)
 8008e66:	6813      	ldr	r3, [r2, #0]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8008e6c:	f7ff f9c4 	bl	80081f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008e70:	4620      	mov	r0, r4
 8008e72:	f7ff ffcb 	bl	8008e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e76:	4b03      	ldr	r3, [pc, #12]	; (8008e84 <prvCheckTasksWaitingTermination+0x40>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e6      	bne.n	8008e4c <prvCheckTasksWaitingTermination+0x8>
}
 8008e7e:	bd10      	pop	{r4, pc}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	2000312c 	.word	0x2000312c
 8008e88:	200031a0 	.word	0x200031a0
 8008e8c:	20003128 	.word	0x20003128

08008e90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	4604      	mov	r4, r0
 8008e94:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e96:	4b17      	ldr	r3, [pc, #92]	; (8008ef4 <prvAddCurrentTaskToDelayedList+0x64>)
 8008e98:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e9a:	4b17      	ldr	r3, [pc, #92]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x68>)
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	3004      	adds	r0, #4
 8008ea0:	f7ff f920 	bl	80080e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ea4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008ea8:	d00d      	beq.n	8008ec6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eaa:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eac:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x68>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008eb2:	42a6      	cmp	r6, r4
 8008eb4:	d910      	bls.n	8008ed8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eb6:	4b11      	ldr	r3, [pc, #68]	; (8008efc <prvAddCurrentTaskToDelayedList+0x6c>)
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x68>)
 8008ebc:	6819      	ldr	r1, [r3, #0]
 8008ebe:	3104      	adds	r1, #4
 8008ec0:	f7ff f8f7 	bl	80080b2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ec4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ec6:	2d00      	cmp	r5, #0
 8008ec8:	d0ef      	beq.n	8008eaa <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eca:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x68>)
 8008ecc:	6819      	ldr	r1, [r3, #0]
 8008ece:	3104      	adds	r1, #4
 8008ed0:	480b      	ldr	r0, [pc, #44]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x70>)
 8008ed2:	f7ff f8e3 	bl	800809c <vListInsertEnd>
 8008ed6:	e7f5      	b.n	8008ec4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <prvAddCurrentTaskToDelayedList+0x74>)
 8008eda:	6818      	ldr	r0, [r3, #0]
 8008edc:	4b06      	ldr	r3, [pc, #24]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x68>)
 8008ede:	6819      	ldr	r1, [r3, #0]
 8008ee0:	3104      	adds	r1, #4
 8008ee2:	f7ff f8e6 	bl	80080b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ee6:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <prvAddCurrentTaskToDelayedList+0x78>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	42a3      	cmp	r3, r4
 8008eec:	d9ea      	bls.n	8008ec4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 8008eee:	4b06      	ldr	r3, [pc, #24]	; (8008f08 <prvAddCurrentTaskToDelayedList+0x78>)
 8008ef0:	601c      	str	r4, [r3, #0]
}
 8008ef2:	e7e7      	b.n	8008ec4 <prvAddCurrentTaskToDelayedList+0x34>
 8008ef4:	200031b4 	.word	0x200031b4
 8008ef8:	20002cbc 	.word	0x20002cbc
 8008efc:	20002cc4 	.word	0x20002cc4
 8008f00:	2000318c 	.word	0x2000318c
 8008f04:	20002cc0 	.word	0x20002cc0
 8008f08:	2000316c 	.word	0x2000316c

08008f0c <xTaskCreateStatic>:
	{
 8008f0c:	b530      	push	{r4, r5, lr}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008f12:	b17c      	cbz	r4, 8008f34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f16:	b1b5      	cbz	r5, 8008f46 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f18:	255c      	movs	r5, #92	; 0x5c
 8008f1a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f1c:	9d04      	ldr	r5, [sp, #16]
 8008f1e:	2d5c      	cmp	r5, #92	; 0x5c
 8008f20:	d01a      	beq.n	8008f58 <xTaskCreateStatic+0x4c>
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	e7fe      	b.n	8008f32 <xTaskCreateStatic+0x26>
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8008f44:	e7fe      	b.n	8008f44 <xTaskCreateStatic+0x38>
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8008f56:	e7fe      	b.n	8008f56 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f58:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f5c:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f5e:	2402      	movs	r4, #2
 8008f60:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f64:	2400      	movs	r4, #0
 8008f66:	9403      	str	r4, [sp, #12]
 8008f68:	9502      	str	r5, [sp, #8]
 8008f6a:	ac05      	add	r4, sp, #20
 8008f6c:	9401      	str	r4, [sp, #4]
 8008f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f70:	9400      	str	r4, [sp, #0]
 8008f72:	f7ff fe6d 	bl	8008c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f76:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008f78:	f7ff fef2 	bl	8008d60 <prvAddNewTaskToReadyList>
	}
 8008f7c:	9805      	ldr	r0, [sp, #20]
 8008f7e:	b007      	add	sp, #28
 8008f80:	bd30      	pop	{r4, r5, pc}

08008f82 <xTaskCreate>:
	{
 8008f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f86:	b085      	sub	sp, #20
 8008f88:	4607      	mov	r7, r0
 8008f8a:	4688      	mov	r8, r1
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f90:	0090      	lsls	r0, r2, #2
 8008f92:	f7fe ffc5 	bl	8007f20 <pvPortMalloc>
			if( pxStack != NULL )
 8008f96:	b300      	cbz	r0, 8008fda <xTaskCreate+0x58>
 8008f98:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f9a:	205c      	movs	r0, #92	; 0x5c
 8008f9c:	f7fe ffc0 	bl	8007f20 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	b1b0      	cbz	r0, 8008fd2 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8008fa4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8008fa8:	b1e5      	cbz	r5, 8008fe4 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008faa:	2300      	movs	r3, #0
 8008fac:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fb0:	9303      	str	r3, [sp, #12]
 8008fb2:	9502      	str	r5, [sp, #8]
 8008fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fb6:	9301      	str	r3, [sp, #4]
 8008fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	4633      	mov	r3, r6
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	4641      	mov	r1, r8
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	f7ff fe44 	bl	8008c50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fc8:	4628      	mov	r0, r5
 8008fca:	f7ff fec9 	bl	8008d60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fce:	2001      	movs	r0, #1
 8008fd0:	e005      	b.n	8008fde <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8008fd2:	4648      	mov	r0, r9
 8008fd4:	f7ff f81c 	bl	8008010 <vPortFree>
 8008fd8:	e7e6      	b.n	8008fa8 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fda:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8008fde:	b005      	add	sp, #20
 8008fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008fe8:	e7f9      	b.n	8008fde <xTaskCreate+0x5c>
	...

08008fec <vTaskStartScheduler>:
{
 8008fec:	b510      	push	{r4, lr}
 8008fee:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008ff0:	2400      	movs	r4, #0
 8008ff2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008ff4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ff6:	aa07      	add	r2, sp, #28
 8008ff8:	a906      	add	r1, sp, #24
 8008ffa:	a805      	add	r0, sp, #20
 8008ffc:	f7fe ff16 	bl	8007e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009000:	9b05      	ldr	r3, [sp, #20]
 8009002:	9302      	str	r3, [sp, #8]
 8009004:	9b06      	ldr	r3, [sp, #24]
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	9400      	str	r4, [sp, #0]
 800900a:	4623      	mov	r3, r4
 800900c:	9a07      	ldr	r2, [sp, #28]
 800900e:	4918      	ldr	r1, [pc, #96]	; (8009070 <vTaskStartScheduler+0x84>)
 8009010:	4818      	ldr	r0, [pc, #96]	; (8009074 <vTaskStartScheduler+0x88>)
 8009012:	f7ff ff7b 	bl	8008f0c <xTaskCreateStatic>
 8009016:	4b18      	ldr	r3, [pc, #96]	; (8009078 <vTaskStartScheduler+0x8c>)
 8009018:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800901a:	b140      	cbz	r0, 800902e <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800901c:	f000 fd00 	bl	8009a20 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009020:	2801      	cmp	r0, #1
 8009022:	d006      	beq.n	8009032 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009024:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009028:	d018      	beq.n	800905c <vTaskStartScheduler+0x70>
}
 800902a:	b008      	add	sp, #32
 800902c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800902e:	2000      	movs	r0, #0
 8009030:	e7f6      	b.n	8009020 <vTaskStartScheduler+0x34>
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009042:	4b0e      	ldr	r3, [pc, #56]	; (800907c <vTaskStartScheduler+0x90>)
 8009044:	f04f 32ff 	mov.w	r2, #4294967295
 8009048:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800904a:	4b0d      	ldr	r3, [pc, #52]	; (8009080 <vTaskStartScheduler+0x94>)
 800904c:	2201      	movs	r2, #1
 800904e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009050:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <vTaskStartScheduler+0x98>)
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009056:	f7ff f9e3 	bl	8008420 <xPortStartScheduler>
 800905a:	e7e6      	b.n	800902a <vTaskStartScheduler+0x3e>
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800906c:	e7fe      	b.n	800906c <vTaskStartScheduler+0x80>
 800906e:	bf00      	nop
 8009070:	08015310 	.word	0x08015310
 8009074:	080092e9 	.word	0x080092e9
 8009078:	20003168 	.word	0x20003168
 800907c:	2000316c 	.word	0x2000316c
 8009080:	20003188 	.word	0x20003188
 8009084:	200031b4 	.word	0x200031b4

08009088 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009088:	4a02      	ldr	r2, [pc, #8]	; (8009094 <vTaskSuspendAll+0xc>)
 800908a:	6813      	ldr	r3, [r2, #0]
 800908c:	3301      	adds	r3, #1
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20003134 	.word	0x20003134

08009098 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009098:	4b01      	ldr	r3, [pc, #4]	; (80090a0 <xTaskGetTickCount+0x8>)
 800909a:	6818      	ldr	r0, [r3, #0]
}
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	200031b4 	.word	0x200031b4

080090a4 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <vTaskStepTick+0x2c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4403      	add	r3, r0
 80090aa:	4a0a      	ldr	r2, [pc, #40]	; (80090d4 <vTaskStepTick+0x30>)
 80090ac:	6812      	ldr	r2, [r2, #0]
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d908      	bls.n	80090c4 <vTaskStepTick+0x20>
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	e7fe      	b.n	80090c2 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 80090c4:	4a02      	ldr	r2, [pc, #8]	; (80090d0 <vTaskStepTick+0x2c>)
 80090c6:	6813      	ldr	r3, [r2, #0]
 80090c8:	4418      	add	r0, r3
 80090ca:	6010      	str	r0, [r2, #0]
	}
 80090cc:	4770      	bx	lr
 80090ce:	bf00      	nop
 80090d0:	200031b4 	.word	0x200031b4
 80090d4:	2000316c 	.word	0x2000316c

080090d8 <xTaskIncrementTick>:
{
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090da:	4b3a      	ldr	r3, [pc, #232]	; (80091c4 <xTaskIncrementTick+0xec>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d164      	bne.n	80091ac <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090e2:	4b39      	ldr	r3, [pc, #228]	; (80091c8 <xTaskIncrementTick+0xf0>)
 80090e4:	681d      	ldr	r5, [r3, #0]
 80090e6:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80090e8:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090ea:	b9c5      	cbnz	r5, 800911e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80090ec:	4b37      	ldr	r3, [pc, #220]	; (80091cc <xTaskIncrementTick+0xf4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	b143      	cbz	r3, 8009106 <xTaskIncrementTick+0x2e>
 80090f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	e7fe      	b.n	8009104 <xTaskIncrementTick+0x2c>
 8009106:	4a31      	ldr	r2, [pc, #196]	; (80091cc <xTaskIncrementTick+0xf4>)
 8009108:	6811      	ldr	r1, [r2, #0]
 800910a:	4b31      	ldr	r3, [pc, #196]	; (80091d0 <xTaskIncrementTick+0xf8>)
 800910c:	6818      	ldr	r0, [r3, #0]
 800910e:	6010      	str	r0, [r2, #0]
 8009110:	6019      	str	r1, [r3, #0]
 8009112:	4a30      	ldr	r2, [pc, #192]	; (80091d4 <xTaskIncrementTick+0xfc>)
 8009114:	6813      	ldr	r3, [r2, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	6013      	str	r3, [r2, #0]
 800911a:	f7ff fd83 	bl	8008c24 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800911e:	4b2e      	ldr	r3, [pc, #184]	; (80091d8 <xTaskIncrementTick+0x100>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	42ab      	cmp	r3, r5
 8009124:	d938      	bls.n	8009198 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8009126:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009128:	4b2c      	ldr	r3, [pc, #176]	; (80091dc <xTaskIncrementTick+0x104>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009132:	009a      	lsls	r2, r3, #2
 8009134:	4b2a      	ldr	r3, [pc, #168]	; (80091e0 <xTaskIncrementTick+0x108>)
 8009136:	589b      	ldr	r3, [r3, r2]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d93c      	bls.n	80091b6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800913c:	2701      	movs	r7, #1
 800913e:	e03a      	b.n	80091b6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8009140:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009142:	4b22      	ldr	r3, [pc, #136]	; (80091cc <xTaskIncrementTick+0xf4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	b343      	cbz	r3, 800919c <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800914a:	4b20      	ldr	r3, [pc, #128]	; (80091cc <xTaskIncrementTick+0xf4>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009152:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8009154:	429d      	cmp	r5, r3
 8009156:	d326      	bcc.n	80091a6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009158:	1d26      	adds	r6, r4, #4
 800915a:	4630      	mov	r0, r6
 800915c:	f7fe ffc2 	bl	80080e4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009160:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009162:	b11b      	cbz	r3, 800916c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009164:	f104 0018 	add.w	r0, r4, #24
 8009168:	f7fe ffbc 	bl	80080e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800916c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800916e:	4a1d      	ldr	r2, [pc, #116]	; (80091e4 <xTaskIncrementTick+0x10c>)
 8009170:	6812      	ldr	r2, [r2, #0]
 8009172:	4293      	cmp	r3, r2
 8009174:	d901      	bls.n	800917a <xTaskIncrementTick+0xa2>
 8009176:	4a1b      	ldr	r2, [pc, #108]	; (80091e4 <xTaskIncrementTick+0x10c>)
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800917e:	009a      	lsls	r2, r3, #2
 8009180:	4631      	mov	r1, r6
 8009182:	4817      	ldr	r0, [pc, #92]	; (80091e0 <xTaskIncrementTick+0x108>)
 8009184:	4410      	add	r0, r2
 8009186:	f7fe ff89 	bl	800809c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800918a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800918c:	4b13      	ldr	r3, [pc, #76]	; (80091dc <xTaskIncrementTick+0x104>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	429a      	cmp	r2, r3
 8009194:	d2d4      	bcs.n	8009140 <xTaskIncrementTick+0x68>
 8009196:	e7d4      	b.n	8009142 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8009198:	2700      	movs	r7, #0
 800919a:	e7d2      	b.n	8009142 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800919c:	4b0e      	ldr	r3, [pc, #56]	; (80091d8 <xTaskIncrementTick+0x100>)
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	601a      	str	r2, [r3, #0]
					break;
 80091a4:	e7c0      	b.n	8009128 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 80091a6:	4a0c      	ldr	r2, [pc, #48]	; (80091d8 <xTaskIncrementTick+0x100>)
 80091a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80091aa:	e7bd      	b.n	8009128 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 80091ac:	4a0e      	ldr	r2, [pc, #56]	; (80091e8 <xTaskIncrementTick+0x110>)
 80091ae:	6813      	ldr	r3, [r2, #0]
 80091b0:	3301      	adds	r3, #1
 80091b2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80091b4:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 80091b6:	4b0d      	ldr	r3, [pc, #52]	; (80091ec <xTaskIncrementTick+0x114>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	b103      	cbz	r3, 80091be <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 80091bc:	2701      	movs	r7, #1
}
 80091be:	4638      	mov	r0, r7
 80091c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20003134 	.word	0x20003134
 80091c8:	200031b4 	.word	0x200031b4
 80091cc:	20002cc0 	.word	0x20002cc0
 80091d0:	20002cc4 	.word	0x20002cc4
 80091d4:	20003170 	.word	0x20003170
 80091d8:	2000316c 	.word	0x2000316c
 80091dc:	20002cbc 	.word	0x20002cbc
 80091e0:	20002cc8 	.word	0x20002cc8
 80091e4:	2000313c 	.word	0x2000313c
 80091e8:	20003130 	.word	0x20003130
 80091ec:	200031b8 	.word	0x200031b8

080091f0 <xTaskResumeAll>:
{
 80091f0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 80091f2:	4b35      	ldr	r3, [pc, #212]	; (80092c8 <xTaskResumeAll+0xd8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	b943      	cbnz	r3, 800920a <xTaskResumeAll+0x1a>
 80091f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	e7fe      	b.n	8009208 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800920a:	f7fe ffd3 	bl	80081b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800920e:	4b2e      	ldr	r3, [pc, #184]	; (80092c8 <xTaskResumeAll+0xd8>)
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	3a01      	subs	r2, #1
 8009214:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d14f      	bne.n	80092bc <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800921c:	4b2b      	ldr	r3, [pc, #172]	; (80092cc <xTaskResumeAll+0xdc>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	b90b      	cbnz	r3, 8009226 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009222:	2400      	movs	r4, #0
 8009224:	e04b      	b.n	80092be <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8009226:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009228:	4b29      	ldr	r3, [pc, #164]	; (80092d0 <xTaskResumeAll+0xe0>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	b31b      	cbz	r3, 8009276 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800922e:	4b28      	ldr	r3, [pc, #160]	; (80092d0 <xTaskResumeAll+0xe0>)
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009234:	f104 0018 	add.w	r0, r4, #24
 8009238:	f7fe ff54 	bl	80080e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800923c:	1d25      	adds	r5, r4, #4
 800923e:	4628      	mov	r0, r5
 8009240:	f7fe ff50 	bl	80080e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009244:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009246:	4b23      	ldr	r3, [pc, #140]	; (80092d4 <xTaskResumeAll+0xe4>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4298      	cmp	r0, r3
 800924c:	d901      	bls.n	8009252 <xTaskResumeAll+0x62>
 800924e:	4b21      	ldr	r3, [pc, #132]	; (80092d4 <xTaskResumeAll+0xe4>)
 8009250:	6018      	str	r0, [r3, #0]
 8009252:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009256:	4629      	mov	r1, r5
 8009258:	4b1f      	ldr	r3, [pc, #124]	; (80092d8 <xTaskResumeAll+0xe8>)
 800925a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800925e:	f7fe ff1d 	bl	800809c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009262:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009264:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <xTaskResumeAll+0xec>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	429a      	cmp	r2, r3
 800926c:	d3dc      	bcc.n	8009228 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800926e:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <xTaskResumeAll+0xf0>)
 8009270:	2201      	movs	r2, #1
 8009272:	601a      	str	r2, [r3, #0]
 8009274:	e7d8      	b.n	8009228 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009276:	b10c      	cbz	r4, 800927c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009278:	f7ff fcd4 	bl	8008c24 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800927c:	4b19      	ldr	r3, [pc, #100]	; (80092e4 <xTaskResumeAll+0xf4>)
 800927e:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009280:	b984      	cbnz	r4, 80092a4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8009282:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <xTaskResumeAll+0xf0>)
 8009284:	681c      	ldr	r4, [r3, #0]
 8009286:	b1d4      	cbz	r4, 80092be <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8009288:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800928c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009290:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800929c:	2401      	movs	r4, #1
 800929e:	e00e      	b.n	80092be <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80092a0:	3c01      	subs	r4, #1
 80092a2:	d007      	beq.n	80092b4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 80092a4:	f7ff ff18 	bl	80090d8 <xTaskIncrementTick>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0f9      	beq.n	80092a0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80092ac:	4b0c      	ldr	r3, [pc, #48]	; (80092e0 <xTaskResumeAll+0xf0>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	e7f5      	b.n	80092a0 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 80092b4:	4b0b      	ldr	r3, [pc, #44]	; (80092e4 <xTaskResumeAll+0xf4>)
 80092b6:	2200      	movs	r2, #0
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	e7e2      	b.n	8009282 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 80092bc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80092be:	f7fe ff9b 	bl	80081f8 <vPortExitCritical>
}
 80092c2:	4620      	mov	r0, r4
 80092c4:	bd38      	pop	{r3, r4, r5, pc}
 80092c6:	bf00      	nop
 80092c8:	20003134 	.word	0x20003134
 80092cc:	20003128 	.word	0x20003128
 80092d0:	20003174 	.word	0x20003174
 80092d4:	2000313c 	.word	0x2000313c
 80092d8:	20002cc8 	.word	0x20002cc8
 80092dc:	20002cbc 	.word	0x20002cbc
 80092e0:	200031b8 	.word	0x200031b8
 80092e4:	20003130 	.word	0x20003130

080092e8 <prvIdleTask>:
{
 80092e8:	b508      	push	{r3, lr}
 80092ea:	e003      	b.n	80092f4 <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80092ec:	f7ff fc7a 	bl	8008be4 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80092f0:	2801      	cmp	r0, #1
 80092f2:	d810      	bhi.n	8009316 <prvIdleTask+0x2e>
		prvCheckTasksWaitingTermination();
 80092f4:	f7ff fda6 	bl	8008e44 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80092f8:	4b14      	ldr	r3, [pc, #80]	; (800934c <prvIdleTask+0x64>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d9f5      	bls.n	80092ec <prvIdleTask+0x4>
				taskYIELD();
 8009300:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009308:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	e7ea      	b.n	80092ec <prvIdleTask+0x4>
				vTaskSuspendAll();
 8009316:	f7ff feb7 	bl	8009088 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800931a:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <prvIdleTask+0x68>)
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <prvIdleTask+0x6c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	429a      	cmp	r2, r3
 8009324:	d306      	bcc.n	8009334 <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8009326:	f7ff fc5d 	bl	8008be4 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800932a:	2801      	cmp	r0, #1
 800932c:	d80b      	bhi.n	8009346 <prvIdleTask+0x5e>
				( void ) xTaskResumeAll();
 800932e:	f7ff ff5f 	bl	80091f0 <xTaskResumeAll>
 8009332:	e7df      	b.n	80092f4 <prvIdleTask+0xc>
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8009344:	e7fe      	b.n	8009344 <prvIdleTask+0x5c>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8009346:	f7fe ffab 	bl	80082a0 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 800934a:	e7f0      	b.n	800932e <prvIdleTask+0x46>
 800934c:	20002cc8 	.word	0x20002cc8
 8009350:	2000316c 	.word	0x2000316c
 8009354:	200031b4 	.word	0x200031b4

08009358 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009358:	4b1f      	ldr	r3, [pc, #124]	; (80093d8 <vTaskSwitchContext+0x80>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	b11b      	cbz	r3, 8009366 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800935e:	4b1f      	ldr	r3, [pc, #124]	; (80093dc <vTaskSwitchContext+0x84>)
 8009360:	2201      	movs	r2, #1
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009366:	4b1d      	ldr	r3, [pc, #116]	; (80093dc <vTaskSwitchContext+0x84>)
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800936c:	4b1c      	ldr	r3, [pc, #112]	; (80093e0 <vTaskSwitchContext+0x88>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009374:	008a      	lsls	r2, r1, #2
 8009376:	491b      	ldr	r1, [pc, #108]	; (80093e4 <vTaskSwitchContext+0x8c>)
 8009378:	588a      	ldr	r2, [r1, r2]
 800937a:	b95a      	cbnz	r2, 8009394 <vTaskSwitchContext+0x3c>
 800937c:	b10b      	cbz	r3, 8009382 <vTaskSwitchContext+0x2a>
 800937e:	3b01      	subs	r3, #1
 8009380:	e7f6      	b.n	8009370 <vTaskSwitchContext+0x18>
 8009382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009386:	f383 8811 	msr	BASEPRI, r3
 800938a:	f3bf 8f6f 	isb	sy
 800938e:	f3bf 8f4f 	dsb	sy
 8009392:	e7fe      	b.n	8009392 <vTaskSwitchContext+0x3a>
 8009394:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009398:	0082      	lsls	r2, r0, #2
 800939a:	440a      	add	r2, r1
 800939c:	6850      	ldr	r0, [r2, #4]
 800939e:	6840      	ldr	r0, [r0, #4]
 80093a0:	6050      	str	r0, [r2, #4]
 80093a2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80093a6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80093aa:	3208      	adds	r2, #8
 80093ac:	4411      	add	r1, r2
 80093ae:	4288      	cmp	r0, r1
 80093b0:	d00b      	beq.n	80093ca <vTaskSwitchContext+0x72>
 80093b2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80093b6:	0091      	lsls	r1, r2, #2
 80093b8:	4a0a      	ldr	r2, [pc, #40]	; (80093e4 <vTaskSwitchContext+0x8c>)
 80093ba:	440a      	add	r2, r1
 80093bc:	6852      	ldr	r2, [r2, #4]
 80093be:	68d1      	ldr	r1, [r2, #12]
 80093c0:	4a09      	ldr	r2, [pc, #36]	; (80093e8 <vTaskSwitchContext+0x90>)
 80093c2:	6011      	str	r1, [r2, #0]
 80093c4:	4a06      	ldr	r2, [pc, #24]	; (80093e0 <vTaskSwitchContext+0x88>)
 80093c6:	6013      	str	r3, [r2, #0]
}
 80093c8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ca:	6840      	ldr	r0, [r0, #4]
 80093cc:	4662      	mov	r2, ip
 80093ce:	0091      	lsls	r1, r2, #2
 80093d0:	4a04      	ldr	r2, [pc, #16]	; (80093e4 <vTaskSwitchContext+0x8c>)
 80093d2:	440a      	add	r2, r1
 80093d4:	6050      	str	r0, [r2, #4]
 80093d6:	e7ec      	b.n	80093b2 <vTaskSwitchContext+0x5a>
 80093d8:	20003134 	.word	0x20003134
 80093dc:	200031b8 	.word	0x200031b8
 80093e0:	2000313c 	.word	0x2000313c
 80093e4:	20002cc8 	.word	0x20002cc8
 80093e8:	20002cbc 	.word	0x20002cbc

080093ec <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80093ec:	b158      	cbz	r0, 8009406 <vTaskPlaceOnEventList+0x1a>
{
 80093ee:	b510      	push	{r4, lr}
 80093f0:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093f2:	4a09      	ldr	r2, [pc, #36]	; (8009418 <vTaskPlaceOnEventList+0x2c>)
 80093f4:	6811      	ldr	r1, [r2, #0]
 80093f6:	3118      	adds	r1, #24
 80093f8:	f7fe fe5b 	bl	80080b2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093fc:	2101      	movs	r1, #1
 80093fe:	4620      	mov	r0, r4
 8009400:	f7ff fd46 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
}
 8009404:	bd10      	pop	{r4, pc}
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009416:	e7fe      	b.n	8009416 <vTaskPlaceOnEventList+0x2a>
 8009418:	20002cbc 	.word	0x20002cbc

0800941c <vTaskPlaceOnEventListRestricted>:
	{
 800941c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800941e:	b170      	cbz	r0, 800943e <vTaskPlaceOnEventListRestricted+0x22>
 8009420:	460d      	mov	r5, r1
 8009422:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009424:	4a0a      	ldr	r2, [pc, #40]	; (8009450 <vTaskPlaceOnEventListRestricted+0x34>)
 8009426:	6811      	ldr	r1, [r2, #0]
 8009428:	3118      	adds	r1, #24
 800942a:	f7fe fe37 	bl	800809c <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800942e:	b10c      	cbz	r4, 8009434 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8009430:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009434:	4621      	mov	r1, r4
 8009436:	4628      	mov	r0, r5
 8009438:	f7ff fd2a 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
	}
 800943c:	bd38      	pop	{r3, r4, r5, pc}
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800944e:	e7fe      	b.n	800944e <vTaskPlaceOnEventListRestricted+0x32>
 8009450:	20002cbc 	.word	0x20002cbc

08009454 <xTaskRemoveFromEventList>:
{
 8009454:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009456:	68c3      	ldr	r3, [r0, #12]
 8009458:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800945a:	b334      	cbz	r4, 80094aa <xTaskRemoveFromEventList+0x56>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800945c:	f104 0518 	add.w	r5, r4, #24
 8009460:	4628      	mov	r0, r5
 8009462:	f7fe fe3f 	bl	80080e4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009466:	4b19      	ldr	r3, [pc, #100]	; (80094cc <xTaskRemoveFromEventList+0x78>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	bb3b      	cbnz	r3, 80094bc <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800946c:	1d25      	adds	r5, r4, #4
 800946e:	4628      	mov	r0, r5
 8009470:	f7fe fe38 	bl	80080e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009474:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009476:	4b16      	ldr	r3, [pc, #88]	; (80094d0 <xTaskRemoveFromEventList+0x7c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4298      	cmp	r0, r3
 800947c:	d901      	bls.n	8009482 <xTaskRemoveFromEventList+0x2e>
 800947e:	4b14      	ldr	r3, [pc, #80]	; (80094d0 <xTaskRemoveFromEventList+0x7c>)
 8009480:	6018      	str	r0, [r3, #0]
 8009482:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009486:	4629      	mov	r1, r5
 8009488:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <xTaskRemoveFromEventList+0x80>)
 800948a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800948e:	f7fe fe05 	bl	800809c <vListInsertEnd>
			prvResetNextTaskUnblockTime();
 8009492:	f7ff fbc7 	bl	8008c24 <prvResetNextTaskUnblockTime>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009496:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009498:	4b0f      	ldr	r3, [pc, #60]	; (80094d8 <xTaskRemoveFromEventList+0x84>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	429a      	cmp	r2, r3
 80094a0:	d911      	bls.n	80094c6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 80094a2:	2001      	movs	r0, #1
 80094a4:	4b0d      	ldr	r3, [pc, #52]	; (80094dc <xTaskRemoveFromEventList+0x88>)
 80094a6:	6018      	str	r0, [r3, #0]
}
 80094a8:	bd38      	pop	{r3, r4, r5, pc}
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80094ba:	e7fe      	b.n	80094ba <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094bc:	4629      	mov	r1, r5
 80094be:	4808      	ldr	r0, [pc, #32]	; (80094e0 <xTaskRemoveFromEventList+0x8c>)
 80094c0:	f7fe fdec 	bl	800809c <vListInsertEnd>
 80094c4:	e7e7      	b.n	8009496 <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 80094c6:	2000      	movs	r0, #0
	return xReturn;
 80094c8:	e7ee      	b.n	80094a8 <xTaskRemoveFromEventList+0x54>
 80094ca:	bf00      	nop
 80094cc:	20003134 	.word	0x20003134
 80094d0:	2000313c 	.word	0x2000313c
 80094d4:	20002cc8 	.word	0x20002cc8
 80094d8:	20002cbc 	.word	0x20002cbc
 80094dc:	200031b8 	.word	0x200031b8
 80094e0:	20003174 	.word	0x20003174

080094e4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094e4:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <vTaskInternalSetTimeOutState+0x10>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094ea:	4b03      	ldr	r3, [pc, #12]	; (80094f8 <vTaskInternalSetTimeOutState+0x14>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6043      	str	r3, [r0, #4]
}
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	20003170 	.word	0x20003170
 80094f8:	200031b4 	.word	0x200031b4

080094fc <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80094fc:	b1d8      	cbz	r0, 8009536 <xTaskCheckForTimeOut+0x3a>
{
 80094fe:	b570      	push	{r4, r5, r6, lr}
 8009500:	460c      	mov	r4, r1
 8009502:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009504:	b301      	cbz	r1, 8009548 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 8009506:	f7fe fe55 	bl	80081b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800950a:	4b1b      	ldr	r3, [pc, #108]	; (8009578 <xTaskCheckForTimeOut+0x7c>)
 800950c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800950e:	686b      	ldr	r3, [r5, #4]
 8009510:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8009512:	6822      	ldr	r2, [r4, #0]
 8009514:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009518:	d027      	beq.n	800956a <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800951a:	4e18      	ldr	r6, [pc, #96]	; (800957c <xTaskCheckForTimeOut+0x80>)
 800951c:	6836      	ldr	r6, [r6, #0]
 800951e:	f8d5 c000 	ldr.w	ip, [r5]
 8009522:	45b4      	cmp	ip, r6
 8009524:	d001      	beq.n	800952a <xTaskCheckForTimeOut+0x2e>
 8009526:	428b      	cmp	r3, r1
 8009528:	d924      	bls.n	8009574 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800952a:	4282      	cmp	r2, r0
 800952c:	d815      	bhi.n	800955a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 800952e:	2300      	movs	r3, #0
 8009530:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009532:	2401      	movs	r4, #1
 8009534:	e01a      	b.n	800956c <xTaskCheckForTimeOut+0x70>
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8009546:	e7fe      	b.n	8009546 <xTaskCheckForTimeOut+0x4a>
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8009558:	e7fe      	b.n	8009558 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	4413      	add	r3, r2
 800955e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009560:	4628      	mov	r0, r5
 8009562:	f7ff ffbf 	bl	80094e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009566:	2400      	movs	r4, #0
 8009568:	e000      	b.n	800956c <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 800956a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800956c:	f7fe fe44 	bl	80081f8 <vPortExitCritical>
}
 8009570:	4620      	mov	r0, r4
 8009572:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8009574:	2401      	movs	r4, #1
 8009576:	e7f9      	b.n	800956c <xTaskCheckForTimeOut+0x70>
 8009578:	200031b4 	.word	0x200031b4
 800957c:	20003170 	.word	0x20003170

08009580 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009580:	4b01      	ldr	r3, [pc, #4]	; (8009588 <vTaskMissedYield+0x8>)
 8009582:	2201      	movs	r2, #1
 8009584:	601a      	str	r2, [r3, #0]
}
 8009586:	4770      	bx	lr
 8009588:	200031b8 	.word	0x200031b8

0800958c <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800958c:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <eTaskConfirmSleepModeStatus+0x2c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	b95b      	cbnz	r3, 80095aa <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 8009592:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <eTaskConfirmSleepModeStatus+0x30>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	b953      	cbnz	r3, 80095ae <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8009598:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <eTaskConfirmSleepModeStatus+0x34>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <eTaskConfirmSleepModeStatus+0x38>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d005      	beq.n	80095b2 <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 80095a6:	2001      	movs	r0, #1
 80095a8:	4770      	bx	lr
			eReturn = eAbortSleep;
 80095aa:	2000      	movs	r0, #0
 80095ac:	4770      	bx	lr
			eReturn = eAbortSleep;
 80095ae:	2000      	movs	r0, #0
 80095b0:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 80095b2:	2002      	movs	r0, #2
	}
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20003174 	.word	0x20003174
 80095bc:	200031b8 	.word	0x200031b8
 80095c0:	2000318c 	.word	0x2000318c
 80095c4:	20003128 	.word	0x20003128

080095c8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80095c8:	4b05      	ldr	r3, [pc, #20]	; (80095e0 <xTaskGetSchedulerState+0x18>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	b133      	cbz	r3, 80095dc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ce:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <xTaskGetSchedulerState+0x1c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	b10b      	cbz	r3, 80095d8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 80095d4:	2000      	movs	r0, #0
	}
 80095d6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 80095d8:	2002      	movs	r0, #2
 80095da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80095dc:	2001      	movs	r0, #1
 80095de:	4770      	bx	lr
 80095e0:	20003188 	.word	0x20003188
 80095e4:	20003134 	.word	0x20003134

080095e8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d03b      	beq.n	8009664 <xTaskPriorityDisinherit+0x7c>
	{
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80095f0:	4b1e      	ldr	r3, [pc, #120]	; (800966c <xTaskPriorityDisinherit+0x84>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4283      	cmp	r3, r0
 80095f6:	d008      	beq.n	800960a <xTaskPriorityDisinherit+0x22>
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	e7fe      	b.n	8009608 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800960a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800960c:	b943      	cbnz	r3, 8009620 <xTaskPriorityDisinherit+0x38>
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	e7fe      	b.n	800961e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8009620:	3b01      	subs	r3, #1
 8009622:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009624:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009626:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8009628:	4291      	cmp	r1, r2
 800962a:	d01d      	beq.n	8009668 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800962c:	b10b      	cbz	r3, 8009632 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800962e:	2000      	movs	r0, #0
	}
 8009630:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009632:	1d05      	adds	r5, r0, #4
 8009634:	4628      	mov	r0, r5
 8009636:	f7fe fd55 	bl	80080e4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800963a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800963c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800963e:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 8009642:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <xTaskPriorityDisinherit+0x88>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4298      	cmp	r0, r3
 800964a:	d901      	bls.n	8009650 <xTaskPriorityDisinherit+0x68>
 800964c:	4b08      	ldr	r3, [pc, #32]	; (8009670 <xTaskPriorityDisinherit+0x88>)
 800964e:	6018      	str	r0, [r3, #0]
 8009650:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009654:	4629      	mov	r1, r5
 8009656:	4b07      	ldr	r3, [pc, #28]	; (8009674 <xTaskPriorityDisinherit+0x8c>)
 8009658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800965c:	f7fe fd1e 	bl	800809c <vListInsertEnd>
					xReturn = pdTRUE;
 8009660:	2001      	movs	r0, #1
 8009662:	e7e5      	b.n	8009630 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8009664:	2000      	movs	r0, #0
	}
 8009666:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009668:	2000      	movs	r0, #0
 800966a:	e7e1      	b.n	8009630 <xTaskPriorityDisinherit+0x48>
 800966c:	20002cbc 	.word	0x20002cbc
 8009670:	2000313c 	.word	0x2000313c
 8009674:	20002cc8 	.word	0x20002cc8

08009678 <xTaskNotifyWait>:
	{
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	4606      	mov	r6, r0
 800967c:	460f      	mov	r7, r1
 800967e:	4614      	mov	r4, r2
 8009680:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 8009682:	f7fe fd97 	bl	80081b4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009686:	4b21      	ldr	r3, [pc, #132]	; (800970c <xTaskNotifyWait+0x94>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	2a02      	cmp	r2, #2
 8009692:	d00a      	beq.n	80096aa <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009694:	4b1d      	ldr	r3, [pc, #116]	; (800970c <xTaskNotifyWait+0x94>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800969a:	ea20 0606 	bic.w	r6, r0, r6
 800969e:	6556      	str	r6, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 80096a8:	b9cd      	cbnz	r5, 80096de <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 80096aa:	f7fe fda5 	bl	80081f8 <vPortExitCritical>
		taskENTER_CRITICAL();
 80096ae:	f7fe fd81 	bl	80081b4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80096b2:	b11c      	cbz	r4, 80096bc <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <xTaskNotifyWait+0x94>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ba:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80096bc:	4b13      	ldr	r3, [pc, #76]	; (800970c <xTaskNotifyWait+0x94>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d018      	beq.n	80096fc <xTaskNotifyWait+0x84>
				xReturn = pdFALSE;
 80096ca:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096cc:	4b0f      	ldr	r3, [pc, #60]	; (800970c <xTaskNotifyWait+0x94>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 80096d6:	f7fe fd8f 	bl	80081f8 <vPortExitCritical>
	}
 80096da:	4620      	mov	r0, r4
 80096dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096de:	4611      	mov	r1, r2
 80096e0:	4628      	mov	r0, r5
 80096e2:	f7ff fbd5 	bl	8008e90 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80096e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	e7d6      	b.n	80096aa <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80096fc:	4b03      	ldr	r3, [pc, #12]	; (800970c <xTaskNotifyWait+0x94>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009702:	ea21 0707 	bic.w	r7, r1, r7
 8009706:	655f      	str	r7, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 8009708:	2401      	movs	r4, #1
 800970a:	e7df      	b.n	80096cc <xTaskNotifyWait+0x54>
 800970c:	20002cbc 	.word	0x20002cbc

08009710 <xTaskGenericNotify>:
	{
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 8009712:	b1a8      	cbz	r0, 8009740 <xTaskGenericNotify+0x30>
 8009714:	460f      	mov	r7, r1
 8009716:	4614      	mov	r4, r2
 8009718:	461d      	mov	r5, r3
 800971a:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 800971c:	f7fe fd4a 	bl	80081b4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009720:	b10d      	cbz	r5, 8009726 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009722:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8009724:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009726:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800972a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800972c:	2202      	movs	r2, #2
 800972e:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
			switch( eAction )
 8009732:	2c04      	cmp	r4, #4
 8009734:	d81f      	bhi.n	8009776 <xTaskGenericNotify+0x66>
 8009736:	e8df f004 	tbb	[pc, r4]
 800973a:	0c2b      	.short	0x0c2b
 800973c:	1611      	.short	0x1611
 800973e:	19          	.byte	0x19
 800973f:	00          	.byte	0x00
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 8009750:	e7fe      	b.n	8009750 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 8009752:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009754:	4317      	orrs	r7, r2
 8009756:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009758:	2401      	movs	r4, #1
					break;
 800975a:	e01a      	b.n	8009792 <xTaskGenericNotify+0x82>
					( pxTCB->ulNotifiedValue )++;
 800975c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800975e:	3201      	adds	r2, #1
 8009760:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009762:	2401      	movs	r4, #1
					break;
 8009764:	e015      	b.n	8009792 <xTaskGenericNotify+0x82>
					pxTCB->ulNotifiedValue = ulValue;
 8009766:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009768:	2401      	movs	r4, #1
					break;
 800976a:	e012      	b.n	8009792 <xTaskGenericNotify+0x82>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800976c:	2b02      	cmp	r3, #2
 800976e:	d016      	beq.n	800979e <xTaskGenericNotify+0x8e>
						pxTCB->ulNotifiedValue = ulValue;
 8009770:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009772:	2401      	movs	r4, #1
 8009774:	e00d      	b.n	8009792 <xTaskGenericNotify+0x82>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009776:	6d72      	ldr	r2, [r6, #84]	; 0x54
 8009778:	f1b2 3fff 	cmp.w	r2, #4294967295
 800977c:	d011      	beq.n	80097a2 <xTaskGenericNotify+0x92>
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	f383 8811 	msr	BASEPRI, r3
 8009786:	f3bf 8f6f 	isb	sy
 800978a:	f3bf 8f4f 	dsb	sy
 800978e:	e7fe      	b.n	800978e <xTaskGenericNotify+0x7e>
			switch( eAction )
 8009790:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009792:	2b01      	cmp	r3, #1
 8009794:	d007      	beq.n	80097a6 <xTaskGenericNotify+0x96>
		taskEXIT_CRITICAL();
 8009796:	f7fe fd2f 	bl	80081f8 <vPortExitCritical>
	}
 800979a:	4620      	mov	r0, r4
 800979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 800979e:	2400      	movs	r4, #0
 80097a0:	e7f7      	b.n	8009792 <xTaskGenericNotify+0x82>
	BaseType_t xReturn = pdPASS;
 80097a2:	2401      	movs	r4, #1
 80097a4:	e7f5      	b.n	8009792 <xTaskGenericNotify+0x82>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097a6:	1d35      	adds	r5, r6, #4
 80097a8:	4628      	mov	r0, r5
 80097aa:	f7fe fc9b 	bl	80080e4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80097ae:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80097b0:	4b15      	ldr	r3, [pc, #84]	; (8009808 <xTaskGenericNotify+0xf8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4298      	cmp	r0, r3
 80097b6:	d901      	bls.n	80097bc <xTaskGenericNotify+0xac>
 80097b8:	4b13      	ldr	r3, [pc, #76]	; (8009808 <xTaskGenericNotify+0xf8>)
 80097ba:	6018      	str	r0, [r3, #0]
 80097bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80097c0:	4629      	mov	r1, r5
 80097c2:	4b12      	ldr	r3, [pc, #72]	; (800980c <xTaskGenericNotify+0xfc>)
 80097c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097c8:	f7fe fc68 	bl	800809c <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80097cc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80097ce:	b143      	cbz	r3, 80097e2 <xTaskGenericNotify+0xd2>
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	e7fe      	b.n	80097e0 <xTaskGenericNotify+0xd0>
					prvResetNextTaskUnblockTime();
 80097e2:	f7ff fa1f 	bl	8008c24 <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097e6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80097e8:	4b09      	ldr	r3, [pc, #36]	; (8009810 <xTaskGenericNotify+0x100>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d9d1      	bls.n	8009796 <xTaskGenericNotify+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 80097f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80097f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	e7c6      	b.n	8009796 <xTaskGenericNotify+0x86>
 8009808:	2000313c 	.word	0x2000313c
 800980c:	20002cc8 	.word	0x20002cc8
 8009810:	20002cbc 	.word	0x20002cbc

08009814 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 8009814:	b308      	cbz	r0, 800985a <xTaskGenericNotifyFromISR+0x46>
	{
 8009816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981a:	460e      	mov	r6, r1
 800981c:	4614      	mov	r4, r2
 800981e:	461d      	mov	r5, r3
 8009820:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009822:	f7fe fe5d 	bl	80084e0 <vPortValidateInterruptPriority>
	__asm volatile
 8009826:	f3ef 8811 	mrs	r8, BASEPRI
 800982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982e:	f383 8811 	msr	BASEPRI, r3
 8009832:	f3bf 8f6f 	isb	sy
 8009836:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800983a:	b10d      	cbz	r5, 8009840 <xTaskGenericNotifyFromISR+0x2c>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800983c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800983e:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009840:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8009844:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009846:	2202      	movs	r2, #2
 8009848:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
			switch( eAction )
 800984c:	2c04      	cmp	r4, #4
 800984e:	d81f      	bhi.n	8009890 <xTaskGenericNotifyFromISR+0x7c>
 8009850:	e8df f004 	tbb	[pc, r4]
 8009854:	16110c2b 	.word	0x16110c2b
 8009858:	19          	.byte	0x19
 8009859:	00          	.byte	0x00
	__asm volatile
 800985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985e:	f383 8811 	msr	BASEPRI, r3
 8009862:	f3bf 8f6f 	isb	sy
 8009866:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800986a:	e7fe      	b.n	800986a <xTaskGenericNotifyFromISR+0x56>
					pxTCB->ulNotifiedValue |= ulValue;
 800986c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800986e:	4316      	orrs	r6, r2
 8009870:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009872:	2401      	movs	r4, #1
					break;
 8009874:	e01a      	b.n	80098ac <xTaskGenericNotifyFromISR+0x98>
					( pxTCB->ulNotifiedValue )++;
 8009876:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009878:	3201      	adds	r2, #1
 800987a:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800987c:	2401      	movs	r4, #1
					break;
 800987e:	e015      	b.n	80098ac <xTaskGenericNotifyFromISR+0x98>
					pxTCB->ulNotifiedValue = ulValue;
 8009880:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 8009882:	2401      	movs	r4, #1
					break;
 8009884:	e012      	b.n	80098ac <xTaskGenericNotifyFromISR+0x98>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009886:	2b02      	cmp	r3, #2
 8009888:	d017      	beq.n	80098ba <xTaskGenericNotifyFromISR+0xa6>
						pxTCB->ulNotifiedValue = ulValue;
 800988a:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800988c:	2401      	movs	r4, #1
 800988e:	e00d      	b.n	80098ac <xTaskGenericNotifyFromISR+0x98>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009892:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009896:	d012      	beq.n	80098be <xTaskGenericNotifyFromISR+0xaa>
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	e7fe      	b.n	80098a8 <xTaskGenericNotifyFromISR+0x94>
			switch( eAction )
 80098aa:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d008      	beq.n	80098c2 <xTaskGenericNotifyFromISR+0xae>
	__asm volatile
 80098b0:	f388 8811 	msr	BASEPRI, r8
	}
 80098b4:	4620      	mov	r0, r4
 80098b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						xReturn = pdFAIL;
 80098ba:	2400      	movs	r4, #0
 80098bc:	e7f6      	b.n	80098ac <xTaskGenericNotifyFromISR+0x98>
	BaseType_t xReturn = pdPASS;
 80098be:	2401      	movs	r4, #1
 80098c0:	e7f4      	b.n	80098ac <xTaskGenericNotifyFromISR+0x98>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80098c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c4:	b143      	cbz	r3, 80098d8 <xTaskGenericNotifyFromISR+0xc4>
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
 80098d6:	e7fe      	b.n	80098d6 <xTaskGenericNotifyFromISR+0xc2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098d8:	4b15      	ldr	r3, [pc, #84]	; (8009930 <xTaskGenericNotifyFromISR+0x11c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	bb0b      	cbnz	r3, 8009922 <xTaskGenericNotifyFromISR+0x10e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098de:	1d3d      	adds	r5, r7, #4
 80098e0:	4628      	mov	r0, r5
 80098e2:	f7fe fbff 	bl	80080e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80098e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e8:	4b12      	ldr	r3, [pc, #72]	; (8009934 <xTaskGenericNotifyFromISR+0x120>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4298      	cmp	r0, r3
 80098ee:	d901      	bls.n	80098f4 <xTaskGenericNotifyFromISR+0xe0>
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <xTaskGenericNotifyFromISR+0x120>)
 80098f2:	6018      	str	r0, [r3, #0]
 80098f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80098f8:	4629      	mov	r1, r5
 80098fa:	4b0f      	ldr	r3, [pc, #60]	; (8009938 <xTaskGenericNotifyFromISR+0x124>)
 80098fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009900:	f7fe fbcc 	bl	800809c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009906:	4b0d      	ldr	r3, [pc, #52]	; (800993c <xTaskGenericNotifyFromISR+0x128>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990c:	429a      	cmp	r2, r3
 800990e:	d9cf      	bls.n	80098b0 <xTaskGenericNotifyFromISR+0x9c>
					if( pxHigherPriorityTaskWoken != NULL )
 8009910:	9b06      	ldr	r3, [sp, #24]
 8009912:	b113      	cbz	r3, 800991a <xTaskGenericNotifyFromISR+0x106>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009914:	2301      	movs	r3, #1
 8009916:	9a06      	ldr	r2, [sp, #24]
 8009918:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 800991a:	4b09      	ldr	r3, [pc, #36]	; (8009940 <xTaskGenericNotifyFromISR+0x12c>)
 800991c:	2201      	movs	r2, #1
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	e7c6      	b.n	80098b0 <xTaskGenericNotifyFromISR+0x9c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009922:	f107 0118 	add.w	r1, r7, #24
 8009926:	4807      	ldr	r0, [pc, #28]	; (8009944 <xTaskGenericNotifyFromISR+0x130>)
 8009928:	f7fe fbb8 	bl	800809c <vListInsertEnd>
 800992c:	e7ea      	b.n	8009904 <xTaskGenericNotifyFromISR+0xf0>
 800992e:	bf00      	nop
 8009930:	20003134 	.word	0x20003134
 8009934:	2000313c 	.word	0x2000313c
 8009938:	20002cc8 	.word	0x20002cc8
 800993c:	20002cbc 	.word	0x20002cbc
 8009940:	200031b8 	.word	0x200031b8
 8009944:	20003174 	.word	0x20003174

08009948 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009948:	4b06      	ldr	r3, [pc, #24]	; (8009964 <prvGetNextExpireTime+0x1c>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	6813      	ldr	r3, [r2, #0]
 800994e:	b92b      	cbnz	r3, 800995c <prvGetNextExpireTime+0x14>
 8009950:	2301      	movs	r3, #1
 8009952:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009954:	b923      	cbnz	r3, 8009960 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009956:	68d3      	ldr	r3, [r2, #12]
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800995c:	2300      	movs	r3, #0
 800995e:	e7f8      	b.n	8009952 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009960:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 8009962:	4770      	bx	lr
 8009964:	200031bc 	.word	0x200031bc

08009968 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009968:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800996a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800996c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800996e:	4291      	cmp	r1, r2
 8009970:	d80c      	bhi.n	800998c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	6983      	ldr	r3, [r0, #24]
 8009976:	429a      	cmp	r2, r3
 8009978:	d301      	bcc.n	800997e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800997a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800997c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800997e:	1d01      	adds	r1, r0, #4
 8009980:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <prvInsertTimerInActiveList+0x40>)
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	f7fe fb95 	bl	80080b2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009988:	2000      	movs	r0, #0
 800998a:	e7f7      	b.n	800997c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800998c:	429a      	cmp	r2, r3
 800998e:	d201      	bcs.n	8009994 <prvInsertTimerInActiveList+0x2c>
 8009990:	4299      	cmp	r1, r3
 8009992:	d206      	bcs.n	80099a2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009994:	1d01      	adds	r1, r0, #4
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <prvInsertTimerInActiveList+0x44>)
 8009998:	6818      	ldr	r0, [r3, #0]
 800999a:	f7fe fb8a 	bl	80080b2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800999e:	2000      	movs	r0, #0
 80099a0:	e7ec      	b.n	800997c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80099a2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80099a4:	e7ea      	b.n	800997c <prvInsertTimerInActiveList+0x14>
 80099a6:	bf00      	nop
 80099a8:	200031c0 	.word	0x200031c0
 80099ac:	200031bc 	.word	0x200031bc

080099b0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099b0:	b530      	push	{r4, r5, lr}
 80099b2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099b4:	f7fe fbfe 	bl	80081b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099b8:	4b11      	ldr	r3, [pc, #68]	; (8009a00 <prvCheckForValidListAndQueue+0x50>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	b11b      	cbz	r3, 80099c6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099be:	f7fe fc1b 	bl	80081f8 <vPortExitCritical>
}
 80099c2:	b003      	add	sp, #12
 80099c4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80099c6:	4d0f      	ldr	r5, [pc, #60]	; (8009a04 <prvCheckForValidListAndQueue+0x54>)
 80099c8:	4628      	mov	r0, r5
 80099ca:	f7fe fb59 	bl	8008080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099ce:	4c0e      	ldr	r4, [pc, #56]	; (8009a08 <prvCheckForValidListAndQueue+0x58>)
 80099d0:	4620      	mov	r0, r4
 80099d2:	f7fe fb55 	bl	8008080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099d6:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <prvCheckForValidListAndQueue+0x5c>)
 80099d8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099da:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099dc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099de:	2300      	movs	r3, #0
 80099e0:	9300      	str	r3, [sp, #0]
 80099e2:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <prvCheckForValidListAndQueue+0x64>)
 80099e4:	4a0c      	ldr	r2, [pc, #48]	; (8009a18 <prvCheckForValidListAndQueue+0x68>)
 80099e6:	2110      	movs	r1, #16
 80099e8:	200a      	movs	r0, #10
 80099ea:	f7fe fe9a 	bl	8008722 <xQueueGenericCreateStatic>
 80099ee:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <prvCheckForValidListAndQueue+0x50>)
 80099f0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d0e3      	beq.n	80099be <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099f6:	4909      	ldr	r1, [pc, #36]	; (8009a1c <prvCheckForValidListAndQueue+0x6c>)
 80099f8:	f7ff f8b6 	bl	8008b68 <vQueueAddToRegistry>
 80099fc:	e7df      	b.n	80099be <prvCheckForValidListAndQueue+0xe>
 80099fe:	bf00      	nop
 8009a00:	200032e0 	.word	0x200032e0
 8009a04:	20003264 	.word	0x20003264
 8009a08:	20003278 	.word	0x20003278
 8009a0c:	200031bc 	.word	0x200031bc
 8009a10:	200031c0 	.word	0x200031c0
 8009a14:	20003290 	.word	0x20003290
 8009a18:	200031c4 	.word	0x200031c4
 8009a1c:	08015318 	.word	0x08015318

08009a20 <xTimerCreateTimerTask>:
{
 8009a20:	b510      	push	{r4, lr}
 8009a22:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009a24:	f7ff ffc4 	bl	80099b0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009a28:	4b12      	ldr	r3, [pc, #72]	; (8009a74 <xTimerCreateTimerTask+0x54>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	b1cb      	cbz	r3, 8009a62 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a2e:	2400      	movs	r4, #0
 8009a30:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a32:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a34:	aa07      	add	r2, sp, #28
 8009a36:	a906      	add	r1, sp, #24
 8009a38:	a805      	add	r0, sp, #20
 8009a3a:	f7fe fa03 	bl	8007e44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a3e:	9b05      	ldr	r3, [sp, #20]
 8009a40:	9302      	str	r3, [sp, #8]
 8009a42:	9b06      	ldr	r3, [sp, #24]
 8009a44:	9301      	str	r3, [sp, #4]
 8009a46:	2302      	movs	r3, #2
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	4623      	mov	r3, r4
 8009a4c:	9a07      	ldr	r2, [sp, #28]
 8009a4e:	490a      	ldr	r1, [pc, #40]	; (8009a78 <xTimerCreateTimerTask+0x58>)
 8009a50:	480a      	ldr	r0, [pc, #40]	; (8009a7c <xTimerCreateTimerTask+0x5c>)
 8009a52:	f7ff fa5b 	bl	8008f0c <xTaskCreateStatic>
 8009a56:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <xTimerCreateTimerTask+0x60>)
 8009a58:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009a5a:	b110      	cbz	r0, 8009a62 <xTimerCreateTimerTask+0x42>
}
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	b008      	add	sp, #32
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009a72:	e7fe      	b.n	8009a72 <xTimerCreateTimerTask+0x52>
 8009a74:	200032e0 	.word	0x200032e0
 8009a78:	08015320 	.word	0x08015320
 8009a7c:	08009d85 	.word	0x08009d85
 8009a80:	200032e4 	.word	0x200032e4

08009a84 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8009a84:	b1b8      	cbz	r0, 8009ab6 <xTimerGenericCommand+0x32>
 8009a86:	469c      	mov	ip, r3
 8009a88:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8009a8a:	4818      	ldr	r0, [pc, #96]	; (8009aec <xTimerGenericCommand+0x68>)
 8009a8c:	6800      	ldr	r0, [r0, #0]
 8009a8e:	b358      	cbz	r0, 8009ae8 <xTimerGenericCommand+0x64>
{
 8009a90:	b500      	push	{lr}
 8009a92:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8009a94:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a96:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a98:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a9a:	2905      	cmp	r1, #5
 8009a9c:	dc1c      	bgt.n	8009ad8 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a9e:	f7ff fd93 	bl	80095c8 <xTaskGetSchedulerState>
 8009aa2:	2802      	cmp	r0, #2
 8009aa4:	d010      	beq.n	8009ac8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4669      	mov	r1, sp
 8009aac:	480f      	ldr	r0, [pc, #60]	; (8009aec <xTimerGenericCommand+0x68>)
 8009aae:	6800      	ldr	r0, [r0, #0]
 8009ab0:	f7fe fe81 	bl	80087b6 <xQueueGenericSend>
 8009ab4:	e015      	b.n	8009ae2 <xTimerGenericCommand+0x5e>
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8009ac6:	e7fe      	b.n	8009ac6 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009ac8:	2300      	movs	r3, #0
 8009aca:	9a06      	ldr	r2, [sp, #24]
 8009acc:	4669      	mov	r1, sp
 8009ace:	4807      	ldr	r0, [pc, #28]	; (8009aec <xTimerGenericCommand+0x68>)
 8009ad0:	6800      	ldr	r0, [r0, #0]
 8009ad2:	f7fe fe70 	bl	80087b6 <xQueueGenericSend>
 8009ad6:	e004      	b.n	8009ae2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4662      	mov	r2, ip
 8009adc:	4669      	mov	r1, sp
 8009ade:	f7fe ff2e 	bl	800893e <xQueueGenericSendFromISR>
}
 8009ae2:	b005      	add	sp, #20
 8009ae4:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 8009ae8:	2000      	movs	r0, #0
}
 8009aea:	4770      	bx	lr
 8009aec:	200032e0 	.word	0x200032e0

08009af0 <prvSwitchTimerLists>:
{
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009af4:	4b1b      	ldr	r3, [pc, #108]	; (8009b64 <prvSwitchTimerLists+0x74>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	b362      	cbz	r2, 8009b56 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b00:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b02:	1d25      	adds	r5, r4, #4
 8009b04:	4628      	mov	r0, r5
 8009b06:	f7fe faed 	bl	80080e4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b0a:	6a23      	ldr	r3, [r4, #32]
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009b14:	f013 0f04 	tst.w	r3, #4
 8009b18:	d0ec      	beq.n	8009af4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b1a:	69a3      	ldr	r3, [r4, #24]
 8009b1c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009b1e:	429e      	cmp	r6, r3
 8009b20:	d207      	bcs.n	8009b32 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b22:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b24:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b26:	4629      	mov	r1, r5
 8009b28:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <prvSwitchTimerLists+0x74>)
 8009b2a:	6818      	ldr	r0, [r3, #0]
 8009b2c:	f7fe fac1 	bl	80080b2 <vListInsert>
 8009b30:	e7e0      	b.n	8009af4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b32:	2100      	movs	r1, #0
 8009b34:	9100      	str	r1, [sp, #0]
 8009b36:	460b      	mov	r3, r1
 8009b38:	4632      	mov	r2, r6
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7ff ffa2 	bl	8009a84 <xTimerGenericCommand>
				configASSERT( xResult );
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d1d7      	bne.n	8009af4 <prvSwitchTimerLists+0x4>
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	e7fe      	b.n	8009b54 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 8009b56:	4a04      	ldr	r2, [pc, #16]	; (8009b68 <prvSwitchTimerLists+0x78>)
 8009b58:	6810      	ldr	r0, [r2, #0]
 8009b5a:	4902      	ldr	r1, [pc, #8]	; (8009b64 <prvSwitchTimerLists+0x74>)
 8009b5c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8009b5e:	6013      	str	r3, [r2, #0]
}
 8009b60:	b002      	add	sp, #8
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	200031bc 	.word	0x200031bc
 8009b68:	200031c0 	.word	0x200031c0

08009b6c <prvSampleTimeNow>:
{
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8009b70:	f7ff fa92 	bl	8009098 <xTaskGetTickCount>
 8009b74:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8009b76:	4b07      	ldr	r3, [pc, #28]	; (8009b94 <prvSampleTimeNow+0x28>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4283      	cmp	r3, r0
 8009b7c:	d805      	bhi.n	8009b8a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 8009b82:	4b04      	ldr	r3, [pc, #16]	; (8009b94 <prvSampleTimeNow+0x28>)
 8009b84:	601c      	str	r4, [r3, #0]
}
 8009b86:	4620      	mov	r0, r4
 8009b88:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8009b8a:	f7ff ffb1 	bl	8009af0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	602b      	str	r3, [r5, #0]
 8009b92:	e7f6      	b.n	8009b82 <prvSampleTimeNow+0x16>
 8009b94:	2000328c 	.word	0x2000328c

08009b98 <prvProcessExpiredTimer>:
{
 8009b98:	b570      	push	{r4, r5, r6, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba0:	4917      	ldr	r1, [pc, #92]	; (8009c00 <prvProcessExpiredTimer+0x68>)
 8009ba2:	6809      	ldr	r1, [r1, #0]
 8009ba4:	68c9      	ldr	r1, [r1, #12]
 8009ba6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ba8:	1d20      	adds	r0, r4, #4
 8009baa:	f7fe fa9b 	bl	80080e4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bae:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 8009bb2:	f01c 0f04 	tst.w	ip, #4
 8009bb6:	d108      	bne.n	8009bca <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bb8:	f02c 0c01 	bic.w	ip, ip, #1
 8009bbc:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bc0:	6a23      	ldr	r3, [r4, #32]
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4798      	blx	r3
}
 8009bc6:	b002      	add	sp, #8
 8009bc8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009bca:	69a1      	ldr	r1, [r4, #24]
 8009bcc:	4633      	mov	r3, r6
 8009bce:	462a      	mov	r2, r5
 8009bd0:	4431      	add	r1, r6
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f7ff fec8 	bl	8009968 <prvInsertTimerInActiveList>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d0f1      	beq.n	8009bc0 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bdc:	2100      	movs	r1, #0
 8009bde:	9100      	str	r1, [sp, #0]
 8009be0:	460b      	mov	r3, r1
 8009be2:	4632      	mov	r2, r6
 8009be4:	4620      	mov	r0, r4
 8009be6:	f7ff ff4d 	bl	8009a84 <xTimerGenericCommand>
			configASSERT( xResult );
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d1e8      	bne.n	8009bc0 <prvProcessExpiredTimer+0x28>
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	e7fe      	b.n	8009bfe <prvProcessExpiredTimer+0x66>
 8009c00:	200031bc 	.word	0x200031bc

08009c04 <prvProcessTimerOrBlockTask>:
{
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 8009c0c:	f7ff fa3c 	bl	8009088 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c10:	a801      	add	r0, sp, #4
 8009c12:	f7ff ffab 	bl	8009b6c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	bb33      	cbnz	r3, 8009c68 <prvProcessTimerOrBlockTask+0x64>
 8009c1a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c1c:	b90c      	cbnz	r4, 8009c22 <prvProcessTimerOrBlockTask+0x1e>
 8009c1e:	42b0      	cmp	r0, r6
 8009c20:	d219      	bcs.n	8009c56 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 8009c22:	b124      	cbz	r4, 8009c2e <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c24:	4a12      	ldr	r2, [pc, #72]	; (8009c70 <prvProcessTimerOrBlockTask+0x6c>)
 8009c26:	6812      	ldr	r2, [r2, #0]
 8009c28:	6812      	ldr	r2, [r2, #0]
 8009c2a:	b9da      	cbnz	r2, 8009c64 <prvProcessTimerOrBlockTask+0x60>
 8009c2c:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009c2e:	4622      	mov	r2, r4
 8009c30:	1b71      	subs	r1, r6, r5
 8009c32:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <prvProcessTimerOrBlockTask+0x70>)
 8009c34:	6818      	ldr	r0, [r3, #0]
 8009c36:	f7fe ffab 	bl	8008b90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c3a:	f7ff fad9 	bl	80091f0 <xTaskResumeAll>
 8009c3e:	b9a8      	cbnz	r0, 8009c6c <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 8009c40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	f3bf 8f6f 	isb	sy
 8009c54:	e00a      	b.n	8009c6c <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8009c56:	f7ff facb 	bl	80091f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f7ff ff9b 	bl	8009b98 <prvProcessExpiredTimer>
 8009c62:	e003      	b.n	8009c6c <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009c64:	461c      	mov	r4, r3
 8009c66:	e7e2      	b.n	8009c2e <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 8009c68:	f7ff fac2 	bl	80091f0 <xTaskResumeAll>
}
 8009c6c:	b002      	add	sp, #8
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	200031c0 	.word	0x200031c0
 8009c74:	200032e0 	.word	0x200032e0

08009c78 <prvProcessReceivedCommands>:
{
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c7c:	e002      	b.n	8009c84 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	da0f      	bge.n	8009ca4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c84:	2200      	movs	r2, #0
 8009c86:	a904      	add	r1, sp, #16
 8009c88:	4b3d      	ldr	r3, [pc, #244]	; (8009d80 <prvProcessReceivedCommands+0x108>)
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	f7fe febd 	bl	8008a0a <xQueueReceive>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d073      	beq.n	8009d7c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c94:	9b04      	ldr	r3, [sp, #16]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	daf1      	bge.n	8009c7e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c9a:	9907      	ldr	r1, [sp, #28]
 8009c9c:	9806      	ldr	r0, [sp, #24]
 8009c9e:	9b05      	ldr	r3, [sp, #20]
 8009ca0:	4798      	blx	r3
 8009ca2:	e7ec      	b.n	8009c7e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009ca4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009ca6:	6963      	ldr	r3, [r4, #20]
 8009ca8:	b113      	cbz	r3, 8009cb0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009caa:	1d20      	adds	r0, r4, #4
 8009cac:	f7fe fa1a 	bl	80080e4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009cb0:	a803      	add	r0, sp, #12
 8009cb2:	f7ff ff5b 	bl	8009b6c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	2b09      	cmp	r3, #9
 8009cba:	d8e3      	bhi.n	8009c84 <prvProcessReceivedCommands+0xc>
 8009cbc:	e8df f003 	tbb	[pc, r3]
 8009cc0:	30050505 	.word	0x30050505
 8009cc4:	05055037 	.word	0x05055037
 8009cc8:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cd6:	9b05      	ldr	r3, [sp, #20]
 8009cd8:	69a1      	ldr	r1, [r4, #24]
 8009cda:	4602      	mov	r2, r0
 8009cdc:	4419      	add	r1, r3
 8009cde:	4620      	mov	r0, r4
 8009ce0:	f7ff fe42 	bl	8009968 <prvInsertTimerInActiveList>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d0cd      	beq.n	8009c84 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ce8:	6a23      	ldr	r3, [r4, #32]
 8009cea:	4620      	mov	r0, r4
 8009cec:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009cf2:	f013 0f04 	tst.w	r3, #4
 8009cf6:	d0c5      	beq.n	8009c84 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cf8:	69a2      	ldr	r2, [r4, #24]
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	9100      	str	r1, [sp, #0]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	9805      	ldr	r0, [sp, #20]
 8009d02:	4402      	add	r2, r0
 8009d04:	4620      	mov	r0, r4
 8009d06:	f7ff febd 	bl	8009a84 <xTimerGenericCommand>
							configASSERT( xResult );
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d1ba      	bne.n	8009c84 <prvProcessReceivedCommands+0xc>
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	e7fe      	b.n	8009d1e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009d24:	f023 0301 	bic.w	r3, r3, #1
 8009d28:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 8009d2c:	e7aa      	b.n	8009c84 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d2e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009d32:	f043 0301 	orr.w	r3, r3, #1
 8009d36:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d3a:	9905      	ldr	r1, [sp, #20]
 8009d3c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d3e:	b131      	cbz	r1, 8009d4e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d40:	4603      	mov	r3, r0
 8009d42:	4602      	mov	r2, r0
 8009d44:	4401      	add	r1, r0
 8009d46:	4620      	mov	r0, r4
 8009d48:	f7ff fe0e 	bl	8009968 <prvInsertTimerInActiveList>
					break;
 8009d4c:	e79a      	b.n	8009c84 <prvProcessReceivedCommands+0xc>
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d5e:	e7fe      	b.n	8009d5e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d60:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009d64:	f013 0f02 	tst.w	r3, #2
 8009d68:	d004      	beq.n	8009d74 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d6a:	f023 0301 	bic.w	r3, r3, #1
 8009d6e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009d72:	e787      	b.n	8009c84 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7fe f94b 	bl	8008010 <vPortFree>
 8009d7a:	e783      	b.n	8009c84 <prvProcessReceivedCommands+0xc>
}
 8009d7c:	b008      	add	sp, #32
 8009d7e:	bd10      	pop	{r4, pc}
 8009d80:	200032e0 	.word	0x200032e0

08009d84 <prvTimerTask>:
{
 8009d84:	b500      	push	{lr}
 8009d86:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d88:	a801      	add	r0, sp, #4
 8009d8a:	f7ff fddd 	bl	8009948 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d8e:	9901      	ldr	r1, [sp, #4]
 8009d90:	f7ff ff38 	bl	8009c04 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 8009d94:	f7ff ff70 	bl	8009c78 <prvProcessReceivedCommands>
	for( ;; )
 8009d98:	e7f6      	b.n	8009d88 <prvTimerTask+0x4>
	...

08009d9c <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8009d9c:	2804      	cmp	r0, #4
 8009d9e:	d807      	bhi.n	8009db0 <LmHandlerPackageIsInitialized+0x14>
{
 8009da0:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <LmHandlerPackageIsInitialized+0x1c>)
 8009da4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	b11b      	cbz	r3, 8009db4 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8009dac:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8009dae:	bd08      	pop	{r3, pc}
        return false;
 8009db0:	2000      	movs	r0, #0
}
 8009db2:	4770      	bx	lr
        return false;
 8009db4:	2000      	movs	r0, #0
 8009db6:	e7fa      	b.n	8009dae <LmHandlerPackageIsInitialized+0x12>
 8009db8:	200033e8 	.word	0x200033e8

08009dbc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009dc2:	2400      	movs	r4, #0
 8009dc4:	e005      	b.n	8009dd2 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	b10b      	cbz	r3, 8009dce <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009dce:	3401      	adds	r4, #1
 8009dd0:	b264      	sxtb	r4, r4
 8009dd2:	2c04      	cmp	r4, #4
 8009dd4:	dc24      	bgt.n	8009e20 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 8009dd6:	4b13      	ldr	r3, [pc, #76]	; (8009e24 <LmHandlerPackagesNotify+0x68>)
 8009dd8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d0f6      	beq.n	8009dce <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8009de0:	2d03      	cmp	r5, #3
 8009de2:	d8f4      	bhi.n	8009dce <LmHandlerPackagesNotify+0x12>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <LmHandlerPackagesNotify+0x30>)
 8009de6:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009dc7 	.word	0x08009dc7
 8009df0:	08009dfd 	.word	0x08009dfd
 8009df4:	08009e09 	.word	0x08009e09
 8009df8:	08009e15 	.word	0x08009e15
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0e5      	beq.n	8009dce <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 8009e02:	4630      	mov	r0, r6
 8009e04:	4798      	blx	r3
 8009e06:	e7e2      	b.n	8009dce <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d0df      	beq.n	8009dce <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4798      	blx	r3
 8009e12:	e7dc      	b.n	8009dce <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8009e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0d9      	beq.n	8009dce <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4798      	blx	r3
 8009e1e:	e7d6      	b.n	8009dce <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 8009e20:	bd70      	pop	{r4, r5, r6, pc}
 8009e22:	bf00      	nop
 8009e24:	200033e8 	.word	0x200033e8

08009e28 <MlmeIndication>:
{
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8009e2c:	4b14      	ldr	r3, [pc, #80]	; (8009e80 <MlmeIndication+0x58>)
 8009e2e:	2200      	movs	r2, #0
 8009e30:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8009e32:	7842      	ldrb	r2, [r0, #1]
 8009e34:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8009e36:	f990 2002 	ldrsb.w	r2, [r0, #2]
 8009e3a:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8009e3c:	f9b1 2000 	ldrsh.w	r2, [r1]
 8009e40:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8009e42:	f991 2002 	ldrsb.w	r2, [r1, #2]
 8009e46:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8009e48:	78ca      	ldrb	r2, [r1, #3]
 8009e4a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8009e4c:	6842      	ldr	r2, [r0, #4]
 8009e4e:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 8009e50:	7803      	ldrb	r3, [r0, #0]
 8009e52:	2b0a      	cmp	r3, #10
 8009e54:	d007      	beq.n	8009e66 <MlmeIndication+0x3e>
 8009e56:	2b0e      	cmp	r3, #14
 8009e58:	d005      	beq.n	8009e66 <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 8009e5a:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <MlmeIndication+0x5c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e60:	4907      	ldr	r1, [pc, #28]	; (8009e80 <MlmeIndication+0x58>)
 8009e62:	2000      	movs	r0, #0
 8009e64:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 8009e66:	4621      	mov	r1, r4
 8009e68:	2003      	movs	r0, #3
 8009e6a:	f7ff ffa7 	bl	8009dbc <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 8009e6e:	7823      	ldrb	r3, [r4, #0]
 8009e70:	2b06      	cmp	r3, #6
 8009e72:	d000      	beq.n	8009e76 <MlmeIndication+0x4e>
}
 8009e74:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 8009e76:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <MlmeIndication+0x60>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	701a      	strb	r2, [r3, #0]
}
 8009e7c:	e7fa      	b.n	8009e74 <MlmeIndication+0x4c>
 8009e7e:	bf00      	nop
 8009e80:	2000009c 	.word	0x2000009c
 8009e84:	200033e4 	.word	0x200033e4
 8009e88:	200033e0 	.word	0x200033e0

08009e8c <McpsConfirm>:
{
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 8009e90:	480c      	ldr	r0, [pc, #48]	; (8009ec4 <McpsConfirm+0x38>)
 8009e92:	2301      	movs	r3, #1
 8009e94:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 8009e96:	7863      	ldrb	r3, [r4, #1]
 8009e98:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8009e9a:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8009e9e:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8009ea0:	68e3      	ldr	r3, [r4, #12]
 8009ea2:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8009ea4:	f994 3003 	ldrsb.w	r3, [r4, #3]
 8009ea8:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8009eae:	7923      	ldrb	r3, [r4, #4]
 8009eb0:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <McpsConfirm+0x3c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8009eba:	4621      	mov	r1, r4
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	f7ff ff7d 	bl	8009dbc <LmHandlerPackagesNotify>
}
 8009ec2:	bd10      	pop	{r4, pc}
 8009ec4:	200000b0 	.word	0x200000b0
 8009ec8:	200033e4 	.word	0x200033e4

08009ecc <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 8009ecc:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009ece:	2400      	movs	r4, #0
 8009ed0:	e001      	b.n	8009ed6 <LmHandlerPackageIsTxPending+0xa>
 8009ed2:	3401      	adds	r4, #1
 8009ed4:	b264      	sxtb	r4, r4
 8009ed6:	2c04      	cmp	r4, #4
 8009ed8:	dc0a      	bgt.n	8009ef0 <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 8009eda:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <LmHandlerPackageIsTxPending+0x2c>)
 8009edc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d0f6      	beq.n	8009ed2 <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	4798      	blx	r3
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d0f1      	beq.n	8009ed2 <LmHandlerPackageIsTxPending+0x6>
 8009eee:	e000      	b.n	8009ef2 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	bf00      	nop
 8009ef8:	200033e8 	.word	0x200033e8

08009efc <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 8009efc:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8009efe:	2400      	movs	r4, #0
 8009f00:	e001      	b.n	8009f06 <LmHandlerPackagesProcess+0xa>
 8009f02:	3401      	adds	r4, #1
 8009f04:	b264      	sxtb	r4, r4
 8009f06:	2c04      	cmp	r4, #4
 8009f08:	dc12      	bgt.n	8009f30 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8009f0a:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <LmHandlerPackagesProcess+0x38>)
 8009f0c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0f6      	beq.n	8009f02 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8009f14:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0f3      	beq.n	8009f02 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8009f1a:	b2e0      	uxtb	r0, r4
 8009f1c:	f7ff ff3e 	bl	8009d9c <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d0ee      	beq.n	8009f02 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 8009f24:	4b03      	ldr	r3, [pc, #12]	; (8009f34 <LmHandlerPackagesProcess+0x38>)
 8009f26:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	4798      	blx	r3
 8009f2e:	e7e8      	b.n	8009f02 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8009f30:	bd38      	pop	{r3, r4, r5, pc}
 8009f32:	bf00      	nop
 8009f34:	200033e8 	.word	0x200033e8

08009f38 <LmHandlerJoin>:
{
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	b08e      	sub	sp, #56	; 0x38
 8009f3c:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8009f44:	4b26      	ldr	r3, [pc, #152]	; (8009fe0 <LmHandlerJoin+0xa8>)
 8009f46:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8009f4a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 8009f4e:	2802      	cmp	r0, #2
 8009f50:	d021      	beq.n	8009f96 <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 8009f52:	2101      	movs	r1, #1
 8009f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8009f58:	4b22      	ldr	r3, [pc, #136]	; (8009fe4 <LmHandlerJoin+0xac>)
 8009f5a:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8009f5c:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8009f5e:	2100      	movs	r1, #0
 8009f60:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 8009f62:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 8009f64:	4b20      	ldr	r3, [pc, #128]	; (8009fe8 <LmHandlerJoin+0xb0>)
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	b1f3      	cbz	r3, 8009fa8 <LmHandlerJoin+0x70>
        LoRaMacStart();
 8009f6a:	f003 fa4d 	bl	800d408 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8009f74:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009f78:	4668      	mov	r0, sp
 8009f7a:	f003 fc4d 	bl	800d818 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 8009f7e:	4b1a      	ldr	r3, [pc, #104]	; (8009fe8 <LmHandlerJoin+0xb0>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <LmHandlerJoin+0x4e>
 8009f84:	b114      	cbz	r4, 8009f8c <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 8009f86:	a809      	add	r0, sp, #36	; 0x24
 8009f88:	f003 fecc 	bl	800dd24 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8009f8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f8e:	4b17      	ldr	r3, [pc, #92]	; (8009fec <LmHandlerJoin+0xb4>)
 8009f90:	601a      	str	r2, [r3, #0]
}
 8009f92:	b00e      	add	sp, #56	; 0x38
 8009f94:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009f96:	2202      	movs	r2, #2
 8009f98:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8009f9c:	4b11      	ldr	r3, [pc, #68]	; (8009fe4 <LmHandlerJoin+0xac>)
 8009f9e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 8009fa0:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 8009fa2:	f003 fa31 	bl	800d408 <LoRaMacStart>
 8009fa6:	e7ea      	b.n	8009f7e <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8009fa8:	231f      	movs	r3, #31
 8009faa:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8009fae:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009fb2:	4668      	mov	r0, sp
 8009fb4:	f003 fc30 	bl	800d818 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8009fb8:	2320      	movs	r3, #32
 8009fba:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8009fbe:	4b08      	ldr	r3, [pc, #32]	; (8009fe0 <LmHandlerJoin+0xa8>)
 8009fc0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009fc4:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8009fc8:	4668      	mov	r0, sp
 8009fca:	f003 fc25 	bl	800d818 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8009fce:	2329      	movs	r3, #41	; 0x29
 8009fd0:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8009fd4:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <LmHandlerJoin+0xb8>)
 8009fd6:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 8009fd8:	4668      	mov	r0, sp
 8009fda:	f003 fc1d 	bl	800d818 <LoRaMacMibSetRequestConfirm>
 8009fde:	e7c4      	b.n	8009f6a <LmHandlerJoin+0x32>
 8009fe0:	200033fc 	.word	0x200033fc
 8009fe4:	20000094 	.word	0x20000094
 8009fe8:	200033da 	.word	0x200033da
 8009fec:	200033dc 	.word	0x200033dc
 8009ff0:	01000400 	.word	0x01000400

08009ff4 <LmHandlerDeviceTimeReq>:
{
 8009ff4:	b500      	push	{lr}
 8009ff6:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 8009ff8:	2309      	movs	r3, #9
 8009ffa:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 8009ffe:	a801      	add	r0, sp, #4
 800a000:	f003 fe90 	bl	800dd24 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800a004:	9a05      	ldr	r2, [sp, #20]
 800a006:	4b04      	ldr	r3, [pc, #16]	; (800a018 <LmHandlerDeviceTimeReq+0x24>)
 800a008:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800a00a:	b910      	cbnz	r0, 800a012 <LmHandlerDeviceTimeReq+0x1e>
}
 800a00c:	b007      	add	sp, #28
 800a00e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800a012:	f04f 30ff 	mov.w	r0, #4294967295
 800a016:	e7f9      	b.n	800a00c <LmHandlerDeviceTimeReq+0x18>
 800a018:	200033dc 	.word	0x200033dc

0800a01c <LmHandlerGetDutyCycleWaitTime>:
}
 800a01c:	4b01      	ldr	r3, [pc, #4]	; (800a024 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	200033dc 	.word	0x200033dc

0800a028 <LmHandlerJoinStatus>:
{
 800a028:	b500      	push	{lr}
 800a02a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a02c:	2301      	movs	r3, #1
 800a02e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800a032:	a801      	add	r0, sp, #4
 800a034:	f003 faa2 	bl	800d57c <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800a038:	b920      	cbnz	r0, 800a044 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a03a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800a03e:	b110      	cbz	r0, 800a046 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800a040:	2001      	movs	r0, #1
 800a042:	e000      	b.n	800a046 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800a044:	2000      	movs	r0, #0
}
 800a046:	b00b      	add	sp, #44	; 0x2c
 800a048:	f85d fb04 	ldr.w	pc, [sp], #4

0800a04c <LmHandlerSend>:
{
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	4604      	mov	r4, r0
 800a052:	460d      	mov	r5, r1
 800a054:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 800a056:	f002 ff91 	bl	800cf7c <LoRaMacIsBusy>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	d164      	bne.n	800a128 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800a05e:	f7ff ffe3 	bl	800a028 <LmHandlerJoinStatus>
 800a062:	2801      	cmp	r0, #1
 800a064:	d137      	bne.n	800a0d6 <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 800a066:	4b33      	ldr	r3, [pc, #204]	; (800a134 <LmHandlerSend+0xe8>)
 800a068:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800a06a:	3d00      	subs	r5, #0
 800a06c:	bf18      	it	ne
 800a06e:	2501      	movne	r5, #1
 800a070:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800a074:	4b30      	ldr	r3, [pc, #192]	; (800a138 <LmHandlerSend+0xec>)
 800a076:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a07a:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800a07e:	4669      	mov	r1, sp
 800a080:	7860      	ldrb	r0, [r4, #1]
 800a082:	f003 fa0f 	bl	800d4a4 <LoRaMacQueryTxPossible>
 800a086:	b370      	cbz	r0, 800a0e6 <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800a088:	2300      	movs	r3, #0
 800a08a:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800a08e:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800a090:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800a094:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800a098:	4b26      	ldr	r3, [pc, #152]	; (800a134 <LmHandlerSend+0xe8>)
 800a09a:	f103 0c10 	add.w	ip, r3, #16
 800a09e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0a2:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800a0a6:	4a24      	ldr	r2, [pc, #144]	; (800a138 <LmHandlerSend+0xec>)
 800a0a8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800a0ac:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800a0ae:	4631      	mov	r1, r6
 800a0b0:	a801      	add	r0, sp, #4
 800a0b2:	f003 ff31 	bl	800df18 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800a0b6:	9a05      	ldr	r2, [sp, #20]
 800a0b8:	4b20      	ldr	r3, [pc, #128]	; (800a13c <LmHandlerSend+0xf0>)
 800a0ba:	601a      	str	r2, [r3, #0]
    switch (status)
 800a0bc:	2811      	cmp	r0, #17
 800a0be:	d830      	bhi.n	800a122 <LmHandlerSend+0xd6>
 800a0c0:	e8df f000 	tbb	[pc, r0]
 800a0c4:	2f2f1c21 	.word	0x2f2f1c21
 800a0c8:	352f2f2f 	.word	0x352f2f2f
 800a0cc:	2c2f2f2f 	.word	0x2c2f2f2f
 800a0d0:	1c1c2f2f 	.word	0x1c1c2f2f
 800a0d4:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800a0d6:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <LmHandlerSend+0xf4>)
 800a0d8:	79d9      	ldrb	r1, [r3, #7]
 800a0da:	7998      	ldrb	r0, [r3, #6]
 800a0dc:	f7ff ff2c 	bl	8009f38 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a0e0:	f06f 0502 	mvn.w	r5, #2
 800a0e4:	e00c      	b.n	800a100 <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800a0e6:	7823      	ldrb	r3, [r4, #0]
 800a0e8:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800a0ec:	7863      	ldrb	r3, [r4, #1]
 800a0ee:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800a0f2:	6863      	ldr	r3, [r4, #4]
 800a0f4:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800a0f6:	f04f 35ff 	mov.w	r5, #4294967295
 800a0fa:	e7cd      	b.n	800a098 <LmHandlerSend+0x4c>
    switch (status)
 800a0fc:	f06f 0501 	mvn.w	r5, #1
}
 800a100:	4628      	mov	r0, r5
 800a102:	b006      	add	sp, #24
 800a104:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800a106:	4b0f      	ldr	r3, [pc, #60]	; (800a144 <LmHandlerSend+0xf8>)
 800a108:	2200      	movs	r2, #0
 800a10a:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800a10c:	f115 0f07 	cmn.w	r5, #7
 800a110:	d0f6      	beq.n	800a100 <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800a112:	2500      	movs	r5, #0
 800a114:	e7f4      	b.n	800a100 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800a116:	f06f 0504 	mvn.w	r5, #4
            break;
 800a11a:	e7f1      	b.n	800a100 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800a11c:	f06f 0505 	mvn.w	r5, #5
            break;
 800a120:	e7ee      	b.n	800a100 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800a122:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800a126:	e7eb      	b.n	800a100 <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a128:	f06f 0501 	mvn.w	r5, #1
 800a12c:	e7e8      	b.n	800a100 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a12e:	f06f 0502 	mvn.w	r5, #2
 800a132:	e7e5      	b.n	800a100 <LmHandlerSend+0xb4>
 800a134:	200000b0 	.word	0x200000b0
 800a138:	200033fc 	.word	0x200033fc
 800a13c:	200033dc 	.word	0x200033dc
 800a140:	20000094 	.word	0x20000094
 800a144:	200033e0 	.word	0x200033e0

0800a148 <LmHandlerProcess>:
{
 800a148:	b500      	push	{lr}
 800a14a:	b083      	sub	sp, #12
    LoRaMacProcess( );
 800a14c:	f002 ff30 	bl	800cfb0 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800a150:	f7ff fed4 	bl	8009efc <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800a154:	f7ff feba 	bl	8009ecc <LmHandlerPackageIsTxPending>
 800a158:	b910      	cbnz	r0, 800a160 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800a15a:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <LmHandlerProcess+0x40>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	b913      	cbnz	r3, 800a166 <LmHandlerProcess+0x1e>
}
 800a160:	b003      	add	sp, #12
 800a162:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800a166:	2200      	movs	r2, #0
 800a168:	f88d 2000 	strb.w	r2, [sp]
 800a16c:	f88d 2001 	strb.w	r2, [sp, #1]
 800a170:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800a172:	4b06      	ldr	r3, [pc, #24]	; (800a18c <LmHandlerProcess+0x44>)
 800a174:	78d9      	ldrb	r1, [r3, #3]
 800a176:	4668      	mov	r0, sp
 800a178:	f7ff ff68 	bl	800a04c <LmHandlerSend>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d1ef      	bne.n	800a160 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800a180:	4b01      	ldr	r3, [pc, #4]	; (800a188 <LmHandlerProcess+0x40>)
 800a182:	2200      	movs	r2, #0
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	e7eb      	b.n	800a160 <LmHandlerProcess+0x18>
 800a188:	200033e0 	.word	0x200033e0
 800a18c:	200033fc 	.word	0x200033fc

0800a190 <LmHandlerRequestClass>:
{
 800a190:	b510      	push	{r4, lr}
 800a192:	b08a      	sub	sp, #40	; 0x28
 800a194:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800a196:	f002 fef1 	bl	800cf7c <LoRaMacIsBusy>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d136      	bne.n	800a20c <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800a19e:	f7ff ff43 	bl	800a028 <LmHandlerJoinStatus>
 800a1a2:	2801      	cmp	r0, #1
 800a1a4:	d135      	bne.n	800a212 <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a1ac:	a801      	add	r0, sp, #4
 800a1ae:	f003 f9e5 	bl	800d57c <LoRaMacMibGetRequestConfirm>
 800a1b2:	bb88      	cbnz	r0, 800a218 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 800a1b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	d030      	beq.n	800a21e <LmHandlerRequestClass+0x8e>
        switch( newClass )
 800a1bc:	2c01      	cmp	r4, #1
 800a1be:	d030      	beq.n	800a222 <LmHandlerRequestClass+0x92>
 800a1c0:	2c02      	cmp	r4, #2
 800a1c2:	d014      	beq.n	800a1ee <LmHandlerRequestClass+0x5e>
 800a1c4:	b114      	cbz	r4, 800a1cc <LmHandlerRequestClass+0x3c>
 800a1c6:	2000      	movs	r0, #0
}
 800a1c8:	b00a      	add	sp, #40	; 0x28
 800a1ca:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 800a1cc:	b90b      	cbnz	r3, 800a1d2 <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e7fa      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 800a1d2:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a1d6:	a801      	add	r0, sp, #4
 800a1d8:	f003 fb1e 	bl	800d818 <LoRaMacMibSetRequestConfirm>
 800a1dc:	bb20      	cbnz	r0, 800a228 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800a1de:	4b19      	ldr	r3, [pc, #100]	; (800a244 <LmHandlerRequestClass+0xb4>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e4:	b31b      	cbz	r3, 800a22e <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e7ec      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 800a1ee:	bb03      	cbnz	r3, 800a232 <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 800a1f0:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800a1f4:	a801      	add	r0, sp, #4
 800a1f6:	f003 fb0f 	bl	800d818 <LoRaMacMibSetRequestConfirm>
 800a1fa:	b9e8      	cbnz	r0, 800a238 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800a1fc:	4b11      	ldr	r3, [pc, #68]	; (800a244 <LmHandlerRequestClass+0xb4>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a202:	b1e3      	cbz	r3, 800a23e <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800a204:	4620      	mov	r0, r4
 800a206:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a208:	2000      	movs	r0, #0
 800a20a:	e7dd      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a20c:	f06f 0001 	mvn.w	r0, #1
 800a210:	e7da      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a212:	f06f 0002 	mvn.w	r0, #2
 800a216:	e7d7      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	e7d4      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a21e:	2000      	movs	r0, #0
 800a220:	e7d2      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800a222:	f04f 30ff 	mov.w	r0, #4294967295
 800a226:	e7cf      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	e7cc      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a22e:	2000      	movs	r0, #0
 800a230:	e7ca      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800a232:	f04f 30ff 	mov.w	r0, #4294967295
 800a236:	e7c7      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800a238:	f04f 30ff 	mov.w	r0, #4294967295
 800a23c:	e7c4      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a23e:	2000      	movs	r0, #0
 800a240:	e7c2      	b.n	800a1c8 <LmHandlerRequestClass+0x38>
 800a242:	bf00      	nop
 800a244:	200033e4 	.word	0x200033e4

0800a248 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 800a248:	b170      	cbz	r0, 800a268 <LmHandlerGetCurrentClass+0x20>
{
 800a24a:	b510      	push	{r4, lr}
 800a24c:	b08a      	sub	sp, #40	; 0x28
 800a24e:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800a250:	2300      	movs	r3, #0
 800a252:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800a256:	a801      	add	r0, sp, #4
 800a258:	f003 f990 	bl	800d57c <LoRaMacMibGetRequestConfirm>
 800a25c:	b938      	cbnz	r0, 800a26e <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800a25e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a262:	7023      	strb	r3, [r4, #0]
}
 800a264:	b00a      	add	sp, #40	; 0x28
 800a266:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a26c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a26e:	f04f 30ff 	mov.w	r0, #4294967295
 800a272:	e7f7      	b.n	800a264 <LmHandlerGetCurrentClass+0x1c>

0800a274 <McpsIndication>:
{
 800a274:	b530      	push	{r4, r5, lr}
 800a276:	b085      	sub	sp, #20
 800a278:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 800a27a:	2200      	movs	r2, #0
 800a27c:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800a280:	491d      	ldr	r1, [pc, #116]	; (800a2f8 <McpsIndication+0x84>)
 800a282:	2201      	movs	r2, #1
 800a284:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 800a286:	7842      	ldrb	r2, [r0, #1]
 800a288:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800a28a:	bb5a      	cbnz	r2, 800a2e4 <McpsIndication+0x70>
 800a28c:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800a28e:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800a292:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a294:	f9b3 2000 	ldrsh.w	r2, [r3]
 800a298:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 800a29a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800a29e:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a2a0:	78db      	ldrb	r3, [r3, #3]
 800a2a2:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800a2a4:	6903      	ldr	r3, [r0, #16]
 800a2a6:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 800a2a8:	78c3      	ldrb	r3, [r0, #3]
 800a2aa:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800a2ae:	7b03      	ldrb	r3, [r0, #12]
 800a2b0:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800a2b4:	6883      	ldr	r3, [r0, #8]
 800a2b6:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800a2b8:	4d10      	ldr	r5, [pc, #64]	; (800a2fc <McpsIndication+0x88>)
 800a2ba:	682b      	ldr	r3, [r5, #0]
 800a2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2be:	a802      	add	r0, sp, #8
 800a2c0:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800a2c2:	682b      	ldr	r3, [r5, #0]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c6:	b113      	cbz	r3, 800a2ce <McpsIndication+0x5a>
 800a2c8:	7e22      	ldrb	r2, [r4, #24]
 800a2ca:	b102      	cbz	r2, 800a2ce <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800a2cc:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	f7ff fd73 	bl	8009dbc <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800a2d6:	f10d 0007 	add.w	r0, sp, #7
 800a2da:	f7ff ffb5 	bl	800a248 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800a2de:	7963      	ldrb	r3, [r4, #5]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d001      	beq.n	800a2e8 <McpsIndication+0x74>
}
 800a2e4:	b005      	add	sp, #20
 800a2e6:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800a2e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1f9      	bne.n	800a2e4 <McpsIndication+0x70>
        IsUplinkTxPending = true;
 800a2f0:	4b03      	ldr	r3, [pc, #12]	; (800a300 <McpsIndication+0x8c>)
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	e7f5      	b.n	800a2e4 <McpsIndication+0x70>
 800a2f8:	2000009c 	.word	0x2000009c
 800a2fc:	200033e4 	.word	0x200033e4
 800a300:	200033e0 	.word	0x200033e0

0800a304 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 800a304:	b180      	cbz	r0, 800a328 <LmHandlerGetTxDatarate+0x24>
{
 800a306:	b510      	push	{r4, lr}
 800a308:	b08a      	sub	sp, #40	; 0x28
 800a30a:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800a30c:	2320      	movs	r3, #32
 800a30e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800a312:	a801      	add	r0, sp, #4
 800a314:	f003 f932 	bl	800d57c <LoRaMacMibGetRequestConfirm>
 800a318:	b948      	cbnz	r0, 800a32e <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800a31a:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800a31e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800a320:	4a04      	ldr	r2, [pc, #16]	; (800a334 <LmHandlerGetTxDatarate+0x30>)
 800a322:	7113      	strb	r3, [r2, #4]
}
 800a324:	b00a      	add	sp, #40	; 0x28
 800a326:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800a328:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a32c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a32e:	f04f 30ff 	mov.w	r0, #4294967295
 800a332:	e7f7      	b.n	800a324 <LmHandlerGetTxDatarate+0x20>
 800a334:	200033fc 	.word	0x200033fc

0800a338 <MlmeConfirm>:
{
 800a338:	b510      	push	{r4, lr}
 800a33a:	b08a      	sub	sp, #40	; 0x28
 800a33c:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800a33e:	4824      	ldr	r0, [pc, #144]	; (800a3d0 <MlmeConfirm+0x98>)
 800a340:	2300      	movs	r3, #0
 800a342:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 800a344:	7863      	ldrb	r3, [r4, #1]
 800a346:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800a348:	4b22      	ldr	r3, [pc, #136]	; (800a3d4 <MlmeConfirm+0x9c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34e:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800a350:	4621      	mov	r1, r4
 800a352:	2002      	movs	r0, #2
 800a354:	f7ff fd32 	bl	8009dbc <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800a358:	7823      	ldrb	r3, [r4, #0]
 800a35a:	2b04      	cmp	r3, #4
 800a35c:	d029      	beq.n	800a3b2 <MlmeConfirm+0x7a>
 800a35e:	2b0b      	cmp	r3, #11
 800a360:	d02f      	beq.n	800a3c2 <MlmeConfirm+0x8a>
 800a362:	2b01      	cmp	r3, #1
 800a364:	d001      	beq.n	800a36a <MlmeConfirm+0x32>
}
 800a366:	b00a      	add	sp, #40	; 0x28
 800a368:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 800a36a:	2306      	movs	r3, #6
 800a36c:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800a370:	a801      	add	r0, sp, #4
 800a372:	f003 f903 	bl	800d57c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a376:	9a02      	ldr	r2, [sp, #8]
 800a378:	4b17      	ldr	r3, [pc, #92]	; (800a3d8 <MlmeConfirm+0xa0>)
 800a37a:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800a37c:	4817      	ldr	r0, [pc, #92]	; (800a3dc <MlmeConfirm+0xa4>)
 800a37e:	f7ff ffc1 	bl	800a304 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a382:	7863      	ldrb	r3, [r4, #1]
 800a384:	b16b      	cbz	r3, 800a3a2 <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800a386:	4b16      	ldr	r3, [pc, #88]	; (800a3e0 <MlmeConfirm+0xa8>)
 800a388:	22ff      	movs	r2, #255	; 0xff
 800a38a:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800a38c:	4b11      	ldr	r3, [pc, #68]	; (800a3d4 <MlmeConfirm+0x9c>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	4813      	ldr	r0, [pc, #76]	; (800a3e0 <MlmeConfirm+0xa8>)
 800a394:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a396:	7863      	ldrb	r3, [r4, #1]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e4      	bne.n	800a366 <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 800a39c:	f007 fe72 	bl	8012084 <SecureElementPrintSessionKeys>
        break;
 800a3a0:	e7e1      	b.n	800a366 <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a3a2:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <MlmeConfirm+0xa8>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800a3a8:	4b0e      	ldr	r3, [pc, #56]	; (800a3e4 <MlmeConfirm+0xac>)
 800a3aa:	7858      	ldrb	r0, [r3, #1]
 800a3ac:	f7ff fef0 	bl	800a190 <LmHandlerRequestClass>
 800a3b0:	e7ec      	b.n	800a38c <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 800a3b2:	4b0d      	ldr	r3, [pc, #52]	; (800a3e8 <MlmeConfirm+0xb0>)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800a3b8:	7a22      	ldrb	r2, [r4, #8]
 800a3ba:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800a3bc:	7a62      	ldrb	r2, [r4, #9]
 800a3be:	74da      	strb	r2, [r3, #19]
        break;
 800a3c0:	e7d1      	b.n	800a366 <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a3c2:	7863      	ldrb	r3, [r4, #1]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d0ce      	beq.n	800a366 <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 800a3c8:	f7ff fe14 	bl	8009ff4 <LmHandlerDeviceTimeReq>
}
 800a3cc:	e7cb      	b.n	800a366 <MlmeConfirm+0x2e>
 800a3ce:	bf00      	nop
 800a3d0:	200000b0 	.word	0x200000b0
 800a3d4:	200033e4 	.word	0x200033e4
 800a3d8:	2000007c 	.word	0x2000007c
 800a3dc:	20000098 	.word	0x20000098
 800a3e0:	20000094 	.word	0x20000094
 800a3e4:	200033fc 	.word	0x200033fc
 800a3e8:	2000009c 	.word	0x2000009c

0800a3ec <LmHandlerSetSystemMaxRxError>:
{
 800a3ec:	b500      	push	{lr}
 800a3ee:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800a3f0:	2323      	movs	r3, #35	; 0x23
 800a3f2:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800a3f6:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a3f8:	a801      	add	r0, sp, #4
 800a3fa:	f003 fa0d 	bl	800d818 <LoRaMacMibSetRequestConfirm>
 800a3fe:	b910      	cbnz	r0, 800a406 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800a400:	b00b      	add	sp, #44	; 0x2c
 800a402:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800a406:	f04f 30ff 	mov.w	r0, #4294967295
 800a40a:	e7f9      	b.n	800a400 <LmHandlerSetSystemMaxRxError+0x14>

0800a40c <LmHandlerConfigure>:
{
 800a40c:	b570      	push	{r4, r5, r6, lr}
 800a40e:	b090      	sub	sp, #64	; 0x40
 800a410:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800a412:	4c78      	ldr	r4, [pc, #480]	; (800a5f4 <LmHandlerConfigure+0x1e8>)
 800a414:	2214      	movs	r2, #20
 800a416:	4620      	mov	r0, r4
 800a418:	f009 ff5a 	bl	80142d0 <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 800a41c:	4b76      	ldr	r3, [pc, #472]	; (800a5f8 <LmHandlerConfigure+0x1ec>)
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800a422:	f7f8 fccb 	bl	8002dbc <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800a426:	7822      	ldrb	r2, [r4, #0]
 800a428:	2301      	movs	r3, #1
 800a42a:	4093      	lsls	r3, r2
 800a42c:	6841      	ldr	r1, [r0, #4]
 800a42e:	420b      	tst	r3, r1
 800a430:	d106      	bne.n	800a440 <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800a432:	4b72      	ldr	r3, [pc, #456]	; (800a5fc <LmHandlerConfigure+0x1f0>)
 800a434:	2201      	movs	r2, #1
 800a436:	2100      	movs	r1, #0
 800a438:	4608      	mov	r0, r1
 800a43a:	f009 fe33 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800a43e:	e7fe      	b.n	800a43e <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800a440:	496f      	ldr	r1, [pc, #444]	; (800a600 <LmHandlerConfigure+0x1f4>)
 800a442:	4870      	ldr	r0, [pc, #448]	; (800a604 <LmHandlerConfigure+0x1f8>)
 800a444:	f002 fdfe 	bl	800d044 <LoRaMacInitialization>
 800a448:	2800      	cmp	r0, #0
 800a44a:	f040 80cf 	bne.w	800a5ec <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 800a44e:	2327      	movs	r3, #39	; 0x27
 800a450:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800a454:	a807      	add	r0, sp, #28
 800a456:	f003 f9df 	bl	800d818 <LoRaMacMibSetRequestConfirm>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	f040 8087 	bne.w	800a56e <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 800a460:	4b69      	ldr	r3, [pc, #420]	; (800a608 <LmHandlerConfigure+0x1fc>)
 800a462:	2201      	movs	r2, #1
 800a464:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 800a466:	4b68      	ldr	r3, [pc, #416]	; (800a608 <LmHandlerConfigure+0x1fc>)
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	f000 80a8 	beq.w	800a5c0 <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800a470:	4b66      	ldr	r3, [pc, #408]	; (800a60c <LmHandlerConfigure+0x200>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	b10b      	cbz	r3, 800a47c <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800a478:	2000      	movs	r0, #0
 800a47a:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 800a47c:	2306      	movs	r3, #6
 800a47e:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800a482:	a807      	add	r0, sp, #28
 800a484:	f003 f87a 	bl	800d57c <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a488:	9a08      	ldr	r2, [sp, #32]
 800a48a:	4b61      	ldr	r3, [pc, #388]	; (800a610 <LmHandlerConfigure+0x204>)
 800a48c:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 800a48e:	2327      	movs	r3, #39	; 0x27
 800a490:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800a494:	a807      	add	r0, sp, #28
 800a496:	f003 f871 	bl	800d57c <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800a49a:	9a08      	ldr	r2, [sp, #32]
 800a49c:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 800a4a0:	4b54      	ldr	r3, [pc, #336]	; (800a5f4 <LmHandlerConfigure+0x1e8>)
 800a4a2:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800a4a4:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 800a4a8:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800a4aa:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 800a4ae:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 800a4b0:	2502      	movs	r5, #2
 800a4b2:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a4b6:	a807      	add	r0, sp, #28
 800a4b8:	f003 f860 	bl	800d57c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800a4bc:	4c54      	ldr	r4, [pc, #336]	; (800a610 <LmHandlerConfigure+0x204>)
 800a4be:	2208      	movs	r2, #8
 800a4c0:	9908      	ldr	r1, [sp, #32]
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f007 ff45 	bl	8012352 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a4ce:	a807      	add	r0, sp, #28
 800a4d0:	f003 f854 	bl	800d57c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800a4d4:	2208      	movs	r2, #8
 800a4d6:	9908      	ldr	r1, [sp, #32]
 800a4d8:	18a0      	adds	r0, r4, r2
 800a4da:	f007 ff3a 	bl	8012352 <memcpy1>
    SecureElementPrintKeys();
 800a4de:	f007 fd71 	bl	8011fc4 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800a4e2:	7de3      	ldrb	r3, [r4, #23]
 800a4e4:	7da2      	ldrb	r2, [r4, #22]
 800a4e6:	7d61      	ldrb	r1, [r4, #21]
 800a4e8:	7d20      	ldrb	r0, [r4, #20]
 800a4ea:	9003      	str	r0, [sp, #12]
 800a4ec:	9102      	str	r1, [sp, #8]
 800a4ee:	9201      	str	r2, [sp, #4]
 800a4f0:	9300      	str	r3, [sp, #0]
 800a4f2:	4b48      	ldr	r3, [pc, #288]	; (800a614 <LmHandlerConfigure+0x208>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f009 fdd3 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800a4fe:	260f      	movs	r6, #15
 800a500:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800a504:	2301      	movs	r3, #1
 800a506:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800a50a:	a807      	add	r0, sp, #28
 800a50c:	f003 f984 	bl	800d818 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800a510:	2310      	movs	r3, #16
 800a512:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800a516:	2500      	movs	r5, #0
 800a518:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a51c:	a807      	add	r0, sp, #28
 800a51e:	f003 f97b 	bl	800d818 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800a522:	2304      	movs	r3, #4
 800a524:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800a528:	4c32      	ldr	r4, [pc, #200]	; (800a5f4 <LmHandlerConfigure+0x1e8>)
 800a52a:	78a3      	ldrb	r3, [r4, #2]
 800a52c:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a530:	a807      	add	r0, sp, #28
 800a532:	f003 f971 	bl	800d818 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800a536:	2338      	movs	r3, #56	; 0x38
 800a538:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800a53c:	6923      	ldr	r3, [r4, #16]
 800a53e:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a540:	a807      	add	r0, sp, #28
 800a542:	f003 f969 	bl	800d818 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a546:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800a54a:	a905      	add	r1, sp, #20
 800a54c:	7820      	ldrb	r0, [r4, #0]
 800a54e:	f004 fe6d 	bl	800f22c <RegionGetPhyParam>
 800a552:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800a554:	1b43      	subs	r3, r0, r5
 800a556:	bf18      	it	ne
 800a558:	2301      	movne	r3, #1
 800a55a:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 800a55c:	2014      	movs	r0, #20
 800a55e:	f7ff ff45 	bl	800a3ec <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800a562:	79a0      	ldrb	r0, [r4, #6]
 800a564:	f003 fdc6 	bl	800e0f4 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800a568:	4628      	mov	r0, r5
}
 800a56a:	b010      	add	sp, #64	; 0x40
 800a56c:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800a56e:	2328      	movs	r3, #40	; 0x28
 800a570:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800a574:	4b25      	ldr	r3, [pc, #148]	; (800a60c <LmHandlerConfigure+0x200>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	b14b      	cbz	r3, 800a590 <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800a57c:	a807      	add	r0, sp, #28
 800a57e:	f002 fffd 	bl	800d57c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800a582:	4b22      	ldr	r3, [pc, #136]	; (800a60c <LmHandlerConfigure+0x200>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	f240 518c 	movw	r1, #1420	; 0x58c
 800a58c:	9808      	ldr	r0, [sp, #32]
 800a58e:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800a590:	2327      	movs	r3, #39	; 0x27
 800a592:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800a596:	a807      	add	r0, sp, #28
 800a598:	f003 f93e 	bl	800d818 <LoRaMacMibSetRequestConfirm>
 800a59c:	2800      	cmp	r0, #0
 800a59e:	f47f af62 	bne.w	800a466 <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800a5a8:	a807      	add	r0, sp, #28
 800a5aa:	f002 ffe7 	bl	800d57c <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800a5ae:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f43f af57 	beq.w	800a466 <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 800a5b8:	4b13      	ldr	r3, [pc, #76]	; (800a608 <LmHandlerConfigure+0x1fc>)
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e752      	b.n	800a466 <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 800a5c0:	2305      	movs	r3, #5
 800a5c2:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800a5ca:	a807      	add	r0, sp, #28
 800a5cc:	f003 f924 	bl	800d818 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800a5d0:	4b0e      	ldr	r3, [pc, #56]	; (800a60c <LmHandlerConfigure+0x200>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	4798      	blx	r3
 800a5d8:	4b0d      	ldr	r3, [pc, #52]	; (800a610 <LmHandlerConfigure+0x204>)
 800a5da:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 800a5dc:	2306      	movs	r3, #6
 800a5de:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800a5e2:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800a5e4:	a807      	add	r0, sp, #28
 800a5e6:	f003 f917 	bl	800d818 <LoRaMacMibSetRequestConfirm>
 800a5ea:	e761      	b.n	800a4b0 <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f0:	e7bb      	b.n	800a56a <LmHandlerConfigure+0x15e>
 800a5f2:	bf00      	nop
 800a5f4:	200033fc 	.word	0x200033fc
 800a5f8:	200033e0 	.word	0x200033e0
 800a5fc:	08015328 	.word	0x08015328
 800a600:	20003420 	.word	0x20003420
 800a604:	20003434 	.word	0x20003434
 800a608:	200033da 	.word	0x200033da
 800a60c:	200033e4 	.word	0x200033e4
 800a610:	2000007c 	.word	0x2000007c
 800a614:	08015374 	.word	0x08015374

0800a618 <LmHandlerPackageRegister>:
    switch( id )
 800a618:	b9f0      	cbnz	r0, 800a658 <LmHandlerPackageRegister+0x40>
{
 800a61a:	b538      	push	{r3, r4, r5, lr}
 800a61c:	460c      	mov	r4, r1
 800a61e:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 800a620:	f000 fb76 	bl	800ad10 <LmhpCompliancePackageFactory>
    if( package != NULL )
 800a624:	b1a8      	cbz	r0, 800a652 <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 800a626:	4a0e      	ldr	r2, [pc, #56]	; (800a660 <LmHandlerPackageRegister+0x48>)
 800a628:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800a62c:	4a0d      	ldr	r2, [pc, #52]	; (800a664 <LmHandlerPackageRegister+0x4c>)
 800a62e:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800a630:	4a0d      	ldr	r2, [pc, #52]	; (800a668 <LmHandlerPackageRegister+0x50>)
 800a632:	6812      	ldr	r2, [r2, #0]
 800a634:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800a636:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800a638:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800a63a:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800a63c:	490b      	ldr	r1, [pc, #44]	; (800a66c <LmHandlerPackageRegister+0x54>)
 800a63e:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800a640:	6992      	ldr	r2, [r2, #24]
 800a642:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800a644:	6843      	ldr	r3, [r0, #4]
 800a646:	22f2      	movs	r2, #242	; 0xf2
 800a648:	4909      	ldr	r1, [pc, #36]	; (800a670 <LmHandlerPackageRegister+0x58>)
 800a64a:	4620      	mov	r0, r4
 800a64c:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800a64e:	2000      	movs	r0, #0
}
 800a650:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 800a652:	f04f 30ff 	mov.w	r0, #4294967295
 800a656:	e7fb      	b.n	800a650 <LmHandlerPackageRegister+0x38>
 800a658:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	200033e8 	.word	0x200033e8
 800a664:	08009f39 	.word	0x08009f39
 800a668:	200033e4 	.word	0x200033e4
 800a66c:	08009ff5 	.word	0x08009ff5
 800a670:	200032e8 	.word	0x200032e8

0800a674 <LmHandlerInit>:
{
 800a674:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 800a676:	4b13      	ldr	r3, [pc, #76]	; (800a6c4 <LmHandlerInit+0x50>)
 800a678:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800a67a:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <LmHandlerInit+0x54>)
 800a67c:	4a13      	ldr	r2, [pc, #76]	; (800a6cc <LmHandlerInit+0x58>)
 800a67e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800a680:	4a13      	ldr	r2, [pc, #76]	; (800a6d0 <LmHandlerInit+0x5c>)
 800a682:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800a684:	4a13      	ldr	r2, [pc, #76]	; (800a6d4 <LmHandlerInit+0x60>)
 800a686:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800a688:	4a13      	ldr	r2, [pc, #76]	; (800a6d8 <LmHandlerInit+0x64>)
 800a68a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800a68c:	6802      	ldr	r2, [r0, #0]
 800a68e:	4b13      	ldr	r3, [pc, #76]	; (800a6dc <LmHandlerInit+0x68>)
 800a690:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800a692:	6842      	ldr	r2, [r0, #4]
 800a694:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800a696:	6882      	ldr	r2, [r0, #8]
 800a698:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800a69a:	4a11      	ldr	r2, [pc, #68]	; (800a6e0 <LmHandlerInit+0x6c>)
 800a69c:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800a69e:	6982      	ldr	r2, [r0, #24]
 800a6a0:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800a6a2:	4b10      	ldr	r3, [pc, #64]	; (800a6e4 <LmHandlerInit+0x70>)
 800a6a4:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800a6a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6a8:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800a6aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a6ac:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800a6ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6b0:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	f7ff ffaf 	bl	800a618 <LmHandlerPackageRegister>
 800a6ba:	b900      	cbnz	r0, 800a6be <LmHandlerInit+0x4a>
}
 800a6bc:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800a6be:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c2:	e7fb      	b.n	800a6bc <LmHandlerInit+0x48>
 800a6c4:	200033e4 	.word	0x200033e4
 800a6c8:	20003434 	.word	0x20003434
 800a6cc:	08009e8d 	.word	0x08009e8d
 800a6d0:	0800a275 	.word	0x0800a275
 800a6d4:	0800a339 	.word	0x0800a339
 800a6d8:	08009e29 	.word	0x08009e29
 800a6dc:	20003420 	.word	0x20003420
 800a6e0:	0800f1d5 	.word	0x0800f1d5
 800a6e4:	20003410 	.word	0x20003410

0800a6e8 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 800a6e8:	b161      	cbz	r1, 800a704 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 800a6ea:	b118      	cbz	r0, 800a6f4 <LmHandlerGetVersion+0xc>
 800a6ec:	2801      	cmp	r0, #1
 800a6ee:	d005      	beq.n	800a6fc <LmHandlerGetVersion+0x14>
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800a6f4:	4a05      	ldr	r2, [pc, #20]	; (800a70c <LmHandlerGetVersion+0x24>)
 800a6f6:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800a6f8:	2000      	movs	r0, #0
            break;
 800a6fa:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800a6fc:	4a04      	ldr	r2, [pc, #16]	; (800a710 <LmHandlerGetVersion+0x28>)
 800a6fe:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a700:	2000      	movs	r0, #0
            break;
 800a702:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800a704:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	01000400 	.word	0x01000400
 800a710:	02010001 	.word	0x02010001

0800a714 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800a714:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800a716:	f003 fd01 	bl	800e11c <LoRaMacDeInitialization>
 800a71a:	b900      	cbnz	r0, 800a71e <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800a71c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a71e:	f06f 0001 	mvn.w	r0, #1
 800a722:	e7fb      	b.n	800a71c <LmHandlerStop+0x8>

0800a724 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800a724:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800a726:	f002 fe8b 	bl	800d440 <LoRaMacHalt>
 800a72a:	b900      	cbnz	r0, 800a72e <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800a72c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a72e:	f06f 0001 	mvn.w	r0, #1
 800a732:	e7fb      	b.n	800a72c <LmHandlerHalt+0x8>

0800a734 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800a734:	b510      	push	{r4, lr}
 800a736:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800a738:	f7ff fff4 	bl	800a724 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800a73c:	4604      	mov	r4, r0
 800a73e:	b148      	cbz	r0, 800a754 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800a740:	b92c      	cbnz	r4, 800a74e <LmHandlerNvmDataStore+0x1a>
 800a742:	4b18      	ldr	r3, [pc, #96]	; (800a7a4 <LmHandlerNvmDataStore+0x70>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	b10b      	cbz	r3, 800a74e <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800a74a:	2001      	movs	r0, #1
 800a74c:	4798      	blx	r3
    }

    return lmhStatus;
}
 800a74e:	4620      	mov	r0, r4
 800a750:	b00a      	add	sp, #40	; 0x28
 800a752:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800a754:	f004 fd46 	bl	800f1e4 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 800a758:	f110 0f02 	cmn.w	r0, #2
 800a75c:	d012      	beq.n	800a784 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800a75e:	b9d0      	cbnz	r0, 800a796 <LmHandlerNvmDataStore+0x62>
 800a760:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <LmHandlerNvmDataStore+0x70>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	695b      	ldr	r3, [r3, #20]
 800a766:	b1cb      	cbz	r3, 800a79c <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 800a768:	2327      	movs	r3, #39	; 0x27
 800a76a:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800a76e:	a801      	add	r0, sp, #4
 800a770:	f002 ff04 	bl	800d57c <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800a774:	4b0b      	ldr	r3, [pc, #44]	; (800a7a4 <LmHandlerNvmDataStore+0x70>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 800a77e:	9802      	ldr	r0, [sp, #8]
 800a780:	4798      	blx	r3
 800a782:	e001      	b.n	800a788 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800a784:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800a788:	f004 fd3c 	bl	800f204 <NvmDataMgmtStoreEnd>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d0d7      	beq.n	800a740 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800a790:	f04f 34ff 	mov.w	r4, #4294967295
 800a794:	e7db      	b.n	800a74e <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800a796:	f04f 34ff 	mov.w	r4, #4294967295
 800a79a:	e7f5      	b.n	800a788 <LmHandlerNvmDataStore+0x54>
 800a79c:	f04f 34ff 	mov.w	r4, #4294967295
 800a7a0:	e7f2      	b.n	800a788 <LmHandlerNvmDataStore+0x54>
 800a7a2:	bf00      	nop
 800a7a4:	200033e4 	.word	0x200033e4

0800a7a8 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800a7a8:	4b01      	ldr	r3, [pc, #4]	; (800a7b0 <LmhpComplianceIsInitialized+0x8>)
 800a7aa:	7818      	ldrb	r0, [r3, #0]
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	20003448 	.word	0x20003448

0800a7b4 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800a7b4:	4b01      	ldr	r3, [pc, #4]	; (800a7bc <LmhpComplianceIsTxPending+0x8>)
 800a7b6:	7858      	ldrb	r0, [r3, #1]
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20003448 	.word	0x20003448

0800a7c0 <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800a7c0:	4770      	bx	lr

0800a7c2 <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800a7c2:	4770      	bx	lr

0800a7c4 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800a7c4:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 800a7c6:	4b03      	ldr	r3, [pc, #12]	; (800a7d4 <OnProcessTimer+0x10>)
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800a7cc:	4b02      	ldr	r3, [pc, #8]	; (800a7d8 <OnProcessTimer+0x14>)
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	4798      	blx	r3
}
 800a7d2:	bd08      	pop	{r3, pc}
 800a7d4:	20003448 	.word	0x20003448
 800a7d8:	200000cc 	.word	0x200000cc

0800a7dc <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800a7dc:	4b8d      	ldr	r3, [pc, #564]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 81fd 	beq.w	800abe0 <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800a7e6:	78c3      	ldrb	r3, [r0, #3]
 800a7e8:	b90b      	cbnz	r3, 800a7ee <LmhpComplianceOnMcpsIndication+0x12>
 800a7ea:	7b83      	ldrb	r3, [r0, #14]
 800a7ec:	b11b      	cbz	r3, 800a7f6 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800a7ee:	4a89      	ldr	r2, [pc, #548]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800a7f0:	8a13      	ldrh	r3, [r2, #16]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800a7f6:	7b43      	ldrb	r3, [r0, #13]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 81f1 	beq.w	800abe0 <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800a7fe:	78c3      	ldrb	r3, [r0, #3]
 800a800:	2be0      	cmp	r3, #224	; 0xe0
 800a802:	f040 81ed 	bne.w	800abe0 <LmhpComplianceOnMcpsIndication+0x404>
{
 800a806:	b570      	push	{r4, r5, r6, lr}
 800a808:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 800a80a:	4b82      	ldr	r3, [pc, #520]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800a80c:	2200      	movs	r2, #0
 800a80e:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800a810:	6884      	ldr	r4, [r0, #8]
 800a812:	7823      	ldrb	r3, [r4, #0]
 800a814:	2b7f      	cmp	r3, #127	; 0x7f
 800a816:	f200 8093 	bhi.w	800a940 <LmhpComplianceOnMcpsIndication+0x164>
 800a81a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a81e:	0080      	.short	0x0080
 800a820:	00a600a1 	.word	0x00a600a1
 800a824:	00b400ac 	.word	0x00b400ac
 800a828:	00c800c1 	.word	0x00c800c1
 800a82c:	00f200e1 	.word	0x00f200e1
 800a830:	0133011f 	.word	0x0133011f
 800a834:	00910091 	.word	0x00910091
 800a838:	00910091 	.word	0x00910091
 800a83c:	00910091 	.word	0x00910091
 800a840:	00910091 	.word	0x00910091
 800a844:	00910091 	.word	0x00910091
 800a848:	00910091 	.word	0x00910091
 800a84c:	00910091 	.word	0x00910091
 800a850:	00910091 	.word	0x00910091
 800a854:	00910091 	.word	0x00910091
 800a858:	00910091 	.word	0x00910091
 800a85c:	01370091 	.word	0x01370091
 800a860:	0142013e 	.word	0x0142013e
 800a864:	00910091 	.word	0x00910091
 800a868:	00910091 	.word	0x00910091
 800a86c:	00910091 	.word	0x00910091
 800a870:	00910091 	.word	0x00910091
 800a874:	00910091 	.word	0x00910091
 800a878:	00910091 	.word	0x00910091
 800a87c:	00910091 	.word	0x00910091
 800a880:	00910091 	.word	0x00910091
 800a884:	00910091 	.word	0x00910091
 800a888:	00910091 	.word	0x00910091
 800a88c:	00910091 	.word	0x00910091
 800a890:	00910091 	.word	0x00910091
 800a894:	00910091 	.word	0x00910091
 800a898:	00910091 	.word	0x00910091
 800a89c:	00910091 	.word	0x00910091
 800a8a0:	00910091 	.word	0x00910091
 800a8a4:	00910091 	.word	0x00910091
 800a8a8:	00910091 	.word	0x00910091
 800a8ac:	00910091 	.word	0x00910091
 800a8b0:	00910091 	.word	0x00910091
 800a8b4:	00910091 	.word	0x00910091
 800a8b8:	00910091 	.word	0x00910091
 800a8bc:	00910091 	.word	0x00910091
 800a8c0:	00910091 	.word	0x00910091
 800a8c4:	00910091 	.word	0x00910091
 800a8c8:	00910091 	.word	0x00910091
 800a8cc:	00910091 	.word	0x00910091
 800a8d0:	00910091 	.word	0x00910091
 800a8d4:	00910091 	.word	0x00910091
 800a8d8:	00910091 	.word	0x00910091
 800a8dc:	00910091 	.word	0x00910091
 800a8e0:	00910091 	.word	0x00910091
 800a8e4:	00910091 	.word	0x00910091
 800a8e8:	00910091 	.word	0x00910091
 800a8ec:	00910091 	.word	0x00910091
 800a8f0:	00910091 	.word	0x00910091
 800a8f4:	00910091 	.word	0x00910091
 800a8f8:	00910091 	.word	0x00910091
 800a8fc:	00910091 	.word	0x00910091
 800a900:	00910091 	.word	0x00910091
 800a904:	00910091 	.word	0x00910091
 800a908:	00910091 	.word	0x00910091
 800a90c:	00910091 	.word	0x00910091
 800a910:	00910091 	.word	0x00910091
 800a914:	00910091 	.word	0x00910091
 800a918:	016e014d 	.word	0x016e014d
 800a91c:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800a91e:	4b3d      	ldr	r3, [pc, #244]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	2101      	movs	r1, #1
 800a924:	7299      	strb	r1, [r3, #10]
 800a926:	2000      	movs	r0, #0
 800a928:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800a92a:	68d8      	ldr	r0, [r3, #12]
 800a92c:	7a9a      	ldrb	r2, [r3, #10]
 800a92e:	1854      	adds	r4, r2, r1
 800a930:	729c      	strb	r4, [r3, #10]
 800a932:	2406      	movs	r4, #6
 800a934:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800a936:	68d8      	ldr	r0, [r3, #12]
 800a938:	7a9a      	ldrb	r2, [r3, #10]
 800a93a:	1854      	adds	r4, r2, r1
 800a93c:	729c      	strb	r4, [r3, #10]
 800a93e:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800a940:	4b34      	ldr	r3, [pc, #208]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800a942:	7a9b      	ldrb	r3, [r3, #10]
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 8144 	beq.w	800abd2 <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 800a94a:	4c33      	ldr	r4, [pc, #204]	; (800aa18 <LmhpComplianceOnMcpsIndication+0x23c>)
 800a94c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a950:	4620      	mov	r0, r4
 800a952:	f009 febf 	bl	80146d4 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800a956:	4620      	mov	r0, r4
 800a958:	f009 fe76 	bl	8014648 <UTIL_TIMER_Start>
}
 800a95c:	b014      	add	sp, #80	; 0x50
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 800a960:	4b2c      	ldr	r3, [pc, #176]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800a968:	e7ea      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800a96a:	4b2c      	ldr	r3, [pc, #176]	; (800aa1c <LmhpComplianceOnMcpsIndication+0x240>)
 800a96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96e:	2101      	movs	r1, #1
 800a970:	2002      	movs	r0, #2
 800a972:	4798      	blx	r3
        break;
 800a974:	e7e4      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800a976:	7862      	ldrb	r2, [r4, #1]
 800a978:	4b26      	ldr	r3, [pc, #152]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800a97a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800a984:	e7dc      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 800a986:	2304      	movs	r3, #4
 800a988:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800a98c:	7863      	ldrb	r3, [r4, #1]
 800a98e:	3b00      	subs	r3, #0
 800a990:	bf18      	it	ne
 800a992:	2301      	movne	r3, #1
 800a994:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a998:	4668      	mov	r0, sp
 800a99a:	f002 ff3d 	bl	800d818 <LoRaMacMibSetRequestConfirm>
        break;
 800a99e:	e7cf      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800a9a0:	7860      	ldrb	r0, [r4, #1]
 800a9a2:	3800      	subs	r0, #0
 800a9a4:	bf18      	it	ne
 800a9a6:	2001      	movne	r0, #1
 800a9a8:	f003 fba4 	bl	800e0f4 <LoRaMacTestSetDutyCycleOn>
        break;
 800a9ac:	e7c8      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800a9ae:	466d      	mov	r5, sp
 800a9b0:	4e1b      	ldr	r6, [pc, #108]	; (800aa20 <LmhpComplianceOnMcpsIndication+0x244>)
 800a9b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a9b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a9b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a9ba:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a9be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800a9c2:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800a9c4:	2b0a      	cmp	r3, #10
 800a9c6:	d8bb      	bhi.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800a9c8:	4a16      	ldr	r2, [pc, #88]	; (800aa24 <LmhpComplianceOnMcpsIndication+0x248>)
 800a9ca:	6812      	ldr	r2, [r2, #0]
 800a9cc:	6852      	ldr	r2, [r2, #4]
 800a9ce:	2a00      	cmp	r2, #0
 800a9d0:	d0b6      	beq.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800a9d2:	a914      	add	r1, sp, #80	; 0x50
 800a9d4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a9d8:	f853 0c50 	ldr.w	r0, [r3, #-80]
 800a9dc:	4790      	blx	r2
        break;
 800a9de:	e7af      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800a9e0:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800a9e2:	1e53      	subs	r3, r2, #1
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d8aa      	bhi.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800a9ea:	1e50      	subs	r0, r2, #1
 800a9ec:	bf18      	it	ne
 800a9ee:	2001      	movne	r0, #1
 800a9f0:	4b08      	ldr	r3, [pc, #32]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800a9f2:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	; (800aa24 <LmhpComplianceOnMcpsIndication+0x248>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d0a0      	beq.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800a9fe:	4798      	blx	r3
 800aa00:	e79e      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800aa02:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <LmhpComplianceOnMcpsIndication+0x238>)
 800aa04:	68da      	ldr	r2, [r3, #12]
 800aa06:	2101      	movs	r1, #1
 800aa08:	7299      	strb	r1, [r3, #10]
 800aa0a:	2308      	movs	r3, #8
 800aa0c:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800aa0e:	460b      	mov	r3, r1
 800aa10:	e01b      	b.n	800aa4a <LmhpComplianceOnMcpsIndication+0x26e>
 800aa12:	bf00      	nop
 800aa14:	20003448 	.word	0x20003448
 800aa18:	20003480 	.word	0x20003480
 800aa1c:	200000cc 	.word	0x200000cc
 800aa20:	08014bfc 	.word	0x08014bfc
 800aa24:	20003444 	.word	0x20003444
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800aa28:	6882      	ldr	r2, [r0, #8]
 800aa2a:	f101 0c01 	add.w	ip, r1, #1
 800aa2e:	5c52      	ldrb	r2, [r2, r1]
 800aa30:	496c      	ldr	r1, [pc, #432]	; (800abe4 <LmhpComplianceOnMcpsIndication+0x408>)
 800aa32:	68cd      	ldr	r5, [r1, #12]
 800aa34:	7a8c      	ldrb	r4, [r1, #10]
 800aa36:	f104 0e01 	add.w	lr, r4, #1
 800aa3a:	f881 e00a 	strb.w	lr, [r1, #10]
 800aa3e:	3201      	adds	r2, #1
 800aa40:	552a      	strb	r2, [r5, r4]
             i++ )
 800aa42:	3301      	adds	r3, #1
 800aa44:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800aa46:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800aa4a:	4a66      	ldr	r2, [pc, #408]	; (800abe4 <LmhpComplianceOnMcpsIndication+0x408>)
 800aa4c:	7a52      	ldrb	r2, [r2, #9]
 800aa4e:	7b04      	ldrb	r4, [r0, #12]
 800aa50:	42a2      	cmp	r2, r4
 800aa52:	bf28      	it	cs
 800aa54:	4622      	movcs	r2, r4
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d8e6      	bhi.n	800aa28 <LmhpComplianceOnMcpsIndication+0x24c>
 800aa5a:	e771      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800aa5c:	4b61      	ldr	r3, [pc, #388]	; (800abe4 <LmhpComplianceOnMcpsIndication+0x408>)
 800aa5e:	68da      	ldr	r2, [r3, #12]
 800aa60:	2101      	movs	r1, #1
 800aa62:	7299      	strb	r1, [r3, #10]
 800aa64:	2109      	movs	r1, #9
 800aa66:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800aa68:	8a18      	ldrh	r0, [r3, #16]
 800aa6a:	68d9      	ldr	r1, [r3, #12]
 800aa6c:	7a9a      	ldrb	r2, [r3, #10]
 800aa6e:	1c54      	adds	r4, r2, #1
 800aa70:	729c      	strb	r4, [r3, #10]
 800aa72:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800aa74:	8a1a      	ldrh	r2, [r3, #16]
 800aa76:	68d8      	ldr	r0, [r3, #12]
 800aa78:	7a99      	ldrb	r1, [r3, #10]
 800aa7a:	1c4c      	adds	r4, r1, #1
 800aa7c:	729c      	strb	r4, [r3, #10]
 800aa7e:	0a13      	lsrs	r3, r2, #8
 800aa80:	5443      	strb	r3, [r0, r1]
        break;
 800aa82:	e75d      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 800aa84:	4b57      	ldr	r3, [pc, #348]	; (800abe4 <LmhpComplianceOnMcpsIndication+0x408>)
 800aa86:	2200      	movs	r2, #0
 800aa88:	821a      	strh	r2, [r3, #16]
        break;
 800aa8a:	e759      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 800aa8c:	2304      	movs	r3, #4
 800aa8e:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 800aa92:	4668      	mov	r0, sp
 800aa94:	f003 f946 	bl	800dd24 <LoRaMacMlmeRequest>
        break;
 800aa98:	e752      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 800aa9a:	4b53      	ldr	r3, [pc, #332]	; (800abe8 <LmhpComplianceOnMcpsIndication+0x40c>)
 800aa9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9e:	4798      	blx	r3
        break;
 800aaa0:	e74e      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800aaa2:	7860      	ldrb	r0, [r4, #1]
 800aaa4:	4b4f      	ldr	r3, [pc, #316]	; (800abe4 <LmhpComplianceOnMcpsIndication+0x408>)
 800aaa6:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800aaa8:	4b50      	ldr	r3, [pc, #320]	; (800abec <LmhpComplianceOnMcpsIndication+0x410>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f43f af46 	beq.w	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800aab4:	4798      	blx	r3
 800aab6:	e743      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 800aab8:	7b03      	ldrb	r3, [r0, #12]
 800aaba:	2b07      	cmp	r3, #7
 800aabc:	f47f af40 	bne.w	800a940 <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 800aac0:	2305      	movs	r3, #5
 800aac2:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800aac6:	7863      	ldrb	r3, [r4, #1]
 800aac8:	78a2      	ldrb	r2, [r4, #2]
 800aaca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 800aace:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800aad2:	78e3      	ldrb	r3, [r4, #3]
 800aad4:	7922      	ldrb	r2, [r4, #4]
 800aad6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800aada:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800aadc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800aae0:	2264      	movs	r2, #100	; 0x64
 800aae2:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800aae6:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800aae8:	6883      	ldr	r3, [r0, #8]
 800aaea:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800aaee:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 800aaf2:	4668      	mov	r0, sp
 800aaf4:	f003 f916 	bl	800dd24 <LoRaMacMlmeRequest>
        break;
 800aaf8:	e722      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800aafa:	2339      	movs	r3, #57	; 0x39
 800aafc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 800ab00:	2300      	movs	r3, #0
 800ab02:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 800ab06:	a80b      	add	r0, sp, #44	; 0x2c
 800ab08:	f002 fe86 	bl	800d818 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 800ab0c:	4b35      	ldr	r3, [pc, #212]	; (800abe4 <LmhpComplianceOnMcpsIndication+0x408>)
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800ab14:	e714      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 800ab16:	232a      	movs	r3, #42	; 0x2a
 800ab18:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ab1c:	4668      	mov	r0, sp
 800ab1e:	f002 fd2d 	bl	800d57c <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800ab22:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800ab24:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800ab26:	4b2f      	ldr	r3, [pc, #188]	; (800abe4 <LmhpComplianceOnMcpsIndication+0x408>)
 800ab28:	68dc      	ldr	r4, [r3, #12]
 800ab2a:	7a98      	ldrb	r0, [r3, #10]
 800ab2c:	1c45      	adds	r5, r0, #1
 800ab2e:	729d      	strb	r5, [r3, #10]
 800ab30:	257f      	movs	r5, #127	; 0x7f
 800ab32:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800ab34:	482d      	ldr	r0, [pc, #180]	; (800abec <LmhpComplianceOnMcpsIndication+0x410>)
 800ab36:	6800      	ldr	r0, [r0, #0]
 800ab38:	68dd      	ldr	r5, [r3, #12]
 800ab3a:	7a9c      	ldrb	r4, [r3, #10]
 800ab3c:	1c66      	adds	r6, r4, #1
 800ab3e:	729e      	strb	r6, [r3, #10]
 800ab40:	78c6      	ldrb	r6, [r0, #3]
 800ab42:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800ab44:	68dd      	ldr	r5, [r3, #12]
 800ab46:	7a9c      	ldrb	r4, [r3, #10]
 800ab48:	1c66      	adds	r6, r4, #1
 800ab4a:	729e      	strb	r6, [r3, #10]
 800ab4c:	7886      	ldrb	r6, [r0, #2]
 800ab4e:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800ab50:	68dd      	ldr	r5, [r3, #12]
 800ab52:	7a9c      	ldrb	r4, [r3, #10]
 800ab54:	1c66      	adds	r6, r4, #1
 800ab56:	729e      	strb	r6, [r3, #10]
 800ab58:	7846      	ldrb	r6, [r0, #1]
 800ab5a:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800ab5c:	68dd      	ldr	r5, [r3, #12]
 800ab5e:	7a9c      	ldrb	r4, [r3, #10]
 800ab60:	1c66      	adds	r6, r4, #1
 800ab62:	729e      	strb	r6, [r3, #10]
 800ab64:	7800      	ldrb	r0, [r0, #0]
 800ab66:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800ab68:	68dc      	ldr	r4, [r3, #12]
 800ab6a:	7a98      	ldrb	r0, [r3, #10]
 800ab6c:	1c45      	adds	r5, r0, #1
 800ab6e:	729d      	strb	r5, [r3, #10]
 800ab70:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800ab74:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800ab76:	68dc      	ldr	r4, [r3, #12]
 800ab78:	7a98      	ldrb	r0, [r3, #10]
 800ab7a:	1c45      	adds	r5, r0, #1
 800ab7c:	729d      	strb	r5, [r3, #10]
 800ab7e:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800ab82:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800ab84:	68dc      	ldr	r4, [r3, #12]
 800ab86:	7a98      	ldrb	r0, [r3, #10]
 800ab88:	1c45      	adds	r5, r0, #1
 800ab8a:	729d      	strb	r5, [r3, #10]
 800ab8c:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800ab90:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800ab92:	68dc      	ldr	r4, [r3, #12]
 800ab94:	7a98      	ldrb	r0, [r3, #10]
 800ab96:	1c45      	adds	r5, r0, #1
 800ab98:	729d      	strb	r5, [r3, #10]
 800ab9a:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800ab9c:	68d8      	ldr	r0, [r3, #12]
 800ab9e:	7a99      	ldrb	r1, [r3, #10]
 800aba0:	1c4c      	adds	r4, r1, #1
 800aba2:	729c      	strb	r4, [r3, #10]
 800aba4:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800aba8:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800abaa:	68d8      	ldr	r0, [r3, #12]
 800abac:	7a99      	ldrb	r1, [r3, #10]
 800abae:	1c4c      	adds	r4, r1, #1
 800abb0:	729c      	strb	r4, [r3, #10]
 800abb2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800abb6:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800abb8:	68d8      	ldr	r0, [r3, #12]
 800abba:	7a99      	ldrb	r1, [r3, #10]
 800abbc:	1c4c      	adds	r4, r1, #1
 800abbe:	729c      	strb	r4, [r3, #10]
 800abc0:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800abc4:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800abc6:	68d8      	ldr	r0, [r3, #12]
 800abc8:	7a99      	ldrb	r1, [r3, #10]
 800abca:	1c4c      	adds	r4, r1, #1
 800abcc:	729c      	strb	r4, [r3, #10]
 800abce:	5442      	strb	r2, [r0, r1]
        break;
 800abd0:	e6b6      	b.n	800a940 <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 800abd2:	4807      	ldr	r0, [pc, #28]	; (800abf0 <LmhpComplianceOnMcpsIndication+0x414>)
 800abd4:	f009 fcde 	bl	8014594 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800abd8:	4b02      	ldr	r3, [pc, #8]	; (800abe4 <LmhpComplianceOnMcpsIndication+0x408>)
 800abda:	2200      	movs	r2, #0
 800abdc:	705a      	strb	r2, [r3, #1]
 800abde:	e6bd      	b.n	800a95c <LmhpComplianceOnMcpsIndication+0x180>
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	20003448 	.word	0x20003448
 800abe8:	200000cc 	.word	0x200000cc
 800abec:	20003444 	.word	0x20003444
 800abf0:	20003480 	.word	0x20003480

0800abf4 <LmhpComplianceProcess>:
{
 800abf4:	b530      	push	{r4, r5, lr}
 800abf6:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800abf8:	4b28      	ldr	r3, [pc, #160]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800abfa:	785b      	ldrb	r3, [r3, #1]
 800abfc:	b993      	cbnz	r3, 800ac24 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800abfe:	4b27      	ldr	r3, [pc, #156]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d13f      	bne.n	800ac88 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 800ac08:	4b24      	ldr	r3, [pc, #144]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac0e:	b13b      	cbz	r3, 800ac20 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800ac10:	4b22      	ldr	r3, [pc, #136]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 800ac18:	4b21      	ldr	r3, [pc, #132]	; (800aca0 <LmhpComplianceProcess+0xac>)
 800ac1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac1c:	b103      	cbz	r3, 800ac20 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800ac1e:	4798      	blx	r3
}
 800ac20:	b003      	add	sp, #12
 800ac22:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800ac24:	f009 fc76 	bl	8014514 <UTIL_TIMER_GetCurrentTime>
 800ac28:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800ac2a:	4b1c      	ldr	r3, [pc, #112]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac2c:	685d      	ldr	r5, [r3, #4]
 800ac2e:	f7ff f9f5 	bl	800a01c <LmHandlerGetDutyCycleWaitTime>
 800ac32:	4405      	add	r5, r0
 800ac34:	42a5      	cmp	r5, r4
 800ac36:	d2e7      	bcs.n	800ac08 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 800ac38:	4b18      	ldr	r3, [pc, #96]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac3a:	7a9b      	ldrb	r3, [r3, #10]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0e3      	beq.n	800ac08 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 800ac40:	22e0      	movs	r2, #224	; 0xe0
 800ac42:	f88d 2000 	strb.w	r2, [sp]
 800ac46:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ac4a:	4b14      	ldr	r3, [pc, #80]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac4c:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 800ac4e:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ac50:	2201      	movs	r2, #1
 800ac52:	7a19      	ldrb	r1, [r3, #8]
 800ac54:	4668      	mov	r0, sp
 800ac56:	f7ff f9f9 	bl	800a04c <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800ac5a:	f110 0f02 	cmn.w	r0, #2
 800ac5e:	d009      	beq.n	800ac74 <LmhpComplianceProcess+0x80>
 800ac60:	f110 0f06 	cmn.w	r0, #6
 800ac64:	d006      	beq.n	800ac74 <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 800ac66:	4b0d      	ldr	r3, [pc, #52]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800ac6c:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800ac6e:	4b0b      	ldr	r3, [pc, #44]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac70:	605c      	str	r4, [r3, #4]
 800ac72:	e7c9      	b.n	800ac08 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 800ac74:	4d0b      	ldr	r5, [pc, #44]	; (800aca4 <LmhpComplianceProcess+0xb0>)
 800ac76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	f009 fd2a 	bl	80146d4 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800ac80:	4628      	mov	r0, r5
 800ac82:	f009 fce1 	bl	8014648 <UTIL_TIMER_Start>
 800ac86:	e7f2      	b.n	800ac6e <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 800ac88:	4b04      	ldr	r3, [pc, #16]	; (800ac9c <LmhpComplianceProcess+0xa8>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800ac90:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800ac94:	f7ff fa7c 	bl	800a190 <LmHandlerRequestClass>
 800ac98:	e7b6      	b.n	800ac08 <LmhpComplianceProcess+0x14>
 800ac9a:	bf00      	nop
 800ac9c:	20003448 	.word	0x20003448
 800aca0:	200000cc 	.word	0x200000cc
 800aca4:	20003480 	.word	0x20003480

0800aca8 <LmhpComplianceInit>:
{
 800aca8:	b530      	push	{r4, r5, lr}
 800acaa:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800acac:	b188      	cbz	r0, 800acd2 <LmhpComplianceInit+0x2a>
 800acae:	4603      	mov	r3, r0
 800acb0:	b179      	cbz	r1, 800acd2 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800acb2:	4813      	ldr	r0, [pc, #76]	; (800ad00 <LmhpComplianceInit+0x58>)
 800acb4:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800acb6:	4b13      	ldr	r3, [pc, #76]	; (800ad04 <LmhpComplianceInit+0x5c>)
 800acb8:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800acba:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800acbc:	2201      	movs	r2, #1
 800acbe:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800acc0:	2200      	movs	r2, #0
 800acc2:	9200      	str	r2, [sp, #0]
 800acc4:	4b10      	ldr	r3, [pc, #64]	; (800ad08 <LmhpComplianceInit+0x60>)
 800acc6:	f04f 31ff 	mov.w	r1, #4294967295
 800acca:	4810      	ldr	r0, [pc, #64]	; (800ad0c <LmhpComplianceInit+0x64>)
 800accc:	f009 fc04 	bl	80144d8 <UTIL_TIMER_Create>
 800acd0:	e004      	b.n	800acdc <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	4a0a      	ldr	r2, [pc, #40]	; (800ad00 <LmhpComplianceInit+0x58>)
 800acd6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800acd8:	4a0a      	ldr	r2, [pc, #40]	; (800ad04 <LmhpComplianceInit+0x5c>)
 800acda:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800acdc:	4c09      	ldr	r4, [pc, #36]	; (800ad04 <LmhpComplianceInit+0x5c>)
 800acde:	2500      	movs	r5, #0
 800ace0:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800ace2:	2220      	movs	r2, #32
 800ace4:	4629      	mov	r1, r5
 800ace6:	f104 0014 	add.w	r0, r4, #20
 800acea:	f007 fb4a 	bl	8012382 <memset1>
    ComplianceTestState.IsTxPending = false;
 800acee:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800acf0:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800acf2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800acf6:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800acfa:	b003      	add	sp, #12
 800acfc:	bd30      	pop	{r4, r5, pc}
 800acfe:	bf00      	nop
 800ad00:	20003444 	.word	0x20003444
 800ad04:	20003448 	.word	0x20003448
 800ad08:	0800a7c5 	.word	0x0800a7c5
 800ad0c:	20003480 	.word	0x20003480

0800ad10 <LmhpCompliancePackageFactory>:
}
 800ad10:	4800      	ldr	r0, [pc, #0]	; (800ad14 <LmhpCompliancePackageFactory+0x4>)
 800ad12:	4770      	bx	lr
 800ad14:	200000cc 	.word	0x200000cc

0800ad18 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 800ad18:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800ad1a:	4a06      	ldr	r2, [pc, #24]	; (800ad34 <OnRadioRxError+0x1c>)
 800ad1c:	7813      	ldrb	r3, [r2, #0]
 800ad1e:	f043 0304 	orr.w	r3, r3, #4
 800ad22:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ad24:	4b04      	ldr	r3, [pc, #16]	; (800ad38 <OnRadioRxError+0x20>)
 800ad26:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ad2a:	b113      	cbz	r3, 800ad32 <OnRadioRxError+0x1a>
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	b103      	cbz	r3, 800ad32 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ad30:	4798      	blx	r3
    }
}
 800ad32:	bd08      	pop	{r3, pc}
 800ad34:	20003498 	.word	0x20003498
 800ad38:	2000349c 	.word	0x2000349c

0800ad3c <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ad3c:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <UpdateRxSlotIdleState+0x20>)
 800ad3e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d004      	beq.n	800ad50 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800ad46:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <UpdateRxSlotIdleState+0x24>)
 800ad48:	2206      	movs	r2, #6
 800ad4a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 800ad4e:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ad50:	4b03      	ldr	r3, [pc, #12]	; (800ad60 <UpdateRxSlotIdleState+0x24>)
 800ad52:	2202      	movs	r2, #2
 800ad54:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	20008000 	.word	0x20008000
 800ad60:	2000349c 	.word	0x2000349c

0800ad64 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800ad64:	4b01      	ldr	r3, [pc, #4]	; (800ad6c <LoRaMacEnableRequests+0x8>)
 800ad66:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 800ad6a:	4770      	bx	lr
 800ad6c:	2000349c 	.word	0x2000349c

0800ad70 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800ad70:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ad72:	4b15      	ldr	r3, [pc, #84]	; (800adc8 <LoRaMacHandleIndicationEvents+0x58>)
 800ad74:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ad78:	f013 0f08 	tst.w	r3, #8
 800ad7c:	d00e      	beq.n	800ad9c <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ad7e:	4812      	ldr	r0, [pc, #72]	; (800adc8 <LoRaMacHandleIndicationEvents+0x58>)
 800ad80:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800ad84:	f36f 03c3 	bfc	r3, #3, #1
 800ad88:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800ad8c:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800ad96:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 800ad9a:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ad9c:	4b0a      	ldr	r3, [pc, #40]	; (800adc8 <LoRaMacHandleIndicationEvents+0x58>)
 800ad9e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ada2:	f013 0f02 	tst.w	r3, #2
 800ada6:	d00e      	beq.n	800adc6 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800ada8:	4807      	ldr	r0, [pc, #28]	; (800adc8 <LoRaMacHandleIndicationEvents+0x58>)
 800adaa:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800adae:	f36f 0341 	bfc	r3, #1, #1
 800adb2:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800adb6:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800adc0:	f200 4024 	addw	r0, r0, #1060	; 0x424
 800adc4:	4798      	blx	r3
    }
}
 800adc6:	bd08      	pop	{r3, pc}
 800adc8:	2000349c 	.word	0x2000349c

0800adcc <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800adcc:	b110      	cbz	r0, 800add4 <CheckForMinimumAbpDatarate+0x8>
 800adce:	2901      	cmp	r1, #1
 800add0:	d001      	beq.n	800add6 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800add2:	2000      	movs	r0, #0
}
 800add4:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800add6:	2a00      	cmp	r2, #0
 800add8:	d0fc      	beq.n	800add4 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800adda:	2000      	movs	r0, #0
 800addc:	4770      	bx	lr
	...

0800ade0 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <LoRaMacCheckForRxAbort+0x20>)
 800ade2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ade6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800adea:	d008      	beq.n	800adfe <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800adec:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800adf0:	4a03      	ldr	r2, [pc, #12]	; (800ae00 <LoRaMacCheckForRxAbort+0x20>)
 800adf2:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800adf6:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800adfa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800adfe:	4770      	bx	lr
 800ae00:	2000349c 	.word	0x2000349c

0800ae04 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800ae04:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <CalculateBackOff+0x1c>)
 800ae06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae08:	b94b      	cbnz	r3, 800ae1e <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800ae0a:	4a05      	ldr	r2, [pc, #20]	; (800ae20 <CalculateBackOff+0x1c>)
 800ae0c:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 800ae10:	4904      	ldr	r1, [pc, #16]	; (800ae24 <CalculateBackOff+0x20>)
 800ae12:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 800ae16:	3b01      	subs	r3, #1
 800ae18:	fb01 f303 	mul.w	r3, r1, r3
 800ae1c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800ae1e:	4770      	bx	lr
 800ae20:	20008000 	.word	0x20008000
 800ae24:	2000349c 	.word	0x2000349c

0800ae28 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800ae28:	b508      	push	{r3, lr}
 800ae2a:	4684      	mov	ip, r0
 800ae2c:	4608      	mov	r0, r1
 800ae2e:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800ae30:	4b06      	ldr	r3, [pc, #24]	; (800ae4c <SetTxContinuousWave+0x24>)
 800ae32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae34:	4662      	mov	r2, ip
 800ae36:	b249      	sxtb	r1, r1
 800ae38:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800ae3a:	4a05      	ldr	r2, [pc, #20]	; (800ae50 <SetTxContinuousWave+0x28>)
 800ae3c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800ae40:	f043 0302 	orr.w	r3, r3, #2
 800ae44:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800ae48:	2000      	movs	r0, #0
 800ae4a:	bd08      	pop	{r3, pc}
 800ae4c:	08015a90 	.word	0x08015a90
 800ae50:	2000349c 	.word	0x2000349c

0800ae54 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800ae54:	4602      	mov	r2, r0
 800ae56:	b1f8      	cbz	r0, 800ae98 <DetermineFrameType+0x44>
 800ae58:	b301      	cbz	r1, 800ae9c <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800ae5a:	7b03      	ldrb	r3, [r0, #12]
 800ae5c:	f013 030f 	ands.w	r3, r3, #15
 800ae60:	d005      	beq.n	800ae6e <DetermineFrameType+0x1a>
 800ae62:	f890 0020 	ldrb.w	r0, [r0, #32]
 800ae66:	b110      	cbz	r0, 800ae6e <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800ae68:	2000      	movs	r0, #0
 800ae6a:	7008      	strb	r0, [r1, #0]
 800ae6c:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800ae6e:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800ae72:	b910      	cbnz	r0, 800ae7a <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800ae74:	2301      	movs	r3, #1
 800ae76:	700b      	strb	r3, [r1, #0]
 800ae78:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800ae7a:	b92b      	cbnz	r3, 800ae88 <DetermineFrameType+0x34>
 800ae7c:	f892 0020 	ldrb.w	r0, [r2, #32]
 800ae80:	b910      	cbnz	r0, 800ae88 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800ae82:	2302      	movs	r3, #2
 800ae84:	700b      	strb	r3, [r1, #0]
 800ae86:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800ae88:	b953      	cbnz	r3, 800aea0 <DetermineFrameType+0x4c>
 800ae8a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800ae8e:	b14a      	cbz	r2, 800aea4 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800ae90:	2203      	movs	r2, #3
 800ae92:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800ae94:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800ae96:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ae98:	2003      	movs	r0, #3
 800ae9a:	4770      	bx	lr
 800ae9c:	2003      	movs	r0, #3
 800ae9e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800aea0:	2018      	movs	r0, #24
 800aea2:	4770      	bx	lr
 800aea4:	2018      	movs	r0, #24
}
 800aea6:	4770      	bx	lr

0800aea8 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800aea8:	4288      	cmp	r0, r1
 800aeaa:	d201      	bcs.n	800aeb0 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800aeac:	2000      	movs	r0, #0
 800aeae:	4770      	bx	lr
        return true;
 800aeb0:	2001      	movs	r0, #1
}
 800aeb2:	4770      	bx	lr

0800aeb4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800aeb4:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800aeb6:	4b0b      	ldr	r3, [pc, #44]	; (800aee4 <CheckRetransUnconfirmedUplink+0x30>)
 800aeb8:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800aebc:	4b0a      	ldr	r3, [pc, #40]	; (800aee8 <CheckRetransUnconfirmedUplink+0x34>)
 800aebe:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800aec2:	f7ff fff1 	bl	800aea8 <CheckRetrans>
 800aec6:	b950      	cbnz	r0, 800aede <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800aec8:	4b07      	ldr	r3, [pc, #28]	; (800aee8 <CheckRetransUnconfirmedUplink+0x34>)
 800aeca:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800aece:	f013 0f02 	tst.w	r3, #2
 800aed2:	d004      	beq.n	800aede <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800aed4:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <CheckRetransUnconfirmedUplink+0x34>)
 800aed6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d900      	bls.n	800aee0 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800aede:	bd08      	pop	{r3, pc}
            return true;
 800aee0:	2001      	movs	r0, #1
 800aee2:	e7fc      	b.n	800aede <CheckRetransUnconfirmedUplink+0x2a>
 800aee4:	20008000 	.word	0x20008000
 800aee8:	2000349c 	.word	0x2000349c

0800aeec <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800aeec:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800aeee:	4b09      	ldr	r3, [pc, #36]	; (800af14 <CheckRetransConfirmedUplink+0x28>)
 800aef0:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800aef4:	4b08      	ldr	r3, [pc, #32]	; (800af18 <CheckRetransConfirmedUplink+0x2c>)
 800aef6:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800aefa:	f7ff ffd5 	bl	800aea8 <CheckRetrans>
 800aefe:	b940      	cbnz	r0, 800af12 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <CheckRetransConfirmedUplink+0x2c>)
 800af02:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800af06:	f013 0f02 	tst.w	r3, #2
 800af0a:	d002      	beq.n	800af12 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800af0c:	4b02      	ldr	r3, [pc, #8]	; (800af18 <CheckRetransConfirmedUplink+0x2c>)
 800af0e:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 800af12:	bd08      	pop	{r3, pc}
 800af14:	20008000 	.word	0x20008000
 800af18:	2000349c 	.word	0x2000349c

0800af1c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800af1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800af20:	d000      	beq.n	800af24 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800af22:	3001      	adds	r0, #1
    }
    return counter;
}
 800af24:	4770      	bx	lr
	...

0800af28 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800af28:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800af2a:	4b12      	ldr	r3, [pc, #72]	; (800af74 <StopRetransmission+0x4c>)
 800af2c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800af30:	f013 0f02 	tst.w	r3, #2
 800af34:	d004      	beq.n	800af40 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800af36:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <StopRetransmission+0x4c>)
 800af38:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d908      	bls.n	800af52 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800af40:	4b0d      	ldr	r3, [pc, #52]	; (800af78 <StopRetransmission+0x50>)
 800af42:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800af46:	b123      	cbz	r3, 800af52 <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800af48:	4c0b      	ldr	r4, [pc, #44]	; (800af78 <StopRetransmission+0x50>)
 800af4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800af4c:	f7ff ffe6 	bl	800af1c <IncreaseAdrAckCounter>
 800af50:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800af52:	4b08      	ldr	r3, [pc, #32]	; (800af74 <StopRetransmission+0x4c>)
 800af54:	2200      	movs	r2, #0
 800af56:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 800af5a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 800af5e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800af62:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800af66:	f022 0202 	bic.w	r2, r2, #2
 800af6a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800af6e:	2001      	movs	r0, #1
 800af70:	bd10      	pop	{r4, pc}
 800af72:	bf00      	nop
 800af74:	2000349c 	.word	0x2000349c
 800af78:	20008000 	.word	0x20008000

0800af7c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800af7c:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800af7e:	4b04      	ldr	r3, [pc, #16]	; (800af90 <CallNvmDataChangeCallback+0x14>)
 800af80:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800af84:	b113      	cbz	r3, 800af8c <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800af86:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800af88:	b103      	cbz	r3, 800af8c <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800af8a:	4798      	blx	r3
    }
}
 800af8c:	bd08      	pop	{r3, pc}
 800af8e:	bf00      	nop
 800af90:	2000349c 	.word	0x2000349c

0800af94 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800af94:	4b04      	ldr	r3, [pc, #16]	; (800afa8 <IsRequestPending+0x14>)
 800af96:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 800af9a:	f010 0005 	ands.w	r0, r0, #5
 800af9e:	d100      	bne.n	800afa2 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800afa0:	4770      	bx	lr
        return 1;
 800afa2:	2001      	movs	r0, #1
 800afa4:	e7fc      	b.n	800afa0 <IsRequestPending+0xc>
 800afa6:	bf00      	nop
 800afa8:	2000349c 	.word	0x2000349c

0800afac <GetMaxAppPayloadWithoutFOptsLength>:
{
 800afac:	b500      	push	{lr}
 800afae:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800afb2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800afb6:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800afba:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800afbe:	220d      	movs	r2, #13
 800afc0:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800afc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afc8:	b113      	cbz	r3, 800afd0 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800afca:	230e      	movs	r3, #14
 800afcc:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800afd0:	a902      	add	r1, sp, #8
 800afd2:	4b05      	ldr	r3, [pc, #20]	; (800afe8 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800afd4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800afd8:	f004 f928 	bl	800f22c <RegionGetPhyParam>
 800afdc:	9001      	str	r0, [sp, #4]
}
 800afde:	b2c0      	uxtb	r0, r0
 800afe0:	b005      	add	sp, #20
 800afe2:	f85d fb04 	ldr.w	pc, [sp], #4
 800afe6:	bf00      	nop
 800afe8:	20008000 	.word	0x20008000

0800afec <ValidatePayloadLength>:
{
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4605      	mov	r5, r0
 800aff0:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800aff2:	4608      	mov	r0, r1
 800aff4:	f7ff ffda 	bl	800afac <GetMaxAppPayloadWithoutFOptsLength>
 800aff8:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800affa:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800affc:	4293      	cmp	r3, r2
 800affe:	d303      	bcc.n	800b008 <ValidatePayloadLength+0x1c>
 800b000:	2aff      	cmp	r2, #255	; 0xff
 800b002:	d903      	bls.n	800b00c <ValidatePayloadLength+0x20>
    return false;
 800b004:	2000      	movs	r0, #0
 800b006:	e000      	b.n	800b00a <ValidatePayloadLength+0x1e>
 800b008:	2000      	movs	r0, #0
}
 800b00a:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800b00c:	2001      	movs	r0, #1
 800b00e:	e7fc      	b.n	800b00a <ValidatePayloadLength+0x1e>

0800b010 <ProcessRadioTxDone>:
{
 800b010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b012:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b014:	4b35      	ldr	r3, [pc, #212]	; (800b0ec <ProcessRadioTxDone+0xdc>)
 800b016:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d002      	beq.n	800b024 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800b01e:	4b34      	ldr	r3, [pc, #208]	; (800b0f0 <ProcessRadioTxDone+0xe0>)
 800b020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b022:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800b024:	4c33      	ldr	r4, [pc, #204]	; (800b0f4 <ProcessRadioTxDone+0xe4>)
 800b026:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800b02a:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800b02e:	4628      	mov	r0, r5
 800b030:	f009 fb50 	bl	80146d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800b034:	4628      	mov	r0, r5
 800b036:	f009 fb07 	bl	8014648 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800b03a:	f504 7566 	add.w	r5, r4, #920	; 0x398
 800b03e:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800b042:	4628      	mov	r0, r5
 800b044:	f009 fb46 	bl	80146d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800b048:	4628      	mov	r0, r5
 800b04a:	f009 fafd 	bl	8014648 <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 800b04e:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800b052:	2b00      	cmp	r3, #0
 800b054:	d134      	bne.n	800b0c0 <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b056:	4b27      	ldr	r3, [pc, #156]	; (800b0f4 <ProcessRadioTxDone+0xe4>)
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800b05e:	4b26      	ldr	r3, [pc, #152]	; (800b0f8 <ProcessRadioTxDone+0xe8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4c22      	ldr	r4, [pc, #136]	; (800b0ec <ProcessRadioTxDone+0xdc>)
 800b064:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800b066:	4f23      	ldr	r7, [pc, #140]	; (800b0f4 <ProcessRadioTxDone+0xe4>)
 800b068:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 800b06c:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800b070:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800b072:	ae0c      	add	r6, sp, #48	; 0x30
 800b074:	4630      	mov	r0, r6
 800b076:	f009 f9c1 	bl	80143fc <SysTimeGetMcuTime>
 800b07a:	ad02      	add	r5, sp, #8
 800b07c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800b086:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b08a:	4628      	mov	r0, r5
 800b08c:	f009 f953 	bl	8014336 <SysTimeSub>
 800b090:	ab07      	add	r3, sp, #28
 800b092:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b096:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800b09a:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800b09e:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b0a6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800b0aa:	b90b      	cbnz	r3, 800b0b0 <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 800b0ac:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800b0b0:	a904      	add	r1, sp, #16
 800b0b2:	4b0e      	ldr	r3, [pc, #56]	; (800b0ec <ProcessRadioTxDone+0xdc>)
 800b0b4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b0b8:	f004 f8d0 	bl	800f25c <RegionSetBandTxDone>
}
 800b0bc:	b00f      	add	sp, #60	; 0x3c
 800b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800b0c0:	2315      	movs	r3, #21
 800b0c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b0c6:	a90a      	add	r1, sp, #40	; 0x28
 800b0c8:	4b08      	ldr	r3, [pc, #32]	; (800b0ec <ProcessRadioTxDone+0xdc>)
 800b0ca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b0ce:	f004 f8ad 	bl	800f22c <RegionGetPhyParam>
 800b0d2:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800b0d4:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800b0d8:	f204 4404 	addw	r4, r4, #1028	; 0x404
 800b0dc:	4401      	add	r1, r0
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f009 faf8 	bl	80146d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f009 faaf 	bl	8014648 <UTIL_TIMER_Start>
 800b0ea:	e7b8      	b.n	800b05e <ProcessRadioTxDone+0x4e>
 800b0ec:	20008000 	.word	0x20008000
 800b0f0:	08015a90 	.word	0x08015a90
 800b0f4:	2000349c 	.word	0x2000349c
 800b0f8:	20003a5c 	.word	0x20003a5c

0800b0fc <OnRetransmitTimeoutTimerEvent>:
{
 800b0fc:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800b0fe:	4c09      	ldr	r4, [pc, #36]	; (800b124 <OnRetransmitTimeoutTimerEvent+0x28>)
 800b100:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800b104:	f009 fa46 	bl	8014594 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800b108:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800b10c:	b113      	cbz	r3, 800b114 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800b10e:	2201      	movs	r2, #1
 800b110:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800b114:	4b03      	ldr	r3, [pc, #12]	; (800b124 <OnRetransmitTimeoutTimerEvent+0x28>)
 800b116:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b11a:	b113      	cbz	r3, 800b122 <OnRetransmitTimeoutTimerEvent+0x26>
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	b103      	cbz	r3, 800b122 <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800b120:	4798      	blx	r3
}
 800b122:	bd10      	pop	{r4, pc}
 800b124:	2000349c 	.word	0x2000349c

0800b128 <PrepareRxDoneAbort>:
{
 800b128:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800b12a:	4b0e      	ldr	r3, [pc, #56]	; (800b164 <PrepareRxDoneAbort+0x3c>)
 800b12c:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800b130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b134:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800b138:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800b13c:	b973      	cbnz	r3, 800b15c <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800b13e:	4b09      	ldr	r3, [pc, #36]	; (800b164 <PrepareRxDoneAbort+0x3c>)
 800b140:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800b144:	f042 0202 	orr.w	r2, r2, #2
 800b148:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b14c:	b2d2      	uxtb	r2, r2
 800b14e:	f042 0220 	orr.w	r2, r2, #32
 800b152:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800b156:	f7ff fdf1 	bl	800ad3c <UpdateRxSlotIdleState>
}
 800b15a:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800b15c:	2000      	movs	r0, #0
 800b15e:	f7ff ffcd 	bl	800b0fc <OnRetransmitTimeoutTimerEvent>
 800b162:	e7ec      	b.n	800b13e <PrepareRxDoneAbort+0x16>
 800b164:	2000349c 	.word	0x2000349c

0800b168 <LoRaMacCheckForBeaconAcquisition>:
{
 800b168:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b16a:	200b      	movs	r0, #11
 800b16c:	f003 faf2 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800b170:	b188      	cbz	r0, 800b196 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b172:	4b0b      	ldr	r3, [pc, #44]	; (800b1a0 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800b174:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b178:	f010 0f01 	tst.w	r0, #1
 800b17c:	d10d      	bne.n	800b19a <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b17e:	f010 0004 	ands.w	r0, r0, #4
 800b182:	d009      	beq.n	800b198 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b184:	461a      	mov	r2, r3
 800b186:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b18a:	f023 0302 	bic.w	r3, r3, #2
 800b18e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800b192:	2001      	movs	r0, #1
 800b194:	e000      	b.n	800b198 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800b196:	2000      	movs	r0, #0
}
 800b198:	bd08      	pop	{r3, pc}
    return 0x00;
 800b19a:	2000      	movs	r0, #0
 800b19c:	e7fc      	b.n	800b198 <LoRaMacCheckForBeaconAcquisition+0x30>
 800b19e:	bf00      	nop
 800b1a0:	2000349c 	.word	0x2000349c

0800b1a4 <GetFCntDown>:
{
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	9c04      	ldr	r4, [sp, #16]
 800b1a8:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800b1aa:	b1f2      	cbz	r2, 800b1ea <GetFCntDown+0x46>
 800b1ac:	4694      	mov	ip, r2
 800b1ae:	b1f4      	cbz	r4, 800b1ee <GetFCntDown+0x4a>
 800b1b0:	b1fd      	cbz	r5, 800b1f2 <GetFCntDown+0x4e>
    switch( addrID )
 800b1b2:	b188      	cbz	r0, 800b1d8 <GetFCntDown+0x34>
 800b1b4:	2801      	cmp	r0, #1
 800b1b6:	d11e      	bne.n	800b1f6 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800b1b8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d002      	beq.n	800b1c6 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	7023      	strb	r3, [r4, #0]
 800b1c4:	e00a      	b.n	800b1dc <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800b1c6:	b121      	cbz	r1, 800b1d2 <GetFCntDown+0x2e>
 800b1c8:	2903      	cmp	r1, #3
 800b1ca:	d002      	beq.n	800b1d2 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	7023      	strb	r3, [r4, #0]
 800b1d0:	e004      	b.n	800b1dc <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	7023      	strb	r3, [r4, #0]
 800b1d6:	e001      	b.n	800b1dc <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800b1d8:	2304      	movs	r3, #4
 800b1da:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800b1dc:	462a      	mov	r2, r5
 800b1de:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800b1e2:	7820      	ldrb	r0, [r4, #0]
 800b1e4:	f003 fcd8 	bl	800eb98 <LoRaMacCryptoGetFCntDown>
}
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800b1ea:	2009      	movs	r0, #9
 800b1ec:	e7fc      	b.n	800b1e8 <GetFCntDown+0x44>
 800b1ee:	2009      	movs	r0, #9
 800b1f0:	e7fa      	b.n	800b1e8 <GetFCntDown+0x44>
 800b1f2:	2009      	movs	r0, #9
 800b1f4:	e7f8      	b.n	800b1e8 <GetFCntDown+0x44>
    switch( addrID )
 800b1f6:	2005      	movs	r0, #5
 800b1f8:	e7f6      	b.n	800b1e8 <GetFCntDown+0x44>

0800b1fa <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800b1fa:	2801      	cmp	r0, #1
 800b1fc:	d900      	bls.n	800b200 <RemoveMacCommands+0x6>
 800b1fe:	4770      	bx	lr
{
 800b200:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800b202:	2a01      	cmp	r2, #1
 800b204:	d105      	bne.n	800b212 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800b206:	f011 0f20 	tst.w	r1, #32
 800b20a:	d004      	beq.n	800b216 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800b20c:	f003 f93e 	bl	800e48c <LoRaMacCommandsRemoveStickyAnsCmds>
 800b210:	e001      	b.n	800b216 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800b212:	f003 f93b 	bl	800e48c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800b216:	bd08      	pop	{r3, pc}

0800b218 <ProcessMacCommands>:
{
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	b08f      	sub	sp, #60	; 0x3c
 800b21e:	4698      	mov	r8, r3
    uint8_t status = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b226:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800b22a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800b22e:	2b01      	cmp	r3, #1
 800b230:	f200 82d9 	bhi.w	800b7e6 <ProcessMacCommands+0x5ce>
 800b234:	4605      	mov	r5, r0
 800b236:	460c      	mov	r4, r1
 800b238:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800b23a:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800b23e:	42bc      	cmp	r4, r7
 800b240:	f080 82d1 	bcs.w	800b7e6 <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800b244:	5d28      	ldrb	r0, [r5, r4]
 800b246:	f003 f989 	bl	800e55c <LoRaMacCommandsGetCmdSize>
 800b24a:	4420      	add	r0, r4
 800b24c:	42b8      	cmp	r0, r7
 800b24e:	f300 82ca 	bgt.w	800b7e6 <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 800b252:	1c66      	adds	r6, r4, #1
 800b254:	b2f6      	uxtb	r6, r6
 800b256:	5d2b      	ldrb	r3, [r5, r4]
 800b258:	3b02      	subs	r3, #2
 800b25a:	2b11      	cmp	r3, #17
 800b25c:	f200 82c3 	bhi.w	800b7e6 <ProcessMacCommands+0x5ce>
 800b260:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b264:	00280012 	.word	0x00280012
 800b268:	00c000ad 	.word	0x00c000ad
 800b26c:	011e0106 	.word	0x011e0106
 800b270:	01740157 	.word	0x01740157
 800b274:	02c101bf 	.word	0x02c101bf
 800b278:	01ef02c1 	.word	0x01ef02c1
 800b27c:	02c102c1 	.word	0x02c102c1
 800b280:	02680251 	.word	0x02680251
 800b284:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800b288:	2004      	movs	r0, #4
 800b28a:	f003 fa63 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800b28e:	b908      	cbnz	r0, 800b294 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800b290:	4634      	mov	r4, r6
 800b292:	e7d4      	b.n	800b23e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800b294:	2104      	movs	r1, #4
 800b296:	2000      	movs	r0, #0
 800b298:	f003 fa10 	bl	800e6bc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800b29c:	1ca3      	adds	r3, r4, #2
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	5da9      	ldrb	r1, [r5, r6]
 800b2a2:	4aa7      	ldr	r2, [pc, #668]	; (800b540 <ProcessMacCommands+0x328>)
 800b2a4:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800b2a8:	3403      	adds	r4, #3
 800b2aa:	b2e4      	uxtb	r4, r4
 800b2ac:	5ceb      	ldrb	r3, [r5, r3]
 800b2ae:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 800b2b2:	e7c4      	b.n	800b23e <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800b2ba:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800b2be:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800b2c2:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800b2c6:	f1b9 0f00 	cmp.w	r9, #0
 800b2ca:	d036      	beq.n	800b33a <ProcessMacCommands+0x122>
                    macIndex += 4;
 800b2cc:	3405      	adds	r4, #5
 800b2ce:	b2e4      	uxtb	r4, r4
 800b2d0:	e7b5      	b.n	800b23e <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800b2d2:	2305      	movs	r3, #5
 800b2d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b2d8:	e050      	b.n	800b37c <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800b2da:	4b9a      	ldr	r3, [pc, #616]	; (800b544 <ProcessMacCommands+0x32c>)
 800b2dc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800b2e0:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	da03      	bge.n	800b2f0 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800b2e8:	4b96      	ldr	r3, [pc, #600]	; (800b544 <ProcessMacCommands+0x32c>)
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800b2f0:	4b94      	ldr	r3, [pc, #592]	; (800b544 <ProcessMacCommands+0x32c>)
 800b2f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800b2f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800b2fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800b2fe:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800b302:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800b306:	e04d      	b.n	800b3a4 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800b308:	2201      	movs	r2, #1
 800b30a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800b30e:	2003      	movs	r0, #3
 800b310:	f003 f85c 	bl	800e3cc <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800b314:	3401      	adds	r4, #1
 800b316:	b2e4      	uxtb	r4, r4
 800b318:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800b31c:	498a      	ldr	r1, [pc, #552]	; (800b548 <ProcessMacCommands+0x330>)
 800b31e:	fba1 2103 	umull	r2, r1, r1, r3
 800b322:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800b326:	d3ef      	bcc.n	800b308 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800b328:	441e      	add	r6, r3
 800b32a:	b2f6      	uxtb	r6, r6
 800b32c:	1e74      	subs	r4, r6, #1
 800b32e:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800b330:	42a7      	cmp	r7, r4
 800b332:	d93a      	bls.n	800b3aa <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800b334:	5d2b      	ldrb	r3, [r5, r4]
 800b336:	2b03      	cmp	r3, #3
 800b338:	d136      	bne.n	800b3a8 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800b33a:	1e73      	subs	r3, r6, #1
 800b33c:	442b      	add	r3, r5
 800b33e:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b340:	4b80      	ldr	r3, [pc, #512]	; (800b544 <ProcessMacCommands+0x32c>)
 800b342:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800b346:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b34a:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 800b34e:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800b352:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800b356:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b35a:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800b35e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b362:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800b366:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800b36a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b36e:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800b370:	2a00      	cmp	r2, #0
 800b372:	d0ae      	beq.n	800b2d2 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800b374:	1bbb      	subs	r3, r7, r6
 800b376:	3301      	adds	r3, #1
 800b378:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800b37c:	ab05      	add	r3, sp, #20
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	ab03      	add	r3, sp, #12
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	f10d 030b 	add.w	r3, sp, #11
 800b388:	f10d 020a 	add.w	r2, sp, #10
 800b38c:	a907      	add	r1, sp, #28
 800b38e:	486d      	ldr	r0, [pc, #436]	; (800b544 <ProcessMacCommands+0x32c>)
 800b390:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800b394:	f003 ffe2 	bl	800f35c <RegionLinkAdrReq>
 800b398:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800b39c:	f000 0007 	and.w	r0, r0, #7
 800b3a0:	2807      	cmp	r0, #7
 800b3a2:	d09a      	beq.n	800b2da <ProcessMacCommands+0xc2>
{
 800b3a4:	2400      	movs	r4, #0
 800b3a6:	e7b7      	b.n	800b318 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800b3a8:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800b3aa:	42bc      	cmp	r4, r7
 800b3ac:	d204      	bcs.n	800b3b8 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800b3ae:	3c01      	subs	r4, #1
 800b3b0:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800b3b2:	f04f 0901 	mov.w	r9, #1
 800b3b6:	e742      	b.n	800b23e <ProcessMacCommands+0x26>
 800b3b8:	f04f 0901 	mov.w	r9, #1
                break;
 800b3bc:	e73f      	b.n	800b23e <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800b3be:	3402      	adds	r4, #2
 800b3c0:	b2e4      	uxtb	r4, r4
 800b3c2:	5dab      	ldrb	r3, [r5, r6]
 800b3c4:	f003 030f 	and.w	r3, r3, #15
 800b3c8:	495e      	ldr	r1, [pc, #376]	; (800b544 <ProcessMacCommands+0x32c>)
 800b3ca:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d4:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800b3d8:	2200      	movs	r2, #0
 800b3da:	a90b      	add	r1, sp, #44	; 0x2c
 800b3dc:	2004      	movs	r0, #4
 800b3de:	f002 fff5 	bl	800e3cc <LoRaMacCommandsAddCmd>
                break;
 800b3e2:	e72c      	b.n	800b23e <ProcessMacCommands+0x26>
                status = 0x07;
 800b3e4:	2307      	movs	r3, #7
 800b3e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800b3ea:	5dab      	ldrb	r3, [r5, r6]
 800b3ec:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b3f0:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800b3f4:	57ab      	ldrsb	r3, [r5, r6]
 800b3f6:	f003 030f 	and.w	r3, r3, #15
 800b3fa:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800b3fe:	1ca3      	adds	r3, r4, #2
 800b400:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800b402:	1ce1      	adds	r1, r4, #3
 800b404:	b2c9      	uxtb	r1, r1
 800b406:	5ceb      	ldrb	r3, [r5, r3]
 800b408:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b40a:	1d22      	adds	r2, r4, #4
 800b40c:	b2d2      	uxtb	r2, r2
 800b40e:	5c69      	ldrb	r1, [r5, r1]
 800b410:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b414:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b416:	3405      	adds	r4, #5
 800b418:	b2e4      	uxtb	r4, r4
 800b41a:	5caa      	ldrb	r2, [r5, r2]
 800b41c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b420:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800b422:	2264      	movs	r2, #100	; 0x64
 800b424:	fb02 f303 	mul.w	r3, r2, r3
 800b428:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800b42a:	a907      	add	r1, sp, #28
 800b42c:	4b45      	ldr	r3, [pc, #276]	; (800b544 <ProcessMacCommands+0x32c>)
 800b42e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b432:	f003 ffaf 	bl	800f394 <RegionRxParamSetupReq>
 800b436:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800b43a:	f000 0307 	and.w	r3, r0, #7
 800b43e:	2b07      	cmp	r3, #7
 800b440:	d007      	beq.n	800b452 <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800b442:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800b446:	2201      	movs	r2, #1
 800b448:	a90b      	add	r1, sp, #44	; 0x2c
 800b44a:	2005      	movs	r0, #5
 800b44c:	f002 ffbe 	bl	800e3cc <LoRaMacCommandsAddCmd>
                break;
 800b450:	e6f5      	b.n	800b23e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800b452:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800b456:	4b3b      	ldr	r3, [pc, #236]	; (800b544 <ProcessMacCommands+0x32c>)
 800b458:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800b45c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800b460:	9a08      	ldr	r2, [sp, #32]
 800b462:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800b464:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800b466:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800b46a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800b46e:	e7e8      	b.n	800b442 <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800b470:	4b33      	ldr	r3, [pc, #204]	; (800b540 <ProcessMacCommands+0x328>)
 800b472:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800b476:	b17b      	cbz	r3, 800b498 <ProcessMacCommands+0x280>
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	b17b      	cbz	r3, 800b49c <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800b47c:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800b47e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800b482:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800b486:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800b48a:	2202      	movs	r2, #2
 800b48c:	a90b      	add	r1, sp, #44	; 0x2c
 800b48e:	2006      	movs	r0, #6
 800b490:	f002 ff9c 	bl	800e3cc <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800b494:	4634      	mov	r4, r6
                break;
 800b496:	e6d2      	b.n	800b23e <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800b498:	20ff      	movs	r0, #255	; 0xff
 800b49a:	e7f0      	b.n	800b47e <ProcessMacCommands+0x266>
 800b49c:	20ff      	movs	r0, #255	; 0xff
 800b49e:	e7ee      	b.n	800b47e <ProcessMacCommands+0x266>
                status = 0x03;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800b4a6:	1ca3      	adds	r3, r4, #2
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	57aa      	ldrsb	r2, [r5, r6]
 800b4ac:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800b4b0:	aa07      	add	r2, sp, #28
 800b4b2:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800b4b4:	1ce2      	adds	r2, r4, #3
 800b4b6:	b2d2      	uxtb	r2, r2
 800b4b8:	5ceb      	ldrb	r3, [r5, r3]
 800b4ba:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b4bc:	1d21      	adds	r1, r4, #4
 800b4be:	b2c9      	uxtb	r1, r1
 800b4c0:	5caa      	ldrb	r2, [r5, r2]
 800b4c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800b4c6:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b4c8:	1d62      	adds	r2, r4, #5
 800b4ca:	b2d2      	uxtb	r2, r2
 800b4cc:	5c69      	ldrb	r1, [r5, r1]
 800b4ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b4d2:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800b4d4:	2164      	movs	r1, #100	; 0x64
 800b4d6:	fb01 f303 	mul.w	r3, r1, r3
 800b4da:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800b4e0:	3406      	adds	r4, #6
 800b4e2:	b2e4      	uxtb	r4, r4
 800b4e4:	56ab      	ldrsb	r3, [r5, r2]
 800b4e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800b4ea:	a905      	add	r1, sp, #20
 800b4ec:	4b15      	ldr	r3, [pc, #84]	; (800b544 <ProcessMacCommands+0x32c>)
 800b4ee:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b4f2:	f003 ff5e 	bl	800f3b2 <RegionNewChannelReq>
 800b4f6:	b2c3      	uxtb	r3, r0
 800b4f8:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	f6ff ae9e 	blt.w	800b23e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800b502:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800b506:	2201      	movs	r2, #1
 800b508:	a90b      	add	r1, sp, #44	; 0x2c
 800b50a:	2007      	movs	r0, #7
 800b50c:	f002 ff5e 	bl	800e3cc <LoRaMacCommandsAddCmd>
                break;
 800b510:	e695      	b.n	800b23e <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800b512:	3402      	adds	r4, #2
 800b514:	b2e4      	uxtb	r4, r4
 800b516:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800b518:	f013 030f 	ands.w	r3, r3, #15
 800b51c:	d100      	bne.n	800b520 <ProcessMacCommands+0x308>
                    delay++;
 800b51e:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800b520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b524:	fb02 f303 	mul.w	r3, r2, r3
 800b528:	4a06      	ldr	r2, [pc, #24]	; (800b544 <ProcessMacCommands+0x32c>)
 800b52a:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800b52c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b530:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800b532:	2200      	movs	r2, #0
 800b534:	a90b      	add	r1, sp, #44	; 0x2c
 800b536:	2008      	movs	r0, #8
 800b538:	f002 ff48 	bl	800e3cc <LoRaMacCommandsAddCmd>
                break;
 800b53c:	e67f      	b.n	800b23e <ProcessMacCommands+0x26>
 800b53e:	bf00      	nop
 800b540:	2000349c 	.word	0x2000349c
 800b544:	20008000 	.word	0x20008000
 800b548:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800b54c:	3402      	adds	r4, #2
 800b54e:	b2e4      	uxtb	r4, r4
 800b550:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800b552:	2200      	movs	r2, #0
 800b554:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800b558:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800b55c:	f013 0f20 	tst.w	r3, #32
 800b560:	d002      	beq.n	800b568 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800b562:	2201      	movs	r2, #1
 800b564:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800b568:	f013 0f10 	tst.w	r3, #16
 800b56c:	d002      	beq.n	800b574 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800b56e:	2201      	movs	r2, #1
 800b570:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800b574:	f003 030f 	and.w	r3, r3, #15
 800b578:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800b57c:	a903      	add	r1, sp, #12
 800b57e:	4b9b      	ldr	r3, [pc, #620]	; (800b7ec <ProcessMacCommands+0x5d4>)
 800b580:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b584:	f003 ff24 	bl	800f3d0 <RegionTxParamSetupReq>
 800b588:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b58c:	f43f ae57 	beq.w	800b23e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800b590:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800b594:	4e95      	ldr	r6, [pc, #596]	; (800b7ec <ProcessMacCommands+0x5d4>)
 800b596:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800b59a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800b59e:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800b5a2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800b5a6:	4a92      	ldr	r2, [pc, #584]	; (800b7f0 <ProcessMacCommands+0x5d8>)
 800b5a8:	5cd0      	ldrb	r0, [r2, r3]
 800b5aa:	f7f5 f913 	bl	80007d4 <__aeabi_ui2f>
 800b5ae:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b5b6:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b5ba:	a907      	add	r1, sp, #28
 800b5bc:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800b5c0:	f003 fe34 	bl	800f22c <RegionGetPhyParam>
 800b5c4:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800b5c6:	b240      	sxtb	r0, r0
 800b5c8:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800b5cc:	4298      	cmp	r0, r3
 800b5ce:	bfb8      	it	lt
 800b5d0:	4618      	movlt	r0, r3
 800b5d2:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	a90b      	add	r1, sp, #44	; 0x2c
 800b5da:	2009      	movs	r0, #9
 800b5dc:	f002 fef6 	bl	800e3cc <LoRaMacCommandsAddCmd>
                break;
 800b5e0:	e62d      	b.n	800b23e <ProcessMacCommands+0x26>
                status = 0x03;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800b5e8:	1ca3      	adds	r3, r4, #2
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	5daa      	ldrb	r2, [r5, r6]
 800b5ee:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800b5f2:	1ce1      	adds	r1, r4, #3
 800b5f4:	b2c9      	uxtb	r1, r1
 800b5f6:	5ceb      	ldrb	r3, [r5, r3]
 800b5f8:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800b5fa:	1d22      	adds	r2, r4, #4
 800b5fc:	b2d2      	uxtb	r2, r2
 800b5fe:	5c69      	ldrb	r1, [r5, r1]
 800b600:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b604:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800b606:	3405      	adds	r4, #5
 800b608:	b2e4      	uxtb	r4, r4
 800b60a:	5caa      	ldrb	r2, [r5, r2]
 800b60c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b610:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800b612:	2264      	movs	r2, #100	; 0x64
 800b614:	fb02 f303 	mul.w	r3, r2, r3
 800b618:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800b61a:	a907      	add	r1, sp, #28
 800b61c:	4b73      	ldr	r3, [pc, #460]	; (800b7ec <ProcessMacCommands+0x5d4>)
 800b61e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800b622:	f003 fee4 	bl	800f3ee <RegionDlChannelReq>
 800b626:	b2c3      	uxtb	r3, r0
 800b628:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800b62c:	2800      	cmp	r0, #0
 800b62e:	f6ff ae06 	blt.w	800b23e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800b632:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800b636:	2201      	movs	r2, #1
 800b638:	a90b      	add	r1, sp, #44	; 0x2c
 800b63a:	200a      	movs	r0, #10
 800b63c:	f002 fec6 	bl	800e3cc <LoRaMacCommandsAddCmd>
                break;
 800b640:	e5fd      	b.n	800b23e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800b642:	2009      	movs	r0, #9
 800b644:	f003 f886 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800b648:	b928      	cbnz	r0, 800b656 <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800b64a:	4b6a      	ldr	r3, [pc, #424]	; (800b7f4 <ProcessMacCommands+0x5dc>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 800b652:	4634      	mov	r4, r6
 800b654:	e5f3      	b.n	800b23e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800b656:	2109      	movs	r1, #9
 800b658:	2000      	movs	r0, #0
 800b65a:	f003 f82f 	bl	800e6bc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800b65e:	a803      	add	r0, sp, #12
 800b660:	2300      	movs	r3, #0
 800b662:	9303      	str	r3, [sp, #12]
 800b664:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800b666:	f10d 0a14 	add.w	sl, sp, #20
 800b66a:	9305      	str	r3, [sp, #20]
 800b66c:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800b66e:	f10d 0b1c 	add.w	fp, sp, #28
 800b672:	9307      	str	r3, [sp, #28]
 800b674:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800b676:	1ca1      	adds	r1, r4, #2
 800b678:	b2c9      	uxtb	r1, r1
 800b67a:	5dab      	ldrb	r3, [r5, r6]
 800b67c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800b67e:	1ce2      	adds	r2, r4, #3
 800b680:	b2d2      	uxtb	r2, r2
 800b682:	5c69      	ldrb	r1, [r5, r1]
 800b684:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b688:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800b68a:	1d21      	adds	r1, r4, #4
 800b68c:	b2c9      	uxtb	r1, r1
 800b68e:	5caa      	ldrb	r2, [r5, r2]
 800b690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b694:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800b696:	1d62      	adds	r2, r4, #5
 800b698:	b2d2      	uxtb	r2, r2
 800b69a:	5c69      	ldrb	r1, [r5, r1]
 800b69c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b6a0:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800b6a2:	3406      	adds	r4, #6
 800b6a4:	b2e4      	uxtb	r4, r4
 800b6a6:	5caa      	ldrb	r2, [r5, r2]
 800b6a8:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800b6ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b6b0:	fb01 f202 	mul.w	r2, r1, r2
 800b6b4:	0a12      	lsrs	r2, r2, #8
 800b6b6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800b6ba:	c803      	ldmia	r0, {r0, r1}
 800b6bc:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800b6c0:	4a4d      	ldr	r2, [pc, #308]	; (800b7f8 <ProcessMacCommands+0x5e0>)
 800b6c2:	441a      	add	r2, r3
 800b6c4:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800b6c6:	4658      	mov	r0, fp
 800b6c8:	f008 fe76 	bl	80143b8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800b6cc:	4e49      	ldr	r6, [pc, #292]	; (800b7f4 <ProcessMacCommands+0x5dc>)
 800b6ce:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800b6d8:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800b6dc:	a80c      	add	r0, sp, #48	; 0x30
 800b6de:	f008 fe2a 	bl	8014336 <SysTimeSub>
 800b6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6e8:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800b6ec:	4650      	mov	r0, sl
 800b6ee:	f008 fe03 	bl	80142f8 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800b6f2:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b6f6:	f008 fe3d 	bl	8014374 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800b6fa:	f002 fdcb 	bl	800e294 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 800b704:	e59b      	b.n	800b23e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800b706:	200c      	movs	r0, #12
 800b708:	f003 f824 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800b70c:	b908      	cbnz	r0, 800b712 <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 800b70e:	4634      	mov	r4, r6
 800b710:	e595      	b.n	800b23e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800b712:	210c      	movs	r1, #12
 800b714:	2000      	movs	r0, #0
 800b716:	f002 ffd1 	bl	800e6bc <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800b71a:	4b36      	ldr	r3, [pc, #216]	; (800b7f4 <ProcessMacCommands+0x5dc>)
 800b71c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800b720:	3b04      	subs	r3, #4
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b01      	cmp	r3, #1
 800b726:	d801      	bhi.n	800b72c <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 800b728:	4634      	mov	r4, r6
 800b72a:	e588      	b.n	800b23e <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800b72c:	f002 fdae 	bl	800e28c <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800b730:	4634      	mov	r4, r6
 800b732:	e584      	b.n	800b23e <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800b734:	1ca2      	adds	r2, r4, #2
 800b736:	b2d2      	uxtb	r2, r2
 800b738:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b73a:	1ce1      	adds	r1, r4, #3
 800b73c:	b2c9      	uxtb	r1, r1
 800b73e:	5caa      	ldrb	r2, [r5, r2]
 800b740:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b744:	1d22      	adds	r2, r4, #4
 800b746:	b2d2      	uxtb	r2, r2
 800b748:	5c69      	ldrb	r1, [r5, r1]
 800b74a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800b74e:	3405      	adds	r4, #5
 800b750:	b2e4      	uxtb	r4, r4
 800b752:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800b754:	2164      	movs	r1, #100	; 0x64
 800b756:	fb03 f101 	mul.w	r1, r3, r1
 800b75a:	f000 000f 	and.w	r0, r0, #15
 800b75e:	f002 fd96 	bl	800e28e <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800b762:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800b766:	2201      	movs	r2, #1
 800b768:	a90b      	add	r1, sp, #44	; 0x2c
 800b76a:	2011      	movs	r0, #17
 800b76c:	f002 fe2e 	bl	800e3cc <LoRaMacCommandsAddCmd>
                break;
 800b770:	e565      	b.n	800b23e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800b772:	200d      	movs	r0, #13
 800b774:	f002 ffee 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800b778:	b908      	cbnz	r0, 800b77e <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 800b77a:	4634      	mov	r4, r6
 800b77c:	e55f      	b.n	800b23e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800b77e:	210d      	movs	r1, #13
 800b780:	2000      	movs	r0, #0
 800b782:	f002 ff9b 	bl	800e6bc <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800b786:	1ca2      	adds	r2, r4, #2
 800b788:	b2d2      	uxtb	r2, r2
 800b78a:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800b78c:	1ce3      	adds	r3, r4, #3
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800b792:	3404      	adds	r4, #4
 800b794:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800b796:	4a19      	ldr	r2, [pc, #100]	; (800b7fc <ProcessMacCommands+0x5e4>)
 800b798:	6812      	ldr	r2, [r2, #0]
 800b79a:	5ce9      	ldrb	r1, [r5, r3]
 800b79c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800b7a0:	f002 fd77 	bl	800e292 <LoRaMacClassBBeaconTimingAns>
 800b7a4:	e54b      	b.n	800b23e <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800b7a6:	1ca1      	adds	r1, r4, #2
 800b7a8:	b2c9      	uxtb	r1, r1
 800b7aa:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800b7ac:	1ce2      	adds	r2, r4, #3
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	5c68      	ldrb	r0, [r5, r1]
 800b7b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800b7b6:	3404      	adds	r4, #4
 800b7b8:	b2e4      	uxtb	r4, r4
 800b7ba:	5ca8      	ldrb	r0, [r5, r2]
 800b7bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800b7c0:	2064      	movs	r0, #100	; 0x64
 800b7c2:	fb03 f000 	mul.w	r0, r3, r0
 800b7c6:	f002 fd66 	bl	800e296 <LoRaMacClassBBeaconFreqReq>
 800b7ca:	b140      	cbz	r0, 800b7de <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	a90b      	add	r1, sp, #44	; 0x2c
 800b7d6:	2013      	movs	r0, #19
 800b7d8:	f002 fdf8 	bl	800e3cc <LoRaMacCommandsAddCmd>
                break;
 800b7dc:	e52f      	b.n	800b23e <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800b7e4:	e7f5      	b.n	800b7d2 <ProcessMacCommands+0x5ba>
}
 800b7e6:	b00f      	add	sp, #60	; 0x3c
 800b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	20008000 	.word	0x20008000
 800b7f0:	080153e0 	.word	0x080153e0
 800b7f4:	2000349c 	.word	0x2000349c
 800b7f8:	12d53d80 	.word	0x12d53d80
 800b7fc:	20003a4c 	.word	0x20003a4c

0800b800 <ProcessRadioRxDone>:
{
 800b800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b804:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 800b806:	4b96      	ldr	r3, [pc, #600]	; (800ba60 <ProcessRadioRxDone+0x260>)
 800b808:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800b80a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800b80c:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800b810:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800b818:	4a92      	ldr	r2, [pc, #584]	; (800ba64 <ProcessRadioRxDone+0x264>)
 800b81a:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800b81e:	4a92      	ldr	r2, [pc, #584]	; (800ba68 <ProcessRadioRxDone+0x268>)
 800b820:	7811      	ldrb	r1, [r2, #0]
 800b822:	f363 0100 	bfi	r1, r3, #0, #1
 800b826:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800b828:	4c90      	ldr	r4, [pc, #576]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800b82a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800b82e:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800b832:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800b836:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 800b83a:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800b83e:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800b842:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800b846:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800b84a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800b84e:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800b852:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800b856:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800b85a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b85e:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800b862:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800b866:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800b86a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 800b86e:	4b80      	ldr	r3, [pc, #512]	; (800ba70 <ProcessRadioRxDone+0x270>)
 800b870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b872:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800b874:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800b878:	b1c3      	cbz	r3, 800b8ac <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800b87a:	4629      	mov	r1, r5
 800b87c:	4630      	mov	r0, r6
 800b87e:	f002 fcf2 	bl	800e266 <LoRaMacClassBRxBeacon>
 800b882:	b9c0      	cbnz	r0, 800b8b6 <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b884:	4b77      	ldr	r3, [pc, #476]	; (800ba64 <ProcessRadioRxDone+0x264>)
 800b886:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d019      	beq.n	800b8c2 <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 800b88e:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800b890:	0963      	lsrs	r3, r4, #5
 800b892:	3b01      	subs	r3, #1
 800b894:	2b06      	cmp	r3, #6
 800b896:	f200 82d4 	bhi.w	800be42 <ProcessRadioRxDone+0x642>
 800b89a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b89e:	002f      	.short	0x002f
 800b8a0:	00b502d2 	.word	0x00b502d2
 800b8a4:	00b102d2 	.word	0x00b102d2
 800b8a8:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 800b8ac:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800b8b0:	f008 fe70 	bl	8014594 <UTIL_TIMER_Stop>
 800b8b4:	e7e1      	b.n	800b87a <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800b8b6:	4b6d      	ldr	r3, [pc, #436]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800b8b8:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800b8bc:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 800b8c0:	e2bc      	b.n	800be3c <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b8c2:	f002 fcd4 	bl	800e26e <LoRaMacClassBIsPingExpected>
 800b8c6:	b150      	cbz	r0, 800b8de <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	f002 fcc5 	bl	800e258 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	f002 fcc7 	bl	800e262 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800b8d4:	4b65      	ldr	r3, [pc, #404]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800b8d6:	2204      	movs	r2, #4
 800b8d8:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800b8dc:	e7d7      	b.n	800b88e <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b8de:	f002 fcc8 	bl	800e272 <LoRaMacClassBIsMulticastExpected>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d0d3      	beq.n	800b88e <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	f002 fcb7 	bl	800e25a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	f002 fcb9 	bl	800e264 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800b8f2:	4b5e      	ldr	r3, [pc, #376]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800b8f4:	2205      	movs	r2, #5
 800b8f6:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800b8fa:	e7c8      	b.n	800b88e <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800b8fc:	2d10      	cmp	r5, #16
 800b8fe:	d962      	bls.n	800b9c6 <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 800b900:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 800b902:	b2ed      	uxtb	r5, r5
 800b904:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800b908:	4b56      	ldr	r3, [pc, #344]	; (800ba64 <ProcessRadioRxDone+0x264>)
 800b90a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d160      	bne.n	800b9d4 <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800b912:	f006 fced 	bl	80122f0 <SecureElementGetJoinEui>
 800b916:	4601      	mov	r1, r0
 800b918:	aa04      	add	r2, sp, #16
 800b91a:	20ff      	movs	r0, #255	; 0xff
 800b91c:	f003 fa90 	bl	800ee40 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800b920:	2800      	cmp	r0, #0
 800b922:	d163      	bne.n	800b9ec <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800b924:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800b928:	4b4e      	ldr	r3, [pc, #312]	; (800ba64 <ProcessRadioRxDone+0x264>)
 800b92a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800b92e:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800b932:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800b936:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800b93a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800b93e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b942:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800b946:	9a07      	ldr	r2, [sp, #28]
 800b948:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800b94c:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800b950:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800b954:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800b958:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800b95c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800b960:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800b964:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800b968:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800b96a:	b90a      	cbnz	r2, 800b970 <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800b96c:	2201      	movs	r2, #1
 800b96e:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800b970:	4c3c      	ldr	r4, [pc, #240]	; (800ba64 <ProcessRadioRxDone+0x264>)
 800b972:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b978:	fb02 f303 	mul.w	r3, r2, r3
 800b97c:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800b97e:	4413      	add	r3, r2
 800b980:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800b982:	2300      	movs	r3, #0
 800b984:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800b988:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 800b98c:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 800b98e:	3d11      	subs	r5, #17
 800b990:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 800b994:	4b35      	ldr	r3, [pc, #212]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800b996:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800b99a:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800b99e:	a91d      	add	r1, sp, #116	; 0x74
 800b9a0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800b9a4:	f003 fc86 	bl	800f2b4 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	f002 fed0 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800b9b4:	b9a8      	cbnz	r0, 800b9e2 <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800b9b6:	4a2d      	ldr	r2, [pc, #180]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800b9b8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800b9bc:	f043 0308 	orr.w	r3, r3, #8
 800b9c0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800b9c4:	e227      	b.n	800be16 <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b9c6:	4b29      	ldr	r3, [pc, #164]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800b9ce:	f7ff fbab 	bl	800b128 <PrepareRxDoneAbort>
                return;
 800b9d2:	e233      	b.n	800be3c <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b9d4:	4b25      	ldr	r3, [pc, #148]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800b9dc:	f7ff fba4 	bl	800b128 <PrepareRxDoneAbort>
                return;
 800b9e0:	e22c      	b.n	800be3c <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	f002 fe69 	bl	800e6bc <LoRaMacConfirmQueueSetStatus>
 800b9ea:	e7e4      	b.n	800b9b6 <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800b9ec:	2001      	movs	r0, #1
 800b9ee:	f002 feb1 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d0df      	beq.n	800b9b6 <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800b9f6:	2101      	movs	r1, #1
 800b9f8:	2007      	movs	r0, #7
 800b9fa:	f002 fe5f 	bl	800e6bc <LoRaMacConfirmQueueSetStatus>
 800b9fe:	e7da      	b.n	800b9b6 <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ba00:	4b1a      	ldr	r3, [pc, #104]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ba08:	4b16      	ldr	r3, [pc, #88]	; (800ba64 <ProcessRadioRxDone+0x264>)
 800ba0a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ba0e:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ba12:	4a16      	ldr	r2, [pc, #88]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800ba14:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 800ba18:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ba1c:	220d      	movs	r2, #13
 800ba1e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ba22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba26:	b113      	cbz	r3, 800ba2e <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ba28:	230e      	movs	r3, #14
 800ba2a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ba2e:	a91b      	add	r1, sp, #108	; 0x6c
 800ba30:	4b0c      	ldr	r3, [pc, #48]	; (800ba64 <ProcessRadioRxDone+0x264>)
 800ba32:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ba36:	f003 fbf9 	bl	800f22c <RegionGetPhyParam>
 800ba3a:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800ba3c:	f1a5 030d 	sub.w	r3, r5, #13
 800ba40:	b21b      	sxth	r3, r3
 800ba42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba46:	b200      	sxth	r0, r0
 800ba48:	4283      	cmp	r3, r0
 800ba4a:	dc01      	bgt.n	800ba50 <ProcessRadioRxDone+0x250>
 800ba4c:	2d0b      	cmp	r5, #11
 800ba4e:	d811      	bhi.n	800ba74 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ba50:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <ProcessRadioRxDone+0x26c>)
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ba58:	f7ff fb66 	bl	800b128 <PrepareRxDoneAbort>
                return;
 800ba5c:	e1ee      	b.n	800be3c <ProcessRadioRxDone+0x63c>
 800ba5e:	bf00      	nop
 800ba60:	20003a4c 	.word	0x20003a4c
 800ba64:	20008000 	.word	0x20008000
 800ba68:	20003498 	.word	0x20003498
 800ba6c:	2000349c 	.word	0x2000349c
 800ba70:	08015a90 	.word	0x08015a90
            macMsgData.Buffer = payload;
 800ba74:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 800ba76:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ba7a:	4bba      	ldr	r3, [pc, #744]	; (800bd64 <ProcessRadioRxDone+0x564>)
 800ba7c:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ba7e:	23ff      	movs	r3, #255	; 0xff
 800ba80:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ba84:	a80e      	add	r0, sp, #56	; 0x38
 800ba86:	f003 faa1 	bl	800efcc <LoRaMacParserData>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d142      	bne.n	800bb14 <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ba8e:	4bb6      	ldr	r3, [pc, #728]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800ba90:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d044      	beq.n	800bb22 <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ba98:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba9a:	4bb4      	ldr	r3, [pc, #720]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800ba9c:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800baa0:	f10d 010a 	add.w	r1, sp, #10
 800baa4:	a80e      	add	r0, sp, #56	; 0x38
 800baa6:	f7ff f9d5 	bl	800ae54 <DetermineFrameType>
 800baaa:	4605      	mov	r5, r0
 800baac:	2800      	cmp	r0, #0
 800baae:	d163      	bne.n	800bb78 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d065      	beq.n	800bb86 <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800baba:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800babc:	2d01      	cmp	r5, #1
 800babe:	d10a      	bne.n	800bad6 <ProcessRadioRxDone+0x2d6>
 800bac0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800bac4:	2b03      	cmp	r3, #3
 800bac6:	f040 808a 	bne.w	800bbde <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800baca:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800bace:	f013 0f60 	tst.w	r3, #96	; 0x60
 800bad2:	f040 8084 	bne.w	800bbde <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800bad6:	ab03      	add	r3, sp, #12
 800bad8:	9301      	str	r3, [sp, #4]
 800bada:	f10d 030b 	add.w	r3, sp, #11
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	4ba1      	ldr	r3, [pc, #644]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bae2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800bae6:	aa0e      	add	r2, sp, #56	; 0x38
 800bae8:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800baec:	4630      	mov	r0, r6
 800baee:	f7ff fb59 	bl	800b1a4 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d07f      	beq.n	800bbf6 <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800baf6:	2807      	cmp	r0, #7
 800baf8:	d078      	beq.n	800bbec <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bafa:	4b9c      	ldr	r3, [pc, #624]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800bb02:	9a03      	ldr	r2, [sp, #12]
 800bb04:	4b99      	ldr	r3, [pc, #612]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bb06:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800bb0a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800bb0e:	f7ff fb0b 	bl	800b128 <PrepareRxDoneAbort>
                return;
 800bb12:	e193      	b.n	800be3c <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb14:	4b95      	ldr	r3, [pc, #596]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bb1c:	f7ff fb04 	bl	800b128 <PrepareRxDoneAbort>
                return;
 800bb20:	e18c      	b.n	800be3c <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800bb22:	f002 fba4 	bl	800e26e <LoRaMacClassBIsPingExpected>
 800bb26:	b188      	cbz	r0, 800bb4c <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bb28:	2000      	movs	r0, #0
 800bb2a:	f002 fb95 	bl	800e258 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800bb2e:	2000      	movs	r0, #0
 800bb30:	f002 fb97 	bl	800e262 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800bb34:	4b8d      	ldr	r3, [pc, #564]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bb36:	2204      	movs	r2, #4
 800bb38:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800bb3c:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800bb40:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800bb44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb46:	f002 fbab 	bl	800e2a0 <LoRaMacClassBSetFPendingBit>
 800bb4a:	e7a5      	b.n	800ba98 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bb4c:	f002 fb91 	bl	800e272 <LoRaMacClassBIsMulticastExpected>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d0a1      	beq.n	800ba98 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bb54:	2000      	movs	r0, #0
 800bb56:	f002 fb80 	bl	800e25a <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	f002 fb82 	bl	800e264 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800bb60:	4b82      	ldr	r3, [pc, #520]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bb62:	2205      	movs	r2, #5
 800bb64:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800bb68:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800bb6c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800bb70:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb72:	f002 fb95 	bl	800e2a0 <LoRaMacClassBSetFPendingBit>
 800bb76:	e78f      	b.n	800ba98 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb78:	4b7c      	ldr	r3, [pc, #496]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bb80:	f7ff fad2 	bl	800b128 <PrepareRxDoneAbort>
                return;
 800bb84:	e15a      	b.n	800be3c <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bb86:	4618      	mov	r0, r3
 800bb88:	4a77      	ldr	r2, [pc, #476]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bb8a:	212c      	movs	r1, #44	; 0x2c
 800bb8c:	fb01 2203 	mla	r2, r1, r3, r2
 800bb90:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800bb94:	9910      	ldr	r1, [sp, #64]	; 0x40
 800bb96:	428a      	cmp	r2, r1
 800bb98:	d002      	beq.n	800bba0 <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	b2db      	uxtb	r3, r3
 800bb9e:	e78a      	b.n	800bab6 <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800bba0:	4971      	ldr	r1, [pc, #452]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bba2:	262c      	movs	r6, #44	; 0x2c
 800bba4:	fb06 1103 	mla	r1, r6, r3, r1
 800bba8:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800bbac:	2900      	cmp	r1, #0
 800bbae:	d0f4      	beq.n	800bb9a <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800bbb0:	4b6d      	ldr	r3, [pc, #436]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bbb2:	fb06 3000 	mla	r0, r6, r0, r3
 800bbb6:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800bbba:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 800bbbe:	6809      	ldr	r1, [r1, #0]
 800bbc0:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800bbc2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d002      	beq.n	800bbd0 <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800bbca:	4690      	mov	r8, r2
                    multicast = 1;
 800bbcc:	2501      	movs	r5, #1
 800bbce:	e775      	b.n	800babc <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800bbd0:	4b66      	ldr	r3, [pc, #408]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bbd2:	2103      	movs	r1, #3
 800bbd4:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800bbd8:	4690      	mov	r8, r2
                    multicast = 1;
 800bbda:	2501      	movs	r5, #1
 800bbdc:	e76e      	b.n	800babc <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bbde:	4b63      	ldr	r3, [pc, #396]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bbe6:	f7ff fa9f 	bl	800b128 <PrepareRxDoneAbort>
                return;
 800bbea:	e127      	b.n	800be3c <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800bbec:	4b5f      	ldr	r3, [pc, #380]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bbee:	2208      	movs	r2, #8
 800bbf0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800bbf4:	e785      	b.n	800bb02 <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800bbf6:	ab0e      	add	r3, sp, #56	; 0x38
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	9b03      	ldr	r3, [sp, #12]
 800bbfc:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800bc00:	4641      	mov	r1, r8
 800bc02:	4630      	mov	r0, r6
 800bc04:	f003 f870 	bl	800ece8 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d13d      	bne.n	800bc88 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bc0c:	4b57      	ldr	r3, [pc, #348]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bc0e:	2100      	movs	r1, #0
 800bc10:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800bc14:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800bc18:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800bc1c:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800bc20:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800bc24:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800bc28:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800bc2c:	9803      	ldr	r0, [sp, #12]
 800bc2e:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800bc32:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800bc36:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800bc3a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bc3e:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800bc42:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800bc46:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 800bc4a:	2801      	cmp	r0, #1
 800bc4c:	d92a      	bls.n	800bca4 <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 800bc4e:	2d01      	cmp	r5, #1
 800bc50:	d02e      	beq.n	800bcb0 <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800bc52:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800bc56:	2ca0      	cmp	r4, #160	; 0xa0
 800bc58:	d02f      	beq.n	800bcba <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4a42      	ldr	r2, [pc, #264]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bc5e:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800bc62:	4a42      	ldr	r2, [pc, #264]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bc64:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800bc68:	4b40      	ldr	r3, [pc, #256]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bc6a:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 800bc6e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800bc72:	f7ff fac2 	bl	800b1fa <RemoveMacCommands>
            switch( fType )
 800bc76:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	f200 809a 	bhi.w	800bdb4 <ProcessRadioRxDone+0x5b4>
 800bc80:	e8df f003 	tbb	[pc, r3]
 800bc84:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800bc88:	2802      	cmp	r0, #2
 800bc8a:	d006      	beq.n	800bc9a <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800bc8c:	4b37      	ldr	r3, [pc, #220]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bc8e:	220b      	movs	r2, #11
 800bc90:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800bc94:	f7ff fa48 	bl	800b128 <PrepareRxDoneAbort>
                return;
 800bc98:	e0d0      	b.n	800be3c <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800bc9a:	4b34      	ldr	r3, [pc, #208]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bc9c:	220a      	movs	r2, #10
 800bc9e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800bca2:	e7f7      	b.n	800bc94 <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800bca4:	4b30      	ldr	r3, [pc, #192]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bca6:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800bcae:	e7ce      	b.n	800bc4e <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800bcb0:	4b2e      	ldr	r3, [pc, #184]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800bcb8:	e7d6      	b.n	800bc68 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800bcba:	4b2b      	ldr	r3, [pc, #172]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800bcc2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800bcc6:	b913      	cbnz	r3, 800bcce <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800bcc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bcca:	4b27      	ldr	r3, [pc, #156]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bccc:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800bcce:	4b27      	ldr	r3, [pc, #156]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800bcd6:	4290      	cmp	r0, r2
 800bcd8:	d9c6      	bls.n	800bc68 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800bcda:	4b23      	ldr	r3, [pc, #140]	; (800bd68 <ProcessRadioRxDone+0x568>)
 800bcdc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800bce0:	4b22      	ldr	r3, [pc, #136]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bce2:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800bce6:	4a22      	ldr	r2, [pc, #136]	; (800bd70 <ProcessRadioRxDone+0x570>)
 800bce8:	6812      	ldr	r2, [r2, #0]
 800bcea:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 800bcee:	e7bb      	b.n	800bc68 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800bcf0:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800bcf4:	4c1d      	ldr	r4, [pc, #116]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bcf6:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	463b      	mov	r3, r7
 800bcfe:	f002 020f 	and.w	r2, r2, #15
 800bd02:	2100      	movs	r1, #0
 800bd04:	a812      	add	r0, sp, #72	; 0x48
 800bd06:	f7ff fa87 	bl	800b218 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800bd0a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bd0e:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800bd12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd14:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800bd18:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800bd1c:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800bd20:	2301      	movs	r3, #1
 800bd22:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800bd26:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bd2a:	2be0      	cmp	r3, #224	; 0xe0
 800bd2c:	d049      	beq.n	800bdc2 <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800bd2e:	4a0f      	ldr	r2, [pc, #60]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bd30:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800bd34:	f043 0302 	orr.w	r3, r3, #2
 800bd38:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800bd3c:	e06b      	b.n	800be16 <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800bd3e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800bd42:	4c0a      	ldr	r4, [pc, #40]	; (800bd6c <ProcessRadioRxDone+0x56c>)
 800bd44:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	463b      	mov	r3, r7
 800bd4c:	f002 020f 	and.w	r2, r2, #15
 800bd50:	2100      	movs	r1, #0
 800bd52:	a812      	add	r0, sp, #72	; 0x48
 800bd54:	f7ff fa60 	bl	800b218 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800bd58:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bd5c:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800bd60:	e7e1      	b.n	800bd26 <ProcessRadioRxDone+0x526>
 800bd62:	bf00      	nop
 800bd64:	200036d4 	.word	0x200036d4
 800bd68:	20008000 	.word	0x20008000
 800bd6c:	2000349c 	.word	0x2000349c
 800bd70:	20003a4c 	.word	0x20003a4c
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800bd74:	4c3d      	ldr	r4, [pc, #244]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800bd76:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	463b      	mov	r3, r7
 800bd7e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800bd82:	2100      	movs	r1, #0
 800bd84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bd86:	f7ff fa47 	bl	800b218 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800bd8a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800bd8e:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800bd92:	e7c8      	b.n	800bd26 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800bd94:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800bd98:	4b34      	ldr	r3, [pc, #208]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800bd9a:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800bd9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bda0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800bda4:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800bda8:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800bdac:	2201      	movs	r2, #1
 800bdae:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800bdb2:	e7b8      	b.n	800bd26 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bdb4:	4b2d      	ldr	r3, [pc, #180]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800bdbc:	f7ff f9b4 	bl	800b128 <PrepareRxDoneAbort>
                    break;
 800bdc0:	e7b1      	b.n	800bd26 <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800bdc2:	4a2b      	ldr	r2, [pc, #172]	; (800be70 <ProcessRadioRxDone+0x670>)
 800bdc4:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 800bdc8:	2a00      	cmp	r2, #0
 800bdca:	d1b0      	bne.n	800bd2e <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800bdcc:	4a27      	ldr	r2, [pc, #156]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800bdce:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800bdd8:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800bddc:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 800bde0:	e7a5      	b.n	800bd2e <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800bde2:	1e6a      	subs	r2, r5, #1
 800bde4:	4c21      	ldr	r4, [pc, #132]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800bde6:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800bdea:	b292      	uxth	r2, r2
 800bdec:	1c71      	adds	r1, r6, #1
 800bdee:	4638      	mov	r0, r7
 800bdf0:	f006 faaf 	bl	8012352 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800be00:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800be04:	3d01      	subs	r5, #1
 800be06:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800be0a:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800be0e:	f043 0302 	orr.w	r3, r3, #2
 800be12:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800be16:	4b15      	ldr	r3, [pc, #84]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800be18:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d917      	bls.n	800be50 <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800be20:	4b12      	ldr	r3, [pc, #72]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800be22:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800be26:	2b02      	cmp	r3, #2
 800be28:	d006      	beq.n	800be38 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800be2a:	4a10      	ldr	r2, [pc, #64]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800be2c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800be30:	f043 0320 	orr.w	r3, r3, #32
 800be34:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800be38:	f7fe ff80 	bl	800ad3c <UpdateRxSlotIdleState>
}
 800be3c:	b021      	add	sp, #132	; 0x84
 800be3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800be42:	4b0a      	ldr	r3, [pc, #40]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800be44:	2201      	movs	r2, #1
 800be46:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800be4a:	f7ff f96d 	bl	800b128 <PrepareRxDoneAbort>
            break;
 800be4e:	e7e2      	b.n	800be16 <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 800be50:	4b06      	ldr	r3, [pc, #24]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800be52:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800be56:	2b00      	cmp	r3, #0
 800be58:	d0e2      	beq.n	800be20 <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800be5a:	4b04      	ldr	r3, [pc, #16]	; (800be6c <ProcessRadioRxDone+0x66c>)
 800be5c:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0dd      	beq.n	800be20 <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 800be64:	2000      	movs	r0, #0
 800be66:	f7ff f949 	bl	800b0fc <OnRetransmitTimeoutTimerEvent>
 800be6a:	e7d9      	b.n	800be20 <ProcessRadioRxDone+0x620>
 800be6c:	2000349c 	.word	0x2000349c
 800be70:	20008000 	.word	0x20008000

0800be74 <ProcessRadioTxTimeout>:
{
 800be74:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800be76:	4b0f      	ldr	r3, [pc, #60]	; (800beb4 <ProcessRadioTxTimeout+0x40>)
 800be78:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d002      	beq.n	800be86 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800be80:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <ProcessRadioTxTimeout+0x44>)
 800be82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be84:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800be86:	f7fe ff59 	bl	800ad3c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800be8a:	4c0c      	ldr	r4, [pc, #48]	; (800bebc <ProcessRadioTxTimeout+0x48>)
 800be8c:	2002      	movs	r0, #2
 800be8e:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800be92:	f002 fc41 	bl	800e718 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800be96:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800be9a:	b113      	cbz	r3, 800bea2 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800be9c:	2201      	movs	r2, #1
 800be9e:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 800bea2:	4a06      	ldr	r2, [pc, #24]	; (800bebc <ProcessRadioTxTimeout+0x48>)
 800bea4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800bea8:	f043 0320 	orr.w	r3, r3, #32
 800beac:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	bf00      	nop
 800beb4:	20008000 	.word	0x20008000
 800beb8:	08015a90 	.word	0x08015a90
 800bebc:	2000349c 	.word	0x2000349c

0800bec0 <CheckForClassBCollision>:
{
 800bec0:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800bec2:	f002 f9d2 	bl	800e26a <LoRaMacClassBIsBeaconExpected>
 800bec6:	b978      	cbnz	r0, 800bee8 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bec8:	4b09      	ldr	r3, [pc, #36]	; (800bef0 <CheckForClassBCollision+0x30>)
 800beca:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d001      	beq.n	800bed6 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800bed2:	2000      	movs	r0, #0
}
 800bed4:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800bed6:	f002 f9ca 	bl	800e26e <LoRaMacClassBIsPingExpected>
 800beda:	b938      	cbnz	r0, 800beec <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bedc:	f002 f9c9 	bl	800e272 <LoRaMacClassBIsMulticastExpected>
 800bee0:	2800      	cmp	r0, #0
 800bee2:	d0f7      	beq.n	800bed4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800bee4:	200f      	movs	r0, #15
 800bee6:	e7f5      	b.n	800bed4 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800bee8:	200e      	movs	r0, #14
 800beea:	e7f3      	b.n	800bed4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800beec:	200f      	movs	r0, #15
 800beee:	e7f1      	b.n	800bed4 <CheckForClassBCollision+0x14>
 800bef0:	20008000 	.word	0x20008000

0800bef4 <HandleRadioRxErrorTimeout>:
{
 800bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef6:	4605      	mov	r5, r0
 800bef8:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800befa:	4b34      	ldr	r3, [pc, #208]	; (800bfcc <HandleRadioRxErrorTimeout+0xd8>)
 800befc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d002      	beq.n	800bf0a <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800bf04:	4b32      	ldr	r3, [pc, #200]	; (800bfd0 <HandleRadioRxErrorTimeout+0xdc>)
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800bf0a:	f002 f9ae 	bl	800e26a <LoRaMacClassBIsBeaconExpected>
 800bf0e:	4606      	mov	r6, r0
 800bf10:	bb50      	cbnz	r0, 800bf68 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800bf12:	4b2e      	ldr	r3, [pc, #184]	; (800bfcc <HandleRadioRxErrorTimeout+0xd8>)
 800bf14:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d02c      	beq.n	800bf76 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800bf1c:	2e00      	cmp	r6, #0
 800bf1e:	d152      	bne.n	800bfc6 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800bf20:	4b2c      	ldr	r3, [pc, #176]	; (800bfd4 <HandleRadioRxErrorTimeout+0xe0>)
 800bf22:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d13c      	bne.n	800bfa4 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800bf2a:	4b2a      	ldr	r3, [pc, #168]	; (800bfd4 <HandleRadioRxErrorTimeout+0xe0>)
 800bf2c:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bf30:	b113      	cbz	r3, 800bf38 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800bf32:	4b28      	ldr	r3, [pc, #160]	; (800bfd4 <HandleRadioRxErrorTimeout+0xe0>)
 800bf34:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800bf38:	4628      	mov	r0, r5
 800bf3a:	f002 fbed 	bl	800e718 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800bf3e:	4b23      	ldr	r3, [pc, #140]	; (800bfcc <HandleRadioRxErrorTimeout+0xd8>)
 800bf40:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800bf42:	f008 faf1 	bl	8014528 <UTIL_TIMER_GetElapsedTime>
 800bf46:	4b23      	ldr	r3, [pc, #140]	; (800bfd4 <HandleRadioRxErrorTimeout+0xe0>)
 800bf48:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800bf4c:	4298      	cmp	r0, r3
 800bf4e:	d33a      	bcc.n	800bfc6 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800bf50:	4c20      	ldr	r4, [pc, #128]	; (800bfd4 <HandleRadioRxErrorTimeout+0xe0>)
 800bf52:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800bf56:	f008 fb1d 	bl	8014594 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800bf5a:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800bf5e:	f043 0320 	orr.w	r3, r3, #32
 800bf62:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 800bf66:	e02e      	b.n	800bfc6 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800bf68:	2002      	movs	r0, #2
 800bf6a:	f002 f974 	bl	800e256 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800bf6e:	2000      	movs	r0, #0
 800bf70:	f002 f976 	bl	800e260 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800bf74:	e7cd      	b.n	800bf12 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800bf76:	f002 f97a 	bl	800e26e <LoRaMacClassBIsPingExpected>
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	b950      	cbnz	r0, 800bf94 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800bf7e:	f002 f978 	bl	800e272 <LoRaMacClassBIsMulticastExpected>
 800bf82:	2800      	cmp	r0, #0
 800bf84:	d0ca      	beq.n	800bf1c <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bf86:	2000      	movs	r0, #0
 800bf88:	f002 f967 	bl	800e25a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	f002 f969 	bl	800e264 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800bf92:	e018      	b.n	800bfc6 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800bf94:	2000      	movs	r0, #0
 800bf96:	f002 f95f 	bl	800e258 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	f002 f961 	bl	800e262 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800bfa0:	463e      	mov	r6, r7
 800bfa2:	e7ec      	b.n	800bf7e <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800bfa4:	4b0b      	ldr	r3, [pc, #44]	; (800bfd4 <HandleRadioRxErrorTimeout+0xe0>)
 800bfa6:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800bfaa:	b113      	cbz	r3, 800bfb2 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800bfac:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <HandleRadioRxErrorTimeout+0xe0>)
 800bfae:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f002 fbb0 	bl	800e718 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800bfb8:	4a06      	ldr	r2, [pc, #24]	; (800bfd4 <HandleRadioRxErrorTimeout+0xe0>)
 800bfba:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800bfbe:	f043 0320 	orr.w	r3, r3, #32
 800bfc2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800bfc6:	f7fe feb9 	bl	800ad3c <UpdateRxSlotIdleState>
}
 800bfca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfcc:	20008000 	.word	0x20008000
 800bfd0:	08015a90 	.word	0x08015a90
 800bfd4:	2000349c 	.word	0x2000349c

0800bfd8 <ProcessRadioRxError>:
{
 800bfd8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800bfda:	2106      	movs	r1, #6
 800bfdc:	2005      	movs	r0, #5
 800bfde:	f7ff ff89 	bl	800bef4 <HandleRadioRxErrorTimeout>
}
 800bfe2:	bd08      	pop	{r3, pc}

0800bfe4 <ProcessRadioRxTimeout>:
{
 800bfe4:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800bfe6:	2104      	movs	r1, #4
 800bfe8:	2003      	movs	r0, #3
 800bfea:	f7ff ff83 	bl	800bef4 <HandleRadioRxErrorTimeout>
}
 800bfee:	bd08      	pop	{r3, pc}

0800bff0 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bff0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bff4:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800bff6:	4a14      	ldr	r2, [pc, #80]	; (800c048 <LoRaMacHandleIrqEvents+0x58>)
 800bff8:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800bffa:	2000      	movs	r0, #0
 800bffc:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bffe:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800c002:	b303      	cbz	r3, 800c046 <LoRaMacHandleIrqEvents+0x56>
{
 800c004:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800c006:	b2dc      	uxtb	r4, r3
 800c008:	f013 0f20 	tst.w	r3, #32
 800c00c:	d10c      	bne.n	800c028 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800c00e:	f014 0f10 	tst.w	r4, #16
 800c012:	d10c      	bne.n	800c02e <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800c014:	f014 0f08 	tst.w	r4, #8
 800c018:	d10c      	bne.n	800c034 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800c01a:	f014 0f04 	tst.w	r4, #4
 800c01e:	d10c      	bne.n	800c03a <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800c020:	f014 0f02 	tst.w	r4, #2
 800c024:	d10c      	bne.n	800c040 <LoRaMacHandleIrqEvents+0x50>
}
 800c026:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800c028:	f7fe fff2 	bl	800b010 <ProcessRadioTxDone>
 800c02c:	e7ef      	b.n	800c00e <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800c02e:	f7ff fbe7 	bl	800b800 <ProcessRadioRxDone>
 800c032:	e7ef      	b.n	800c014 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800c034:	f7ff ff1e 	bl	800be74 <ProcessRadioTxTimeout>
 800c038:	e7ef      	b.n	800c01a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800c03a:	f7ff ffcd 	bl	800bfd8 <ProcessRadioRxError>
 800c03e:	e7ef      	b.n	800c020 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800c040:	f7ff ffd0 	bl	800bfe4 <ProcessRadioRxTimeout>
}
 800c044:	e7ef      	b.n	800c026 <LoRaMacHandleIrqEvents+0x36>
 800c046:	4770      	bx	lr
 800c048:	20003498 	.word	0x20003498

0800c04c <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800c04c:	b909      	cbnz	r1, 800c052 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800c04e:	2000      	movs	r0, #0
}
 800c050:	4770      	bx	lr
{
 800c052:	b510      	push	{r4, lr}
 800c054:	4604      	mov	r4, r0
 800c056:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800c058:	f008 fa66 	bl	8014528 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800c05c:	42a0      	cmp	r0, r4
 800c05e:	d801      	bhi.n	800c064 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800c060:	2000      	movs	r0, #0
}
 800c062:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800c064:	4b02      	ldr	r3, [pc, #8]	; (800c070 <LoRaMacHandleResponseTimeout+0x24>)
 800c066:	2200      	movs	r2, #0
 800c068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800c06c:	2001      	movs	r0, #1
 800c06e:	e7f8      	b.n	800c062 <LoRaMacHandleResponseTimeout+0x16>
 800c070:	20008000 	.word	0x20008000

0800c074 <LoRaMacHandleMlmeRequest>:
{
 800c074:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c076:	4b14      	ldr	r3, [pc, #80]	; (800c0c8 <LoRaMacHandleMlmeRequest+0x54>)
 800c078:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c07c:	f013 0f04 	tst.w	r3, #4
 800c080:	d100      	bne.n	800c084 <LoRaMacHandleMlmeRequest+0x10>
}
 800c082:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800c084:	2001      	movs	r0, #1
 800c086:	f002 fb65 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800c08a:	b178      	cbz	r0, 800c0ac <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800c08c:	2001      	movs	r0, #1
 800c08e:	f002 fb2b 	bl	800e6e8 <LoRaMacConfirmQueueGetStatus>
 800c092:	b918      	cbnz	r0, 800c09c <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800c094:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <LoRaMacHandleMlmeRequest+0x54>)
 800c096:	2200      	movs	r2, #0
 800c098:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c09c:	4a0a      	ldr	r2, [pc, #40]	; (800c0c8 <LoRaMacHandleMlmeRequest+0x54>)
 800c09e:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c0a2:	f023 0302 	bic.w	r3, r3, #2
 800c0a6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800c0aa:	e7ea      	b.n	800c082 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800c0ac:	2005      	movs	r0, #5
 800c0ae:	f002 fb51 	bl	800e754 <LoRaMacConfirmQueueIsCmdActive>
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d0e5      	beq.n	800c082 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c0b6:	4a04      	ldr	r2, [pc, #16]	; (800c0c8 <LoRaMacHandleMlmeRequest+0x54>)
 800c0b8:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c0bc:	f023 0302 	bic.w	r3, r3, #2
 800c0c0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800c0c4:	e7dd      	b.n	800c082 <LoRaMacHandleMlmeRequest+0xe>
 800c0c6:	bf00      	nop
 800c0c8:	2000349c 	.word	0x2000349c

0800c0cc <SerializeTxFrame>:
{
 800c0cc:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800c0ce:	4b0f      	ldr	r3, [pc, #60]	; (800c10c <SerializeTxFrame+0x40>)
 800c0d0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c0d4:	b11b      	cbz	r3, 800c0de <SerializeTxFrame+0x12>
 800c0d6:	2b04      	cmp	r3, #4
 800c0d8:	d00a      	beq.n	800c0f0 <SerializeTxFrame+0x24>
 800c0da:	2003      	movs	r0, #3
}
 800c0dc:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c0de:	480c      	ldr	r0, [pc, #48]	; (800c110 <SerializeTxFrame+0x44>)
 800c0e0:	f002 ffd3 	bl	800f08a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c0e4:	b968      	cbnz	r0, 800c102 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c0e6:	4b09      	ldr	r3, [pc, #36]	; (800c10c <SerializeTxFrame+0x40>)
 800c0e8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c0ec:	801a      	strh	r2, [r3, #0]
            break;
 800c0ee:	e7f5      	b.n	800c0dc <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800c0f0:	4807      	ldr	r0, [pc, #28]	; (800c110 <SerializeTxFrame+0x44>)
 800c0f2:	f003 f800 	bl	800f0f6 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800c0f6:	b930      	cbnz	r0, 800c106 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c0f8:	4b04      	ldr	r3, [pc, #16]	; (800c10c <SerializeTxFrame+0x40>)
 800c0fa:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c0fe:	801a      	strh	r2, [r3, #0]
            break;
 800c100:	e7ec      	b.n	800c0dc <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c102:	2011      	movs	r0, #17
 800c104:	e7ea      	b.n	800c0dc <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c106:	2011      	movs	r0, #17
 800c108:	e7e8      	b.n	800c0dc <SerializeTxFrame+0x10>
 800c10a:	bf00      	nop
 800c10c:	2000349c 	.word	0x2000349c
 800c110:	200035a4 	.word	0x200035a4

0800c114 <ComputeRxWindowParameters>:
{
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c118:	4c1d      	ldr	r4, [pc, #116]	; (800c190 <ComputeRxWindowParameters+0x7c>)
 800c11a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800c11e:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800c122:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800c126:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800c12a:	4630      	mov	r0, r6
 800c12c:	f003 f993 	bl	800f456 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c130:	4d18      	ldr	r5, [pc, #96]	; (800c194 <ComputeRxWindowParameters+0x80>)
 800c132:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c13a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800c13e:	b241      	sxtb	r1, r0
 800c140:	4630      	mov	r0, r6
 800c142:	f003 f8d4 	bl	800f2ee <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c146:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c14e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800c152:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800c156:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c15a:	f003 f8c8 	bl	800f2ee <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c15e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c160:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800c164:	440b      	add	r3, r1
 800c166:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c16a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c16c:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800c170:	4413      	add	r3, r2
 800c172:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c176:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800c17a:	b93b      	cbnz	r3, 800c18c <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800c17c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c17e:	4419      	add	r1, r3
 800c180:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800c184:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c186:	440a      	add	r2, r1
 800c188:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800c18c:	b002      	add	sp, #8
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	20008000 	.word	0x20008000
 800c194:	2000349c 	.word	0x2000349c

0800c198 <VerifyTxFrame>:
{
 800c198:	b510      	push	{r4, lr}
 800c19a:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800c19c:	2300      	movs	r3, #0
 800c19e:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800c1a0:	4b0d      	ldr	r3, [pc, #52]	; (800c1d8 <VerifyTxFrame+0x40>)
 800c1a2:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 800c1a6:	b914      	cbnz	r4, 800c1ae <VerifyTxFrame+0x16>
}
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	b002      	add	sp, #8
 800c1ac:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800c1ae:	a801      	add	r0, sp, #4
 800c1b0:	f002 f980 	bl	800e4b4 <LoRaMacCommandsGetSizeSerializedCmds>
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	b968      	cbnz	r0, 800c1d4 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800c1b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c1bc:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <VerifyTxFrame+0x40>)
 800c1be:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800c1c2:	4b06      	ldr	r3, [pc, #24]	; (800c1dc <VerifyTxFrame+0x44>)
 800c1c4:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800c1c8:	f7fe ff10 	bl	800afec <ValidatePayloadLength>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d1eb      	bne.n	800c1a8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800c1d0:	2408      	movs	r4, #8
 800c1d2:	e7e9      	b.n	800c1a8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c1d4:	2413      	movs	r4, #19
 800c1d6:	e7e7      	b.n	800c1a8 <VerifyTxFrame+0x10>
 800c1d8:	20008000 	.word	0x20008000
 800c1dc:	2000349c 	.word	0x2000349c

0800c1e0 <SecureFrame>:
{
 800c1e0:	b530      	push	{r4, r5, lr}
 800c1e2:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800c1e8:	4b18      	ldr	r3, [pc, #96]	; (800c24c <SecureFrame+0x6c>)
 800c1ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c1ee:	b133      	cbz	r3, 800c1fe <SecureFrame+0x1e>
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	2b04      	cmp	r3, #4
 800c1f6:	d00b      	beq.n	800c210 <SecureFrame+0x30>
 800c1f8:	2003      	movs	r0, #3
}
 800c1fa:	b003      	add	sp, #12
 800c1fc:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800c1fe:	4814      	ldr	r0, [pc, #80]	; (800c250 <SecureFrame+0x70>)
 800c200:	f002 fd08 	bl	800ec14 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c204:	b9d8      	cbnz	r0, 800c23e <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800c206:	4b11      	ldr	r3, [pc, #68]	; (800c24c <SecureFrame+0x6c>)
 800c208:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c20c:	801a      	strh	r2, [r3, #0]
            break;
 800c20e:	e7f4      	b.n	800c1fa <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800c210:	a801      	add	r0, sp, #4
 800c212:	f002 fcb5 	bl	800eb80 <LoRaMacCryptoGetFCntUp>
 800c216:	b9a0      	cbnz	r0, 800c242 <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800c218:	4b0c      	ldr	r3, [pc, #48]	; (800c24c <SecureFrame+0x6c>)
 800c21a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800c21e:	b113      	cbz	r3, 800c226 <SecureFrame+0x46>
                fCntUp -= 1;
 800c220:	9b01      	ldr	r3, [sp, #4]
 800c222:	3b01      	subs	r3, #1
 800c224:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800c226:	4b0a      	ldr	r3, [pc, #40]	; (800c250 <SecureFrame+0x70>)
 800c228:	4622      	mov	r2, r4
 800c22a:	4629      	mov	r1, r5
 800c22c:	9801      	ldr	r0, [sp, #4]
 800c22e:	f002 fd17 	bl	800ec60 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800c232:	b940      	cbnz	r0, 800c246 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800c234:	4b05      	ldr	r3, [pc, #20]	; (800c24c <SecureFrame+0x6c>)
 800c236:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800c23a:	801a      	strh	r2, [r3, #0]
            break;
 800c23c:	e7dd      	b.n	800c1fa <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c23e:	2011      	movs	r0, #17
 800c240:	e7db      	b.n	800c1fa <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800c242:	2012      	movs	r0, #18
 800c244:	e7d9      	b.n	800c1fa <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800c246:	2011      	movs	r0, #17
 800c248:	e7d7      	b.n	800c1fa <SecureFrame+0x1a>
 800c24a:	bf00      	nop
 800c24c:	2000349c 	.word	0x2000349c
 800c250:	200035a4 	.word	0x200035a4

0800c254 <SendFrameOnChannel>:
{
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	b086      	sub	sp, #24
 800c258:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800c260:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c264:	4d35      	ldr	r5, [pc, #212]	; (800c33c <SendFrameOnChannel+0xe8>)
 800c266:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800c26a:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c26e:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800c272:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800c276:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800c278:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800c27a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800c27c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800c27e:	4c30      	ldr	r4, [pc, #192]	; (800c340 <SendFrameOnChannel+0xec>)
 800c280:	8823      	ldrh	r3, [r4, #0]
 800c282:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c286:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 800c28a:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800c28e:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800c292:	f10d 0207 	add.w	r2, sp, #7
 800c296:	a902      	add	r1, sp, #8
 800c298:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800c29c:	f003 f84b 	bl	800f336 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c2a6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800c2aa:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800c2ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c2b2:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 800c2b6:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800c2ba:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800c2be:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800c2c2:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800c2c6:	f001 ffd6 	bl	800e276 <LoRaMacClassBIsBeaconModeActive>
 800c2ca:	bb60      	cbnz	r0, 800c326 <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800c2cc:	4b1b      	ldr	r3, [pc, #108]	; (800c33c <SendFrameOnChannel+0xe8>)
 800c2ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d02f      	beq.n	800c336 <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 800c2d6:	f001 ffd1 	bl	800e27c <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800c2da:	4b18      	ldr	r3, [pc, #96]	; (800c33c <SendFrameOnChannel+0xe8>)
 800c2dc:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800c2e0:	4b17      	ldr	r3, [pc, #92]	; (800c340 <SendFrameOnChannel+0xec>)
 800c2e2:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 800c2e6:	b2c0      	uxtb	r0, r0
 800c2e8:	f7ff ff7a 	bl	800c1e0 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	b9b8      	cbnz	r0, 800c320 <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800c2f0:	4813      	ldr	r0, [pc, #76]	; (800c340 <SendFrameOnChannel+0xec>)
 800c2f2:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800c2f6:	f043 0302 	orr.w	r3, r3, #2
 800c2fa:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800c2fe:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 800c302:	3301      	adds	r3, #1
 800c304:	b2db      	uxtb	r3, r3
 800c306:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800c30a:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800c314:	4b0b      	ldr	r3, [pc, #44]	; (800c344 <SendFrameOnChannel+0xf0>)
 800c316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c318:	f830 1b02 	ldrh.w	r1, [r0], #2
 800c31c:	b2c9      	uxtb	r1, r1
 800c31e:	4798      	blx	r3
}
 800c320:	4620      	mov	r0, r4
 800c322:	b006      	add	sp, #24
 800c324:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800c326:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 800c32a:	f001 ffb6 	bl	800e29a <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800c32e:	2800      	cmp	r0, #0
 800c330:	d0cc      	beq.n	800c2cc <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800c332:	2410      	movs	r4, #16
 800c334:	e7f4      	b.n	800c320 <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 800c336:	f001 ffb2 	bl	800e29e <LoRaMacClassBStopRxSlots>
 800c33a:	e7cc      	b.n	800c2d6 <SendFrameOnChannel+0x82>
 800c33c:	20008000 	.word	0x20008000
 800c340:	2000349c 	.word	0x2000349c
 800c344:	08015a90 	.word	0x08015a90

0800c348 <ScheduleTx>:
{
 800c348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c34c:	b08c      	sub	sp, #48	; 0x30
 800c34e:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800c350:	f7ff fdb6 	bl	800bec0 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800c354:	4604      	mov	r4, r0
 800c356:	b118      	cbz	r0, 800c360 <ScheduleTx+0x18>
}
 800c358:	4620      	mov	r0, r4
 800c35a:	b00c      	add	sp, #48	; 0x30
 800c35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800c360:	f7fe fd50 	bl	800ae04 <CalculateBackOff>
    status = SerializeTxFrame( );
 800c364:	f7ff feb2 	bl	800c0cc <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800c368:	4604      	mov	r4, r0
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d1f4      	bne.n	800c358 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800c36e:	4e36      	ldr	r6, [pc, #216]	; (800c448 <ScheduleTx+0x100>)
 800c370:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800c372:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c374:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800c378:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800c37c:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800c380:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c384:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c388:	4640      	mov	r0, r8
 800c38a:	f008 f837 	bl	80143fc <SysTimeGetMcuTime>
 800c38e:	af02      	add	r7, sp, #8
 800c390:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800c39a:	e898 0006 	ldmia.w	r8, {r1, r2}
 800c39e:	4638      	mov	r0, r7
 800c3a0:	f007 ffc9 	bl	8014336 <SysTimeSub>
 800c3a4:	ab07      	add	r3, sp, #28
 800c3a6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800c3aa:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800c3ae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800c3b0:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800c3be:	4b23      	ldr	r3, [pc, #140]	; (800c44c <ScheduleTx+0x104>)
 800c3c0:	881b      	ldrh	r3, [r3, #0]
 800c3c2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c3c6:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800c3ca:	b92b      	cbnz	r3, 800c3d8 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800c3d8:	4a1c      	ldr	r2, [pc, #112]	; (800c44c <ScheduleTx+0x104>)
 800c3da:	481b      	ldr	r0, [pc, #108]	; (800c448 <ScheduleTx+0x100>)
 800c3dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 800c3e6:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 800c3ea:	a904      	add	r1, sp, #16
 800c3ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800c3f0:	f003 f81c 	bl	800f42c <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800c3f4:	b1b0      	cbz	r0, 800c424 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800c3f6:	280b      	cmp	r0, #11
 800c3f8:	d122      	bne.n	800c440 <ScheduleTx+0xf8>
 800c3fa:	b31d      	cbz	r5, 800c444 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800c3fc:	4b13      	ldr	r3, [pc, #76]	; (800c44c <ScheduleTx+0x104>)
 800c3fe:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800c402:	2900      	cmp	r1, #0
 800c404:	d0a8      	beq.n	800c358 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800c406:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800c40a:	f042 0220 	orr.w	r2, r2, #32
 800c40e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800c412:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800c416:	4628      	mov	r0, r5
 800c418:	f008 f95c 	bl	80146d4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800c41c:	4628      	mov	r0, r5
 800c41e:	f008 f913 	bl	8014648 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800c422:	e799      	b.n	800c358 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800c424:	f7ff fe76 	bl	800c114 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800c428:	f7ff feb6 	bl	800c198 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800c42c:	4604      	mov	r4, r0
 800c42e:	2800      	cmp	r0, #0
 800c430:	d192      	bne.n	800c358 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800c432:	4b06      	ldr	r3, [pc, #24]	; (800c44c <ScheduleTx+0x104>)
 800c434:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800c438:	f7ff ff0c 	bl	800c254 <SendFrameOnChannel>
 800c43c:	4604      	mov	r4, r0
 800c43e:	e78b      	b.n	800c358 <ScheduleTx+0x10>
            return status;
 800c440:	4604      	mov	r4, r0
 800c442:	e789      	b.n	800c358 <ScheduleTx+0x10>
 800c444:	4604      	mov	r4, r0
 800c446:	e787      	b.n	800c358 <ScheduleTx+0x10>
 800c448:	20008000 	.word	0x20008000
 800c44c:	2000349c 	.word	0x2000349c

0800c450 <OnTxDelayedTimerEvent>:
{
 800c450:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800c452:	4c16      	ldr	r4, [pc, #88]	; (800c4ac <OnTxDelayedTimerEvent+0x5c>)
 800c454:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800c458:	f008 f89c 	bl	8014594 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c45c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800c460:	f023 0320 	bic.w	r3, r3, #32
 800c464:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800c468:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 800c46c:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <OnTxDelayedTimerEvent+0x60>)
 800c46e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800c472:	f7ff fdeb 	bl	800c04c <LoRaMacHandleResponseTimeout>
 800c476:	b100      	cbz	r0, 800c47a <OnTxDelayedTimerEvent+0x2a>
}
 800c478:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800c47a:	2001      	movs	r0, #1
 800c47c:	f7ff ff64 	bl	800c348 <ScheduleTx>
 800c480:	2800      	cmp	r0, #0
 800c482:	d0f9      	beq.n	800c478 <OnTxDelayedTimerEvent+0x28>
 800c484:	280b      	cmp	r0, #11
 800c486:	d0f7      	beq.n	800c478 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800c488:	4b09      	ldr	r3, [pc, #36]	; (800c4b0 <OnTxDelayedTimerEvent+0x60>)
 800c48a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800c48e:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800c492:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 800c496:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800c49a:	2009      	movs	r0, #9
 800c49c:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800c4a0:	f002 f93a 	bl	800e718 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800c4a4:	f7fe fd40 	bl	800af28 <StopRetransmission>
            break;
 800c4a8:	e7e6      	b.n	800c478 <OnTxDelayedTimerEvent+0x28>
 800c4aa:	bf00      	nop
 800c4ac:	2000349c 	.word	0x2000349c
 800c4b0:	20008000 	.word	0x20008000

0800c4b4 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c4b4:	4b1c      	ldr	r3, [pc, #112]	; (800c528 <LoRaMacHandleMcpsRequest+0x74>)
 800c4b6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c4ba:	f013 0f01 	tst.w	r3, #1
 800c4be:	d032      	beq.n	800c526 <LoRaMacHandleMcpsRequest+0x72>
{
 800c4c0:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800c4c2:	4b19      	ldr	r3, [pc, #100]	; (800c528 <LoRaMacHandleMcpsRequest+0x74>)
 800c4c4:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800c4c8:	b12b      	cbz	r3, 800c4d6 <LoRaMacHandleMcpsRequest+0x22>
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d003      	beq.n	800c4d6 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d006      	beq.n	800c4e0 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	e002      	b.n	800c4dc <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800c4d6:	f7fe fced 	bl	800aeb4 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800c4da:	b940      	cbnz	r0, 800c4ee <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800c4dc:	b1b8      	cbz	r0, 800c50e <LoRaMacHandleMcpsRequest+0x5a>
}
 800c4de:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800c4e0:	4b11      	ldr	r3, [pc, #68]	; (800c528 <LoRaMacHandleMcpsRequest+0x74>)
 800c4e2:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800c4e6:	b183      	cbz	r3, 800c50a <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800c4e8:	f7fe fd00 	bl	800aeec <CheckRetransConfirmedUplink>
 800c4ec:	e7f5      	b.n	800c4da <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800c4ee:	4c0e      	ldr	r4, [pc, #56]	; (800c528 <LoRaMacHandleMcpsRequest+0x74>)
 800c4f0:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800c4f4:	f008 f84e 	bl	8014594 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800c4f8:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800c4fc:	f023 0320 	bic.w	r3, r3, #32
 800c500:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800c504:	f7fe fd10 	bl	800af28 <StopRetransmission>
 800c508:	e7e9      	b.n	800c4de <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800c50a:	2001      	movs	r0, #1
 800c50c:	e7e6      	b.n	800c4dc <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800c50e:	4b06      	ldr	r3, [pc, #24]	; (800c528 <LoRaMacHandleMcpsRequest+0x74>)
 800c510:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c514:	f36f 1245 	bfc	r2, #5, #1
 800c518:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800c51c:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800c520:	f7ff ff96 	bl	800c450 <OnTxDelayedTimerEvent>
}
 800c524:	e7db      	b.n	800c4de <LoRaMacHandleMcpsRequest+0x2a>
 800c526:	4770      	bx	lr
 800c528:	2000349c 	.word	0x2000349c

0800c52c <LoRaMacHandleRequestEvents>:
{
 800c52c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c52e:	4b22      	ldr	r3, [pc, #136]	; (800c5b8 <LoRaMacHandleRequestEvents+0x8c>)
 800c530:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c534:	bb7b      	cbnz	r3, 800c596 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800c536:	4b20      	ldr	r3, [pc, #128]	; (800c5b8 <LoRaMacHandleRequestEvents+0x8c>)
 800c538:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 800c53c:	f014 0501 	ands.w	r5, r4, #1
 800c540:	d005      	beq.n	800c54e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800c542:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c546:	f36f 0200 	bfc	r2, #0, #1
 800c54a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c54e:	4b1a      	ldr	r3, [pc, #104]	; (800c5b8 <LoRaMacHandleRequestEvents+0x8c>)
 800c550:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c554:	f013 0f04 	tst.w	r3, #4
 800c558:	d006      	beq.n	800c568 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c55a:	4b17      	ldr	r3, [pc, #92]	; (800c5b8 <LoRaMacHandleRequestEvents+0x8c>)
 800c55c:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c560:	f36f 0282 	bfc	r2, #2, #1
 800c564:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800c568:	2001      	movs	r0, #1
 800c56a:	f7fe fbfb 	bl	800ad64 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800c56e:	b135      	cbz	r5, 800c57e <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800c570:	4811      	ldr	r0, [pc, #68]	; (800c5b8 <LoRaMacHandleRequestEvents+0x8c>)
 800c572:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f200 4044 	addw	r0, r0, #1092	; 0x444
 800c57c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800c57e:	f014 0f04 	tst.w	r4, #4
 800c582:	d109      	bne.n	800c598 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800c584:	f001 fe7b 	bl	800e27e <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800c588:	4b0b      	ldr	r3, [pc, #44]	; (800c5b8 <LoRaMacHandleRequestEvents+0x8c>)
 800c58a:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c58e:	f36f 1245 	bfc	r2, #5, #1
 800c592:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 800c596:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800c598:	4808      	ldr	r0, [pc, #32]	; (800c5bc <LoRaMacHandleRequestEvents+0x90>)
 800c59a:	f002 f8e7 	bl	800e76c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800c59e:	f002 f917 	bl	800e7d0 <LoRaMacConfirmQueueGetCnt>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	d0ee      	beq.n	800c584 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c5a6:	4a04      	ldr	r2, [pc, #16]	; (800c5b8 <LoRaMacHandleRequestEvents+0x8c>)
 800c5a8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800c5ac:	f043 0304 	orr.w	r3, r3, #4
 800c5b0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800c5b4:	e7e6      	b.n	800c584 <LoRaMacHandleRequestEvents+0x58>
 800c5b6:	bf00      	nop
 800c5b8:	2000349c 	.word	0x2000349c
 800c5bc:	200038f4 	.word	0x200038f4

0800c5c0 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800c5c0:	4b07      	ldr	r3, [pc, #28]	; (800c5e0 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800c5c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c5c6:	b103      	cbz	r3, 800c5ca <LoRaMacHandleScheduleUplinkEvent+0xa>
 800c5c8:	4770      	bx	lr
{
 800c5ca:	b500      	push	{lr}
 800c5cc:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800c5ce:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800c5d2:	f10d 0007 	add.w	r0, sp, #7
 800c5d6:	f001 ffab 	bl	800e530 <LoRaMacCommandsStickyCmdsPending>
}
 800c5da:	b003      	add	sp, #12
 800c5dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5e0:	2000349c 	.word	0x2000349c

0800c5e4 <OpenContinuousRxCWindow>:
{
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800c5e8:	4c16      	ldr	r4, [pc, #88]	; (800c644 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800c5ea:	4d17      	ldr	r5, [pc, #92]	; (800c648 <OpenContinuousRxCWindow+0x64>)
 800c5ec:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800c5f0:	9600      	str	r6, [sp, #0]
 800c5f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c5f4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800c5f8:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800c5fc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c600:	f002 fe75 	bl	800f2ee <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c604:	2302      	movs	r3, #2
 800c606:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c60a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800c60e:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800c612:	2301      	movs	r3, #1
 800c614:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800c618:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 800c61c:	4631      	mov	r1, r6
 800c61e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800c622:	f002 fe78 	bl	800f316 <RegionRxConfig>
 800c626:	b158      	cbz	r0, 800c640 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800c628:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800c62c:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 800c630:	4b06      	ldr	r3, [pc, #24]	; (800c64c <OpenContinuousRxCWindow+0x68>)
 800c632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c634:	2000      	movs	r0, #0
 800c636:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800c638:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800c63c:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800c640:	b002      	add	sp, #8
 800c642:	bd70      	pop	{r4, r5, r6, pc}
 800c644:	20008000 	.word	0x20008000
 800c648:	2000349c 	.word	0x2000349c
 800c64c:	08015a90 	.word	0x08015a90

0800c650 <RxWindowSetup>:
{
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800c654:	f007 ff9e 	bl	8014594 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800c658:	4b0c      	ldr	r3, [pc, #48]	; (800c68c <RxWindowSetup+0x3c>)
 800c65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c65c:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800c65e:	4a0c      	ldr	r2, [pc, #48]	; (800c690 <RxWindowSetup+0x40>)
 800c660:	4621      	mov	r1, r4
 800c662:	4b0c      	ldr	r3, [pc, #48]	; (800c694 <RxWindowSetup+0x44>)
 800c664:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c668:	f002 fe55 	bl	800f316 <RegionRxConfig>
 800c66c:	b160      	cbz	r0, 800c688 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800c66e:	4d0a      	ldr	r5, [pc, #40]	; (800c698 <RxWindowSetup+0x48>)
 800c670:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800c674:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800c678:	4b04      	ldr	r3, [pc, #16]	; (800c68c <RxWindowSetup+0x3c>)
 800c67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67c:	4a05      	ldr	r2, [pc, #20]	; (800c694 <RxWindowSetup+0x44>)
 800c67e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800c680:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800c682:	7ce3      	ldrb	r3, [r4, #19]
 800c684:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800c688:	bd38      	pop	{r3, r4, r5, pc}
 800c68a:	bf00      	nop
 800c68c:	08015a90 	.word	0x08015a90
 800c690:	200038c4 	.word	0x200038c4
 800c694:	20008000 	.word	0x20008000
 800c698:	2000349c 	.word	0x2000349c

0800c69c <OnRxWindow2TimerEvent>:
{
 800c69c:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <OnRxWindow2TimerEvent+0x50>)
 800c6a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800c6a4:	b903      	cbnz	r3, 800c6a8 <OnRxWindow2TimerEvent+0xc>
}
 800c6a6:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800c6a8:	4810      	ldr	r0, [pc, #64]	; (800c6ec <OnRxWindow2TimerEvent+0x50>)
 800c6aa:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800c6ae:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800c6b2:	4b0f      	ldr	r3, [pc, #60]	; (800c6f0 <OnRxWindow2TimerEvent+0x54>)
 800c6b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c6b6:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c6ba:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c6be:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800c6c2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800c6c6:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c6d6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c6da:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800c6de:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800c6e2:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800c6e6:	f7ff ffb3 	bl	800c650 <RxWindowSetup>
 800c6ea:	e7dc      	b.n	800c6a6 <OnRxWindow2TimerEvent+0xa>
 800c6ec:	2000349c 	.word	0x2000349c
 800c6f0:	20008000 	.word	0x20008000

0800c6f4 <OnRxWindow1TimerEvent>:
{
 800c6f4:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800c6f6:	4811      	ldr	r0, [pc, #68]	; (800c73c <OnRxWindow1TimerEvent+0x48>)
 800c6f8:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800c6fc:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800c700:	4b0f      	ldr	r3, [pc, #60]	; (800c740 <OnRxWindow1TimerEvent+0x4c>)
 800c702:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800c706:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c70a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800c70e:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800c712:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800c716:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800c71a:	2200      	movs	r2, #0
 800c71c:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800c720:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c724:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800c728:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800c72c:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800c730:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800c734:	f7ff ff8c 	bl	800c650 <RxWindowSetup>
}
 800c738:	bd08      	pop	{r3, pc}
 800c73a:	bf00      	nop
 800c73c:	2000349c 	.word	0x2000349c
 800c740:	20008000 	.word	0x20008000

0800c744 <LoRaMacHandleNvm>:
{
 800c744:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800c746:	4b30      	ldr	r3, [pc, #192]	; (800c808 <LoRaMacHandleNvm+0xc4>)
 800c748:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c74c:	b103      	cbz	r3, 800c750 <LoRaMacHandleNvm+0xc>
}
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800c752:	2124      	movs	r1, #36	; 0x24
 800c754:	f005 fe1e 	bl	8012394 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800c758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c75a:	4283      	cmp	r3, r0
 800c75c:	d052      	beq.n	800c804 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800c75e:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800c760:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800c762:	2114      	movs	r1, #20
 800c764:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c768:	f005 fe14 	bl	8012394 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800c76c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c76e:	4283      	cmp	r3, r0
 800c770:	d002      	beq.n	800c778 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800c772:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800c774:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800c778:	21e0      	movs	r1, #224	; 0xe0
 800c77a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800c77e:	f005 fe09 	bl	8012394 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800c782:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800c786:	4283      	cmp	r3, r0
 800c788:	d003      	beq.n	800c792 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800c78a:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800c78e:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800c792:	21bc      	movs	r1, #188	; 0xbc
 800c794:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800c798:	f005 fdfc 	bl	8012394 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800c79c:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800c7a0:	4283      	cmp	r3, r0
 800c7a2:	d003      	beq.n	800c7ac <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800c7a4:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800c7a8:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800c7ac:	2110      	movs	r1, #16
 800c7ae:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800c7b2:	f005 fdef 	bl	8012394 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800c7b6:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800c7ba:	4283      	cmp	r3, r0
 800c7bc:	d003      	beq.n	800c7c6 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800c7be:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800c7c2:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800c7c6:	f44f 715e 	mov.w	r1, #888	; 0x378
 800c7ca:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800c7ce:	f005 fde1 	bl	8012394 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800c7d2:	f8d4 3570 	ldr.w	r3, [r4, #1392]	; 0x570
 800c7d6:	4283      	cmp	r3, r0
 800c7d8:	d003      	beq.n	800c7e2 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800c7da:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800c7de:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800c7e2:	2114      	movs	r1, #20
 800c7e4:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800c7e8:	f005 fdd4 	bl	8012394 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800c7ec:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800c7f0:	4283      	cmp	r3, r0
 800c7f2:	d003      	beq.n	800c7fc <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800c7f4:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800c7f8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	f7fe fbbd 	bl	800af7c <CallNvmDataChangeCallback>
 800c802:	e7a4      	b.n	800c74e <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c804:	2500      	movs	r5, #0
 800c806:	e7ac      	b.n	800c762 <LoRaMacHandleNvm+0x1e>
 800c808:	2000349c 	.word	0x2000349c

0800c80c <RestoreNvmData>:
{
 800c80c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800c80e:	4b34      	ldr	r3, [pc, #208]	; (800c8e0 <RestoreNvmData+0xd4>)
 800c810:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c814:	2b01      	cmp	r3, #1
 800c816:	d001      	beq.n	800c81c <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800c818:	2001      	movs	r0, #1
}
 800c81a:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800c81c:	4c31      	ldr	r4, [pc, #196]	; (800c8e4 <RestoreNvmData+0xd8>)
 800c81e:	2124      	movs	r1, #36	; 0x24
 800c820:	4620      	mov	r0, r4
 800c822:	f005 fdb7 	bl	8012394 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800c826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c828:	4283      	cmp	r3, r0
 800c82a:	d001      	beq.n	800c830 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800c82c:	2017      	movs	r0, #23
 800c82e:	e7f4      	b.n	800c81a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800c830:	2114      	movs	r1, #20
 800c832:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c836:	f005 fdad 	bl	8012394 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800c83a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c83c:	4283      	cmp	r3, r0
 800c83e:	d001      	beq.n	800c844 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800c840:	2017      	movs	r0, #23
 800c842:	e7ea      	b.n	800c81a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800c844:	21e0      	movs	r1, #224	; 0xe0
 800c846:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800c84a:	f005 fda3 	bl	8012394 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800c84e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800c852:	4283      	cmp	r3, r0
 800c854:	d001      	beq.n	800c85a <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800c856:	2017      	movs	r0, #23
 800c858:	e7df      	b.n	800c81a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800c85a:	21bc      	movs	r1, #188	; 0xbc
 800c85c:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800c860:	f005 fd98 	bl	8012394 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800c864:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800c868:	4283      	cmp	r3, r0
 800c86a:	d001      	beq.n	800c870 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800c86c:	2017      	movs	r0, #23
 800c86e:	e7d4      	b.n	800c81a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800c870:	2110      	movs	r1, #16
 800c872:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800c876:	f005 fd8d 	bl	8012394 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800c87a:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800c87e:	4283      	cmp	r3, r0
 800c880:	d001      	beq.n	800c886 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800c882:	2017      	movs	r0, #23
 800c884:	e7c9      	b.n	800c81a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800c886:	2114      	movs	r1, #20
 800c888:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800c88c:	f005 fd82 	bl	8012394 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800c890:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800c894:	4283      	cmp	r3, r0
 800c896:	d001      	beq.n	800c89c <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800c898:	2017      	movs	r0, #23
 800c89a:	e7be      	b.n	800c81a <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800c89c:	4625      	mov	r5, r4
 800c89e:	4c12      	ldr	r4, [pc, #72]	; (800c8e8 <RestoreNvmData+0xdc>)
 800c8a0:	f240 528c 	movw	r2, #1420	; 0x58c
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	f005 fd53 	bl	8012352 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800c8ac:	f240 528c 	movw	r2, #1420	; 0x58c
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	f005 fd65 	bl	8012382 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800c8b8:	4b09      	ldr	r3, [pc, #36]	; (800c8e0 <RestoreNvmData+0xd4>)
 800c8ba:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800c8be:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800c8c2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c8c4:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c8c8:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800c8cc:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c8d6:	2202      	movs	r2, #2
 800c8d8:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 800c8dc:	2000      	movs	r0, #0
 800c8de:	e79c      	b.n	800c81a <RestoreNvmData+0xe>
 800c8e0:	2000349c 	.word	0x2000349c
 800c8e4:	2000858c 	.word	0x2000858c
 800c8e8:	20008000 	.word	0x20008000

0800c8ec <OnRadioRxTimeout>:
{
 800c8ec:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800c8ee:	4a09      	ldr	r2, [pc, #36]	; (800c914 <OnRadioRxTimeout+0x28>)
 800c8f0:	7813      	ldrb	r3, [r2, #0]
 800c8f2:	f043 0302 	orr.w	r3, r3, #2
 800c8f6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c8f8:	4b07      	ldr	r3, [pc, #28]	; (800c918 <OnRadioRxTimeout+0x2c>)
 800c8fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c8fe:	b113      	cbz	r3, 800c906 <OnRadioRxTimeout+0x1a>
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	b103      	cbz	r3, 800c906 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c904:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800c906:	4b05      	ldr	r3, [pc, #20]	; (800c91c <OnRadioRxTimeout+0x30>)
 800c908:	2201      	movs	r2, #1
 800c90a:	2100      	movs	r1, #0
 800c90c:	2002      	movs	r0, #2
 800c90e:	f007 fbc9 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c912:	bd08      	pop	{r3, pc}
 800c914:	20003498 	.word	0x20003498
 800c918:	2000349c 	.word	0x2000349c
 800c91c:	080153a0 	.word	0x080153a0

0800c920 <OnRadioTxTimeout>:
{
 800c920:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800c922:	4a09      	ldr	r2, [pc, #36]	; (800c948 <OnRadioTxTimeout+0x28>)
 800c924:	7813      	ldrb	r3, [r2, #0]
 800c926:	f043 0308 	orr.w	r3, r3, #8
 800c92a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c92c:	4b07      	ldr	r3, [pc, #28]	; (800c94c <OnRadioTxTimeout+0x2c>)
 800c92e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c932:	b113      	cbz	r3, 800c93a <OnRadioTxTimeout+0x1a>
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	b103      	cbz	r3, 800c93a <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c938:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800c93a:	4b05      	ldr	r3, [pc, #20]	; (800c950 <OnRadioTxTimeout+0x30>)
 800c93c:	2201      	movs	r2, #1
 800c93e:	2100      	movs	r1, #0
 800c940:	2002      	movs	r0, #2
 800c942:	f007 fbaf 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c946:	bd08      	pop	{r3, pc}
 800c948:	20003498 	.word	0x20003498
 800c94c:	2000349c 	.word	0x2000349c
 800c950:	080153b0 	.word	0x080153b0

0800c954 <OnRadioRxDone>:
{
 800c954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c958:	4680      	mov	r8, r0
 800c95a:	460f      	mov	r7, r1
 800c95c:	4616      	mov	r6, r2
 800c95e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800c960:	f007 fdd8 	bl	8014514 <UTIL_TIMER_GetCurrentTime>
 800c964:	4c0f      	ldr	r4, [pc, #60]	; (800c9a4 <OnRadioRxDone+0x50>)
 800c966:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800c968:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800c96c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800c96e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800c970:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800c972:	4b0d      	ldr	r3, [pc, #52]	; (800c9a8 <OnRadioRxDone+0x54>)
 800c974:	781a      	ldrb	r2, [r3, #0]
 800c976:	f042 0210 	orr.w	r2, r2, #16
 800c97a:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800c97c:	b2d2      	uxtb	r2, r2
 800c97e:	f042 0201 	orr.w	r2, r2, #1
 800c982:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c984:	4b09      	ldr	r3, [pc, #36]	; (800c9ac <OnRadioRxDone+0x58>)
 800c986:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c98a:	b113      	cbz	r3, 800c992 <OnRadioRxDone+0x3e>
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	b103      	cbz	r3, 800c992 <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c990:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800c992:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <OnRadioRxDone+0x5c>)
 800c994:	2201      	movs	r2, #1
 800c996:	2100      	movs	r1, #0
 800c998:	2002      	movs	r0, #2
 800c99a:	f007 fb83 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20003a4c 	.word	0x20003a4c
 800c9a8:	20003498 	.word	0x20003498
 800c9ac:	2000349c 	.word	0x2000349c
 800c9b0:	080153c0 	.word	0x080153c0

0800c9b4 <OnRadioTxDone>:
{
 800c9b4:	b530      	push	{r4, r5, lr}
 800c9b6:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800c9b8:	f007 fdac 	bl	8014514 <UTIL_TIMER_GetCurrentTime>
 800c9bc:	4b0f      	ldr	r3, [pc, #60]	; (800c9fc <OnRadioTxDone+0x48>)
 800c9be:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800c9c0:	4d0f      	ldr	r5, [pc, #60]	; (800ca00 <OnRadioTxDone+0x4c>)
 800c9c2:	466c      	mov	r4, sp
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f007 fcf7 	bl	80143b8 <SysTimeGet>
 800c9ca:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800c9ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c9d2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800c9d6:	4a0b      	ldr	r2, [pc, #44]	; (800ca04 <OnRadioTxDone+0x50>)
 800c9d8:	7813      	ldrb	r3, [r2, #0]
 800c9da:	f043 0320 	orr.w	r3, r3, #32
 800c9de:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c9e0:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800c9e4:	b113      	cbz	r3, 800c9ec <OnRadioTxDone+0x38>
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	b103      	cbz	r3, 800c9ec <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c9ea:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800c9ec:	4b06      	ldr	r3, [pc, #24]	; (800ca08 <OnRadioTxDone+0x54>)
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	2002      	movs	r0, #2
 800c9f4:	f007 fb56 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800c9f8:	b003      	add	sp, #12
 800c9fa:	bd30      	pop	{r4, r5, pc}
 800c9fc:	20003a5c 	.word	0x20003a5c
 800ca00:	2000349c 	.word	0x2000349c
 800ca04:	20003498 	.word	0x20003498
 800ca08:	080153d0 	.word	0x080153d0

0800ca0c <ResetMacParameters>:
{
 800ca0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca0e:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800ca10:	4c53      	ldr	r4, [pc, #332]	; (800cb60 <ResetMacParameters+0x154>)
 800ca12:	2600      	movs	r6, #0
 800ca14:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800ca18:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800ca1a:	4d52      	ldr	r5, [pc, #328]	; (800cb64 <ResetMacParameters+0x158>)
 800ca1c:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 800ca20:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 800ca24:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 800ca28:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800ca2c:	2701      	movs	r7, #1
 800ca2e:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ca32:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800ca36:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ca3a:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800ca3e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800ca42:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800ca46:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ca4a:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800ca4e:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800ca52:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca56:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ca5a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800ca5e:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800ca62:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca66:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800ca6a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800ca6e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800ca72:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800ca76:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800ca7a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800ca7e:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ca80:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800ca84:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800ca86:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 800ca8a:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ca8e:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 800ca92:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800ca96:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800ca9a:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800ca9e:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800caa0:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800caa4:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800caa6:	4b30      	ldr	r3, [pc, #192]	; (800cb68 <ResetMacParameters+0x15c>)
 800caa8:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800caaa:	a901      	add	r1, sp, #4
 800caac:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800cab0:	f002 fbe2 	bl	800f278 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800cab4:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800cab8:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800cabc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cabe:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cac2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800cac6:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800caca:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800cace:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800cad2:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800cad6:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800cada:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800cade:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800cae2:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 800cae6:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 800caea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800caee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caf0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800caf4:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800caf8:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cafc:	2302      	movs	r3, #2
 800cafe:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800cb02:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800cb04:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800cb06:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800cb0a:	b11b      	cbz	r3, 800cb14 <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800cb0c:	685a      	ldr	r2, [r3, #4]
 800cb0e:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800cb14:	4b13      	ldr	r3, [pc, #76]	; (800cb64 <ResetMacParameters+0x158>)
 800cb16:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 800cb1a:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800cb1c:	f203 4224 	addw	r2, r3, #1060	; 0x424
 800cb20:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800cb22:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 800cb26:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800cb28:	f203 4395 	addw	r3, r3, #1173	; 0x495
 800cb2c:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800cb2e:	4a0c      	ldr	r2, [pc, #48]	; (800cb60 <ResetMacParameters+0x154>)
 800cb30:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800cb34:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800cb36:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800cb3a:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800cb3c:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800cb40:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800cb42:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800cb46:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800cb48:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 800cb4c:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800cb4e:	f202 5274 	addw	r2, r2, #1396	; 0x574
 800cb52:	a90e      	add	r1, sp, #56	; 0x38
 800cb54:	a805      	add	r0, sp, #20
 800cb56:	f001 fb7d 	bl	800e254 <LoRaMacClassBInit>
}
 800cb5a:	b011      	add	sp, #68	; 0x44
 800cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	20008000 	.word	0x20008000
 800cb64:	2000349c 	.word	0x2000349c
 800cb68:	200039bc 	.word	0x200039bc

0800cb6c <SwitchClass>:
{
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800cb70:	4b3e      	ldr	r3, [pc, #248]	; (800cc6c <SwitchClass+0x100>)
 800cb72:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800cb76:	2d01      	cmp	r5, #1
 800cb78:	d065      	beq.n	800cc46 <SwitchClass+0xda>
 800cb7a:	2d02      	cmp	r5, #2
 800cb7c:	d06b      	beq.n	800cc56 <SwitchClass+0xea>
 800cb7e:	b10d      	cbz	r5, 800cb84 <SwitchClass+0x18>
 800cb80:	2003      	movs	r0, #3
}
 800cb82:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800cb84:	b930      	cbnz	r0, 800cb94 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800cb86:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800cb8a:	3364      	adds	r3, #100	; 0x64
 800cb8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cb90:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800cb94:	2c01      	cmp	r4, #1
 800cb96:	d022      	beq.n	800cbde <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cb98:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800cb9a:	2c02      	cmp	r4, #2
 800cb9c:	d1f1      	bne.n	800cb82 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800cb9e:	4b33      	ldr	r3, [pc, #204]	; (800cc6c <SwitchClass+0x100>)
 800cba0:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800cba4:	4e32      	ldr	r6, [pc, #200]	; (800cc70 <SwitchClass+0x104>)
 800cba6:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800cbaa:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800cbae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cbb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbb4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800cbb8:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	dd13      	ble.n	800cbf0 <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 800cbc8:	4b29      	ldr	r3, [pc, #164]	; (800cc70 <SwitchClass+0x104>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 800cbd0:	4b28      	ldr	r3, [pc, #160]	; (800cc74 <SwitchClass+0x108>)
 800cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd4:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800cbd6:	f7ff fd05 	bl	800c5e4 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800cbda:	4628      	mov	r0, r5
 800cbdc:	e7d1      	b.n	800cb82 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f001 fb4e 	bl	800e280 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d1d8      	bne.n	800cb9a <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800cbe8:	4b20      	ldr	r3, [pc, #128]	; (800cc6c <SwitchClass+0x100>)
 800cbea:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800cbee:	e7d4      	b.n	800cb9a <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	4a1e      	ldr	r2, [pc, #120]	; (800cc6c <SwitchClass+0x100>)
 800cbf4:	212c      	movs	r1, #44	; 0x2c
 800cbf6:	fb01 2203 	mla	r2, r1, r3, r2
 800cbfa:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800cbfe:	b912      	cbnz	r2, 800cc06 <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cc00:	3301      	adds	r3, #1
 800cc02:	b25b      	sxtb	r3, r3
 800cc04:	e7de      	b.n	800cbc4 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800cc06:	4a19      	ldr	r2, [pc, #100]	; (800cc6c <SwitchClass+0x100>)
 800cc08:	fb01 2000 	mla	r0, r1, r0, r2
 800cc0c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800cc10:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800cc12:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800cc16:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800cc1a:	4b15      	ldr	r3, [pc, #84]	; (800cc70 <SwitchClass+0x104>)
 800cc1c:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800cc20:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800cc24:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cc28:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800cc2c:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800cc30:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800cc34:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800cc38:	2203      	movs	r2, #3
 800cc3a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800cc44:	e7c0      	b.n	800cbc8 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800cc46:	f001 fb1b 	bl	800e280 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d199      	bne.n	800cb82 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800cc4e:	4b07      	ldr	r3, [pc, #28]	; (800cc6c <SwitchClass+0x100>)
 800cc50:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800cc54:	e795      	b.n	800cb82 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800cc56:	b938      	cbnz	r0, 800cc68 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800cc58:	4b04      	ldr	r3, [pc, #16]	; (800cc6c <SwitchClass+0x100>)
 800cc5a:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800cc5e:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <SwitchClass+0x108>)
 800cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc62:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800cc64:	4620      	mov	r0, r4
 800cc66:	e78c      	b.n	800cb82 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800cc68:	2003      	movs	r0, #3
 800cc6a:	e78a      	b.n	800cb82 <SwitchClass+0x16>
 800cc6c:	20008000 	.word	0x20008000
 800cc70:	2000349c 	.word	0x2000349c
 800cc74:	08015a90 	.word	0x08015a90

0800cc78 <SendReJoinReq>:
{
 800cc78:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800cc7a:	28ff      	cmp	r0, #255	; 0xff
 800cc7c:	d003      	beq.n	800cc86 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800cc7e:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800cc80:	f7ff fb62 	bl	800c348 <ScheduleTx>
}
 800cc84:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800cc86:	2000      	movs	r0, #0
 800cc88:	f7ff ff70 	bl	800cb6c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800cc8c:	4d0e      	ldr	r5, [pc, #56]	; (800ccc8 <SendReJoinReq+0x50>)
 800cc8e:	2400      	movs	r4, #0
 800cc90:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800cc94:	1cab      	adds	r3, r5, #2
 800cc96:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800cc9a:	23ff      	movs	r3, #255	; 0xff
 800cc9c:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800cca0:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800cca4:	f005 fb24 	bl	80122f0 <SecureElementGetJoinEui>
 800cca8:	4601      	mov	r1, r0
 800ccaa:	2208      	movs	r2, #8
 800ccac:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800ccb0:	f005 fb4f 	bl	8012352 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800ccb4:	f005 fb06 	bl	80122c4 <SecureElementGetDevEui>
 800ccb8:	4601      	mov	r1, r0
 800ccba:	2208      	movs	r2, #8
 800ccbc:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800ccc0:	f005 fb47 	bl	8012352 <memcpy1>
            allowDelayedTx = false;
 800ccc4:	4620      	mov	r0, r4
            break;
 800ccc6:	e7db      	b.n	800cc80 <SendReJoinReq+0x8>
 800ccc8:	2000349c 	.word	0x2000349c

0800cccc <PrepareFrame>:
{
 800cccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccd0:	b083      	sub	sp, #12
 800ccd2:	4605      	mov	r5, r0
 800ccd4:	460e      	mov	r6, r1
 800ccd6:	4617      	mov	r7, r2
 800ccd8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800ccdc:	4959      	ldr	r1, [pc, #356]	; (800ce44 <PrepareFrame+0x178>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800cce2:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 800cce6:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800cce8:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800ccea:	4698      	mov	r8, r3
 800ccec:	b1cb      	cbz	r3, 800cd22 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800ccee:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800ce44 <PrepareFrame+0x178>
 800ccf2:	4622      	mov	r2, r4
 800ccf4:	4641      	mov	r1, r8
 800ccf6:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800ccfa:	f005 fb2a 	bl	8012352 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800ccfe:	b2e0      	uxtb	r0, r4
 800cd00:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800cd04:	782b      	ldrb	r3, [r5, #0]
 800cd06:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800cd0a:	782b      	ldrb	r3, [r5, #0]
 800cd0c:	095b      	lsrs	r3, r3, #5
 800cd0e:	2b04      	cmp	r3, #4
 800cd10:	d009      	beq.n	800cd26 <PrepareFrame+0x5a>
 800cd12:	2b07      	cmp	r3, #7
 800cd14:	d079      	beq.n	800ce0a <PrepareFrame+0x13e>
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d009      	beq.n	800cd2e <PrepareFrame+0x62>
 800cd1a:	2002      	movs	r0, #2
}
 800cd1c:	b003      	add	sp, #12
 800cd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800cd22:	4614      	mov	r4, r2
 800cd24:	e7e3      	b.n	800ccee <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800cd26:	4b47      	ldr	r3, [pc, #284]	; (800ce44 <PrepareFrame+0x178>)
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800cd2e:	4b45      	ldr	r3, [pc, #276]	; (800ce44 <PrepareFrame+0x178>)
 800cd30:	2204      	movs	r2, #4
 800cd32:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800cd36:	1c9a      	adds	r2, r3, #2
 800cd38:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800cd3c:	22ff      	movs	r2, #255	; 0xff
 800cd3e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800cd42:	782a      	ldrb	r2, [r5, #0]
 800cd44:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800cd48:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800cd4c:	4a3e      	ldr	r2, [pc, #248]	; (800ce48 <PrepareFrame+0x17c>)
 800cd4e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800cd52:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800cd56:	7832      	ldrb	r2, [r6, #0]
 800cd58:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800cd5c:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800cd60:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800cd64:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800cd68:	a801      	add	r0, sp, #4
 800cd6a:	f001 ff09 	bl	800eb80 <LoRaMacCryptoGetFCntUp>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d15c      	bne.n	800ce2c <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800cd72:	9a01      	ldr	r2, [sp, #4]
 800cd74:	4b33      	ldr	r3, [pc, #204]	; (800ce44 <PrepareFrame+0x178>)
 800cd76:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 800cd80:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800cd84:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800cd88:	4668      	mov	r0, sp
 800cd8a:	f001 fb93 	bl	800e4b4 <LoRaMacCommandsGetSizeSerializedCmds>
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d14e      	bne.n	800ce30 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800cd92:	9b00      	ldr	r3, [sp, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d0c1      	beq.n	800cd1c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800cd98:	4b2b      	ldr	r3, [pc, #172]	; (800ce48 <PrepareFrame+0x17c>)
 800cd9a:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800cd9e:	f7fe f905 	bl	800afac <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800cda2:	4b28      	ldr	r3, [pc, #160]	; (800ce44 <PrepareFrame+0x178>)
 800cda4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800cda8:	b113      	cbz	r3, 800cdb0 <PrepareFrame+0xe4>
 800cdaa:	9a00      	ldr	r2, [sp, #0]
 800cdac:	2a0f      	cmp	r2, #15
 800cdae:	d915      	bls.n	800cddc <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800cdb0:	b113      	cbz	r3, 800cdb8 <PrepareFrame+0xec>
 800cdb2:	9b00      	ldr	r3, [sp, #0]
 800cdb4:	2b0f      	cmp	r3, #15
 800cdb6:	d821      	bhi.n	800cdfc <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800cdb8:	4a24      	ldr	r2, [pc, #144]	; (800ce4c <PrepareFrame+0x180>)
 800cdba:	4669      	mov	r1, sp
 800cdbc:	f001 fb86 	bl	800e4cc <LoRaMacCommandsSerializeCmds>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d13b      	bne.n	800ce3c <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800cdc4:	4b1f      	ldr	r3, [pc, #124]	; (800ce44 <PrepareFrame+0x178>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800cdcc:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 800cdd0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800cdd4:	9a00      	ldr	r2, [sp, #0]
 800cdd6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800cdda:	e79f      	b.n	800cd1c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800cddc:	4a1c      	ldr	r2, [pc, #112]	; (800ce50 <PrepareFrame+0x184>)
 800cdde:	4669      	mov	r1, sp
 800cde0:	200f      	movs	r0, #15
 800cde2:	f001 fb73 	bl	800e4cc <LoRaMacCommandsSerializeCmds>
 800cde6:	bb28      	cbnz	r0, 800ce34 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800cde8:	7833      	ldrb	r3, [r6, #0]
 800cdea:	9a00      	ldr	r2, [sp, #0]
 800cdec:	f362 0303 	bfi	r3, r2, #0, #4
 800cdf0:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	4b13      	ldr	r3, [pc, #76]	; (800ce44 <PrepareFrame+0x178>)
 800cdf6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800cdfa:	e78f      	b.n	800cd1c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800cdfc:	4a13      	ldr	r2, [pc, #76]	; (800ce4c <PrepareFrame+0x180>)
 800cdfe:	4669      	mov	r1, sp
 800ce00:	f001 fb64 	bl	800e4cc <LoRaMacCommandsSerializeCmds>
 800ce04:	b1c0      	cbz	r0, 800ce38 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ce06:	2013      	movs	r0, #19
 800ce08:	e788      	b.n	800cd1c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800ce0a:	f1b8 0f00 	cmp.w	r8, #0
 800ce0e:	d017      	beq.n	800ce40 <PrepareFrame+0x174>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	d083      	beq.n	800cd1c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800ce14:	4c0b      	ldr	r4, [pc, #44]	; (800ce44 <PrepareFrame+0x178>)
 800ce16:	b282      	uxth	r2, r0
 800ce18:	4641      	mov	r1, r8
 800ce1a:	1ce0      	adds	r0, r4, #3
 800ce1c:	f005 fa99 	bl	8012352 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800ce20:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800ce24:	3301      	adds	r3, #1
 800ce26:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800ce28:	2000      	movs	r0, #0
 800ce2a:	e777      	b.n	800cd1c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ce2c:	2012      	movs	r0, #18
 800ce2e:	e775      	b.n	800cd1c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ce30:	2013      	movs	r0, #19
 800ce32:	e773      	b.n	800cd1c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ce34:	2013      	movs	r0, #19
 800ce36:	e771      	b.n	800cd1c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800ce38:	200a      	movs	r0, #10
 800ce3a:	e76f      	b.n	800cd1c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ce3c:	2013      	movs	r0, #19
 800ce3e:	e76d      	b.n	800cd1c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800ce40:	2000      	movs	r0, #0
 800ce42:	e76b      	b.n	800cd1c <PrepareFrame+0x50>
 800ce44:	2000349c 	.word	0x2000349c
 800ce48:	20008000 	.word	0x20008000
 800ce4c:	2000393c 	.word	0x2000393c
 800ce50:	200035b4 	.word	0x200035b4

0800ce54 <Send>:
{
 800ce54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce58:	b08a      	sub	sp, #40	; 0x28
 800ce5a:	4617      	mov	r7, r2
 800ce5c:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ce5e:	4c45      	ldr	r4, [pc, #276]	; (800cf74 <Send+0x120>)
 800ce60:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ce64:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ce68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ce6a:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ce6c:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d07c      	beq.n	800cf6e <Send+0x11a>
 800ce74:	4605      	mov	r5, r0
 800ce76:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800ce78:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800ce7c:	b90b      	cbnz	r3, 800ce82 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ce7e:	2100      	movs	r1, #0
 800ce80:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800ce88:	483a      	ldr	r0, [pc, #232]	; (800cf74 <Send+0x120>)
 800ce8a:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800ce8e:	f361 13c7 	bfi	r3, r1, #7, #1
 800ce92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ce96:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d054      	beq.n	800cf48 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800ce9e:	4b35      	ldr	r3, [pc, #212]	; (800cf74 <Send+0x120>)
 800cea0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800cea4:	b12b      	cbz	r3, 800ceb2 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800cea6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ceaa:	f043 0320 	orr.w	r3, r3, #32
 800ceae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800ceb8:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800cebc:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800cebe:	4b2e      	ldr	r3, [pc, #184]	; (800cf78 <Send+0x124>)
 800cec0:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800cec4:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800cec8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800cecc:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ced0:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ced4:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ced8:	4926      	ldr	r1, [pc, #152]	; (800cf74 <Send+0x120>)
 800ceda:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 800cede:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800cee2:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800cee6:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800ceea:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800ceee:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800cef2:	ab08      	add	r3, sp, #32
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	f101 0360 	add.w	r3, r1, #96	; 0x60
 800cefa:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800cefe:	3139      	adds	r1, #57	; 0x39
 800cf00:	a803      	add	r0, sp, #12
 800cf02:	f001 f92d 	bl	800e160 <LoRaMacAdrCalcNext>
 800cf06:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800cf0a:	f360 1386 	bfi	r3, r0, #6, #1
 800cf0e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800cf12:	f8cd 8000 	str.w	r8, [sp]
 800cf16:	463b      	mov	r3, r7
 800cf18:	4632      	mov	r2, r6
 800cf1a:	a909      	add	r1, sp, #36	; 0x24
 800cf1c:	4628      	mov	r0, r5
 800cf1e:	f7ff fed5 	bl	800cccc <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800cf22:	4604      	mov	r4, r0
 800cf24:	b108      	cbz	r0, 800cf2a <Send+0xd6>
 800cf26:	280a      	cmp	r0, #10
 800cf28:	d104      	bne.n	800cf34 <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800cf2a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800cf2e:	f7ff fa0b 	bl	800c348 <ScheduleTx>
 800cf32:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800cf34:	b17c      	cbz	r4, 800cf56 <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800cf36:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <Send+0x120>)
 800cf38:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800cf3c:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800cf40:	4620      	mov	r0, r4
 800cf42:	b00a      	add	sp, #40	; 0x28
 800cf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800cf48:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800cf4c:	f043 0310 	orr.w	r3, r3, #16
 800cf50:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800cf54:	e7a3      	b.n	800ce9e <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800cf56:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <Send+0x120>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800cf5e:	9a08      	ldr	r2, [sp, #32]
 800cf60:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800cf62:	f001 fa7b 	bl	800e45c <LoRaMacCommandsRemoveNoneStickyCmds>
 800cf66:	2800      	cmp	r0, #0
 800cf68:	d0ea      	beq.n	800cf40 <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cf6a:	2413      	movs	r4, #19
 800cf6c:	e7e8      	b.n	800cf40 <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800cf6e:	2407      	movs	r4, #7
 800cf70:	e7e6      	b.n	800cf40 <Send+0xec>
 800cf72:	bf00      	nop
 800cf74:	20008000 	.word	0x20008000
 800cf78:	2000349c 	.word	0x2000349c

0800cf7c <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800cf7c:	4b0a      	ldr	r3, [pc, #40]	; (800cfa8 <LoRaMacIsBusy+0x2c>)
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f013 0f01 	tst.w	r3, #1
 800cf84:	d10a      	bne.n	800cf9c <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800cf86:	4b09      	ldr	r3, [pc, #36]	; (800cfac <LoRaMacIsBusy+0x30>)
 800cf88:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800cf8c:	b943      	cbnz	r3, 800cfa0 <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800cf8e:	4b07      	ldr	r3, [pc, #28]	; (800cfac <LoRaMacIsBusy+0x30>)
 800cf90:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d005      	beq.n	800cfa4 <LoRaMacIsBusy+0x28>
    return true;
 800cf98:	2001      	movs	r0, #1
 800cf9a:	4770      	bx	lr
        return true;
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	4770      	bx	lr
    return true;
 800cfa0:	2001      	movs	r0, #1
 800cfa2:	4770      	bx	lr
        return false;
 800cfa4:	2000      	movs	r0, #0
}
 800cfa6:	4770      	bx	lr
 800cfa8:	20003498 	.word	0x20003498
 800cfac:	2000349c 	.word	0x2000349c

0800cfb0 <LoRaMacProcess>:
{
 800cfb0:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800cfb2:	f7ff f81d 	bl	800bff0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800cfb6:	f001 f974 	bl	800e2a2 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800cfba:	4b20      	ldr	r3, [pc, #128]	; (800d03c <LoRaMacProcess+0x8c>)
 800cfbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800cfc0:	f013 0f20 	tst.w	r3, #32
 800cfc4:	d10d      	bne.n	800cfe2 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800cfc6:	f7fd fed3 	bl	800ad70 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800cfca:	4b1c      	ldr	r3, [pc, #112]	; (800d03c <LoRaMacProcess+0x8c>)
 800cfcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d024      	beq.n	800d01e <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800cfd4:	4b19      	ldr	r3, [pc, #100]	; (800d03c <LoRaMacProcess+0x8c>)
 800cfd6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800cfda:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cfde:	d121      	bne.n	800d024 <LoRaMacProcess+0x74>
}
 800cfe0:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	f7fd febe 	bl	800ad64 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800cfe8:	f7fd fefa 	bl	800ade0 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800cfec:	f7fd ffd2 	bl	800af94 <IsRequestPending>
 800cff0:	b110      	cbz	r0, 800cff8 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800cff2:	f7fe f8b9 	bl	800b168 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800cff6:	b918      	cbnz	r0, 800d000 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800cff8:	f7ff f83c 	bl	800c074 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800cffc:	f7ff fa5a 	bl	800c4b4 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800d000:	f7ff fa94 	bl	800c52c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800d004:	f7ff fadc 	bl	800c5c0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d008:	2001      	movs	r0, #1
 800d00a:	f7fd feab 	bl	800ad64 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800d00e:	4a0b      	ldr	r2, [pc, #44]	; (800d03c <LoRaMacProcess+0x8c>)
 800d010:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800d014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d018:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800d01c:	e7d3      	b.n	800cfc6 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800d01e:	f7ff fae1 	bl	800c5e4 <OpenContinuousRxCWindow>
 800d022:	e7d7      	b.n	800cfd4 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800d024:	4b05      	ldr	r3, [pc, #20]	; (800d03c <LoRaMacProcess+0x8c>)
 800d026:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800d02a:	f36f 1286 	bfc	r2, #6, #1
 800d02e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800d032:	4803      	ldr	r0, [pc, #12]	; (800d040 <LoRaMacProcess+0x90>)
 800d034:	f7ff fb86 	bl	800c744 <LoRaMacHandleNvm>
}
 800d038:	e7d2      	b.n	800cfe0 <LoRaMacProcess+0x30>
 800d03a:	bf00      	nop
 800d03c:	2000349c 	.word	0x2000349c
 800d040:	20008000 	.word	0x20008000

0800d044 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800d044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d048:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800d04a:	2800      	cmp	r0, #0
 800d04c:	f000 81a4 	beq.w	800d398 <LoRaMacInitialization+0x354>
 800d050:	460f      	mov	r7, r1
 800d052:	4691      	mov	r9, r2
 800d054:	4680      	mov	r8, r0
 800d056:	2900      	cmp	r1, #0
 800d058:	f000 81a0 	beq.w	800d39c <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d05c:	6803      	ldr	r3, [r0, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	f000 819e 	beq.w	800d3a0 <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800d064:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800d066:	2b00      	cmp	r3, #0
 800d068:	f000 819c 	beq.w	800d3a4 <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d06c:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f000 819a 	beq.w	800d3a8 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800d074:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800d076:	2b00      	cmp	r3, #0
 800d078:	f000 8198 	beq.w	800d3ac <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800d07c:	4610      	mov	r0, r2
 800d07e:	f002 f8cb 	bl	800f218 <RegionIsActive>
 800d082:	2800      	cmp	r0, #0
 800d084:	f000 8194 	beq.w	800d3b0 <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800d088:	4640      	mov	r0, r8
 800d08a:	f001 fac9 	bl	800e620 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800d08e:	4ccc      	ldr	r4, [pc, #816]	; (800d3c0 <LoRaMacInitialization+0x37c>)
 800d090:	f240 528c 	movw	r2, #1420	; 0x58c
 800d094:	2100      	movs	r1, #0
 800d096:	4620      	mov	r0, r4
 800d098:	f005 f973 	bl	8012382 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800d09c:	4dc9      	ldr	r5, [pc, #804]	; (800d3c4 <LoRaMacInitialization+0x380>)
 800d09e:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	4628      	mov	r0, r5
 800d0a6:	f005 f96c 	bl	8012382 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800d0aa:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800d0ae:	2600      	movs	r6, #0
 800d0b0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800d0b4:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800d0b8:	4bc3      	ldr	r3, [pc, #780]	; (800d3c8 <LoRaMacInitialization+0x384>)
 800d0ba:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800d0be:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d0c2:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800d0c6:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d0c8:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800d0cc:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800d0ce:	4bbf      	ldr	r3, [pc, #764]	; (800d3cc <LoRaMacInitialization+0x388>)
 800d0d0:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d0d2:	a905      	add	r1, sp, #20
 800d0d4:	4648      	mov	r0, r9
 800d0d6:	f002 f8cf 	bl	800f278 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d0da:	230f      	movs	r3, #15
 800d0dc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d0e0:	a90a      	add	r1, sp, #40	; 0x28
 800d0e2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d0e6:	f002 f8a1 	bl	800f22c <RegionGetPhyParam>
 800d0ea:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800d0ec:	1b80      	subs	r0, r0, r6
 800d0ee:	bf18      	it	ne
 800d0f0:	2001      	movne	r0, #1
 800d0f2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800d0f6:	f04f 0a0a 	mov.w	sl, #10
 800d0fa:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d0fe:	a90a      	add	r1, sp, #40	; 0x28
 800d100:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d104:	f002 f892 	bl	800f22c <RegionGetPhyParam>
 800d108:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800d10a:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800d10e:	f04f 0906 	mov.w	r9, #6
 800d112:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d116:	a90a      	add	r1, sp, #40	; 0x28
 800d118:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d11c:	f002 f886 	bl	800f22c <RegionGetPhyParam>
 800d120:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800d122:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800d126:	2310      	movs	r3, #16
 800d128:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d12c:	a90a      	add	r1, sp, #40	; 0x28
 800d12e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d132:	f002 f87b 	bl	800f22c <RegionGetPhyParam>
 800d136:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800d138:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800d13c:	2311      	movs	r3, #17
 800d13e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d142:	a90a      	add	r1, sp, #40	; 0x28
 800d144:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d148:	f002 f870 	bl	800f22c <RegionGetPhyParam>
 800d14c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800d14e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800d152:	2312      	movs	r3, #18
 800d154:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d158:	a90a      	add	r1, sp, #40	; 0x28
 800d15a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d15e:	f002 f865 	bl	800f22c <RegionGetPhyParam>
 800d162:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800d164:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800d168:	2313      	movs	r3, #19
 800d16a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d16e:	a90a      	add	r1, sp, #40	; 0x28
 800d170:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d174:	f002 f85a 	bl	800f22c <RegionGetPhyParam>
 800d178:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800d17a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800d17e:	2314      	movs	r3, #20
 800d180:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d184:	a90a      	add	r1, sp, #40	; 0x28
 800d186:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d18a:	f002 f84f 	bl	800f22c <RegionGetPhyParam>
 800d18e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800d190:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800d194:	2316      	movs	r3, #22
 800d196:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d19a:	a90a      	add	r1, sp, #40	; 0x28
 800d19c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d1a0:	f002 f844 	bl	800f22c <RegionGetPhyParam>
 800d1a4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800d1a6:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800d1aa:	2317      	movs	r3, #23
 800d1ac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d1b0:	a90a      	add	r1, sp, #40	; 0x28
 800d1b2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d1b6:	f002 f839 	bl	800f22c <RegionGetPhyParam>
 800d1ba:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800d1bc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800d1c0:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800d1c4:	2318      	movs	r3, #24
 800d1c6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d1ca:	a90a      	add	r1, sp, #40	; 0x28
 800d1cc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d1d0:	f002 f82c 	bl	800f22c <RegionGetPhyParam>
 800d1d4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800d1d6:	b2c0      	uxtb	r0, r0
 800d1d8:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800d1dc:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800d1e0:	231d      	movs	r3, #29
 800d1e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d1e6:	a90a      	add	r1, sp, #40	; 0x28
 800d1e8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d1ec:	f002 f81e 	bl	800f22c <RegionGetPhyParam>
 800d1f0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800d1f2:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800d1f6:	231e      	movs	r3, #30
 800d1f8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d1fc:	a90a      	add	r1, sp, #40	; 0x28
 800d1fe:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d202:	f002 f813 	bl	800f22c <RegionGetPhyParam>
 800d206:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800d208:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800d20c:	231f      	movs	r3, #31
 800d20e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d212:	a90a      	add	r1, sp, #40	; 0x28
 800d214:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d218:	f002 f808 	bl	800f22c <RegionGetPhyParam>
 800d21c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800d21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d220:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800d224:	2320      	movs	r3, #32
 800d226:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d22a:	a90a      	add	r1, sp, #40	; 0x28
 800d22c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d230:	f001 fffc 	bl	800f22c <RegionGetPhyParam>
 800d234:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800d236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d238:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800d23c:	230b      	movs	r3, #11
 800d23e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d242:	a90a      	add	r1, sp, #40	; 0x28
 800d244:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d248:	f001 fff0 	bl	800f22c <RegionGetPhyParam>
 800d24c:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800d24e:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800d252:	230c      	movs	r3, #12
 800d254:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d258:	a90a      	add	r1, sp, #40	; 0x28
 800d25a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d25e:	f001 ffe5 	bl	800f22c <RegionGetPhyParam>
 800d262:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800d264:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800d268:	f04f 0b01 	mov.w	fp, #1
 800d26c:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800d270:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800d274:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800d278:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800d27c:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800d280:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d284:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800d286:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d28a:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800d28c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800d290:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800d292:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800d296:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800d298:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800d29c:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800d29e:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800d2a2:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800d2a6:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800d2aa:	f7ff fbaf 	bl	800ca0c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800d2ae:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800d2b2:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800d2b6:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800d2ba:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800d2be:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800d2c0:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800d2c2:	9600      	str	r6, [sp, #0]
 800d2c4:	4b42      	ldr	r3, [pc, #264]	; (800d3d0 <LoRaMacInitialization+0x38c>)
 800d2c6:	4632      	mov	r2, r6
 800d2c8:	f04f 31ff 	mov.w	r1, #4294967295
 800d2cc:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800d2d0:	f007 f902 	bl	80144d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800d2d4:	9600      	str	r6, [sp, #0]
 800d2d6:	4b3f      	ldr	r3, [pc, #252]	; (800d3d4 <LoRaMacInitialization+0x390>)
 800d2d8:	4632      	mov	r2, r6
 800d2da:	f04f 31ff 	mov.w	r1, #4294967295
 800d2de:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800d2e2:	f007 f8f9 	bl	80144d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800d2e6:	9600      	str	r6, [sp, #0]
 800d2e8:	4b3b      	ldr	r3, [pc, #236]	; (800d3d8 <LoRaMacInitialization+0x394>)
 800d2ea:	4632      	mov	r2, r6
 800d2ec:	f04f 31ff 	mov.w	r1, #4294967295
 800d2f0:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800d2f4:	f007 f8f0 	bl	80144d8 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800d2f8:	9600      	str	r6, [sp, #0]
 800d2fa:	4b38      	ldr	r3, [pc, #224]	; (800d3dc <LoRaMacInitialization+0x398>)
 800d2fc:	4632      	mov	r2, r6
 800d2fe:	f04f 31ff 	mov.w	r1, #4294967295
 800d302:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800d306:	f007 f8e7 	bl	80144d8 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800d30a:	f10d 0808 	add.w	r8, sp, #8
 800d30e:	4640      	mov	r0, r8
 800d310:	f007 f874 	bl	80143fc <SysTimeGetMcuTime>
 800d314:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800d318:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d31c:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800d320:	4b2f      	ldr	r3, [pc, #188]	; (800d3e0 <LoRaMacInitialization+0x39c>)
 800d322:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800d324:	4b2f      	ldr	r3, [pc, #188]	; (800d3e4 <LoRaMacInitialization+0x3a0>)
 800d326:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800d32a:	4b2f      	ldr	r3, [pc, #188]	; (800d3e8 <LoRaMacInitialization+0x3a4>)
 800d32c:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800d330:	4b2e      	ldr	r3, [pc, #184]	; (800d3ec <LoRaMacInitialization+0x3a8>)
 800d332:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800d336:	4b2e      	ldr	r3, [pc, #184]	; (800d3f0 <LoRaMacInitialization+0x3ac>)
 800d338:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800d33c:	4b2d      	ldr	r3, [pc, #180]	; (800d3f4 <LoRaMacInitialization+0x3b0>)
 800d33e:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800d342:	4b2d      	ldr	r3, [pc, #180]	; (800d3f8 <LoRaMacInitialization+0x3b4>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800d34a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800d34c:	68b9      	ldr	r1, [r7, #8]
 800d34e:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800d352:	f004 fd59 	bl	8011e08 <SecureElementInit>
 800d356:	bb80      	cbnz	r0, 800d3ba <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800d358:	4620      	mov	r0, r4
 800d35a:	f001 fbf1 	bl	800eb40 <LoRaMacCryptoInit>
 800d35e:	2800      	cmp	r0, #0
 800d360:	d14c      	bne.n	800d3fc <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800d362:	f001 f823 	bl	800e3ac <LoRaMacCommandsInit>
 800d366:	2800      	cmp	r0, #0
 800d368:	d14a      	bne.n	800d400 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800d36a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800d36e:	f001 fc39 	bl	800ebe4 <LoRaMacCryptoSetMulticastReference>
 800d372:	4604      	mov	r4, r0
 800d374:	2800      	cmp	r0, #0
 800d376:	d145      	bne.n	800d404 <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800d378:	4d1f      	ldr	r5, [pc, #124]	; (800d3f8 <LoRaMacInitialization+0x3b4>)
 800d37a:	696b      	ldr	r3, [r5, #20]
 800d37c:	4798      	blx	r3
 800d37e:	f004 ffd5 	bl	801232c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800d382:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800d384:	4a0e      	ldr	r2, [pc, #56]	; (800d3c0 <LoRaMacInitialization+0x37c>)
 800d386:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800d38a:	4798      	blx	r3
    Radio.Sleep( );
 800d38c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800d38e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d390:	4658      	mov	r0, fp
 800d392:	f7fd fce7 	bl	800ad64 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800d396:	e00c      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d398:	2403      	movs	r4, #3
 800d39a:	e00a      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
 800d39c:	2403      	movs	r4, #3
 800d39e:	e008      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d3a0:	2403      	movs	r4, #3
 800d3a2:	e006      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
 800d3a4:	2403      	movs	r4, #3
 800d3a6:	e004      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
 800d3a8:	2403      	movs	r4, #3
 800d3aa:	e002      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
 800d3ac:	2403      	movs	r4, #3
 800d3ae:	e000      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800d3b0:	2409      	movs	r4, #9
}
 800d3b2:	4620      	mov	r0, r4
 800d3b4:	b00d      	add	sp, #52	; 0x34
 800d3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d3ba:	2411      	movs	r4, #17
 800d3bc:	e7f9      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
 800d3be:	bf00      	nop
 800d3c0:	20008000 	.word	0x20008000
 800d3c4:	2000349c 	.word	0x2000349c
 800d3c8:	01000400 	.word	0x01000400
 800d3cc:	200039bc 	.word	0x200039bc
 800d3d0:	0800c451 	.word	0x0800c451
 800d3d4:	0800c6f5 	.word	0x0800c6f5
 800d3d8:	0800c69d 	.word	0x0800c69d
 800d3dc:	0800b0fd 	.word	0x0800b0fd
 800d3e0:	20003498 	.word	0x20003498
 800d3e4:	0800c9b5 	.word	0x0800c9b5
 800d3e8:	0800c955 	.word	0x0800c955
 800d3ec:	0800ad19 	.word	0x0800ad19
 800d3f0:	0800c921 	.word	0x0800c921
 800d3f4:	0800c8ed 	.word	0x0800c8ed
 800d3f8:	08015a90 	.word	0x08015a90
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d3fc:	2411      	movs	r4, #17
 800d3fe:	e7d8      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d400:	2413      	movs	r4, #19
 800d402:	e7d6      	b.n	800d3b2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800d404:	2411      	movs	r4, #17
 800d406:	e7d4      	b.n	800d3b2 <LoRaMacInitialization+0x36e>

0800d408 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800d408:	2000      	movs	r0, #0
 800d40a:	4b02      	ldr	r3, [pc, #8]	; (800d414 <LoRaMacStart+0xc>)
 800d40c:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	2000349c 	.word	0x2000349c

0800d418 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800d418:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800d41a:	f7ff fdaf 	bl	800cf7c <LoRaMacIsBusy>
 800d41e:	b130      	cbz	r0, 800d42e <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800d420:	4b06      	ldr	r3, [pc, #24]	; (800d43c <LoRaMacStop+0x24>)
 800d422:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d426:	2b01      	cmp	r3, #1
 800d428:	d006      	beq.n	800d438 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800d42a:	2001      	movs	r0, #1
}
 800d42c:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800d42e:	4b03      	ldr	r3, [pc, #12]	; (800d43c <LoRaMacStop+0x24>)
 800d430:	2201      	movs	r2, #1
 800d432:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800d436:	e7f9      	b.n	800d42c <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800d438:	2000      	movs	r0, #0
 800d43a:	e7f7      	b.n	800d42c <LoRaMacStop+0x14>
 800d43c:	2000349c 	.word	0x2000349c

0800d440 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800d440:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800d442:	4c14      	ldr	r4, [pc, #80]	; (800d494 <LoRaMacHalt+0x54>)
 800d444:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800d448:	f007 f8a4 	bl	8014594 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800d44c:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800d450:	f007 f8a0 	bl	8014594 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d454:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800d458:	f007 f89c 	bl	8014594 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800d45c:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800d460:	f007 f898 	bl	8014594 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800d464:	f000 ff0a 	bl	800e27c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800d468:	4b0b      	ldr	r3, [pc, #44]	; (800d498 <LoRaMacHalt+0x58>)
 800d46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800d46e:	2500      	movs	r5, #0
 800d470:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800d474:	4e09      	ldr	r6, [pc, #36]	; (800d49c <LoRaMacHalt+0x5c>)
 800d476:	4630      	mov	r0, r6
 800d478:	f7ff f964 	bl	800c744 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800d47c:	f240 528c 	movw	r2, #1420	; 0x58c
 800d480:	4631      	mov	r1, r6
 800d482:	4807      	ldr	r0, [pc, #28]	; (800d4a0 <LoRaMacHalt+0x60>)
 800d484:	f004 ff65 	bl	8012352 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800d488:	2301      	movs	r3, #1
 800d48a:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800d48e:	4628      	mov	r0, r5
 800d490:	bd70      	pop	{r4, r5, r6, pc}
 800d492:	bf00      	nop
 800d494:	2000349c 	.word	0x2000349c
 800d498:	08015a90 	.word	0x08015a90
 800d49c:	20008000 	.word	0x20008000
 800d4a0:	2000858c 	.word	0x2000858c

0800d4a4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800d4a4:	b530      	push	{r4, r5, lr}
 800d4a6:	b08b      	sub	sp, #44	; 0x2c
 800d4a8:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d4aa:	4b32      	ldr	r3, [pc, #200]	; (800d574 <LoRaMacQueryTxPossible+0xd0>)
 800d4ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d4ae:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d4b0:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800d4b4:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d4b8:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800d4bc:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800d4c0:	4b2d      	ldr	r3, [pc, #180]	; (800d578 <LoRaMacQueryTxPossible+0xd4>)
 800d4c2:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800d4c6:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800d4ce:	2900      	cmp	r1, #0
 800d4d0:	d049      	beq.n	800d566 <LoRaMacQueryTxPossible+0xc2>
 800d4d2:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800d4d4:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800d4d8:	4b26      	ldr	r3, [pc, #152]	; (800d574 <LoRaMacQueryTxPossible+0xd0>)
 800d4da:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800d4de:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800d4e2:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800d4e4:	4924      	ldr	r1, [pc, #144]	; (800d578 <LoRaMacQueryTxPossible+0xd4>)
 800d4e6:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800d4ea:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800d4ee:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800d4f2:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d4f6:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800d4fa:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d4fe:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800d502:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800d506:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d50a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d50e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800d512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d516:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800d51a:	ab04      	add	r3, sp, #16
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	f10d 030d 	add.w	r3, sp, #13
 800d522:	f10d 020e 	add.w	r2, sp, #14
 800d526:	f10d 010f 	add.w	r1, sp, #15
 800d52a:	a805      	add	r0, sp, #20
 800d52c:	f000 fe18 	bl	800e160 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800d530:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800d534:	f7fd fd3a 	bl	800afac <GetMaxAppPayloadWithoutFOptsLength>
 800d538:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d53a:	a802      	add	r0, sp, #8
 800d53c:	f000 ffba 	bl	800e4b4 <LoRaMacCommandsGetSizeSerializedCmds>
 800d540:	b998      	cbnz	r0, 800d56a <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800d542:	9b02      	ldr	r3, [sp, #8]
 800d544:	2b0f      	cmp	r3, #15
 800d546:	d80a      	bhi.n	800d55e <LoRaMacQueryTxPossible+0xba>
 800d548:	786a      	ldrb	r2, [r5, #1]
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d807      	bhi.n	800d55e <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800d552:	9b02      	ldr	r3, [sp, #8]
 800d554:	441c      	add	r4, r3
 800d556:	42a2      	cmp	r2, r4
 800d558:	d309      	bcc.n	800d56e <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800d55a:	b00b      	add	sp, #44	; 0x2c
 800d55c:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800d55e:	2300      	movs	r3, #0
 800d560:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800d562:	2008      	movs	r0, #8
 800d564:	e7f9      	b.n	800d55a <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d566:	2003      	movs	r0, #3
 800d568:	e7f7      	b.n	800d55a <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d56a:	2013      	movs	r0, #19
 800d56c:	e7f5      	b.n	800d55a <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800d56e:	2008      	movs	r0, #8
 800d570:	e7f3      	b.n	800d55a <LoRaMacQueryTxPossible+0xb6>
 800d572:	bf00      	nop
 800d574:	20008000 	.word	0x20008000
 800d578:	2000349c 	.word	0x2000349c

0800d57c <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800d57c:	2800      	cmp	r0, #0
 800d57e:	f000 813d 	beq.w	800d7fc <LoRaMacMibGetRequestConfirm+0x280>
{
 800d582:	b510      	push	{r4, lr}
 800d584:	b084      	sub	sp, #16
 800d586:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800d588:	7800      	ldrb	r0, [r0, #0]
 800d58a:	2839      	cmp	r0, #57	; 0x39
 800d58c:	f200 8132 	bhi.w	800d7f4 <LoRaMacMibGetRequestConfirm+0x278>
 800d590:	e8df f010 	tbh	[pc, r0, lsl #1]
 800d594:	0040003a 	.word	0x0040003a
 800d598:	004b0046 	.word	0x004b0046
 800d59c:	00560050 	.word	0x00560050
 800d5a0:	0130005c 	.word	0x0130005c
 800d5a4:	01300130 	.word	0x01300130
 800d5a8:	01300130 	.word	0x01300130
 800d5ac:	01300130 	.word	0x01300130
 800d5b0:	00620130 	.word	0x00620130
 800d5b4:	006e0068 	.word	0x006e0068
 800d5b8:	0083007b 	.word	0x0083007b
 800d5bc:	0093008b 	.word	0x0093008b
 800d5c0:	009b00a8 	.word	0x009b00a8
 800d5c4:	00bb00b5 	.word	0x00bb00b5
 800d5c8:	00c500c0 	.word	0x00c500c0
 800d5cc:	00cf00ca 	.word	0x00cf00ca
 800d5d0:	00e500d4 	.word	0x00e500d4
 800d5d4:	00f700eb 	.word	0x00f700eb
 800d5d8:	00fd00f1 	.word	0x00fd00f1
 800d5dc:	01080102 	.word	0x01080102
 800d5e0:	010d0115 	.word	0x010d0115
 800d5e4:	01300111 	.word	0x01300111
 800d5e8:	0130011b 	.word	0x0130011b
 800d5ec:	01300130 	.word	0x01300130
 800d5f0:	01300130 	.word	0x01300130
 800d5f4:	01300130 	.word	0x01300130
 800d5f8:	01300130 	.word	0x01300130
 800d5fc:	01300130 	.word	0x01300130
 800d600:	01300130 	.word	0x01300130
 800d604:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800d608:	4b7d      	ldr	r3, [pc, #500]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d60a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d60e:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800d610:	b004      	add	sp, #16
 800d612:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d614:	4b7a      	ldr	r3, [pc, #488]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d616:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800d61a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d61c:	2000      	movs	r0, #0
            break;
 800d61e:	e7f7      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800d620:	f004 fe50 	bl	80122c4 <SecureElementGetDevEui>
 800d624:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d626:	2000      	movs	r0, #0
            break;
 800d628:	e7f2      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800d62a:	f004 fe61 	bl	80122f0 <SecureElementGetJoinEui>
 800d62e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d630:	2000      	movs	r0, #0
            break;
 800d632:	e7ed      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800d634:	4b72      	ldr	r3, [pc, #456]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d636:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800d63a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d63c:	2000      	movs	r0, #0
            break;
 800d63e:	e7e7      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800d640:	4b6f      	ldr	r3, [pc, #444]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d642:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800d646:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d648:	2000      	movs	r0, #0
            break;
 800d64a:	e7e1      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800d64c:	4b6c      	ldr	r3, [pc, #432]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d64e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800d652:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d654:	2000      	movs	r0, #0
            break;
 800d656:	e7db      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800d658:	4b69      	ldr	r3, [pc, #420]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d65a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800d65e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d660:	2000      	movs	r0, #0
            break;
 800d662:	e7d5      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d664:	4b66      	ldr	r3, [pc, #408]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d666:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d66a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d66c:	2000      	movs	r0, #0
            break;
 800d66e:	e7cf      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800d670:	231c      	movs	r3, #28
 800d672:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d676:	a902      	add	r1, sp, #8
 800d678:	4b61      	ldr	r3, [pc, #388]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d67a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d67e:	f001 fdd5 	bl	800f22c <RegionGetPhyParam>
 800d682:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800d684:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d686:	2000      	movs	r0, #0
            break;
 800d688:	e7c2      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800d68a:	3404      	adds	r4, #4
 800d68c:	4b5d      	ldr	r3, [pc, #372]	; (800d804 <LoRaMacMibGetRequestConfirm+0x288>)
 800d68e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d692:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d696:	2000      	movs	r0, #0
            break;
 800d698:	e7ba      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800d69a:	3404      	adds	r4, #4
 800d69c:	4b5a      	ldr	r3, [pc, #360]	; (800d808 <LoRaMacMibGetRequestConfirm+0x28c>)
 800d69e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d6a2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d6a6:	2000      	movs	r0, #0
            break;
 800d6a8:	e7b2      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800d6aa:	3404      	adds	r4, #4
 800d6ac:	4b57      	ldr	r3, [pc, #348]	; (800d80c <LoRaMacMibGetRequestConfirm+0x290>)
 800d6ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d6b2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d6b6:	2000      	movs	r0, #0
            break;
 800d6b8:	e7aa      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800d6ba:	3404      	adds	r4, #4
 800d6bc:	4b54      	ldr	r3, [pc, #336]	; (800d810 <LoRaMacMibGetRequestConfirm+0x294>)
 800d6be:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d6c2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d6c6:	2000      	movs	r0, #0
            break;
 800d6c8:	e7a2      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800d6ca:	231a      	movs	r3, #26
 800d6cc:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d6d0:	a902      	add	r1, sp, #8
 800d6d2:	4b4b      	ldr	r3, [pc, #300]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d6d4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d6d8:	f001 fda8 	bl	800f22c <RegionGetPhyParam>
 800d6dc:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800d6de:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d6e0:	2000      	movs	r0, #0
            break;
 800d6e2:	e795      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800d6e4:	2319      	movs	r3, #25
 800d6e6:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d6ea:	a902      	add	r1, sp, #8
 800d6ec:	4b44      	ldr	r3, [pc, #272]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d6ee:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d6f2:	f001 fd9b 	bl	800f22c <RegionGetPhyParam>
 800d6f6:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800d6f8:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d6fa:	2000      	movs	r0, #0
            break;
 800d6fc:	e788      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800d6fe:	4b40      	ldr	r3, [pc, #256]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d700:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800d704:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d706:	2000      	movs	r0, #0
            break;
 800d708:	e782      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800d70a:	4b3d      	ldr	r3, [pc, #244]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d70c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d70e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d710:	2000      	movs	r0, #0
            break;
 800d712:	e77d      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800d714:	4b3a      	ldr	r3, [pc, #232]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d718:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d71a:	2000      	movs	r0, #0
            break;
 800d71c:	e778      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800d71e:	4b38      	ldr	r3, [pc, #224]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d722:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d724:	2000      	movs	r0, #0
            break;
 800d726:	e773      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800d728:	4b35      	ldr	r3, [pc, #212]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d72a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d72c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d72e:	2000      	movs	r0, #0
            break;
 800d730:	e76e      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800d732:	4b33      	ldr	r3, [pc, #204]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d736:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d738:	2000      	movs	r0, #0
            break;
 800d73a:	e769      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800d73c:	2302      	movs	r3, #2
 800d73e:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800d742:	4b2f      	ldr	r3, [pc, #188]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d744:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800d748:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d74c:	a902      	add	r1, sp, #8
 800d74e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d752:	f001 fd6b 	bl	800f22c <RegionGetPhyParam>
 800d756:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800d758:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d75a:	2000      	movs	r0, #0
            break;
 800d75c:	e758      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d75e:	4b28      	ldr	r3, [pc, #160]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d760:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800d764:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d766:	2000      	movs	r0, #0
            break;
 800d768:	e752      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800d76a:	4b25      	ldr	r3, [pc, #148]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d76c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800d770:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d772:	2000      	movs	r0, #0
            break;
 800d774:	e74c      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d776:	4b22      	ldr	r3, [pc, #136]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d778:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800d77c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d77e:	2000      	movs	r0, #0
            break;
 800d780:	e746      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d782:	4b1f      	ldr	r3, [pc, #124]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d784:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800d788:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d78a:	2000      	movs	r0, #0
            break;
 800d78c:	e740      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800d78e:	4b1c      	ldr	r3, [pc, #112]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d792:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d794:	2000      	movs	r0, #0
            break;
 800d796:	e73b      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800d798:	4b19      	ldr	r3, [pc, #100]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d79a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800d79e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7a0:	2000      	movs	r0, #0
            break;
 800d7a2:	e735      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d7a4:	4b16      	ldr	r3, [pc, #88]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d7a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7a8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7aa:	2000      	movs	r0, #0
            break;
 800d7ac:	e730      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800d7ae:	4b14      	ldr	r3, [pc, #80]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d7b0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7b2:	2000      	movs	r0, #0
            break;
 800d7b4:	e72c      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800d7b6:	4b17      	ldr	r3, [pc, #92]	; (800d814 <LoRaMacMibGetRequestConfirm+0x298>)
 800d7b8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7ba:	2000      	movs	r0, #0
            break;
 800d7bc:	e728      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800d7be:	4b10      	ldr	r3, [pc, #64]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d7c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d7c4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7c6:	2000      	movs	r0, #0
            break;
 800d7c8:	e722      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800d7ca:	4b0d      	ldr	r3, [pc, #52]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d7cc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800d7d0:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800d7d2:	f001 fe53 	bl	800f47c <RegionGetVersion>
 800d7d6:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7d8:	2000      	movs	r0, #0
            break;
 800d7da:	e719      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800d7dc:	4b08      	ldr	r3, [pc, #32]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d7de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7e2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7e4:	2000      	movs	r0, #0
            break;
 800d7e6:	e713      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800d7e8:	4b05      	ldr	r3, [pc, #20]	; (800d800 <LoRaMacMibGetRequestConfirm+0x284>)
 800d7ea:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800d7ee:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d7f0:	2000      	movs	r0, #0
            break;
 800d7f2:	e70d      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f000 fd45 	bl	800e284 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800d7fa:	e709      	b.n	800d610 <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d7fc:	2003      	movs	r0, #3
}
 800d7fe:	4770      	bx	lr
 800d800:	20008000 	.word	0x20008000
 800d804:	20008064 	.word	0x20008064
 800d808:	200080a8 	.word	0x200080a8
 800d80c:	2000806c 	.word	0x2000806c
 800d810:	200080b0 	.word	0x200080b0
 800d814:	2000858c 	.word	0x2000858c

0800d818 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800d818:	2800      	cmp	r0, #0
 800d81a:	f000 8254 	beq.w	800dcc6 <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800d81e:	b530      	push	{r4, r5, lr}
 800d820:	b085      	sub	sp, #20
 800d822:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800d824:	4ba3      	ldr	r3, [pc, #652]	; (800dab4 <LoRaMacMibSetRequestConfirm+0x29c>)
 800d826:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d82a:	f013 0f02 	tst.w	r3, #2
 800d82e:	f040 824c 	bne.w	800dcca <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800d832:	7805      	ldrb	r5, [r0, #0]
 800d834:	2d39      	cmp	r5, #57	; 0x39
 800d836:	f200 8243 	bhi.w	800dcc0 <LoRaMacMibSetRequestConfirm+0x4a8>
 800d83a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800d83e:	003a      	.short	0x003a
 800d840:	00500047 	.word	0x00500047
 800d844:	005e0057 	.word	0x005e0057
 800d848:	006a0064 	.word	0x006a0064
 800d84c:	007b0070 	.word	0x007b0070
 800d850:	00910086 	.word	0x00910086
 800d854:	00a7009c 	.word	0x00a7009c
 800d858:	00bd00b2 	.word	0x00bd00b2
 800d85c:	00d400c9 	.word	0x00d400c9
 800d860:	00da0241 	.word	0x00da0241
 800d864:	011a0100 	.word	0x011a0100
 800d868:	017d0153 	.word	0x017d0153
 800d86c:	018d016d 	.word	0x018d016d
 800d870:	019d0198 	.word	0x019d0198
 800d874:	01a701a2 	.word	0x01a701a2
 800d878:	024101ac 	.word	0x024101ac
 800d87c:	01c601b1 	.word	0x01c601b1
 800d880:	01df01f3 	.word	0x01df01f3
 800d884:	020e0207 	.word	0x020e0207
 800d888:	021b0216 	.word	0x021b0216
 800d88c:	02410221 	.word	0x02410221
 800d890:	02410224 	.word	0x02410224
 800d894:	02410241 	.word	0x02410241
 800d898:	02410241 	.word	0x02410241
 800d89c:	02410241 	.word	0x02410241
 800d8a0:	02410241 	.word	0x02410241
 800d8a4:	02410241 	.word	0x02410241
 800d8a8:	02410241 	.word	0x02410241
 800d8ac:	02350241 	.word	0x02350241
 800d8b0:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800d8b2:	7900      	ldrb	r0, [r0, #4]
 800d8b4:	f7ff f95a 	bl	800cb6c <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800d8b8:	b930      	cbnz	r0, 800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800d8ba:	4a7e      	ldr	r2, [pc, #504]	; (800dab4 <LoRaMacMibSetRequestConfirm+0x29c>)
 800d8bc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800d8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800d8c8:	b005      	add	sp, #20
 800d8ca:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800d8cc:	7903      	ldrb	r3, [r0, #4]
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	f000 81fd 	beq.w	800dcce <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800d8d4:	4a78      	ldr	r2, [pc, #480]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800d8d6:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d8da:	2000      	movs	r0, #0
 800d8dc:	e7ed      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800d8de:	6840      	ldr	r0, [r0, #4]
 800d8e0:	f004 fce2 	bl	80122a8 <SecureElementSetDevEui>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d0e8      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d8e8:	2003      	movs	r0, #3
 800d8ea:	e7ed      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800d8ec:	6840      	ldr	r0, [r0, #4]
 800d8ee:	f004 fcef 	bl	80122d0 <SecureElementSetJoinEui>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	d0e1      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d8f6:	4628      	mov	r0, r5
 800d8f8:	e7e6      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800d8fa:	7902      	ldrb	r2, [r0, #4]
 800d8fc:	4b6e      	ldr	r3, [pc, #440]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800d8fe:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d902:	2000      	movs	r0, #0
 800d904:	e7d9      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800d906:	6842      	ldr	r2, [r0, #4]
 800d908:	4b6b      	ldr	r3, [pc, #428]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800d90a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d90e:	2000      	movs	r0, #0
 800d910:	e7d3      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800d912:	6842      	ldr	r2, [r0, #4]
 800d914:	4b68      	ldr	r3, [pc, #416]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800d916:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d91a:	2000      	movs	r0, #0
 800d91c:	e7cd      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800d91e:	6841      	ldr	r1, [r0, #4]
 800d920:	2900      	cmp	r1, #0
 800d922:	f000 81d6 	beq.w	800dcd2 <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800d926:	2000      	movs	r0, #0
 800d928:	f001 fa6e 	bl	800ee08 <LoRaMacCryptoSetKey>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d0c4      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d930:	2011      	movs	r0, #17
 800d932:	e7c9      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800d934:	6841      	ldr	r1, [r0, #4]
 800d936:	2900      	cmp	r1, #0
 800d938:	f000 81cd 	beq.w	800dcd6 <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800d93c:	2001      	movs	r0, #1
 800d93e:	f001 fa63 	bl	800ee08 <LoRaMacCryptoSetKey>
 800d942:	2800      	cmp	r0, #0
 800d944:	d0b9      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d946:	2011      	movs	r0, #17
 800d948:	e7be      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800d94a:	6841      	ldr	r1, [r0, #4]
 800d94c:	2900      	cmp	r1, #0
 800d94e:	f000 81c4 	beq.w	800dcda <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800d952:	2002      	movs	r0, #2
 800d954:	f001 fa58 	bl	800ee08 <LoRaMacCryptoSetKey>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d0ae      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d95c:	2011      	movs	r0, #17
 800d95e:	e7b3      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800d960:	6841      	ldr	r1, [r0, #4]
 800d962:	2900      	cmp	r1, #0
 800d964:	f000 81bb 	beq.w	800dcde <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800d968:	2003      	movs	r0, #3
 800d96a:	f001 fa4d 	bl	800ee08 <LoRaMacCryptoSetKey>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d0a3      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d972:	2011      	movs	r0, #17
 800d974:	e7a8      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800d976:	6841      	ldr	r1, [r0, #4]
 800d978:	2900      	cmp	r1, #0
 800d97a:	f000 81b2 	beq.w	800dce2 <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800d97e:	207f      	movs	r0, #127	; 0x7f
 800d980:	f001 fa42 	bl	800ee08 <LoRaMacCryptoSetKey>
 800d984:	2800      	cmp	r0, #0
 800d986:	d098      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d988:	2011      	movs	r0, #17
 800d98a:	e79d      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800d98c:	6841      	ldr	r1, [r0, #4]
 800d98e:	2900      	cmp	r1, #0
 800d990:	f000 81a9 	beq.w	800dce6 <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800d994:	2080      	movs	r0, #128	; 0x80
 800d996:	f001 fa37 	bl	800ee08 <LoRaMacCryptoSetKey>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d08d      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d99e:	2011      	movs	r0, #17
 800d9a0:	e792      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800d9a2:	6841      	ldr	r1, [r0, #4]
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	f000 81a0 	beq.w	800dcea <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800d9aa:	2081      	movs	r0, #129	; 0x81
 800d9ac:	f001 fa2c 	bl	800ee08 <LoRaMacCryptoSetKey>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d082      	beq.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d9b4:	2011      	movs	r0, #17
 800d9b6:	e787      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800d9b8:	6841      	ldr	r1, [r0, #4]
 800d9ba:	2900      	cmp	r1, #0
 800d9bc:	f000 8197 	beq.w	800dcee <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800d9c0:	2082      	movs	r0, #130	; 0x82
 800d9c2:	f001 fa21 	bl	800ee08 <LoRaMacCryptoSetKey>
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	f43f af77 	beq.w	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800d9cc:	2011      	movs	r0, #17
 800d9ce:	e77b      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800d9d0:	7900      	ldrb	r0, [r0, #4]
 800d9d2:	4b39      	ldr	r3, [pc, #228]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800d9d4:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800d9d8:	4c38      	ldr	r4, [pc, #224]	; (800dabc <LoRaMacMibSetRequestConfirm+0x2a4>)
 800d9da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d9dc:	4798      	blx	r3
            Radio.Sleep( );
 800d9de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d9e0:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	e769      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800d9e6:	7902      	ldrb	r2, [r0, #4]
 800d9e8:	4b33      	ldr	r3, [pc, #204]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800d9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	e763      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800d9f2:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800d9f6:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d9fa:	4b2f      	ldr	r3, [pc, #188]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800d9fc:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800da00:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800da04:	2207      	movs	r2, #7
 800da06:	a901      	add	r1, sp, #4
 800da08:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800da0c:	f001 fc42 	bl	800f294 <RegionVerify>
 800da10:	b908      	cbnz	r0, 800da16 <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800da12:	2003      	movs	r0, #3
 800da14:	e750      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800da16:	6863      	ldr	r3, [r4, #4]
 800da18:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800da1a:	2200      	movs	r2, #0
 800da1c:	a901      	add	r1, sp, #4
 800da1e:	4b26      	ldr	r3, [pc, #152]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800da20:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800da24:	f001 fc36 	bl	800f294 <RegionVerify>
 800da28:	2800      	cmp	r0, #0
 800da2a:	f000 8162 	beq.w	800dcf2 <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800da2e:	4b24      	ldr	r3, [pc, #144]	; (800dac0 <LoRaMacMibSetRequestConfirm+0x2a8>)
 800da30:	3404      	adds	r4, #4
 800da32:	e894 0003 	ldmia.w	r4, {r0, r1}
 800da36:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da3a:	2000      	movs	r0, #0
 800da3c:	e73c      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800da3e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800da42:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800da46:	4b1c      	ldr	r3, [pc, #112]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800da48:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800da4c:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800da50:	2207      	movs	r2, #7
 800da52:	a901      	add	r1, sp, #4
 800da54:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800da58:	f001 fc1c 	bl	800f294 <RegionVerify>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	f000 814a 	beq.w	800dcf6 <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800da62:	4b18      	ldr	r3, [pc, #96]	; (800dac4 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800da64:	3404      	adds	r4, #4
 800da66:	e894 0003 	ldmia.w	r4, {r0, r1}
 800da6a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800da6e:	2000      	movs	r0, #0
 800da70:	e722      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800da72:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800da76:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800da7a:	4b0f      	ldr	r3, [pc, #60]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800da7c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800da80:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800da84:	2207      	movs	r2, #7
 800da86:	a901      	add	r1, sp, #4
 800da88:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800da8c:	f001 fc02 	bl	800f294 <RegionVerify>
 800da90:	2800      	cmp	r0, #0
 800da92:	f000 8132 	beq.w	800dcfa <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800da96:	4b08      	ldr	r3, [pc, #32]	; (800dab8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800da98:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800da9c:	3404      	adds	r4, #4
 800da9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800daa2:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800daa6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d00c      	beq.n	800dac8 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800daae:	2000      	movs	r0, #0
 800dab0:	e702      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
 800dab2:	bf00      	nop
 800dab4:	2000349c 	.word	0x2000349c
 800dab8:	20008000 	.word	0x20008000
 800dabc:	08015a90 	.word	0x08015a90
 800dac0:	20008064 	.word	0x20008064
 800dac4:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800dac8:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800dacc:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800dad0:	2800      	cmp	r0, #0
 800dad2:	f43f aef1 	beq.w	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800dad6:	4b90      	ldr	r3, [pc, #576]	; (800dd18 <LoRaMacMibSetRequestConfirm+0x500>)
 800dad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dada:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800dadc:	f7fe fd82 	bl	800c5e4 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dae0:	2000      	movs	r0, #0
 800dae2:	e6e9      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800dae4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800dae8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800daec:	4b8b      	ldr	r3, [pc, #556]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800daee:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800daf2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800daf6:	2207      	movs	r2, #7
 800daf8:	a901      	add	r1, sp, #4
 800dafa:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dafe:	f001 fbc9 	bl	800f294 <RegionVerify>
 800db02:	2800      	cmp	r0, #0
 800db04:	f000 80fb 	beq.w	800dcfe <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800db08:	4b85      	ldr	r3, [pc, #532]	; (800dd20 <LoRaMacMibSetRequestConfirm+0x508>)
 800db0a:	3404      	adds	r4, #4
 800db0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800db10:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db14:	2000      	movs	r0, #0
 800db16:	e6cf      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800db18:	6843      	ldr	r3, [r0, #4]
 800db1a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800db1c:	2301      	movs	r3, #1
 800db1e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800db22:	a902      	add	r1, sp, #8
 800db24:	4b7d      	ldr	r3, [pc, #500]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800db26:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800db2a:	f001 fbd1 	bl	800f2d0 <RegionChanMaskSet>
 800db2e:	b108      	cbz	r0, 800db34 <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db30:	2000      	movs	r0, #0
 800db32:	e6c1      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800db34:	2003      	movs	r0, #3
 800db36:	e6c7      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800db38:	6843      	ldr	r3, [r0, #4]
 800db3a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800db3c:	2300      	movs	r3, #0
 800db3e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800db42:	a902      	add	r1, sp, #8
 800db44:	4b75      	ldr	r3, [pc, #468]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800db46:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800db4a:	f001 fbc1 	bl	800f2d0 <RegionChanMaskSet>
 800db4e:	b108      	cbz	r0, 800db54 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db50:	2000      	movs	r0, #0
 800db52:	e6b1      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800db54:	2003      	movs	r0, #3
 800db56:	e6b7      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800db58:	7902      	ldrb	r2, [r0, #4]
 800db5a:	1e53      	subs	r3, r2, #1
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b0e      	cmp	r3, #14
 800db60:	f200 80cf 	bhi.w	800dd02 <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800db64:	4b6d      	ldr	r3, [pc, #436]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800db66:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db6a:	2000      	movs	r0, #0
 800db6c:	e6a4      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800db6e:	6842      	ldr	r2, [r0, #4]
 800db70:	4b6a      	ldr	r3, [pc, #424]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800db72:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db74:	2000      	movs	r0, #0
 800db76:	e6a0      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800db78:	6842      	ldr	r2, [r0, #4]
 800db7a:	4b68      	ldr	r3, [pc, #416]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800db7c:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db7e:	2000      	movs	r0, #0
 800db80:	e69b      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800db82:	6842      	ldr	r2, [r0, #4]
 800db84:	4b65      	ldr	r3, [pc, #404]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800db86:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db88:	2000      	movs	r0, #0
 800db8a:	e696      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800db8c:	6842      	ldr	r2, [r0, #4]
 800db8e:	4b63      	ldr	r3, [pc, #396]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800db90:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db92:	2000      	movs	r0, #0
 800db94:	e691      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800db96:	6842      	ldr	r2, [r0, #4]
 800db98:	4b60      	ldr	r3, [pc, #384]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800db9a:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800db9c:	2000      	movs	r0, #0
 800db9e:	e68c      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800dba0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800dba4:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800dba8:	2206      	movs	r2, #6
 800dbaa:	a901      	add	r1, sp, #4
 800dbac:	4b5b      	ldr	r3, [pc, #364]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dbae:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dbb2:	f001 fb6f 	bl	800f294 <RegionVerify>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	f000 80a5 	beq.w	800dd06 <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800dbbc:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800dbc0:	4b56      	ldr	r3, [pc, #344]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dbc2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e676      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800dbca:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800dbce:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800dbd2:	4b52      	ldr	r3, [pc, #328]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dbd4:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800dbd8:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800dbdc:	2205      	movs	r2, #5
 800dbde:	a901      	add	r1, sp, #4
 800dbe0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dbe4:	f001 fb56 	bl	800f294 <RegionVerify>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	f000 808e 	beq.w	800dd0a <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800dbee:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800dbf2:	4b4a      	ldr	r3, [pc, #296]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dbf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	e65d      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800dbfc:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800dc00:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800dc04:	220a      	movs	r2, #10
 800dc06:	a901      	add	r1, sp, #4
 800dc08:	4b44      	ldr	r3, [pc, #272]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc0a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dc0e:	f001 fb41 	bl	800f294 <RegionVerify>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d07b      	beq.n	800dd0e <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800dc16:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800dc1a:	4b40      	ldr	r3, [pc, #256]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc1c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc20:	2000      	movs	r0, #0
 800dc22:	e649      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800dc24:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800dc28:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800dc2c:	2209      	movs	r2, #9
 800dc2e:	a901      	add	r1, sp, #4
 800dc30:	4b3a      	ldr	r3, [pc, #232]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc32:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dc36:	f001 fb2d 	bl	800f294 <RegionVerify>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d069      	beq.n	800dd12 <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800dc3e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800dc42:	4b36      	ldr	r3, [pc, #216]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e635      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800dc4c:	6842      	ldr	r2, [r0, #4]
 800dc4e:	4b33      	ldr	r3, [pc, #204]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800dc54:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc56:	2000      	movs	r0, #0
 800dc58:	e62f      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800dc5a:	7902      	ldrb	r2, [r0, #4]
 800dc5c:	4b2f      	ldr	r3, [pc, #188]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc5e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800dc62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc66:	2000      	movs	r0, #0
 800dc68:	e627      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800dc6a:	6842      	ldr	r2, [r0, #4]
 800dc6c:	4b2b      	ldr	r3, [pc, #172]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc6e:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc70:	2000      	movs	r0, #0
 800dc72:	e622      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800dc74:	6842      	ldr	r2, [r0, #4]
 800dc76:	4b29      	ldr	r3, [pc, #164]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc78:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	e61c      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800dc80:	f7fe fdc4 	bl	800c80c <RestoreNvmData>
            break;
 800dc84:	e618      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800dc86:	7983      	ldrb	r3, [r0, #6]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d901      	bls.n	800dc90 <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dc8c:	2003      	movs	r0, #3
 800dc8e:	e61b      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800dc90:	6842      	ldr	r2, [r0, #4]
 800dc92:	4b22      	ldr	r3, [pc, #136]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dc94:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800dc98:	6840      	ldr	r0, [r0, #4]
 800dc9a:	f000 ff69 	bl	800eb70 <LoRaMacCryptoSetLrWanVersion>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	f43f ae0a 	beq.w	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800dca4:	2011      	movs	r0, #17
 800dca6:	e60f      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800dca8:	6842      	ldr	r2, [r0, #4]
 800dcaa:	4b1c      	ldr	r3, [pc, #112]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dcac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dcb0:	2000      	movs	r0, #0
 800dcb2:	e602      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800dcb4:	7902      	ldrb	r2, [r0, #4]
 800dcb6:	4b19      	ldr	r3, [pc, #100]	; (800dd1c <LoRaMacMibSetRequestConfirm+0x504>)
 800dcb8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	e5fc      	b.n	800d8ba <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800dcc0:	f000 fae2 	bl	800e288 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800dcc4:	e5f8      	b.n	800d8b8 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dcc6:	2003      	movs	r0, #3
}
 800dcc8:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800dcca:	2001      	movs	r0, #1
 800dccc:	e5fc      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcce:	2003      	movs	r0, #3
 800dcd0:	e5fa      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcd2:	2003      	movs	r0, #3
 800dcd4:	e5f8      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcd6:	2003      	movs	r0, #3
 800dcd8:	e5f6      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcda:	2003      	movs	r0, #3
 800dcdc:	e5f4      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcde:	2003      	movs	r0, #3
 800dce0:	e5f2      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dce2:	2003      	movs	r0, #3
 800dce4:	e5f0      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dce6:	2003      	movs	r0, #3
 800dce8:	e5ee      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcea:	2003      	movs	r0, #3
 800dcec:	e5ec      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcee:	2003      	movs	r0, #3
 800dcf0:	e5ea      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcf2:	2003      	movs	r0, #3
 800dcf4:	e5e8      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcf6:	2003      	movs	r0, #3
 800dcf8:	e5e6      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcfa:	2003      	movs	r0, #3
 800dcfc:	e5e4      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dcfe:	2003      	movs	r0, #3
 800dd00:	e5e2      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dd02:	2003      	movs	r0, #3
 800dd04:	e5e0      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dd06:	2003      	movs	r0, #3
 800dd08:	e5de      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dd0a:	2003      	movs	r0, #3
 800dd0c:	e5dc      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dd0e:	2003      	movs	r0, #3
 800dd10:	e5da      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800dd12:	2003      	movs	r0, #3
 800dd14:	e5d8      	b.n	800d8c8 <LoRaMacMibSetRequestConfirm+0xb0>
 800dd16:	bf00      	nop
 800dd18:	08015a90 	.word	0x08015a90
 800dd1c:	20008000 	.word	0x20008000
 800dd20:	200080b0 	.word	0x200080b0

0800dd24 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800dd2e:	2800      	cmp	r0, #0
 800dd30:	f000 80ea 	beq.w	800df08 <LoRaMacMlmeRequest+0x1e4>
 800dd34:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800dd36:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800dd38:	f7ff f920 	bl	800cf7c <LoRaMacIsBusy>
 800dd3c:	b118      	cbz	r0, 800dd46 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800dd3e:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800dd40:	4620      	mov	r0, r4
 800dd42:	b006      	add	sp, #24
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800dd46:	f000 fd49 	bl	800e7dc <LoRaMacConfirmQueueIsFull>
 800dd4a:	b108      	cbz	r0, 800dd50 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800dd4c:	2401      	movs	r4, #1
 800dd4e:	e7f7      	b.n	800dd40 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800dd50:	f000 fd3e 	bl	800e7d0 <LoRaMacConfirmQueueGetCnt>
 800dd54:	b308      	cbz	r0, 800dd9a <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd56:	4b6d      	ldr	r3, [pc, #436]	; (800df0c <LoRaMacMlmeRequest+0x1e8>)
 800dd58:	2101      	movs	r1, #1
 800dd5a:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800dd5e:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800dd62:	f042 0204 	orr.w	r2, r2, #4
 800dd66:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800dd6a:	782b      	ldrb	r3, [r5, #0]
 800dd6c:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd70:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800dd74:	2200      	movs	r2, #0
 800dd76:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800dd7a:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800dd7e:	461c      	mov	r4, r3
 800dd80:	3b01      	subs	r3, #1
 800dd82:	2b0c      	cmp	r3, #12
 800dd84:	f200 80a6 	bhi.w	800ded4 <LoRaMacMlmeRequest+0x1b0>
 800dd88:	e8df f003 	tbb	[pc, r3]
 800dd8c:	5aa4a40d 	.word	0x5aa4a40d
 800dd90:	a4a4a464 	.word	0xa4a4a464
 800dd94:	7695a46d 	.word	0x7695a46d
 800dd98:	8c          	.byte	0x8c
 800dd99:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800dd9a:	2214      	movs	r2, #20
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	485c      	ldr	r0, [pc, #368]	; (800df10 <LoRaMacMlmeRequest+0x1ec>)
 800dda0:	f004 faef 	bl	8012382 <memset1>
 800dda4:	e7d7      	b.n	800dd56 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800dda6:	4b59      	ldr	r3, [pc, #356]	; (800df0c <LoRaMacMlmeRequest+0x1e8>)
 800dda8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ddac:	f013 0f20 	tst.w	r3, #32
 800ddb0:	d1c6      	bne.n	800dd40 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800ddb2:	792b      	ldrb	r3, [r5, #4]
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d003      	beq.n	800ddc0 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d021      	beq.n	800de00 <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ddbc:	2402      	movs	r4, #2
 800ddbe:	e08a      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800ddc0:	f7fe fe24 	bl	800ca0c <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800ddc4:	4c53      	ldr	r4, [pc, #332]	; (800df14 <LoRaMacMlmeRequest+0x1f0>)
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ddcc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ddd0:	f001 fb1c 	bl	800f40c <RegionAlternateDr>
 800ddd4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ddd8:	2307      	movs	r3, #7
 800ddda:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800ddde:	20ff      	movs	r0, #255	; 0xff
 800dde0:	f7fe ff4a 	bl	800cc78 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800dde4:	4604      	mov	r4, r0
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d075      	beq.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ddea:	4e4a      	ldr	r6, [pc, #296]	; (800df14 <LoRaMacMlmeRequest+0x1f0>)
 800ddec:	2201      	movs	r2, #1
 800ddee:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800ddf2:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800ddf6:	f001 fb09 	bl	800f40c <RegionAlternateDr>
 800ddfa:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800ddfe:	e06a      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800de00:	4e44      	ldr	r6, [pc, #272]	; (800df14 <LoRaMacMlmeRequest+0x1f0>)
 800de02:	2400      	movs	r4, #0
 800de04:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800de08:	2302      	movs	r3, #2
 800de0a:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800de0e:	4669      	mov	r1, sp
 800de10:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800de14:	f001 fa30 	bl	800f278 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800de18:	792b      	ldrb	r3, [r5, #4]
 800de1a:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800de1e:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800de22:	2301      	movs	r3, #1
 800de24:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800de28:	4e38      	ldr	r6, [pc, #224]	; (800df0c <LoRaMacMlmeRequest+0x1e8>)
 800de2a:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800de2e:	691b      	ldr	r3, [r3, #16]
 800de30:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800de32:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800de36:	f043 0320 	orr.w	r3, r3, #32
 800de3a:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800de3e:	e04a      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800de40:	2200      	movs	r2, #0
 800de42:	a904      	add	r1, sp, #16
 800de44:	2002      	movs	r0, #2
 800de46:	f000 fac1 	bl	800e3cc <LoRaMacCommandsAddCmd>
 800de4a:	4604      	mov	r4, r0
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d042      	beq.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800de50:	2413      	movs	r4, #19
 800de52:	e040      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800de54:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800de58:	b2d2      	uxtb	r2, r2
 800de5a:	68a9      	ldr	r1, [r5, #8]
 800de5c:	88a8      	ldrh	r0, [r5, #4]
 800de5e:	f7fc ffe3 	bl	800ae28 <SetTxContinuousWave>
 800de62:	4604      	mov	r4, r0
            break;
 800de64:	e037      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800de66:	2200      	movs	r2, #0
 800de68:	a904      	add	r1, sp, #16
 800de6a:	200d      	movs	r0, #13
 800de6c:	f000 faae 	bl	800e3cc <LoRaMacCommandsAddCmd>
 800de70:	4604      	mov	r4, r0
 800de72:	b380      	cbz	r0, 800ded6 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800de74:	2413      	movs	r4, #19
 800de76:	e02e      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800de78:	4b26      	ldr	r3, [pc, #152]	; (800df14 <LoRaMacMlmeRequest+0x1f0>)
 800de7a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800de7e:	b10b      	cbz	r3, 800de84 <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800de80:	2402      	movs	r4, #2
 800de82:	e028      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800de84:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800de86:	f004 0007 	and.w	r0, r4, #7
 800de8a:	f000 f9f6 	bl	800e27a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800de8e:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800de92:	2201      	movs	r2, #1
 800de94:	a904      	add	r1, sp, #16
 800de96:	2010      	movs	r0, #16
 800de98:	f000 fa98 	bl	800e3cc <LoRaMacCommandsAddCmd>
 800de9c:	4604      	mov	r4, r0
 800de9e:	b1d0      	cbz	r0, 800ded6 <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800dea0:	2413      	movs	r4, #19
 800dea2:	e018      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800dea4:	2200      	movs	r2, #0
 800dea6:	a904      	add	r1, sp, #16
 800dea8:	2012      	movs	r0, #18
 800deaa:	f000 fa8f 	bl	800e3cc <LoRaMacCommandsAddCmd>
 800deae:	4604      	mov	r4, r0
 800deb0:	b188      	cbz	r0, 800ded6 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800deb2:	2413      	movs	r4, #19
 800deb4:	e00f      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800deb6:	2301      	movs	r3, #1
 800deb8:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800debc:	f000 f9ce 	bl	800e25c <LoRaMacClassBIsAcquisitionInProgress>
 800dec0:	b108      	cbz	r0, 800dec6 <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800dec2:	2401      	movs	r4, #1
 800dec4:	e007      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800dec6:	f000 f9c6 	bl	800e256 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800deca:	2000      	movs	r0, #0
 800decc:	f000 f9c8 	bl	800e260 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800ded0:	2400      	movs	r4, #0
 800ded2:	e000      	b.n	800ded6 <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800ded4:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800ded6:	4b0d      	ldr	r3, [pc, #52]	; (800df0c <LoRaMacMlmeRequest+0x1e8>)
 800ded8:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800dedc:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800dede:	b17c      	cbz	r4, 800df00 <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800dee0:	f000 fc76 	bl	800e7d0 <LoRaMacConfirmQueueGetCnt>
 800dee4:	2800      	cmp	r0, #0
 800dee6:	f47f af2b 	bne.w	800dd40 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800deea:	4b08      	ldr	r3, [pc, #32]	; (800df0c <LoRaMacMlmeRequest+0x1e8>)
 800deec:	2100      	movs	r1, #0
 800deee:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800def2:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800def6:	f361 0282 	bfi	r2, r1, #2, #1
 800defa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800defe:	e71f      	b.n	800dd40 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800df00:	a805      	add	r0, sp, #20
 800df02:	f000 fba1 	bl	800e648 <LoRaMacConfirmQueueAdd>
 800df06:	e71b      	b.n	800dd40 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800df08:	2403      	movs	r4, #3
 800df0a:	e719      	b.n	800dd40 <LoRaMacMlmeRequest+0x1c>
 800df0c:	2000349c 	.word	0x2000349c
 800df10:	200038f4 	.word	0x200038f4
 800df14:	20008000 	.word	0x20008000

0800df18 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800df18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	b091      	sub	sp, #68	; 0x44
 800df1e:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800df20:	2800      	cmp	r0, #0
 800df22:	f000 80de 	beq.w	800e0e2 <LoRaMacMcpsRequest+0x1ca>
 800df26:	f04f 0a00 	mov.w	sl, #0
 800df2a:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800df2c:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800df30:	f7ff f824 	bl	800cf7c <LoRaMacIsBusy>
 800df34:	4680      	mov	r8, r0
 800df36:	b118      	cbz	r0, 800df40 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800df38:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800df3a:	b011      	add	sp, #68	; 0x44
 800df3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800df40:	ac06      	add	r4, sp, #24
 800df42:	462e      	mov	r6, r5
 800df44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800df46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df48:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800df4c:	4651      	mov	r1, sl
 800df4e:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800df52:	4c66      	ldr	r4, [pc, #408]	; (800e0ec <LoRaMacMcpsRequest+0x1d4>)
 800df54:	2214      	movs	r2, #20
 800df56:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800df5a:	f004 fa12 	bl	8012382 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800df64:	4b62      	ldr	r3, [pc, #392]	; (800e0f0 <LoRaMacMcpsRequest+0x1d8>)
 800df66:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800df6a:	2b02      	cmp	r3, #2
 800df6c:	d065      	beq.n	800e03a <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800df6e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800df72:	2f01      	cmp	r7, #1
 800df74:	f000 8086 	beq.w	800e084 <LoRaMacMcpsRequest+0x16c>
 800df78:	2f03      	cmp	r7, #3
 800df7a:	f000 8096 	beq.w	800e0aa <LoRaMacMcpsRequest+0x192>
 800df7e:	2f00      	cmp	r7, #0
 800df80:	d06d      	beq.n	800e05e <LoRaMacMcpsRequest+0x146>
 800df82:	f04f 0b00 	mov.w	fp, #0
 800df86:	f8cd b014 	str.w	fp, [sp, #20]
 800df8a:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800df8e:	2302      	movs	r3, #2
 800df90:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800df94:	4e56      	ldr	r6, [pc, #344]	; (800e0f0 <LoRaMacMcpsRequest+0x1d8>)
 800df96:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800df9a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df9e:	a90e      	add	r1, sp, #56	; 0x38
 800dfa0:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800dfa4:	f001 f942 	bl	800f22c <RegionGetPhyParam>
 800dfa8:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800dfaa:	b244      	sxtb	r4, r0
 800dfac:	45a3      	cmp	fp, r4
 800dfae:	bfb8      	it	lt
 800dfb0:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800dfb2:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800dfb6:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800dfba:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800dfbe:	4648      	mov	r0, r9
 800dfc0:	f7fc ff04 	bl	800adcc <CheckForMinimumAbpDatarate>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	b900      	cbnz	r0, 800dfca <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800dfc8:	465c      	mov	r4, fp
    if( readyToSend == true )
 800dfca:	f1b8 0f00 	cmp.w	r8, #0
 800dfce:	f000 8082 	beq.w	800e0d6 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800dfd2:	f1b9 0f00 	cmp.w	r9, #0
 800dfd6:	d000      	beq.n	800dfda <LoRaMacMcpsRequest+0xc2>
 800dfd8:	b19b      	cbz	r3, 800e002 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800dfda:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800dfde:	4b44      	ldr	r3, [pc, #272]	; (800e0f0 <LoRaMacMcpsRequest+0x1d8>)
 800dfe0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800dfe4:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800dfe8:	2205      	movs	r2, #5
 800dfea:	a90b      	add	r1, sp, #44	; 0x2c
 800dfec:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800dff0:	f001 f950 	bl	800f294 <RegionVerify>
 800dff4:	2800      	cmp	r0, #0
 800dff6:	d076      	beq.n	800e0e6 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800dff8:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800dffc:	4b3c      	ldr	r3, [pc, #240]	; (800e0f0 <LoRaMacMcpsRequest+0x1d8>)
 800dffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800e002:	4b3a      	ldr	r3, [pc, #232]	; (800e0ec <LoRaMacMcpsRequest+0x1d4>)
 800e004:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800e008:	4b39      	ldr	r3, [pc, #228]	; (800e0f0 <LoRaMacMcpsRequest+0x1d8>)
 800e00a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800e00e:	f7fe f81d 	bl	800c04c <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800e012:	9b03      	ldr	r3, [sp, #12]
 800e014:	9300      	str	r3, [sp, #0]
 800e016:	4653      	mov	r3, sl
 800e018:	9a05      	ldr	r2, [sp, #20]
 800e01a:	9904      	ldr	r1, [sp, #16]
 800e01c:	a80c      	add	r0, sp, #48	; 0x30
 800e01e:	f7fe ff19 	bl	800ce54 <Send>
        if( status == LORAMAC_STATUS_OK )
 800e022:	2800      	cmp	r0, #0
 800e024:	d152      	bne.n	800e0cc <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800e026:	4b31      	ldr	r3, [pc, #196]	; (800e0ec <LoRaMacMcpsRequest+0x1d4>)
 800e028:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800e02c:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800e030:	f042 0201 	orr.w	r2, r2, #1
 800e034:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800e038:	e04e      	b.n	800e0d8 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800e03a:	4b2d      	ldr	r3, [pc, #180]	; (800e0f0 <LoRaMacMcpsRequest+0x1d8>)
 800e03c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800e040:	2b02      	cmp	r3, #2
 800e042:	d194      	bne.n	800df6e <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800e044:	4b2a      	ldr	r3, [pc, #168]	; (800e0f0 <LoRaMacMcpsRequest+0x1d8>)
 800e046:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d18f      	bne.n	800df6e <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800e04e:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800e052:	2b00      	cmp	r3, #0
 800e054:	d18b      	bne.n	800df6e <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800e056:	2301      	movs	r3, #1
 800e058:	f88d 3018 	strb.w	r3, [sp, #24]
 800e05c:	e787      	b.n	800df6e <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800e05e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e062:	2202      	movs	r2, #2
 800e064:	f362 1347 	bfi	r3, r2, #5, #3
 800e068:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800e06c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e070:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800e072:	9b08      	ldr	r3, [sp, #32]
 800e074:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800e076:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800e07a:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800e07e:	f04f 0801 	mov.w	r8, #1
            break;
 800e082:	e784      	b.n	800df8e <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800e084:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e088:	2204      	movs	r2, #4
 800e08a:	f362 1347 	bfi	r3, r2, #5, #3
 800e08e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800e092:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e096:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800e098:	9b08      	ldr	r3, [sp, #32]
 800e09a:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800e09c:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800e0a0:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800e0a4:	f04f 0801 	mov.w	r8, #1
            break;
 800e0a8:	e771      	b.n	800df8e <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800e0aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e0ae:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800e0b2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800e0b6:	9b07      	ldr	r3, [sp, #28]
 800e0b8:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800e0ba:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800e0be:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800e0c2:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	9304      	str	r3, [sp, #16]
            break;
 800e0ca:	e760      	b.n	800df8e <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800e0cc:	4b07      	ldr	r3, [pc, #28]	; (800e0ec <LoRaMacMcpsRequest+0x1d4>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800e0d4:	e000      	b.n	800e0d8 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800e0d6:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800e0d8:	4b04      	ldr	r3, [pc, #16]	; (800e0ec <LoRaMacMcpsRequest+0x1d4>)
 800e0da:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800e0de:	612b      	str	r3, [r5, #16]
    return status;
 800e0e0:	e72b      	b.n	800df3a <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e0e2:	2003      	movs	r0, #3
 800e0e4:	e729      	b.n	800df3a <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800e0e6:	2003      	movs	r0, #3
 800e0e8:	e727      	b.n	800df3a <LoRaMacMcpsRequest+0x22>
 800e0ea:	bf00      	nop
 800e0ec:	2000349c 	.word	0x2000349c
 800e0f0:	20008000 	.word	0x20008000

0800e0f4 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800e0f4:	b510      	push	{r4, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800e0fa:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800e0fe:	220f      	movs	r2, #15
 800e100:	a901      	add	r1, sp, #4
 800e102:	4b05      	ldr	r3, [pc, #20]	; (800e118 <LoRaMacTestSetDutyCycleOn+0x24>)
 800e104:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e108:	f001 f8c4 	bl	800f294 <RegionVerify>
 800e10c:	b110      	cbz	r0, 800e114 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800e10e:	4b02      	ldr	r3, [pc, #8]	; (800e118 <LoRaMacTestSetDutyCycleOn+0x24>)
 800e110:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800e114:	b002      	add	sp, #8
 800e116:	bd10      	pop	{r4, pc}
 800e118:	20008000 	.word	0x20008000

0800e11c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800e11c:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800e11e:	f7ff f97b 	bl	800d418 <LoRaMacStop>
 800e122:	b110      	cbz	r0, 800e12a <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800e124:	2401      	movs	r4, #1
    }
}
 800e126:	4620      	mov	r0, r4
 800e128:	bd38      	pop	{r3, r4, r5, pc}
 800e12a:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800e12c:	4d0a      	ldr	r5, [pc, #40]	; (800e158 <LoRaMacDeInitialization+0x3c>)
 800e12e:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800e132:	f006 fa2f 	bl	8014594 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800e136:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800e13a:	f006 fa2b 	bl	8014594 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e13e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800e142:	f006 fa27 	bl	8014594 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800e146:	f000 f899 	bl	800e27c <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800e14a:	f7fe fc5f 	bl	800ca0c <ResetMacParameters>
        Radio.Sleep( );
 800e14e:	4b03      	ldr	r3, [pc, #12]	; (800e15c <LoRaMacDeInitialization+0x40>)
 800e150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e152:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800e154:	e7e7      	b.n	800e126 <LoRaMacDeInitialization+0xa>
 800e156:	bf00      	nop
 800e158:	2000349c 	.word	0x2000349c
 800e15c:	08015a90 	.word	0x08015a90

0800e160 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	b08b      	sub	sp, #44	; 0x2c
 800e166:	460f      	mov	r7, r1
 800e168:	4616      	mov	r6, r2
 800e16a:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800e16c:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800e170:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800e174:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800e178:	6842      	ldr	r2, [r0, #4]
 800e17a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e17c:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800e17e:	f890 8001 	ldrb.w	r8, [r0, #1]
 800e182:	f1b8 0f00 	cmp.w	r8, #0
 800e186:	d109      	bne.n	800e19c <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800e188:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800e18c:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800e190:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800e194:	4640      	mov	r0, r8
 800e196:	b00b      	add	sp, #44	; 0x2c
 800e198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19c:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800e19e:	2302      	movs	r3, #2
 800e1a0:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800e1a4:	7bc3      	ldrb	r3, [r0, #15]
 800e1a6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e1aa:	a908      	add	r1, sp, #32
 800e1ac:	7c00      	ldrb	r0, [r0, #16]
 800e1ae:	f001 f83d 	bl	800f22c <RegionGetPhyParam>
 800e1b2:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800e1b4:	b243      	sxtb	r3, r0
 800e1b6:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800e1b8:	454b      	cmp	r3, r9
 800e1ba:	bfb8      	it	lt
 800e1bc:	464b      	movlt	r3, r9
 800e1be:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800e1c0:	6862      	ldr	r2, [r4, #4]
 800e1c2:	8923      	ldrh	r3, [r4, #8]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d201      	bcs.n	800e1cc <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800e1c8:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800e1cc:	8961      	ldrh	r1, [r4, #10]
 800e1ce:	440b      	add	r3, r1
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d224      	bcs.n	800e21e <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800e1d4:	6863      	ldr	r3, [r4, #4]
 800e1d6:	8921      	ldrh	r1, [r4, #8]
 800e1d8:	8962      	ldrh	r2, [r4, #10]
 800e1da:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800e1de:	4283      	cmp	r3, r0
 800e1e0:	d332      	bcc.n	800e248 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800e1e2:	1a5b      	subs	r3, r3, r1
 800e1e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e1e8:	fb02 3311 	mls	r3, r2, r1, r3
 800e1ec:	bb7b      	cbnz	r3, 800e24e <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800e1ee:	9b01      	ldr	r3, [sp, #4]
 800e1f0:	4599      	cmp	r9, r3
 800e1f2:	dc03      	bgt.n	800e1fc <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800e1f4:	7823      	ldrb	r3, [r4, #0]
 800e1f6:	b9eb      	cbnz	r3, 800e234 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800e1f8:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800e1fc:	2321      	movs	r3, #33	; 0x21
 800e1fe:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800e202:	9b00      	ldr	r3, [sp, #0]
 800e204:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800e208:	7be3      	ldrb	r3, [r4, #15]
 800e20a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e20e:	a908      	add	r1, sp, #32
 800e210:	7c20      	ldrb	r0, [r4, #16]
 800e212:	f001 f80b 	bl	800f22c <RegionGetPhyParam>
 800e216:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800e218:	fa4f f980 	sxtb.w	r9, r0
 800e21c:	e7b4      	b.n	800e188 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800e21e:	230a      	movs	r3, #10
 800e220:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800e224:	a908      	add	r1, sp, #32
 800e226:	7c20      	ldrb	r0, [r4, #16]
 800e228:	f001 f800 	bl	800f22c <RegionGetPhyParam>
 800e22c:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800e22e:	fa4f fa80 	sxtb.w	sl, r0
 800e232:	e7cf      	b.n	800e1d4 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800e234:	2302      	movs	r3, #2
 800e236:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800e23a:	a903      	add	r1, sp, #12
 800e23c:	7c20      	ldrb	r0, [r4, #16]
 800e23e:	f001 f81b 	bl	800f278 <RegionInitDefaults>
                    nbTrans = 1;
 800e242:	f04f 0b01 	mov.w	fp, #1
 800e246:	e7d9      	b.n	800e1fc <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800e248:	f8dd 9000 	ldr.w	r9, [sp]
 800e24c:	e79c      	b.n	800e188 <LoRaMacAdrCalcNext+0x28>
 800e24e:	f8dd 9000 	ldr.w	r9, [sp]
 800e252:	e799      	b.n	800e188 <LoRaMacAdrCalcNext+0x28>

0800e254 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e254:	4770      	bx	lr

0800e256 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e256:	4770      	bx	lr

0800e258 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e258:	4770      	bx	lr

0800e25a <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e25a:	4770      	bx	lr

0800e25c <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e25c:	2000      	movs	r0, #0
 800e25e:	4770      	bx	lr

0800e260 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e260:	4770      	bx	lr

0800e262 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e262:	4770      	bx	lr

0800e264 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e264:	4770      	bx	lr

0800e266 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e266:	2000      	movs	r0, #0
 800e268:	4770      	bx	lr

0800e26a <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e26a:	2000      	movs	r0, #0
 800e26c:	4770      	bx	lr

0800e26e <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e26e:	2000      	movs	r0, #0
 800e270:	4770      	bx	lr

0800e272 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e272:	2000      	movs	r0, #0
 800e274:	4770      	bx	lr

0800e276 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e276:	2000      	movs	r0, #0
 800e278:	4770      	bx	lr

0800e27a <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e27a:	4770      	bx	lr

0800e27c <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e27c:	4770      	bx	lr

0800e27e <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e27e:	4770      	bx	lr

0800e280 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e280:	2002      	movs	r0, #2
 800e282:	4770      	bx	lr

0800e284 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e284:	2002      	movs	r0, #2
 800e286:	4770      	bx	lr

0800e288 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e288:	2002      	movs	r0, #2
 800e28a:	4770      	bx	lr

0800e28c <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e28c:	4770      	bx	lr

0800e28e <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e28e:	2000      	movs	r0, #0
 800e290:	4770      	bx	lr

0800e292 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e292:	4770      	bx	lr

0800e294 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e294:	4770      	bx	lr

0800e296 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e296:	2000      	movs	r0, #0
 800e298:	4770      	bx	lr

0800e29a <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e29a:	2000      	movs	r0, #0
 800e29c:	4770      	bx	lr

0800e29e <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e29e:	4770      	bx	lr

0800e2a0 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e2a0:	4770      	bx	lr

0800e2a2 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800e2a2:	4770      	bx	lr

0800e2a4 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	2b0f      	cmp	r3, #15
 800e2a8:	d804      	bhi.n	800e2b4 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800e2aa:	5cc2      	ldrb	r2, [r0, r3]
 800e2ac:	b922      	cbnz	r2, 800e2b8 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	e7f8      	b.n	800e2a6 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800e2b4:	2001      	movs	r0, #1
 800e2b6:	4770      	bx	lr
            return false;
 800e2b8:	2000      	movs	r0, #0
}
 800e2ba:	4770      	bx	lr

0800e2bc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800e2bc:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800e2be:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800e2c0:	0125      	lsls	r5, r4, #4
 800e2c2:	f105 0308 	add.w	r3, r5, #8
 800e2c6:	4d06      	ldr	r5, [pc, #24]	; (800e2e0 <MallocNewMacCommandSlot+0x24>)
 800e2c8:	441d      	add	r5, r3
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	f7ff ffea 	bl	800e2a4 <IsSlotFree>
 800e2d0:	b920      	cbnz	r0, 800e2dc <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800e2d2:	3401      	adds	r4, #1
 800e2d4:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800e2d6:	2c20      	cmp	r4, #32
 800e2d8:	d1f2      	bne.n	800e2c0 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800e2da:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800e2dc:	4628      	mov	r0, r5
 800e2de:	bd38      	pop	{r3, r4, r5, pc}
 800e2e0:	20003a60 	.word	0x20003a60

0800e2e4 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800e2e4:	b120      	cbz	r0, 800e2f0 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800e2ea:	6042      	str	r2, [r0, #4]

    return true;
 800e2ec:	2001      	movs	r0, #1
 800e2ee:	4770      	bx	lr
        return false;
 800e2f0:	2000      	movs	r0, #0
}
 800e2f2:	4770      	bx	lr

0800e2f4 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	b160      	cbz	r0, 800e312 <LinkedListAdd+0x1e>
 800e2f8:	b169      	cbz	r1, 800e316 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800e2fa:	6802      	ldr	r2, [r0, #0]
 800e2fc:	b13a      	cbz	r2, 800e30e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	b102      	cbz	r2, 800e304 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800e302:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800e304:	2200      	movs	r2, #0
 800e306:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800e308:	6059      	str	r1, [r3, #4]

    return true;
 800e30a:	2001      	movs	r0, #1
 800e30c:	4770      	bx	lr
        list->First = element;
 800e30e:	6001      	str	r1, [r0, #0]
 800e310:	e7f5      	b.n	800e2fe <LinkedListAdd+0xa>
        return false;
 800e312:	2000      	movs	r0, #0
 800e314:	4770      	bx	lr
 800e316:	2000      	movs	r0, #0
}
 800e318:	4770      	bx	lr

0800e31a <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800e31a:	b160      	cbz	r0, 800e336 <LinkedListGetPrevious+0x1c>
 800e31c:	b161      	cbz	r1, 800e338 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800e31e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800e320:	4281      	cmp	r1, r0
 800e322:	d102      	bne.n	800e32a <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800e324:	2000      	movs	r0, #0
    }

    return curElement;
}
 800e326:	4770      	bx	lr
            curElement = curElement->Next;
 800e328:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d0fb      	beq.n	800e326 <LinkedListGetPrevious+0xc>
 800e32e:	6803      	ldr	r3, [r0, #0]
 800e330:	428b      	cmp	r3, r1
 800e332:	d1f9      	bne.n	800e328 <LinkedListGetPrevious+0xe>
 800e334:	4770      	bx	lr
 800e336:	4770      	bx	lr
        return NULL;
 800e338:	4608      	mov	r0, r1
 800e33a:	4770      	bx	lr

0800e33c <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800e33c:	b1b8      	cbz	r0, 800e36e <LinkedListRemove+0x32>
{
 800e33e:	b538      	push	{r3, r4, r5, lr}
 800e340:	460c      	mov	r4, r1
 800e342:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800e344:	b1a9      	cbz	r1, 800e372 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800e346:	f7ff ffe8 	bl	800e31a <LinkedListGetPrevious>

    if( list->First == element )
 800e34a:	682b      	ldr	r3, [r5, #0]
 800e34c:	42a3      	cmp	r3, r4
 800e34e:	d009      	beq.n	800e364 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800e350:	686b      	ldr	r3, [r5, #4]
 800e352:	42a3      	cmp	r3, r4
 800e354:	d009      	beq.n	800e36a <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800e356:	b108      	cbz	r0, 800e35c <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800e35c:	2300      	movs	r3, #0
 800e35e:	6023      	str	r3, [r4, #0]

    return true;
 800e360:	2001      	movs	r0, #1
}
 800e362:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800e364:	6823      	ldr	r3, [r4, #0]
 800e366:	602b      	str	r3, [r5, #0]
 800e368:	e7f2      	b.n	800e350 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800e36a:	6068      	str	r0, [r5, #4]
 800e36c:	e7f3      	b.n	800e356 <LinkedListRemove+0x1a>
        return false;
 800e36e:	2000      	movs	r0, #0
}
 800e370:	4770      	bx	lr
        return false;
 800e372:	2000      	movs	r0, #0
 800e374:	e7f5      	b.n	800e362 <LinkedListRemove+0x26>
	...

0800e378 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800e378:	2811      	cmp	r0, #17
 800e37a:	d808      	bhi.n	800e38e <IsSticky+0x16>
 800e37c:	2301      	movs	r3, #1
 800e37e:	fa03 f000 	lsl.w	r0, r3, r0
 800e382:	4b04      	ldr	r3, [pc, #16]	; (800e394 <IsSticky+0x1c>)
 800e384:	4218      	tst	r0, r3
 800e386:	bf14      	ite	ne
 800e388:	2001      	movne	r0, #1
 800e38a:	2000      	moveq	r0, #0
 800e38c:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800e38e:	2000      	movs	r0, #0
    }
}
 800e390:	4770      	bx	lr
 800e392:	bf00      	nop
 800e394:	00020720 	.word	0x00020720

0800e398 <FreeMacCommandSlot>:
    if( slot == NULL )
 800e398:	b130      	cbz	r0, 800e3a8 <FreeMacCommandSlot+0x10>
{
 800e39a:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800e39c:	2210      	movs	r2, #16
 800e39e:	2100      	movs	r1, #0
 800e3a0:	f003 ffef 	bl	8012382 <memset1>
    return true;
 800e3a4:	2001      	movs	r0, #1
}
 800e3a6:	bd08      	pop	{r3, pc}
        return false;
 800e3a8:	2000      	movs	r0, #0
}
 800e3aa:	4770      	bx	lr

0800e3ac <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800e3ac:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800e3ae:	4c06      	ldr	r4, [pc, #24]	; (800e3c8 <LoRaMacCommandsInit+0x1c>)
 800e3b0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f003 ffe3 	bl	8012382 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f7ff ff91 	bl	800e2e4 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	bd10      	pop	{r4, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20003a60 	.word	0x20003a60

0800e3cc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800e3cc:	b301      	cbz	r1, 800e410 <LoRaMacCommandsAddCmd+0x44>
{
 800e3ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d0:	4605      	mov	r5, r0
 800e3d2:	4614      	mov	r4, r2
 800e3d4:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800e3d6:	f7ff ff71 	bl	800e2bc <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800e3da:	4606      	mov	r6, r0
 800e3dc:	b1d0      	cbz	r0, 800e414 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800e3de:	4601      	mov	r1, r0
 800e3e0:	480e      	ldr	r0, [pc, #56]	; (800e41c <LoRaMacCommandsAddCmd+0x50>)
 800e3e2:	f7ff ff87 	bl	800e2f4 <LinkedListAdd>
 800e3e6:	b1b8      	cbz	r0, 800e418 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800e3e8:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800e3ea:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800e3ec:	b2a2      	uxth	r2, r4
 800e3ee:	4639      	mov	r1, r7
 800e3f0:	1d70      	adds	r0, r6, #5
 800e3f2:	f003 ffae 	bl	8012352 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	f7ff ffbe 	bl	800e378 <IsSticky>
 800e3fc:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800e3fe:	4b07      	ldr	r3, [pc, #28]	; (800e41c <LoRaMacCommandsAddCmd+0x50>)
 800e400:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e404:	4414      	add	r4, r2
 800e406:	3401      	adds	r4, #1
 800e408:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800e40c:	2000      	movs	r0, #0
}
 800e40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e410:	2001      	movs	r0, #1
}
 800e412:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800e414:	2002      	movs	r0, #2
 800e416:	e7fa      	b.n	800e40e <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800e418:	2005      	movs	r0, #5
 800e41a:	e7f8      	b.n	800e40e <LoRaMacCommandsAddCmd+0x42>
 800e41c:	20003a60 	.word	0x20003a60

0800e420 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800e420:	b1a0      	cbz	r0, 800e44c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800e422:	b510      	push	{r4, lr}
 800e424:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800e426:	4601      	mov	r1, r0
 800e428:	480b      	ldr	r0, [pc, #44]	; (800e458 <LoRaMacCommandsRemoveCmd+0x38>)
 800e42a:	f7ff ff87 	bl	800e33c <LinkedListRemove>
 800e42e:	b178      	cbz	r0, 800e450 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800e430:	68a1      	ldr	r1, [r4, #8]
 800e432:	4a09      	ldr	r2, [pc, #36]	; (800e458 <LoRaMacCommandsRemoveCmd+0x38>)
 800e434:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800e438:	1a5b      	subs	r3, r3, r1
 800e43a:	3b01      	subs	r3, #1
 800e43c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800e440:	4620      	mov	r0, r4
 800e442:	f7ff ffa9 	bl	800e398 <FreeMacCommandSlot>
 800e446:	b128      	cbz	r0, 800e454 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800e448:	2000      	movs	r0, #0
}
 800e44a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e44c:	2001      	movs	r0, #1
}
 800e44e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800e450:	2003      	movs	r0, #3
 800e452:	e7fa      	b.n	800e44a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800e454:	2005      	movs	r0, #5
 800e456:	e7f8      	b.n	800e44a <LoRaMacCommandsRemoveCmd+0x2a>
 800e458:	20003a60 	.word	0x20003a60

0800e45c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800e45c:	4b0a      	ldr	r3, [pc, #40]	; (800e488 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800e45e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800e460:	b120      	cbz	r0, 800e46c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800e462:	7b03      	ldrb	r3, [r0, #12]
 800e464:	b11b      	cbz	r3, 800e46e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800e466:	6800      	ldr	r0, [r0, #0]
 800e468:	e7fa      	b.n	800e460 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800e46a:	bd10      	pop	{r4, pc}
 800e46c:	4770      	bx	lr
{
 800e46e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800e470:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800e472:	f7ff ffd5 	bl	800e420 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800e476:	4620      	mov	r0, r4
    while( curElement != NULL )
 800e478:	2800      	cmp	r0, #0
 800e47a:	d0f6      	beq.n	800e46a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800e47c:	7b03      	ldrb	r3, [r0, #12]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d0f6      	beq.n	800e470 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800e482:	6800      	ldr	r0, [r0, #0]
 800e484:	e7f8      	b.n	800e478 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800e486:	bf00      	nop
 800e488:	20003a60 	.word	0x20003a60

0800e48c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800e48c:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800e48e:	4b08      	ldr	r3, [pc, #32]	; (800e4b0 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800e490:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800e492:	e000      	b.n	800e496 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800e494:	462c      	mov	r4, r5
    while( curElement != NULL )
 800e496:	b14c      	cbz	r4, 800e4ac <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800e498:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800e49a:	7920      	ldrb	r0, [r4, #4]
 800e49c:	f7ff ff6c 	bl	800e378 <IsSticky>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d0f7      	beq.n	800e494 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f7ff ffbb 	bl	800e420 <LoRaMacCommandsRemoveCmd>
 800e4aa:	e7f3      	b.n	800e494 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800e4ac:	2000      	movs	r0, #0
 800e4ae:	bd38      	pop	{r3, r4, r5, pc}
 800e4b0:	20003a60 	.word	0x20003a60

0800e4b4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800e4b4:	b128      	cbz	r0, 800e4c2 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800e4b6:	4a04      	ldr	r2, [pc, #16]	; (800e4c8 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800e4b8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800e4bc:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800e4be:	2000      	movs	r0, #0
 800e4c0:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e4c2:	2001      	movs	r0, #1
}
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	20003a60 	.word	0x20003a60

0800e4cc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800e4d0:	4b16      	ldr	r3, [pc, #88]	; (800e52c <LoRaMacCommandsSerializeCmds+0x60>)
 800e4d2:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800e4d4:	b32a      	cbz	r2, 800e522 <LoRaMacCommandsSerializeCmds+0x56>
 800e4d6:	4607      	mov	r7, r0
 800e4d8:	4688      	mov	r8, r1
 800e4da:	4616      	mov	r6, r2
 800e4dc:	b319      	cbz	r1, 800e526 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800e4de:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800e4e0:	b194      	cbz	r4, 800e508 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800e4e2:	1a7a      	subs	r2, r7, r1
 800e4e4:	68a3      	ldr	r3, [r4, #8]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d30d      	bcc.n	800e508 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800e4ec:	1c4d      	adds	r5, r1, #1
 800e4ee:	b2ed      	uxtb	r5, r5
 800e4f0:	7923      	ldrb	r3, [r4, #4]
 800e4f2:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800e4f4:	8922      	ldrh	r2, [r4, #8]
 800e4f6:	1d61      	adds	r1, r4, #5
 800e4f8:	1970      	adds	r0, r6, r5
 800e4fa:	f003 ff2a 	bl	8012352 <memcpy1>
            itr += curElement->PayloadSize;
 800e4fe:	68a3      	ldr	r3, [r4, #8]
 800e500:	441d      	add	r5, r3
 800e502:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800e504:	6824      	ldr	r4, [r4, #0]
 800e506:	e7eb      	b.n	800e4e0 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800e508:	b12c      	cbz	r4, 800e516 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800e50a:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800e50c:	4620      	mov	r0, r4
 800e50e:	f7ff ff87 	bl	800e420 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800e512:	462c      	mov	r4, r5
 800e514:	e7f8      	b.n	800e508 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800e516:	4640      	mov	r0, r8
 800e518:	f7ff ffcc 	bl	800e4b4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800e51c:	2000      	movs	r0, #0
}
 800e51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e522:	2001      	movs	r0, #1
 800e524:	e7fb      	b.n	800e51e <LoRaMacCommandsSerializeCmds+0x52>
 800e526:	2001      	movs	r0, #1
 800e528:	e7f9      	b.n	800e51e <LoRaMacCommandsSerializeCmds+0x52>
 800e52a:	bf00      	nop
 800e52c:	20003a60 	.word	0x20003a60

0800e530 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800e530:	4601      	mov	r1, r0
 800e532:	b170      	cbz	r0, 800e552 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800e534:	4b08      	ldr	r3, [pc, #32]	; (800e558 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800e536:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800e538:	2200      	movs	r2, #0
 800e53a:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800e53c:	b13b      	cbz	r3, 800e54e <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800e53e:	7b1a      	ldrb	r2, [r3, #12]
 800e540:	b90a      	cbnz	r2, 800e546 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	e7fa      	b.n	800e53c <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800e546:	2301      	movs	r3, #1
 800e548:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800e54a:	2000      	movs	r0, #0
 800e54c:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800e54e:	2000      	movs	r0, #0
 800e550:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800e552:	2001      	movs	r0, #1
}
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	20003a60 	.word	0x20003a60

0800e55c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800e55c:	1e83      	subs	r3, r0, #2
 800e55e:	2b11      	cmp	r3, #17
 800e560:	d80a      	bhi.n	800e578 <LoRaMacCommandsGetCmdSize+0x1c>
 800e562:	e8df f003 	tbb	[pc, r3]
 800e566:	0b23      	.short	0x0b23
 800e568:	110f240d 	.word	0x110f240d
 800e56c:	09171513 	.word	0x09171513
 800e570:	09091909 	.word	0x09091909
 800e574:	211f1d1b 	.word	0x211f1d1b
 800e578:	2000      	movs	r0, #0
 800e57a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800e57c:	2005      	movs	r0, #5
            break;
 800e57e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800e580:	2002      	movs	r0, #2
            break;
 800e582:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800e584:	2001      	movs	r0, #1
            break;
 800e586:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800e588:	2006      	movs	r0, #6
            break;
 800e58a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800e58c:	2002      	movs	r0, #2
            break;
 800e58e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800e590:	2002      	movs	r0, #2
            break;
 800e592:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800e594:	2005      	movs	r0, #5
            break;
 800e596:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800e598:	2006      	movs	r0, #6
            break;
 800e59a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800e59c:	2001      	movs	r0, #1
            break;
 800e59e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800e5a0:	2005      	movs	r0, #5
            break;
 800e5a2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800e5a4:	2004      	movs	r0, #4
            break;
 800e5a6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800e5a8:	2004      	movs	r0, #4
            break;
 800e5aa:	4770      	bx	lr
            cidSize = 3;
 800e5ac:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800e5ae:	4770      	bx	lr

0800e5b0 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800e5b0:	4b03      	ldr	r3, [pc, #12]	; (800e5c0 <IncreaseBufferPointer+0x10>)
 800e5b2:	4298      	cmp	r0, r3
 800e5b4:	d001      	beq.n	800e5ba <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800e5b6:	3004      	adds	r0, #4
 800e5b8:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800e5ba:	4802      	ldr	r0, [pc, #8]	; (800e5c4 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	20003c88 	.word	0x20003c88
 800e5c4:	20003c78 	.word	0x20003c78

0800e5c8 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800e5c8:	b108      	cbz	r0, 800e5ce <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	4770      	bx	lr
        return true;
 800e5ce:	2001      	movs	r0, #1
}
 800e5d0:	4770      	bx	lr

0800e5d2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800e5d2:	2804      	cmp	r0, #4
 800e5d4:	d801      	bhi.n	800e5da <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	4770      	bx	lr
        return true;
 800e5da:	2001      	movs	r0, #1
}
 800e5dc:	4770      	bx	lr
	...

0800e5e0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800e5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5e2:	4606      	mov	r6, r0
 800e5e4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800e5e6:	4b0d      	ldr	r3, [pc, #52]	; (800e61c <GetElement+0x3c>)
 800e5e8:	f893 7020 	ldrb.w	r7, [r3, #32]
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	f7ff ffeb 	bl	800e5c8 <IsListEmpty>
 800e5f2:	b970      	cbnz	r0, 800e612 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800e5f4:	2500      	movs	r5, #0
 800e5f6:	42af      	cmp	r7, r5
 800e5f8:	d909      	bls.n	800e60e <GetElement+0x2e>
    {
        if( element->Request == request )
 800e5fa:	7823      	ldrb	r3, [r4, #0]
 800e5fc:	42b3      	cmp	r3, r6
 800e5fe:	d00a      	beq.n	800e616 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800e600:	4620      	mov	r0, r4
 800e602:	f7ff ffd5 	bl	800e5b0 <IncreaseBufferPointer>
 800e606:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800e608:	3501      	adds	r5, #1
 800e60a:	b2ed      	uxtb	r5, r5
 800e60c:	e7f3      	b.n	800e5f6 <GetElement+0x16>
    }

    return NULL;
 800e60e:	2000      	movs	r0, #0
}
 800e610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800e612:	2000      	movs	r0, #0
 800e614:	e7fc      	b.n	800e610 <GetElement+0x30>
            return element;
 800e616:	4620      	mov	r0, r4
 800e618:	e7fa      	b.n	800e610 <GetElement+0x30>
 800e61a:	bf00      	nop
 800e61c:	20003c6c 	.word	0x20003c6c

0800e620 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800e620:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800e622:	4c08      	ldr	r4, [pc, #32]	; (800e644 <LoRaMacConfirmQueueInit+0x24>)
 800e624:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800e62c:	f104 000c 	add.w	r0, r4, #12
 800e630:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800e632:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800e634:	2214      	movs	r2, #20
 800e636:	21ff      	movs	r1, #255	; 0xff
 800e638:	f003 fea3 	bl	8012382 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800e642:	bd10      	pop	{r4, pc}
 800e644:	20003c6c 	.word	0x20003c6c

0800e648 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800e64c:	4b0f      	ldr	r3, [pc, #60]	; (800e68c <LoRaMacConfirmQueueAdd+0x44>)
 800e64e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e652:	f7ff ffbe 	bl	800e5d2 <IsListFull>
 800e656:	b9b8      	cbnz	r0, 800e688 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800e658:	4c0c      	ldr	r4, [pc, #48]	; (800e68c <LoRaMacConfirmQueueAdd+0x44>)
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	782a      	ldrb	r2, [r5, #0]
 800e65e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800e660:	68a3      	ldr	r3, [r4, #8]
 800e662:	786a      	ldrb	r2, [r5, #1]
 800e664:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800e666:	68a3      	ldr	r3, [r4, #8]
 800e668:	78ea      	ldrb	r2, [r5, #3]
 800e66a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800e66c:	68a3      	ldr	r3, [r4, #8]
 800e66e:	78aa      	ldrb	r2, [r5, #2]
 800e670:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800e672:	f894 3020 	ldrb.w	r3, [r4, #32]
 800e676:	3301      	adds	r3, #1
 800e678:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800e67c:	68a0      	ldr	r0, [r4, #8]
 800e67e:	f7ff ff97 	bl	800e5b0 <IncreaseBufferPointer>
 800e682:	60a0      	str	r0, [r4, #8]

    return true;
 800e684:	2001      	movs	r0, #1
}
 800e686:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800e688:	2000      	movs	r0, #0
 800e68a:	e7fc      	b.n	800e686 <LoRaMacConfirmQueueAdd+0x3e>
 800e68c:	20003c6c 	.word	0x20003c6c

0800e690 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800e690:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800e692:	4b09      	ldr	r3, [pc, #36]	; (800e6b8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800e694:	f893 4020 	ldrb.w	r4, [r3, #32]
 800e698:	4620      	mov	r0, r4
 800e69a:	f7ff ff95 	bl	800e5c8 <IsListEmpty>
 800e69e:	b948      	cbnz	r0, 800e6b4 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800e6a0:	4d05      	ldr	r5, [pc, #20]	; (800e6b8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800e6a2:	3c01      	subs	r4, #1
 800e6a4:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800e6a8:	6868      	ldr	r0, [r5, #4]
 800e6aa:	f7ff ff81 	bl	800e5b0 <IncreaseBufferPointer>
 800e6ae:	6068      	str	r0, [r5, #4]

    return true;
 800e6b0:	2001      	movs	r0, #1
}
 800e6b2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	e7fc      	b.n	800e6b2 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800e6b8:	20003c6c 	.word	0x20003c6c

0800e6bc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4605      	mov	r5, r0
 800e6c0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800e6c2:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800e6c4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e6c8:	f7ff ff7e 	bl	800e5c8 <IsListEmpty>
 800e6cc:	b948      	cbnz	r0, 800e6e2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800e6ce:	4b05      	ldr	r3, [pc, #20]	; (800e6e4 <LoRaMacConfirmQueueSetStatus+0x28>)
 800e6d0:	689a      	ldr	r2, [r3, #8]
 800e6d2:	6859      	ldr	r1, [r3, #4]
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f7ff ff83 	bl	800e5e0 <GetElement>
        if( element != NULL )
 800e6da:	b110      	cbz	r0, 800e6e2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800e6dc:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800e6de:	2201      	movs	r2, #1
 800e6e0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800e6e2:	bd38      	pop	{r3, r4, r5, pc}
 800e6e4:	20003c6c 	.word	0x20003c6c

0800e6e8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800e6e8:	b510      	push	{r4, lr}
 800e6ea:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800e6ec:	4b09      	ldr	r3, [pc, #36]	; (800e714 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800e6ee:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e6f2:	f7ff ff69 	bl	800e5c8 <IsListEmpty>
 800e6f6:	b940      	cbnz	r0, 800e70a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800e6f8:	4b06      	ldr	r3, [pc, #24]	; (800e714 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800e6fa:	689a      	ldr	r2, [r3, #8]
 800e6fc:	6859      	ldr	r1, [r3, #4]
 800e6fe:	4620      	mov	r0, r4
 800e700:	f7ff ff6e 	bl	800e5e0 <GetElement>
        if( element != NULL )
 800e704:	b118      	cbz	r0, 800e70e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800e706:	7840      	ldrb	r0, [r0, #1]
 800e708:	e000      	b.n	800e70c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e70a:	2001      	movs	r0, #1
}
 800e70c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e70e:	2001      	movs	r0, #1
 800e710:	e7fc      	b.n	800e70c <LoRaMacConfirmQueueGetStatus+0x24>
 800e712:	bf00      	nop
 800e714:	20003c6c 	.word	0x20003c6c

0800e718 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800e71c:	4b0c      	ldr	r3, [pc, #48]	; (800e750 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800e71e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800e720:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800e724:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e728:	f7ff ff4e 	bl	800e5c8 <IsListEmpty>
 800e72c:	b150      	cbz	r0, 800e744 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800e72e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800e730:	2301      	movs	r3, #1
 800e732:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800e734:	4620      	mov	r0, r4
 800e736:	f7ff ff3b 	bl	800e5b0 <IncreaseBufferPointer>
 800e73a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800e73c:	4b04      	ldr	r3, [pc, #16]	; (800e750 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	4283      	cmp	r3, r0
 800e742:	d0f4      	beq.n	800e72e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800e744:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800e746:	78e3      	ldrb	r3, [r4, #3]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1f3      	bne.n	800e734 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800e74c:	e7f0      	b.n	800e730 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800e74e:	bf00      	nop
 800e750:	20003c6c 	.word	0x20003c6c

0800e754 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800e754:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800e756:	4b04      	ldr	r3, [pc, #16]	; (800e768 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800e758:	689a      	ldr	r2, [r3, #8]
 800e75a:	6859      	ldr	r1, [r3, #4]
 800e75c:	f7ff ff40 	bl	800e5e0 <GetElement>
 800e760:	b100      	cbz	r0, 800e764 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800e762:	2001      	movs	r0, #1
    }
    return false;
}
 800e764:	bd08      	pop	{r3, pc}
 800e766:	bf00      	nop
 800e768:	20003c6c 	.word	0x20003c6c

0800e76c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800e76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e76e:	b083      	sub	sp, #12
 800e770:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800e772:	4b16      	ldr	r3, [pc, #88]	; (800e7cc <LoRaMacConfirmQueueHandleCb+0x60>)
 800e774:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800e778:	2400      	movs	r4, #0
 800e77a:	e00d      	b.n	800e798 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800e77c:	781a      	ldrb	r2, [r3, #0]
 800e77e:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800e782:	785a      	ldrb	r2, [r3, #1]
 800e784:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800e788:	78db      	ldrb	r3, [r3, #3]
 800e78a:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800e78e:	f7ff ff7f 	bl	800e690 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800e792:	b1a5      	cbz	r5, 800e7be <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800e794:	3401      	adds	r4, #1
 800e796:	b2e4      	uxtb	r4, r4
 800e798:	42bc      	cmp	r4, r7
 800e79a:	d214      	bcs.n	800e7c6 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800e79c:	4b0b      	ldr	r3, [pc, #44]	; (800e7cc <LoRaMacConfirmQueueHandleCb+0x60>)
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	7812      	ldrb	r2, [r2, #0]
 800e7a2:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800e7a4:	685a      	ldr	r2, [r3, #4]
 800e7a6:	7852      	ldrb	r2, [r2, #1]
 800e7a8:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800e7ae:	2d00      	cmp	r5, #0
 800e7b0:	d0e4      	beq.n	800e77c <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800e7b2:	4b06      	ldr	r3, [pc, #24]	; (800e7cc <LoRaMacConfirmQueueHandleCb+0x60>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	689b      	ldr	r3, [r3, #8]
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	4798      	blx	r3
 800e7bc:	e7e7      	b.n	800e78e <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800e7be:	a801      	add	r0, sp, #4
 800e7c0:	f7ff ff42 	bl	800e648 <LoRaMacConfirmQueueAdd>
 800e7c4:	e7e6      	b.n	800e794 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800e7c6:	b003      	add	sp, #12
 800e7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	20003c6c 	.word	0x20003c6c

0800e7d0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800e7d0:	4b01      	ldr	r3, [pc, #4]	; (800e7d8 <LoRaMacConfirmQueueGetCnt+0x8>)
 800e7d2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e7d6:	4770      	bx	lr
 800e7d8:	20003c6c 	.word	0x20003c6c

0800e7dc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800e7dc:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800e7de:	4b03      	ldr	r3, [pc, #12]	; (800e7ec <LoRaMacConfirmQueueIsFull+0x10>)
 800e7e0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800e7e4:	f7ff fef5 	bl	800e5d2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800e7e8:	bd08      	pop	{r3, pc}
 800e7ea:	bf00      	nop
 800e7ec:	20003c6c 	.word	0x20003c6c

0800e7f0 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800e7f0:	b410      	push	{r4}
 800e7f2:	9c01      	ldr	r4, [sp, #4]
 800e7f4:	9902      	ldr	r1, [sp, #8]
 800e7f6:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800e7f8:	b1da      	cbz	r2, 800e832 <PrepareB0+0x42>
 800e7fa:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800e7fc:	2049      	movs	r0, #73	; 0x49
 800e7fe:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800e800:	2000      	movs	r0, #0
 800e802:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800e804:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800e806:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800e808:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800e80a:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800e80c:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800e80e:	0a23      	lsrs	r3, r4, #8
 800e810:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800e812:	0c23      	lsrs	r3, r4, #16
 800e814:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800e816:	0e24      	lsrs	r4, r4, #24
 800e818:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800e81a:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800e81c:	0a0b      	lsrs	r3, r1, #8
 800e81e:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800e820:	0c0b      	lsrs	r3, r1, #16
 800e822:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800e824:	0e09      	lsrs	r1, r1, #24
 800e826:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800e828:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800e82a:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800e82e:	bc10      	pop	{r4}
 800e830:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e832:	2009      	movs	r0, #9
 800e834:	e7fb      	b.n	800e82e <PrepareB0+0x3e>
	...

0800e838 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800e838:	2300      	movs	r3, #0
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d80e      	bhi.n	800e85c <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800e83e:	469c      	mov	ip, r3
 800e840:	4a07      	ldr	r2, [pc, #28]	; (800e860 <GetKeyAddrItem+0x28>)
 800e842:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800e846:	4282      	cmp	r2, r0
 800e848:	d002      	beq.n	800e850 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800e84a:	3301      	adds	r3, #1
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	e7f4      	b.n	800e83a <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800e850:	4b03      	ldr	r3, [pc, #12]	; (800e860 <GetKeyAddrItem+0x28>)
 800e852:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800e856:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800e858:	2000      	movs	r0, #0
 800e85a:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800e85c:	200b      	movs	r0, #11
}
 800e85e:	4770      	bx	lr
 800e860:	20000104 	.word	0x20000104

0800e864 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800e864:	460b      	mov	r3, r1
 800e866:	2900      	cmp	r1, #0
 800e868:	d024      	beq.n	800e8b4 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800e86a:	3801      	subs	r0, #1
 800e86c:	2803      	cmp	r0, #3
 800e86e:	d823      	bhi.n	800e8b8 <GetLastFcntDown+0x54>
 800e870:	e8df f000 	tbb	[pc, r0]
 800e874:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800e878:	4a10      	ldr	r2, [pc, #64]	; (800e8bc <GetLastFcntDown+0x58>)
 800e87a:	6812      	ldr	r2, [r2, #0]
 800e87c:	6911      	ldr	r1, [r2, #16]
 800e87e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800e880:	6913      	ldr	r3, [r2, #16]
 800e882:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800e884:	2000      	movs	r0, #0
            break;
 800e886:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800e888:	4a0c      	ldr	r2, [pc, #48]	; (800e8bc <GetLastFcntDown+0x58>)
 800e88a:	6812      	ldr	r2, [r2, #0]
 800e88c:	6951      	ldr	r1, [r2, #20]
 800e88e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800e890:	6953      	ldr	r3, [r2, #20]
 800e892:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800e894:	2000      	movs	r0, #0
            break;
 800e896:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800e898:	4a08      	ldr	r2, [pc, #32]	; (800e8bc <GetLastFcntDown+0x58>)
 800e89a:	6812      	ldr	r2, [r2, #0]
 800e89c:	6991      	ldr	r1, [r2, #24]
 800e89e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800e8a0:	6993      	ldr	r3, [r2, #24]
 800e8a2:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800e8a4:	2000      	movs	r0, #0
            break;
 800e8a6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800e8a8:	4a04      	ldr	r2, [pc, #16]	; (800e8bc <GetLastFcntDown+0x58>)
 800e8aa:	6812      	ldr	r2, [r2, #0]
 800e8ac:	69d2      	ldr	r2, [r2, #28]
 800e8ae:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800e8b0:	2000      	movs	r0, #0
            break;
 800e8b2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e8b4:	2009      	movs	r0, #9
 800e8b6:	4770      	bx	lr
    switch( fCntID )
 800e8b8:	2005      	movs	r0, #5
}
 800e8ba:	4770      	bx	lr
 800e8bc:	20003c90 	.word	0x20003c90

0800e8c0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800e8c0:	b510      	push	{r4, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800e8ca:	a901      	add	r1, sp, #4
 800e8cc:	f7ff ffca 	bl	800e864 <GetLastFcntDown>
 800e8d0:	b948      	cbnz	r0, 800e8e6 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800e8d2:	9b01      	ldr	r3, [sp, #4]
 800e8d4:	42a3      	cmp	r3, r4
 800e8d6:	d309      	bcc.n	800e8ec <CheckFCntDown+0x2c>
 800e8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8dc:	d001      	beq.n	800e8e2 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800e8de:	2000      	movs	r0, #0
 800e8e0:	e002      	b.n	800e8e8 <CheckFCntDown+0x28>
        return true;
 800e8e2:	2001      	movs	r0, #1
 800e8e4:	e000      	b.n	800e8e8 <CheckFCntDown+0x28>
        return false;
 800e8e6:	2000      	movs	r0, #0
    }
}
 800e8e8:	b002      	add	sp, #8
 800e8ea:	bd10      	pop	{r4, pc}
        return true;
 800e8ec:	2001      	movs	r0, #1
 800e8ee:	e7fb      	b.n	800e8e8 <CheckFCntDown+0x28>

0800e8f0 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800e8f0:	3801      	subs	r0, #1
 800e8f2:	2803      	cmp	r0, #3
 800e8f4:	d812      	bhi.n	800e91c <UpdateFCntDown+0x2c>
 800e8f6:	e8df f000 	tbb	[pc, r0]
 800e8fa:	0602      	.short	0x0602
 800e8fc:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800e8fe:	4b08      	ldr	r3, [pc, #32]	; (800e920 <UpdateFCntDown+0x30>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	6119      	str	r1, [r3, #16]
            break;
 800e904:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800e906:	4b06      	ldr	r3, [pc, #24]	; (800e920 <UpdateFCntDown+0x30>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	6159      	str	r1, [r3, #20]
            break;
 800e90c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800e90e:	4b04      	ldr	r3, [pc, #16]	; (800e920 <UpdateFCntDown+0x30>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	6199      	str	r1, [r3, #24]
            break;
 800e914:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800e916:	4b02      	ldr	r3, [pc, #8]	; (800e920 <UpdateFCntDown+0x30>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	20003c90 	.word	0x20003c90

0800e924 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800e924:	4b0a      	ldr	r3, [pc, #40]	; (800e950 <ResetFCnts+0x2c>)
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	2300      	movs	r3, #0
 800e92a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800e92c:	f04f 31ff 	mov.w	r1, #4294967295
 800e930:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800e932:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800e934:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800e936:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dd00      	ble.n	800e93e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800e93c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800e93e:	1d99      	adds	r1, r3, #6
 800e940:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800e944:	f04f 30ff 	mov.w	r0, #4294967295
 800e948:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e94a:	3301      	adds	r3, #1
 800e94c:	e7f4      	b.n	800e938 <ResetFCnts+0x14>
 800e94e:	bf00      	nop
 800e950:	20003c90 	.word	0x20003c90

0800e954 <ComputeCmacB0>:
{
 800e954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e958:	b088      	sub	sp, #32
 800e95a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800e95c:	b1f0      	cbz	r0, 800e99c <ComputeCmacB0+0x48>
 800e95e:	460c      	mov	r4, r1
 800e960:	4615      	mov	r5, r2
 800e962:	461a      	mov	r2, r3
 800e964:	4680      	mov	r8, r0
 800e966:	b1de      	cbz	r6, 800e9a0 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800e968:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e96c:	d81a      	bhi.n	800e9a4 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800e96e:	af04      	add	r7, sp, #16
 800e970:	9702      	str	r7, [sp, #8]
 800e972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e974:	9301      	str	r3, [sp, #4]
 800e976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800e97e:	4629      	mov	r1, r5
 800e980:	4620      	mov	r0, r4
 800e982:	f7ff ff35 	bl	800e7f0 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800e986:	9600      	str	r6, [sp, #0]
 800e988:	462b      	mov	r3, r5
 800e98a:	4622      	mov	r2, r4
 800e98c:	4641      	mov	r1, r8
 800e98e:	4638      	mov	r0, r7
 800e990:	f003 fb87 	bl	80120a2 <SecureElementComputeAesCmac>
 800e994:	b940      	cbnz	r0, 800e9a8 <ComputeCmacB0+0x54>
}
 800e996:	b008      	add	sp, #32
 800e998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e99c:	2009      	movs	r0, #9
 800e99e:	e7fa      	b.n	800e996 <ComputeCmacB0+0x42>
 800e9a0:	2009      	movs	r0, #9
 800e9a2:	e7f8      	b.n	800e996 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800e9a4:	200d      	movs	r0, #13
 800e9a6:	e7f6      	b.n	800e996 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800e9a8:	200e      	movs	r0, #14
 800e9aa:	e7f4      	b.n	800e996 <ComputeCmacB0+0x42>

0800e9ac <DeriveSessionKey10x>:
{
 800e9ac:	b510      	push	{r4, lr}
 800e9ae:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800e9b0:	2400      	movs	r4, #0
 800e9b2:	9400      	str	r4, [sp, #0]
 800e9b4:	9401      	str	r4, [sp, #4]
 800e9b6:	9402      	str	r4, [sp, #8]
 800e9b8:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800e9ba:	2802      	cmp	r0, #2
 800e9bc:	d003      	beq.n	800e9c6 <DeriveSessionKey10x+0x1a>
 800e9be:	2803      	cmp	r0, #3
 800e9c0:	d025      	beq.n	800ea0e <DeriveSessionKey10x+0x62>
 800e9c2:	200a      	movs	r0, #10
 800e9c4:	e021      	b.n	800ea0a <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800e9c6:	2401      	movs	r4, #1
 800e9c8:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800e9cc:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800e9d0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800e9d4:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800e9d8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800e9dc:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800e9e0:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800e9e4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800e9e8:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800e9ec:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800e9f0:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800e9f4:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800e9f8:	0a1b      	lsrs	r3, r3, #8
 800e9fa:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800e9fe:	4602      	mov	r2, r0
 800ea00:	2101      	movs	r1, #1
 800ea02:	4668      	mov	r0, sp
 800ea04:	f003 fbec 	bl	80121e0 <SecureElementDeriveAndStoreKey>
 800ea08:	b928      	cbnz	r0, 800ea16 <DeriveSessionKey10x+0x6a>
}
 800ea0a:	b004      	add	sp, #16
 800ea0c:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800ea0e:	2402      	movs	r4, #2
 800ea10:	f88d 4000 	strb.w	r4, [sp]
            break;
 800ea14:	e7da      	b.n	800e9cc <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ea16:	200e      	movs	r0, #14
 800ea18:	e7f7      	b.n	800ea0a <DeriveSessionKey10x+0x5e>

0800ea1a <PayloadEncrypt>:
{
 800ea1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea1e:	b088      	sub	sp, #32
 800ea20:	4690      	mov	r8, r2
 800ea22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800ea24:	2800      	cmp	r0, #0
 800ea26:	d052      	beq.n	800eace <PayloadEncrypt+0xb4>
 800ea28:	460d      	mov	r5, r1
 800ea2a:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800ea2c:	2600      	movs	r6, #0
 800ea2e:	9604      	str	r6, [sp, #16]
 800ea30:	9605      	str	r6, [sp, #20]
 800ea32:	9606      	str	r6, [sp, #24]
 800ea34:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800ea36:	9600      	str	r6, [sp, #0]
 800ea38:	9601      	str	r6, [sp, #4]
 800ea3a:	9602      	str	r6, [sp, #8]
 800ea3c:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800ea3e:	2701      	movs	r7, #1
 800ea40:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800ea44:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800ea48:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800ea4c:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800ea50:	0a19      	lsrs	r1, r3, #8
 800ea52:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800ea56:	0c19      	lsrs	r1, r3, #16
 800ea58:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800ea5c:	0e1b      	lsrs	r3, r3, #24
 800ea5e:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800ea62:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800ea66:	0a13      	lsrs	r3, r2, #8
 800ea68:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800ea6c:	0c13      	lsrs	r3, r2, #16
 800ea6e:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800ea72:	0e12      	lsrs	r2, r2, #24
 800ea74:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800ea78:	e014      	b.n	800eaa4 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800ea7a:	18f2      	adds	r2, r6, r3
 800ea7c:	5ca0      	ldrb	r0, [r4, r2]
 800ea7e:	f103 0120 	add.w	r1, r3, #32
 800ea82:	4469      	add	r1, sp
 800ea84:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800ea88:	4048      	eors	r0, r1
 800ea8a:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	b2db      	uxtb	r3, r3
 800ea90:	462a      	mov	r2, r5
 800ea92:	2d10      	cmp	r5, #16
 800ea94:	bfa8      	it	ge
 800ea96:	2210      	movge	r2, #16
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	dbee      	blt.n	800ea7a <PayloadEncrypt+0x60>
        size -= 16;
 800ea9c:	3d10      	subs	r5, #16
 800ea9e:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800eaa0:	3610      	adds	r6, #16
 800eaa2:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800eaa4:	2d00      	cmp	r5, #0
 800eaa6:	dd0e      	ble.n	800eac6 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800eaa8:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800eaac:	3701      	adds	r7, #1
 800eaae:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800eab0:	ab04      	add	r3, sp, #16
 800eab2:	4642      	mov	r2, r8
 800eab4:	2110      	movs	r1, #16
 800eab6:	4668      	mov	r0, sp
 800eab8:	f003 fb18 	bl	80120ec <SecureElementAesEncrypt>
 800eabc:	4603      	mov	r3, r0
 800eabe:	2800      	cmp	r0, #0
 800eac0:	d0e6      	beq.n	800ea90 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800eac2:	200e      	movs	r0, #14
 800eac4:	e000      	b.n	800eac8 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800eac6:	2000      	movs	r0, #0
}
 800eac8:	b008      	add	sp, #32
 800eaca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eace:	2009      	movs	r0, #9
 800ead0:	e7fa      	b.n	800eac8 <PayloadEncrypt+0xae>

0800ead2 <VerifyCmacB0>:
    if( msg == 0 )
 800ead2:	b370      	cbz	r0, 800eb32 <VerifyCmacB0+0x60>
{
 800ead4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead8:	b0c8      	sub	sp, #288	; 0x120
 800eada:	460c      	mov	r4, r1
 800eadc:	4615      	mov	r5, r2
 800eade:	461e      	mov	r6, r3
 800eae0:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800eae2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800eae6:	d826      	bhi.n	800eb36 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800eae8:	af04      	add	r7, sp, #16
 800eaea:	f44f 7288 	mov.w	r2, #272	; 0x110
 800eaee:	2100      	movs	r1, #0
 800eaf0:	4638      	mov	r0, r7
 800eaf2:	f003 fc46 	bl	8012382 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800eaf6:	9702      	str	r7, [sp, #8]
 800eaf8:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800eafa:	9301      	str	r3, [sp, #4]
 800eafc:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800eb04:	4632      	mov	r2, r6
 800eb06:	4629      	mov	r1, r5
 800eb08:	4620      	mov	r0, r4
 800eb0a:	f7ff fe71 	bl	800e7f0 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800eb0e:	4622      	mov	r2, r4
 800eb10:	4641      	mov	r1, r8
 800eb12:	a808      	add	r0, sp, #32
 800eb14:	f003 fc1d 	bl	8012352 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800eb18:	f104 0110 	add.w	r1, r4, #16
 800eb1c:	462b      	mov	r3, r5
 800eb1e:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800eb20:	b289      	uxth	r1, r1
 800eb22:	4638      	mov	r0, r7
 800eb24:	f003 facc 	bl	80120c0 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800eb28:	b130      	cbz	r0, 800eb38 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800eb2a:	2801      	cmp	r0, #1
 800eb2c:	d004      	beq.n	800eb38 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800eb2e:	200e      	movs	r0, #14
 800eb30:	e002      	b.n	800eb38 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eb32:	2009      	movs	r0, #9
}
 800eb34:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800eb36:	200d      	movs	r0, #13
}
 800eb38:	b048      	add	sp, #288	; 0x120
 800eb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800eb40 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800eb40:	b188      	cbz	r0, 800eb66 <LoRaMacCryptoInit+0x26>
{
 800eb42:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800eb44:	4c09      	ldr	r4, [pc, #36]	; (800eb6c <LoRaMacCryptoInit+0x2c>)
 800eb46:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800eb48:	2228      	movs	r2, #40	; 0x28
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	f003 fc19 	bl	8012382 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	2201      	movs	r2, #1
 800eb54:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800eb56:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800eb58:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800eb5a:	2400      	movs	r4, #0
 800eb5c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800eb5e:	f7ff fee1 	bl	800e924 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800eb62:	4620      	mov	r0, r4
}
 800eb64:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800eb66:	2008      	movs	r0, #8
}
 800eb68:	4770      	bx	lr
 800eb6a:	bf00      	nop
 800eb6c:	20003c90 	.word	0x20003c90

0800eb70 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800eb70:	4b02      	ldr	r3, [pc, #8]	; (800eb7c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800eb76:	2000      	movs	r0, #0
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop
 800eb7c:	20003c90 	.word	0x20003c90

0800eb80 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800eb80:	b130      	cbz	r0, 800eb90 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800eb82:	4b04      	ldr	r3, [pc, #16]	; (800eb94 <LoRaMacCryptoGetFCntUp+0x14>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	3301      	adds	r3, #1
 800eb8a:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800eb90:	2009      	movs	r0, #9
}
 800eb92:	4770      	bx	lr
 800eb94:	20003c90 	.word	0x20003c90

0800eb98 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800eb98:	b530      	push	{r4, r5, lr}
 800eb9a:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800eba0:	b1f2      	cbz	r2, 800ebe0 <LoRaMacCryptoGetFCntDown+0x48>
 800eba2:	460c      	mov	r4, r1
 800eba4:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800eba6:	a901      	add	r1, sp, #4
 800eba8:	f7ff fe5c 	bl	800e864 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ebac:	b948      	cbnz	r0, 800ebc2 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800ebae:	9b01      	ldr	r3, [sp, #4]
 800ebb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb4:	d007      	beq.n	800ebc6 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800ebba:	2a00      	cmp	r2, #0
 800ebbc:	dd05      	ble.n	800ebca <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800ebbe:	4413      	add	r3, r2
 800ebc0:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ebc2:	b003      	add	sp, #12
 800ebc4:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800ebc6:	602c      	str	r4, [r5, #0]
 800ebc8:	e7fb      	b.n	800ebc2 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800ebca:	b132      	cbz	r2, 800ebda <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800ebcc:	0c1b      	lsrs	r3, r3, #16
 800ebce:	041b      	lsls	r3, r3, #16
 800ebd0:	4423      	add	r3, r4
 800ebd2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ebd6:	602b      	str	r3, [r5, #0]
 800ebd8:	e7f3      	b.n	800ebc2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800ebda:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800ebdc:	2007      	movs	r0, #7
 800ebde:	e7f0      	b.n	800ebc2 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ebe0:	2009      	movs	r0, #9
 800ebe2:	e7ee      	b.n	800ebc2 <LoRaMacCryptoGetFCntDown+0x2a>

0800ebe4 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800ebe4:	4601      	mov	r1, r0
 800ebe6:	b908      	cbnz	r0, 800ebec <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ebe8:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ebea:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ebec:	2300      	movs	r3, #0
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	dd01      	ble.n	800ebf6 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800ebf2:	2000      	movs	r0, #0
 800ebf4:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800ebf6:	4a06      	ldr	r2, [pc, #24]	; (800ec10 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800ebf8:	6812      	ldr	r2, [r2, #0]
 800ebfa:	202c      	movs	r0, #44	; 0x2c
 800ebfc:	fb00 1003 	mla	r0, r0, r3, r1
 800ec00:	f103 0c06 	add.w	ip, r3, #6
 800ec04:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ec08:	3204      	adds	r2, #4
 800ec0a:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	e7ee      	b.n	800ebee <LoRaMacCryptoSetMulticastReference+0xa>
 800ec10:	20003c90 	.word	0x20003c90

0800ec14 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800ec14:	b1d8      	cbz	r0, 800ec4e <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800ec16:	b510      	push	{r4, lr}
 800ec18:	b082      	sub	sp, #8
 800ec1a:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800ec1c:	4b0f      	ldr	r3, [pc, #60]	; (800ec5c <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	8893      	ldrh	r3, [r2, #4]
 800ec22:	3301      	adds	r3, #1
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800ec28:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ec2a:	f000 fa2e 	bl	800f08a <LoRaMacSerializerJoinRequest>
 800ec2e:	b980      	cbnz	r0, 800ec52 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800ec30:	4623      	mov	r3, r4
 800ec32:	f853 1b18 	ldr.w	r1, [r3], #24
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	2301      	movs	r3, #1
 800ec3a:	2213      	movs	r2, #19
 800ec3c:	f003 fa31 	bl	80120a2 <SecureElementComputeAesCmac>
 800ec40:	b950      	cbnz	r0, 800ec58 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ec42:	4620      	mov	r0, r4
 800ec44:	f000 fa21 	bl	800f08a <LoRaMacSerializerJoinRequest>
 800ec48:	b120      	cbz	r0, 800ec54 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ec4a:	2010      	movs	r0, #16
 800ec4c:	e002      	b.n	800ec54 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ec4e:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ec50:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ec52:	2010      	movs	r0, #16
}
 800ec54:	b002      	add	sp, #8
 800ec56:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ec58:	200e      	movs	r0, #14
 800ec5a:	e7fb      	b.n	800ec54 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800ec5c:	20003c90 	.word	0x20003c90

0800ec60 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d036      	beq.n	800ecd2 <LoRaMacCryptoSecureMessage+0x72>
{
 800ec64:	b530      	push	{r4, r5, lr}
 800ec66:	b085      	sub	sp, #20
 800ec68:	4604      	mov	r4, r0
 800ec6a:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800ec6c:	4b1d      	ldr	r3, [pc, #116]	; (800ece4 <LoRaMacCryptoSecureMessage+0x84>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	4283      	cmp	r3, r0
 800ec74:	d82f      	bhi.n	800ecd6 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800ec76:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ec7a:	b342      	cbz	r2, 800ecce <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800ec7c:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800ec7e:	42a3      	cmp	r3, r4
 800ec80:	d209      	bcs.n	800ec96 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ec82:	9401      	str	r4, [sp, #4]
 800ec84:	2300      	movs	r3, #0
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	68ab      	ldr	r3, [r5, #8]
 800ec8a:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ec8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ec90:	f7ff fec3 	bl	800ea1a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ec94:	bb10      	cbnz	r0, 800ecdc <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ec96:	4628      	mov	r0, r5
 800ec98:	f000 fa2d 	bl	800f0f6 <LoRaMacSerializerData>
 800ec9c:	b9e8      	cbnz	r0, 800ecda <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ec9e:	7929      	ldrb	r1, [r5, #4]
 800eca0:	3904      	subs	r1, #4
 800eca2:	462b      	mov	r3, r5
 800eca4:	f853 0b2c 	ldr.w	r0, [r3], #44
 800eca8:	9303      	str	r3, [sp, #12]
 800ecaa:	9402      	str	r4, [sp, #8]
 800ecac:	68ab      	ldr	r3, [r5, #8]
 800ecae:	9301      	str	r3, [sp, #4]
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	2202      	movs	r2, #2
 800ecb6:	b289      	uxth	r1, r1
 800ecb8:	f7ff fe4c 	bl	800e954 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ecbc:	b970      	cbnz	r0, 800ecdc <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ecbe:	4628      	mov	r0, r5
 800ecc0:	f000 fa19 	bl	800f0f6 <LoRaMacSerializerData>
 800ecc4:	b960      	cbnz	r0, 800ece0 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ecc6:	4b07      	ldr	r3, [pc, #28]	; (800ece4 <LoRaMacCryptoSecureMessage+0x84>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800eccc:	e006      	b.n	800ecdc <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800ecce:	2202      	movs	r2, #2
 800ecd0:	e7d5      	b.n	800ec7e <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ecd2:	2009      	movs	r0, #9
}
 800ecd4:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ecd6:	2006      	movs	r0, #6
 800ecd8:	e000      	b.n	800ecdc <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ecda:	2010      	movs	r0, #16
}
 800ecdc:	b005      	add	sp, #20
 800ecde:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ece0:	2010      	movs	r0, #16
 800ece2:	e7fb      	b.n	800ecdc <LoRaMacCryptoSecureMessage+0x7c>
 800ece4:	20003c90 	.word	0x20003c90

0800ece8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800ece8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecec:	b087      	sub	sp, #28
 800ecee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800ecf0:	2e00      	cmp	r6, #0
 800ecf2:	d049      	beq.n	800ed88 <LoRaMacCryptoUnsecureMessage+0xa0>
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	4688      	mov	r8, r1
 800ecf8:	4617      	mov	r7, r2
 800ecfa:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	4610      	mov	r0, r2
 800ed00:	f7ff fdde 	bl	800e8c0 <CheckFCntDown>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d041      	beq.n	800ed8c <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ed08:	4630      	mov	r0, r6
 800ed0a:	f000 f95f 	bl	800efcc <LoRaMacParserData>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d141      	bne.n	800ed96 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800ed12:	a905      	add	r1, sp, #20
 800ed14:	4628      	mov	r0, r5
 800ed16:	f7ff fd8f 	bl	800e838 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d136      	bne.n	800ed8e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800ed20:	9b05      	ldr	r3, [sp, #20]
 800ed22:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800ed26:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800ed28:	68b3      	ldr	r3, [r6, #8]
 800ed2a:	4543      	cmp	r3, r8
 800ed2c:	d135      	bne.n	800ed9a <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800ed2e:	7b33      	ldrb	r3, [r6, #12]
 800ed30:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800ed34:	491a      	ldr	r1, [pc, #104]	; (800eda0 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800ed36:	6809      	ldr	r1, [r1, #0]
 800ed38:	7889      	ldrb	r1, [r1, #2]
 800ed3a:	b901      	cbnz	r1, 800ed3e <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800ed3c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ed3e:	7931      	ldrb	r1, [r6, #4]
 800ed40:	3904      	subs	r1, #4
 800ed42:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800ed44:	9003      	str	r0, [sp, #12]
 800ed46:	9402      	str	r4, [sp, #8]
 800ed48:	f8cd 8004 	str.w	r8, [sp, #4]
 800ed4c:	2001      	movs	r0, #1
 800ed4e:	9000      	str	r0, [sp, #0]
 800ed50:	b289      	uxth	r1, r1
 800ed52:	6830      	ldr	r0, [r6, #0]
 800ed54:	f7ff febd 	bl	800ead2 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ed58:	4605      	mov	r5, r0
 800ed5a:	b9c0      	cbnz	r0, 800ed8e <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800ed5c:	f896 3020 	ldrb.w	r3, [r6, #32]
 800ed60:	b90b      	cbnz	r3, 800ed66 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 800ed62:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800ed66:	9401      	str	r4, [sp, #4]
 800ed68:	2301      	movs	r3, #1
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	4643      	mov	r3, r8
 800ed6e:	464a      	mov	r2, r9
 800ed70:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800ed74:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800ed76:	f7ff fe50 	bl	800ea1a <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ed7a:	4605      	mov	r5, r0
 800ed7c:	b938      	cbnz	r0, 800ed8e <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 800ed7e:	4621      	mov	r1, r4
 800ed80:	4638      	mov	r0, r7
 800ed82:	f7ff fdb5 	bl	800e8f0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800ed86:	e002      	b.n	800ed8e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ed88:	2509      	movs	r5, #9
 800ed8a:	e000      	b.n	800ed8e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ed8c:	2506      	movs	r5, #6
}
 800ed8e:	4628      	mov	r0, r5
 800ed90:	b007      	add	sp, #28
 800ed92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ed96:	250f      	movs	r5, #15
 800ed98:	e7f9      	b.n	800ed8e <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800ed9a:	2502      	movs	r5, #2
 800ed9c:	e7f7      	b.n	800ed8e <LoRaMacCryptoUnsecureMessage+0xa6>
 800ed9e:	bf00      	nop
 800eda0:	20003c90 	.word	0x20003c90

0800eda4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 800eda4:	b9b1      	cbnz	r1, 800edd4 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 800eda6:	b500      	push	{lr}
 800eda8:	b085      	sub	sp, #20
 800edaa:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800edac:	2300      	movs	r3, #0
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	9301      	str	r3, [sp, #4]
 800edb2:	9302      	str	r3, [sp, #8]
 800edb4:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 800edb6:	2801      	cmp	r0, #1
 800edb8:	d008      	beq.n	800edcc <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800edba:	2204      	movs	r2, #4
 800edbc:	4661      	mov	r1, ip
 800edbe:	4668      	mov	r0, sp
 800edc0:	f003 fa0e 	bl	80121e0 <SecureElementDeriveAndStoreKey>
 800edc4:	b940      	cbnz	r0, 800edd8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800edc6:	b005      	add	sp, #20
 800edc8:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 800edcc:	2320      	movs	r3, #32
 800edce:	f88d 3000 	strb.w	r3, [sp]
 800edd2:	e7f2      	b.n	800edba <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800edd4:	200a      	movs	r0, #10
}
 800edd6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800edd8:	200e      	movs	r0, #14
 800edda:	e7f4      	b.n	800edc6 <LoRaMacCryptoDeriveMcRootKey+0x22>

0800eddc <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 800eddc:	2804      	cmp	r0, #4
 800edde:	d001      	beq.n	800ede4 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ede0:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ede2:	4770      	bx	lr
{
 800ede4:	b500      	push	{lr}
 800ede6:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 800ede8:	2300      	movs	r3, #0
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	9301      	str	r3, [sp, #4]
 800edee:	9302      	str	r3, [sp, #8]
 800edf0:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800edf2:	227f      	movs	r2, #127	; 0x7f
 800edf4:	4601      	mov	r1, r0
 800edf6:	4668      	mov	r0, sp
 800edf8:	f003 f9f2 	bl	80121e0 <SecureElementDeriveAndStoreKey>
 800edfc:	b910      	cbnz	r0, 800ee04 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 800edfe:	b005      	add	sp, #20
 800ee00:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ee04:	200e      	movs	r0, #14
 800ee06:	e7fa      	b.n	800edfe <LoRaMacCryptoDeriveMcKEKey+0x22>

0800ee08 <LoRaMacCryptoSetKey>:
{
 800ee08:	b510      	push	{r4, lr}
 800ee0a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ee0c:	f003 f9a6 	bl	801215c <SecureElementSetKey>
 800ee10:	b978      	cbnz	r0, 800ee32 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 800ee12:	b104      	cbz	r4, 800ee16 <LoRaMacCryptoSetKey+0xe>
}
 800ee14:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ee16:	4b09      	ldr	r3, [pc, #36]	; (800ee3c <LoRaMacCryptoSetKey+0x34>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	7898      	ldrb	r0, [r3, #2]
 800ee1e:	f7ff ffc1 	bl	800eda4 <LoRaMacCryptoDeriveMcRootKey>
 800ee22:	b940      	cbnz	r0, 800ee36 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ee24:	2004      	movs	r0, #4
 800ee26:	f7ff ffd9 	bl	800eddc <LoRaMacCryptoDeriveMcKEKey>
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d0f2      	beq.n	800ee14 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ee2e:	200e      	movs	r0, #14
 800ee30:	e7f0      	b.n	800ee14 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ee32:	200e      	movs	r0, #14
 800ee34:	e7ee      	b.n	800ee14 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ee36:	200e      	movs	r0, #14
 800ee38:	e7ec      	b.n	800ee14 <LoRaMacCryptoSetKey+0xc>
 800ee3a:	bf00      	nop
 800ee3c:	20003c90 	.word	0x20003c90

0800ee40 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ee40:	2a00      	cmp	r2, #0
 800ee42:	d064      	beq.n	800ef0e <LoRaMacCryptoHandleJoinAccept+0xce>
{
 800ee44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee46:	b08f      	sub	sp, #60	; 0x3c
 800ee48:	4607      	mov	r7, r0
 800ee4a:	460d      	mov	r5, r1
 800ee4c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ee4e:	2900      	cmp	r1, #0
 800ee50:	d05f      	beq.n	800ef12 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800ee52:	2600      	movs	r6, #0
 800ee54:	9605      	str	r6, [sp, #20]
 800ee56:	221d      	movs	r2, #29
 800ee58:	4631      	mov	r1, r6
 800ee5a:	a806      	add	r0, sp, #24
 800ee5c:	f005 fe2c 	bl	8014ab8 <memset>
    uint8_t versionMinor         = 0;
 800ee60:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ee64:	4b2f      	ldr	r3, [pc, #188]	; (800ef24 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ee6a:	f10d 0313 	add.w	r3, sp, #19
 800ee6e:	9302      	str	r3, [sp, #8]
 800ee70:	ab05      	add	r3, sp, #20
 800ee72:	9301      	str	r3, [sp, #4]
 800ee74:	7923      	ldrb	r3, [r4, #4]
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	6823      	ldr	r3, [r4, #0]
 800ee7a:	4632      	mov	r2, r6
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	4638      	mov	r0, r7
 800ee80:	f003 f9ce 	bl	8012220 <SecureElementProcessJoinAccept>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d146      	bne.n	800ef16 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800ee88:	7922      	ldrb	r2, [r4, #4]
 800ee8a:	a905      	add	r1, sp, #20
 800ee8c:	6820      	ldr	r0, [r4, #0]
 800ee8e:	f003 fa60 	bl	8012352 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ee92:	4620      	mov	r0, r4
 800ee94:	f000 f848 	bl	800ef28 <LoRaMacParserJoinAccept>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	d13f      	bne.n	800ef1c <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800ee9c:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800ee9e:	79e3      	ldrb	r3, [r4, #7]
 800eea0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800eea4:	7a23      	ldrb	r3, [r4, #8]
 800eea6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800eeaa:	4b1e      	ldr	r3, [pc, #120]	; (800ef24 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	689a      	ldr	r2, [r3, #8]
 800eeb0:	42aa      	cmp	r2, r5
 800eeb2:	d035      	beq.n	800ef20 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800eeb4:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800eebc:	f7ff ff72 	bl	800eda4 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800eec0:	bb50      	cbnz	r0, 800ef18 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 800eec2:	2004      	movs	r0, #4
 800eec4:	f7ff ff8a 	bl	800eddc <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800eec8:	bb30      	cbnz	r0, 800ef18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 800eeca:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800eecc:	7aa2      	ldrb	r2, [r4, #10]
 800eece:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800eed2:	7ae4      	ldrb	r4, [r4, #11]
 800eed4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800eed8:	4633      	mov	r3, r6
 800eeda:	4622      	mov	r2, r4
 800eedc:	4629      	mov	r1, r5
 800eede:	2003      	movs	r0, #3
 800eee0:	f7ff fd64 	bl	800e9ac <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800eee4:	b9c0      	cbnz	r0, 800ef18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800eee6:	4633      	mov	r3, r6
 800eee8:	4622      	mov	r2, r4
 800eeea:	4629      	mov	r1, r5
 800eeec:	2002      	movs	r0, #2
 800eeee:	f7ff fd5d 	bl	800e9ac <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800eef2:	b988      	cbnz	r0, 800ef18 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800eef4:	4b0b      	ldr	r3, [pc, #44]	; (800ef24 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800eefc:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800eefe:	2200      	movs	r2, #0
 800ef00:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ef02:	f04f 32ff 	mov.w	r2, #4294967295
 800ef06:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ef08:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ef0a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800ef0c:	e004      	b.n	800ef18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ef0e:	2009      	movs	r0, #9
}
 800ef10:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ef12:	2009      	movs	r0, #9
 800ef14:	e000      	b.n	800ef18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ef16:	200e      	movs	r0, #14
}
 800ef18:	b00f      	add	sp, #60	; 0x3c
 800ef1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ef1c:	200f      	movs	r0, #15
 800ef1e:	e7fb      	b.n	800ef18 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800ef20:	2003      	movs	r0, #3
 800ef22:	e7f9      	b.n	800ef18 <LoRaMacCryptoHandleJoinAccept+0xd8>
 800ef24:	20003c90 	.word	0x20003c90

0800ef28 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d049      	beq.n	800efc0 <LoRaMacParserJoinAccept+0x98>
{
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ef30:	6801      	ldr	r1, [r0, #0]
 800ef32:	2900      	cmp	r1, #0
 800ef34:	d046      	beq.n	800efc4 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ef36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef3a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ef3c:	2203      	movs	r2, #3
 800ef3e:	3006      	adds	r0, #6
 800ef40:	f003 fa07 	bl	8012352 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ef44:	4620      	mov	r0, r4
 800ef46:	f850 1b09 	ldr.w	r1, [r0], #9
 800ef4a:	2203      	movs	r2, #3
 800ef4c:	3104      	adds	r1, #4
 800ef4e:	f003 fa00 	bl	8012352 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ef52:	6821      	ldr	r1, [r4, #0]
 800ef54:	79cb      	ldrb	r3, [r1, #7]
 800ef56:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ef58:	7a0a      	ldrb	r2, [r1, #8]
 800ef5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ef5e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ef60:	7a4a      	ldrb	r2, [r1, #9]
 800ef62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef66:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ef68:	7a8a      	ldrb	r2, [r1, #10]
 800ef6a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ef6e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800ef70:	7acb      	ldrb	r3, [r1, #11]
 800ef72:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ef74:	7b0b      	ldrb	r3, [r1, #12]
 800ef76:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800ef78:	7923      	ldrb	r3, [r4, #4]
 800ef7a:	2b21      	cmp	r3, #33	; 0x21
 800ef7c:	d018      	beq.n	800efb0 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800ef7e:	2b11      	cmp	r3, #17
 800ef80:	dc22      	bgt.n	800efc8 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ef82:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ef84:	6821      	ldr	r1, [r4, #0]
 800ef86:	f102 0c01 	add.w	ip, r2, #1
 800ef8a:	5c8b      	ldrb	r3, [r1, r2]
 800ef8c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ef8e:	1c90      	adds	r0, r2, #2
 800ef90:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800ef94:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ef98:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ef9a:	3203      	adds	r2, #3
 800ef9c:	5c08      	ldrb	r0, [r1, r0]
 800ef9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800efa2:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800efa4:	5c8a      	ldrb	r2, [r1, r2]
 800efa6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800efaa:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800efac:	2000      	movs	r0, #0
}
 800efae:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800efb0:	2210      	movs	r2, #16
 800efb2:	310d      	adds	r1, #13
 800efb4:	f104 0012 	add.w	r0, r4, #18
 800efb8:	f003 f9cb 	bl	8012352 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800efbc:	221d      	movs	r2, #29
 800efbe:	e7e1      	b.n	800ef84 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800efc0:	2002      	movs	r0, #2
}
 800efc2:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800efc4:	2002      	movs	r0, #2
 800efc6:	e7f2      	b.n	800efae <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800efc8:	2001      	movs	r0, #1
 800efca:	e7f0      	b.n	800efae <LoRaMacParserJoinAccept+0x86>

0800efcc <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800efcc:	2800      	cmp	r0, #0
 800efce:	d058      	beq.n	800f082 <LoRaMacParserData+0xb6>
{
 800efd0:	b510      	push	{r4, lr}
 800efd2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800efd4:	6801      	ldr	r1, [r0, #0]
 800efd6:	2900      	cmp	r1, #0
 800efd8:	d055      	beq.n	800f086 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800efda:	780b      	ldrb	r3, [r1, #0]
 800efdc:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800efde:	784b      	ldrb	r3, [r1, #1]
 800efe0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800efe2:	788a      	ldrb	r2, [r1, #2]
 800efe4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800efe8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800efea:	78ca      	ldrb	r2, [r1, #3]
 800efec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eff0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800eff2:	790a      	ldrb	r2, [r1, #4]
 800eff4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eff8:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800effa:	794b      	ldrb	r3, [r1, #5]
 800effc:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800effe:	798b      	ldrb	r3, [r1, #6]
 800f000:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800f002:	79ca      	ldrb	r2, [r1, #7]
 800f004:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f008:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800f00a:	7b02      	ldrb	r2, [r0, #12]
 800f00c:	f002 020f 	and.w	r2, r2, #15
 800f010:	3108      	adds	r1, #8
 800f012:	3010      	adds	r0, #16
 800f014:	f003 f99d 	bl	8012352 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f018:	7b23      	ldrb	r3, [r4, #12]
 800f01a:	f003 030f 	and.w	r3, r3, #15
 800f01e:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800f022:	2200      	movs	r2, #0
 800f024:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800f028:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800f02c:	7922      	ldrb	r2, [r4, #4]
 800f02e:	1a11      	subs	r1, r2, r0
 800f030:	2904      	cmp	r1, #4
 800f032:	dc16      	bgt.n	800f062 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800f034:	6822      	ldr	r2, [r4, #0]
 800f036:	7923      	ldrb	r3, [r4, #4]
 800f038:	441a      	add	r2, r3
 800f03a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800f03e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800f040:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800f044:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f048:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800f04a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800f04e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800f052:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800f054:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800f058:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f05c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800f05e:	2000      	movs	r0, #0
}
 800f060:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800f062:	6821      	ldr	r1, [r4, #0]
 800f064:	3309      	adds	r3, #9
 800f066:	5c08      	ldrb	r0, [r1, r0]
 800f068:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800f06c:	1ad2      	subs	r2, r2, r3
 800f06e:	b2d2      	uxtb	r2, r2
 800f070:	3a04      	subs	r2, #4
 800f072:	b2d2      	uxtb	r2, r2
 800f074:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800f078:	4419      	add	r1, r3
 800f07a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f07c:	f003 f969 	bl	8012352 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800f080:	e7d8      	b.n	800f034 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800f082:	2002      	movs	r0, #2
}
 800f084:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800f086:	2002      	movs	r0, #2
 800f088:	e7ea      	b.n	800f060 <LoRaMacParserData+0x94>

0800f08a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f08a:	b370      	cbz	r0, 800f0ea <LoRaMacSerializerJoinRequest+0x60>
{
 800f08c:	b510      	push	{r4, lr}
 800f08e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f090:	6803      	ldr	r3, [r0, #0]
 800f092:	b363      	cbz	r3, 800f0ee <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800f094:	7902      	ldrb	r2, [r0, #4]
 800f096:	2a16      	cmp	r2, #22
 800f098:	d92b      	bls.n	800f0f2 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f09a:	7942      	ldrb	r2, [r0, #5]
 800f09c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800f09e:	4601      	mov	r1, r0
 800f0a0:	f851 0b06 	ldr.w	r0, [r1], #6
 800f0a4:	2208      	movs	r2, #8
 800f0a6:	3001      	adds	r0, #1
 800f0a8:	f003 f95e 	bl	8012368 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	f851 0b0e 	ldr.w	r0, [r1], #14
 800f0b2:	2208      	movs	r2, #8
 800f0b4:	3009      	adds	r0, #9
 800f0b6:	f003 f957 	bl	8012368 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800f0ba:	8ae2      	ldrh	r2, [r4, #22]
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800f0c0:	8ae3      	ldrh	r3, [r4, #22]
 800f0c2:	6822      	ldr	r2, [r4, #0]
 800f0c4:	0a1b      	lsrs	r3, r3, #8
 800f0c6:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f0c8:	69a2      	ldr	r2, [r4, #24]
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f0ce:	69a3      	ldr	r3, [r4, #24]
 800f0d0:	0a1b      	lsrs	r3, r3, #8
 800f0d2:	6822      	ldr	r2, [r4, #0]
 800f0d4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f0d6:	8b62      	ldrh	r2, [r4, #26]
 800f0d8:	6823      	ldr	r3, [r4, #0]
 800f0da:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f0dc:	7ee2      	ldrb	r2, [r4, #27]
 800f0de:	6823      	ldr	r3, [r4, #0]
 800f0e0:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800f0e2:	2317      	movs	r3, #23
 800f0e4:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f0e6:	2000      	movs	r0, #0
}
 800f0e8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f0ea:	2001      	movs	r0, #1
}
 800f0ec:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f0ee:	2001      	movs	r0, #1
 800f0f0:	e7fa      	b.n	800f0e8 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f0f2:	2002      	movs	r0, #2
 800f0f4:	e7f8      	b.n	800f0e8 <LoRaMacSerializerJoinRequest+0x5e>

0800f0f6 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	d066      	beq.n	800f1c8 <LoRaMacSerializerData+0xd2>
{
 800f0fa:	b538      	push	{r3, r4, r5, lr}
 800f0fc:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800f0fe:	6801      	ldr	r1, [r0, #0]
 800f100:	2900      	cmp	r1, #0
 800f102:	d063      	beq.n	800f1cc <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f104:	7b02      	ldrb	r2, [r0, #12]
 800f106:	f002 020f 	and.w	r2, r2, #15
 800f10a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800f10e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f112:	b10b      	cbz	r3, 800f118 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800f114:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800f118:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800f11a:	3304      	adds	r3, #4
 800f11c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800f11e:	7922      	ldrb	r2, [r4, #4]
 800f120:	429a      	cmp	r2, r3
 800f122:	d355      	bcc.n	800f1d0 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800f124:	7963      	ldrb	r3, [r4, #5]
 800f126:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800f128:	68a2      	ldr	r2, [r4, #8]
 800f12a:	6823      	ldr	r3, [r4, #0]
 800f12c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800f12e:	68a3      	ldr	r3, [r4, #8]
 800f130:	0a1b      	lsrs	r3, r3, #8
 800f132:	6822      	ldr	r2, [r4, #0]
 800f134:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800f136:	8962      	ldrh	r2, [r4, #10]
 800f138:	6823      	ldr	r3, [r4, #0]
 800f13a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800f13c:	7ae2      	ldrb	r2, [r4, #11]
 800f13e:	6823      	ldr	r3, [r4, #0]
 800f140:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800f142:	6823      	ldr	r3, [r4, #0]
 800f144:	7b22      	ldrb	r2, [r4, #12]
 800f146:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800f148:	89e2      	ldrh	r2, [r4, #14]
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800f14e:	89e3      	ldrh	r3, [r4, #14]
 800f150:	6822      	ldr	r2, [r4, #0]
 800f152:	0a1b      	lsrs	r3, r3, #8
 800f154:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800f156:	4621      	mov	r1, r4
 800f158:	f851 0b10 	ldr.w	r0, [r1], #16
 800f15c:	7b22      	ldrb	r2, [r4, #12]
 800f15e:	f002 020f 	and.w	r2, r2, #15
 800f162:	3008      	adds	r0, #8
 800f164:	f003 f8f5 	bl	8012352 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800f168:	7b23      	ldrb	r3, [r4, #12]
 800f16a:	f003 030f 	and.w	r3, r3, #15
 800f16e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800f172:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800f176:	b12a      	cbz	r2, 800f184 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800f178:	6822      	ldr	r2, [r4, #0]
 800f17a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800f17e:	5551      	strb	r1, [r2, r5]
 800f180:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800f184:	6820      	ldr	r0, [r4, #0]
 800f186:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800f18a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f18c:	4428      	add	r0, r5
 800f18e:	f003 f8e0 	bl	8012352 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800f192:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f196:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800f198:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f19a:	6821      	ldr	r1, [r4, #0]
 800f19c:	1c5a      	adds	r2, r3, #1
 800f19e:	b292      	uxth	r2, r2
 800f1a0:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800f1a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f1a4:	0a08      	lsrs	r0, r1, #8
 800f1a6:	6825      	ldr	r5, [r4, #0]
 800f1a8:	1c99      	adds	r1, r3, #2
 800f1aa:	b289      	uxth	r1, r1
 800f1ac:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800f1ae:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800f1b0:	6820      	ldr	r0, [r4, #0]
 800f1b2:	1cda      	adds	r2, r3, #3
 800f1b4:	b292      	uxth	r2, r2
 800f1b6:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800f1b8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800f1bc:	6821      	ldr	r1, [r4, #0]
 800f1be:	3304      	adds	r3, #4
 800f1c0:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800f1c2:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800f1c4:	2000      	movs	r0, #0
}
 800f1c6:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f1c8:	2001      	movs	r0, #1
}
 800f1ca:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	e7fa      	b.n	800f1c6 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800f1d0:	2002      	movs	r0, #2
 800f1d2:	e7f8      	b.n	800f1c6 <LoRaMacSerializerData+0xd0>

0800f1d4 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800f1d4:	4b02      	ldr	r3, [pc, #8]	; (800f1e0 <NvmDataMgmtEvent+0xc>)
 800f1d6:	881a      	ldrh	r2, [r3, #0]
 800f1d8:	4310      	orrs	r0, r2
 800f1da:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	20003c94 	.word	0x20003c94

0800f1e4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800f1e4:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800f1e6:	4b06      	ldr	r3, [pc, #24]	; (800f200 <NvmDataMgmtStoreBegin+0x1c>)
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	b11b      	cbz	r3, 800f1f4 <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800f1ec:	f7fe f914 	bl	800d418 <LoRaMacStop>
 800f1f0:	b918      	cbnz	r0, 800f1fa <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f1f2:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800f1f4:	f06f 0001 	mvn.w	r0, #1
 800f1f8:	e7fb      	b.n	800f1f2 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800f1fa:	f06f 0002 	mvn.w	r0, #2
 800f1fe:	e7f8      	b.n	800f1f2 <NvmDataMgmtStoreBegin+0xe>
 800f200:	20003c94 	.word	0x20003c94

0800f204 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800f204:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f206:	2400      	movs	r4, #0
 800f208:	4b02      	ldr	r3, [pc, #8]	; (800f214 <NvmDataMgmtStoreEnd+0x10>)
 800f20a:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800f20c:	f7fe f8fc 	bl	800d408 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f210:	4620      	mov	r0, r4
 800f212:	bd10      	pop	{r4, pc}
 800f214:	20003c94 	.word	0x20003c94

0800f218 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800f218:	2805      	cmp	r0, #5
 800f21a:	d005      	beq.n	800f228 <RegionIsActive+0x10>
 800f21c:	2808      	cmp	r0, #8
 800f21e:	d001      	beq.n	800f224 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800f220:	2000      	movs	r0, #0
        }
    }
}
 800f222:	4770      	bx	lr
    switch( region )
 800f224:	2001      	movs	r0, #1
 800f226:	4770      	bx	lr
 800f228:	2001      	movs	r0, #1
 800f22a:	4770      	bx	lr

0800f22c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800f22c:	b500      	push	{lr}
 800f22e:	b083      	sub	sp, #12
 800f230:	4603      	mov	r3, r0
 800f232:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800f234:	2200      	movs	r2, #0
 800f236:	9200      	str	r2, [sp, #0]
    switch( region )
 800f238:	2b05      	cmp	r3, #5
 800f23a:	d004      	beq.n	800f246 <RegionGetPhyParam+0x1a>
 800f23c:	2b08      	cmp	r3, #8
 800f23e:	d009      	beq.n	800f254 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800f240:	9b00      	ldr	r3, [sp, #0]
 800f242:	9301      	str	r3, [sp, #4]
 800f244:	e002      	b.n	800f24c <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 800f246:	f000 fdeb 	bl	800fe20 <RegionEU868GetPhyParam>
 800f24a:	9001      	str	r0, [sp, #4]
        }
    }
}
 800f24c:	9801      	ldr	r0, [sp, #4]
 800f24e:	b003      	add	sp, #12
 800f250:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 800f254:	f001 fbd6 	bl	8010a04 <RegionUS915GetPhyParam>
 800f258:	9001      	str	r0, [sp, #4]
 800f25a:	e7f7      	b.n	800f24c <RegionGetPhyParam+0x20>

0800f25c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800f25c:	b508      	push	{r3, lr}
 800f25e:	4603      	mov	r3, r0
 800f260:	4608      	mov	r0, r1
    switch( region )
 800f262:	2b05      	cmp	r3, #5
 800f264:	d002      	beq.n	800f26c <RegionSetBandTxDone+0x10>
 800f266:	2b08      	cmp	r3, #8
 800f268:	d003      	beq.n	800f272 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 800f26a:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 800f26c:	f000 fe94 	bl	800ff98 <RegionEU868SetBandTxDone>
 800f270:	e7fb      	b.n	800f26a <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 800f272:	f001 fc9d 	bl	8010bb0 <RegionUS915SetBandTxDone>
 800f276:	e7f8      	b.n	800f26a <RegionSetBandTxDone+0xe>

0800f278 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800f278:	b508      	push	{r3, lr}
 800f27a:	4603      	mov	r3, r0
 800f27c:	4608      	mov	r0, r1
    switch( region )
 800f27e:	2b05      	cmp	r3, #5
 800f280:	d002      	beq.n	800f288 <RegionInitDefaults+0x10>
 800f282:	2b08      	cmp	r3, #8
 800f284:	d003      	beq.n	800f28e <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 800f286:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 800f288:	f000 fea4 	bl	800ffd4 <RegionEU868InitDefaults>
 800f28c:	e7fb      	b.n	800f286 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 800f28e:	f001 fcad 	bl	8010bec <RegionUS915InitDefaults>
}
 800f292:	e7f8      	b.n	800f286 <RegionInitDefaults+0xe>

0800f294 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f294:	b508      	push	{r3, lr}
 800f296:	4603      	mov	r3, r0
 800f298:	4608      	mov	r0, r1
 800f29a:	4611      	mov	r1, r2
    switch( region )
 800f29c:	2b05      	cmp	r3, #5
 800f29e:	d003      	beq.n	800f2a8 <RegionVerify+0x14>
 800f2a0:	2b08      	cmp	r3, #8
 800f2a2:	d004      	beq.n	800f2ae <RegionVerify+0x1a>
 800f2a4:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800f2a6:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 800f2a8:	f000 ff00 	bl	80100ac <RegionEU868Verify>
 800f2ac:	e7fb      	b.n	800f2a6 <RegionVerify+0x12>
        US915_VERIFY( );
 800f2ae:	f001 fd41 	bl	8010d34 <RegionUS915Verify>
 800f2b2:	e7f8      	b.n	800f2a6 <RegionVerify+0x12>

0800f2b4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800f2b4:	b508      	push	{r3, lr}
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	4608      	mov	r0, r1
    switch( region )
 800f2ba:	2b05      	cmp	r3, #5
 800f2bc:	d002      	beq.n	800f2c4 <RegionApplyCFList+0x10>
 800f2be:	2b08      	cmp	r3, #8
 800f2c0:	d003      	beq.n	800f2ca <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 800f2c2:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 800f2c4:	f001 fac0 	bl	8010848 <RegionEU868ApplyCFList>
 800f2c8:	e7fb      	b.n	800f2c2 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 800f2ca:	f001 fd6d 	bl	8010da8 <RegionUS915ApplyCFList>
}
 800f2ce:	e7f8      	b.n	800f2c2 <RegionApplyCFList+0xe>

0800f2d0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800f2d0:	b508      	push	{r3, lr}
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	4608      	mov	r0, r1
    switch( region )
 800f2d6:	2b05      	cmp	r3, #5
 800f2d8:	d003      	beq.n	800f2e2 <RegionChanMaskSet+0x12>
 800f2da:	2b08      	cmp	r3, #8
 800f2dc:	d004      	beq.n	800f2e8 <RegionChanMaskSet+0x18>
 800f2de:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800f2e0:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 800f2e2:	f000 ff29 	bl	8010138 <RegionEU868ChanMaskSet>
 800f2e6:	e7fb      	b.n	800f2e0 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 800f2e8:	f001 fd9c 	bl	8010e24 <RegionUS915ChanMaskSet>
 800f2ec:	e7f8      	b.n	800f2e0 <RegionChanMaskSet+0x10>

0800f2ee <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f2ee:	b508      	push	{r3, lr}
 800f2f0:	4684      	mov	ip, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	461a      	mov	r2, r3
    switch( region )
 800f2f8:	f1bc 0f05 	cmp.w	ip, #5
 800f2fc:	d003      	beq.n	800f306 <RegionComputeRxWindowParameters+0x18>
 800f2fe:	f1bc 0f08 	cmp.w	ip, #8
 800f302:	d004      	beq.n	800f30e <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 800f304:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800f306:	9b02      	ldr	r3, [sp, #8]
 800f308:	f000 ff34 	bl	8010174 <RegionEU868ComputeRxWindowParameters>
 800f30c:	e7fa      	b.n	800f304 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800f30e:	9b02      	ldr	r3, [sp, #8]
 800f310:	f001 fdca 	bl	8010ea8 <RegionUS915ComputeRxWindowParameters>
}
 800f314:	e7f6      	b.n	800f304 <RegionComputeRxWindowParameters+0x16>

0800f316 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f316:	b508      	push	{r3, lr}
 800f318:	4603      	mov	r3, r0
 800f31a:	4608      	mov	r0, r1
 800f31c:	4611      	mov	r1, r2
    switch( region )
 800f31e:	2b05      	cmp	r3, #5
 800f320:	d003      	beq.n	800f32a <RegionRxConfig+0x14>
 800f322:	2b08      	cmp	r3, #8
 800f324:	d004      	beq.n	800f330 <RegionRxConfig+0x1a>
 800f326:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800f328:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 800f32a:	f000 ff59 	bl	80101e0 <RegionEU868RxConfig>
 800f32e:	e7fb      	b.n	800f328 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 800f330:	f001 fde8 	bl	8010f04 <RegionUS915RxConfig>
 800f334:	e7f8      	b.n	800f328 <RegionRxConfig+0x12>

0800f336 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f336:	b508      	push	{r3, lr}
 800f338:	4684      	mov	ip, r0
 800f33a:	4608      	mov	r0, r1
 800f33c:	4611      	mov	r1, r2
 800f33e:	461a      	mov	r2, r3
    switch( region )
 800f340:	f1bc 0f05 	cmp.w	ip, #5
 800f344:	d004      	beq.n	800f350 <RegionTxConfig+0x1a>
 800f346:	f1bc 0f08 	cmp.w	ip, #8
 800f34a:	d004      	beq.n	800f356 <RegionTxConfig+0x20>
 800f34c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800f34e:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 800f350:	f000 ffca 	bl	80102e8 <RegionEU868TxConfig>
 800f354:	e7fb      	b.n	800f34e <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 800f356:	f001 fe2f 	bl	8010fb8 <RegionUS915TxConfig>
 800f35a:	e7f8      	b.n	800f34e <RegionTxConfig+0x18>

0800f35c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f35c:	b500      	push	{lr}
 800f35e:	b083      	sub	sp, #12
 800f360:	4684      	mov	ip, r0
 800f362:	4608      	mov	r0, r1
 800f364:	4611      	mov	r1, r2
 800f366:	461a      	mov	r2, r3
    switch( region )
 800f368:	f1bc 0f05 	cmp.w	ip, #5
 800f36c:	d006      	beq.n	800f37c <RegionLinkAdrReq+0x20>
 800f36e:	f1bc 0f08 	cmp.w	ip, #8
 800f372:	d009      	beq.n	800f388 <RegionLinkAdrReq+0x2c>
 800f374:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f376:	b003      	add	sp, #12
 800f378:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 800f37c:	9b05      	ldr	r3, [sp, #20]
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	9b04      	ldr	r3, [sp, #16]
 800f382:	f001 f849 	bl	8010418 <RegionEU868LinkAdrReq>
 800f386:	e7f6      	b.n	800f376 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 800f388:	9b05      	ldr	r3, [sp, #20]
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	9b04      	ldr	r3, [sp, #16]
 800f38e:	f001 fe8d 	bl	80110ac <RegionUS915LinkAdrReq>
 800f392:	e7f0      	b.n	800f376 <RegionLinkAdrReq+0x1a>

0800f394 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f394:	b508      	push	{r3, lr}
 800f396:	4603      	mov	r3, r0
 800f398:	4608      	mov	r0, r1
    switch( region )
 800f39a:	2b05      	cmp	r3, #5
 800f39c:	d003      	beq.n	800f3a6 <RegionRxParamSetupReq+0x12>
 800f39e:	2b08      	cmp	r3, #8
 800f3a0:	d004      	beq.n	800f3ac <RegionRxParamSetupReq+0x18>
 800f3a2:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f3a4:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 800f3a6:	f001 f8fb 	bl	80105a0 <RegionEU868RxParamSetupReq>
 800f3aa:	e7fb      	b.n	800f3a4 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 800f3ac:	f001 ffc0 	bl	8011330 <RegionUS915RxParamSetupReq>
 800f3b0:	e7f8      	b.n	800f3a4 <RegionRxParamSetupReq+0x10>

0800f3b2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800f3b2:	b508      	push	{r3, lr}
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	4608      	mov	r0, r1
    switch( region )
 800f3b8:	2b05      	cmp	r3, #5
 800f3ba:	d003      	beq.n	800f3c4 <RegionNewChannelReq+0x12>
 800f3bc:	2b08      	cmp	r3, #8
 800f3be:	d004      	beq.n	800f3ca <RegionNewChannelReq+0x18>
 800f3c0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f3c2:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 800f3c4:	f001 fa81 	bl	80108ca <RegionEU868NewChannelReq>
 800f3c8:	e7fb      	b.n	800f3c2 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 800f3ca:	f001 ffdc 	bl	8011386 <RegionUS915NewChannelReq>
 800f3ce:	e7f8      	b.n	800f3c2 <RegionNewChannelReq+0x10>

0800f3d0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800f3d0:	b508      	push	{r3, lr}
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	4608      	mov	r0, r1
    switch( region )
 800f3d6:	2b05      	cmp	r3, #5
 800f3d8:	d003      	beq.n	800f3e2 <RegionTxParamSetupReq+0x12>
 800f3da:	2b08      	cmp	r3, #8
 800f3dc:	d004      	beq.n	800f3e8 <RegionTxParamSetupReq+0x18>
 800f3de:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f3e0:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 800f3e2:	f001 f901 	bl	80105e8 <RegionEU868TxParamSetupReq>
 800f3e6:	e7fb      	b.n	800f3e0 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 800f3e8:	f001 ffd0 	bl	801138c <RegionUS915TxParamSetupReq>
 800f3ec:	e7f8      	b.n	800f3e0 <RegionTxParamSetupReq+0x10>

0800f3ee <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800f3ee:	b508      	push	{r3, lr}
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	4608      	mov	r0, r1
    switch( region )
 800f3f4:	2b05      	cmp	r3, #5
 800f3f6:	d003      	beq.n	800f400 <RegionDlChannelReq+0x12>
 800f3f8:	2b08      	cmp	r3, #8
 800f3fa:	d004      	beq.n	800f406 <RegionDlChannelReq+0x18>
 800f3fc:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f3fe:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 800f400:	f001 f8f6 	bl	80105f0 <RegionEU868DlChannelReq>
 800f404:	e7fb      	b.n	800f3fe <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 800f406:	f001 ffc4 	bl	8011392 <RegionUS915DlChannelReq>
 800f40a:	e7f8      	b.n	800f3fe <RegionDlChannelReq+0x10>

0800f40c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800f40c:	b508      	push	{r3, lr}
 800f40e:	4603      	mov	r3, r0
 800f410:	4608      	mov	r0, r1
 800f412:	4611      	mov	r1, r2
    switch( region )
 800f414:	2b05      	cmp	r3, #5
 800f416:	d003      	beq.n	800f420 <RegionAlternateDr+0x14>
 800f418:	2b08      	cmp	r3, #8
 800f41a:	d004      	beq.n	800f426 <RegionAlternateDr+0x1a>
 800f41c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800f41e:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 800f420:	f001 f90e 	bl	8010640 <RegionEU868AlternateDr>
 800f424:	e7fb      	b.n	800f41e <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 800f426:	f001 ffb7 	bl	8011398 <RegionUS915AlternateDr>
 800f42a:	e7f8      	b.n	800f41e <RegionAlternateDr+0x12>

0800f42c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f42c:	b508      	push	{r3, lr}
 800f42e:	4684      	mov	ip, r0
 800f430:	4608      	mov	r0, r1
 800f432:	4611      	mov	r1, r2
 800f434:	461a      	mov	r2, r3
    switch( region )
 800f436:	f1bc 0f05 	cmp.w	ip, #5
 800f43a:	d004      	beq.n	800f446 <RegionNextChannel+0x1a>
 800f43c:	f1bc 0f08 	cmp.w	ip, #8
 800f440:	d005      	beq.n	800f44e <RegionNextChannel+0x22>
 800f442:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800f444:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 800f446:	9b02      	ldr	r3, [sp, #8]
 800f448:	f001 f8fc 	bl	8010644 <RegionEU868NextChannel>
 800f44c:	e7fa      	b.n	800f444 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 800f44e:	9b02      	ldr	r3, [sp, #8]
 800f450:	f001 ffc4 	bl	80113dc <RegionUS915NextChannel>
 800f454:	e7f6      	b.n	800f444 <RegionNextChannel+0x18>

0800f456 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800f456:	b508      	push	{r3, lr}
 800f458:	4684      	mov	ip, r0
 800f45a:	4608      	mov	r0, r1
 800f45c:	4611      	mov	r1, r2
 800f45e:	461a      	mov	r2, r3
    switch( region )
 800f460:	f1bc 0f05 	cmp.w	ip, #5
 800f464:	d004      	beq.n	800f470 <RegionApplyDrOffset+0x1a>
 800f466:	f1bc 0f08 	cmp.w	ip, #8
 800f46a:	d004      	beq.n	800f476 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800f46c:	b2c8      	uxtb	r0, r1
 800f46e:	e001      	b.n	800f474 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 800f470:	f001 fa56 	bl	8010920 <RegionEU868ApplyDrOffset>
        }
    }
}
 800f474:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 800f476:	f002 f85f 	bl	8011538 <RegionUS915ApplyDrOffset>
 800f47a:	e7fb      	b.n	800f474 <RegionApplyDrOffset+0x1e>

0800f47c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800f47c:	4800      	ldr	r0, [pc, #0]	; (800f480 <RegionGetVersion+0x4>)
 800f47e:	4770      	bx	lr
 800f480:	02010001 	.word	0x02010001

0800f484 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800f484:	468c      	mov	ip, r1
 800f486:	b1a9      	cbz	r1, 800f4b4 <FindAvailable125kHzChannels+0x30>
 800f488:	b1b2      	cbz	r2, 800f4b8 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800f48a:	2300      	movs	r3, #0
 800f48c:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800f48e:	e001      	b.n	800f494 <FindAvailable125kHzChannels+0x10>
 800f490:	3301      	adds	r3, #1
 800f492:	b2db      	uxtb	r3, r3
 800f494:	2b07      	cmp	r3, #7
 800f496:	d80b      	bhi.n	800f4b0 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800f498:	fa40 f103 	asr.w	r1, r0, r3
 800f49c:	f011 0f01 	tst.w	r1, #1
 800f4a0:	d0f6      	beq.n	800f490 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800f4a2:	7811      	ldrb	r1, [r2, #0]
 800f4a4:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800f4a8:	7811      	ldrb	r1, [r2, #0]
 800f4aa:	3101      	adds	r1, #1
 800f4ac:	7011      	strb	r1, [r2, #0]
 800f4ae:	e7ef      	b.n	800f490 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f4b4:	2003      	movs	r0, #3
 800f4b6:	4770      	bx	lr
 800f4b8:	2003      	movs	r0, #3
}
 800f4ba:	4770      	bx	lr

0800f4bc <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800f4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4be:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	9302      	str	r3, [sp, #8]
 800f4c4:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800f4c6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800f4ca:	2800      	cmp	r0, #0
 800f4cc:	d03e      	beq.n	800f54c <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800f4ce:	460d      	mov	r5, r1
 800f4d0:	4617      	mov	r7, r2
 800f4d2:	4606      	mov	r6, r0
 800f4d4:	2900      	cmp	r1, #0
 800f4d6:	d03b      	beq.n	800f550 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800f4d8:	2a00      	cmp	r2, #0
 800f4da:	d03b      	beq.n	800f554 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800f4dc:	780c      	ldrb	r4, [r1, #0]
 800f4de:	e017      	b.n	800f510 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800f4e0:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800f4e4:	0a00      	lsrs	r0, r0, #8
 800f4e6:	e019      	b.n	800f51c <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800f4e8:	3901      	subs	r1, #1
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	f002 ff24 	bl	8012338 <randr>
 800f4f0:	f100 0310 	add.w	r3, r0, #16
 800f4f4:	eb0d 0003 	add.w	r0, sp, r3
 800f4f8:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800f4fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f500:	703b      	strb	r3, [r7, #0]
 800f502:	e016      	b.n	800f532 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800f504:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f508:	b9cb      	cbnz	r3, 800f53e <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800f50a:	782a      	ldrb	r2, [r5, #0]
 800f50c:	42a2      	cmp	r2, r4
 800f50e:	d016      	beq.n	800f53e <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800f510:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800f512:	f014 0f01 	tst.w	r4, #1
 800f516:	d1e3      	bne.n	800f4e0 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800f518:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800f51c:	f10d 0207 	add.w	r2, sp, #7
 800f520:	a902      	add	r1, sp, #8
 800f522:	f7ff ffaf 	bl	800f484 <FindAvailable125kHzChannels>
 800f526:	2803      	cmp	r0, #3
 800f528:	d00b      	beq.n	800f542 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800f52a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f52e:	2900      	cmp	r1, #0
 800f530:	d1da      	bne.n	800f4e8 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800f532:	3401      	adds	r4, #1
 800f534:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800f536:	2c07      	cmp	r4, #7
 800f538:	d9e4      	bls.n	800f504 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800f53a:	2400      	movs	r4, #0
 800f53c:	e7e2      	b.n	800f504 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800f53e:	b913      	cbnz	r3, 800f546 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800f540:	2003      	movs	r0, #3
}
 800f542:	b005      	add	sp, #20
 800f544:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800f546:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800f548:	2000      	movs	r0, #0
 800f54a:	e7fa      	b.n	800f542 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f54c:	2003      	movs	r0, #3
 800f54e:	e7f8      	b.n	800f542 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800f550:	2003      	movs	r0, #3
 800f552:	e7f6      	b.n	800f542 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800f554:	2003      	movs	r0, #3
 800f556:	e7f4      	b.n	800f542 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800f558 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800f558:	fb02 1000 	mla	r0, r2, r0, r1
 800f55c:	4770      	bx	lr

0800f55e <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800f55e:	b082      	sub	sp, #8
 800f560:	f10d 0c08 	add.w	ip, sp, #8
 800f564:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800f568:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800f56a:	b971      	cbnz	r1, 800f58a <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800f56c:	4613      	mov	r3, r2
 800f56e:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800f572:	d306      	bcc.n	800f582 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800f574:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800f578:	4293      	cmp	r3, r2
 800f57a:	d80a      	bhi.n	800f592 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800f57c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f580:	e000      	b.n	800f584 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800f582:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800f584:	4298      	cmp	r0, r3
 800f586:	bf38      	it	cc
 800f588:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800f58a:	b900      	cbnz	r0, 800f58e <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800f58c:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800f58e:	b002      	add	sp, #8
 800f590:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800f592:	f242 7310 	movw	r3, #10000	; 0x2710
 800f596:	e7f5      	b.n	800f584 <GetDutyCycle+0x26>

0800f598 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800f598:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800f59a:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800f59c:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800f59e:	e001      	b.n	800f5a4 <CountChannels+0xc>
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	428b      	cmp	r3, r1
 800f5a6:	d207      	bcs.n	800f5b8 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	409a      	lsls	r2, r3
 800f5ac:	ea32 020c 	bics.w	r2, r2, ip
 800f5b0:	d1f6      	bne.n	800f5a0 <CountChannels+0x8>
        {
            nbActiveBits++;
 800f5b2:	3001      	adds	r0, #1
 800f5b4:	b2c0      	uxtb	r0, r0
 800f5b6:	e7f3      	b.n	800f5a0 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800f5b8:	4770      	bx	lr
	...

0800f5bc <SetMaxTimeCredits>:
{
 800f5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5c0:	b089      	sub	sp, #36	; 0x24
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	460e      	mov	r6, r1
 800f5c6:	ad02      	add	r5, sp, #8
 800f5c8:	e885 000c 	stmia.w	r5, {r2, r3}
 800f5cc:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800f5d0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800f5d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f5d8:	f004 ff26 	bl	8014428 <SysTimeToMs>
 800f5dc:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800f5de:	2300      	movs	r3, #0
 800f5e0:	9304      	str	r3, [sp, #16]
 800f5e2:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800f5e4:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f5e8:	4631      	mov	r1, r6
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f7ff ffb7 	bl	800f55e <GetDutyCycle>
 800f5f0:	4605      	mov	r5, r0
    if( joined == false )
 800f5f2:	2e00      	cmp	r6, #0
 800f5f4:	d14c      	bne.n	800f690 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800f5f6:	2864      	cmp	r0, #100	; 0x64
 800f5f8:	d025      	beq.n	800f646 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800f5fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f5fe:	d025      	beq.n	800f64c <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800f600:	4e27      	ldr	r6, [pc, #156]	; (800f6a0 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800f602:	68a1      	ldr	r1, [r4, #8]
 800f604:	a806      	add	r0, sp, #24
 800f606:	f004 ff2f 	bl	8014468 <SysTimeFromMs>
 800f60a:	9b07      	ldr	r3, [sp, #28]
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	9b06      	ldr	r3, [sp, #24]
 800f610:	aa02      	add	r2, sp, #8
 800f612:	ca06      	ldmia	r2, {r1, r2}
 800f614:	a804      	add	r0, sp, #16
 800f616:	f004 fe8e 	bl	8014336 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800f61a:	f1b8 0f00 	cmp.w	r8, #0
 800f61e:	d102      	bne.n	800f626 <SetMaxTimeCredits+0x6a>
 800f620:	f1b9 0f00 	cmp.w	r9, #0
 800f624:	d002      	beq.n	800f62c <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800f626:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800f628:	42b3      	cmp	r3, r6
 800f62a:	d012      	beq.n	800f652 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800f62c:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800f62e:	9b02      	ldr	r3, [sp, #8]
 800f630:	4a1c      	ldr	r2, [pc, #112]	; (800f6a4 <SetMaxTimeCredits+0xe8>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d812      	bhi.n	800f65c <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800f636:	6863      	ldr	r3, [r4, #4]
 800f638:	b903      	cbnz	r3, 800f63c <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800f63a:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800f63c:	6126      	str	r6, [r4, #16]
}
 800f63e:	4628      	mov	r0, r5
 800f640:	b009      	add	sp, #36	; 0x24
 800f642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800f646:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f648:	4e17      	ldr	r6, [pc, #92]	; (800f6a8 <SetMaxTimeCredits+0xec>)
 800f64a:	e7da      	b.n	800f602 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800f64c:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800f64e:	4e17      	ldr	r6, [pc, #92]	; (800f6ac <SetMaxTimeCredits+0xf0>)
 800f650:	e7d7      	b.n	800f602 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800f652:	9a04      	ldr	r2, [sp, #16]
 800f654:	4b16      	ldr	r3, [pc, #88]	; (800f6b0 <SetMaxTimeCredits+0xf4>)
 800f656:	429a      	cmp	r2, r3
 800f658:	d9ed      	bls.n	800f636 <SetMaxTimeCredits+0x7a>
 800f65a:	e7e7      	b.n	800f62c <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800f65c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800f660:	3b30      	subs	r3, #48	; 0x30
 800f662:	4a14      	ldr	r2, [pc, #80]	; (800f6b4 <SetMaxTimeCredits+0xf8>)
 800f664:	fba2 2303 	umull	r2, r3, r2, r3
 800f668:	0c1b      	lsrs	r3, r3, #16
 800f66a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800f66c:	4a12      	ldr	r2, [pc, #72]	; (800f6b8 <SetMaxTimeCredits+0xfc>)
 800f66e:	fb02 f303 	mul.w	r3, r2, r3
 800f672:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800f674:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800f678:	3330      	adds	r3, #48	; 0x30
 800f67a:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800f682:	ab04      	add	r3, sp, #16
 800f684:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f688:	f004 fece 	bl	8014428 <SysTimeToMs>
 800f68c:	60a0      	str	r0, [r4, #8]
 800f68e:	e7d2      	b.n	800f636 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800f690:	f1b8 0f00 	cmp.w	r8, #0
 800f694:	d102      	bne.n	800f69c <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800f696:	4e04      	ldr	r6, [pc, #16]	; (800f6a8 <SetMaxTimeCredits+0xec>)
 800f698:	60e6      	str	r6, [r4, #12]
 800f69a:	e7cc      	b.n	800f636 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800f69c:	4e02      	ldr	r6, [pc, #8]	; (800f6a8 <SetMaxTimeCredits+0xec>)
 800f69e:	e7ca      	b.n	800f636 <SetMaxTimeCredits+0x7a>
 800f6a0:	02932e00 	.word	0x02932e00
 800f6a4:	0001ec2f 	.word	0x0001ec2f
 800f6a8:	001b7740 	.word	0x001b7740
 800f6ac:	0112a880 	.word	0x0112a880
 800f6b0:	0001517f 	.word	0x0001517f
 800f6b4:	c22e4507 	.word	0xc22e4507
 800f6b8:	00015180 	.word	0x00015180

0800f6bc <UpdateTimeCredits>:
{
 800f6bc:	b570      	push	{r4, r5, r6, lr}
 800f6be:	b082      	sub	sp, #8
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800f6c4:	9301      	str	r3, [sp, #4]
 800f6c6:	9200      	str	r2, [sp, #0]
 800f6c8:	ab06      	add	r3, sp, #24
 800f6ca:	cb0c      	ldmia	r3, {r2, r3}
 800f6cc:	f7ff ff76 	bl	800f5bc <SetMaxTimeCredits>
 800f6d0:	4605      	mov	r5, r0
    if( joined == true )
 800f6d2:	b94e      	cbnz	r6, 800f6e8 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800f6d4:	68e2      	ldr	r2, [r4, #12]
 800f6d6:	6923      	ldr	r3, [r4, #16]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d900      	bls.n	800f6de <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800f6dc:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800f6de:	9b08      	ldr	r3, [sp, #32]
 800f6e0:	6063      	str	r3, [r4, #4]
}
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	b002      	add	sp, #8
 800f6e6:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800f6e8:	6860      	ldr	r0, [r4, #4]
 800f6ea:	f004 ff1d 	bl	8014528 <UTIL_TIMER_GetElapsedTime>
 800f6ee:	68e3      	ldr	r3, [r4, #12]
 800f6f0:	4403      	add	r3, r0
 800f6f2:	60e3      	str	r3, [r4, #12]
 800f6f4:	e7ee      	b.n	800f6d4 <UpdateTimeCredits+0x18>

0800f6f6 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800f6f6:	4288      	cmp	r0, r1
 800f6f8:	db03      	blt.n	800f702 <RegionCommonValueInRange+0xc>
 800f6fa:	4290      	cmp	r0, r2
 800f6fc:	dd03      	ble.n	800f706 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800f6fe:	2000      	movs	r0, #0
 800f700:	4770      	bx	lr
 800f702:	2000      	movs	r0, #0
 800f704:	4770      	bx	lr
        return 1;
 800f706:	2001      	movs	r0, #1
}
 800f708:	4770      	bx	lr

0800f70a <RegionCommonChanVerifyDr>:
{
 800f70a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f70e:	4682      	mov	sl, r0
 800f710:	460e      	mov	r6, r1
 800f712:	4690      	mov	r8, r2
 800f714:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800f718:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800f71c:	4619      	mov	r1, r3
 800f71e:	4640      	mov	r0, r8
 800f720:	f7ff ffe9 	bl	800f6f6 <RegionCommonValueInRange>
 800f724:	b338      	cbz	r0, 800f776 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f726:	2500      	movs	r5, #0
 800f728:	462f      	mov	r7, r5
 800f72a:	e01e      	b.n	800f76a <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800f72c:	3401      	adds	r4, #1
 800f72e:	b2e4      	uxtb	r4, r4
 800f730:	2c0f      	cmp	r4, #15
 800f732:	d816      	bhi.n	800f762 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800f734:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800f738:	4123      	asrs	r3, r4
 800f73a:	f013 0f01 	tst.w	r3, #1
 800f73e:	d0f5      	beq.n	800f72c <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800f740:	193b      	adds	r3, r7, r4
 800f742:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f746:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800f74a:	7a19      	ldrb	r1, [r3, #8]
 800f74c:	090a      	lsrs	r2, r1, #4
 800f74e:	f001 010f 	and.w	r1, r1, #15
 800f752:	4640      	mov	r0, r8
 800f754:	f7ff ffcf 	bl	800f6f6 <RegionCommonValueInRange>
 800f758:	2801      	cmp	r0, #1
 800f75a:	d1e7      	bne.n	800f72c <RegionCommonChanVerifyDr+0x22>
                    return true;
 800f75c:	2001      	movs	r0, #1
}
 800f75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800f762:	3710      	adds	r7, #16
 800f764:	b2ff      	uxtb	r7, r7
 800f766:	3501      	adds	r5, #1
 800f768:	b2ed      	uxtb	r5, r5
 800f76a:	4557      	cmp	r7, sl
 800f76c:	d201      	bcs.n	800f772 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800f76e:	2400      	movs	r4, #0
 800f770:	e7de      	b.n	800f730 <RegionCommonChanVerifyDr+0x26>
    return false;
 800f772:	2000      	movs	r0, #0
 800f774:	e7f3      	b.n	800f75e <RegionCommonChanVerifyDr+0x54>
        return false;
 800f776:	2000      	movs	r0, #0
 800f778:	e7f1      	b.n	800f75e <RegionCommonChanVerifyDr+0x54>

0800f77a <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800f77a:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800f77e:	0913      	lsrs	r3, r2, #4
 800f780:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800f784:	d30e      	bcc.n	800f7a4 <RegionCommonChanDisable+0x2a>
 800f786:	4291      	cmp	r1, r2
 800f788:	d20e      	bcs.n	800f7a8 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800f78a:	f001 010f 	and.w	r1, r1, #15
 800f78e:	2301      	movs	r3, #1
 800f790:	fa03 f101 	lsl.w	r1, r3, r1
 800f794:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800f798:	ea22 0101 	bic.w	r1, r2, r1
 800f79c:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	4770      	bx	lr
        return false;
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	4770      	bx	lr
 800f7a8:	2000      	movs	r0, #0
}
 800f7aa:	4770      	bx	lr

0800f7ac <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800f7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800f7ae:	b188      	cbz	r0, 800f7d4 <RegionCommonCountChannels+0x28>
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	4616      	mov	r6, r2
 800f7b4:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800f7b6:	2500      	movs	r5, #0
 800f7b8:	e008      	b.n	800f7cc <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800f7ba:	2110      	movs	r1, #16
 800f7bc:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800f7c0:	f7ff feea 	bl	800f598 <CountChannels>
 800f7c4:	4405      	add	r5, r0
 800f7c6:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800f7c8:	3401      	adds	r4, #1
 800f7ca:	b2e4      	uxtb	r4, r4
 800f7cc:	42b4      	cmp	r4, r6
 800f7ce:	d3f4      	bcc.n	800f7ba <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800f7d0:	4628      	mov	r0, r5
 800f7d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800f7d4:	2500      	movs	r5, #0
 800f7d6:	e7fb      	b.n	800f7d0 <RegionCommonCountChannels+0x24>

0800f7d8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800f7d8:	4684      	mov	ip, r0
 800f7da:	b158      	cbz	r0, 800f7f4 <RegionCommonChanMaskCopy+0x1c>
 800f7dc:	b109      	cbz	r1, 800f7e2 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800f7de:	2300      	movs	r3, #0
 800f7e0:	e006      	b.n	800f7f0 <RegionCommonChanMaskCopy+0x18>
 800f7e2:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800f7e4:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800f7e8:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d3f7      	bcc.n	800f7e4 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800f7f4:	4770      	bx	lr

0800f7f6 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	460d      	mov	r5, r1
 800f7fe:	4611      	mov	r1, r2
 800f800:	aa04      	add	r2, sp, #16
 800f802:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800f806:	ca0c      	ldmia	r2, {r2, r3}
 800f808:	f7ff fea9 	bl	800f55e <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800f80c:	68e3      	ldr	r3, [r4, #12]
 800f80e:	fb05 f000 	mul.w	r0, r5, r0
 800f812:	4283      	cmp	r3, r0
 800f814:	d905      	bls.n	800f822 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800f816:	1a18      	subs	r0, r3, r0
 800f818:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800f81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f81e:	b002      	add	sp, #8
 800f820:	4770      	bx	lr
        band->TimeCredits = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	60e3      	str	r3, [r4, #12]
}
 800f826:	e7f8      	b.n	800f81a <RegionCommonSetBandTxDone+0x24>

0800f828 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82c:	b089      	sub	sp, #36	; 0x24
 800f82e:	4607      	mov	r7, r0
 800f830:	468b      	mov	fp, r1
 800f832:	4691      	mov	r9, r2
 800f834:	4698      	mov	r8, r3
 800f836:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800f83a:	f004 fe6b 	bl	8014514 <UTIL_TIMER_GetCurrentTime>
 800f83e:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800f840:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800f842:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800f844:	f04f 33ff 	mov.w	r3, #4294967295
 800f848:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800f84a:	e005      	b.n	800f858 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800f84c:	2301      	movs	r3, #1
 800f84e:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800f850:	441e      	add	r6, r3
 800f852:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800f854:	3401      	adds	r4, #1
 800f856:	b2e4      	uxtb	r4, r4
 800f858:	454c      	cmp	r4, r9
 800f85a:	d25d      	bcs.n	800f918 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800f85c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800f860:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800f864:	9b04      	ldr	r3, [sp, #16]
 800f866:	9302      	str	r3, [sp, #8]
 800f868:	ab13      	add	r3, sp, #76	; 0x4c
 800f86a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f86e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f872:	4653      	mov	r3, sl
 800f874:	4642      	mov	r2, r8
 800f876:	4639      	mov	r1, r7
 800f878:	4628      	mov	r0, r5
 800f87a:	f7ff ff1f 	bl	800f6bc <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800f87e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f880:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800f884:	68ea      	ldr	r2, [r5, #12]
 800f886:	429a      	cmp	r2, r3
 800f888:	d8e0      	bhi.n	800f84c <RegionCommonUpdateBandTimeOff+0x24>
 800f88a:	f1b8 0f00 	cmp.w	r8, #0
 800f88e:	d101      	bne.n	800f894 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800f890:	2f00      	cmp	r7, #0
 800f892:	d1db      	bne.n	800f84c <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800f894:	2100      	movs	r1, #0
 800f896:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 800f898:	6929      	ldr	r1, [r5, #16]
 800f89a:	4299      	cmp	r1, r3
 800f89c:	d907      	bls.n	800f8ae <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800f89e:	1a9b      	subs	r3, r3, r2
 800f8a0:	9a05      	ldr	r2, [sp, #20]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	bf28      	it	cs
 800f8a6:	461a      	movcs	r2, r3
 800f8a8:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800f8aa:	3601      	adds	r6, #1
 800f8ac:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800f8ae:	2f00      	cmp	r7, #0
 800f8b0:	d1d0      	bne.n	800f854 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	9306      	str	r3, [sp, #24]
 800f8b6:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800f8ba:	2864      	cmp	r0, #100	; 0x64
 800f8bc:	d024      	beq.n	800f908 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800f8be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800f8c2:	d025      	beq.n	800f910 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800f8c4:	4b19      	ldr	r3, [pc, #100]	; (800f92c <RegionCommonUpdateBandTimeOff+0x104>)
 800f8c6:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800f8c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8ca:	4a18      	ldr	r2, [pc, #96]	; (800f92c <RegionCommonUpdateBandTimeOff+0x104>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d90c      	bls.n	800f8ea <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800f8d0:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800f8d4:	3b30      	subs	r3, #48	; 0x30
 800f8d6:	4a16      	ldr	r2, [pc, #88]	; (800f930 <RegionCommonUpdateBandTimeOff+0x108>)
 800f8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800f8dc:	0c1b      	lsrs	r3, r3, #16
 800f8de:	4a15      	ldr	r2, [pc, #84]	; (800f934 <RegionCommonUpdateBandTimeOff+0x10c>)
 800f8e0:	fb03 2202 	mla	r2, r3, r2, r2
 800f8e4:	9b06      	ldr	r3, [sp, #24]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800f8ea:	ad06      	add	r5, sp, #24
 800f8ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8f2:	e895 0006 	ldmia.w	r5, {r1, r2}
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	f004 fd1d 	bl	8014336 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800f8fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f900:	f004 fd92 	bl	8014428 <SysTimeToMs>
 800f904:	9005      	str	r0, [sp, #20]
 800f906:	e7a5      	b.n	800f854 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800f908:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f90c:	9306      	str	r3, [sp, #24]
 800f90e:	e7db      	b.n	800f8c8 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800f910:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800f914:	9306      	str	r3, [sp, #24]
 800f916:	e7d7      	b.n	800f8c8 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800f918:	b11e      	cbz	r6, 800f922 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800f91a:	9805      	ldr	r0, [sp, #20]
 800f91c:	b009      	add	sp, #36	; 0x24
 800f91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800f922:	f04f 33ff 	mov.w	r3, #4294967295
 800f926:	9305      	str	r3, [sp, #20]
 800f928:	e7f7      	b.n	800f91a <RegionCommonUpdateBandTimeOff+0xf2>
 800f92a:	bf00      	nop
 800f92c:	0001ec30 	.word	0x0001ec30
 800f930:	c22e4507 	.word	0xc22e4507
 800f934:	00015180 	.word	0x00015180

0800f938 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800f938:	7803      	ldrb	r3, [r0, #0]
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d001      	beq.n	800f942 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800f93e:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800f940:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800f942:	7842      	ldrb	r2, [r0, #1]
 800f944:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f948:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800f94a:	f003 030f 	and.w	r3, r3, #15
 800f94e:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800f950:	0913      	lsrs	r3, r2, #4
 800f952:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800f954:	7883      	ldrb	r3, [r0, #2]
 800f956:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800f958:	78c2      	ldrb	r2, [r0, #3]
 800f95a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f95e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800f960:	7903      	ldrb	r3, [r0, #4]
 800f962:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800f964:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800f968:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800f96a:	f003 030f 	and.w	r3, r3, #15
 800f96e:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800f970:	2005      	movs	r0, #5
 800f972:	4770      	bx	lr

0800f974 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800f974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f978:	b085      	sub	sp, #20
 800f97a:	4604      	mov	r4, r0
 800f97c:	4688      	mov	r8, r1
 800f97e:	4617      	mov	r7, r2
 800f980:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800f982:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800f984:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800f988:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800f98c:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800f990:	7943      	ldrb	r3, [r0, #5]
 800f992:	b92b      	cbnz	r3, 800f9a0 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800f994:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800f998:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800f99c:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800f9a0:	b355      	cbz	r5, 800f9f8 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800f9a2:	f1ba 0f0f 	cmp.w	sl, #15
 800f9a6:	d114      	bne.n	800f9d2 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800f9a8:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800f9ac:	f1b9 0f0f 	cmp.w	r9, #15
 800f9b0:	d020      	beq.n	800f9f4 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800f9b2:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800f9b6:	9303      	str	r3, [sp, #12]
 800f9b8:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800f9bc:	461c      	mov	r4, r3
 800f9be:	4619      	mov	r1, r3
 800f9c0:	4648      	mov	r0, r9
 800f9c2:	f7ff fe98 	bl	800f6f6 <RegionCommonValueInRange>
 800f9c6:	b9b8      	cbnz	r0, 800f9f8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800f9c8:	454c      	cmp	r4, r9
 800f9ca:	dc21      	bgt.n	800fa10 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800f9cc:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800f9d0:	e012      	b.n	800f9f8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800f9d2:	69a3      	ldr	r3, [r4, #24]
 800f9d4:	9301      	str	r3, [sp, #4]
 800f9d6:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800f9da:	9300      	str	r3, [sp, #0]
 800f9dc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f9e0:	4652      	mov	r2, sl
 800f9e2:	6921      	ldr	r1, [r4, #16]
 800f9e4:	7b20      	ldrb	r0, [r4, #12]
 800f9e6:	f7ff fe90 	bl	800f70a <RegionCommonChanVerifyDr>
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	d1de      	bne.n	800f9ac <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800f9ee:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800f9f2:	e7db      	b.n	800f9ac <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800f9f4:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800f9f8:	2d07      	cmp	r5, #7
 800f9fa:	d00c      	beq.n	800fa16 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800f9fc:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800fa00:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800fa04:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800fa08:	4628      	mov	r0, r5
 800fa0a:	b005      	add	sp, #20
 800fa0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800fa10:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fa14:	e7f0      	b.n	800f9f8 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800fa16:	f1bb 0f00 	cmp.w	fp, #0
 800fa1a:	d1ef      	bne.n	800f9fc <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800fa1c:	f04f 0b01 	mov.w	fp, #1
 800fa20:	e7ec      	b.n	800f9fc <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800fa24 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800fa24:	4b02      	ldr	r3, [pc, #8]	; (800fa30 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800fa26:	fa03 f000 	lsl.w	r0, r3, r0
}
 800fa2a:	fbb0 f0f1 	udiv	r0, r0, r1
 800fa2e:	4770      	bx	lr
 800fa30:	000f4240 	.word	0x000f4240

0800fa34 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800fa34:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800fa38:	fbb3 f0f0 	udiv	r0, r3, r0
 800fa3c:	4770      	bx	lr
	...

0800fa40 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800fa40:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800fa42:	f1a1 0c04 	sub.w	ip, r1, #4
 800fa46:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800fa4a:	fb0e f202 	mul.w	r2, lr, r2
 800fa4e:	fb00 220c 	mla	r2, r0, ip, r2
 800fa52:	0052      	lsls	r2, r2, #1
 800fa54:	d021      	beq.n	800fa9a <RegionCommonComputeRxWindowParameters+0x5a>
 800fa56:	4402      	add	r2, r0
 800fa58:	3a01      	subs	r2, #1
 800fa5a:	fbb2 f2f0 	udiv	r2, r2, r0
 800fa5e:	4291      	cmp	r1, r2
 800fa60:	bf38      	it	cc
 800fa62:	4611      	movcc	r1, r2
 800fa64:	9a01      	ldr	r2, [sp, #4]
 800fa66:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800fa68:	0082      	lsls	r2, r0, #2
 800fa6a:	fb00 f101 	mul.w	r1, r0, r1
 800fa6e:	b1b9      	cbz	r1, 800faa0 <RegionCommonComputeRxWindowParameters+0x60>
 800fa70:	3101      	adds	r1, #1
 800fa72:	0849      	lsrs	r1, r1, #1
 800fa74:	1a51      	subs	r1, r2, r1
 800fa76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fa7a:	fb02 1313 	mls	r3, r2, r3, r1
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	dd10      	ble.n	800faa4 <RegionCommonComputeRxWindowParameters+0x64>
 800fa82:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800fa86:	4a0b      	ldr	r2, [pc, #44]	; (800fab4 <RegionCommonComputeRxWindowParameters+0x74>)
 800fa88:	fb82 1203 	smull	r1, r2, r2, r3
 800fa8c:	17db      	asrs	r3, r3, #31
 800fa8e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800fa92:	9a02      	ldr	r2, [sp, #8]
 800fa94:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800fa96:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800fa9a:	fbb2 f2f0 	udiv	r2, r2, r0
 800fa9e:	e7de      	b.n	800fa5e <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800faa0:	0849      	lsrs	r1, r1, #1
 800faa2:	e7e7      	b.n	800fa74 <RegionCommonComputeRxWindowParameters+0x34>
 800faa4:	4a03      	ldr	r2, [pc, #12]	; (800fab4 <RegionCommonComputeRxWindowParameters+0x74>)
 800faa6:	fb82 1203 	smull	r1, r2, r2, r3
 800faaa:	17db      	asrs	r3, r3, #31
 800faac:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800fab0:	e7ef      	b.n	800fa92 <RegionCommonComputeRxWindowParameters+0x52>
 800fab2:	bf00      	nop
 800fab4:	10624dd3 	.word	0x10624dd3

0800fab8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800fab8:	b538      	push	{r3, r4, r5, lr}
 800faba:	460d      	mov	r5, r1
 800fabc:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800fabe:	0040      	lsls	r0, r0, #1
 800fac0:	f7f0 fe88 	bl	80007d4 <__aeabi_ui2f>
 800fac4:	4601      	mov	r1, r0
 800fac6:	4628      	mov	r0, r5
 800fac8:	f7f0 fdd2 	bl	8000670 <__aeabi_fsub>
 800facc:	4621      	mov	r1, r4
 800face:	f7f0 fdcf 	bl	8000670 <__aeabi_fsub>
 800fad2:	f7f0 fcc1 	bl	8000458 <__aeabi_f2d>
 800fad6:	f004 fff7 	bl	8014ac8 <floor>
 800fada:	f7f0 fd9d 	bl	8000618 <__aeabi_d2iz>

    return phyTxPower;
}
 800fade:	b240      	sxtb	r0, r0
 800fae0:	bd38      	pop	{r3, r4, r5, pc}

0800fae2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800fae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae6:	b083      	sub	sp, #12
 800fae8:	4605      	mov	r5, r0
 800faea:	468b      	mov	fp, r1
 800faec:	9200      	str	r2, [sp, #0]
 800faee:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800faf0:	2600      	movs	r6, #0
 800faf2:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800faf4:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800faf6:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800faf8:	e04a      	b.n	800fb90 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800fafa:	7a3a      	ldrb	r2, [r7, #8]
 800fafc:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800fb00:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800fb04:	b252      	sxtb	r2, r2
 800fb06:	b249      	sxtb	r1, r1
 800fb08:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800fb0c:	f7ff fdf3 	bl	800f6f6 <RegionCommonValueInRange>
 800fb10:	b178      	cbz	r0, 800fb32 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800fb12:	68ea      	ldr	r2, [r5, #12]
 800fb14:	7a7b      	ldrb	r3, [r7, #9]
 800fb16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fb1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fb1e:	7d1b      	ldrb	r3, [r3, #20]
 800fb20:	b35b      	cbz	r3, 800fb7a <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800fb22:	f109 0301 	add.w	r3, r9, #1
 800fb26:	eb08 0204 	add.w	r2, r8, r4
 800fb2a:	f80b 2009 	strb.w	r2, [fp, r9]
 800fb2e:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800fb32:	3401      	adds	r4, #1
 800fb34:	b2e4      	uxtb	r4, r4
 800fb36:	2c0f      	cmp	r4, #15
 800fb38:	d824      	bhi.n	800fb84 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800fb3a:	686b      	ldr	r3, [r5, #4]
 800fb3c:	0072      	lsls	r2, r6, #1
 800fb3e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800fb42:	4123      	asrs	r3, r4
 800fb44:	f013 0f01 	tst.w	r3, #1
 800fb48:	d0f3      	beq.n	800fb32 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800fb4a:	68a8      	ldr	r0, [r5, #8]
 800fb4c:	eb08 0304 	add.w	r3, r8, r4
 800fb50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fb54:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800fb58:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d0e8      	beq.n	800fb32 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800fb60:	782b      	ldrb	r3, [r5, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d1c9      	bne.n	800fafa <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800fb66:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d0c6      	beq.n	800fafa <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800fb6c:	5a9b      	ldrh	r3, [r3, r2]
 800fb6e:	fa43 f104 	asr.w	r1, r3, r4
 800fb72:	f011 0f01 	tst.w	r1, #1
 800fb76:	d1c0      	bne.n	800fafa <RegionCommonCountNbOfEnabledChannels+0x18>
 800fb78:	e7db      	b.n	800fb32 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800fb7a:	f10a 0a01 	add.w	sl, sl, #1
 800fb7e:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800fb82:	e7d6      	b.n	800fb32 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800fb84:	f108 0810 	add.w	r8, r8, #16
 800fb88:	fa5f f888 	uxtb.w	r8, r8
 800fb8c:	3601      	adds	r6, #1
 800fb8e:	b2f6      	uxtb	r6, r6
 800fb90:	fa1f f388 	uxth.w	r3, r8
 800fb94:	8a2a      	ldrh	r2, [r5, #16]
 800fb96:	4293      	cmp	r3, r2
 800fb98:	d201      	bcs.n	800fb9e <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800fb9a:	2400      	movs	r4, #0
 800fb9c:	e7cb      	b.n	800fb36 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800fb9e:	9b00      	ldr	r3, [sp, #0]
 800fba0:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800fba4:	9b01      	ldr	r3, [sp, #4]
 800fba6:	f883 a000 	strb.w	sl, [r3]
}
 800fbaa:	b003      	add	sp, #12
 800fbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbb0 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800fbb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbb4:	b085      	sub	sp, #20
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	460f      	mov	r7, r1
 800fbba:	4616      	mov	r6, r2
 800fbbc:	461d      	mov	r5, r3
 800fbbe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800fbc2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800fbc6:	6840      	ldr	r0, [r0, #4]
 800fbc8:	f004 fcae 	bl	8014528 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800fbcc:	6823      	ldr	r3, [r4, #0]
 800fbce:	1a1b      	subs	r3, r3, r0
 800fbd0:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800fbda:	2300      	movs	r3, #0
 800fbdc:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800fbde:	6863      	ldr	r3, [r4, #4]
 800fbe0:	b113      	cbz	r3, 800fbe8 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800fbe2:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800fbe4:	4283      	cmp	r3, r0
 800fbe6:	d81e      	bhi.n	800fc26 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800fbec:	69e3      	ldr	r3, [r4, #28]
 800fbee:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800fbf2:	781f      	ldrb	r7, [r3, #0]
 800fbf4:	69a3      	ldr	r3, [r4, #24]
 800fbf6:	9303      	str	r3, [sp, #12]
 800fbf8:	ab01      	add	r3, sp, #4
 800fbfa:	f104 020c 	add.w	r2, r4, #12
 800fbfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc02:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc06:	7d23      	ldrb	r3, [r4, #20]
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	7a23      	ldrb	r3, [r4, #8]
 800fc0c:	7a62      	ldrb	r2, [r4, #9]
 800fc0e:	4661      	mov	r1, ip
 800fc10:	4638      	mov	r0, r7
 800fc12:	f7ff fe09 	bl	800f828 <RegionCommonUpdateBandTimeOff>
 800fc16:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800fc1a:	4643      	mov	r3, r8
 800fc1c:	462a      	mov	r2, r5
 800fc1e:	4631      	mov	r1, r6
 800fc20:	69e0      	ldr	r0, [r4, #28]
 800fc22:	f7ff ff5e 	bl	800fae2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800fc26:	782b      	ldrb	r3, [r5, #0]
 800fc28:	b923      	cbnz	r3, 800fc34 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800fc2a:	f898 3000 	ldrb.w	r3, [r8]
 800fc2e:	b13b      	cbz	r3, 800fc40 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800fc30:	200b      	movs	r0, #11
 800fc32:	e002      	b.n	800fc3a <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800fc34:	2000      	movs	r0, #0
 800fc36:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800fc3a:	b005      	add	sp, #20
 800fc3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800fc40:	200c      	movs	r0, #12
 800fc42:	e7fa      	b.n	800fc3a <RegionCommonIdentifyChannels+0x8a>

0800fc44 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800fc44:	b570      	push	{r4, r5, r6, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800fc4a:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800fc4e:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800fc52:	42a6      	cmp	r6, r4
 800fc54:	d011      	beq.n	800fc7a <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800fc56:	3c01      	subs	r4, #1
 800fc58:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800fc5a:	42a6      	cmp	r6, r4
 800fc5c:	d00e      	beq.n	800fc7c <RegionCommonGetNextLowerTxDr+0x38>
 800fc5e:	68ab      	ldr	r3, [r5, #8]
 800fc60:	9301      	str	r3, [sp, #4]
 800fc62:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	4633      	mov	r3, r6
 800fc6a:	4622      	mov	r2, r4
 800fc6c:	6869      	ldr	r1, [r5, #4]
 800fc6e:	78e8      	ldrb	r0, [r5, #3]
 800fc70:	f7ff fd4b 	bl	800f70a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d0ee      	beq.n	800fc56 <RegionCommonGetNextLowerTxDr+0x12>
 800fc78:	e000      	b.n	800fc7c <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800fc7a:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800fc7c:	4620      	mov	r0, r4
 800fc7e:	b002      	add	sp, #8
 800fc80:	bd70      	pop	{r4, r5, r6, pc}

0800fc82 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800fc82:	4288      	cmp	r0, r1
 800fc84:	bfb8      	it	lt
 800fc86:	4608      	movlt	r0, r1
 800fc88:	4770      	bx	lr
	...

0800fc8c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800fc8c:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800fc90:	4a05      	ldr	r2, [pc, #20]	; (800fca8 <RegionCommonGetBandwidth+0x1c>)
 800fc92:	4293      	cmp	r3, r2
 800fc94:	d004      	beq.n	800fca0 <RegionCommonGetBandwidth+0x14>
 800fc96:	4a05      	ldr	r2, [pc, #20]	; (800fcac <RegionCommonGetBandwidth+0x20>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d103      	bne.n	800fca4 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800fc9c:	2002      	movs	r0, #2
 800fc9e:	4770      	bx	lr
            return 1;
 800fca0:	2001      	movs	r0, #1
 800fca2:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800fca4:	2000      	movs	r0, #0
    }
}
 800fca6:	4770      	bx	lr
 800fca8:	0003d090 	.word	0x0003d090
 800fcac:	0007a120 	.word	0x0007a120

0800fcb0 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800fcb0:	b500      	push	{lr}
 800fcb2:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800fcb4:	2805      	cmp	r0, #5
 800fcb6:	d80e      	bhi.n	800fcd6 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800fcb8:	9202      	str	r2, [sp, #8]
 800fcba:	9101      	str	r1, [sp, #4]
 800fcbc:	4b0a      	ldr	r3, [pc, #40]	; (800fce8 <RegionCommonRxConfigPrint+0x38>)
 800fcbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	4b09      	ldr	r3, [pc, #36]	; (800fcec <RegionCommonRxConfigPrint+0x3c>)
 800fcc6:	2201      	movs	r2, #1
 800fcc8:	2100      	movs	r1, #0
 800fcca:	2002      	movs	r0, #2
 800fccc:	f004 f9ea 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800fcd0:	b005      	add	sp, #20
 800fcd2:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800fcd6:	9201      	str	r2, [sp, #4]
 800fcd8:	9100      	str	r1, [sp, #0]
 800fcda:	4b05      	ldr	r3, [pc, #20]	; (800fcf0 <RegionCommonRxConfigPrint+0x40>)
 800fcdc:	2201      	movs	r2, #1
 800fcde:	2100      	movs	r1, #0
 800fce0:	2002      	movs	r0, #2
 800fce2:	f004 f9df 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800fce6:	e7f3      	b.n	800fcd0 <RegionCommonRxConfigPrint+0x20>
 800fce8:	08015458 	.word	0x08015458
 800fcec:	080153f0 	.word	0x080153f0
 800fcf0:	08015410 	.word	0x08015410

0800fcf4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800fcf4:	b500      	push	{lr}
 800fcf6:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800fcf8:	9101      	str	r1, [sp, #4]
 800fcfa:	9000      	str	r0, [sp, #0]
 800fcfc:	4b04      	ldr	r3, [pc, #16]	; (800fd10 <RegionCommonTxConfigPrint+0x1c>)
 800fcfe:	2201      	movs	r2, #1
 800fd00:	2100      	movs	r1, #0
 800fd02:	2002      	movs	r0, #2
 800fd04:	f004 f9ce 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 800fd08:	b003      	add	sp, #12
 800fd0a:	f85d fb04 	ldr.w	pc, [sp], #4
 800fd0e:	bf00      	nop
 800fd10:	0801542c 	.word	0x0801542c

0800fd14 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	4604      	mov	r4, r0
 800fd18:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800fd1a:	4b1b      	ldr	r3, [pc, #108]	; (800fd88 <VerifyRfFreq+0x74>)
 800fd1c:	6a1b      	ldr	r3, [r3, #32]
 800fd1e:	4798      	blx	r3
 800fd20:	b130      	cbz	r0, 800fd30 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800fd22:	4b1a      	ldr	r3, [pc, #104]	; (800fd8c <VerifyRfFreq+0x78>)
 800fd24:	4423      	add	r3, r4
 800fd26:	4a1a      	ldr	r2, [pc, #104]	; (800fd90 <VerifyRfFreq+0x7c>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d802      	bhi.n	800fd32 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800fd2c:	2302      	movs	r3, #2
 800fd2e:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800fd30:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800fd32:	4b18      	ldr	r3, [pc, #96]	; (800fd94 <VerifyRfFreq+0x80>)
 800fd34:	4423      	add	r3, r4
 800fd36:	4a18      	ldr	r2, [pc, #96]	; (800fd98 <VerifyRfFreq+0x84>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d802      	bhi.n	800fd42 <VerifyRfFreq+0x2e>
        *band = 0;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	702b      	strb	r3, [r5, #0]
 800fd40:	e7f6      	b.n	800fd30 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800fd42:	4b16      	ldr	r3, [pc, #88]	; (800fd9c <VerifyRfFreq+0x88>)
 800fd44:	4423      	add	r3, r4
 800fd46:	4a16      	ldr	r2, [pc, #88]	; (800fda0 <VerifyRfFreq+0x8c>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d802      	bhi.n	800fd52 <VerifyRfFreq+0x3e>
        *band = 1;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	702b      	strb	r3, [r5, #0]
 800fd50:	e7ee      	b.n	800fd30 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800fd52:	4b14      	ldr	r3, [pc, #80]	; (800fda4 <VerifyRfFreq+0x90>)
 800fd54:	4423      	add	r3, r4
 800fd56:	4a14      	ldr	r2, [pc, #80]	; (800fda8 <VerifyRfFreq+0x94>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d802      	bhi.n	800fd62 <VerifyRfFreq+0x4e>
        *band = 5;
 800fd5c:	2305      	movs	r3, #5
 800fd5e:	702b      	strb	r3, [r5, #0]
 800fd60:	e7e6      	b.n	800fd30 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800fd62:	4b12      	ldr	r3, [pc, #72]	; (800fdac <VerifyRfFreq+0x98>)
 800fd64:	4423      	add	r3, r4
 800fd66:	4a12      	ldr	r2, [pc, #72]	; (800fdb0 <VerifyRfFreq+0x9c>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d802      	bhi.n	800fd72 <VerifyRfFreq+0x5e>
        *band = 3;
 800fd6c:	2303      	movs	r3, #3
 800fd6e:	702b      	strb	r3, [r5, #0]
 800fd70:	e7de      	b.n	800fd30 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800fd72:	4b10      	ldr	r3, [pc, #64]	; (800fdb4 <VerifyRfFreq+0xa0>)
 800fd74:	4423      	add	r3, r4
 800fd76:	4a10      	ldr	r2, [pc, #64]	; (800fdb8 <VerifyRfFreq+0xa4>)
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	d802      	bhi.n	800fd82 <VerifyRfFreq+0x6e>
        *band = 4;
 800fd7c:	2304      	movs	r3, #4
 800fd7e:	702b      	strb	r3, [r5, #0]
 800fd80:	e7d6      	b.n	800fd30 <VerifyRfFreq+0x1c>
        return false;
 800fd82:	2000      	movs	r0, #0
 800fd84:	e7d4      	b.n	800fd30 <VerifyRfFreq+0x1c>
 800fd86:	bf00      	nop
 800fd88:	08015a90 	.word	0x08015a90
 800fd8c:	cc8faa40 	.word	0xcc8faa40
 800fd90:	001e847f 	.word	0x001e847f
 800fd94:	cc7125c0 	.word	0xcc7125c0
 800fd98:	002dc6c0 	.word	0x002dc6c0
 800fd9c:	cc435eff 	.word	0xcc435eff
 800fda0:	000927bf 	.word	0x000927bf
 800fda4:	cc38b0a0 	.word	0xcc38b0a0
 800fda8:	0007a120 	.word	0x0007a120
 800fdac:	cc2e0240 	.word	0xcc2e0240
 800fdb0:	0003d090 	.word	0x0003d090
 800fdb4:	cc296e60 	.word	0xcc296e60
 800fdb8:	000493e0 	.word	0x000493e0

0800fdbc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800fdbc:	b570      	push	{r4, r5, r6, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800fdc4:	4b13      	ldr	r3, [pc, #76]	; (800fe14 <GetTimeOnAir+0x58>)
 800fdc6:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800fdc8:	4913      	ldr	r1, [pc, #76]	; (800fe18 <GetTimeOnAir+0x5c>)
 800fdca:	f7ff ff5f 	bl	800fc8c <RegionCommonGetBandwidth>
 800fdce:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800fdd0:	2d07      	cmp	r5, #7
 800fdd2:	d00e      	beq.n	800fdf2 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800fdd4:	4b11      	ldr	r3, [pc, #68]	; (800fe1c <GetTimeOnAir+0x60>)
 800fdd6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800fdd8:	2001      	movs	r0, #1
 800fdda:	9003      	str	r0, [sp, #12]
 800fddc:	b2e4      	uxtb	r4, r4
 800fdde:	9402      	str	r4, [sp, #8]
 800fde0:	2300      	movs	r3, #0
 800fde2:	9301      	str	r3, [sp, #4]
 800fde4:	2308      	movs	r3, #8
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	4603      	mov	r3, r0
 800fdea:	4632      	mov	r2, r6
 800fdec:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800fdee:	b004      	add	sp, #16
 800fdf0:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800fdf2:	4b0a      	ldr	r3, [pc, #40]	; (800fe1c <GetTimeOnAir+0x60>)
 800fdf4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	9303      	str	r3, [sp, #12]
 800fdfa:	b2e4      	uxtb	r4, r4
 800fdfc:	9402      	str	r4, [sp, #8]
 800fdfe:	2000      	movs	r0, #0
 800fe00:	9001      	str	r0, [sp, #4]
 800fe02:	2305      	movs	r3, #5
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	4603      	mov	r3, r0
 800fe08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fe0c:	fb06 f202 	mul.w	r2, r6, r2
 800fe10:	47a8      	blx	r5
 800fe12:	e7ec      	b.n	800fdee <GetTimeOnAir+0x32>
 800fe14:	08015490 	.word	0x08015490
 800fe18:	08015470 	.word	0x08015470
 800fe1c:	08015a90 	.word	0x08015a90

0800fe20 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800fe20:	b500      	push	{lr}
 800fe22:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800fe24:	2300      	movs	r3, #0
 800fe26:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800fe28:	7803      	ldrb	r3, [r0, #0]
 800fe2a:	3b0b      	subs	r3, #11
 800fe2c:	2b2d      	cmp	r3, #45	; 0x2d
 800fe2e:	d82f      	bhi.n	800fe90 <RegionEU868GetPhyParam+0x70>
 800fe30:	e8df f003 	tbb	[pc, r3]
 800fe34:	3f393633 	.word	0x3f393633
 800fe38:	504c4845 	.word	0x504c4845
 800fe3c:	2e5c5854 	.word	0x2e5c5854
 800fe40:	6e682e65 	.word	0x6e682e65
 800fe44:	2e2e7774 	.word	0x2e2e7774
 800fe48:	2e177f7b 	.word	0x2e177f7b
 800fe4c:	2e2e2e2e 	.word	0x2e2e2e2e
 800fe50:	2e2e2e2e 	.word	0x2e2e2e2e
 800fe54:	2e2e2e2e 	.word	0x2e2e2e2e
 800fe58:	2e8c8582 	.word	0x2e8c8582
 800fe5c:	2e928f2e 	.word	0x2e928f2e
 800fe60:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800fe62:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800fe66:	f88d 3004 	strb.w	r3, [sp, #4]
 800fe6a:	2307      	movs	r3, #7
 800fe6c:	f88d 3005 	strb.w	r3, [sp, #5]
 800fe70:	2300      	movs	r3, #0
 800fe72:	f88d 3006 	strb.w	r3, [sp, #6]
 800fe76:	2310      	movs	r3, #16
 800fe78:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800fe7c:	4b3e      	ldr	r3, [pc, #248]	; (800ff78 <RegionEU868GetPhyParam+0x158>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800fe84:	9202      	str	r2, [sp, #8]
 800fe86:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800fe88:	a801      	add	r0, sp, #4
 800fe8a:	f7ff fedb 	bl	800fc44 <RegionCommonGetNextLowerTxDr>
 800fe8e:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800fe90:	9804      	ldr	r0, [sp, #16]
 800fe92:	9005      	str	r0, [sp, #20]
}
 800fe94:	b007      	add	sp, #28
 800fe96:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800fe9a:	2340      	movs	r3, #64	; 0x40
 800fe9c:	9304      	str	r3, [sp, #16]
            break;
 800fe9e:	e7f7      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800fea0:	2320      	movs	r3, #32
 800fea2:	9304      	str	r3, [sp, #16]
            break;
 800fea4:	e7f4      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800fea6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800feaa:	4a34      	ldr	r2, [pc, #208]	; (800ff7c <RegionEU868GetPhyParam+0x15c>)
 800feac:	5cd3      	ldrb	r3, [r2, r3]
 800feae:	9304      	str	r3, [sp, #16]
            break;
 800feb0:	e7ee      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800feb2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800feb6:	4a32      	ldr	r2, [pc, #200]	; (800ff80 <RegionEU868GetPhyParam+0x160>)
 800feb8:	5cd3      	ldrb	r3, [r2, r3]
 800feba:	9304      	str	r3, [sp, #16]
            break;
 800febc:	e7e8      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800febe:	2301      	movs	r3, #1
 800fec0:	9304      	str	r3, [sp, #16]
            break;
 800fec2:	e7e5      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800fec4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800fec8:	9304      	str	r3, [sp, #16]
            break;
 800feca:	e7e1      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800fecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fed0:	9304      	str	r3, [sp, #16]
            break;
 800fed2:	e7dd      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800fed4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fed8:	9304      	str	r3, [sp, #16]
            break;
 800feda:	e7d9      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800fedc:	f241 3388 	movw	r3, #5000	; 0x1388
 800fee0:	9304      	str	r3, [sp, #16]
            break;
 800fee2:	e7d5      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800fee4:	f241 7370 	movw	r3, #6000	; 0x1770
 800fee8:	9304      	str	r3, [sp, #16]
            break;
 800feea:	e7d1      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800feec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fef0:	4824      	ldr	r0, [pc, #144]	; (800ff84 <RegionEU868GetPhyParam+0x164>)
 800fef2:	f002 fa21 	bl	8012338 <randr>
 800fef6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800fefa:	9004      	str	r0, [sp, #16]
            break;
 800fefc:	e7c8      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800fefe:	4b22      	ldr	r3, [pc, #136]	; (800ff88 <RegionEU868GetPhyParam+0x168>)
 800ff00:	9304      	str	r3, [sp, #16]
            break;
 800ff02:	e7c5      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ff04:	4b1c      	ldr	r3, [pc, #112]	; (800ff78 <RegionEU868GetPhyParam+0x158>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800ff0c:	9304      	str	r3, [sp, #16]
            break;
 800ff0e:	e7bf      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800ff10:	4b19      	ldr	r3, [pc, #100]	; (800ff78 <RegionEU868GetPhyParam+0x158>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800ff18:	9304      	str	r3, [sp, #16]
            break;
 800ff1a:	e7b9      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800ff1c:	2310      	movs	r3, #16
 800ff1e:	9304      	str	r3, [sp, #16]
            break;
 800ff20:	e7b6      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800ff22:	4b15      	ldr	r3, [pc, #84]	; (800ff78 <RegionEU868GetPhyParam+0x158>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	9304      	str	r3, [sp, #16]
            break;
 800ff28:	e7b2      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800ff2a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800ff2e:	9304      	str	r3, [sp, #16]
            break;
 800ff30:	e7ae      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800ff32:	4b16      	ldr	r3, [pc, #88]	; (800ff8c <RegionEU868GetPhyParam+0x16c>)
 800ff34:	9304      	str	r3, [sp, #16]
            break;
 800ff36:	e7ab      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800ff38:	4b13      	ldr	r3, [pc, #76]	; (800ff88 <RegionEU868GetPhyParam+0x168>)
 800ff3a:	9304      	str	r3, [sp, #16]
            break;
 800ff3c:	e7a8      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800ff3e:	2311      	movs	r3, #17
 800ff40:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800ff44:	2301      	movs	r3, #1
 800ff46:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800ff4a:	e7a1      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800ff4c:	2303      	movs	r3, #3
 800ff4e:	9304      	str	r3, [sp, #16]
            break;
 800ff50:	e79e      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800ff52:	4b0d      	ldr	r3, [pc, #52]	; (800ff88 <RegionEU868GetPhyParam+0x168>)
 800ff54:	9304      	str	r3, [sp, #16]
            break;
 800ff56:	e79b      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800ff58:	2303      	movs	r3, #3
 800ff5a:	9304      	str	r3, [sp, #16]
            break;
 800ff5c:	e798      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800ff5e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800ff62:	4a0b      	ldr	r2, [pc, #44]	; (800ff90 <RegionEU868GetPhyParam+0x170>)
 800ff64:	5cd3      	ldrb	r3, [r2, r3]
 800ff66:	9304      	str	r3, [sp, #16]
            break;
 800ff68:	e792      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800ff6a:	490a      	ldr	r1, [pc, #40]	; (800ff94 <RegionEU868GetPhyParam+0x174>)
 800ff6c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800ff70:	f7ff fe8c 	bl	800fc8c <RegionCommonGetBandwidth>
 800ff74:	9004      	str	r0, [sp, #16]
            break;
 800ff76:	e78b      	b.n	800fe90 <RegionEU868GetPhyParam+0x70>
 800ff78:	20003c9c 	.word	0x20003c9c
 800ff7c:	08015498 	.word	0x08015498
 800ff80:	080154a0 	.word	0x080154a0
 800ff84:	fffffc18 	.word	0xfffffc18
 800ff88:	33d3e608 	.word	0x33d3e608
 800ff8c:	4009999a 	.word	0x4009999a
 800ff90:	08015490 	.word	0x08015490
 800ff94:	08015470 	.word	0x08015470

0800ff98 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800ff98:	b510      	push	{r4, lr}
 800ff9a:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800ff9c:	4b0b      	ldr	r3, [pc, #44]	; (800ffcc <RegionEU868SetBandTxDone+0x34>)
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	7803      	ldrb	r3, [r0, #0]
 800ffa2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ffa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ffaa:	7a5b      	ldrb	r3, [r3, #9]
 800ffac:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800ffb0:	4b07      	ldr	r3, [pc, #28]	; (800ffd0 <RegionEU868SetBandTxDone+0x38>)
 800ffb2:	681c      	ldr	r4, [r3, #0]
 800ffb4:	6903      	ldr	r3, [r0, #16]
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	68c3      	ldr	r3, [r0, #12]
 800ffba:	7842      	ldrb	r2, [r0, #1]
 800ffbc:	6881      	ldr	r1, [r0, #8]
 800ffbe:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800ffc2:	f7ff fc18 	bl	800f7f6 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800ffc6:	b002      	add	sp, #8
 800ffc8:	bd10      	pop	{r4, pc}
 800ffca:	bf00      	nop
 800ffcc:	20003c9c 	.word	0x20003c9c
 800ffd0:	20003c98 	.word	0x20003c98

0800ffd4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800ffd4:	b530      	push	{r4, r5, lr}
 800ffd6:	b0a5      	sub	sp, #148	; 0x94
 800ffd8:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800ffda:	2290      	movs	r2, #144	; 0x90
 800ffdc:	2100      	movs	r1, #0
 800ffde:	4668      	mov	r0, sp
 800ffe0:	f004 fd6a 	bl	8014ab8 <memset>
 800ffe4:	2364      	movs	r3, #100	; 0x64
 800ffe6:	f8ad 3000 	strh.w	r3, [sp]
 800ffea:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ffee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fff2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800fff6:	210a      	movs	r1, #10
 800fff8:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800fffc:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8010000:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8010004:	7b23      	ldrb	r3, [r4, #12]
 8010006:	2b01      	cmp	r3, #1
 8010008:	d032      	beq.n	8010070 <RegionEU868InitDefaults+0x9c>
 801000a:	2b02      	cmp	r3, #2
 801000c:	d03e      	beq.n	801008c <RegionEU868InitDefaults+0xb8>
 801000e:	b10b      	cbz	r3, 8010014 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8010010:	b025      	add	sp, #148	; 0x94
 8010012:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010014:	6823      	ldr	r3, [r4, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d0fa      	beq.n	8010010 <RegionEU868InitDefaults+0x3c>
 801001a:	6863      	ldr	r3, [r4, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d0f7      	beq.n	8010010 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010020:	4d1f      	ldr	r5, [pc, #124]	; (80100a0 <RegionEU868InitDefaults+0xcc>)
 8010022:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 8010024:	68a0      	ldr	r0, [r4, #8]
 8010026:	4b1f      	ldr	r3, [pc, #124]	; (80100a4 <RegionEU868InitDefaults+0xd0>)
 8010028:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801002a:	2290      	movs	r2, #144	; 0x90
 801002c:	4669      	mov	r1, sp
 801002e:	f002 f990 	bl	8012352 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8010032:	682c      	ldr	r4, [r5, #0]
 8010034:	4b1c      	ldr	r3, [pc, #112]	; (80100a8 <RegionEU868InitDefaults+0xd4>)
 8010036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801003a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801003e:	f104 0c0c 	add.w	ip, r4, #12
 8010042:	f103 020c 	add.w	r2, r3, #12
 8010046:	ca07      	ldmia	r2, {r0, r1, r2}
 8010048:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801004c:	f104 0c18 	add.w	ip, r4, #24
 8010050:	3318      	adds	r3, #24
 8010052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010056:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801005a:	2307      	movs	r3, #7
 801005c:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010060:	2201      	movs	r2, #1
 8010062:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 8010066:	f504 7058 	add.w	r0, r4, #864	; 0x360
 801006a:	f7ff fbb5 	bl	800f7d8 <RegionCommonChanMaskCopy>
            break;
 801006e:	e7cf      	b.n	8010010 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8010070:	4b0b      	ldr	r3, [pc, #44]	; (80100a0 <RegionEU868InitDefaults+0xcc>)
 8010072:	6818      	ldr	r0, [r3, #0]
 8010074:	2300      	movs	r3, #0
 8010076:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8010078:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801007a:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801007c:	2201      	movs	r2, #1
 801007e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010082:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010086:	f7ff fba7 	bl	800f7d8 <RegionCommonChanMaskCopy>
            break;
 801008a:	e7c1      	b.n	8010010 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801008c:	4b04      	ldr	r3, [pc, #16]	; (80100a0 <RegionEU868InitDefaults+0xcc>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8010094:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8010098:	430a      	orrs	r2, r1
 801009a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801009e:	e7b7      	b.n	8010010 <RegionEU868InitDefaults+0x3c>
 80100a0:	20003c9c 	.word	0x20003c9c
 80100a4:	20003c98 	.word	0x20003c98
 80100a8:	08014c28 	.word	0x08014c28

080100ac <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80100ac:	b500      	push	{lr}
 80100ae:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80100b0:	290f      	cmp	r1, #15
 80100b2:	d83c      	bhi.n	801012e <RegionEU868Verify+0x82>
 80100b4:	e8df f001 	tbb	[pc, r1]
 80100b8:	3b3b3b0a 	.word	0x3b3b3b0a
 80100bc:	271d133b 	.word	0x271d133b
 80100c0:	3b31313b 	.word	0x3b31313b
 80100c4:	083b3b3b 	.word	0x083b3b3b
 80100c8:	2001      	movs	r0, #1
 80100ca:	e031      	b.n	8010130 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80100cc:	2300      	movs	r3, #0
 80100ce:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 80100d2:	f10d 0107 	add.w	r1, sp, #7
 80100d6:	6800      	ldr	r0, [r0, #0]
 80100d8:	f7ff fe1c 	bl	800fd14 <VerifyRfFreq>
 80100dc:	e028      	b.n	8010130 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80100de:	2207      	movs	r2, #7
 80100e0:	2100      	movs	r1, #0
 80100e2:	f990 0000 	ldrsb.w	r0, [r0]
 80100e6:	f7ff fb06 	bl	800f6f6 <RegionCommonValueInRange>
 80100ea:	3800      	subs	r0, #0
 80100ec:	bf18      	it	ne
 80100ee:	2001      	movne	r0, #1
 80100f0:	e01e      	b.n	8010130 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80100f2:	2205      	movs	r2, #5
 80100f4:	2100      	movs	r1, #0
 80100f6:	f990 0000 	ldrsb.w	r0, [r0]
 80100fa:	f7ff fafc 	bl	800f6f6 <RegionCommonValueInRange>
 80100fe:	3800      	subs	r0, #0
 8010100:	bf18      	it	ne
 8010102:	2001      	movne	r0, #1
 8010104:	e014      	b.n	8010130 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8010106:	2207      	movs	r2, #7
 8010108:	2100      	movs	r1, #0
 801010a:	f990 0000 	ldrsb.w	r0, [r0]
 801010e:	f7ff faf2 	bl	800f6f6 <RegionCommonValueInRange>
 8010112:	3800      	subs	r0, #0
 8010114:	bf18      	it	ne
 8010116:	2001      	movne	r0, #1
 8010118:	e00a      	b.n	8010130 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801011a:	2207      	movs	r2, #7
 801011c:	2100      	movs	r1, #0
 801011e:	f990 0000 	ldrsb.w	r0, [r0]
 8010122:	f7ff fae8 	bl	800f6f6 <RegionCommonValueInRange>
 8010126:	3800      	subs	r0, #0
 8010128:	bf18      	it	ne
 801012a:	2001      	movne	r0, #1
 801012c:	e000      	b.n	8010130 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 801012e:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8010130:	b003      	add	sp, #12
 8010132:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08010138 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010138:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801013a:	7903      	ldrb	r3, [r0, #4]
 801013c:	b11b      	cbz	r3, 8010146 <RegionEU868ChanMaskSet+0xe>
 801013e:	2b01      	cmp	r3, #1
 8010140:	d00b      	beq.n	801015a <RegionEU868ChanMaskSet+0x22>
 8010142:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8010144:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010146:	4b0a      	ldr	r3, [pc, #40]	; (8010170 <RegionEU868ChanMaskSet+0x38>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2201      	movs	r2, #1
 801014c:	6801      	ldr	r1, [r0, #0]
 801014e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8010152:	f7ff fb41 	bl	800f7d8 <RegionCommonChanMaskCopy>
    return true;
 8010156:	2001      	movs	r0, #1
            break;
 8010158:	e7f4      	b.n	8010144 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801015a:	4b05      	ldr	r3, [pc, #20]	; (8010170 <RegionEU868ChanMaskSet+0x38>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2201      	movs	r2, #1
 8010160:	6801      	ldr	r1, [r0, #0]
 8010162:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8010166:	f7ff fb37 	bl	800f7d8 <RegionCommonChanMaskCopy>
    return true;
 801016a:	2001      	movs	r0, #1
            break;
 801016c:	e7ea      	b.n	8010144 <RegionEU868ChanMaskSet+0xc>
 801016e:	bf00      	nop
 8010170:	20003c9c 	.word	0x20003c9c

08010174 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010176:	b083      	sub	sp, #12
 8010178:	460e      	mov	r6, r1
 801017a:	4617      	mov	r7, r2
 801017c:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801017e:	2807      	cmp	r0, #7
 8010180:	bfa8      	it	ge
 8010182:	2007      	movge	r0, #7
 8010184:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8010186:	4913      	ldr	r1, [pc, #76]	; (80101d4 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010188:	f7ff fd80 	bl	800fc8c <RegionCommonGetBandwidth>
 801018c:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801018e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010192:	2b07      	cmp	r3, #7
 8010194:	d017      	beq.n	80101c6 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8010196:	4a0f      	ldr	r2, [pc, #60]	; (80101d4 <RegionEU868ComputeRxWindowParameters+0x60>)
 8010198:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801019c:	4a0e      	ldr	r2, [pc, #56]	; (80101d8 <RegionEU868ComputeRxWindowParameters+0x64>)
 801019e:	5cd0      	ldrb	r0, [r2, r3]
 80101a0:	f7ff fc40 	bl	800fa24 <RegionCommonComputeSymbolTimeLoRa>
 80101a4:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80101a6:	4b0d      	ldr	r3, [pc, #52]	; (80101dc <RegionEU868ComputeRxWindowParameters+0x68>)
 80101a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80101aa:	4798      	blx	r3
 80101ac:	4603      	mov	r3, r0
 80101ae:	f104 020c 	add.w	r2, r4, #12
 80101b2:	9201      	str	r2, [sp, #4]
 80101b4:	3408      	adds	r4, #8
 80101b6:	9400      	str	r4, [sp, #0]
 80101b8:	463a      	mov	r2, r7
 80101ba:	4631      	mov	r1, r6
 80101bc:	4628      	mov	r0, r5
 80101be:	f7ff fc3f 	bl	800fa40 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80101c2:	b003      	add	sp, #12
 80101c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80101c6:	4a04      	ldr	r2, [pc, #16]	; (80101d8 <RegionEU868ComputeRxWindowParameters+0x64>)
 80101c8:	5cd0      	ldrb	r0, [r2, r3]
 80101ca:	f7ff fc33 	bl	800fa34 <RegionCommonComputeSymbolTimeFsk>
 80101ce:	4605      	mov	r5, r0
 80101d0:	e7e9      	b.n	80101a6 <RegionEU868ComputeRxWindowParameters+0x32>
 80101d2:	bf00      	nop
 80101d4:	08015470 	.word	0x08015470
 80101d8:	08015490 	.word	0x08015490
 80101dc:	08015a90 	.word	0x08015a90

080101e0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80101e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101e4:	b08a      	sub	sp, #40	; 0x28
 80101e6:	4604      	mov	r4, r0
 80101e8:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80101ea:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 80101ee:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 80101f2:	4b37      	ldr	r3, [pc, #220]	; (80102d0 <RegionEU868RxConfig+0xf0>)
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	4798      	blx	r3
 80101f8:	2800      	cmp	r0, #0
 80101fa:	d167      	bne.n	80102cc <RegionEU868RxConfig+0xec>
 80101fc:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80101fe:	7ce3      	ldrb	r3, [r4, #19]
 8010200:	b983      	cbnz	r3, 8010224 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010202:	4b34      	ldr	r3, [pc, #208]	; (80102d4 <RegionEU868RxConfig+0xf4>)
 8010204:	681a      	ldr	r2, [r3, #0]
 8010206:	7823      	ldrb	r3, [r4, #0]
 8010208:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801020c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8010210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010218:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801021c:	f1b8 0f00 	cmp.w	r8, #0
 8010220:	d100      	bne.n	8010224 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8010222:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8010224:	4b2c      	ldr	r3, [pc, #176]	; (80102d8 <RegionEU868RxConfig+0xf8>)
 8010226:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 801022a:	4b29      	ldr	r3, [pc, #164]	; (80102d0 <RegionEU868RxConfig+0xf0>)
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	4640      	mov	r0, r8
 8010230:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8010232:	2d07      	cmp	r5, #7
 8010234:	d02b      	beq.n	801028e <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010236:	4b26      	ldr	r3, [pc, #152]	; (80102d0 <RegionEU868RxConfig+0xf0>)
 8010238:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801023c:	7ca3      	ldrb	r3, [r4, #18]
 801023e:	9309      	str	r3, [sp, #36]	; 0x24
 8010240:	2601      	movs	r6, #1
 8010242:	9608      	str	r6, [sp, #32]
 8010244:	2300      	movs	r3, #0
 8010246:	9307      	str	r3, [sp, #28]
 8010248:	9306      	str	r3, [sp, #24]
 801024a:	9305      	str	r3, [sp, #20]
 801024c:	9304      	str	r3, [sp, #16]
 801024e:	9303      	str	r3, [sp, #12]
 8010250:	8922      	ldrh	r2, [r4, #8]
 8010252:	9202      	str	r2, [sp, #8]
 8010254:	2208      	movs	r2, #8
 8010256:	9201      	str	r2, [sp, #4]
 8010258:	9300      	str	r3, [sp, #0]
 801025a:	4633      	mov	r3, r6
 801025c:	464a      	mov	r2, r9
 801025e:	78a1      	ldrb	r1, [r4, #2]
 8010260:	4630      	mov	r0, r6
 8010262:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8010264:	7c63      	ldrb	r3, [r4, #17]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d02d      	beq.n	80102c6 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801026a:	4b1c      	ldr	r3, [pc, #112]	; (80102dc <RegionEU868RxConfig+0xfc>)
 801026c:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801026e:	4b18      	ldr	r3, [pc, #96]	; (80102d0 <RegionEU868RxConfig+0xf0>)
 8010270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010272:	310d      	adds	r1, #13
 8010274:	b2c9      	uxtb	r1, r1
 8010276:	4630      	mov	r0, r6
 8010278:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801027a:	462a      	mov	r2, r5
 801027c:	4641      	mov	r1, r8
 801027e:	7ce0      	ldrb	r0, [r4, #19]
 8010280:	f7ff fd16 	bl	800fcb0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8010284:	703d      	strb	r5, [r7, #0]
    return true;
 8010286:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8010288:	b00a      	add	sp, #40	; 0x28
 801028a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801028e:	4b10      	ldr	r3, [pc, #64]	; (80102d0 <RegionEU868RxConfig+0xf0>)
 8010290:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8010294:	7ca3      	ldrb	r3, [r4, #18]
 8010296:	9309      	str	r3, [sp, #36]	; 0x24
 8010298:	2000      	movs	r0, #0
 801029a:	9008      	str	r0, [sp, #32]
 801029c:	9007      	str	r0, [sp, #28]
 801029e:	9006      	str	r0, [sp, #24]
 80102a0:	2301      	movs	r3, #1
 80102a2:	9305      	str	r3, [sp, #20]
 80102a4:	9004      	str	r0, [sp, #16]
 80102a6:	9003      	str	r0, [sp, #12]
 80102a8:	8923      	ldrh	r3, [r4, #8]
 80102aa:	9302      	str	r3, [sp, #8]
 80102ac:	2305      	movs	r3, #5
 80102ae:	9301      	str	r3, [sp, #4]
 80102b0:	4b0b      	ldr	r3, [pc, #44]	; (80102e0 <RegionEU868RxConfig+0x100>)
 80102b2:	9300      	str	r3, [sp, #0]
 80102b4:	4603      	mov	r3, r0
 80102b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80102ba:	fb02 f209 	mul.w	r2, r2, r9
 80102be:	f24c 3150 	movw	r1, #50000	; 0xc350
 80102c2:	47d0      	blx	sl
 80102c4:	e7ce      	b.n	8010264 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80102c6:	4b07      	ldr	r3, [pc, #28]	; (80102e4 <RegionEU868RxConfig+0x104>)
 80102c8:	5d59      	ldrb	r1, [r3, r5]
 80102ca:	e7d0      	b.n	801026e <RegionEU868RxConfig+0x8e>
        return false;
 80102cc:	2000      	movs	r0, #0
 80102ce:	e7db      	b.n	8010288 <RegionEU868RxConfig+0xa8>
 80102d0:	08015a90 	.word	0x08015a90
 80102d4:	20003c9c 	.word	0x20003c9c
 80102d8:	08015490 	.word	0x08015490
 80102dc:	080154a0 	.word	0x080154a0
 80102e0:	00014585 	.word	0x00014585
 80102e4:	08015498 	.word	0x08015498

080102e8 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80102e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ec:	b08d      	sub	sp, #52	; 0x34
 80102ee:	4604      	mov	r4, r0
 80102f0:	460f      	mov	r7, r1
 80102f2:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80102f4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80102f8:	4a42      	ldr	r2, [pc, #264]	; (8010404 <RegionEU868TxConfig+0x11c>)
 80102fa:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80102fe:	4d42      	ldr	r5, [pc, #264]	; (8010408 <RegionEU868TxConfig+0x120>)
 8010300:	682a      	ldr	r2, [r5, #0]
 8010302:	7803      	ldrb	r3, [r0, #0]
 8010304:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801030c:	7a5b      	ldrb	r3, [r3, #9]
 801030e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010312:	4a3e      	ldr	r2, [pc, #248]	; (801040c <RegionEU868TxConfig+0x124>)
 8010314:	6812      	ldr	r2, [r2, #0]
 8010316:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801031a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801031e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8010322:	f7ff fcae 	bl	800fc82 <RegionCommonLimitTxPower>
 8010326:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8010328:	4939      	ldr	r1, [pc, #228]	; (8010410 <RegionEU868TxConfig+0x128>)
 801032a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801032e:	f7ff fcad 	bl	800fc8c <RegionCommonGetBandwidth>
 8010332:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8010334:	68a2      	ldr	r2, [r4, #8]
 8010336:	6861      	ldr	r1, [r4, #4]
 8010338:	4630      	mov	r0, r6
 801033a:	f7ff fbbd 	bl	800fab8 <RegionCommonComputeTxPower>
 801033e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010340:	4b34      	ldr	r3, [pc, #208]	; (8010414 <RegionEU868TxConfig+0x12c>)
 8010342:	68da      	ldr	r2, [r3, #12]
 8010344:	6829      	ldr	r1, [r5, #0]
 8010346:	7823      	ldrb	r3, [r4, #0]
 8010348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801034c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8010350:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8010352:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010356:	2b07      	cmp	r3, #7
 8010358:	d031      	beq.n	80103be <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801035a:	4b2e      	ldr	r3, [pc, #184]	; (8010414 <RegionEU868TxConfig+0x12c>)
 801035c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8010360:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8010364:	9308      	str	r3, [sp, #32]
 8010366:	2200      	movs	r2, #0
 8010368:	9207      	str	r2, [sp, #28]
 801036a:	9206      	str	r2, [sp, #24]
 801036c:	9205      	str	r2, [sp, #20]
 801036e:	2501      	movs	r5, #1
 8010370:	9504      	str	r5, [sp, #16]
 8010372:	9203      	str	r2, [sp, #12]
 8010374:	2308      	movs	r3, #8
 8010376:	9302      	str	r3, [sp, #8]
 8010378:	9501      	str	r5, [sp, #4]
 801037a:	f8cd a000 	str.w	sl, [sp]
 801037e:	464b      	mov	r3, r9
 8010380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010382:	4628      	mov	r0, r5
 8010384:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8010386:	4b20      	ldr	r3, [pc, #128]	; (8010408 <RegionEU868TxConfig+0x120>)
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	7823      	ldrb	r3, [r4, #0]
 801038c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010390:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8010394:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010398:	f7ff fcac 	bl	800fcf4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801039c:	89a1      	ldrh	r1, [r4, #12]
 801039e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80103a2:	f7ff fd0b 	bl	800fdbc <GetTimeOnAir>
 80103a6:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80103aa:	4b1a      	ldr	r3, [pc, #104]	; (8010414 <RegionEU868TxConfig+0x12c>)
 80103ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103ae:	7b21      	ldrb	r1, [r4, #12]
 80103b0:	4628      	mov	r0, r5
 80103b2:	4798      	blx	r3

    *txPower = txPowerLimited;
 80103b4:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 80103b6:	2001      	movs	r0, #1
 80103b8:	b00d      	add	sp, #52	; 0x34
 80103ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80103be:	4b15      	ldr	r3, [pc, #84]	; (8010414 <RegionEU868TxConfig+0x12c>)
 80103c0:	69dd      	ldr	r5, [r3, #28]
 80103c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80103c6:	fb03 f30a 	mul.w	r3, r3, sl
 80103ca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80103ce:	9208      	str	r2, [sp, #32]
 80103d0:	f04f 0b00 	mov.w	fp, #0
 80103d4:	f8cd b01c 	str.w	fp, [sp, #28]
 80103d8:	f8cd b018 	str.w	fp, [sp, #24]
 80103dc:	f8cd b014 	str.w	fp, [sp, #20]
 80103e0:	2201      	movs	r2, #1
 80103e2:	9204      	str	r2, [sp, #16]
 80103e4:	f8cd b00c 	str.w	fp, [sp, #12]
 80103e8:	2205      	movs	r2, #5
 80103ea:	9202      	str	r2, [sp, #8]
 80103ec:	f8cd b004 	str.w	fp, [sp, #4]
 80103f0:	9300      	str	r3, [sp, #0]
 80103f2:	464b      	mov	r3, r9
 80103f4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80103f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80103fa:	4658      	mov	r0, fp
 80103fc:	47a8      	blx	r5
        modem = MODEM_FSK;
 80103fe:	465d      	mov	r5, fp
 8010400:	e7c1      	b.n	8010386 <RegionEU868TxConfig+0x9e>
 8010402:	bf00      	nop
 8010404:	08015490 	.word	0x08015490
 8010408:	20003c9c 	.word	0x20003c9c
 801040c:	20003c98 	.word	0x20003c98
 8010410:	08015470 	.word	0x08015470
 8010414:	08015a90 	.word	0x08015a90

08010418 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8010418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801041c:	b08f      	sub	sp, #60	; 0x3c
 801041e:	4605      	mov	r5, r0
 8010420:	4689      	mov	r9, r1
 8010422:	4690      	mov	r8, r2
 8010424:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8010426:	2400      	movs	r4, #0
 8010428:	940c      	str	r4, [sp, #48]	; 0x30
 801042a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801042e:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8010432:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010434:	e030      	b.n	8010498 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8010436:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 801043a:	2607      	movs	r6, #7
 801043c:	e012      	b.n	8010464 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801043e:	4a57      	ldr	r2, [pc, #348]	; (801059c <RegionEU868LinkAdrReq+0x184>)
 8010440:	6812      	ldr	r2, [r2, #0]
 8010442:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8010446:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801044a:	b13a      	cbz	r2, 801045c <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801044c:	2201      	movs	r2, #1
 801044e:	fa02 f20c 	lsl.w	r2, r2, ip
 8010452:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8010456:	430a      	orrs	r2, r1
 8010458:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801045c:	f10c 0c01 	add.w	ip, ip, #1
 8010460:	fa5f fc8c 	uxtb.w	ip, ip
 8010464:	f1bc 0f0f 	cmp.w	ip, #15
 8010468:	d816      	bhi.n	8010498 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 801046a:	2b06      	cmp	r3, #6
 801046c:	d0e7      	beq.n	801043e <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801046e:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 8010472:	fa4e fe0c 	asr.w	lr, lr, ip
 8010476:	f01e 0f01 	tst.w	lr, #1
 801047a:	d0ef      	beq.n	801045c <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801047c:	4a47      	ldr	r2, [pc, #284]	; (801059c <RegionEU868LinkAdrReq+0x184>)
 801047e:	6812      	ldr	r2, [r2, #0]
 8010480:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8010484:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8010488:	2a00      	cmp	r2, #0
 801048a:	d1e7      	bne.n	801045c <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801048c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8010490:	e7e4      	b.n	801045c <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8010492:	2606      	movs	r6, #6
 8010494:	e000      	b.n	8010498 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 8010496:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010498:	7a2b      	ldrb	r3, [r5, #8]
 801049a:	42a3      	cmp	r3, r4
 801049c:	d918      	bls.n	80104d0 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801049e:	6868      	ldr	r0, [r5, #4]
 80104a0:	a90c      	add	r1, sp, #48	; 0x30
 80104a2:	4420      	add	r0, r4
 80104a4:	f7ff fa48 	bl	800f938 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80104a8:	b190      	cbz	r0, 80104d0 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 80104aa:	4404      	add	r4, r0
 80104ac:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 80104ae:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80104b2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80104b6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80104ba:	b90b      	cbnz	r3, 80104c0 <RegionEU868LinkAdrReq+0xa8>
 80104bc:	2a00      	cmp	r2, #0
 80104be:	d0e8      	beq.n	8010492 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80104c0:	1e5a      	subs	r2, r3, #1
 80104c2:	b2d2      	uxtb	r2, r2
 80104c4:	2a04      	cmp	r2, #4
 80104c6:	d9e6      	bls.n	8010496 <RegionEU868LinkAdrReq+0x7e>
 80104c8:	2b06      	cmp	r3, #6
 80104ca:	d9b4      	bls.n	8010436 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 80104cc:	2606      	movs	r6, #6
 80104ce:	e7e3      	b.n	8010498 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80104d0:	2302      	movs	r3, #2
 80104d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80104d6:	7a6b      	ldrb	r3, [r5, #9]
 80104d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80104dc:	a80a      	add	r0, sp, #40	; 0x28
 80104de:	f7ff fc9f 	bl	800fe20 <RegionEU868GetPhyParam>
 80104e2:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 80104e4:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80104e8:	7aab      	ldrb	r3, [r5, #10]
 80104ea:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80104ee:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 80104f2:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80104f6:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 80104fa:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80104fe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010502:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8010506:	f995 300b 	ldrsb.w	r3, [r5, #11]
 801050a:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801050e:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8010512:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8010516:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801051a:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801051e:	2310      	movs	r3, #16
 8010520:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8010524:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8010528:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801052a:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801052e:	2307      	movs	r3, #7
 8010530:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8010534:	4a19      	ldr	r2, [pc, #100]	; (801059c <RegionEU868LinkAdrReq+0x184>)
 8010536:	6812      	ldr	r2, [r2, #0]
 8010538:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801053a:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801053e:	2300      	movs	r3, #0
 8010540:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8010544:	682b      	ldr	r3, [r5, #0]
 8010546:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8010548:	ab0c      	add	r3, sp, #48	; 0x30
 801054a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801054e:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8010552:	a801      	add	r0, sp, #4
 8010554:	f7ff fa0e 	bl	800f974 <RegionCommonLinkAdrReqVerifyParams>
 8010558:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801055a:	2807      	cmp	r0, #7
 801055c:	d010      	beq.n	8010580 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801055e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8010562:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 8010566:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801056a:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 801056e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010572:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 8010574:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010576:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 8010578:	4628      	mov	r0, r5
 801057a:	b00f      	add	sp, #60	; 0x3c
 801057c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8010580:	4e06      	ldr	r6, [pc, #24]	; (801059c <RegionEU868LinkAdrReq+0x184>)
 8010582:	6830      	ldr	r0, [r6, #0]
 8010584:	220c      	movs	r2, #12
 8010586:	2100      	movs	r1, #0
 8010588:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801058c:	f001 fef9 	bl	8012382 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8010590:	6833      	ldr	r3, [r6, #0]
 8010592:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8010596:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 801059a:	e7e0      	b.n	801055e <RegionEU868LinkAdrReq+0x146>
 801059c:	20003c9c 	.word	0x20003c9c

080105a0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80105a0:	b530      	push	{r4, r5, lr}
 80105a2:	b083      	sub	sp, #12
 80105a4:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80105ac:	f10d 0107 	add.w	r1, sp, #7
 80105b0:	6840      	ldr	r0, [r0, #4]
 80105b2:	f7ff fbaf 	bl	800fd14 <VerifyRfFreq>
 80105b6:	b1a8      	cbz	r0, 80105e4 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 80105b8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80105ba:	2207      	movs	r2, #7
 80105bc:	2100      	movs	r1, #0
 80105be:	f994 0000 	ldrsb.w	r0, [r4]
 80105c2:	f7ff f898 	bl	800f6f6 <RegionCommonValueInRange>
 80105c6:	b908      	cbnz	r0, 80105cc <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 80105c8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80105cc:	2205      	movs	r2, #5
 80105ce:	2100      	movs	r1, #0
 80105d0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80105d4:	f7ff f88f 	bl	800f6f6 <RegionCommonValueInRange>
 80105d8:	b908      	cbnz	r0, 80105de <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80105da:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 80105de:	4628      	mov	r0, r5
 80105e0:	b003      	add	sp, #12
 80105e2:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80105e4:	2506      	movs	r5, #6
 80105e6:	e7e8      	b.n	80105ba <RegionEU868RxParamSetupReq+0x1a>

080105e8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80105e8:	f04f 30ff 	mov.w	r0, #4294967295
 80105ec:	4770      	bx	lr
	...

080105f0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80105f0:	b510      	push	{r4, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80105f6:	2300      	movs	r3, #0
 80105f8:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80105fc:	f10d 0107 	add.w	r1, sp, #7
 8010600:	6840      	ldr	r0, [r0, #4]
 8010602:	f7ff fb87 	bl	800fd14 <VerifyRfFreq>
 8010606:	b178      	cbz	r0, 8010628 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 8010608:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801060a:	4b0c      	ldr	r3, [pc, #48]	; (801063c <RegionEU868DlChannelReq+0x4c>)
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	7823      	ldrb	r3, [r4, #0]
 8010610:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8010614:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8010618:	b909      	cbnz	r1, 801061e <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 801061a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801061e:	2803      	cmp	r0, #3
 8010620:	d004      	beq.n	801062c <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 8010622:	b240      	sxtb	r0, r0
 8010624:	b002      	add	sp, #8
 8010626:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8010628:	2002      	movs	r0, #2
 801062a:	e7ee      	b.n	801060a <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801062c:	6861      	ldr	r1, [r4, #4]
 801062e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010632:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010636:	6059      	str	r1, [r3, #4]
 8010638:	e7f3      	b.n	8010622 <RegionEU868DlChannelReq+0x32>
 801063a:	bf00      	nop
 801063c:	20003c9c 	.word	0x20003c9c

08010640 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 8010640:	4770      	bx	lr
	...

08010644 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010646:	b097      	sub	sp, #92	; 0x5c
 8010648:	4604      	mov	r4, r0
 801064a:	460f      	mov	r7, r1
 801064c:	4616      	mov	r6, r2
 801064e:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8010650:	2100      	movs	r1, #0
 8010652:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8010656:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801065a:	9111      	str	r1, [sp, #68]	; 0x44
 801065c:	9112      	str	r1, [sp, #72]	; 0x48
 801065e:	9113      	str	r1, [sp, #76]	; 0x4c
 8010660:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8010662:	2307      	movs	r3, #7
 8010664:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8010668:	4b34      	ldr	r3, [pc, #208]	; (801073c <RegionEU868NextChannel+0xf8>)
 801066a:	6818      	ldr	r0, [r3, #0]
 801066c:	2201      	movs	r2, #1
 801066e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010672:	f7ff f89b 	bl	800f7ac <RegionCommonCountChannels>
 8010676:	b938      	cbnz	r0, 8010688 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010678:	4b30      	ldr	r3, [pc, #192]	; (801073c <RegionEU868NextChannel+0xf8>)
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8010680:	f043 0307 	orr.w	r3, r3, #7
 8010684:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010688:	7a63      	ldrb	r3, [r4, #9]
 801068a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801068e:	7a23      	ldrb	r3, [r4, #8]
 8010690:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010694:	4b29      	ldr	r3, [pc, #164]	; (801073c <RegionEU868NextChannel+0xf8>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f503 7258 	add.w	r2, r3, #864	; 0x360
 801069c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801069e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80106a0:	4b27      	ldr	r3, [pc, #156]	; (8010740 <RegionEU868NextChannel+0xfc>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80106a6:	2310      	movs	r3, #16
 80106a8:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 80106ac:	f10d 030a 	add.w	r3, sp, #10
 80106b0:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80106b2:	6823      	ldr	r3, [r4, #0]
 80106b4:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80106b6:	6863      	ldr	r3, [r4, #4]
 80106b8:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80106ba:	7aa3      	ldrb	r3, [r4, #10]
 80106bc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80106c0:	2306      	movs	r3, #6
 80106c2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80106c6:	ab0c      	add	r3, sp, #48	; 0x30
 80106c8:	f104 020c 	add.w	r2, r4, #12
 80106cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106d0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80106d4:	7d23      	ldrb	r3, [r4, #20]
 80106d6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80106da:	8ae1      	ldrh	r1, [r4, #22]
 80106dc:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80106e0:	f7ff fb6c 	bl	800fdbc <GetTimeOnAir>
 80106e4:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80106e6:	ab03      	add	r3, sp, #12
 80106e8:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80106ea:	9601      	str	r6, [sp, #4]
 80106ec:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 80106f6:	aa11      	add	r2, sp, #68	; 0x44
 80106f8:	4629      	mov	r1, r5
 80106fa:	a809      	add	r0, sp, #36	; 0x24
 80106fc:	f7ff fa58 	bl	800fbb0 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8010700:	4604      	mov	r4, r0
 8010702:	b120      	cbz	r0, 801070e <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8010704:	280c      	cmp	r0, #12
 8010706:	d00f      	beq.n	8010728 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8010708:	4620      	mov	r0, r4
 801070a:	b017      	add	sp, #92	; 0x5c
 801070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801070e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8010712:	3901      	subs	r1, #1
 8010714:	f001 fe10 	bl	8012338 <randr>
 8010718:	f100 0358 	add.w	r3, r0, #88	; 0x58
 801071c:	eb0d 0003 	add.w	r0, sp, r3
 8010720:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8010724:	703b      	strb	r3, [r7, #0]
 8010726:	e7ef      	b.n	8010708 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8010728:	4b04      	ldr	r3, [pc, #16]	; (801073c <RegionEU868NextChannel+0xf8>)
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8010730:	f043 0307 	orr.w	r3, r3, #7
 8010734:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 8010738:	e7e6      	b.n	8010708 <RegionEU868NextChannel+0xc4>
 801073a:	bf00      	nop
 801073c:	20003c9c 	.word	0x20003c9c
 8010740:	20003c98 	.word	0x20003c98

08010744 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8010744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010746:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8010748:	2300      	movs	r3, #0
 801074a:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 801074e:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8010750:	2d02      	cmp	r5, #2
 8010752:	d94f      	bls.n	80107f4 <RegionEU868ChannelAdd+0xb0>
 8010754:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8010756:	2d0f      	cmp	r5, #15
 8010758:	d84e      	bhi.n	80107f8 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801075a:	6803      	ldr	r3, [r0, #0]
 801075c:	7a18      	ldrb	r0, [r3, #8]
 801075e:	f340 0003 	sbfx	r0, r0, #0, #4
 8010762:	2207      	movs	r2, #7
 8010764:	2100      	movs	r1, #0
 8010766:	b240      	sxtb	r0, r0
 8010768:	f7fe ffc5 	bl	800f6f6 <RegionCommonValueInRange>
 801076c:	2800      	cmp	r0, #0
 801076e:	d03d      	beq.n	80107ec <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 8010770:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8010772:	6823      	ldr	r3, [r4, #0]
 8010774:	7a18      	ldrb	r0, [r3, #8]
 8010776:	f340 1003 	sbfx	r0, r0, #4, #4
 801077a:	2207      	movs	r2, #7
 801077c:	2100      	movs	r1, #0
 801077e:	b240      	sxtb	r0, r0
 8010780:	f7fe ffb9 	bl	800f6f6 <RegionCommonValueInRange>
 8010784:	b900      	cbnz	r0, 8010788 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8010786:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8010788:	6820      	ldr	r0, [r4, #0]
 801078a:	7a03      	ldrb	r3, [r0, #8]
 801078c:	f343 0203 	sbfx	r2, r3, #0, #4
 8010790:	b252      	sxtb	r2, r2
 8010792:	f343 1303 	sbfx	r3, r3, #4, #4
 8010796:	b25b      	sxtb	r3, r3
 8010798:	429a      	cmp	r2, r3
 801079a:	dd00      	ble.n	801079e <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 801079c:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801079e:	f10d 0107 	add.w	r1, sp, #7
 80107a2:	6800      	ldr	r0, [r0, #0]
 80107a4:	f7ff fab6 	bl	800fd14 <VerifyRfFreq>
 80107a8:	b310      	cbz	r0, 80107f0 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 80107aa:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80107ac:	b106      	cbz	r6, 80107b0 <RegionEU868ChannelAdd+0x6c>
 80107ae:	bb33      	cbnz	r3, 80107fe <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 80107b0:	bb3e      	cbnz	r6, 8010802 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 80107b2:	bb43      	cbnz	r3, 8010806 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80107b4:	4f15      	ldr	r7, [pc, #84]	; (801080c <RegionEU868ChannelAdd+0xc8>)
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	006e      	lsls	r6, r5, #1
 80107ba:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80107be:	220c      	movs	r2, #12
 80107c0:	6821      	ldr	r1, [r4, #0]
 80107c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80107c6:	f001 fdc4 	bl	8012352 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 80107ca:	683a      	ldr	r2, [r7, #0]
 80107cc:	442e      	add	r6, r5
 80107ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80107d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107d6:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80107d8:	2301      	movs	r3, #1
 80107da:	fa03 f505 	lsl.w	r5, r3, r5
 80107de:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 80107e2:	431d      	orrs	r5, r3
 80107e4:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 80107e8:	2000      	movs	r0, #0
 80107ea:	e006      	b.n	80107fa <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 80107ec:	2601      	movs	r6, #1
 80107ee:	e7c0      	b.n	8010772 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 80107f0:	2301      	movs	r3, #1
 80107f2:	e7db      	b.n	80107ac <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80107f4:	2006      	movs	r0, #6
 80107f6:	e000      	b.n	80107fa <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80107f8:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80107fa:	b003      	add	sp, #12
 80107fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80107fe:	2006      	movs	r0, #6
 8010800:	e7fb      	b.n	80107fa <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8010802:	2005      	movs	r0, #5
 8010804:	e7f9      	b.n	80107fa <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8010806:	2004      	movs	r0, #4
 8010808:	e7f7      	b.n	80107fa <RegionEU868ChannelAdd+0xb6>
 801080a:	bf00      	nop
 801080c:	20003c9c 	.word	0x20003c9c

08010810 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8010810:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8010812:	2902      	cmp	r1, #2
 8010814:	d801      	bhi.n	801081a <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 8010816:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 8010818:	4770      	bx	lr
{
 801081a:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801081c:	4b09      	ldr	r3, [pc, #36]	; (8010844 <RegionEU868ChannelsRemove+0x34>)
 801081e:	6818      	ldr	r0, [r3, #0]
 8010820:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8010824:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8010828:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801082c:	2200      	movs	r2, #0
 801082e:	f840 200c 	str.w	r2, [r0, ip]
 8010832:	605a      	str	r2, [r3, #4]
 8010834:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8010836:	2210      	movs	r2, #16
 8010838:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801083c:	f7fe ff9d 	bl	800f77a <RegionCommonChanDisable>
}
 8010840:	bd08      	pop	{r3, pc}
 8010842:	bf00      	nop
 8010844:	20003c9c 	.word	0x20003c9c

08010848 <RegionEU868ApplyCFList>:
{
 8010848:	b570      	push	{r4, r5, r6, lr}
 801084a:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801084c:	2350      	movs	r3, #80	; 0x50
 801084e:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8010852:	7a03      	ldrb	r3, [r0, #8]
 8010854:	2b10      	cmp	r3, #16
 8010856:	d136      	bne.n	80108c6 <RegionEU868ApplyCFList+0x7e>
 8010858:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 801085a:	6843      	ldr	r3, [r0, #4]
 801085c:	7bdd      	ldrb	r5, [r3, #15]
 801085e:	2d00      	cmp	r5, #0
 8010860:	d131      	bne.n	80108c6 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010862:	2403      	movs	r4, #3
 8010864:	e01b      	b.n	801089e <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8010866:	6872      	ldr	r2, [r6, #4]
 8010868:	5d53      	ldrb	r3, [r2, r5]
 801086a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801086c:	442a      	add	r2, r5
 801086e:	7851      	ldrb	r1, [r2, #1]
 8010870:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010874:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8010876:	7892      	ldrb	r2, [r2, #2]
 8010878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801087c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 801087e:	2264      	movs	r2, #100	; 0x64
 8010880:	fb02 f303 	mul.w	r3, r2, r3
 8010884:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8010886:	2300      	movs	r3, #0
 8010888:	9304      	str	r3, [sp, #16]
 801088a:	e011      	b.n	80108b0 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 801088c:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 8010890:	4668      	mov	r0, sp
 8010892:	f7ff ffbd 	bl	8010810 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8010896:	3503      	adds	r5, #3
 8010898:	b2ed      	uxtb	r5, r5
 801089a:	3401      	adds	r4, #1
 801089c:	b2e4      	uxtb	r4, r4
 801089e:	2c0f      	cmp	r4, #15
 80108a0:	d811      	bhi.n	80108c6 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80108a2:	2c07      	cmp	r4, #7
 80108a4:	d9df      	bls.n	8010866 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 80108a6:	2300      	movs	r3, #0
 80108a8:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 80108aa:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 80108ae:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 80108b0:	9b03      	ldr	r3, [sp, #12]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d0ea      	beq.n	801088c <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 80108b6:	ab03      	add	r3, sp, #12
 80108b8:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 80108ba:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 80108be:	a801      	add	r0, sp, #4
 80108c0:	f7ff ff40 	bl	8010744 <RegionEU868ChannelAdd>
 80108c4:	e7e7      	b.n	8010896 <RegionEU868ApplyCFList+0x4e>
}
 80108c6:	b006      	add	sp, #24
 80108c8:	bd70      	pop	{r4, r5, r6, pc}

080108ca <RegionEU868NewChannelReq>:
{
 80108ca:	b500      	push	{lr}
 80108cc:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 80108ce:	6803      	ldr	r3, [r0, #0]
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	b952      	cbnz	r2, 80108ea <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80108d4:	7903      	ldrb	r3, [r0, #4]
 80108d6:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80108da:	a801      	add	r0, sp, #4
 80108dc:	f7ff ff98 	bl	8010810 <RegionEU868ChannelsRemove>
 80108e0:	b1d0      	cbz	r0, 8010918 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 80108e2:	2003      	movs	r0, #3
}
 80108e4:	b005      	add	sp, #20
 80108e6:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80108ea:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80108ec:	7903      	ldrb	r3, [r0, #4]
 80108ee:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80108f2:	a802      	add	r0, sp, #8
 80108f4:	f7ff ff26 	bl	8010744 <RegionEU868ChannelAdd>
 80108f8:	2806      	cmp	r0, #6
 80108fa:	d80b      	bhi.n	8010914 <RegionEU868NewChannelReq+0x4a>
 80108fc:	e8df f000 	tbb	[pc, r0]
 8010900:	0a0a0a04 	.word	0x0a0a0a04
 8010904:	060e      	.short	0x060e
 8010906:	08          	.byte	0x08
 8010907:	00          	.byte	0x00
 8010908:	2003      	movs	r0, #3
 801090a:	e7eb      	b.n	80108e4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 801090c:	2001      	movs	r0, #1
                break;
 801090e:	e7e9      	b.n	80108e4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8010910:	2000      	movs	r0, #0
                break;
 8010912:	e7e7      	b.n	80108e4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8010914:	2000      	movs	r0, #0
                break;
 8010916:	e7e5      	b.n	80108e4 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 8010918:	2000      	movs	r0, #0
 801091a:	e7e3      	b.n	80108e4 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 801091c:	2002      	movs	r0, #2
 801091e:	e7e1      	b.n	80108e4 <RegionEU868NewChannelReq+0x1a>

08010920 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8010920:	1a88      	subs	r0, r1, r2
 8010922:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8010924:	2800      	cmp	r0, #0
 8010926:	db01      	blt.n	801092c <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 8010928:	b2c0      	uxtb	r0, r0
 801092a:	4770      	bx	lr
        datarate = DR_0;
 801092c:	2000      	movs	r0, #0
 801092e:	e7fb      	b.n	8010928 <RegionEU868ApplyDrOffset+0x8>

08010930 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 8010930:	b510      	push	{r4, lr}
 8010932:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8010934:	4b10      	ldr	r3, [pc, #64]	; (8010978 <VerifyRfFreq+0x48>)
 8010936:	6a1b      	ldr	r3, [r3, #32]
 8010938:	4798      	blx	r3
 801093a:	b1c8      	cbz	r0, 8010970 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801093c:	4b0f      	ldr	r3, [pc, #60]	; (801097c <VerifyRfFreq+0x4c>)
 801093e:	4423      	add	r3, r4
 8010940:	4a0f      	ldr	r2, [pc, #60]	; (8010980 <VerifyRfFreq+0x50>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d813      	bhi.n	801096e <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8010946:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 801094a:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 801094e:	f202 7245 	addw	r2, r2, #1861	; 0x745
 8010952:	fba2 1203 	umull	r1, r2, r2, r3
 8010956:	0c92      	lsrs	r2, r2, #18
 8010958:	490a      	ldr	r1, [pc, #40]	; (8010984 <VerifyRfFreq+0x54>)
 801095a:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801095e:	b942      	cbnz	r2, 8010972 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8010960:	4b09      	ldr	r3, [pc, #36]	; (8010988 <VerifyRfFreq+0x58>)
 8010962:	4423      	add	r3, r4
 8010964:	4a09      	ldr	r2, [pc, #36]	; (801098c <VerifyRfFreq+0x5c>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d902      	bls.n	8010970 <VerifyRfFreq+0x40>
    {
        return false;
 801096a:	2000      	movs	r0, #0
 801096c:	e000      	b.n	8010970 <VerifyRfFreq+0x40>
        return false;
 801096e:	2000      	movs	r0, #0
    }
    return true;
}
 8010970:	bd10      	pop	{r4, pc}
        return false;
 8010972:	2000      	movs	r0, #0
 8010974:	e7fc      	b.n	8010970 <VerifyRfFreq+0x40>
 8010976:	bf00      	nop
 8010978:	08015a90 	.word	0x08015a90
 801097c:	c8f78f60 	.word	0xc8f78f60
 8010980:	00401640 	.word	0x00401640
 8010984:	000927c0 	.word	0x000927c0
 8010988:	ca37fea0 	.word	0xca37fea0
 801098c:	01808580 	.word	0x01808580

08010990 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8010990:	b570      	push	{r4, r5, r6, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8010996:	4b0a      	ldr	r3, [pc, #40]	; (80109c0 <GetTimeOnAir+0x30>)
 8010998:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801099a:	490a      	ldr	r1, [pc, #40]	; (80109c4 <GetTimeOnAir+0x34>)
 801099c:	f7ff f976 	bl	800fc8c <RegionCommonGetBandwidth>
 80109a0:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80109a2:	4b09      	ldr	r3, [pc, #36]	; (80109c8 <GetTimeOnAir+0x38>)
 80109a4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80109a6:	2001      	movs	r0, #1
 80109a8:	9003      	str	r0, [sp, #12]
 80109aa:	b2e4      	uxtb	r4, r4
 80109ac:	9402      	str	r4, [sp, #8]
 80109ae:	2200      	movs	r2, #0
 80109b0:	9201      	str	r2, [sp, #4]
 80109b2:	2208      	movs	r2, #8
 80109b4:	9200      	str	r2, [sp, #0]
 80109b6:	4603      	mov	r3, r0
 80109b8:	4632      	mov	r2, r6
 80109ba:	47a8      	blx	r5
}
 80109bc:	b004      	add	sp, #16
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	080154fc 	.word	0x080154fc
 80109c4:	080154a8 	.word	0x080154a8
 80109c8:	08015a90 	.word	0x08015a90

080109cc <LimitTxPower>:
{
 80109cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ce:	4606      	mov	r6, r0
 80109d0:	4615      	mov	r5, r2
 80109d2:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80109d4:	f7ff f955 	bl	800fc82 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 80109d8:	2d04      	cmp	r5, #4
 80109da:	d105      	bne.n	80109e8 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 80109dc:	4634      	mov	r4, r6
 80109de:	2e02      	cmp	r6, #2
 80109e0:	bfb8      	it	lt
 80109e2:	2402      	movlt	r4, #2
}
 80109e4:	4620      	mov	r0, r4
 80109e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80109e8:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80109ea:	2204      	movs	r2, #4
 80109ec:	2100      	movs	r1, #0
 80109ee:	4638      	mov	r0, r7
 80109f0:	f7fe fedc 	bl	800f7ac <RegionCommonCountChannels>
 80109f4:	2831      	cmp	r0, #49	; 0x31
 80109f6:	d8f5      	bhi.n	80109e4 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 80109f8:	4634      	mov	r4, r6
 80109fa:	2e05      	cmp	r6, #5
 80109fc:	bfb8      	it	lt
 80109fe:	2405      	movlt	r4, #5
 8010a00:	e7f0      	b.n	80109e4 <LimitTxPower+0x18>
	...

08010a04 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8010a04:	b500      	push	{lr}
 8010a06:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8010a08:	2300      	movs	r3, #0
 8010a0a:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8010a0c:	7803      	ldrb	r3, [r0, #0]
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	2b37      	cmp	r3, #55	; 0x37
 8010a12:	d81f      	bhi.n	8010a54 <RegionUS915GetPhyParam+0x50>
 8010a14:	e8df f003 	tbb	[pc, r3]
 8010a18:	1e1e1e1c 	.word	0x1e1e1e1c
 8010a1c:	1e1e1e1e 	.word	0x1e1e1e1e
 8010a20:	3e3b1e1e 	.word	0x3e3b1e1e
 8010a24:	4d1e4741 	.word	0x4d1e4741
 8010a28:	5d595551 	.word	0x5d595551
 8010a2c:	6d6a1e61 	.word	0x6d6a1e61
 8010a30:	7f7c7670 	.word	0x7f7c7670
 8010a34:	86831e1e 	.word	0x86831e1e
 8010a38:	1e1e1e23 	.word	0x1e1e1e23
 8010a3c:	1e1e1e1e 	.word	0x1e1e1e1e
 8010a40:	1e1e1e1e 	.word	0x1e1e1e1e
 8010a44:	90891e1e 	.word	0x90891e1e
 8010a48:	a01e9d9a 	.word	0xa01e9d9a
 8010a4c:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8010a50:	2308      	movs	r3, #8
 8010a52:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8010a54:	9804      	ldr	r0, [sp, #16]
 8010a56:	9005      	str	r0, [sp, #20]
}
 8010a58:	b007      	add	sp, #28
 8010a5a:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8010a5e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010a62:	f88d 3004 	strb.w	r3, [sp, #4]
 8010a66:	2304      	movs	r3, #4
 8010a68:	f88d 3005 	strb.w	r3, [sp, #5]
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	f88d 3006 	strb.w	r3, [sp, #6]
 8010a72:	2348      	movs	r3, #72	; 0x48
 8010a74:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8010a78:	4b44      	ldr	r3, [pc, #272]	; (8010b8c <RegionUS915GetPhyParam+0x188>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8010a80:	9202      	str	r2, [sp, #8]
 8010a82:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8010a84:	a801      	add	r0, sp, #4
 8010a86:	f7ff f8dd 	bl	800fc44 <RegionCommonGetNextLowerTxDr>
 8010a8a:	9004      	str	r0, [sp, #16]
            break;
 8010a8c:	e7e2      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8010a8e:	2340      	movs	r3, #64	; 0x40
 8010a90:	9304      	str	r3, [sp, #16]
            break;
 8010a92:	e7df      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8010a94:	2320      	movs	r3, #32
 8010a96:	9304      	str	r3, [sp, #16]
            break;
 8010a98:	e7dc      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8010a9a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010a9e:	4a3c      	ldr	r2, [pc, #240]	; (8010b90 <RegionUS915GetPhyParam+0x18c>)
 8010aa0:	5cd3      	ldrb	r3, [r2, r3]
 8010aa2:	9304      	str	r3, [sp, #16]
            break;
 8010aa4:	e7d6      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8010aa6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010aaa:	4a3a      	ldr	r2, [pc, #232]	; (8010b94 <RegionUS915GetPhyParam+0x190>)
 8010aac:	5cd3      	ldrb	r3, [r2, r3]
 8010aae:	9304      	str	r3, [sp, #16]
            break;
 8010ab0:	e7d0      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8010ab2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010ab6:	9304      	str	r3, [sp, #16]
            break;
 8010ab8:	e7cc      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8010aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010abe:	9304      	str	r3, [sp, #16]
            break;
 8010ac0:	e7c8      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8010ac2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010ac6:	9304      	str	r3, [sp, #16]
            break;
 8010ac8:	e7c4      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8010aca:	f241 3388 	movw	r3, #5000	; 0x1388
 8010ace:	9304      	str	r3, [sp, #16]
            break;
 8010ad0:	e7c0      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8010ad2:	f241 7370 	movw	r3, #6000	; 0x1770
 8010ad6:	9304      	str	r3, [sp, #16]
            break;
 8010ad8:	e7bc      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8010ada:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010ade:	482e      	ldr	r0, [pc, #184]	; (8010b98 <RegionUS915GetPhyParam+0x194>)
 8010ae0:	f001 fc2a 	bl	8012338 <randr>
 8010ae4:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8010ae8:	9004      	str	r0, [sp, #16]
            break;
 8010aea:	e7b3      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8010aec:	4b2b      	ldr	r3, [pc, #172]	; (8010b9c <RegionUS915GetPhyParam+0x198>)
 8010aee:	9304      	str	r3, [sp, #16]
            break;
 8010af0:	e7b0      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 8010af2:	2308      	movs	r3, #8
 8010af4:	9304      	str	r3, [sp, #16]
            break;
 8010af6:	e7ad      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8010af8:	4b24      	ldr	r3, [pc, #144]	; (8010b8c <RegionUS915GetPhyParam+0x188>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010b00:	9304      	str	r3, [sp, #16]
            break;
 8010b02:	e7a7      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8010b04:	4b21      	ldr	r3, [pc, #132]	; (8010b8c <RegionUS915GetPhyParam+0x188>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8010b0c:	9304      	str	r3, [sp, #16]
            break;
 8010b0e:	e7a1      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8010b10:	2348      	movs	r3, #72	; 0x48
 8010b12:	9304      	str	r3, [sp, #16]
            break;
 8010b14:	e79e      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8010b16:	4b1d      	ldr	r3, [pc, #116]	; (8010b8c <RegionUS915GetPhyParam+0x188>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	9304      	str	r3, [sp, #16]
            break;
 8010b1c:	e79a      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8010b1e:	4b20      	ldr	r3, [pc, #128]	; (8010ba0 <RegionUS915GetPhyParam+0x19c>)
 8010b20:	9304      	str	r3, [sp, #16]
            break;
 8010b22:	e797      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 8010b24:	2300      	movs	r3, #0
 8010b26:	9304      	str	r3, [sp, #16]
            break;
 8010b28:	e794      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8010b2a:	4a1e      	ldr	r2, [pc, #120]	; (8010ba4 <RegionUS915GetPhyParam+0x1a0>)
 8010b2c:	491b      	ldr	r1, [pc, #108]	; (8010b9c <RegionUS915GetPhyParam+0x198>)
 8010b2e:	7900      	ldrb	r0, [r0, #4]
 8010b30:	f7fe fd12 	bl	800f558 <RegionBaseUSCalcDownlinkFrequency>
 8010b34:	9004      	str	r0, [sp, #16]
            break;
 8010b36:	e78d      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8010b38:	2317      	movs	r3, #23
 8010b3a:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8010b3e:	2304      	movs	r3, #4
 8010b40:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8010b44:	2303      	movs	r3, #3
 8010b46:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8010b4a:	e783      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8010b4c:	2308      	movs	r3, #8
 8010b4e:	9304      	str	r3, [sp, #16]
            break;
 8010b50:	e780      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8010b52:	2308      	movs	r3, #8
 8010b54:	9304      	str	r3, [sp, #16]
            break;
 8010b56:	e77d      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8010b58:	4a12      	ldr	r2, [pc, #72]	; (8010ba4 <RegionUS915GetPhyParam+0x1a0>)
 8010b5a:	4910      	ldr	r1, [pc, #64]	; (8010b9c <RegionUS915GetPhyParam+0x198>)
 8010b5c:	7900      	ldrb	r0, [r0, #4]
 8010b5e:	f7fe fcfb 	bl	800f558 <RegionBaseUSCalcDownlinkFrequency>
 8010b62:	9004      	str	r0, [sp, #16]
            break;
 8010b64:	e776      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8010b66:	2308      	movs	r3, #8
 8010b68:	9304      	str	r3, [sp, #16]
            break;
 8010b6a:	e773      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8010b6c:	2308      	movs	r3, #8
 8010b6e:	9304      	str	r3, [sp, #16]
            break;
 8010b70:	e770      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8010b72:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010b76:	4a0c      	ldr	r2, [pc, #48]	; (8010ba8 <RegionUS915GetPhyParam+0x1a4>)
 8010b78:	5cd3      	ldrb	r3, [r2, r3]
 8010b7a:	9304      	str	r3, [sp, #16]
            break;
 8010b7c:	e76a      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8010b7e:	490b      	ldr	r1, [pc, #44]	; (8010bac <RegionUS915GetPhyParam+0x1a8>)
 8010b80:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8010b84:	f7ff f882 	bl	800fc8c <RegionCommonGetBandwidth>
 8010b88:	9004      	str	r0, [sp, #16]
            break;
 8010b8a:	e763      	b.n	8010a54 <RegionUS915GetPhyParam+0x50>
 8010b8c:	20003ca8 	.word	0x20003ca8
 8010b90:	0801551c 	.word	0x0801551c
 8010b94:	0801550c 	.word	0x0801550c
 8010b98:	fffffc18 	.word	0xfffffc18
 8010b9c:	370870a0 	.word	0x370870a0
 8010ba0:	4200999a 	.word	0x4200999a
 8010ba4:	000927c0 	.word	0x000927c0
 8010ba8:	080154fc 	.word	0x080154fc
 8010bac:	080154a8 	.word	0x080154a8

08010bb0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8010bb0:	b510      	push	{r4, lr}
 8010bb2:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8010bb4:	4b0b      	ldr	r3, [pc, #44]	; (8010be4 <RegionUS915SetBandTxDone+0x34>)
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	7803      	ldrb	r3, [r0, #0]
 8010bba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010bbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010bc2:	7a5b      	ldrb	r3, [r3, #9]
 8010bc4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8010bc8:	4b07      	ldr	r3, [pc, #28]	; (8010be8 <RegionUS915SetBandTxDone+0x38>)
 8010bca:	681c      	ldr	r4, [r3, #0]
 8010bcc:	6903      	ldr	r3, [r0, #16]
 8010bce:	9300      	str	r3, [sp, #0]
 8010bd0:	68c3      	ldr	r3, [r0, #12]
 8010bd2:	7842      	ldrb	r2, [r0, #1]
 8010bd4:	6881      	ldr	r1, [r0, #8]
 8010bd6:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8010bda:	f7fe fe0c 	bl	800f7f6 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8010bde:	b002      	add	sp, #8
 8010be0:	bd10      	pop	{r4, pc}
 8010be2:	bf00      	nop
 8010be4:	20003ca8 	.word	0x20003ca8
 8010be8:	20003ca0 	.word	0x20003ca0

08010bec <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8010bec:	b510      	push	{r4, lr}
 8010bee:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8010bf0:	2301      	movs	r3, #1
 8010bf2:	f8ad 3000 	strh.w	r3, [sp]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	f88d 3002 	strb.w	r3, [sp, #2]
 8010bfc:	9301      	str	r3, [sp, #4]
 8010bfe:	9302      	str	r3, [sp, #8]
 8010c00:	9303      	str	r3, [sp, #12]
 8010c02:	9304      	str	r3, [sp, #16]
 8010c04:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8010c08:	7b04      	ldrb	r4, [r0, #12]
 8010c0a:	b174      	cbz	r4, 8010c2a <RegionUS915InitDefaults+0x3e>
 8010c0c:	3c01      	subs	r4, #1
 8010c0e:	b2e4      	uxtb	r4, r4
 8010c10:	2c01      	cmp	r4, #1
 8010c12:	d87e      	bhi.n	8010d12 <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010c14:	4b40      	ldr	r3, [pc, #256]	; (8010d18 <RegionUS915InitDefaults+0x12c>)
 8010c16:	6818      	ldr	r0, [r3, #0]
 8010c18:	2206      	movs	r2, #6
 8010c1a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010c1e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010c22:	f7fe fdd9 	bl	800f7d8 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8010c26:	2300      	movs	r3, #0
 8010c28:	e071      	b.n	8010d0e <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8010c2a:	6803      	ldr	r3, [r0, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d070      	beq.n	8010d12 <RegionUS915InitDefaults+0x126>
 8010c30:	6842      	ldr	r2, [r0, #4]
 8010c32:	2a00      	cmp	r2, #0
 8010c34:	d06d      	beq.n	8010d12 <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8010c36:	4939      	ldr	r1, [pc, #228]	; (8010d1c <RegionUS915InitDefaults+0x130>)
 8010c38:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8010c3a:	4937      	ldr	r1, [pc, #220]	; (8010d18 <RegionUS915InitDefaults+0x12c>)
 8010c3c:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 8010c3e:	6880      	ldr	r0, [r0, #8]
 8010c40:	4a37      	ldr	r2, [pc, #220]	; (8010d20 <RegionUS915InitDefaults+0x134>)
 8010c42:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8010c44:	2200      	movs	r2, #0
 8010c46:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8010c48:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8010c4a:	2218      	movs	r2, #24
 8010c4c:	4669      	mov	r1, sp
 8010c4e:	f001 fb80 	bl	8012352 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8010c52:	e011      	b.n	8010c78 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8010c54:	4b30      	ldr	r3, [pc, #192]	; (8010d18 <RegionUS915InitDefaults+0x12c>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4932      	ldr	r1, [pc, #200]	; (8010d24 <RegionUS915InitDefaults+0x138>)
 8010c5a:	4a33      	ldr	r2, [pc, #204]	; (8010d28 <RegionUS915InitDefaults+0x13c>)
 8010c5c:	fb01 2204 	mla	r2, r1, r4, r2
 8010c60:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8010c64:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8010c68:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8010c6c:	2230      	movs	r2, #48	; 0x30
 8010c6e:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8010c70:	2200      	movs	r2, #0
 8010c72:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8010c74:	3401      	adds	r4, #1
 8010c76:	b2e4      	uxtb	r4, r4
 8010c78:	2c3f      	cmp	r4, #63	; 0x3f
 8010c7a:	d9eb      	bls.n	8010c54 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8010c7c:	2340      	movs	r3, #64	; 0x40
 8010c7e:	2b47      	cmp	r3, #71	; 0x47
 8010c80:	d814      	bhi.n	8010cac <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8010c82:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 8010c86:	4a24      	ldr	r2, [pc, #144]	; (8010d18 <RegionUS915InitDefaults+0x12c>)
 8010c88:	6812      	ldr	r2, [r2, #0]
 8010c8a:	4c28      	ldr	r4, [pc, #160]	; (8010d2c <RegionUS915InitDefaults+0x140>)
 8010c8c:	4928      	ldr	r1, [pc, #160]	; (8010d30 <RegionUS915InitDefaults+0x144>)
 8010c8e:	fb04 1100 	mla	r1, r4, r0, r1
 8010c92:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8010c96:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8010c9a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8010c9e:	2144      	movs	r1, #68	; 0x44
 8010ca0:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8010ca2:	2100      	movs	r1, #0
 8010ca4:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	e7e8      	b.n	8010c7e <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8010cac:	4c1a      	ldr	r4, [pc, #104]	; (8010d18 <RegionUS915InitDefaults+0x12c>)
 8010cae:	6820      	ldr	r0, [r4, #0]
 8010cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010cb4:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8010cb8:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8010cbc:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8010cc0:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8010cc4:	23ff      	movs	r3, #255	; 0xff
 8010cc6:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8010cd0:	2206      	movs	r2, #6
 8010cd2:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8010cd6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010cda:	f7fe fd7d 	bl	800f7d8 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8010cde:	6821      	ldr	r1, [r4, #0]
 8010ce0:	2206      	movs	r2, #6
 8010ce2:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8010ce6:	4b0d      	ldr	r3, [pc, #52]	; (8010d1c <RegionUS915InitDefaults+0x130>)
 8010ce8:	6818      	ldr	r0, [r3, #0]
 8010cea:	f7fe fd75 	bl	800f7d8 <RegionCommonChanMaskCopy>
            break;
 8010cee:	e010      	b.n	8010d12 <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8010cf0:	4a0a      	ldr	r2, [pc, #40]	; (8010d1c <RegionUS915InitDefaults+0x130>)
 8010cf2:	6811      	ldr	r1, [r2, #0]
 8010cf4:	4a08      	ldr	r2, [pc, #32]	; (8010d18 <RegionUS915InitDefaults+0x12c>)
 8010cf6:	6812      	ldr	r2, [r2, #0]
 8010cf8:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 8010cfc:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8010d00:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010d04:	4002      	ands	r2, r0
 8010d06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	2b05      	cmp	r3, #5
 8010d10:	d9ee      	bls.n	8010cf0 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 8010d12:	b006      	add	sp, #24
 8010d14:	bd10      	pop	{r4, pc}
 8010d16:	bf00      	nop
 8010d18:	20003ca8 	.word	0x20003ca8
 8010d1c:	20003ca4 	.word	0x20003ca4
 8010d20:	20003ca0 	.word	0x20003ca0
 8010d24:	00030d40 	.word	0x00030d40
 8010d28:	35c80160 	.word	0x35c80160
 8010d2c:	00186a00 	.word	0x00186a00
 8010d30:	35d2afc0 	.word	0x35d2afc0

08010d34 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8010d34:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 8010d36:	290a      	cmp	r1, #10
 8010d38:	d833      	bhi.n	8010da2 <RegionUS915Verify+0x6e>
 8010d3a:	e8df f001 	tbb	[pc, r1]
 8010d3e:	3206      	.short	0x3206
 8010d40:	0a323232 	.word	0x0a323232
 8010d44:	28321e14 	.word	0x28321e14
 8010d48:	28          	.byte	0x28
 8010d49:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8010d4a:	6800      	ldr	r0, [r0, #0]
 8010d4c:	f7ff fdf0 	bl	8010930 <VerifyRfFreq>
 8010d50:	e028      	b.n	8010da4 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8010d52:	2204      	movs	r2, #4
 8010d54:	2100      	movs	r1, #0
 8010d56:	f990 0000 	ldrsb.w	r0, [r0]
 8010d5a:	f7fe fccc 	bl	800f6f6 <RegionCommonValueInRange>
 8010d5e:	3800      	subs	r0, #0
 8010d60:	bf18      	it	ne
 8010d62:	2001      	movne	r0, #1
 8010d64:	e01e      	b.n	8010da4 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8010d66:	2205      	movs	r2, #5
 8010d68:	2100      	movs	r1, #0
 8010d6a:	f990 0000 	ldrsb.w	r0, [r0]
 8010d6e:	f7fe fcc2 	bl	800f6f6 <RegionCommonValueInRange>
 8010d72:	3800      	subs	r0, #0
 8010d74:	bf18      	it	ne
 8010d76:	2001      	movne	r0, #1
 8010d78:	e014      	b.n	8010da4 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8010d7a:	220d      	movs	r2, #13
 8010d7c:	2108      	movs	r1, #8
 8010d7e:	f990 0000 	ldrsb.w	r0, [r0]
 8010d82:	f7fe fcb8 	bl	800f6f6 <RegionCommonValueInRange>
 8010d86:	3800      	subs	r0, #0
 8010d88:	bf18      	it	ne
 8010d8a:	2001      	movne	r0, #1
 8010d8c:	e00a      	b.n	8010da4 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8010d8e:	220e      	movs	r2, #14
 8010d90:	2100      	movs	r1, #0
 8010d92:	f990 0000 	ldrsb.w	r0, [r0]
 8010d96:	f7fe fcae 	bl	800f6f6 <RegionCommonValueInRange>
 8010d9a:	3800      	subs	r0, #0
 8010d9c:	bf18      	it	ne
 8010d9e:	2001      	movne	r0, #1
 8010da0:	e000      	b.n	8010da4 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 8010da2:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8010da4:	bd08      	pop	{r3, pc}
	...

08010da8 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8010da8:	7a03      	ldrb	r3, [r0, #8]
 8010daa:	2b10      	cmp	r3, #16
 8010dac:	d134      	bne.n	8010e18 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8010dae:	6843      	ldr	r3, [r0, #4]
 8010db0:	7bdb      	ldrb	r3, [r3, #15]
 8010db2:	2b01      	cmp	r3, #1
 8010db4:	d130      	bne.n	8010e18 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8010db6:	2200      	movs	r2, #0
 8010db8:	4613      	mov	r3, r2
 8010dba:	2a04      	cmp	r2, #4
 8010dbc:	d82b      	bhi.n	8010e16 <RegionUS915ApplyCFList+0x6e>
{
 8010dbe:	b530      	push	{r4, r5, lr}
 8010dc0:	e010      	b.n	8010de4 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8010dc2:	4916      	ldr	r1, [pc, #88]	; (8010e1c <RegionUS915ApplyCFList+0x74>)
 8010dc4:	680d      	ldr	r5, [r1, #0]
 8010dc6:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 8010dca:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8010dce:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 8010dd2:	4021      	ands	r1, r4
 8010dd4:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8010dd8:	3301      	adds	r3, #1
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	3202      	adds	r2, #2
 8010dde:	b2d2      	uxtb	r2, r2
 8010de0:	2b04      	cmp	r3, #4
 8010de2:	d817      	bhi.n	8010e14 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8010de4:	6841      	ldr	r1, [r0, #4]
 8010de6:	4c0e      	ldr	r4, [pc, #56]	; (8010e20 <RegionUS915ApplyCFList+0x78>)
 8010de8:	6824      	ldr	r4, [r4, #0]
 8010dea:	469c      	mov	ip, r3
 8010dec:	5c89      	ldrb	r1, [r1, r2]
 8010dee:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 8010df2:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8010df6:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8010dfa:	4496      	add	lr, r2
 8010dfc:	f89e e001 	ldrb.w	lr, [lr, #1]
 8010e00:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8010e04:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8010e08:	2b04      	cmp	r3, #4
 8010e0a:	d1da      	bne.n	8010dc2 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8010e0c:	b2c9      	uxtb	r1, r1
 8010e0e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 8010e12:	e7d6      	b.n	8010dc2 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 8010e14:	bd30      	pop	{r4, r5, pc}
 8010e16:	4770      	bx	lr
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	20003ca4 	.word	0x20003ca4
 8010e20:	20003ca8 	.word	0x20003ca8

08010e24 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8010e24:	b570      	push	{r4, r5, r6, lr}
 8010e26:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8010e28:	2204      	movs	r2, #4
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	6800      	ldr	r0, [r0, #0]
 8010e2e:	f7fe fcbd 	bl	800f7ac <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8010e32:	2801      	cmp	r0, #1
 8010e34:	d031      	beq.n	8010e9a <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 8010e36:	792c      	ldrb	r4, [r5, #4]
 8010e38:	b11c      	cbz	r4, 8010e42 <RegionUS915ChanMaskSet+0x1e>
 8010e3a:	2c01      	cmp	r4, #1
 8010e3c:	d023      	beq.n	8010e86 <RegionUS915ChanMaskSet+0x62>
 8010e3e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8010e40:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010e42:	4e17      	ldr	r6, [pc, #92]	; (8010ea0 <RegionUS915ChanMaskSet+0x7c>)
 8010e44:	6830      	ldr	r0, [r6, #0]
 8010e46:	2206      	movs	r2, #6
 8010e48:	6829      	ldr	r1, [r5, #0]
 8010e4a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8010e4e:	f7fe fcc3 	bl	800f7d8 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8010e52:	6830      	ldr	r0, [r6, #0]
 8010e54:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 8010e58:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8010e62:	e00c      	b.n	8010e7e <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8010e64:	4b0f      	ldr	r3, [pc, #60]	; (8010ea4 <RegionUS915ChanMaskSet+0x80>)
 8010e66:	681a      	ldr	r2, [r3, #0]
 8010e68:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 8010e6c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8010e70:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 8010e74:	400b      	ands	r3, r1
 8010e76:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8010e7a:	3401      	adds	r4, #1
 8010e7c:	b2e4      	uxtb	r4, r4
 8010e7e:	2c05      	cmp	r4, #5
 8010e80:	d9f0      	bls.n	8010e64 <RegionUS915ChanMaskSet+0x40>
    return true;
 8010e82:	2001      	movs	r0, #1
 8010e84:	e7dc      	b.n	8010e40 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8010e86:	4b06      	ldr	r3, [pc, #24]	; (8010ea0 <RegionUS915ChanMaskSet+0x7c>)
 8010e88:	6818      	ldr	r0, [r3, #0]
 8010e8a:	2206      	movs	r2, #6
 8010e8c:	6829      	ldr	r1, [r5, #0]
 8010e8e:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 8010e92:	f7fe fca1 	bl	800f7d8 <RegionCommonChanMaskCopy>
    return true;
 8010e96:	2001      	movs	r0, #1
            break;
 8010e98:	e7d2      	b.n	8010e40 <RegionUS915ChanMaskSet+0x1c>
        return false;
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	e7d0      	b.n	8010e40 <RegionUS915ChanMaskSet+0x1c>
 8010e9e:	bf00      	nop
 8010ea0:	20003ca8 	.word	0x20003ca8
 8010ea4:	20003ca4 	.word	0x20003ca4

08010ea8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8010ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	460e      	mov	r6, r1
 8010eae:	4617      	mov	r7, r2
 8010eb0:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8010eb2:	280d      	cmp	r0, #13
 8010eb4:	bfa8      	it	ge
 8010eb6:	200d      	movge	r0, #13
 8010eb8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8010eba:	4d0f      	ldr	r5, [pc, #60]	; (8010ef8 <RegionUS915ComputeRxWindowParameters+0x50>)
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	f7fe fee5 	bl	800fc8c <RegionCommonGetBandwidth>
 8010ec2:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8010ec4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010ec8:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8010ecc:	4a0b      	ldr	r2, [pc, #44]	; (8010efc <RegionUS915ComputeRxWindowParameters+0x54>)
 8010ece:	5cd0      	ldrb	r0, [r2, r3]
 8010ed0:	f7fe fda8 	bl	800fa24 <RegionCommonComputeSymbolTimeLoRa>
 8010ed4:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8010ed6:	4b0a      	ldr	r3, [pc, #40]	; (8010f00 <RegionUS915ComputeRxWindowParameters+0x58>)
 8010ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010eda:	4798      	blx	r3
 8010edc:	4603      	mov	r3, r0
 8010ede:	f104 020c 	add.w	r2, r4, #12
 8010ee2:	9201      	str	r2, [sp, #4]
 8010ee4:	3408      	adds	r4, #8
 8010ee6:	9400      	str	r4, [sp, #0]
 8010ee8:	463a      	mov	r2, r7
 8010eea:	4631      	mov	r1, r6
 8010eec:	4628      	mov	r0, r5
 8010eee:	f7fe fda7 	bl	800fa40 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8010ef2:	b003      	add	sp, #12
 8010ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	080154a8 	.word	0x080154a8
 8010efc:	080154fc 	.word	0x080154fc
 8010f00:	08015a90 	.word	0x08015a90

08010f04 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f08:	b08b      	sub	sp, #44	; 0x2c
 8010f0a:	4604      	mov	r4, r0
 8010f0c:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8010f0e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8010f12:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8010f14:	4b22      	ldr	r3, [pc, #136]	; (8010fa0 <RegionUS915RxConfig+0x9c>)
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	4798      	blx	r3
 8010f1a:	2800      	cmp	r0, #0
 8010f1c:	d13d      	bne.n	8010f9a <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8010f1e:	7ce3      	ldrb	r3, [r4, #19]
 8010f20:	b933      	cbnz	r3, 8010f30 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8010f22:	7827      	ldrb	r7, [r4, #0]
 8010f24:	f007 0307 	and.w	r3, r7, #7
 8010f28:	4a1e      	ldr	r2, [pc, #120]	; (8010fa4 <RegionUS915RxConfig+0xa0>)
 8010f2a:	4f1f      	ldr	r7, [pc, #124]	; (8010fa8 <RegionUS915RxConfig+0xa4>)
 8010f2c:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8010f30:	4b1e      	ldr	r3, [pc, #120]	; (8010fac <RegionUS915RxConfig+0xa8>)
 8010f32:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 8010f36:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8010fa0 <RegionUS915RxConfig+0x9c>
 8010f3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010f3e:	4638      	mov	r0, r7
 8010f40:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8010f42:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8010f46:	7ca3      	ldrb	r3, [r4, #18]
 8010f48:	9309      	str	r3, [sp, #36]	; 0x24
 8010f4a:	2001      	movs	r0, #1
 8010f4c:	9008      	str	r0, [sp, #32]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	9207      	str	r2, [sp, #28]
 8010f52:	9206      	str	r2, [sp, #24]
 8010f54:	9205      	str	r2, [sp, #20]
 8010f56:	9204      	str	r2, [sp, #16]
 8010f58:	9203      	str	r2, [sp, #12]
 8010f5a:	8923      	ldrh	r3, [r4, #8]
 8010f5c:	9302      	str	r3, [sp, #8]
 8010f5e:	2308      	movs	r3, #8
 8010f60:	9301      	str	r3, [sp, #4]
 8010f62:	9200      	str	r2, [sp, #0]
 8010f64:	4603      	mov	r3, r0
 8010f66:	464a      	mov	r2, r9
 8010f68:	78a1      	ldrb	r1, [r4, #2]
 8010f6a:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8010f6c:	7c63      	ldrb	r3, [r4, #17]
 8010f6e:	b18b      	cbz	r3, 8010f94 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8010f70:	4b0f      	ldr	r3, [pc, #60]	; (8010fb0 <RegionUS915RxConfig+0xac>)
 8010f72:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8010f74:	4b0a      	ldr	r3, [pc, #40]	; (8010fa0 <RegionUS915RxConfig+0x9c>)
 8010f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f78:	310d      	adds	r1, #13
 8010f7a:	b2c9      	uxtb	r1, r1
 8010f7c:	2001      	movs	r0, #1
 8010f7e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8010f80:	4632      	mov	r2, r6
 8010f82:	4639      	mov	r1, r7
 8010f84:	7ce0      	ldrb	r0, [r4, #19]
 8010f86:	f7fe fe93 	bl	800fcb0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8010f8a:	702e      	strb	r6, [r5, #0]
    return true;
 8010f8c:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8010f8e:	b00b      	add	sp, #44	; 0x2c
 8010f90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8010f94:	4b07      	ldr	r3, [pc, #28]	; (8010fb4 <RegionUS915RxConfig+0xb0>)
 8010f96:	5d99      	ldrb	r1, [r3, r6]
 8010f98:	e7ec      	b.n	8010f74 <RegionUS915RxConfig+0x70>
        return false;
 8010f9a:	2000      	movs	r0, #0
 8010f9c:	e7f7      	b.n	8010f8e <RegionUS915RxConfig+0x8a>
 8010f9e:	bf00      	nop
 8010fa0:	08015a90 	.word	0x08015a90
 8010fa4:	000927c0 	.word	0x000927c0
 8010fa8:	370870a0 	.word	0x370870a0
 8010fac:	080154fc 	.word	0x080154fc
 8010fb0:	0801550c 	.word	0x0801550c
 8010fb4:	0801551c 	.word	0x0801551c

08010fb8 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	b08d      	sub	sp, #52	; 0x34
 8010fbe:	4604      	mov	r4, r0
 8010fc0:	468b      	mov	fp, r1
 8010fc2:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8010fc4:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8010fc8:	4b32      	ldr	r3, [pc, #200]	; (8011094 <RegionUS915TxConfig+0xdc>)
 8010fca:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8010fce:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8011098 <RegionUS915TxConfig+0xe0>
 8010fd2:	f8d9 3000 	ldr.w	r3, [r9]
 8010fd6:	7801      	ldrb	r1, [r0, #0]
 8010fd8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010fdc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010fe0:	7a49      	ldrb	r1, [r1, #9]
 8010fe2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010fe6:	482d      	ldr	r0, [pc, #180]	; (801109c <RegionUS915TxConfig+0xe4>)
 8010fe8:	6800      	ldr	r0, [r0, #0]
 8010fea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010fee:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8010ff2:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8010ff6:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8010ffa:	f7ff fce7 	bl	80109cc <LimitTxPower>
 8010ffe:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8011000:	4927      	ldr	r1, [pc, #156]	; (80110a0 <RegionUS915TxConfig+0xe8>)
 8011002:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011006:	f7fe fe41 	bl	800fc8c <RegionCommonGetBandwidth>
 801100a:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801100c:	2200      	movs	r2, #0
 801100e:	4925      	ldr	r1, [pc, #148]	; (80110a4 <RegionUS915TxConfig+0xec>)
 8011010:	4630      	mov	r0, r6
 8011012:	f7fe fd51 	bl	800fab8 <RegionCommonComputeTxPower>
 8011016:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8011018:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80110a8 <RegionUS915TxConfig+0xf0>
 801101c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8011020:	f8d9 1000 	ldr.w	r1, [r9]
 8011024:	7823      	ldrb	r3, [r4, #0]
 8011026:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801102a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801102e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8011030:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8011034:	9308      	str	r3, [sp, #32]
 8011036:	2200      	movs	r2, #0
 8011038:	9207      	str	r2, [sp, #28]
 801103a:	9206      	str	r2, [sp, #24]
 801103c:	9205      	str	r2, [sp, #20]
 801103e:	2501      	movs	r5, #1
 8011040:	9504      	str	r5, [sp, #16]
 8011042:	9203      	str	r2, [sp, #12]
 8011044:	2308      	movs	r3, #8
 8011046:	9302      	str	r3, [sp, #8]
 8011048:	9501      	str	r5, [sp, #4]
 801104a:	f8cd a000 	str.w	sl, [sp]
 801104e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011052:	4628      	mov	r0, r5
 8011054:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8011058:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801105a:	f8d9 2000 	ldr.w	r2, [r9]
 801105e:	7823      	ldrb	r3, [r4, #0]
 8011060:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011064:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8011068:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801106c:	f7fe fe42 	bl	800fcf4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8011070:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8011074:	7b21      	ldrb	r1, [r4, #12]
 8011076:	4628      	mov	r0, r5
 8011078:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801107a:	89a1      	ldrh	r1, [r4, #12]
 801107c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011080:	f7ff fc86 	bl	8010990 <GetTimeOnAir>
 8011084:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 8011086:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 801108a:	4628      	mov	r0, r5
 801108c:	b00d      	add	sp, #52	; 0x34
 801108e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011092:	bf00      	nop
 8011094:	080154fc 	.word	0x080154fc
 8011098:	20003ca8 	.word	0x20003ca8
 801109c:	20003ca0 	.word	0x20003ca0
 80110a0:	080154a8 	.word	0x080154a8
 80110a4:	41f00000 	.word	0x41f00000
 80110a8:	08015a90 	.word	0x08015a90

080110ac <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80110ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110b0:	b091      	sub	sp, #68	; 0x44
 80110b2:	4605      	mov	r5, r0
 80110b4:	4688      	mov	r8, r1
 80110b6:	4617      	mov	r7, r2
 80110b8:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80110ba:	2400      	movs	r4, #0
 80110bc:	940e      	str	r4, [sp, #56]	; 0x38
 80110be:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80110c2:	940b      	str	r4, [sp, #44]	; 0x2c
 80110c4:	940c      	str	r4, [sp, #48]	; 0x30
 80110c6:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80110c8:	4b97      	ldr	r3, [pc, #604]	; (8011328 <RegionUS915LinkAdrReq+0x27c>)
 80110ca:	6819      	ldr	r1, [r3, #0]
 80110cc:	2206      	movs	r2, #6
 80110ce:	f501 7158 	add.w	r1, r1, #864	; 0x360
 80110d2:	a80b      	add	r0, sp, #44	; 0x2c
 80110d4:	f7fe fb80 	bl	800f7d8 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80110d8:	e00d      	b.n	80110f6 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80110da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110de:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 80110e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 80110e6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 80110ea:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80110ee:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80110f2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80110f6:	7a2b      	ldrb	r3, [r5, #8]
 80110f8:	42a3      	cmp	r3, r4
 80110fa:	f240 8081 	bls.w	8011200 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80110fe:	6868      	ldr	r0, [r5, #4]
 8011100:	a90e      	add	r1, sp, #56	; 0x38
 8011102:	4420      	add	r0, r4
 8011104:	f7fe fc18 	bl	800f938 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8011108:	2800      	cmp	r0, #0
 801110a:	d079      	beq.n	8011200 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 801110c:	4404      	add	r4, r0
 801110e:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 8011110:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 8011114:	f1bc 0f06 	cmp.w	ip, #6
 8011118:	d0df      	beq.n	80110da <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801111a:	f1bc 0f07 	cmp.w	ip, #7
 801111e:	d00a      	beq.n	8011136 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8011120:	f1bc 0f05 	cmp.w	ip, #5
 8011124:	d068      	beq.n	80111f8 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8011126:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801112a:	aa10      	add	r2, sp, #64	; 0x40
 801112c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8011130:	f82c 3c14 	strh.w	r3, [ip, #-20]
 8011134:	e7df      	b.n	80110f6 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8011136:	2300      	movs	r3, #0
 8011138:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 801113c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8011140:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8011144:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8011148:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 801114c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8011150:	e7d1      	b.n	80110f6 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8011152:	aa10      	add	r2, sp, #64	; 0x40
 8011154:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8011158:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801115c:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8011160:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8011164:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8011168:	4313      	orrs	r3, r2
 801116a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 801116e:	3101      	adds	r1, #1
 8011170:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8011172:	f10c 0c01 	add.w	ip, ip, #1
 8011176:	fa5f fc8c 	uxtb.w	ip, ip
 801117a:	f1bc 0f07 	cmp.w	ip, #7
 801117e:	d8ba      	bhi.n	80110f6 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8011180:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8011184:	2301      	movs	r3, #1
 8011186:	fa03 f30c 	lsl.w	r3, r3, ip
 801118a:	421a      	tst	r2, r3
 801118c:	d011      	beq.n	80111b2 <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 801118e:	f01c 0f01 	tst.w	ip, #1
 8011192:	d1de      	bne.n	8011152 <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 8011194:	aa10      	add	r2, sp, #64	; 0x40
 8011196:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 801119a:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801119e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80111a2:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80111a6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80111aa:	4313      	orrs	r3, r2
 80111ac:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80111b0:	e7df      	b.n	8011172 <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 80111b2:	f01c 0f01 	tst.w	ip, #1
 80111b6:	d10f      	bne.n	80111d8 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80111b8:	aa10      	add	r2, sp, #64	; 0x40
 80111ba:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80111be:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80111c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80111c6:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80111ca:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80111ce:	ea22 0303 	bic.w	r3, r2, r3
 80111d2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80111d6:	e7cc      	b.n	8011172 <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 80111d8:	aa10      	add	r2, sp, #64	; 0x40
 80111da:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80111de:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 80111e2:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80111e6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80111ea:	ea22 0303 	bic.w	r3, r2, r3
 80111ee:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 80111f2:	3101      	adds	r1, #1
 80111f4:	b2c9      	uxtb	r1, r1
 80111f6:	e7bc      	b.n	8011172 <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 80111f8:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 80111fc:	4661      	mov	r1, ip
 80111fe:	e7bc      	b.n	801117a <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8011200:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8011204:	2b03      	cmp	r3, #3
 8011206:	dd58      	ble.n	80112ba <RegionUS915LinkAdrReq+0x20e>
 8011208:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801120c:	2302      	movs	r3, #2
 801120e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8011212:	7a6b      	ldrb	r3, [r5, #9]
 8011214:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8011218:	a809      	add	r0, sp, #36	; 0x24
 801121a:	f7ff fbf3 	bl	8010a04 <RegionUS915GetPhyParam>
 801121e:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8011220:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011224:	7aab      	ldrb	r3, [r5, #10]
 8011226:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801122a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801122e:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011232:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8011236:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801123a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801123e:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011242:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8011246:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801124a:	f995 300c 	ldrsb.w	r3, [r5, #12]
 801124e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011252:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8011256:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801125a:	2348      	movs	r3, #72	; 0x48
 801125c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8011260:	ab0b      	add	r3, sp, #44	; 0x2c
 8011262:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8011264:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8011268:	2304      	movs	r3, #4
 801126a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801126e:	4b2e      	ldr	r3, [pc, #184]	; (8011328 <RegionUS915LinkAdrReq+0x27c>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8011274:	230e      	movs	r3, #14
 8011276:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801127a:	2300      	movs	r3, #0
 801127c:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011280:	682b      	ldr	r3, [r5, #0]
 8011282:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011284:	ab0e      	add	r3, sp, #56	; 0x38
 8011286:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 801128a:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 801128e:	4668      	mov	r0, sp
 8011290:	f7fe fb70 	bl	800f974 <RegionCommonLinkAdrReqVerifyParams>
 8011294:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8011296:	2807      	cmp	r0, #7
 8011298:	d01c      	beq.n	80112d4 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801129a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801129e:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 80112a2:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 80112a6:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80112a8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80112ac:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 80112ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80112b0:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 80112b2:	4628      	mov	r0, r5
 80112b4:	b011      	add	sp, #68	; 0x44
 80112b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80112ba:	2204      	movs	r2, #4
 80112bc:	2100      	movs	r1, #0
 80112be:	a80b      	add	r0, sp, #44	; 0x2c
 80112c0:	f7fe fa74 	bl	800f7ac <RegionCommonCountChannels>
 80112c4:	2801      	cmp	r0, #1
 80112c6:	d902      	bls.n	80112ce <RegionUS915LinkAdrReq+0x222>
 80112c8:	f04f 0907 	mov.w	r9, #7
 80112cc:	e79e      	b.n	801120c <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 80112ce:	f04f 0906 	mov.w	r9, #6
 80112d2:	e79b      	b.n	801120c <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80112d4:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8011328 <RegionUS915LinkAdrReq+0x27c>
 80112d8:	f8d9 0000 	ldr.w	r0, [r9]
 80112dc:	2206      	movs	r2, #6
 80112de:	a90b      	add	r1, sp, #44	; 0x2c
 80112e0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80112e4:	f7fe fa78 	bl	800f7d8 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80112e8:	4b10      	ldr	r3, [pc, #64]	; (801132c <RegionUS915LinkAdrReq+0x280>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	f8d9 2000 	ldr.w	r2, [r9]
 80112f0:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 80112f4:	8818      	ldrh	r0, [r3, #0]
 80112f6:	4001      	ands	r1, r0
 80112f8:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80112fa:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 80112fe:	8858      	ldrh	r0, [r3, #2]
 8011300:	4001      	ands	r1, r0
 8011302:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8011304:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8011308:	8898      	ldrh	r0, [r3, #4]
 801130a:	4001      	ands	r1, r0
 801130c:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801130e:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 8011312:	88d8      	ldrh	r0, [r3, #6]
 8011314:	4001      	ands	r1, r0
 8011316:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011318:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 801131c:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801131e:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8011322:	815a      	strh	r2, [r3, #10]
 8011324:	e7b9      	b.n	801129a <RegionUS915LinkAdrReq+0x1ee>
 8011326:	bf00      	nop
 8011328:	20003ca8 	.word	0x20003ca8
 801132c:	20003ca4 	.word	0x20003ca4

08011330 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011330:	b538      	push	{r3, r4, r5, lr}
 8011332:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8011334:	6840      	ldr	r0, [r0, #4]
 8011336:	f7ff fafb 	bl	8010930 <VerifyRfFreq>
 801133a:	b310      	cbz	r0, 8011382 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 801133c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801133e:	220d      	movs	r2, #13
 8011340:	2108      	movs	r1, #8
 8011342:	f994 0000 	ldrsb.w	r0, [r4]
 8011346:	f7fe f9d6 	bl	800f6f6 <RegionCommonValueInRange>
 801134a:	b908      	cbnz	r0, 8011350 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801134c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011350:	2207      	movs	r2, #7
 8011352:	2105      	movs	r1, #5
 8011354:	f994 0000 	ldrsb.w	r0, [r4]
 8011358:	f7fe f9cd 	bl	800f6f6 <RegionCommonValueInRange>
 801135c:	2801      	cmp	r0, #1
 801135e:	d003      	beq.n	8011368 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8011360:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8011364:	2b0d      	cmp	r3, #13
 8011366:	dd01      	ble.n	801136c <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8011368:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801136c:	2203      	movs	r2, #3
 801136e:	2100      	movs	r1, #0
 8011370:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8011374:	f7fe f9bf 	bl	800f6f6 <RegionCommonValueInRange>
 8011378:	b908      	cbnz	r0, 801137e <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801137a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 801137e:	4628      	mov	r0, r5
 8011380:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011382:	2506      	movs	r5, #6
 8011384:	e7db      	b.n	801133e <RegionUS915RxParamSetupReq+0xe>

08011386 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011386:	f04f 30ff 	mov.w	r0, #4294967295
 801138a:	4770      	bx	lr

0801138c <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 801138c:	f04f 30ff 	mov.w	r0, #4294967295
 8011390:	4770      	bx	lr

08011392 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 8011392:	f04f 30ff 	mov.w	r0, #4294967295
 8011396:	4770      	bx	lr

08011398 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8011398:	b999      	cbnz	r1, 80113c2 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801139a:	4b0e      	ldr	r3, [pc, #56]	; (80113d4 <RegionUS915AlternateDr+0x3c>)
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	7b53      	ldrb	r3, [r2, #13]
 80113a0:	3301      	adds	r3, #1
 80113a2:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80113a4:	4b0b      	ldr	r3, [pc, #44]	; (80113d4 <RegionUS915AlternateDr+0x3c>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	7b5a      	ldrb	r2, [r3, #13]
 80113aa:	4b0b      	ldr	r3, [pc, #44]	; (80113d8 <RegionUS915AlternateDr+0x40>)
 80113ac:	fba3 1302 	umull	r1, r3, r3, r2
 80113b0:	085b      	lsrs	r3, r3, #1
 80113b2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80113b6:	1ad3      	subs	r3, r2, r3
 80113b8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80113bc:	d007      	beq.n	80113ce <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 80113be:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 80113c0:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 80113c2:	4b04      	ldr	r3, [pc, #16]	; (80113d4 <RegionUS915AlternateDr+0x3c>)
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	7b53      	ldrb	r3, [r2, #13]
 80113c8:	3b01      	subs	r3, #1
 80113ca:	7353      	strb	r3, [r2, #13]
 80113cc:	e7ea      	b.n	80113a4 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 80113ce:	2004      	movs	r0, #4
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	20003ca4 	.word	0x20003ca4
 80113d8:	38e38e39 	.word	0x38e38e39

080113dc <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80113dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e0:	b0a4      	sub	sp, #144	; 0x90
 80113e2:	4604      	mov	r4, r0
 80113e4:	460e      	mov	r6, r1
 80113e6:	4690      	mov	r8, r2
 80113e8:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 80113ea:	2500      	movs	r5, #0
 80113ec:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 80113f0:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 80113f4:	9511      	str	r5, [sp, #68]	; 0x44
 80113f6:	2244      	movs	r2, #68	; 0x44
 80113f8:	4629      	mov	r1, r5
 80113fa:	a812      	add	r0, sp, #72	; 0x48
 80113fc:	f003 fb5c 	bl	8014ab8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8011400:	2204      	movs	r2, #4
 8011402:	4629      	mov	r1, r5
 8011404:	4b49      	ldr	r3, [pc, #292]	; (801152c <RegionUS915NextChannel+0x150>)
 8011406:	6818      	ldr	r0, [r3, #0]
 8011408:	f7fe f9d0 	bl	800f7ac <RegionCommonCountChannels>
 801140c:	2800      	cmp	r0, #0
 801140e:	d052      	beq.n	80114b6 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8011410:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8011414:	2b03      	cmp	r3, #3
 8011416:	dd08      	ble.n	801142a <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8011418:	4b44      	ldr	r3, [pc, #272]	; (801152c <RegionUS915NextChannel+0x150>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	7a1a      	ldrb	r2, [r3, #8]
 801141e:	b922      	cbnz	r2, 801142a <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8011420:	4a43      	ldr	r2, [pc, #268]	; (8011530 <RegionUS915NextChannel+0x154>)
 8011422:	6812      	ldr	r2, [r2, #0]
 8011424:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8011428:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801142a:	7a63      	ldrb	r3, [r4, #9]
 801142c:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8011430:	7a23      	ldrb	r3, [r4, #8]
 8011432:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8011436:	4b3d      	ldr	r3, [pc, #244]	; (801152c <RegionUS915NextChannel+0x150>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801143c:	4b3c      	ldr	r3, [pc, #240]	; (8011530 <RegionUS915NextChannel+0x154>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8011442:	4b3c      	ldr	r3, [pc, #240]	; (8011534 <RegionUS915NextChannel+0x158>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8011448:	2348      	movs	r3, #72	; 0x48
 801144a:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 801144e:	2300      	movs	r3, #0
 8011450:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8011452:	6823      	ldr	r3, [r4, #0]
 8011454:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8011456:	6863      	ldr	r3, [r4, #4]
 8011458:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801145a:	7aa3      	ldrb	r3, [r4, #10]
 801145c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8011460:	2301      	movs	r3, #1
 8011462:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011466:	ab03      	add	r3, sp, #12
 8011468:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801146a:	ab0c      	add	r3, sp, #48	; 0x30
 801146c:	f104 020c 	add.w	r2, r4, #12
 8011470:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011474:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8011478:	7d23      	ldrb	r3, [r4, #20]
 801147a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801147e:	8ae1      	ldrh	r1, [r4, #22]
 8011480:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011484:	f7ff fa84 	bl	8010990 <GetTimeOnAir>
 8011488:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801148a:	f8cd 8004 	str.w	r8, [sp, #4]
 801148e:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 8011492:	9300      	str	r3, [sp, #0]
 8011494:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 8011498:	aa11      	add	r2, sp, #68	; 0x44
 801149a:	4639      	mov	r1, r7
 801149c:	a809      	add	r0, sp, #36	; 0x24
 801149e:	f7fe fb87 	bl	800fbb0 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80114a2:	4605      	mov	r5, r0
 80114a4:	2800      	cmp	r0, #0
 80114a6:	d13c      	bne.n	8011522 <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 80114a8:	7a63      	ldrb	r3, [r4, #9]
 80114aa:	b98b      	cbnz	r3, 80114d0 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80114ac:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80114b0:	b1db      	cbz	r3, 80114ea <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80114b2:	4603      	mov	r3, r0
 80114b4:	e026      	b.n	8011504 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80114b6:	4d1d      	ldr	r5, [pc, #116]	; (801152c <RegionUS915NextChannel+0x150>)
 80114b8:	4b1d      	ldr	r3, [pc, #116]	; (8011530 <RegionUS915NextChannel+0x154>)
 80114ba:	6819      	ldr	r1, [r3, #0]
 80114bc:	2204      	movs	r2, #4
 80114be:	f501 7158 	add.w	r1, r1, #864	; 0x360
 80114c2:	6828      	ldr	r0, [r5, #0]
 80114c4:	f7fe f988 	bl	800f7d8 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80114c8:	682b      	ldr	r3, [r5, #0]
 80114ca:	2200      	movs	r2, #0
 80114cc:	731a      	strb	r2, [r3, #12]
 80114ce:	e79f      	b.n	8011410 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80114d0:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 80114d4:	3901      	subs	r1, #1
 80114d6:	f000 ff2f 	bl	8012338 <randr>
 80114da:	f100 0390 	add.w	r3, r0, #144	; 0x90
 80114de:	eb0d 0003 	add.w	r0, sp, r3
 80114e2:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 80114e6:	7033      	strb	r3, [r6, #0]
 80114e8:	e015      	b.n	8011516 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80114ea:	4b10      	ldr	r3, [pc, #64]	; (801152c <RegionUS915NextChannel+0x150>)
 80114ec:	6818      	ldr	r0, [r3, #0]
 80114ee:	4632      	mov	r2, r6
 80114f0:	f100 010c 	add.w	r1, r0, #12
 80114f4:	f7fd ffe2 	bl	800f4bc <RegionBaseUSComputeNext125kHzJoinChannel>
 80114f8:	2803      	cmp	r0, #3
 80114fa:	d10c      	bne.n	8011516 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 80114fc:	4605      	mov	r5, r0
 80114fe:	e010      	b.n	8011522 <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8011500:	3301      	adds	r3, #1
 8011502:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8011504:	4a09      	ldr	r2, [pc, #36]	; (801152c <RegionUS915NextChannel+0x150>)
 8011506:	6812      	ldr	r2, [r2, #0]
 8011508:	7a10      	ldrb	r0, [r2, #8]
 801150a:	4118      	asrs	r0, r3
 801150c:	f010 0f01 	tst.w	r0, #1
 8011510:	d0f6      	beq.n	8011500 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 8011512:	3340      	adds	r3, #64	; 0x40
 8011514:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8011516:	2248      	movs	r2, #72	; 0x48
 8011518:	7831      	ldrb	r1, [r6, #0]
 801151a:	4b04      	ldr	r3, [pc, #16]	; (801152c <RegionUS915NextChannel+0x150>)
 801151c:	6818      	ldr	r0, [r3, #0]
 801151e:	f7fe f92c 	bl	800f77a <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8011522:	4628      	mov	r0, r5
 8011524:	b024      	add	sp, #144	; 0x90
 8011526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152a:	bf00      	nop
 801152c:	20003ca4 	.word	0x20003ca4
 8011530:	20003ca8 	.word	0x20003ca8
 8011534:	20003ca0 	.word	0x20003ca0

08011538 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8011538:	4b04      	ldr	r3, [pc, #16]	; (801154c <RegionUS915ApplyDrOffset+0x14>)
 801153a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801153e:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 8011540:	2800      	cmp	r0, #0
 8011542:	db01      	blt.n	8011548 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8011544:	b2c0      	uxtb	r0, r0
 8011546:	4770      	bx	lr
        datarate = DR_0;
 8011548:	2000      	movs	r0, #0
 801154a:	e7fb      	b.n	8011544 <RegionUS915ApplyDrOffset+0xc>
 801154c:	080154e8 	.word	0x080154e8

08011550 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8011550:	b510      	push	{r4, lr}
 8011552:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8011554:	2210      	movs	r2, #16
 8011556:	2100      	movs	r1, #0
 8011558:	30f1      	adds	r0, #241	; 0xf1
 801155a:	f000 ff12 	bl	8012382 <memset1>
    ctx->M_n = 0;
 801155e:	2100      	movs	r1, #0
 8011560:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8011564:	22f0      	movs	r2, #240	; 0xf0
 8011566:	4620      	mov	r0, r4
 8011568:	f000 ff0b 	bl	8012382 <memset1>
}
 801156c:	bd10      	pop	{r4, pc}

0801156e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801156e:	b508      	push	{r3, lr}
 8011570:	4602      	mov	r2, r0
 8011572:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8011574:	2110      	movs	r1, #16
 8011576:	f000 fb3b 	bl	8011bf0 <lorawan_aes_set_key>
}
 801157a:	bd08      	pop	{r3, pc}

0801157c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 801157c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011580:	b084      	sub	sp, #16
 8011582:	4604      	mov	r4, r0
 8011584:	460d      	mov	r5, r1
 8011586:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8011588:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 801158c:	2b00      	cmp	r3, #0
 801158e:	d054      	beq.n	801163a <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8011590:	f1c3 0810 	rsb	r8, r3, #16
 8011594:	4647      	mov	r7, r8
 8011596:	4590      	cmp	r8, r2
 8011598:	bf28      	it	cs
 801159a:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 801159c:	f200 1001 	addw	r0, r0, #257	; 0x101
 80115a0:	b2ba      	uxth	r2, r7
 80115a2:	4418      	add	r0, r3
 80115a4:	f000 fed5 	bl	8012352 <memcpy1>
        ctx->M_n += mlen;
 80115a8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80115ac:	443b      	add	r3, r7
 80115ae:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 80115b2:	2b0f      	cmp	r3, #15
 80115b4:	d94d      	bls.n	8011652 <AES_CMAC_Update+0xd6>
 80115b6:	45b0      	cmp	r8, r6
 80115b8:	d24b      	bcs.n	8011652 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 80115ba:	2300      	movs	r3, #0
 80115bc:	e008      	b.n	80115d0 <AES_CMAC_Update+0x54>
 80115be:	18e2      	adds	r2, r4, r3
 80115c0:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 80115c4:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 80115c8:	4041      	eors	r1, r0
 80115ca:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 80115ce:	3301      	adds	r3, #1
 80115d0:	2b0f      	cmp	r3, #15
 80115d2:	ddf4      	ble.n	80115be <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80115d4:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 80115d8:	2210      	movs	r2, #16
 80115da:	4641      	mov	r1, r8
 80115dc:	4668      	mov	r0, sp
 80115de:	f000 feb8 	bl	8012352 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80115e2:	4622      	mov	r2, r4
 80115e4:	4669      	mov	r1, sp
 80115e6:	4668      	mov	r0, sp
 80115e8:	f000 fb84 	bl	8011cf4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80115ec:	2210      	movs	r2, #16
 80115ee:	4669      	mov	r1, sp
 80115f0:	4640      	mov	r0, r8
 80115f2:	f000 feae 	bl	8012352 <memcpy1>

        data += mlen;
 80115f6:	443d      	add	r5, r7
        len -= mlen;
 80115f8:	1bf6      	subs	r6, r6, r7
 80115fa:	e01e      	b.n	801163a <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 80115fc:	eb04 0e03 	add.w	lr, r4, r3
 8011600:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8011604:	5cea      	ldrb	r2, [r5, r3]
 8011606:	ea8c 0c02 	eor.w	ip, ip, r2
 801160a:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 801160e:	3301      	adds	r3, #1
 8011610:	2b0f      	cmp	r3, #15
 8011612:	ddf3      	ble.n	80115fc <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8011614:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8011618:	2210      	movs	r2, #16
 801161a:	4639      	mov	r1, r7
 801161c:	4668      	mov	r0, sp
 801161e:	f000 fe98 	bl	8012352 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8011622:	4622      	mov	r2, r4
 8011624:	4669      	mov	r1, sp
 8011626:	4668      	mov	r0, sp
 8011628:	f000 fb64 	bl	8011cf4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801162c:	2210      	movs	r2, #16
 801162e:	4669      	mov	r1, sp
 8011630:	4638      	mov	r0, r7
 8011632:	f000 fe8e 	bl	8012352 <memcpy1>

        data += 16;
 8011636:	3510      	adds	r5, #16
        len -= 16;
 8011638:	3e10      	subs	r6, #16
    while( len > 16 )
 801163a:	2e10      	cmp	r6, #16
 801163c:	d901      	bls.n	8011642 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 801163e:	2300      	movs	r3, #0
 8011640:	e7e6      	b.n	8011610 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8011642:	b2b2      	uxth	r2, r6
 8011644:	4629      	mov	r1, r5
 8011646:	f204 1001 	addw	r0, r4, #257	; 0x101
 801164a:	f000 fe82 	bl	8012352 <memcpy1>
    ctx->M_n = len;
 801164e:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 8011652:	b004      	add	sp, #16
 8011654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011658 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8011658:	b530      	push	{r4, r5, lr}
 801165a:	b089      	sub	sp, #36	; 0x24
 801165c:	4605      	mov	r5, r0
 801165e:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8011660:	2210      	movs	r2, #16
 8011662:	2100      	movs	r1, #0
 8011664:	eb0d 0002 	add.w	r0, sp, r2
 8011668:	f000 fe8b 	bl	8012382 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 801166c:	4622      	mov	r2, r4
 801166e:	a904      	add	r1, sp, #16
 8011670:	4608      	mov	r0, r1
 8011672:	f000 fb3f 	bl	8011cf4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8011676:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801167a:	2b00      	cmp	r3, #0
 801167c:	db01      	blt.n	8011682 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 801167e:	2300      	movs	r3, #0
 8011680:	e030      	b.n	80116e4 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 8011682:	2300      	movs	r3, #0
 8011684:	2b0e      	cmp	r3, #14
 8011686:	dc11      	bgt.n	80116ac <AES_CMAC_Final+0x54>
 8011688:	f103 0220 	add.w	r2, r3, #32
 801168c:	eb0d 0102 	add.w	r1, sp, r2
 8011690:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8011694:	3301      	adds	r3, #1
 8011696:	f103 0220 	add.w	r2, r3, #32
 801169a:	446a      	add	r2, sp
 801169c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80116a0:	09d2      	lsrs	r2, r2, #7
 80116a2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80116a6:	f801 2c10 	strb.w	r2, [r1, #-16]
 80116aa:	e7eb      	b.n	8011684 <AES_CMAC_Final+0x2c>
 80116ac:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80116b0:	005b      	lsls	r3, r3, #1
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 80116b8:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80116bc:	f88d 301f 	strb.w	r3, [sp, #31]
 80116c0:	e017      	b.n	80116f2 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 80116c2:	f103 0220 	add.w	r2, r3, #32
 80116c6:	eb0d 0102 	add.w	r1, sp, r2
 80116ca:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80116ce:	3301      	adds	r3, #1
 80116d0:	f103 0220 	add.w	r2, r3, #32
 80116d4:	446a      	add	r2, sp
 80116d6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80116da:	09d2      	lsrs	r2, r2, #7
 80116dc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80116e0:	f801 2c10 	strb.w	r2, [r1, #-16]
 80116e4:	2b0e      	cmp	r3, #14
 80116e6:	ddec      	ble.n	80116c2 <AES_CMAC_Final+0x6a>
 80116e8:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80116ec:	005b      	lsls	r3, r3, #1
 80116ee:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 80116f2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 80116f6:	2810      	cmp	r0, #16
 80116f8:	d014      	beq.n	8011724 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 80116fa:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	db30      	blt.n	8011764 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8011702:	2300      	movs	r3, #0
 8011704:	e041      	b.n	801178a <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8011706:	18e1      	adds	r1, r4, r3
 8011708:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801170c:	f103 0020 	add.w	r0, r3, #32
 8011710:	4468      	add	r0, sp
 8011712:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8011716:	4042      	eors	r2, r0
 8011718:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801171c:	3301      	adds	r3, #1
 801171e:	2b0f      	cmp	r3, #15
 8011720:	ddf1      	ble.n	8011706 <AES_CMAC_Final+0xae>
 8011722:	e059      	b.n	80117d8 <AES_CMAC_Final+0x180>
 8011724:	2300      	movs	r3, #0
 8011726:	e7fa      	b.n	801171e <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8011728:	f103 0220 	add.w	r2, r3, #32
 801172c:	eb0d 0102 	add.w	r1, sp, r2
 8011730:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8011734:	3301      	adds	r3, #1
 8011736:	f103 0220 	add.w	r2, r3, #32
 801173a:	446a      	add	r2, sp
 801173c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8011740:	09d2      	lsrs	r2, r2, #7
 8011742:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8011746:	f801 2c10 	strb.w	r2, [r1, #-16]
 801174a:	2b0e      	cmp	r3, #14
 801174c:	ddec      	ble.n	8011728 <AES_CMAC_Final+0xd0>
 801174e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011752:	005b      	lsls	r3, r3, #1
 8011754:	b2db      	uxtb	r3, r3
 8011756:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 801175a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 801175e:	f88d 301f 	strb.w	r3, [sp, #31]
 8011762:	e019      	b.n	8011798 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 8011764:	2300      	movs	r3, #0
 8011766:	e7f0      	b.n	801174a <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8011768:	f103 0220 	add.w	r2, r3, #32
 801176c:	eb0d 0102 	add.w	r1, sp, r2
 8011770:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8011774:	3301      	adds	r3, #1
 8011776:	f103 0220 	add.w	r2, r3, #32
 801177a:	446a      	add	r2, sp
 801177c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8011780:	09d2      	lsrs	r2, r2, #7
 8011782:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8011786:	f801 2c10 	strb.w	r2, [r1, #-16]
 801178a:	2b0e      	cmp	r3, #14
 801178c:	ddec      	ble.n	8011768 <AES_CMAC_Final+0x110>
 801178e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011792:	005b      	lsls	r3, r3, #1
 8011794:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8011798:	4420      	add	r0, r4
 801179a:	2380      	movs	r3, #128	; 0x80
 801179c:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80117a0:	e003      	b.n	80117aa <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 80117a2:	4423      	add	r3, r4
 80117a4:	2200      	movs	r2, #0
 80117a6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80117aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80117ae:	3301      	adds	r3, #1
 80117b0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80117b4:	2b0f      	cmp	r3, #15
 80117b6:	d9f4      	bls.n	80117a2 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 80117b8:	2300      	movs	r3, #0
 80117ba:	e00b      	b.n	80117d4 <AES_CMAC_Final+0x17c>
 80117bc:	18e1      	adds	r1, r4, r3
 80117be:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80117c2:	f103 0020 	add.w	r0, r3, #32
 80117c6:	4468      	add	r0, sp
 80117c8:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80117cc:	4042      	eors	r2, r0
 80117ce:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80117d2:	3301      	adds	r3, #1
 80117d4:	2b0f      	cmp	r3, #15
 80117d6:	ddf1      	ble.n	80117bc <AES_CMAC_Final+0x164>
 80117d8:	2300      	movs	r3, #0
 80117da:	e009      	b.n	80117f0 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 80117dc:	18e2      	adds	r2, r4, r3
 80117de:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 80117e2:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 80117e6:	ea8c 0c01 	eor.w	ip, ip, r1
 80117ea:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 80117ee:	3301      	adds	r3, #1
 80117f0:	2b0f      	cmp	r3, #15
 80117f2:	ddf3      	ble.n	80117dc <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80117f4:	2210      	movs	r2, #16
 80117f6:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 80117fa:	4668      	mov	r0, sp
 80117fc:	f000 fda9 	bl	8012352 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8011800:	4622      	mov	r2, r4
 8011802:	4629      	mov	r1, r5
 8011804:	4668      	mov	r0, sp
 8011806:	f000 fa75 	bl	8011cf4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801180a:	2210      	movs	r2, #16
 801180c:	2100      	movs	r1, #0
 801180e:	eb0d 0002 	add.w	r0, sp, r2
 8011812:	f000 fdb6 	bl	8012382 <memset1>
}
 8011816:	b009      	add	sp, #36	; 0x24
 8011818:	bd30      	pop	{r4, r5, pc}

0801181a <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 801181a:	780b      	ldrb	r3, [r1, #0]
 801181c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 801181e:	784b      	ldrb	r3, [r1, #1]
 8011820:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8011822:	788b      	ldrb	r3, [r1, #2]
 8011824:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8011826:	78cb      	ldrb	r3, [r1, #3]
 8011828:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 801182a:	790b      	ldrb	r3, [r1, #4]
 801182c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801182e:	794b      	ldrb	r3, [r1, #5]
 8011830:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8011832:	798b      	ldrb	r3, [r1, #6]
 8011834:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8011836:	79cb      	ldrb	r3, [r1, #7]
 8011838:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 801183a:	7a0b      	ldrb	r3, [r1, #8]
 801183c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 801183e:	7a4b      	ldrb	r3, [r1, #9]
 8011840:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8011842:	7a8b      	ldrb	r3, [r1, #10]
 8011844:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8011846:	7acb      	ldrb	r3, [r1, #11]
 8011848:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 801184a:	7b0b      	ldrb	r3, [r1, #12]
 801184c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 801184e:	7b4b      	ldrb	r3, [r1, #13]
 8011850:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8011852:	7b8b      	ldrb	r3, [r1, #14]
 8011854:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8011856:	7bcb      	ldrb	r3, [r1, #15]
 8011858:	73c3      	strb	r3, [r0, #15]
#endif
}
 801185a:	4770      	bx	lr

0801185c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 801185c:	e004      	b.n	8011868 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801185e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011862:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8011866:	461a      	mov	r2, r3
 8011868:	1e53      	subs	r3, r2, #1
 801186a:	b2db      	uxtb	r3, r3
 801186c:	2a00      	cmp	r2, #0
 801186e:	d1f6      	bne.n	801185e <copy_block_nn+0x2>
}
 8011870:	4770      	bx	lr

08011872 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8011872:	780b      	ldrb	r3, [r1, #0]
 8011874:	7802      	ldrb	r2, [r0, #0]
 8011876:	4053      	eors	r3, r2
 8011878:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 801187a:	784b      	ldrb	r3, [r1, #1]
 801187c:	7842      	ldrb	r2, [r0, #1]
 801187e:	4053      	eors	r3, r2
 8011880:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8011882:	788b      	ldrb	r3, [r1, #2]
 8011884:	7882      	ldrb	r2, [r0, #2]
 8011886:	4053      	eors	r3, r2
 8011888:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801188a:	78cb      	ldrb	r3, [r1, #3]
 801188c:	78c2      	ldrb	r2, [r0, #3]
 801188e:	4053      	eors	r3, r2
 8011890:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8011892:	790b      	ldrb	r3, [r1, #4]
 8011894:	7902      	ldrb	r2, [r0, #4]
 8011896:	4053      	eors	r3, r2
 8011898:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801189a:	794b      	ldrb	r3, [r1, #5]
 801189c:	7942      	ldrb	r2, [r0, #5]
 801189e:	4053      	eors	r3, r2
 80118a0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80118a2:	798b      	ldrb	r3, [r1, #6]
 80118a4:	7982      	ldrb	r2, [r0, #6]
 80118a6:	4053      	eors	r3, r2
 80118a8:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80118aa:	79cb      	ldrb	r3, [r1, #7]
 80118ac:	79c2      	ldrb	r2, [r0, #7]
 80118ae:	4053      	eors	r3, r2
 80118b0:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80118b2:	7a0b      	ldrb	r3, [r1, #8]
 80118b4:	7a02      	ldrb	r2, [r0, #8]
 80118b6:	4053      	eors	r3, r2
 80118b8:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80118ba:	7a4b      	ldrb	r3, [r1, #9]
 80118bc:	7a42      	ldrb	r2, [r0, #9]
 80118be:	4053      	eors	r3, r2
 80118c0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80118c2:	7a8b      	ldrb	r3, [r1, #10]
 80118c4:	7a82      	ldrb	r2, [r0, #10]
 80118c6:	4053      	eors	r3, r2
 80118c8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80118ca:	7acb      	ldrb	r3, [r1, #11]
 80118cc:	7ac2      	ldrb	r2, [r0, #11]
 80118ce:	4053      	eors	r3, r2
 80118d0:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80118d2:	7b0b      	ldrb	r3, [r1, #12]
 80118d4:	7b02      	ldrb	r2, [r0, #12]
 80118d6:	4053      	eors	r3, r2
 80118d8:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80118da:	7b4b      	ldrb	r3, [r1, #13]
 80118dc:	7b42      	ldrb	r2, [r0, #13]
 80118de:	4053      	eors	r3, r2
 80118e0:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80118e2:	7b8b      	ldrb	r3, [r1, #14]
 80118e4:	7b82      	ldrb	r2, [r0, #14]
 80118e6:	4053      	eors	r3, r2
 80118e8:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 80118ea:	7bcb      	ldrb	r3, [r1, #15]
 80118ec:	7bc2      	ldrb	r2, [r0, #15]
 80118ee:	4053      	eors	r3, r2
 80118f0:	73c3      	strb	r3, [r0, #15]
#endif
}
 80118f2:	4770      	bx	lr

080118f4 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 80118f4:	780b      	ldrb	r3, [r1, #0]
 80118f6:	f892 c000 	ldrb.w	ip, [r2]
 80118fa:	ea83 030c 	eor.w	r3, r3, ip
 80118fe:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8011900:	784b      	ldrb	r3, [r1, #1]
 8011902:	f892 c001 	ldrb.w	ip, [r2, #1]
 8011906:	ea83 030c 	eor.w	r3, r3, ip
 801190a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 801190c:	788b      	ldrb	r3, [r1, #2]
 801190e:	f892 c002 	ldrb.w	ip, [r2, #2]
 8011912:	ea83 030c 	eor.w	r3, r3, ip
 8011916:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8011918:	78cb      	ldrb	r3, [r1, #3]
 801191a:	f892 c003 	ldrb.w	ip, [r2, #3]
 801191e:	ea83 030c 	eor.w	r3, r3, ip
 8011922:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8011924:	790b      	ldrb	r3, [r1, #4]
 8011926:	f892 c004 	ldrb.w	ip, [r2, #4]
 801192a:	ea83 030c 	eor.w	r3, r3, ip
 801192e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8011930:	794b      	ldrb	r3, [r1, #5]
 8011932:	f892 c005 	ldrb.w	ip, [r2, #5]
 8011936:	ea83 030c 	eor.w	r3, r3, ip
 801193a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 801193c:	798b      	ldrb	r3, [r1, #6]
 801193e:	f892 c006 	ldrb.w	ip, [r2, #6]
 8011942:	ea83 030c 	eor.w	r3, r3, ip
 8011946:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8011948:	79cb      	ldrb	r3, [r1, #7]
 801194a:	f892 c007 	ldrb.w	ip, [r2, #7]
 801194e:	ea83 030c 	eor.w	r3, r3, ip
 8011952:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8011954:	7a0b      	ldrb	r3, [r1, #8]
 8011956:	f892 c008 	ldrb.w	ip, [r2, #8]
 801195a:	ea83 030c 	eor.w	r3, r3, ip
 801195e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8011960:	7a4b      	ldrb	r3, [r1, #9]
 8011962:	f892 c009 	ldrb.w	ip, [r2, #9]
 8011966:	ea83 030c 	eor.w	r3, r3, ip
 801196a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 801196c:	7a8b      	ldrb	r3, [r1, #10]
 801196e:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8011972:	ea83 030c 	eor.w	r3, r3, ip
 8011976:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8011978:	7acb      	ldrb	r3, [r1, #11]
 801197a:	f892 c00b 	ldrb.w	ip, [r2, #11]
 801197e:	ea83 030c 	eor.w	r3, r3, ip
 8011982:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8011984:	7b0b      	ldrb	r3, [r1, #12]
 8011986:	f892 c00c 	ldrb.w	ip, [r2, #12]
 801198a:	ea83 030c 	eor.w	r3, r3, ip
 801198e:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8011990:	7b4b      	ldrb	r3, [r1, #13]
 8011992:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8011996:	ea83 030c 	eor.w	r3, r3, ip
 801199a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 801199c:	7b8b      	ldrb	r3, [r1, #14]
 801199e:	f892 c00e 	ldrb.w	ip, [r2, #14]
 80119a2:	ea83 030c 	eor.w	r3, r3, ip
 80119a6:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80119a8:	7bcb      	ldrb	r3, [r1, #15]
 80119aa:	7bd2      	ldrb	r2, [r2, #15]
 80119ac:	4053      	eors	r3, r2
 80119ae:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80119b0:	4770      	bx	lr

080119b2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80119b2:	b508      	push	{r3, lr}
    xor_block(d, k);
 80119b4:	f7ff ff5d 	bl	8011872 <xor_block>
}
 80119b8:	bd08      	pop	{r3, pc}
	...

080119bc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80119bc:	7802      	ldrb	r2, [r0, #0]
 80119be:	4b18      	ldr	r3, [pc, #96]	; (8011a20 <shift_sub_rows+0x64>)
 80119c0:	5c9a      	ldrb	r2, [r3, r2]
 80119c2:	7002      	strb	r2, [r0, #0]
 80119c4:	7902      	ldrb	r2, [r0, #4]
 80119c6:	5c9a      	ldrb	r2, [r3, r2]
 80119c8:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80119ca:	7a02      	ldrb	r2, [r0, #8]
 80119cc:	5c9a      	ldrb	r2, [r3, r2]
 80119ce:	7202      	strb	r2, [r0, #8]
 80119d0:	7b02      	ldrb	r2, [r0, #12]
 80119d2:	5c9a      	ldrb	r2, [r3, r2]
 80119d4:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80119d6:	7842      	ldrb	r2, [r0, #1]
 80119d8:	7941      	ldrb	r1, [r0, #5]
 80119da:	5c59      	ldrb	r1, [r3, r1]
 80119dc:	7041      	strb	r1, [r0, #1]
 80119de:	7a41      	ldrb	r1, [r0, #9]
 80119e0:	5c59      	ldrb	r1, [r3, r1]
 80119e2:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80119e4:	7b41      	ldrb	r1, [r0, #13]
 80119e6:	5c59      	ldrb	r1, [r3, r1]
 80119e8:	7241      	strb	r1, [r0, #9]
 80119ea:	5c9a      	ldrb	r2, [r3, r2]
 80119ec:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80119ee:	7882      	ldrb	r2, [r0, #2]
 80119f0:	7a81      	ldrb	r1, [r0, #10]
 80119f2:	5c59      	ldrb	r1, [r3, r1]
 80119f4:	7081      	strb	r1, [r0, #2]
 80119f6:	5c9a      	ldrb	r2, [r3, r2]
 80119f8:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80119fa:	7982      	ldrb	r2, [r0, #6]
 80119fc:	7b81      	ldrb	r1, [r0, #14]
 80119fe:	5c59      	ldrb	r1, [r3, r1]
 8011a00:	7181      	strb	r1, [r0, #6]
 8011a02:	5c9a      	ldrb	r2, [r3, r2]
 8011a04:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8011a06:	7bc2      	ldrb	r2, [r0, #15]
 8011a08:	7ac1      	ldrb	r1, [r0, #11]
 8011a0a:	5c59      	ldrb	r1, [r3, r1]
 8011a0c:	73c1      	strb	r1, [r0, #15]
 8011a0e:	79c1      	ldrb	r1, [r0, #7]
 8011a10:	5c59      	ldrb	r1, [r3, r1]
 8011a12:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8011a14:	78c1      	ldrb	r1, [r0, #3]
 8011a16:	5c59      	ldrb	r1, [r3, r1]
 8011a18:	71c1      	strb	r1, [r0, #7]
 8011a1a:	5c9b      	ldrb	r3, [r3, r2]
 8011a1c:	70c3      	strb	r3, [r0, #3]
}
 8011a1e:	4770      	bx	lr
 8011a20:	0801572c 	.word	0x0801572c

08011a24 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8011a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a28:	b084      	sub	sp, #16
 8011a2a:	4604      	mov	r4, r0
    block_copy(st, dt);
 8011a2c:	4601      	mov	r1, r0
 8011a2e:	4668      	mov	r0, sp
 8011a30:	f7ff fef3 	bl	801181a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8011a34:	f89d c000 	ldrb.w	ip, [sp]
 8011a38:	4b6a      	ldr	r3, [pc, #424]	; (8011be4 <mix_sub_columns+0x1c0>)
 8011a3a:	f813 000c 	ldrb.w	r0, [r3, ip]
 8011a3e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011a42:	4a69      	ldr	r2, [pc, #420]	; (8011be8 <mix_sub_columns+0x1c4>)
 8011a44:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011a48:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8011a4c:	4967      	ldr	r1, [pc, #412]	; (8011bec <mix_sub_columns+0x1c8>)
 8011a4e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8011a52:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8011a56:	5dce      	ldrb	r6, [r1, r7]
 8011a58:	ea80 0009 	eor.w	r0, r0, r9
 8011a5c:	4068      	eors	r0, r5
 8011a5e:	4070      	eors	r0, r6
 8011a60:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8011a62:	f811 000c 	ldrb.w	r0, [r1, ip]
 8011a66:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011a6a:	f812 900e 	ldrb.w	r9, [r2, lr]
 8011a6e:	ea80 0a0a 	eor.w	sl, r0, sl
 8011a72:	ea89 090a 	eor.w	r9, r9, sl
 8011a76:	ea86 0609 	eor.w	r6, r6, r9
 8011a7a:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8011a7c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8011a80:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8011a84:	5dd6      	ldrb	r6, [r2, r7]
 8011a86:	ea80 0008 	eor.w	r0, r0, r8
 8011a8a:	ea8e 0000 	eor.w	r0, lr, r0
 8011a8e:	4070      	eors	r0, r6
 8011a90:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8011a92:	f812 600c 	ldrb.w	r6, [r2, ip]
 8011a96:	5dd8      	ldrb	r0, [r3, r7]
 8011a98:	ea86 0608 	eor.w	r6, r6, r8
 8011a9c:	4075      	eors	r5, r6
 8011a9e:	4045      	eors	r5, r0
 8011aa0:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8011aa2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8011aa6:	f813 000c 	ldrb.w	r0, [r3, ip]
 8011aaa:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8011aae:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011ab2:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8011ab6:	f811 500e 	ldrb.w	r5, [r1, lr]
 8011aba:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8011abe:	5dce      	ldrb	r6, [r1, r7]
 8011ac0:	ea80 0009 	eor.w	r0, r0, r9
 8011ac4:	4068      	eors	r0, r5
 8011ac6:	4070      	eors	r0, r6
 8011ac8:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8011aca:	f811 000c 	ldrb.w	r0, [r1, ip]
 8011ace:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011ad2:	f812 900e 	ldrb.w	r9, [r2, lr]
 8011ad6:	ea80 0a0a 	eor.w	sl, r0, sl
 8011ada:	ea89 090a 	eor.w	r9, r9, sl
 8011ade:	ea86 0609 	eor.w	r6, r6, r9
 8011ae2:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8011ae4:	f811 8008 	ldrb.w	r8, [r1, r8]
 8011ae8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8011aec:	5dd6      	ldrb	r6, [r2, r7]
 8011aee:	ea80 0008 	eor.w	r0, r0, r8
 8011af2:	ea8e 0000 	eor.w	r0, lr, r0
 8011af6:	4070      	eors	r0, r6
 8011af8:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8011afa:	f812 600c 	ldrb.w	r6, [r2, ip]
 8011afe:	5dd8      	ldrb	r0, [r3, r7]
 8011b00:	ea86 0608 	eor.w	r6, r6, r8
 8011b04:	4075      	eors	r5, r6
 8011b06:	4045      	eors	r5, r0
 8011b08:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8011b0a:	f89d c008 	ldrb.w	ip, [sp, #8]
 8011b0e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8011b12:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8011b16:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011b1a:	f89d e002 	ldrb.w	lr, [sp, #2]
 8011b1e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8011b22:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8011b26:	5dce      	ldrb	r6, [r1, r7]
 8011b28:	ea80 0009 	eor.w	r0, r0, r9
 8011b2c:	4068      	eors	r0, r5
 8011b2e:	4070      	eors	r0, r6
 8011b30:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8011b32:	f811 000c 	ldrb.w	r0, [r1, ip]
 8011b36:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011b3a:	f812 900e 	ldrb.w	r9, [r2, lr]
 8011b3e:	ea80 0a0a 	eor.w	sl, r0, sl
 8011b42:	ea89 090a 	eor.w	r9, r9, sl
 8011b46:	ea86 0609 	eor.w	r6, r6, r9
 8011b4a:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8011b4c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8011b50:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8011b54:	5dd6      	ldrb	r6, [r2, r7]
 8011b56:	ea80 0008 	eor.w	r0, r0, r8
 8011b5a:	ea8e 0000 	eor.w	r0, lr, r0
 8011b5e:	4070      	eors	r0, r6
 8011b60:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8011b62:	f812 600c 	ldrb.w	r6, [r2, ip]
 8011b66:	5dd8      	ldrb	r0, [r3, r7]
 8011b68:	ea86 0608 	eor.w	r6, r6, r8
 8011b6c:	4075      	eors	r5, r6
 8011b6e:	4045      	eors	r5, r0
 8011b70:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8011b72:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8011b76:	5d98      	ldrb	r0, [r3, r6]
 8011b78:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8011b7c:	f812 9008 	ldrb.w	r9, [r2, r8]
 8011b80:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8011b84:	f811 c007 	ldrb.w	ip, [r1, r7]
 8011b88:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8011b8c:	f811 e005 	ldrb.w	lr, [r1, r5]
 8011b90:	ea80 0009 	eor.w	r0, r0, r9
 8011b94:	ea8c 0000 	eor.w	r0, ip, r0
 8011b98:	ea8e 0000 	eor.w	r0, lr, r0
 8011b9c:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8011b9e:	5d88      	ldrb	r0, [r1, r6]
 8011ba0:	f813 a008 	ldrb.w	sl, [r3, r8]
 8011ba4:	f812 9007 	ldrb.w	r9, [r2, r7]
 8011ba8:	ea80 0a0a 	eor.w	sl, r0, sl
 8011bac:	ea89 090a 	eor.w	r9, r9, sl
 8011bb0:	ea8e 0e09 	eor.w	lr, lr, r9
 8011bb4:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8011bb8:	f811 1008 	ldrb.w	r1, [r1, r8]
 8011bbc:	f813 e007 	ldrb.w	lr, [r3, r7]
 8011bc0:	5d57      	ldrb	r7, [r2, r5]
 8011bc2:	4048      	eors	r0, r1
 8011bc4:	ea8e 0000 	eor.w	r0, lr, r0
 8011bc8:	4078      	eors	r0, r7
 8011bca:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8011bcc:	5d92      	ldrb	r2, [r2, r6]
 8011bce:	5d5b      	ldrb	r3, [r3, r5]
 8011bd0:	4051      	eors	r1, r2
 8011bd2:	ea8c 0c01 	eor.w	ip, ip, r1
 8011bd6:	ea83 0c0c 	eor.w	ip, r3, ip
 8011bda:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 8011bde:	b004      	add	sp, #16
 8011be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011be4:	0801552c 	.word	0x0801552c
 8011be8:	0801562c 	.word	0x0801562c
 8011bec:	0801572c 	.word	0x0801572c

08011bf0 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8011bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bf4:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8011bf6:	f1a1 0310 	sub.w	r3, r1, #16
 8011bfa:	b2da      	uxtb	r2, r3
 8011bfc:	2a10      	cmp	r2, #16
 8011bfe:	d807      	bhi.n	8011c10 <lorawan_aes_set_key+0x20>
 8011c00:	460d      	mov	r5, r1
 8011c02:	2301      	movs	r3, #1
 8011c04:	4093      	lsls	r3, r2
 8011c06:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8011c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011c0e:	b92b      	cbnz	r3, 8011c1c <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8011c10:	2300      	movs	r3, #0
 8011c12:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8011c16:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8011c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8011c1c:	460a      	mov	r2, r1
 8011c1e:	4601      	mov	r1, r0
 8011c20:	4620      	mov	r0, r4
 8011c22:	f7ff fe1b 	bl	801185c <copy_block_nn>
    hi = (keylen + 28) << 2;
 8011c26:	f105 031c 	add.w	r3, r5, #28
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8011c32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8011c36:	3b01      	subs	r3, #1
 8011c38:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8011c3c:	462b      	mov	r3, r5
 8011c3e:	f04f 0c01 	mov.w	ip, #1
 8011c42:	e023      	b.n	8011c8c <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 8011c44:	2d18      	cmp	r5, #24
 8011c46:	d901      	bls.n	8011c4c <lorawan_aes_set_key+0x5c>
 8011c48:	2a10      	cmp	r2, #16
 8011c4a:	d047      	beq.n	8011cdc <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8011c4c:	1b5a      	subs	r2, r3, r5
 8011c4e:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8011c50:	f814 9002 	ldrb.w	r9, [r4, r2]
 8011c54:	ea89 0808 	eor.w	r8, r9, r8
 8011c58:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8011c5c:	f102 0801 	add.w	r8, r2, #1
 8011c60:	f814 8008 	ldrb.w	r8, [r4, r8]
 8011c64:	f100 0901 	add.w	r9, r0, #1
 8011c68:	ea88 0707 	eor.w	r7, r8, r7
 8011c6c:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8011c70:	1c97      	adds	r7, r2, #2
 8011c72:	5de7      	ldrb	r7, [r4, r7]
 8011c74:	f100 0802 	add.w	r8, r0, #2
 8011c78:	407e      	eors	r6, r7
 8011c7a:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8011c7e:	3203      	adds	r2, #3
 8011c80:	5ca6      	ldrb	r6, [r4, r2]
 8011c82:	1cc2      	adds	r2, r0, #3
 8011c84:	4071      	eors	r1, r6
 8011c86:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8011c88:	3304      	adds	r3, #4
 8011c8a:	b2db      	uxtb	r3, r3
 8011c8c:	4573      	cmp	r3, lr
 8011c8e:	d22c      	bcs.n	8011cea <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8011c90:	4618      	mov	r0, r3
 8011c92:	1f1a      	subs	r2, r3, #4
 8011c94:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8011c98:	1eda      	subs	r2, r3, #3
 8011c9a:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8011c9c:	1e9a      	subs	r2, r3, #2
 8011c9e:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8011ca0:	1e5a      	subs	r2, r3, #1
 8011ca2:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8011ca4:	fbb3 f2f5 	udiv	r2, r3, r5
 8011ca8:	fb05 3212 	mls	r2, r5, r2, r3
 8011cac:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8011cb0:	d1c8      	bne.n	8011c44 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 8011cb2:	4a0f      	ldr	r2, [pc, #60]	; (8011cf0 <lorawan_aes_set_key+0x100>)
 8011cb4:	f812 9007 	ldrb.w	r9, [r2, r7]
 8011cb8:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8011cbc:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8011cbe:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8011cc0:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8011cc4:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8011cc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011ccc:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8011cd0:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 8011cd4:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8011cd8:	46c8      	mov	r8, r9
 8011cda:	e7b7      	b.n	8011c4c <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 8011cdc:	4a04      	ldr	r2, [pc, #16]	; (8011cf0 <lorawan_aes_set_key+0x100>)
 8011cde:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8011ce2:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8011ce4:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8011ce6:	5c51      	ldrb	r1, [r2, r1]
 8011ce8:	e7b0      	b.n	8011c4c <lorawan_aes_set_key+0x5c>
    return 0;
 8011cea:	2000      	movs	r0, #0
 8011cec:	e794      	b.n	8011c18 <lorawan_aes_set_key+0x28>
 8011cee:	bf00      	nop
 8011cf0:	0801572c 	.word	0x0801572c

08011cf4 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8011cf4:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8011cf8:	b31b      	cbz	r3, 8011d42 <lorawan_aes_encrypt+0x4e>
{
 8011cfa:	b570      	push	{r4, r5, r6, lr}
 8011cfc:	b084      	sub	sp, #16
 8011cfe:	460e      	mov	r6, r1
 8011d00:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8011d02:	4601      	mov	r1, r0
 8011d04:	4668      	mov	r0, sp
 8011d06:	f7ff fdf5 	bl	80118f4 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8011d0a:	2401      	movs	r4, #1
 8011d0c:	e009      	b.n	8011d22 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8011d0e:	4668      	mov	r0, sp
 8011d10:	f7ff fe88 	bl	8011a24 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8011d14:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8011d18:	4668      	mov	r0, sp
 8011d1a:	f7ff fe4a 	bl	80119b2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8011d1e:	3401      	adds	r4, #1
 8011d20:	b2e4      	uxtb	r4, r4
 8011d22:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8011d26:	42a3      	cmp	r3, r4
 8011d28:	d8f1      	bhi.n	8011d0e <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8011d2a:	4668      	mov	r0, sp
 8011d2c:	f7ff fe46 	bl	80119bc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8011d30:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8011d34:	4669      	mov	r1, sp
 8011d36:	4630      	mov	r0, r6
 8011d38:	f7ff fddc 	bl	80118f4 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8011d3c:	2000      	movs	r0, #0
}
 8011d3e:	b004      	add	sp, #16
 8011d40:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8011d42:	20ff      	movs	r0, #255	; 0xff
}
 8011d44:	4770      	bx	lr
	...

08011d48 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011d48:	2300      	movs	r3, #0
 8011d4a:	2b09      	cmp	r3, #9
 8011d4c:	d817      	bhi.n	8011d7e <GetKeyByID+0x36>
{
 8011d4e:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8011d50:	4a0c      	ldr	r2, [pc, #48]	; (8011d84 <GetKeyByID+0x3c>)
 8011d52:	6814      	ldr	r4, [r2, #0]
 8011d54:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011d58:	4422      	add	r2, r4
 8011d5a:	7c12      	ldrb	r2, [r2, #16]
 8011d5c:	4282      	cmp	r2, r0
 8011d5e:	d006      	beq.n	8011d6e <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011d60:	3301      	adds	r3, #1
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	2b09      	cmp	r3, #9
 8011d66:	d9f3      	bls.n	8011d50 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011d68:	2003      	movs	r0, #3
}
 8011d6a:	bc10      	pop	{r4}
 8011d6c:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8011d6e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8011d72:	f10c 0c10 	add.w	ip, ip, #16
 8011d76:	4464      	add	r4, ip
 8011d78:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8011d7a:	2000      	movs	r0, #0
 8011d7c:	e7f5      	b.n	8011d6a <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011d7e:	2003      	movs	r0, #3
}
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	20003cac 	.word	0x20003cac

08011d88 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 8011d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d8c:	b0cc      	sub	sp, #304	; 0x130
 8011d8e:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8011d90:	b3a9      	cbz	r1, 8011dfe <ComputeCmac+0x76>
 8011d92:	4605      	mov	r5, r0
 8011d94:	4617      	mov	r7, r2
 8011d96:	461c      	mov	r4, r3
 8011d98:	4688      	mov	r8, r1
 8011d9a:	b396      	cbz	r6, 8011e02 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8011d9c:	a802      	add	r0, sp, #8
 8011d9e:	f7ff fbd7 	bl	8011550 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8011da2:	a901      	add	r1, sp, #4
 8011da4:	4620      	mov	r0, r4
 8011da6:	f7ff ffcf 	bl	8011d48 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8011daa:	4604      	mov	r4, r0
 8011dac:	b118      	cbz	r0, 8011db6 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8011dae:	4620      	mov	r0, r4
 8011db0:	b04c      	add	sp, #304	; 0x130
 8011db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8011db6:	9901      	ldr	r1, [sp, #4]
 8011db8:	3101      	adds	r1, #1
 8011dba:	a802      	add	r0, sp, #8
 8011dbc:	f7ff fbd7 	bl	801156e <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8011dc0:	b125      	cbz	r5, 8011dcc <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8011dc2:	2210      	movs	r2, #16
 8011dc4:	4629      	mov	r1, r5
 8011dc6:	a802      	add	r0, sp, #8
 8011dc8:	f7ff fbd8 	bl	801157c <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8011dcc:	463a      	mov	r2, r7
 8011dce:	4641      	mov	r1, r8
 8011dd0:	a802      	add	r0, sp, #8
 8011dd2:	f7ff fbd3 	bl	801157c <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8011dd6:	a902      	add	r1, sp, #8
 8011dd8:	a848      	add	r0, sp, #288	; 0x120
 8011dda:	f7ff fc3d 	bl	8011658 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8011dde:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8011de2:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8011de6:	041b      	lsls	r3, r3, #16
 8011de8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011dec:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8011df0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 8011df4:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8011df8:	4313      	orrs	r3, r2
 8011dfa:	6033      	str	r3, [r6, #0]
 8011dfc:	e7d7      	b.n	8011dae <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8011dfe:	2402      	movs	r4, #2
 8011e00:	e7d5      	b.n	8011dae <ComputeCmac+0x26>
 8011e02:	2402      	movs	r4, #2
 8011e04:	e7d3      	b.n	8011dae <ComputeCmac+0x26>
	...

08011e08 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 8011e08:	b168      	cbz	r0, 8011e26 <SecureElementInit+0x1e>
{
 8011e0a:	b510      	push	{r4, lr}
 8011e0c:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 8011e0e:	4a08      	ldr	r2, [pc, #32]	; (8011e30 <SecureElementInit+0x28>)
 8011e10:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8011e12:	22c0      	movs	r2, #192	; 0xc0
 8011e14:	4907      	ldr	r1, [pc, #28]	; (8011e34 <SecureElementInit+0x2c>)
 8011e16:	f000 fa9c 	bl	8012352 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 8011e1a:	b134      	cbz	r4, 8011e2a <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 8011e1c:	4b04      	ldr	r3, [pc, #16]	; (8011e30 <SecureElementInit+0x28>)
 8011e1e:	6818      	ldr	r0, [r3, #0]
 8011e20:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 8011e22:	2000      	movs	r0, #0
}
 8011e24:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8011e26:	2002      	movs	r0, #2
}
 8011e28:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 8011e2a:	2000      	movs	r0, #0
 8011e2c:	e7fa      	b.n	8011e24 <SecureElementInit+0x1c>
 8011e2e:	bf00      	nop
 8011e30:	20003cac 	.word	0x20003cac
 8011e34:	0803e500 	.word	0x0803e500

08011e38 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8011e38:	2300      	movs	r3, #0
 8011e3a:	2b09      	cmp	r3, #9
 8011e3c:	d817      	bhi.n	8011e6e <SecureElementGetKeyByID+0x36>
{
 8011e3e:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8011e40:	4a0c      	ldr	r2, [pc, #48]	; (8011e74 <SecureElementGetKeyByID+0x3c>)
 8011e42:	6814      	ldr	r4, [r2, #0]
 8011e44:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011e48:	4422      	add	r2, r4
 8011e4a:	7c12      	ldrb	r2, [r2, #16]
 8011e4c:	4282      	cmp	r2, r0
 8011e4e:	d006      	beq.n	8011e5e <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8011e50:	3301      	adds	r3, #1
 8011e52:	b2db      	uxtb	r3, r3
 8011e54:	2b09      	cmp	r3, #9
 8011e56:	d9f3      	bls.n	8011e40 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011e58:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8011e5a:	bc10      	pop	{r4}
 8011e5c:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 8011e5e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8011e62:	f10c 0c10 	add.w	ip, ip, #16
 8011e66:	4464      	add	r4, ip
 8011e68:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	e7f5      	b.n	8011e5a <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8011e6e:	2003      	movs	r0, #3
}
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	20003cac 	.word	0x20003cac

08011e78 <PrintKey>:
{
 8011e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e7c:	b095      	sub	sp, #84	; 0x54
 8011e7e:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8011e80:	a913      	add	r1, sp, #76	; 0x4c
 8011e82:	f7ff ffd9 	bl	8011e38 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 8011e86:	2800      	cmp	r0, #0
 8011e88:	d154      	bne.n	8011f34 <PrintKey+0xbc>
        if (key == APP_KEY)
 8011e8a:	b1b4      	cbz	r4, 8011eba <PrintKey+0x42>
        else if (key == NWK_KEY)
 8011e8c:	2c01      	cmp	r4, #1
 8011e8e:	d054      	beq.n	8011f3a <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 8011e90:	2c03      	cmp	r4, #3
 8011e92:	d059      	beq.n	8011f48 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 8011e94:	2c02      	cmp	r4, #2
 8011e96:	d05e      	beq.n	8011f56 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 8011e98:	2c04      	cmp	r4, #4
 8011e9a:	d063      	beq.n	8011f64 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 8011e9c:	2c7f      	cmp	r4, #127	; 0x7f
 8011e9e:	d068      	beq.n	8011f72 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 8011ea0:	2c80      	cmp	r4, #128	; 0x80
 8011ea2:	d06d      	beq.n	8011f80 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 8011ea4:	2c81      	cmp	r4, #129	; 0x81
 8011ea6:	d072      	beq.n	8011f8e <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 8011ea8:	2c82      	cmp	r4, #130	; 0x82
 8011eaa:	d10c      	bne.n	8011ec6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 8011eac:	4b3b      	ldr	r3, [pc, #236]	; (8011f9c <PrintKey+0x124>)
 8011eae:	2200      	movs	r2, #0
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	2002      	movs	r0, #2
 8011eb4:	f002 f8f6 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8011eb8:	e005      	b.n	8011ec6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8011eba:	4b39      	ldr	r3, [pc, #228]	; (8011fa0 <PrintKey+0x128>)
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	4611      	mov	r1, r2
 8011ec0:	2002      	movs	r0, #2
 8011ec2:	f002 f8ef 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8011ec6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ec8:	785a      	ldrb	r2, [r3, #1]
 8011eca:	9210      	str	r2, [sp, #64]	; 0x40
 8011ecc:	7899      	ldrb	r1, [r3, #2]
 8011ece:	9111      	str	r1, [sp, #68]	; 0x44
 8011ed0:	78da      	ldrb	r2, [r3, #3]
 8011ed2:	7919      	ldrb	r1, [r3, #4]
 8011ed4:	7958      	ldrb	r0, [r3, #5]
 8011ed6:	799c      	ldrb	r4, [r3, #6]
 8011ed8:	79dd      	ldrb	r5, [r3, #7]
 8011eda:	7a1e      	ldrb	r6, [r3, #8]
 8011edc:	7a5f      	ldrb	r7, [r3, #9]
 8011ede:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8011ee2:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8011ee6:	f893 800c 	ldrb.w	r8, [r3, #12]
 8011eea:	f893 900d 	ldrb.w	r9, [r3, #13]
 8011eee:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8011ef2:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8011ef6:	7c1b      	ldrb	r3, [r3, #16]
 8011ef8:	930f      	str	r3, [sp, #60]	; 0x3c
 8011efa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8011efe:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011f02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011f06:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8011f0a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8011f0e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8011f12:	9708      	str	r7, [sp, #32]
 8011f14:	9607      	str	r6, [sp, #28]
 8011f16:	9506      	str	r5, [sp, #24]
 8011f18:	9405      	str	r4, [sp, #20]
 8011f1a:	9004      	str	r0, [sp, #16]
 8011f1c:	9103      	str	r1, [sp, #12]
 8011f1e:	9202      	str	r2, [sp, #8]
 8011f20:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011f22:	9101      	str	r1, [sp, #4]
 8011f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f26:	9200      	str	r2, [sp, #0]
 8011f28:	4b1e      	ldr	r3, [pc, #120]	; (8011fa4 <PrintKey+0x12c>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	4611      	mov	r1, r2
 8011f2e:	2002      	movs	r0, #2
 8011f30:	f002 f8b8 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 8011f34:	b015      	add	sp, #84	; 0x54
 8011f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 8011f3a:	4b1b      	ldr	r3, [pc, #108]	; (8011fa8 <PrintKey+0x130>)
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	4611      	mov	r1, r2
 8011f40:	2002      	movs	r0, #2
 8011f42:	f002 f8af 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8011f46:	e7be      	b.n	8011ec6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8011f48:	4b18      	ldr	r3, [pc, #96]	; (8011fac <PrintKey+0x134>)
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	4611      	mov	r1, r2
 8011f4e:	2002      	movs	r0, #2
 8011f50:	f002 f8a8 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8011f54:	e7b7      	b.n	8011ec6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8011f56:	4b16      	ldr	r3, [pc, #88]	; (8011fb0 <PrintKey+0x138>)
 8011f58:	2200      	movs	r2, #0
 8011f5a:	4611      	mov	r1, r2
 8011f5c:	2002      	movs	r0, #2
 8011f5e:	f002 f8a1 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8011f62:	e7b0      	b.n	8011ec6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 8011f64:	4b13      	ldr	r3, [pc, #76]	; (8011fb4 <PrintKey+0x13c>)
 8011f66:	2200      	movs	r2, #0
 8011f68:	4611      	mov	r1, r2
 8011f6a:	2002      	movs	r0, #2
 8011f6c:	f002 f89a 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8011f70:	e7a9      	b.n	8011ec6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 8011f72:	4b11      	ldr	r3, [pc, #68]	; (8011fb8 <PrintKey+0x140>)
 8011f74:	2200      	movs	r2, #0
 8011f76:	4611      	mov	r1, r2
 8011f78:	2002      	movs	r0, #2
 8011f7a:	f002 f893 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8011f7e:	e7a2      	b.n	8011ec6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 8011f80:	4b0e      	ldr	r3, [pc, #56]	; (8011fbc <PrintKey+0x144>)
 8011f82:	2200      	movs	r2, #0
 8011f84:	4611      	mov	r1, r2
 8011f86:	2002      	movs	r0, #2
 8011f88:	f002 f88c 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8011f8c:	e79b      	b.n	8011ec6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 8011f8e:	4b0c      	ldr	r3, [pc, #48]	; (8011fc0 <PrintKey+0x148>)
 8011f90:	2200      	movs	r2, #0
 8011f92:	4611      	mov	r1, r2
 8011f94:	2002      	movs	r0, #2
 8011f96:	f002 f885 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 8011f9a:	e794      	b.n	8011ec6 <PrintKey+0x4e>
 8011f9c:	080158ec 	.word	0x080158ec
 8011fa0:	0801582c 	.word	0x0801582c
 8011fa4:	08015904 	.word	0x08015904
 8011fa8:	08015844 	.word	0x08015844
 8011fac:	0801585c 	.word	0x0801585c
 8011fb0:	08015874 	.word	0x08015874
 8011fb4:	0801588c 	.word	0x0801588c
 8011fb8:	080158a4 	.word	0x080158a4
 8011fbc:	080158bc 	.word	0x080158bc
 8011fc0:	080158d4 	.word	0x080158d4

08011fc4 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8011fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fc6:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8011fc8:	4b28      	ldr	r3, [pc, #160]	; (801206c <SecureElementPrintKeys+0xa8>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	4611      	mov	r1, r2
 8011fce:	2002      	movs	r0, #2
 8011fd0:	f002 f868 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8011fd4:	2000      	movs	r0, #0
 8011fd6:	f7ff ff4f 	bl	8011e78 <PrintKey>
    PrintKey(NWK_KEY);
 8011fda:	2001      	movs	r0, #1
 8011fdc:	f7ff ff4c 	bl	8011e78 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8011fe0:	4b23      	ldr	r3, [pc, #140]	; (8012070 <SecureElementPrintKeys+0xac>)
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	2002      	movs	r0, #2
 8011fe8:	f002 f85c 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8011fec:	2003      	movs	r0, #3
 8011fee:	f7ff ff43 	bl	8011e78 <PrintKey>
    PrintKey(NWK_S_KEY);
 8011ff2:	2002      	movs	r0, #2
 8011ff4:	f7ff ff40 	bl	8011e78 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 8011ff8:	4b1e      	ldr	r3, [pc, #120]	; (8012074 <SecureElementPrintKeys+0xb0>)
 8011ffa:	2200      	movs	r2, #0
 8011ffc:	4611      	mov	r1, r2
 8011ffe:	2002      	movs	r0, #2
 8012000:	f002 f850 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012004:	4c1c      	ldr	r4, [pc, #112]	; (8012078 <SecureElementPrintKeys+0xb4>)
 8012006:	6823      	ldr	r3, [r4, #0]
 8012008:	781a      	ldrb	r2, [r3, #0]
 801200a:	7859      	ldrb	r1, [r3, #1]
 801200c:	7898      	ldrb	r0, [r3, #2]
 801200e:	78dd      	ldrb	r5, [r3, #3]
 8012010:	791e      	ldrb	r6, [r3, #4]
 8012012:	795f      	ldrb	r7, [r3, #5]
 8012014:	f893 c006 	ldrb.w	ip, [r3, #6]
 8012018:	79db      	ldrb	r3, [r3, #7]
 801201a:	9307      	str	r3, [sp, #28]
 801201c:	f8cd c018 	str.w	ip, [sp, #24]
 8012020:	9705      	str	r7, [sp, #20]
 8012022:	9604      	str	r6, [sp, #16]
 8012024:	9503      	str	r5, [sp, #12]
 8012026:	9002      	str	r0, [sp, #8]
 8012028:	9101      	str	r1, [sp, #4]
 801202a:	9200      	str	r2, [sp, #0]
 801202c:	4b13      	ldr	r3, [pc, #76]	; (801207c <SecureElementPrintKeys+0xb8>)
 801202e:	2200      	movs	r2, #0
 8012030:	4611      	mov	r1, r2
 8012032:	2002      	movs	r0, #2
 8012034:	f002 f836 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8012038:	6823      	ldr	r3, [r4, #0]
 801203a:	7a1a      	ldrb	r2, [r3, #8]
 801203c:	7a59      	ldrb	r1, [r3, #9]
 801203e:	7a98      	ldrb	r0, [r3, #10]
 8012040:	7adc      	ldrb	r4, [r3, #11]
 8012042:	7b1d      	ldrb	r5, [r3, #12]
 8012044:	7b5e      	ldrb	r6, [r3, #13]
 8012046:	7b9f      	ldrb	r7, [r3, #14]
 8012048:	7bdb      	ldrb	r3, [r3, #15]
 801204a:	9307      	str	r3, [sp, #28]
 801204c:	9706      	str	r7, [sp, #24]
 801204e:	9605      	str	r6, [sp, #20]
 8012050:	9504      	str	r5, [sp, #16]
 8012052:	9403      	str	r4, [sp, #12]
 8012054:	9002      	str	r0, [sp, #8]
 8012056:	9101      	str	r1, [sp, #4]
 8012058:	9200      	str	r2, [sp, #0]
 801205a:	4b09      	ldr	r3, [pc, #36]	; (8012080 <SecureElementPrintKeys+0xbc>)
 801205c:	2200      	movs	r2, #0
 801205e:	4611      	mov	r1, r2
 8012060:	2002      	movs	r0, #2
 8012062:	f002 f81f 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 8012066:	2000      	movs	r0, #0
 8012068:	b009      	add	sp, #36	; 0x24
 801206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801206c:	08015958 	.word	0x08015958
 8012070:	08015970 	.word	0x08015970
 8012074:	08015988 	.word	0x08015988
 8012078:	20003cac 	.word	0x20003cac
 801207c:	080159a0 	.word	0x080159a0
 8012080:	080159e0 	.word	0x080159e0

08012084 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 8012084:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 8012086:	2004      	movs	r0, #4
 8012088:	f7ff fef6 	bl	8011e78 <PrintKey>
    PrintKey(MC_KE_KEY);
 801208c:	207f      	movs	r0, #127	; 0x7f
 801208e:	f7ff fef3 	bl	8011e78 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 8012092:	2002      	movs	r0, #2
 8012094:	f7ff fef0 	bl	8011e78 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 8012098:	2003      	movs	r0, #3
 801209a:	f7ff feed 	bl	8011e78 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 801209e:	2000      	movs	r0, #0
 80120a0:	bd08      	pop	{r3, pc}

080120a2 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80120a2:	2b7e      	cmp	r3, #126	; 0x7e
 80120a4:	d80a      	bhi.n	80120bc <SecureElementComputeAesCmac+0x1a>
{
 80120a6:	b500      	push	{lr}
 80120a8:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80120aa:	f8dd c010 	ldr.w	ip, [sp, #16]
 80120ae:	f8cd c000 	str.w	ip, [sp]
 80120b2:	f7ff fe69 	bl	8011d88 <ComputeCmac>
}
 80120b6:	b003      	add	sp, #12
 80120b8:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80120bc:	2003      	movs	r0, #3
}
 80120be:	4770      	bx	lr

080120c0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 80120c0:	b190      	cbz	r0, 80120e8 <SecureElementVerifyAesCmac+0x28>
{
 80120c2:	b510      	push	{r4, lr}
 80120c4:	b084      	sub	sp, #16
 80120c6:	468c      	mov	ip, r1
 80120c8:	4614      	mov	r4, r2
 80120ca:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 80120cc:	2000      	movs	r0, #0
 80120ce:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80120d0:	aa03      	add	r2, sp, #12
 80120d2:	9200      	str	r2, [sp, #0]
 80120d4:	4662      	mov	r2, ip
 80120d6:	f7ff fe57 	bl	8011d88 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80120da:	b918      	cbnz	r0, 80120e4 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 80120dc:	9b03      	ldr	r3, [sp, #12]
 80120de:	42a3      	cmp	r3, r4
 80120e0:	d000      	beq.n	80120e4 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80120e2:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 80120e4:	b004      	add	sp, #16
 80120e6:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80120e8:	2002      	movs	r0, #2
}
 80120ea:	4770      	bx	lr

080120ec <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 80120ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120f0:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 80120f2:	b350      	cbz	r0, 801214a <SecureElementAesEncrypt+0x5e>
 80120f4:	460c      	mov	r4, r1
 80120f6:	4615      	mov	r5, r2
 80120f8:	461e      	mov	r6, r3
 80120fa:	4607      	mov	r7, r0
 80120fc:	b343      	cbz	r3, 8012150 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 80120fe:	f011 0f0f 	tst.w	r1, #15
 8012102:	d128      	bne.n	8012156 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8012104:	22f0      	movs	r2, #240	; 0xf0
 8012106:	2100      	movs	r1, #0
 8012108:	a801      	add	r0, sp, #4
 801210a:	f000 f93a 	bl	8012382 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801210e:	4669      	mov	r1, sp
 8012110:	4628      	mov	r0, r5
 8012112:	f7ff fe19 	bl	8011d48 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8012116:	4680      	mov	r8, r0
 8012118:	b118      	cbz	r0, 8012122 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 801211a:	4640      	mov	r0, r8
 801211c:	b03e      	add	sp, #248	; 0xf8
 801211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8012122:	aa01      	add	r2, sp, #4
 8012124:	2110      	movs	r1, #16
 8012126:	9800      	ldr	r0, [sp, #0]
 8012128:	3001      	adds	r0, #1
 801212a:	f7ff fd61 	bl	8011bf0 <lorawan_aes_set_key>
        uint8_t block = 0;
 801212e:	4645      	mov	r5, r8
        while( size != 0 )
 8012130:	e008      	b.n	8012144 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8012132:	aa01      	add	r2, sp, #4
 8012134:	1971      	adds	r1, r6, r5
 8012136:	1978      	adds	r0, r7, r5
 8012138:	f7ff fddc 	bl	8011cf4 <lorawan_aes_encrypt>
            block = block + 16;
 801213c:	3510      	adds	r5, #16
 801213e:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 8012140:	3c10      	subs	r4, #16
 8012142:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8012144:	2c00      	cmp	r4, #0
 8012146:	d1f4      	bne.n	8012132 <SecureElementAesEncrypt+0x46>
 8012148:	e7e7      	b.n	801211a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 801214a:	f04f 0802 	mov.w	r8, #2
 801214e:	e7e4      	b.n	801211a <SecureElementAesEncrypt+0x2e>
 8012150:	f04f 0802 	mov.w	r8, #2
 8012154:	e7e1      	b.n	801211a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8012156:	f04f 0805 	mov.w	r8, #5
 801215a:	e7de      	b.n	801211a <SecureElementAesEncrypt+0x2e>

0801215c <SecureElementSetKey>:
{
 801215c:	b530      	push	{r4, r5, lr}
 801215e:	b085      	sub	sp, #20
    if( key == NULL )
 8012160:	2900      	cmp	r1, #0
 8012162:	d038      	beq.n	80121d6 <SecureElementSetKey+0x7a>
 8012164:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8012166:	2300      	movs	r3, #0
 8012168:	2b09      	cmp	r3, #9
 801216a:	d830      	bhi.n	80121ce <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 801216c:	4a1b      	ldr	r2, [pc, #108]	; (80121dc <SecureElementSetKey+0x80>)
 801216e:	6811      	ldr	r1, [r2, #0]
 8012170:	461c      	mov	r4, r3
 8012172:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8012176:	440a      	add	r2, r1
 8012178:	7c12      	ldrb	r2, [r2, #16]
 801217a:	4282      	cmp	r2, r0
 801217c:	d002      	beq.n	8012184 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801217e:	3301      	adds	r3, #1
 8012180:	b2db      	uxtb	r3, r3
 8012182:	e7f1      	b.n	8012168 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 8012184:	2880      	cmp	r0, #128	; 0x80
 8012186:	d00a      	beq.n	801219e <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8012188:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801218c:	3310      	adds	r3, #16
 801218e:	440b      	add	r3, r1
 8012190:	2210      	movs	r2, #16
 8012192:	4661      	mov	r1, ip
 8012194:	1c58      	adds	r0, r3, #1
 8012196:	f000 f8dc 	bl	8012352 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 801219a:	2500      	movs	r5, #0
 801219c:	e018      	b.n	80121d0 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 801219e:	2300      	movs	r3, #0
 80121a0:	9300      	str	r3, [sp, #0]
 80121a2:	9301      	str	r3, [sp, #4]
 80121a4:	9302      	str	r3, [sp, #8]
 80121a6:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80121a8:	466b      	mov	r3, sp
 80121aa:	227f      	movs	r2, #127	; 0x7f
 80121ac:	2110      	movs	r1, #16
 80121ae:	4660      	mov	r0, ip
 80121b0:	f7ff ff9c 	bl	80120ec <SecureElementAesEncrypt>
 80121b4:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80121b6:	4b09      	ldr	r3, [pc, #36]	; (80121dc <SecureElementSetKey+0x80>)
 80121b8:	6818      	ldr	r0, [r3, #0]
 80121ba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80121be:	3410      	adds	r4, #16
 80121c0:	4420      	add	r0, r4
 80121c2:	2210      	movs	r2, #16
 80121c4:	4669      	mov	r1, sp
 80121c6:	3001      	adds	r0, #1
 80121c8:	f000 f8c3 	bl	8012352 <memcpy1>
                return retval;
 80121cc:	e000      	b.n	80121d0 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80121ce:	2503      	movs	r5, #3
}
 80121d0:	4628      	mov	r0, r5
 80121d2:	b005      	add	sp, #20
 80121d4:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80121d6:	2502      	movs	r5, #2
 80121d8:	e7fa      	b.n	80121d0 <SecureElementSetKey+0x74>
 80121da:	bf00      	nop
 80121dc:	20003cac 	.word	0x20003cac

080121e0 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 80121e0:	b1d0      	cbz	r0, 8012218 <SecureElementDeriveAndStoreKey+0x38>
{
 80121e2:	b510      	push	{r4, lr}
 80121e4:	b084      	sub	sp, #16
 80121e6:	4614      	mov	r4, r2
 80121e8:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 80121ea:	2a7f      	cmp	r2, #127	; 0x7f
 80121ec:	d101      	bne.n	80121f2 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 80121ee:	2904      	cmp	r1, #4
 80121f0:	d114      	bne.n	801221c <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 80121f2:	2300      	movs	r3, #0
 80121f4:	9300      	str	r3, [sp, #0]
 80121f6:	9301      	str	r3, [sp, #4]
 80121f8:	9302      	str	r3, [sp, #8]
 80121fa:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 80121fc:	466b      	mov	r3, sp
 80121fe:	460a      	mov	r2, r1
 8012200:	2110      	movs	r1, #16
 8012202:	4660      	mov	r0, ip
 8012204:	f7ff ff72 	bl	80120ec <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012208:	b108      	cbz	r0, 801220e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801220a:	b004      	add	sp, #16
 801220c:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 801220e:	4669      	mov	r1, sp
 8012210:	4620      	mov	r0, r4
 8012212:	f7ff ffa3 	bl	801215c <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8012216:	e7f8      	b.n	801220a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8012218:	2002      	movs	r0, #2
}
 801221a:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801221c:	2003      	movs	r0, #3
 801221e:	e7f4      	b.n	801220a <SecureElementDeriveAndStoreKey+0x2a>

08012220 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8012220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012224:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8012228:	9d07      	ldr	r5, [sp, #28]
 801222a:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 801222c:	b37b      	cbz	r3, 801228e <SecureElementProcessJoinAccept+0x6e>
 801222e:	4698      	mov	r8, r3
 8012230:	b37d      	cbz	r5, 8012292 <SecureElementProcessJoinAccept+0x72>
 8012232:	b386      	cbz	r6, 8012296 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8012234:	2c21      	cmp	r4, #33	; 0x21
 8012236:	d830      	bhi.n	801229a <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8012238:	b2a7      	uxth	r7, r4
 801223a:	463a      	mov	r2, r7
 801223c:	4619      	mov	r1, r3
 801223e:	4628      	mov	r0, r5
 8012240:	f000 f887 	bl	8012352 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8012244:	1e79      	subs	r1, r7, #1
 8012246:	1c6b      	adds	r3, r5, #1
 8012248:	2201      	movs	r2, #1
 801224a:	b289      	uxth	r1, r1
 801224c:	eb08 0002 	add.w	r0, r8, r2
 8012250:	f7ff ff4c 	bl	80120ec <SecureElementAesEncrypt>
 8012254:	bb20      	cbnz	r0, 80122a0 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8012256:	7aeb      	ldrb	r3, [r5, #11]
 8012258:	09db      	lsrs	r3, r3, #7
 801225a:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 801225c:	442c      	add	r4, r5
 801225e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8012262:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8012266:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 801226a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801226e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8012272:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8012276:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 801227a:	b99b      	cbnz	r3, 80122a4 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 801227c:	1f39      	subs	r1, r7, #4
 801227e:	2301      	movs	r3, #1
 8012280:	b289      	uxth	r1, r1
 8012282:	4628      	mov	r0, r5
 8012284:	f7ff ff1c 	bl	80120c0 <SecureElementVerifyAesCmac>
 8012288:	b140      	cbz	r0, 801229c <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801228a:	2001      	movs	r0, #1
 801228c:	e006      	b.n	801229c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 801228e:	2002      	movs	r0, #2
 8012290:	e004      	b.n	801229c <SecureElementProcessJoinAccept+0x7c>
 8012292:	2002      	movs	r0, #2
 8012294:	e002      	b.n	801229c <SecureElementProcessJoinAccept+0x7c>
 8012296:	2002      	movs	r0, #2
 8012298:	e000      	b.n	801229c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801229a:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 801229c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 80122a0:	2007      	movs	r0, #7
 80122a2:	e7fb      	b.n	801229c <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80122a4:	2004      	movs	r0, #4
 80122a6:	e7f9      	b.n	801229c <SecureElementProcessJoinAccept+0x7c>

080122a8 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 80122a8:	b140      	cbz	r0, 80122bc <SecureElementSetDevEui+0x14>
{
 80122aa:	b508      	push	{r3, lr}
 80122ac:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 80122ae:	2208      	movs	r2, #8
 80122b0:	4b03      	ldr	r3, [pc, #12]	; (80122c0 <SecureElementSetDevEui+0x18>)
 80122b2:	6818      	ldr	r0, [r3, #0]
 80122b4:	f000 f84d 	bl	8012352 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80122b8:	2000      	movs	r0, #0
}
 80122ba:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80122bc:	2002      	movs	r0, #2
}
 80122be:	4770      	bx	lr
 80122c0:	20003cac 	.word	0x20003cac

080122c4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 80122c4:	4b01      	ldr	r3, [pc, #4]	; (80122cc <SecureElementGetDevEui+0x8>)
 80122c6:	6818      	ldr	r0, [r3, #0]
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop
 80122cc:	20003cac 	.word	0x20003cac

080122d0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 80122d0:	b148      	cbz	r0, 80122e6 <SecureElementSetJoinEui+0x16>
{
 80122d2:	b508      	push	{r3, lr}
 80122d4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 80122d6:	4b05      	ldr	r3, [pc, #20]	; (80122ec <SecureElementSetJoinEui+0x1c>)
 80122d8:	6818      	ldr	r0, [r3, #0]
 80122da:	2208      	movs	r2, #8
 80122dc:	4410      	add	r0, r2
 80122de:	f000 f838 	bl	8012352 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80122e2:	2000      	movs	r0, #0
}
 80122e4:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80122e6:	2002      	movs	r0, #2
}
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop
 80122ec:	20003cac 	.word	0x20003cac

080122f0 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 80122f0:	4b01      	ldr	r3, [pc, #4]	; (80122f8 <SecureElementGetJoinEui+0x8>)
 80122f2:	6818      	ldr	r0, [r3, #0]
}
 80122f4:	3008      	adds	r0, #8
 80122f6:	4770      	bx	lr
 80122f8:	20003cac 	.word	0x20003cac

080122fc <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80122fc:	4b09      	ldr	r3, [pc, #36]	; (8012324 <rand1+0x28>)
 80122fe:	681a      	ldr	r2, [r3, #0]
 8012300:	4909      	ldr	r1, [pc, #36]	; (8012328 <rand1+0x2c>)
 8012302:	f243 0039 	movw	r0, #12345	; 0x3039
 8012306:	fb01 0002 	mla	r0, r1, r2, r0
 801230a:	6018      	str	r0, [r3, #0]
 801230c:	2303      	movs	r3, #3
 801230e:	fba3 2300 	umull	r2, r3, r3, r0
 8012312:	1ac2      	subs	r2, r0, r3
 8012314:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012318:	0f9b      	lsrs	r3, r3, #30
 801231a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 801231e:	1ac0      	subs	r0, r0, r3
 8012320:	4770      	bx	lr
 8012322:	bf00      	nop
 8012324:	2000010c 	.word	0x2000010c
 8012328:	41c64e6d 	.word	0x41c64e6d

0801232c <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 801232c:	4b01      	ldr	r3, [pc, #4]	; (8012334 <srand1+0x8>)
 801232e:	6018      	str	r0, [r3, #0]
}
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
 8012334:	2000010c 	.word	0x2000010c

08012338 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8012338:	b538      	push	{r3, r4, r5, lr}
 801233a:	4605      	mov	r5, r0
 801233c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801233e:	f7ff ffdd 	bl	80122fc <rand1>
 8012342:	1b61      	subs	r1, r4, r5
 8012344:	3101      	adds	r1, #1
 8012346:	fb90 f3f1 	sdiv	r3, r0, r1
 801234a:	fb01 0013 	mls	r0, r1, r3, r0
}
 801234e:	4428      	add	r0, r5
 8012350:	bd38      	pop	{r3, r4, r5, pc}

08012352 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8012352:	e004      	b.n	801235e <memcpy1+0xc>
    {
        *dst++ = *src++;
 8012354:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012358:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801235c:	461a      	mov	r2, r3
 801235e:	1e53      	subs	r3, r2, #1
 8012360:	b29b      	uxth	r3, r3
 8012362:	2a00      	cmp	r2, #0
 8012364:	d1f6      	bne.n	8012354 <memcpy1+0x2>
    }
}
 8012366:	4770      	bx	lr

08012368 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8012368:	1e53      	subs	r3, r2, #1
 801236a:	4418      	add	r0, r3
    while( size-- )
 801236c:	e004      	b.n	8012378 <memcpyr+0x10>
    {
        *dst-- = *src++;
 801236e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012372:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8012376:	461a      	mov	r2, r3
 8012378:	1e53      	subs	r3, r2, #1
 801237a:	b29b      	uxth	r3, r3
 801237c:	2a00      	cmp	r2, #0
 801237e:	d1f6      	bne.n	801236e <memcpyr+0x6>
    }
}
 8012380:	4770      	bx	lr

08012382 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8012382:	e002      	b.n	801238a <memset1+0x8>
    {
        *dst++ = value;
 8012384:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8012388:	461a      	mov	r2, r3
 801238a:	1e53      	subs	r3, r2, #1
 801238c:	b29b      	uxth	r3, r3
 801238e:	2a00      	cmp	r2, #0
 8012390:	d1f8      	bne.n	8012384 <memset1+0x2>
    }
}
 8012392:	4770      	bx	lr

08012394 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8012394:	b1f0      	cbz	r0, 80123d4 <Crc32+0x40>
{
 8012396:	b510      	push	{r4, lr}
 8012398:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 801239a:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 801239e:	f04f 30ff 	mov.w	r0, #4294967295
 80123a2:	e00e      	b.n	80123c2 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80123a4:	f340 0c00 	sbfx	ip, r0, #0, #1
 80123a8:	4a0b      	ldr	r2, [pc, #44]	; (80123d8 <Crc32+0x44>)
 80123aa:	ea0c 0202 	and.w	r2, ip, r2
 80123ae:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 80123b2:	3301      	adds	r3, #1
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	2b07      	cmp	r3, #7
 80123b8:	d9f4      	bls.n	80123a4 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 80123ba:	f10e 0e01 	add.w	lr, lr, #1
 80123be:	fa1f fe8e 	uxth.w	lr, lr
 80123c2:	458e      	cmp	lr, r1
 80123c4:	d204      	bcs.n	80123d0 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 80123c6:	f814 300e 	ldrb.w	r3, [r4, lr]
 80123ca:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 80123cc:	2300      	movs	r3, #0
 80123ce:	e7f2      	b.n	80123b6 <Crc32+0x22>
        }
    }

    return ~crc;
 80123d0:	43c0      	mvns	r0, r0
}
 80123d2:	bd10      	pop	{r4, pc}
        return 0;
 80123d4:	2000      	movs	r0, #0
}
 80123d6:	4770      	bx	lr
 80123d8:	edb88320 	.word	0xedb88320

080123dc <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 80123dc:	2001      	movs	r0, #1
 80123de:	4770      	bx	lr

080123e0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 80123e0:	280a      	cmp	r0, #10
 80123e2:	d807      	bhi.n	80123f4 <RadioGetLoRaBandwidthInHz+0x14>
 80123e4:	e8df f000 	tbb	[pc, r0]
 80123e8:	17110b20 	.word	0x17110b20
 80123ec:	061e1c1a 	.word	0x061e1c1a
 80123f0:	0e08      	.short	0x0e08
 80123f2:	14          	.byte	0x14
 80123f3:	00          	.byte	0x00
 80123f4:	2000      	movs	r0, #0
 80123f6:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80123f8:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 80123fc:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80123fe:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8012402:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8012404:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8012408:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801240a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 801240e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8012410:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8012414:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8012416:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 801241a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801241c:	4804      	ldr	r0, [pc, #16]	; (8012430 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801241e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8012420:	4804      	ldr	r0, [pc, #16]	; (8012434 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8012422:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8012424:	4804      	ldr	r0, [pc, #16]	; (8012438 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8012426:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8012428:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	0001e848 	.word	0x0001e848
 8012434:	0003d090 	.word	0x0003d090
 8012438:	0007a120 	.word	0x0007a120

0801243c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801243c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8012440:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012442:	b953      	cbnz	r3, 801245a <RadioGetGfskTimeOnAirNumerator+0x1e>
 8012444:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8012446:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8012448:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801244a:	b141      	cbz	r1, 801245e <RadioGetGfskTimeOnAirNumerator+0x22>
 801244c:	2302      	movs	r3, #2
 801244e:	f89d 0000 	ldrb.w	r0, [sp]
 8012452:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8012454:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8012458:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801245a:	2000      	movs	r0, #0
 801245c:	e7f3      	b.n	8012446 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801245e:	2300      	movs	r3, #0
 8012460:	e7f5      	b.n	801244e <RadioGetGfskTimeOnAirNumerator+0x12>

08012462 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8012462:	b570      	push	{r4, r5, r6, lr}
 8012464:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8012468:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 801246c:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801246e:	f1a1 0c05 	sub.w	ip, r1, #5
 8012472:	f1bc 0f01 	cmp.w	ip, #1
 8012476:	d932      	bls.n	80124de <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012478:	b918      	cbnz	r0, 8012482 <RadioGetLoRaTimeOnAirNumerator+0x20>
 801247a:	f1a1 060b 	sub.w	r6, r1, #11
 801247e:	2e01      	cmp	r6, #1
 8012480:	d935      	bls.n	80124ee <RadioGetLoRaTimeOnAirNumerator+0x8c>
 8012482:	2801      	cmp	r0, #1
 8012484:	d02f      	beq.n	80124e6 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 8012486:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012488:	f89d e014 	ldrb.w	lr, [sp, #20]
 801248c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8012490:	b38d      	cbz	r5, 80124f6 <RadioGetLoRaTimeOnAirNumerator+0x94>
 8012492:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8012496:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8012498:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 801249a:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 801249e:	b36c      	cbz	r4, 80124fc <RadioGetLoRaTimeOnAirNumerator+0x9a>
 80124a0:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 80124a4:	44f4      	add	ip, lr

    if( datarate <= 6 )
 80124a6:	2906      	cmp	r1, #6
 80124a8:	d904      	bls.n	80124b4 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 80124aa:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 80124ae:	b10e      	cbz	r6, 80124b4 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80124b0:	1e88      	subs	r0, r1, #2
 80124b2:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 80124b4:	f1bc 0f00 	cmp.w	ip, #0
 80124b8:	db23      	blt.n	8012502 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80124ba:	4484      	add	ip, r0
 80124bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80124c0:	fb9c fcf0 	sdiv	ip, ip, r0
 80124c4:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 80124c8:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 80124cc:	2906      	cmp	r1, #6
 80124ce:	d801      	bhi.n	80124d4 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 80124d0:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80124d4:	0080      	lsls	r0, r0, #2
 80124d6:	3001      	adds	r0, #1
 80124d8:	3902      	subs	r1, #2
}
 80124da:	4088      	lsls	r0, r1
 80124dc:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 80124de:	2b0b      	cmp	r3, #11
 80124e0:	d8ca      	bhi.n	8012478 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 80124e2:	230c      	movs	r3, #12
 80124e4:	e7c8      	b.n	8012478 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80124e6:	290c      	cmp	r1, #12
 80124e8:	d003      	beq.n	80124f2 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 80124ea:	2600      	movs	r6, #0
 80124ec:	e7cc      	b.n	8012488 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 80124ee:	2601      	movs	r6, #1
 80124f0:	e7ca      	b.n	8012488 <RadioGetLoRaTimeOnAirNumerator+0x26>
 80124f2:	2601      	movs	r6, #1
 80124f4:	e7c8      	b.n	8012488 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 80124f6:	f04f 0c00 	mov.w	ip, #0
 80124fa:	e7cc      	b.n	8012496 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 80124fc:	f04f 0c14 	mov.w	ip, #20
 8012500:	e7d0      	b.n	80124a4 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8012502:	f04f 0c00 	mov.w	ip, #0
 8012506:	e7d8      	b.n	80124ba <RadioGetLoRaTimeOnAirNumerator+0x58>

08012508 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8012508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801250a:	b085      	sub	sp, #20
 801250c:	460e      	mov	r6, r1
 801250e:	4615      	mov	r5, r2
 8012510:	4619      	mov	r1, r3
 8012512:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8012516:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801251a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801251e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8012522:	b148      	cbz	r0, 8012538 <RadioTimeOnAir+0x30>
 8012524:	2801      	cmp	r0, #1
 8012526:	d012      	beq.n	801254e <RadioTimeOnAir+0x46>
 8012528:	2501      	movs	r5, #1
 801252a:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801252c:	442c      	add	r4, r5
 801252e:	1e60      	subs	r0, r4, #1
}
 8012530:	fbb0 f0f5 	udiv	r0, r0, r5
 8012534:	b005      	add	sp, #20
 8012536:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8012538:	f8cd c004 	str.w	ip, [sp, #4]
 801253c:	9700      	str	r7, [sp, #0]
 801253e:	4628      	mov	r0, r5
 8012540:	f7ff ff7c 	bl	801243c <RadioGetGfskTimeOnAirNumerator>
 8012544:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8012548:	fb00 f404 	mul.w	r4, r0, r4
        break;
 801254c:	e7ee      	b.n	801252c <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801254e:	f8cd c008 	str.w	ip, [sp, #8]
 8012552:	9701      	str	r7, [sp, #4]
 8012554:	9300      	str	r3, [sp, #0]
 8012556:	4613      	mov	r3, r2
 8012558:	460a      	mov	r2, r1
 801255a:	4629      	mov	r1, r5
 801255c:	4630      	mov	r0, r6
 801255e:	f7ff ff80 	bl	8012462 <RadioGetLoRaTimeOnAirNumerator>
 8012562:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8012566:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801256a:	4b03      	ldr	r3, [pc, #12]	; (8012578 <RadioTimeOnAir+0x70>)
 801256c:	5d98      	ldrb	r0, [r3, r6]
 801256e:	f7ff ff37 	bl	80123e0 <RadioGetLoRaBandwidthInHz>
 8012572:	4605      	mov	r5, r0
        break;
 8012574:	e7da      	b.n	801252c <RadioTimeOnAir+0x24>
 8012576:	bf00      	nop
 8012578:	08015a8c 	.word	0x08015a8c

0801257c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 801257c:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801257e:	4b05      	ldr	r3, [pc, #20]	; (8012594 <RadioOnTxTimeoutProcess+0x18>)
 8012580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012584:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8012586:	4b04      	ldr	r3, [pc, #16]	; (8012598 <RadioOnTxTimeoutProcess+0x1c>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	b113      	cbz	r3, 8012592 <RadioOnTxTimeoutProcess+0x16>
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	b103      	cbz	r3, 8012592 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8012590:	4798      	blx	r3
    }
}
 8012592:	bd08      	pop	{r3, pc}
 8012594:	48000400 	.word	0x48000400
 8012598:	20003db0 	.word	0x20003db0

0801259c <RadioOnTxTimeoutIrq>:
{
 801259c:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 801259e:	f7ff ffed 	bl	801257c <RadioOnTxTimeoutProcess>
}
 80125a2:	bd08      	pop	{r3, pc}

080125a4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80125a4:	b508      	push	{r3, lr}
 80125a6:	4b05      	ldr	r3, [pc, #20]	; (80125bc <RadioOnRxTimeoutProcess+0x18>)
 80125a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80125ac:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80125ae:	4b04      	ldr	r3, [pc, #16]	; (80125c0 <RadioOnRxTimeoutProcess+0x1c>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	b113      	cbz	r3, 80125ba <RadioOnRxTimeoutProcess+0x16>
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	b103      	cbz	r3, 80125ba <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 80125b8:	4798      	blx	r3
    }
}
 80125ba:	bd08      	pop	{r3, pc}
 80125bc:	48000400 	.word	0x48000400
 80125c0:	20003db0 	.word	0x20003db0

080125c4 <RadioOnRxTimeoutIrq>:
{
 80125c4:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80125c6:	f7ff ffed 	bl	80125a4 <RadioOnRxTimeoutProcess>
}
 80125ca:	bd08      	pop	{r3, pc}

080125cc <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80125cc:	f04f 30ff 	mov.w	r0, #4294967295
 80125d0:	4770      	bx	lr

080125d2 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80125d2:	f04f 30ff 	mov.w	r0, #4294967295
 80125d6:	4770      	bx	lr

080125d8 <RadioTxCw>:
{
 80125d8:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80125da:	f001 fbab 	bl	8013d34 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80125de:	2101      	movs	r1, #1
 80125e0:	f001 fb94 	bl	8013d0c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80125e4:	f000 feac 	bl	8013340 <SUBGRF_SetTxContinuousWave>
}
 80125e8:	bd08      	pop	{r3, pc}
	...

080125ec <RadioSetRxDutyCycle>:
{
 80125ec:	b570      	push	{r4, r5, r6, lr}
 80125ee:	4604      	mov	r4, r0
 80125f0:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80125f2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80125f6:	4e09      	ldr	r6, [pc, #36]	; (801261c <RadioSetRxDutyCycle+0x30>)
 80125f8:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80125fa:	2300      	movs	r3, #0
 80125fc:	461a      	mov	r2, r3
 80125fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012602:	4608      	mov	r0, r1
 8012604:	f000 ff47 	bl	8013496 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012608:	2100      	movs	r1, #0
 801260a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801260e:	f001 fb7d 	bl	8013d0c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8012612:	4629      	mov	r1, r5
 8012614:	4620      	mov	r0, r4
 8012616:	f000 fe63 	bl	80132e0 <SUBGRF_SetRxDutyCycle>
}
 801261a:	bd70      	pop	{r4, r5, r6, pc}
 801261c:	20003dcc 	.word	0x20003dcc

08012620 <RadioRxBoosted>:
{
 8012620:	b538      	push	{r3, r4, r5, lr}
 8012622:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8012624:	f001 fc57 	bl	8013ed6 <RFW_Is_Init>
 8012628:	2801      	cmp	r0, #1
 801262a:	d019      	beq.n	8012660 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801262c:	2300      	movs	r3, #0
 801262e:	461a      	mov	r2, r3
 8012630:	f240 2162 	movw	r1, #610	; 0x262
 8012634:	4608      	mov	r0, r1
 8012636:	f000 ff2e 	bl	8013496 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801263a:	b9a4      	cbnz	r4, 8012666 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801263c:	4c11      	ldr	r4, [pc, #68]	; (8012684 <RadioRxBoosted+0x64>)
 801263e:	2100      	movs	r1, #0
 8012640:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8012642:	4b11      	ldr	r3, [pc, #68]	; (8012688 <RadioRxBoosted+0x68>)
 8012644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012648:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801264a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801264e:	f001 fb5d 	bl	8013d0c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8012652:	7863      	ldrb	r3, [r4, #1]
 8012654:	b183      	cbz	r3, 8012678 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8012656:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801265a:	f000 ffef 	bl	801363c <SUBGRF_SetRxBoosted>
}
 801265e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8012660:	f001 fc41 	bl	8013ee6 <RFW_ReceiveInit>
 8012664:	e7e9      	b.n	801263a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8012666:	4d09      	ldr	r5, [pc, #36]	; (801268c <RadioRxBoosted+0x6c>)
 8012668:	4621      	mov	r1, r4
 801266a:	4628      	mov	r0, r5
 801266c:	f002 f832 	bl	80146d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8012670:	4628      	mov	r0, r5
 8012672:	f001 ffe9 	bl	8014648 <UTIL_TIMER_Start>
 8012676:	e7e1      	b.n	801263c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8012678:	4b02      	ldr	r3, [pc, #8]	; (8012684 <RadioRxBoosted+0x64>)
 801267a:	6898      	ldr	r0, [r3, #8]
 801267c:	0180      	lsls	r0, r0, #6
 801267e:	f000 ffdd 	bl	801363c <SUBGRF_SetRxBoosted>
}
 8012682:	e7ec      	b.n	801265e <RadioRxBoosted+0x3e>
 8012684:	20003dcc 	.word	0x20003dcc
 8012688:	48000400 	.word	0x48000400
 801268c:	20003db4 	.word	0x20003db4

08012690 <RadioStandby>:
{
 8012690:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8012692:	2000      	movs	r0, #0
 8012694:	f000 fdd6 	bl	8013244 <SUBGRF_SetStandby>
}
 8012698:	bd08      	pop	{r3, pc}

0801269a <RadioWrite>:
{
 801269a:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801269c:	f000 ffbe 	bl	801361c <SUBGRF_WriteRegister>
}
 80126a0:	bd08      	pop	{r3, pc}
	...

080126a4 <RadioTxPrbs>:
{
 80126a4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80126a6:	2101      	movs	r1, #1
 80126a8:	4b07      	ldr	r3, [pc, #28]	; (80126c8 <RadioTxPrbs+0x24>)
 80126aa:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80126ae:	f001 fb2d 	bl	8013d0c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80126b2:	212d      	movs	r1, #45	; 0x2d
 80126b4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80126b8:	f7ff ffef 	bl	801269a <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80126bc:	f000 fe47 	bl	801334e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80126c0:	4802      	ldr	r0, [pc, #8]	; (80126cc <RadioTxPrbs+0x28>)
 80126c2:	f000 fdd9 	bl	8013278 <SUBGRF_SetTx>
}
 80126c6:	bd08      	pop	{r3, pc}
 80126c8:	20003dcc 	.word	0x20003dcc
 80126cc:	000fffff 	.word	0x000fffff

080126d0 <RadioRead>:
{
 80126d0:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80126d2:	f001 f895 	bl	8013800 <SUBGRF_ReadRegister>
}
 80126d6:	bd08      	pop	{r3, pc}

080126d8 <RadioGetStatus>:
{
 80126d8:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80126da:	f000 fdad 	bl	8013238 <SUBGRF_GetOperatingMode>
 80126de:	2805      	cmp	r0, #5
 80126e0:	d007      	beq.n	80126f2 <RadioGetStatus+0x1a>
 80126e2:	2807      	cmp	r0, #7
 80126e4:	d007      	beq.n	80126f6 <RadioGetStatus+0x1e>
 80126e6:	2804      	cmp	r0, #4
 80126e8:	d001      	beq.n	80126ee <RadioGetStatus+0x16>
            return RF_IDLE;
 80126ea:	2000      	movs	r0, #0
}
 80126ec:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80126ee:	2002      	movs	r0, #2
 80126f0:	e7fc      	b.n	80126ec <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80126f2:	2001      	movs	r0, #1
 80126f4:	e7fa      	b.n	80126ec <RadioGetStatus+0x14>
            return RF_CAD;
 80126f6:	2003      	movs	r0, #3
 80126f8:	e7f8      	b.n	80126ec <RadioGetStatus+0x14>
	...

080126fc <RadioIrqProcess>:
{
 80126fc:	b530      	push	{r4, r5, lr}
 80126fe:	b083      	sub	sp, #12
    uint8_t size = 0;
 8012700:	2300      	movs	r3, #0
 8012702:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8012706:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8012708:	4ba5      	ldr	r3, [pc, #660]	; (80129a0 <RadioIrqProcess+0x2a4>)
 801270a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801270e:	2b20      	cmp	r3, #32
 8012710:	d829      	bhi.n	8012766 <RadioIrqProcess+0x6a>
 8012712:	b21a      	sxth	r2, r3
 8012714:	2a00      	cmp	r2, #0
 8012716:	f000 8140 	beq.w	801299a <RadioIrqProcess+0x29e>
 801271a:	3b01      	subs	r3, #1
 801271c:	2b1f      	cmp	r3, #31
 801271e:	f200 813c 	bhi.w	801299a <RadioIrqProcess+0x29e>
 8012722:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012726:	0063      	.short	0x0063
 8012728:	013a007f 	.word	0x013a007f
 801272c:	013a00f7 	.word	0x013a00f7
 8012730:	013a013a 	.word	0x013a013a
 8012734:	013a0127 	.word	0x013a0127
 8012738:	013a013a 	.word	0x013a013a
 801273c:	013a013a 	.word	0x013a013a
 8012740:	013a013a 	.word	0x013a013a
 8012744:	013a0134 	.word	0x013a0134
 8012748:	013a013a 	.word	0x013a013a
 801274c:	013a013a 	.word	0x013a013a
 8012750:	013a013a 	.word	0x013a013a
 8012754:	013a013a 	.word	0x013a013a
 8012758:	013a013a 	.word	0x013a013a
 801275c:	013a013a 	.word	0x013a013a
 8012760:	013a013a 	.word	0x013a013a
 8012764:	0155      	.short	0x0155
 8012766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801276a:	f000 80b3 	beq.w	80128d4 <RadioIrqProcess+0x1d8>
 801276e:	d928      	bls.n	80127c2 <RadioIrqProcess+0xc6>
 8012770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012774:	f040 8111 	bne.w	801299a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8012778:	4b8a      	ldr	r3, [pc, #552]	; (80129a4 <RadioIrqProcess+0x2a8>)
 801277a:	2201      	movs	r2, #1
 801277c:	2100      	movs	r1, #0
 801277e:	2002      	movs	r0, #2
 8012780:	f001 fc90 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8012784:	f000 fd58 	bl	8013238 <SUBGRF_GetOperatingMode>
 8012788:	2804      	cmp	r0, #4
 801278a:	f000 80b0 	beq.w	80128ee <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801278e:	f000 fd53 	bl	8013238 <SUBGRF_GetOperatingMode>
 8012792:	2805      	cmp	r0, #5
 8012794:	f040 8101 	bne.w	801299a <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8012798:	4b83      	ldr	r3, [pc, #524]	; (80129a8 <RadioIrqProcess+0x2ac>)
 801279a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801279e:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 80127a0:	4882      	ldr	r0, [pc, #520]	; (80129ac <RadioIrqProcess+0x2b0>)
 80127a2:	f001 fef7 	bl	8014594 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80127a6:	2000      	movs	r0, #0
 80127a8:	f000 fd4c 	bl	8013244 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80127ac:	4b80      	ldr	r3, [pc, #512]	; (80129b0 <RadioIrqProcess+0x2b4>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f000 80f2 	beq.w	801299a <RadioIrqProcess+0x29e>
 80127b6:	68db      	ldr	r3, [r3, #12]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f000 80ee 	beq.w	801299a <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 80127be:	4798      	blx	r3
 80127c0:	e0eb      	b.n	801299a <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 80127c2:	2b40      	cmp	r3, #64	; 0x40
 80127c4:	f000 811d 	beq.w	8012a02 <RadioIrqProcess+0x306>
 80127c8:	2b80      	cmp	r3, #128	; 0x80
 80127ca:	f040 80e6 	bne.w	801299a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80127ce:	2000      	movs	r0, #0
 80127d0:	f000 fd38 	bl	8013244 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80127d4:	4b76      	ldr	r3, [pc, #472]	; (80129b0 <RadioIrqProcess+0x2b4>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 80de 	beq.w	801299a <RadioIrqProcess+0x29e>
 80127de:	699b      	ldr	r3, [r3, #24]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	f000 80da 	beq.w	801299a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 80127e6:	2000      	movs	r0, #0
 80127e8:	4798      	blx	r3
 80127ea:	e0d6      	b.n	801299a <RadioIrqProcess+0x29e>
 80127ec:	4b6e      	ldr	r3, [pc, #440]	; (80129a8 <RadioIrqProcess+0x2ac>)
 80127ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80127f2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80127f4:	486f      	ldr	r0, [pc, #444]	; (80129b4 <RadioIrqProcess+0x2b8>)
 80127f6:	f001 fecd 	bl	8014594 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80127fa:	2000      	movs	r0, #0
 80127fc:	f000 fd22 	bl	8013244 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8012800:	f001 fb6b 	bl	8013eda <RFW_Is_LongPacketModeEnabled>
 8012804:	2801      	cmp	r0, #1
 8012806:	d00a      	beq.n	801281e <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8012808:	4b69      	ldr	r3, [pc, #420]	; (80129b0 <RadioIrqProcess+0x2b4>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	2b00      	cmp	r3, #0
 801280e:	f000 80c4 	beq.w	801299a <RadioIrqProcess+0x29e>
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	f000 80c0 	beq.w	801299a <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 801281a:	4798      	blx	r3
 801281c:	e0bd      	b.n	801299a <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 801281e:	f001 fb65 	bl	8013eec <RFW_DeInit_TxLongPacket>
 8012822:	e7f1      	b.n	8012808 <RadioIrqProcess+0x10c>
 8012824:	4b60      	ldr	r3, [pc, #384]	; (80129a8 <RadioIrqProcess+0x2ac>)
 8012826:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801282a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 801282c:	485f      	ldr	r0, [pc, #380]	; (80129ac <RadioIrqProcess+0x2b0>)
 801282e:	f001 feb1 	bl	8014594 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8012832:	4b5b      	ldr	r3, [pc, #364]	; (80129a0 <RadioIrqProcess+0x2a4>)
 8012834:	785b      	ldrb	r3, [r3, #1]
 8012836:	b303      	cbz	r3, 801287a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8012838:	22ff      	movs	r2, #255	; 0xff
 801283a:	f10d 0107 	add.w	r1, sp, #7
 801283e:	485e      	ldr	r0, [pc, #376]	; (80129b8 <RadioIrqProcess+0x2bc>)
 8012840:	f001 fa4a 	bl	8013cd8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8012844:	485d      	ldr	r0, [pc, #372]	; (80129bc <RadioIrqProcess+0x2c0>)
 8012846:	f000 fead 	bl	80135a4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801284a:	4b59      	ldr	r3, [pc, #356]	; (80129b0 <RadioIrqProcess+0x2b4>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	f000 80a3 	beq.w	801299a <RadioIrqProcess+0x29e>
 8012854:	689c      	ldr	r4, [r3, #8]
 8012856:	2c00      	cmp	r4, #0
 8012858:	f000 809f 	beq.w	801299a <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 801285c:	4b50      	ldr	r3, [pc, #320]	; (80129a0 <RadioIrqProcess+0x2a4>)
 801285e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012862:	2b01      	cmp	r3, #1
 8012864:	d11d      	bne.n	80128a2 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8012866:	4a4e      	ldr	r2, [pc, #312]	; (80129a0 <RadioIrqProcess+0x2a4>)
 8012868:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 801286c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8012870:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012874:	4850      	ldr	r0, [pc, #320]	; (80129b8 <RadioIrqProcess+0x2bc>)
 8012876:	47a0      	blx	r4
                break;
 8012878:	e08f      	b.n	801299a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 801287a:	2000      	movs	r0, #0
 801287c:	f000 fce2 	bl	8013244 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8012880:	2100      	movs	r1, #0
 8012882:	f640 1002 	movw	r0, #2306	; 0x902
 8012886:	f000 fec9 	bl	801361c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801288a:	f640 1044 	movw	r0, #2372	; 0x944
 801288e:	f000 ffb7 	bl	8013800 <SUBGRF_ReadRegister>
 8012892:	f040 0102 	orr.w	r1, r0, #2
 8012896:	b2c9      	uxtb	r1, r1
 8012898:	f640 1044 	movw	r0, #2372	; 0x944
 801289c:	f000 febe 	bl	801361c <SUBGRF_WriteRegister>
 80128a0:	e7ca      	b.n	8012838 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80128a2:	4c3f      	ldr	r4, [pc, #252]	; (80129a0 <RadioIrqProcess+0x2a4>)
 80128a4:	4669      	mov	r1, sp
 80128a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80128a8:	f001 faca 	bl	8013e40 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80128ac:	4b40      	ldr	r3, [pc, #256]	; (80129b0 <RadioIrqProcess+0x2b4>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	689d      	ldr	r5, [r3, #8]
 80128b2:	9b00      	ldr	r3, [sp, #0]
 80128b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80128b8:	4a41      	ldr	r2, [pc, #260]	; (80129c0 <RadioIrqProcess+0x2c4>)
 80128ba:	fb82 1203 	smull	r1, r2, r2, r3
 80128be:	17db      	asrs	r3, r3, #31
 80128c0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80128c4:	b25b      	sxtb	r3, r3
 80128c6:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 80128ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80128ce:	483a      	ldr	r0, [pc, #232]	; (80129b8 <RadioIrqProcess+0x2bc>)
 80128d0:	47a8      	blx	r5
                break;
 80128d2:	e062      	b.n	801299a <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 80128d4:	2000      	movs	r0, #0
 80128d6:	f000 fcb5 	bl	8013244 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80128da:	4b35      	ldr	r3, [pc, #212]	; (80129b0 <RadioIrqProcess+0x2b4>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d05b      	beq.n	801299a <RadioIrqProcess+0x29e>
 80128e2:	699b      	ldr	r3, [r3, #24]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d058      	beq.n	801299a <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 80128e8:	2001      	movs	r0, #1
 80128ea:	4798      	blx	r3
 80128ec:	e055      	b.n	801299a <RadioIrqProcess+0x29e>
 80128ee:	4b2e      	ldr	r3, [pc, #184]	; (80129a8 <RadioIrqProcess+0x2ac>)
 80128f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80128f4:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 80128f6:	482f      	ldr	r0, [pc, #188]	; (80129b4 <RadioIrqProcess+0x2b8>)
 80128f8:	f001 fe4c 	bl	8014594 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80128fc:	2000      	movs	r0, #0
 80128fe:	f000 fca1 	bl	8013244 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8012902:	4b2b      	ldr	r3, [pc, #172]	; (80129b0 <RadioIrqProcess+0x2b4>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d047      	beq.n	801299a <RadioIrqProcess+0x29e>
 801290a:	685b      	ldr	r3, [r3, #4]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d044      	beq.n	801299a <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8012910:	4798      	blx	r3
 8012912:	e042      	b.n	801299a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8012914:	4b2b      	ldr	r3, [pc, #172]	; (80129c4 <RadioIrqProcess+0x2c8>)
 8012916:	2201      	movs	r2, #1
 8012918:	2100      	movs	r1, #0
 801291a:	2002      	movs	r0, #2
 801291c:	f001 fbc2 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8012920:	4b1f      	ldr	r3, [pc, #124]	; (80129a0 <RadioIrqProcess+0x2a4>)
 8012922:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012924:	b3c9      	cbz	r1, 801299a <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8012926:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801292a:	f640 1003 	movw	r0, #2307	; 0x903
 801292e:	f7ff feb4 	bl	801269a <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8012932:	4c1b      	ldr	r4, [pc, #108]	; (80129a0 <RadioIrqProcess+0x2a4>)
 8012934:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8012938:	f640 1004 	movw	r0, #2308	; 0x904
 801293c:	f7ff fead 	bl	801269a <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8012940:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8012944:	f640 1005 	movw	r0, #2309	; 0x905
 8012948:	f7ff fea7 	bl	801269a <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801294c:	f640 1002 	movw	r0, #2306	; 0x902
 8012950:	f7ff febe 	bl	80126d0 <RadioRead>
 8012954:	f040 0101 	orr.w	r1, r0, #1
 8012958:	b2c9      	uxtb	r1, r1
 801295a:	f640 1002 	movw	r0, #2306	; 0x902
 801295e:	f7ff fe9c 	bl	801269a <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8012962:	2200      	movs	r2, #0
 8012964:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8012966:	4613      	mov	r3, r2
 8012968:	f240 2162 	movw	r1, #610	; 0x262
 801296c:	4608      	mov	r0, r1
 801296e:	f000 fd92 	bl	8013496 <SUBGRF_SetDioIrqParams>
 8012972:	e012      	b.n	801299a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8012974:	4b14      	ldr	r3, [pc, #80]	; (80129c8 <RadioIrqProcess+0x2cc>)
 8012976:	2201      	movs	r2, #1
 8012978:	2100      	movs	r1, #0
 801297a:	2002      	movs	r0, #2
 801297c:	f001 fb92 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8012980:	f001 faa9 	bl	8013ed6 <RFW_Is_Init>
 8012984:	2801      	cmp	r0, #1
 8012986:	d108      	bne.n	801299a <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8012988:	f001 fab1 	bl	8013eee <RFW_ReceivePayload>
 801298c:	e005      	b.n	801299a <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801298e:	4b0f      	ldr	r3, [pc, #60]	; (80129cc <RadioIrqProcess+0x2d0>)
 8012990:	2201      	movs	r2, #1
 8012992:	2100      	movs	r1, #0
 8012994:	2002      	movs	r0, #2
 8012996:	f001 fb85 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
}
 801299a:	b003      	add	sp, #12
 801299c:	bd30      	pop	{r4, r5, pc}
 801299e:	bf00      	nop
 80129a0:	20003dcc 	.word	0x20003dcc
 80129a4:	08015a20 	.word	0x08015a20
 80129a8:	48000400 	.word	0x48000400
 80129ac:	20003db4 	.word	0x20003db4
 80129b0:	20003db0 	.word	0x20003db0
 80129b4:	20003e28 	.word	0x20003e28
 80129b8:	20003cb0 	.word	0x20003cb0
 80129bc:	20003df0 	.word	0x20003df0
 80129c0:	10624dd3 	.word	0x10624dd3
 80129c4:	08015a34 	.word	0x08015a34
 80129c8:	08015a40 	.word	0x08015a40
 80129cc:	08015a4c 	.word	0x08015a4c
        TimerStop( &RxTimeoutTimer );
 80129d0:	4817      	ldr	r0, [pc, #92]	; (8012a30 <RadioIrqProcess+0x334>)
 80129d2:	f001 fddf 	bl	8014594 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80129d6:	4b17      	ldr	r3, [pc, #92]	; (8012a34 <RadioIrqProcess+0x338>)
 80129d8:	785b      	ldrb	r3, [r3, #1]
 80129da:	b173      	cbz	r3, 80129fa <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80129dc:	4b16      	ldr	r3, [pc, #88]	; (8012a38 <RadioIrqProcess+0x33c>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d0da      	beq.n	801299a <RadioIrqProcess+0x29e>
 80129e4:	68db      	ldr	r3, [r3, #12]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d0d7      	beq.n	801299a <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 80129ea:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80129ec:	4b13      	ldr	r3, [pc, #76]	; (8012a3c <RadioIrqProcess+0x340>)
 80129ee:	2201      	movs	r2, #1
 80129f0:	2100      	movs	r1, #0
 80129f2:	2002      	movs	r0, #2
 80129f4:	f001 fb56 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
 80129f8:	e7cf      	b.n	801299a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80129fa:	2000      	movs	r0, #0
 80129fc:	f000 fc22 	bl	8013244 <SUBGRF_SetStandby>
 8012a00:	e7ec      	b.n	80129dc <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8012a02:	4b0f      	ldr	r3, [pc, #60]	; (8012a40 <RadioIrqProcess+0x344>)
 8012a04:	2201      	movs	r2, #1
 8012a06:	2100      	movs	r1, #0
 8012a08:	2002      	movs	r0, #2
 8012a0a:	f001 fb4b 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8012a0e:	4b09      	ldr	r3, [pc, #36]	; (8012a34 <RadioIrqProcess+0x338>)
 8012a10:	785b      	ldrb	r3, [r3, #1]
 8012a12:	b143      	cbz	r3, 8012a26 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8012a14:	4b08      	ldr	r3, [pc, #32]	; (8012a38 <RadioIrqProcess+0x33c>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d0be      	beq.n	801299a <RadioIrqProcess+0x29e>
 8012a1c:	691b      	ldr	r3, [r3, #16]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d0bb      	beq.n	801299a <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8012a22:	4798      	blx	r3
}
 8012a24:	e7b9      	b.n	801299a <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8012a26:	2000      	movs	r0, #0
 8012a28:	f000 fc0c 	bl	8013244 <SUBGRF_SetStandby>
 8012a2c:	e7f2      	b.n	8012a14 <RadioIrqProcess+0x318>
 8012a2e:	bf00      	nop
 8012a30:	20003db4 	.word	0x20003db4
 8012a34:	20003dcc 	.word	0x20003dcc
 8012a38:	20003db0 	.word	0x20003db0
 8012a3c:	08015a58 	.word	0x08015a58
 8012a40:	08015a64 	.word	0x08015a64

08012a44 <RadioOnDioIrq>:
{
 8012a44:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8012a46:	4b03      	ldr	r3, [pc, #12]	; (8012a54 <RadioOnDioIrq+0x10>)
 8012a48:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8012a4c:	f7ff fe56 	bl	80126fc <RadioIrqProcess>
}
 8012a50:	bd08      	pop	{r3, pc}
 8012a52:	bf00      	nop
 8012a54:	20003dcc 	.word	0x20003dcc

08012a58 <RadioGetWakeupTime>:
{
 8012a58:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8012a5a:	f001 f982 	bl	8013d62 <SUBGRF_GetRadioWakeUpTime>
}
 8012a5e:	3003      	adds	r0, #3
 8012a60:	bd08      	pop	{r3, pc}
	...

08012a64 <RadioSetMaxPayloadLength>:
{
 8012a64:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8012a66:	2801      	cmp	r0, #1
 8012a68:	d004      	beq.n	8012a74 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8012a6a:	4b0a      	ldr	r3, [pc, #40]	; (8012a94 <RadioSetMaxPayloadLength+0x30>)
 8012a6c:	7d5b      	ldrb	r3, [r3, #21]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d008      	beq.n	8012a84 <RadioSetMaxPayloadLength+0x20>
}
 8012a72:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8012a74:	4b08      	ldr	r3, [pc, #32]	; (8012a98 <RadioSetMaxPayloadLength+0x34>)
 8012a76:	7019      	strb	r1, [r3, #0]
 8012a78:	4806      	ldr	r0, [pc, #24]	; (8012a94 <RadioSetMaxPayloadLength+0x30>)
 8012a7a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012a7c:	300e      	adds	r0, #14
 8012a7e:	f001 f843 	bl	8013b08 <SUBGRF_SetPacketParams>
 8012a82:	e7f6      	b.n	8012a72 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8012a84:	4b04      	ldr	r3, [pc, #16]	; (8012a98 <RadioSetMaxPayloadLength+0x34>)
 8012a86:	7019      	strb	r1, [r3, #0]
 8012a88:	4802      	ldr	r0, [pc, #8]	; (8012a94 <RadioSetMaxPayloadLength+0x30>)
 8012a8a:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012a8c:	300e      	adds	r0, #14
 8012a8e:	f001 f83b 	bl	8013b08 <SUBGRF_SetPacketParams>
}
 8012a92:	e7ee      	b.n	8012a72 <RadioSetMaxPayloadLength+0xe>
 8012a94:	20003dcc 	.word	0x20003dcc
 8012a98:	20000110 	.word	0x20000110

08012a9c <RadioReadRegisters>:
{
 8012a9c:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8012a9e:	f001 f8a5 	bl	8013bec <SUBGRF_ReadRegisters>
}
 8012aa2:	bd08      	pop	{r3, pc}

08012aa4 <RadioWriteRegisters>:
{
 8012aa4:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8012aa6:	f000 ffed 	bl	8013a84 <SUBGRF_WriteRegisters>
}
 8012aaa:	bd08      	pop	{r3, pc}

08012aac <RadioRssi>:
{
 8012aac:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8012aae:	f000 fd6b 	bl	8013588 <SUBGRF_GetRssiInst>
}
 8012ab2:	b200      	sxth	r0, r0
 8012ab4:	bd08      	pop	{r3, pc}
	...

08012ab8 <RadioSetTxContinuousWave>:
{
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8012abc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8012ac0:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8012ac4:	f000 fd20 	bl	8013508 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8012ac8:	4628      	mov	r0, r5
 8012aca:	f001 f933 	bl	8013d34 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8012ace:	2101      	movs	r1, #1
 8012ad0:	f001 f91c 	bl	8013d0c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8012ad4:	f000 fc34 	bl	8013340 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8012ad8:	4d04      	ldr	r5, [pc, #16]	; (8012aec <RadioSetTxContinuousWave+0x34>)
 8012ada:	4621      	mov	r1, r4
 8012adc:	4628      	mov	r0, r5
 8012ade:	f001 fdf9 	bl	80146d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	f001 fdb0 	bl	8014648 <UTIL_TIMER_Start>
}
 8012ae8:	bd38      	pop	{r3, r4, r5, pc}
 8012aea:	bf00      	nop
 8012aec:	20003e28 	.word	0x20003e28

08012af0 <RadioSetChannel>:
{
 8012af0:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8012af2:	f000 fd09 	bl	8013508 <SUBGRF_SetRfFrequency>
}
 8012af6:	bd08      	pop	{r3, pc}

08012af8 <RadioStartCad>:
{
 8012af8:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012afa:	2100      	movs	r1, #0
 8012afc:	4b07      	ldr	r3, [pc, #28]	; (8012b1c <RadioStartCad+0x24>)
 8012afe:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8012b02:	f001 f903 	bl	8013d0c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8012b06:	2300      	movs	r3, #0
 8012b08:	461a      	mov	r2, r3
 8012b0a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8012b0e:	4608      	mov	r0, r1
 8012b10:	f000 fcc1 	bl	8013496 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8012b14:	f000 fc08 	bl	8013328 <SUBGRF_SetCad>
}
 8012b18:	bd08      	pop	{r3, pc}
 8012b1a:	bf00      	nop
 8012b1c:	20003dcc 	.word	0x20003dcc

08012b20 <RadioRx>:
{
 8012b20:	b538      	push	{r3, r4, r5, lr}
 8012b22:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8012b24:	f001 f9d7 	bl	8013ed6 <RFW_Is_Init>
 8012b28:	2801      	cmp	r0, #1
 8012b2a:	d019      	beq.n	8012b60 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	461a      	mov	r2, r3
 8012b30:	f240 2162 	movw	r1, #610	; 0x262
 8012b34:	4608      	mov	r0, r1
 8012b36:	f000 fcae 	bl	8013496 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8012b3a:	b9a4      	cbnz	r4, 8012b66 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8012b3c:	4c11      	ldr	r4, [pc, #68]	; (8012b84 <RadioRx+0x64>)
 8012b3e:	2100      	movs	r1, #0
 8012b40:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8012b42:	4b11      	ldr	r3, [pc, #68]	; (8012b88 <RadioRx+0x68>)
 8012b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012b48:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8012b4a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8012b4e:	f001 f8dd 	bl	8013d0c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8012b52:	7863      	ldrb	r3, [r4, #1]
 8012b54:	b183      	cbz	r3, 8012b78 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8012b56:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8012b5a:	f000 fba7 	bl	80132ac <SUBGRF_SetRx>
}
 8012b5e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8012b60:	f001 f9c1 	bl	8013ee6 <RFW_ReceiveInit>
 8012b64:	e7e9      	b.n	8012b3a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8012b66:	4d09      	ldr	r5, [pc, #36]	; (8012b8c <RadioRx+0x6c>)
 8012b68:	4621      	mov	r1, r4
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	f001 fdb2 	bl	80146d4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8012b70:	4628      	mov	r0, r5
 8012b72:	f001 fd69 	bl	8014648 <UTIL_TIMER_Start>
 8012b76:	e7e1      	b.n	8012b3c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8012b78:	4b02      	ldr	r3, [pc, #8]	; (8012b84 <RadioRx+0x64>)
 8012b7a:	6898      	ldr	r0, [r3, #8]
 8012b7c:	0180      	lsls	r0, r0, #6
 8012b7e:	f000 fb95 	bl	80132ac <SUBGRF_SetRx>
}
 8012b82:	e7ec      	b.n	8012b5e <RadioRx+0x3e>
 8012b84:	20003dcc 	.word	0x20003dcc
 8012b88:	48000400 	.word	0x48000400
 8012b8c:	20003db4 	.word	0x20003db4

08012b90 <RadioSleep>:
{
 8012b90:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8012b92:	f04f 0004 	mov.w	r0, #4
 8012b96:	f000 fe8d 	bl	80138b4 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8012b9a:	2002      	movs	r0, #2
 8012b9c:	f7ef f870 	bl	8001c80 <HAL_Delay>
}
 8012ba0:	bd08      	pop	{r3, pc}
	...

08012ba4 <RadioSend>:
{
 8012ba4:	b570      	push	{r4, r5, r6, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	4605      	mov	r5, r0
 8012baa:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8012bac:	2300      	movs	r3, #0
 8012bae:	461a      	mov	r2, r3
 8012bb0:	f240 2101 	movw	r1, #513	; 0x201
 8012bb4:	4608      	mov	r0, r1
 8012bb6:	f000 fc6e 	bl	8013496 <SUBGRF_SetDioIrqParams>
 8012bba:	4b3e      	ldr	r3, [pc, #248]	; (8012cb4 <RadioSend+0x110>)
 8012bbc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012bc0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8012bc2:	4e3d      	ldr	r6, [pc, #244]	; (8012cb8 <RadioSend+0x114>)
 8012bc4:	2101      	movs	r1, #1
 8012bc6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8012bca:	f001 f89f 	bl	8013d0c <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8012bce:	7833      	ldrb	r3, [r6, #0]
 8012bd0:	2b01      	cmp	r3, #1
 8012bd2:	d103      	bne.n	8012bdc <RadioSend+0x38>
 8012bd4:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8012bd8:	2b06      	cmp	r3, #6
 8012bda:	d012      	beq.n	8012c02 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8012bdc:	f640 0089 	movw	r0, #2185	; 0x889
 8012be0:	f000 fe0e 	bl	8013800 <SUBGRF_ReadRegister>
 8012be4:	f040 0104 	orr.w	r1, r0, #4
 8012be8:	b2c9      	uxtb	r1, r1
 8012bea:	f640 0089 	movw	r0, #2185	; 0x889
 8012bee:	f000 fd15 	bl	801361c <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 8012bf2:	4b31      	ldr	r3, [pc, #196]	; (8012cb8 <RadioSend+0x114>)
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	2b03      	cmp	r3, #3
 8012bf8:	d818      	bhi.n	8012c2c <RadioSend+0x88>
 8012bfa:	e8df f003 	tbb	[pc, r3]
 8012bfe:	0d22      	.short	0x0d22
 8012c00:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8012c02:	f640 0089 	movw	r0, #2185	; 0x889
 8012c06:	f000 fdfb 	bl	8013800 <SUBGRF_ReadRegister>
 8012c0a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8012c0e:	f640 0089 	movw	r0, #2185	; 0x889
 8012c12:	f000 fd03 	bl	801361c <SUBGRF_WriteRegister>
 8012c16:	e7ec      	b.n	8012bf2 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8012c18:	4827      	ldr	r0, [pc, #156]	; (8012cb8 <RadioSend+0x114>)
 8012c1a:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012c1c:	300e      	adds	r0, #14
 8012c1e:	f000 ff73 	bl	8013b08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8012c22:	2200      	movs	r2, #0
 8012c24:	4621      	mov	r1, r4
 8012c26:	4628      	mov	r0, r5
 8012c28:	f001 f83d 	bl	8013ca6 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8012c2c:	4c23      	ldr	r4, [pc, #140]	; (8012cbc <RadioSend+0x118>)
 8012c2e:	4b22      	ldr	r3, [pc, #136]	; (8012cb8 <RadioSend+0x114>)
 8012c30:	6859      	ldr	r1, [r3, #4]
 8012c32:	4620      	mov	r0, r4
 8012c34:	f001 fd4e 	bl	80146d4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f001 fd05 	bl	8014648 <UTIL_TIMER_Start>
}
 8012c3e:	b002      	add	sp, #8
 8012c40:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8012c42:	f001 f948 	bl	8013ed6 <RFW_Is_Init>
 8012c46:	2801      	cmp	r0, #1
 8012c48:	d00a      	beq.n	8012c60 <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8012c4a:	481b      	ldr	r0, [pc, #108]	; (8012cb8 <RadioSend+0x114>)
 8012c4c:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012c4e:	300e      	adds	r0, #14
 8012c50:	f000 ff5a 	bl	8013b08 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8012c54:	2200      	movs	r2, #0
 8012c56:	4621      	mov	r1, r4
 8012c58:	4628      	mov	r0, r5
 8012c5a:	f001 f824 	bl	8013ca6 <SUBGRF_SendPayload>
 8012c5e:	e7e5      	b.n	8012c2c <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8012c60:	f10d 0207 	add.w	r2, sp, #7
 8012c64:	4621      	mov	r1, r4
 8012c66:	4628      	mov	r0, r5
 8012c68:	f001 f93a 	bl	8013ee0 <RFW_TransmitInit>
 8012c6c:	b968      	cbnz	r0, 8012c8a <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8012c6e:	4812      	ldr	r0, [pc, #72]	; (8012cb8 <RadioSend+0x114>)
 8012c70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c74:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012c76:	300e      	adds	r0, #14
 8012c78:	f000 ff46 	bl	8013b08 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012c82:	4628      	mov	r0, r5
 8012c84:	f001 f80f 	bl	8013ca6 <SUBGRF_SendPayload>
 8012c88:	e7d0      	b.n	8012c2c <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8012c8a:	4b0d      	ldr	r3, [pc, #52]	; (8012cc0 <RadioSend+0x11c>)
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	2100      	movs	r1, #0
 8012c90:	2002      	movs	r0, #2
 8012c92:	f001 fa07 	bl	80140a4 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8012c96:	e7d2      	b.n	8012c3e <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8012c98:	4807      	ldr	r0, [pc, #28]	; (8012cb8 <RadioSend+0x114>)
 8012c9a:	2302      	movs	r3, #2
 8012c9c:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8012c9e:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012ca0:	300e      	adds	r0, #14
 8012ca2:	f000 ff31 	bl	8013b08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	4621      	mov	r1, r4
 8012caa:	4628      	mov	r0, r5
 8012cac:	f000 fffb 	bl	8013ca6 <SUBGRF_SendPayload>
            break;
 8012cb0:	e7bc      	b.n	8012c2c <RadioSend+0x88>
 8012cb2:	bf00      	nop
 8012cb4:	48000400 	.word	0x48000400
 8012cb8:	20003dcc 	.word	0x20003dcc
 8012cbc:	20003e28 	.word	0x20003e28
 8012cc0:	08015a74 	.word	0x08015a74

08012cc4 <RadioRandom>:
{
 8012cc4:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	461a      	mov	r2, r3
 8012cca:	4619      	mov	r1, r3
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f000 fbe2 	bl	8013496 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8012cd2:	f000 ff9b 	bl	8013c0c <SUBGRF_GetRandom>
}
 8012cd6:	bd08      	pop	{r3, pc}

08012cd8 <RadioSetModem>:
{
 8012cd8:	b510      	push	{r4, lr}
 8012cda:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8012cdc:	4b14      	ldr	r3, [pc, #80]	; (8012d30 <RadioSetModem+0x58>)
 8012cde:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8012ce0:	f001 f906 	bl	8013ef0 <RFW_SetRadioModem>
    switch( modem )
 8012ce4:	2c01      	cmp	r4, #1
 8012ce6:	d010      	beq.n	8012d0a <RadioSetModem+0x32>
 8012ce8:	2c03      	cmp	r4, #3
 8012cea:	d01a      	beq.n	8012d22 <RadioSetModem+0x4a>
 8012cec:	b134      	cbz	r4, 8012cfc <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8012cee:	2003      	movs	r0, #3
 8012cf0:	f000 fce4 	bl	80136bc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012cf4:	4b0e      	ldr	r3, [pc, #56]	; (8012d30 <RadioSetModem+0x58>)
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	735a      	strb	r2, [r3, #13]
}
 8012cfa:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8012cfc:	2000      	movs	r0, #0
 8012cfe:	f000 fcdd 	bl	80136bc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012d02:	4b0b      	ldr	r3, [pc, #44]	; (8012d30 <RadioSetModem+0x58>)
 8012d04:	2200      	movs	r2, #0
 8012d06:	735a      	strb	r2, [r3, #13]
        break;
 8012d08:	e7f7      	b.n	8012cfa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8012d0a:	2001      	movs	r0, #1
 8012d0c:	f000 fcd6 	bl	80136bc <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8012d10:	4b07      	ldr	r3, [pc, #28]	; (8012d30 <RadioSetModem+0x58>)
 8012d12:	7b5a      	ldrb	r2, [r3, #13]
 8012d14:	7b18      	ldrb	r0, [r3, #12]
 8012d16:	4282      	cmp	r2, r0
 8012d18:	d0ef      	beq.n	8012cfa <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8012d1a:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8012d1c:	f000 f80a 	bl	8012d34 <RadioSetPublicNetwork>
 8012d20:	e7eb      	b.n	8012cfa <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8012d22:	2002      	movs	r0, #2
 8012d24:	f000 fcca 	bl	80136bc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8012d28:	4b01      	ldr	r3, [pc, #4]	; (8012d30 <RadioSetModem+0x58>)
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	735a      	strb	r2, [r3, #13]
}
 8012d2e:	e7e4      	b.n	8012cfa <RadioSetModem+0x22>
 8012d30:	20003dcc 	.word	0x20003dcc

08012d34 <RadioSetPublicNetwork>:
{
 8012d34:	b510      	push	{r4, lr}
 8012d36:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8012d38:	4b0e      	ldr	r3, [pc, #56]	; (8012d74 <RadioSetPublicNetwork+0x40>)
 8012d3a:	7318      	strb	r0, [r3, #12]
 8012d3c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8012d3e:	2001      	movs	r0, #1
 8012d40:	f7ff ffca 	bl	8012cd8 <RadioSetModem>
    if( enable == true )
 8012d44:	b154      	cbz	r4, 8012d5c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8012d46:	2134      	movs	r1, #52	; 0x34
 8012d48:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8012d4c:	f000 fc66 	bl	801361c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8012d50:	2144      	movs	r1, #68	; 0x44
 8012d52:	f240 7041 	movw	r0, #1857	; 0x741
 8012d56:	f000 fc61 	bl	801361c <SUBGRF_WriteRegister>
}
 8012d5a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8012d5c:	2114      	movs	r1, #20
 8012d5e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8012d62:	f000 fc5b 	bl	801361c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8012d66:	2124      	movs	r1, #36	; 0x24
 8012d68:	f240 7041 	movw	r0, #1857	; 0x741
 8012d6c:	f000 fc56 	bl	801361c <SUBGRF_WriteRegister>
}
 8012d70:	e7f3      	b.n	8012d5a <RadioSetPublicNetwork+0x26>
 8012d72:	bf00      	nop
 8012d74:	20003dcc 	.word	0x20003dcc

08012d78 <RadioSetTxConfig>:
{
 8012d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	b083      	sub	sp, #12
 8012d7e:	4604      	mov	r4, r0
 8012d80:	460e      	mov	r6, r1
 8012d82:	4617      	mov	r7, r2
 8012d84:	461d      	mov	r5, r3
 8012d86:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8012d8a:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8012d8e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8012d92:	f001 f89f 	bl	8013ed4 <RFW_DeInit>
    switch( modem )
 8012d96:	b174      	cbz	r4, 8012db6 <RadioSetTxConfig+0x3e>
 8012d98:	2c01      	cmp	r4, #1
 8012d9a:	d053      	beq.n	8012e44 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8012d9c:	4630      	mov	r0, r6
 8012d9e:	f000 ffc9 	bl	8013d34 <SUBGRF_SetRfTxPower>
 8012da2:	4c51      	ldr	r4, [pc, #324]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012da4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8012da8:	f001 f899 	bl	8013ede <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8012dac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012dae:	6063      	str	r3, [r4, #4]
}
 8012db0:	b003      	add	sp, #12
 8012db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8012db6:	4c4c      	ldr	r4, [pc, #304]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012db8:	f04f 0b00 	mov.w	fp, #0
 8012dbc:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8012dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dc2:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8012dc4:	230b      	movs	r3, #11
 8012dc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f001 f820 	bl	8013e10 <SUBGRF_GetFskBandwidthRegValue>
 8012dd0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8012dd4:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8012dd6:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8012dda:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8012dde:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8012de2:	2304      	movs	r3, #4
 8012de4:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8012de6:	2318      	movs	r3, #24
 8012de8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8012dea:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8012dee:	f089 0901 	eor.w	r9, r9, #1
 8012df2:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8012df6:	f1ba 0f00 	cmp.w	sl, #0
 8012dfa:	d01f      	beq.n	8012e3c <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8012dfc:	22f2      	movs	r2, #242	; 0xf2
 8012dfe:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8012e00:	4c39      	ldr	r4, [pc, #228]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012e02:	2301      	movs	r3, #1
 8012e04:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8012e06:	f7ff fc43 	bl	8012690 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8012e0a:	2000      	movs	r0, #0
 8012e0c:	f7ff ff64 	bl	8012cd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012e10:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012e14:	f000 fc6c 	bl	80136f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012e18:	f104 000e 	add.w	r0, r4, #14
 8012e1c:	f000 fe74 	bl	8013b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8012e20:	4a32      	ldr	r2, [pc, #200]	; (8012eec <RadioSetTxConfig+0x174>)
 8012e22:	466b      	mov	r3, sp
 8012e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e28:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f000 fe39 	bl	8013aa4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8012e32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012e36:	f000 fd5d 	bl	80138f4 <SUBGRF_SetWhiteningSeed>
            break;
 8012e3a:	e7af      	b.n	8012d9c <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8012e3c:	4b2a      	ldr	r3, [pc, #168]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012e3e:	2201      	movs	r2, #1
 8012e40:	75da      	strb	r2, [r3, #23]
 8012e42:	e7dd      	b.n	8012e00 <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8012e44:	4a28      	ldr	r2, [pc, #160]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012e46:	2301      	movs	r3, #1
 8012e48:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8012e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8012e54:	4926      	ldr	r1, [pc, #152]	; (8012ef0 <RadioSetTxConfig+0x178>)
 8012e56:	5d49      	ldrb	r1, [r1, r5]
 8012e58:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8012e5c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8012e60:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8012e64:	b91d      	cbnz	r5, 8012e6e <RadioSetTxConfig+0xf6>
 8012e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012e68:	3a0b      	subs	r2, #11
 8012e6a:	2a01      	cmp	r2, #1
 8012e6c:	d92c      	bls.n	8012ec8 <RadioSetTxConfig+0x150>
 8012e6e:	2d01      	cmp	r5, #1
 8012e70:	d027      	beq.n	8012ec2 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8012e72:	4a1d      	ldr	r2, [pc, #116]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012e74:	2100      	movs	r1, #0
 8012e76:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8012e7a:	4a1b      	ldr	r2, [pc, #108]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012e7c:	2101      	movs	r1, #1
 8012e7e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8012e80:	3b05      	subs	r3, #5
 8012e82:	b2db      	uxtb	r3, r3
 8012e84:	428b      	cmp	r3, r1
 8012e86:	d924      	bls.n	8012ed2 <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8012e88:	4b17      	ldr	r3, [pc, #92]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012e8a:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8012e8e:	4c16      	ldr	r4, [pc, #88]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012e90:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8012e94:	4b17      	ldr	r3, [pc, #92]	; (8012ef4 <RadioSetTxConfig+0x17c>)
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8012e9a:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8012e9e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012ea2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8012ea6:	f7ff fbf3 	bl	8012690 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8012eaa:	2001      	movs	r0, #1
 8012eac:	f7ff ff14 	bl	8012cd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012eb0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012eb4:	f000 fc1c 	bl	80136f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012eb8:	f104 000e 	add.w	r0, r4, #14
 8012ebc:	f000 fe24 	bl	8013b08 <SUBGRF_SetPacketParams>
            break;
 8012ec0:	e76c      	b.n	8012d9c <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012ec4:	2a0c      	cmp	r2, #12
 8012ec6:	d1d4      	bne.n	8012e72 <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8012ec8:	4a07      	ldr	r2, [pc, #28]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012eca:	2101      	movs	r1, #1
 8012ecc:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8012ed0:	e7d3      	b.n	8012e7a <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 8012ed2:	f1b8 0f0b 	cmp.w	r8, #11
 8012ed6:	d803      	bhi.n	8012ee0 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8012ed8:	4613      	mov	r3, r2
 8012eda:	220c      	movs	r2, #12
 8012edc:	839a      	strh	r2, [r3, #28]
 8012ede:	e7d6      	b.n	8012e8e <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8012ee0:	4b01      	ldr	r3, [pc, #4]	; (8012ee8 <RadioSetTxConfig+0x170>)
 8012ee2:	f8a3 801c 	strh.w	r8, [r3, #28]
 8012ee6:	e7d2      	b.n	8012e8e <RadioSetTxConfig+0x116>
 8012ee8:	20003dcc 	.word	0x20003dcc
 8012eec:	08014c4c 	.word	0x08014c4c
 8012ef0:	08015a8c 	.word	0x08015a8c
 8012ef4:	20000110 	.word	0x20000110

08012ef8 <RadioSetRxConfig>:
{
 8012ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012efc:	b085      	sub	sp, #20
 8012efe:	4604      	mov	r4, r0
 8012f00:	460d      	mov	r5, r1
 8012f02:	4616      	mov	r6, r2
 8012f04:	9301      	str	r3, [sp, #4]
 8012f06:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 8012f0a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 8012f0e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8012f12:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8012f16:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 8012f1a:	4b6e      	ldr	r3, [pc, #440]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8012f1c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8012f20:	f000 ffd8 	bl	8013ed4 <RFW_DeInit>
    if( rxContinuous == true )
 8012f24:	f1b8 0f00 	cmp.w	r8, #0
 8012f28:	d001      	beq.n	8012f2e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8012f2a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8012f2e:	b14f      	cbz	r7, 8012f44 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8012f30:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8012f34:	4b68      	ldr	r3, [pc, #416]	; (80130d8 <RadioSetRxConfig+0x1e0>)
 8012f36:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8012f38:	b144      	cbz	r4, 8012f4c <RadioSetRxConfig+0x54>
 8012f3a:	2c01      	cmp	r4, #1
 8012f3c:	d057      	beq.n	8012fee <RadioSetRxConfig+0xf6>
}
 8012f3e:	b005      	add	sp, #20
 8012f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8012f44:	4b64      	ldr	r3, [pc, #400]	; (80130d8 <RadioSetRxConfig+0x1e0>)
 8012f46:	22ff      	movs	r2, #255	; 0xff
 8012f48:	701a      	strb	r2, [r3, #0]
 8012f4a:	e7f5      	b.n	8012f38 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	f000 fa05 	bl	801335c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8012f52:	4c60      	ldr	r4, [pc, #384]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8012f54:	f04f 0800 	mov.w	r8, #0
 8012f58:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8012f5c:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8012f5e:	230b      	movs	r3, #11
 8012f60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8012f64:	4628      	mov	r0, r5
 8012f66:	f000 ff53 	bl	8013e10 <SUBGRF_GetFskBandwidthRegValue>
 8012f6a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8012f6e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8012f72:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8012f76:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8012f7a:	2304      	movs	r3, #4
 8012f7c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8012f7e:	2318      	movs	r3, #24
 8012f80:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8012f82:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8012f86:	f087 0701 	eor.w	r7, r7, #1
 8012f8a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8012f8c:	4b52      	ldr	r3, [pc, #328]	; (80130d8 <RadioSetRxConfig+0x1e0>)
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8012f92:	f1bb 0f00 	cmp.w	fp, #0
 8012f96:	d026      	beq.n	8012fe6 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8012f98:	22f2      	movs	r2, #242	; 0xf2
 8012f9a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8012f9c:	4c4d      	ldr	r4, [pc, #308]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8012f9e:	2301      	movs	r3, #1
 8012fa0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8012fa2:	f7ff fb75 	bl	8012690 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8012fa6:	2000      	movs	r0, #0
 8012fa8:	f7ff fe96 	bl	8012cd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012fac:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012fb0:	f000 fb9e 	bl	80136f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8012fb4:	f104 000e 	add.w	r0, r4, #14
 8012fb8:	f000 fda6 	bl	8013b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8012fbc:	4a47      	ldr	r2, [pc, #284]	; (80130dc <RadioSetRxConfig+0x1e4>)
 8012fbe:	ab02      	add	r3, sp, #8
 8012fc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012fc4:	e883 0003 	stmia.w	r3, {r0, r1}
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f000 fd6b 	bl	8013aa4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8012fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8012fd2:	f000 fc8f 	bl	80138f4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8012fd6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8012fda:	fb02 fa0a 	mul.w	sl, r2, sl
 8012fde:	fbba f6f6 	udiv	r6, sl, r6
 8012fe2:	60a6      	str	r6, [r4, #8]
            break;
 8012fe4:	e7ab      	b.n	8012f3e <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8012fe6:	4b3b      	ldr	r3, [pc, #236]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8012fe8:	2201      	movs	r2, #1
 8012fea:	75da      	strb	r2, [r3, #23]
 8012fec:	e7d6      	b.n	8012f9c <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8012fee:	2000      	movs	r0, #0
 8012ff0:	f000 f9b4 	bl	801335c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8012ff4:	4a37      	ldr	r2, [pc, #220]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8012ffc:	b2f3      	uxtb	r3, r6
 8012ffe:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8013002:	4937      	ldr	r1, [pc, #220]	; (80130e0 <RadioSetRxConfig+0x1e8>)
 8013004:	5d49      	ldrb	r1, [r1, r5]
 8013006:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801300a:	9901      	ldr	r1, [sp, #4]
 801300c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013010:	b91d      	cbnz	r5, 801301a <RadioSetRxConfig+0x122>
 8013012:	f1a6 020b 	sub.w	r2, r6, #11
 8013016:	2a01      	cmp	r2, #1
 8013018:	d941      	bls.n	801309e <RadioSetRxConfig+0x1a6>
 801301a:	2d01      	cmp	r5, #1
 801301c:	d03d      	beq.n	801309a <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801301e:	4a2d      	ldr	r2, [pc, #180]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8013020:	2100      	movs	r1, #0
 8013022:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8013026:	4a2b      	ldr	r2, [pc, #172]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8013028:	2101      	movs	r1, #1
 801302a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801302c:	3b05      	subs	r3, #5
 801302e:	b2db      	uxtb	r3, r3
 8013030:	428b      	cmp	r3, r1
 8013032:	d939      	bls.n	80130a8 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8013034:	4b27      	ldr	r3, [pc, #156]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8013036:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801303a:	4c26      	ldr	r4, [pc, #152]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 801303c:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801303e:	4b26      	ldr	r3, [pc, #152]	; (80130d8 <RadioSetRxConfig+0x1e0>)
 8013040:	781b      	ldrb	r3, [r3, #0]
 8013042:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8013044:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8013048:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801304c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8013050:	f7ff fb1e 	bl	8012690 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8013054:	2001      	movs	r0, #1
 8013056:	f7ff fe3f 	bl	8012cd8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801305a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801305e:	f000 fb47 	bl	80136f0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013062:	f104 000e 	add.w	r0, r4, #14
 8013066:	f000 fd4f 	bl	8013b08 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801306a:	fa5f f08a 	uxtb.w	r0, sl
 801306e:	f000 fb03 	bl	8013678 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8013072:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8013076:	2b01      	cmp	r3, #1
 8013078:	d021      	beq.n	80130be <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801307a:	f240 7036 	movw	r0, #1846	; 0x736
 801307e:	f000 fbbf 	bl	8013800 <SUBGRF_ReadRegister>
 8013082:	f040 0104 	orr.w	r1, r0, #4
 8013086:	b2c9      	uxtb	r1, r1
 8013088:	f240 7036 	movw	r0, #1846	; 0x736
 801308c:	f000 fac6 	bl	801361c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8013090:	4b10      	ldr	r3, [pc, #64]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 8013092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013096:	609a      	str	r2, [r3, #8]
}
 8013098:	e751      	b.n	8012f3e <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801309a:	2e0c      	cmp	r6, #12
 801309c:	d1bf      	bne.n	801301e <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801309e:	4a0d      	ldr	r2, [pc, #52]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 80130a0:	2101      	movs	r1, #1
 80130a2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80130a6:	e7be      	b.n	8013026 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 80130a8:	f1b9 0f0b 	cmp.w	r9, #11
 80130ac:	d803      	bhi.n	80130b6 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80130ae:	4613      	mov	r3, r2
 80130b0:	220c      	movs	r2, #12
 80130b2:	839a      	strh	r2, [r3, #28]
 80130b4:	e7c1      	b.n	801303a <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80130b6:	4b07      	ldr	r3, [pc, #28]	; (80130d4 <RadioSetRxConfig+0x1dc>)
 80130b8:	f8a3 901c 	strh.w	r9, [r3, #28]
 80130bc:	e7bd      	b.n	801303a <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80130be:	f240 7036 	movw	r0, #1846	; 0x736
 80130c2:	f000 fb9d 	bl	8013800 <SUBGRF_ReadRegister>
 80130c6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80130ca:	f240 7036 	movw	r0, #1846	; 0x736
 80130ce:	f000 faa5 	bl	801361c <SUBGRF_WriteRegister>
 80130d2:	e7dd      	b.n	8013090 <RadioSetRxConfig+0x198>
 80130d4:	20003dcc 	.word	0x20003dcc
 80130d8:	20000110 	.word	0x20000110
 80130dc:	08014c4c 	.word	0x08014c4c
 80130e0:	08015a8c 	.word	0x08015a8c

080130e4 <RadioIsChannelFree>:
{
 80130e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130e6:	b08b      	sub	sp, #44	; 0x2c
 80130e8:	4604      	mov	r4, r0
 80130ea:	460f      	mov	r7, r1
 80130ec:	4616      	mov	r6, r2
 80130ee:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80130f0:	f7ff face 	bl	8012690 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80130f4:	2000      	movs	r0, #0
 80130f6:	f7ff fdef 	bl	8012cd8 <RadioSetModem>
    RadioSetChannel( freq );
 80130fa:	4620      	mov	r0, r4
 80130fc:	f7ff fcf8 	bl	8012af0 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8013100:	2301      	movs	r3, #1
 8013102:	9309      	str	r3, [sp, #36]	; 0x24
 8013104:	2400      	movs	r4, #0
 8013106:	9408      	str	r4, [sp, #32]
 8013108:	9407      	str	r4, [sp, #28]
 801310a:	9406      	str	r4, [sp, #24]
 801310c:	9405      	str	r4, [sp, #20]
 801310e:	9404      	str	r4, [sp, #16]
 8013110:	9403      	str	r4, [sp, #12]
 8013112:	9402      	str	r4, [sp, #8]
 8013114:	2303      	movs	r3, #3
 8013116:	9301      	str	r3, [sp, #4]
 8013118:	9700      	str	r7, [sp, #0]
 801311a:	4623      	mov	r3, r4
 801311c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8013120:	4639      	mov	r1, r7
 8013122:	4620      	mov	r0, r4
 8013124:	f7ff fee8 	bl	8012ef8 <RadioSetRxConfig>
    RadioRx( 0 );
 8013128:	4620      	mov	r0, r4
 801312a:	f7ff fcf9 	bl	8012b20 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801312e:	f7ff fc93 	bl	8012a58 <RadioGetWakeupTime>
 8013132:	f7ee fda5 	bl	8001c80 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8013136:	f001 f9ed 	bl	8014514 <UTIL_TIMER_GetCurrentTime>
 801313a:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801313c:	4620      	mov	r0, r4
 801313e:	f001 f9f3 	bl	8014528 <UTIL_TIMER_GetElapsedTime>
 8013142:	42a8      	cmp	r0, r5
 8013144:	d206      	bcs.n	8013154 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8013146:	2000      	movs	r0, #0
 8013148:	f7ff fcb0 	bl	8012aac <RadioRssi>
        if( rssi > rssiThresh )
 801314c:	42b0      	cmp	r0, r6
 801314e:	ddf5      	ble.n	801313c <RadioIsChannelFree+0x58>
            status = false;
 8013150:	2400      	movs	r4, #0
 8013152:	e000      	b.n	8013156 <RadioIsChannelFree+0x72>
    bool status = true;
 8013154:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8013156:	f7ff fa9b 	bl	8012690 <RadioStandby>
}
 801315a:	4620      	mov	r0, r4
 801315c:	b00b      	add	sp, #44	; 0x2c
 801315e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013160 <RadioInit>:
{
 8013160:	b570      	push	{r4, r5, r6, lr}
 8013162:	b082      	sub	sp, #8
    RadioEvents = events;
 8013164:	4b1d      	ldr	r3, [pc, #116]	; (80131dc <RadioInit+0x7c>)
 8013166:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8013168:	4d1d      	ldr	r5, [pc, #116]	; (80131e0 <RadioInit+0x80>)
 801316a:	2400      	movs	r4, #0
 801316c:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801316e:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8013170:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013172:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8013174:	481b      	ldr	r0, [pc, #108]	; (80131e4 <RadioInit+0x84>)
 8013176:	f000 fb67 	bl	8013848 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 801317a:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 801317c:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801317e:	f000 f8fa 	bl	8013376 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8013182:	4621      	mov	r1, r4
 8013184:	4620      	mov	r0, r4
 8013186:	f000 f9f1 	bl	801356c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801318a:	2204      	movs	r2, #4
 801318c:	4621      	mov	r1, r4
 801318e:	2001      	movs	r0, #1
 8013190:	f000 fbc9 	bl	8013926 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013194:	4623      	mov	r3, r4
 8013196:	4622      	mov	r2, r4
 8013198:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801319c:	4608      	mov	r0, r1
 801319e:	f000 f97a 	bl	8013496 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 80131a2:	f7ff fcf5 	bl	8012b90 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80131a6:	4e10      	ldr	r6, [pc, #64]	; (80131e8 <RadioInit+0x88>)
 80131a8:	9400      	str	r4, [sp, #0]
 80131aa:	4b10      	ldr	r3, [pc, #64]	; (80131ec <RadioInit+0x8c>)
 80131ac:	4622      	mov	r2, r4
 80131ae:	f04f 31ff 	mov.w	r1, #4294967295
 80131b2:	4630      	mov	r0, r6
 80131b4:	f001 f990 	bl	80144d8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80131b8:	4d0d      	ldr	r5, [pc, #52]	; (80131f0 <RadioInit+0x90>)
 80131ba:	9400      	str	r4, [sp, #0]
 80131bc:	4b0d      	ldr	r3, [pc, #52]	; (80131f4 <RadioInit+0x94>)
 80131be:	4622      	mov	r2, r4
 80131c0:	f04f 31ff 	mov.w	r1, #4294967295
 80131c4:	4628      	mov	r0, r5
 80131c6:	f001 f987 	bl	80144d8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80131ca:	4630      	mov	r0, r6
 80131cc:	f001 f9e2 	bl	8014594 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80131d0:	4628      	mov	r0, r5
 80131d2:	f001 f9df 	bl	8014594 <UTIL_TIMER_Stop>
}
 80131d6:	b002      	add	sp, #8
 80131d8:	bd70      	pop	{r4, r5, r6, pc}
 80131da:	bf00      	nop
 80131dc:	20003db0 	.word	0x20003db0
 80131e0:	20003dcc 	.word	0x20003dcc
 80131e4:	08012a45 	.word	0x08012a45
 80131e8:	20003e28 	.word	0x20003e28
 80131ec:	0801259d 	.word	0x0801259d
 80131f0:	20003db4 	.word	0x20003db4
 80131f4:	080125c5 	.word	0x080125c5

080131f8 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80131f8:	b510      	push	{r4, lr}
 80131fa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131fc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013200:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8013202:	460a      	mov	r2, r1
 8013204:	4601      	mov	r1, r0
 8013206:	4803      	ldr	r0, [pc, #12]	; (8013214 <SUBGRF_WriteCommand+0x1c>)
 8013208:	f7f2 fe2c 	bl	8005e64 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801320c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8013210:	bd10      	pop	{r4, pc}
 8013212:	bf00      	nop
 8013214:	20000290 	.word	0x20000290

08013218 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8013218:	b510      	push	{r4, lr}
 801321a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801321c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013220:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8013222:	460a      	mov	r2, r1
 8013224:	4601      	mov	r1, r0
 8013226:	4803      	ldr	r0, [pc, #12]	; (8013234 <SUBGRF_ReadCommand+0x1c>)
 8013228:	f7f2 fe72 	bl	8005f10 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801322c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8013230:	bd10      	pop	{r4, pc}
 8013232:	bf00      	nop
 8013234:	20000290 	.word	0x20000290

08013238 <SUBGRF_GetOperatingMode>:
}
 8013238:	4b01      	ldr	r3, [pc, #4]	; (8013240 <SUBGRF_GetOperatingMode+0x8>)
 801323a:	7818      	ldrb	r0, [r3, #0]
 801323c:	4770      	bx	lr
 801323e:	bf00      	nop
 8013240:	20003e46 	.word	0x20003e46

08013244 <SUBGRF_SetStandby>:
{
 8013244:	b500      	push	{lr}
 8013246:	b083      	sub	sp, #12
 8013248:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801324c:	2201      	movs	r2, #1
 801324e:	f10d 0107 	add.w	r1, sp, #7
 8013252:	2080      	movs	r0, #128	; 0x80
 8013254:	f7ff ffd0 	bl	80131f8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8013258:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801325c:	b92b      	cbnz	r3, 801326a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 801325e:	4b05      	ldr	r3, [pc, #20]	; (8013274 <SUBGRF_SetStandby+0x30>)
 8013260:	2201      	movs	r2, #1
 8013262:	701a      	strb	r2, [r3, #0]
}
 8013264:	b003      	add	sp, #12
 8013266:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801326a:	4b02      	ldr	r3, [pc, #8]	; (8013274 <SUBGRF_SetStandby+0x30>)
 801326c:	2202      	movs	r2, #2
 801326e:	701a      	strb	r2, [r3, #0]
}
 8013270:	e7f8      	b.n	8013264 <SUBGRF_SetStandby+0x20>
 8013272:	bf00      	nop
 8013274:	20003e46 	.word	0x20003e46

08013278 <SUBGRF_SetTx>:
{
 8013278:	b500      	push	{lr}
 801327a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 801327c:	4b0a      	ldr	r3, [pc, #40]	; (80132a8 <SUBGRF_SetTx+0x30>)
 801327e:	2204      	movs	r2, #4
 8013280:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013282:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013286:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801328a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801328e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013292:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8013296:	2203      	movs	r2, #3
 8013298:	a901      	add	r1, sp, #4
 801329a:	2083      	movs	r0, #131	; 0x83
 801329c:	f7ff ffac 	bl	80131f8 <SUBGRF_WriteCommand>
}
 80132a0:	b003      	add	sp, #12
 80132a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80132a6:	bf00      	nop
 80132a8:	20003e46 	.word	0x20003e46

080132ac <SUBGRF_SetRx>:
{
 80132ac:	b500      	push	{lr}
 80132ae:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80132b0:	4b0a      	ldr	r3, [pc, #40]	; (80132dc <SUBGRF_SetRx+0x30>)
 80132b2:	2205      	movs	r2, #5
 80132b4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80132b6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80132ba:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80132be:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80132c2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80132c6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80132ca:	2203      	movs	r2, #3
 80132cc:	a901      	add	r1, sp, #4
 80132ce:	2082      	movs	r0, #130	; 0x82
 80132d0:	f7ff ff92 	bl	80131f8 <SUBGRF_WriteCommand>
}
 80132d4:	b003      	add	sp, #12
 80132d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80132da:	bf00      	nop
 80132dc:	20003e46 	.word	0x20003e46

080132e0 <SUBGRF_SetRxDutyCycle>:
{
 80132e0:	b500      	push	{lr}
 80132e2:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80132e4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80132e8:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80132ec:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80132f0:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80132f4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80132f8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80132fc:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8013300:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8013304:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8013308:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801330c:	2206      	movs	r2, #6
 801330e:	4669      	mov	r1, sp
 8013310:	2094      	movs	r0, #148	; 0x94
 8013312:	f7ff ff71 	bl	80131f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8013316:	4b03      	ldr	r3, [pc, #12]	; (8013324 <SUBGRF_SetRxDutyCycle+0x44>)
 8013318:	2206      	movs	r2, #6
 801331a:	701a      	strb	r2, [r3, #0]
}
 801331c:	b003      	add	sp, #12
 801331e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013322:	bf00      	nop
 8013324:	20003e46 	.word	0x20003e46

08013328 <SUBGRF_SetCad>:
{
 8013328:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801332a:	2200      	movs	r2, #0
 801332c:	4611      	mov	r1, r2
 801332e:	20c5      	movs	r0, #197	; 0xc5
 8013330:	f7ff ff62 	bl	80131f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8013334:	4b01      	ldr	r3, [pc, #4]	; (801333c <SUBGRF_SetCad+0x14>)
 8013336:	2207      	movs	r2, #7
 8013338:	701a      	strb	r2, [r3, #0]
}
 801333a:	bd08      	pop	{r3, pc}
 801333c:	20003e46 	.word	0x20003e46

08013340 <SUBGRF_SetTxContinuousWave>:
{
 8013340:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8013342:	2200      	movs	r2, #0
 8013344:	4611      	mov	r1, r2
 8013346:	20d1      	movs	r0, #209	; 0xd1
 8013348:	f7ff ff56 	bl	80131f8 <SUBGRF_WriteCommand>
}
 801334c:	bd08      	pop	{r3, pc}

0801334e <SUBGRF_SetTxInfinitePreamble>:
{
 801334e:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8013350:	2200      	movs	r2, #0
 8013352:	4611      	mov	r1, r2
 8013354:	20d2      	movs	r0, #210	; 0xd2
 8013356:	f7ff ff4f 	bl	80131f8 <SUBGRF_WriteCommand>
}
 801335a:	bd08      	pop	{r3, pc}

0801335c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 801335c:	b500      	push	{lr}
 801335e:	b083      	sub	sp, #12
 8013360:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8013364:	2201      	movs	r2, #1
 8013366:	f10d 0107 	add.w	r1, sp, #7
 801336a:	209f      	movs	r0, #159	; 0x9f
 801336c:	f7ff ff44 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013370:	b003      	add	sp, #12
 8013372:	f85d fb04 	ldr.w	pc, [sp], #4

08013376 <SUBGRF_SetRegulatorMode>:
{
 8013376:	b500      	push	{lr}
 8013378:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801337a:	f7ef fd33 	bl	8002de4 <RBI_IsDCDC>
 801337e:	2801      	cmp	r0, #1
 8013380:	d00b      	beq.n	801339a <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8013382:	2300      	movs	r3, #0
 8013384:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8013388:	2201      	movs	r2, #1
 801338a:	f10d 0107 	add.w	r1, sp, #7
 801338e:	2096      	movs	r0, #150	; 0x96
 8013390:	f7ff ff32 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013394:	b003      	add	sp, #12
 8013396:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 801339a:	2301      	movs	r3, #1
 801339c:	f88d 3007 	strb.w	r3, [sp, #7]
 80133a0:	e7f2      	b.n	8013388 <SUBGRF_SetRegulatorMode+0x12>

080133a2 <SUBGRF_Calibrate>:
{
 80133a2:	b500      	push	{lr}
 80133a4:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80133a6:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80133aa:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80133ae:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80133b0:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80133b4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80133b6:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80133ba:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80133bc:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80133c0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80133c2:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80133c6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80133c8:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80133cc:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80133ce:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80133d2:	2201      	movs	r2, #1
 80133d4:	f10d 0107 	add.w	r1, sp, #7
 80133d8:	2089      	movs	r0, #137	; 0x89
 80133da:	f7ff ff0d 	bl	80131f8 <SUBGRF_WriteCommand>
}
 80133de:	b003      	add	sp, #12
 80133e0:	f85d fb04 	ldr.w	pc, [sp], #4

080133e4 <SUBGRF_CalibrateImage>:
{
 80133e4:	b500      	push	{lr}
 80133e6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 80133e8:	4b1c      	ldr	r3, [pc, #112]	; (801345c <SUBGRF_CalibrateImage+0x78>)
 80133ea:	4298      	cmp	r0, r3
 80133ec:	d90d      	bls.n	801340a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 80133ee:	23e1      	movs	r3, #225	; 0xe1
 80133f0:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 80133f4:	23e9      	movs	r3, #233	; 0xe9
 80133f6:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80133fa:	2202      	movs	r2, #2
 80133fc:	a901      	add	r1, sp, #4
 80133fe:	2098      	movs	r0, #152	; 0x98
 8013400:	f7ff fefa 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013404:	b003      	add	sp, #12
 8013406:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 801340a:	4b15      	ldr	r3, [pc, #84]	; (8013460 <SUBGRF_CalibrateImage+0x7c>)
 801340c:	4298      	cmp	r0, r3
 801340e:	d906      	bls.n	801341e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8013410:	23d7      	movs	r3, #215	; 0xd7
 8013412:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8013416:	23db      	movs	r3, #219	; 0xdb
 8013418:	f88d 3005 	strb.w	r3, [sp, #5]
 801341c:	e7ed      	b.n	80133fa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 801341e:	4b11      	ldr	r3, [pc, #68]	; (8013464 <SUBGRF_CalibrateImage+0x80>)
 8013420:	4298      	cmp	r0, r3
 8013422:	d906      	bls.n	8013432 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8013424:	23c1      	movs	r3, #193	; 0xc1
 8013426:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 801342a:	23c5      	movs	r3, #197	; 0xc5
 801342c:	f88d 3005 	strb.w	r3, [sp, #5]
 8013430:	e7e3      	b.n	80133fa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8013432:	4b0d      	ldr	r3, [pc, #52]	; (8013468 <SUBGRF_CalibrateImage+0x84>)
 8013434:	4298      	cmp	r0, r3
 8013436:	d906      	bls.n	8013446 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8013438:	2375      	movs	r3, #117	; 0x75
 801343a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 801343e:	2381      	movs	r3, #129	; 0x81
 8013440:	f88d 3005 	strb.w	r3, [sp, #5]
 8013444:	e7d9      	b.n	80133fa <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8013446:	4b09      	ldr	r3, [pc, #36]	; (801346c <SUBGRF_CalibrateImage+0x88>)
 8013448:	4298      	cmp	r0, r3
 801344a:	d9d6      	bls.n	80133fa <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 801344c:	236b      	movs	r3, #107	; 0x6b
 801344e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8013452:	236f      	movs	r3, #111	; 0x6f
 8013454:	f88d 3005 	strb.w	r3, [sp, #5]
 8013458:	e7cf      	b.n	80133fa <SUBGRF_CalibrateImage+0x16>
 801345a:	bf00      	nop
 801345c:	35a4e900 	.word	0x35a4e900
 8013460:	32a9f880 	.word	0x32a9f880
 8013464:	2de54480 	.word	0x2de54480
 8013468:	1b6b0b00 	.word	0x1b6b0b00
 801346c:	1954fc40 	.word	0x1954fc40

08013470 <SUBGRF_SetPaConfig>:
{
 8013470:	b500      	push	{lr}
 8013472:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8013474:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8013478:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 801347c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8013480:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8013484:	2204      	movs	r2, #4
 8013486:	eb0d 0102 	add.w	r1, sp, r2
 801348a:	2095      	movs	r0, #149	; 0x95
 801348c:	f7ff feb4 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013490:	b003      	add	sp, #12
 8013492:	f85d fb04 	ldr.w	pc, [sp], #4

08013496 <SUBGRF_SetDioIrqParams>:
{
 8013496:	b500      	push	{lr}
 8013498:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801349a:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801349e:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80134a2:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80134a6:	0a08      	lsrs	r0, r1, #8
 80134a8:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80134ac:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80134b0:	0a11      	lsrs	r1, r2, #8
 80134b2:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80134b6:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80134ba:	0a1a      	lsrs	r2, r3, #8
 80134bc:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80134c0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80134c4:	2208      	movs	r2, #8
 80134c6:	4669      	mov	r1, sp
 80134c8:	4610      	mov	r0, r2
 80134ca:	f7ff fe95 	bl	80131f8 <SUBGRF_WriteCommand>
}
 80134ce:	b003      	add	sp, #12
 80134d0:	f85d fb04 	ldr.w	pc, [sp], #4

080134d4 <SUBGRF_SetTcxoMode>:
{
 80134d4:	b500      	push	{lr}
 80134d6:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80134d8:	f000 0007 	and.w	r0, r0, #7
 80134dc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80134e0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80134e4:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80134e8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80134ec:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80134f0:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80134f4:	2204      	movs	r2, #4
 80134f6:	eb0d 0102 	add.w	r1, sp, r2
 80134fa:	2097      	movs	r0, #151	; 0x97
 80134fc:	f7ff fe7c 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013500:	b003      	add	sp, #12
 8013502:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013508 <SUBGRF_SetRfFrequency>:
{
 8013508:	b510      	push	{r4, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 801350e:	4b12      	ldr	r3, [pc, #72]	; (8013558 <SUBGRF_SetRfFrequency+0x50>)
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	b1d3      	cbz	r3, 801354a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8013514:	4a11      	ldr	r2, [pc, #68]	; (801355c <SUBGRF_SetRfFrequency+0x54>)
 8013516:	2300      	movs	r3, #0
 8013518:	0660      	lsls	r0, r4, #25
 801351a:	09e1      	lsrs	r1, r4, #7
 801351c:	f7ed fb48 	bl	8000bb0 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8013520:	0e03      	lsrs	r3, r0, #24
 8013522:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8013526:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801352a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801352e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013532:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8013536:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801353a:	2204      	movs	r2, #4
 801353c:	eb0d 0102 	add.w	r1, sp, r2
 8013540:	2086      	movs	r0, #134	; 0x86
 8013542:	f7ff fe59 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013546:	b002      	add	sp, #8
 8013548:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 801354a:	f7ff ff4b 	bl	80133e4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801354e:	4b02      	ldr	r3, [pc, #8]	; (8013558 <SUBGRF_SetRfFrequency+0x50>)
 8013550:	2201      	movs	r2, #1
 8013552:	701a      	strb	r2, [r3, #0]
 8013554:	e7de      	b.n	8013514 <SUBGRF_SetRfFrequency+0xc>
 8013556:	bf00      	nop
 8013558:	20003e44 	.word	0x20003e44
 801355c:	01e84800 	.word	0x01e84800

08013560 <SUBGRF_GetPacketType>:
}
 8013560:	4b01      	ldr	r3, [pc, #4]	; (8013568 <SUBGRF_GetPacketType+0x8>)
 8013562:	7818      	ldrb	r0, [r3, #0]
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	20003e47 	.word	0x20003e47

0801356c <SUBGRF_SetBufferBaseAddress>:
{
 801356c:	b500      	push	{lr}
 801356e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8013570:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8013574:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8013578:	2202      	movs	r2, #2
 801357a:	a901      	add	r1, sp, #4
 801357c:	208f      	movs	r0, #143	; 0x8f
 801357e:	f7ff fe3b 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013582:	b003      	add	sp, #12
 8013584:	f85d fb04 	ldr.w	pc, [sp], #4

08013588 <SUBGRF_GetRssiInst>:
{
 8013588:	b500      	push	{lr}
 801358a:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801358c:	2201      	movs	r2, #1
 801358e:	a901      	add	r1, sp, #4
 8013590:	2015      	movs	r0, #21
 8013592:	f7ff fe41 	bl	8013218 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8013596:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801359a:	4240      	negs	r0, r0
}
 801359c:	1040      	asrs	r0, r0, #1
 801359e:	b003      	add	sp, #12
 80135a0:	f85d fb04 	ldr.w	pc, [sp], #4

080135a4 <SUBGRF_GetPacketStatus>:
{
 80135a4:	b510      	push	{r4, lr}
 80135a6:	b082      	sub	sp, #8
 80135a8:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80135aa:	2203      	movs	r2, #3
 80135ac:	a901      	add	r1, sp, #4
 80135ae:	2014      	movs	r0, #20
 80135b0:	f7ff fe32 	bl	8013218 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80135b4:	f7ff ffd4 	bl	8013560 <SUBGRF_GetPacketType>
 80135b8:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80135ba:	b148      	cbz	r0, 80135d0 <SUBGRF_GetPacketStatus+0x2c>
 80135bc:	2801      	cmp	r0, #1
 80135be:	d018      	beq.n	80135f2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80135c0:	2214      	movs	r2, #20
 80135c2:	2100      	movs	r1, #0
 80135c4:	4620      	mov	r0, r4
 80135c6:	f000 fe8e 	bl	80142e6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80135ca:	230f      	movs	r3, #15
 80135cc:	7023      	strb	r3, [r4, #0]
}
 80135ce:	e00e      	b.n	80135ee <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80135d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80135d4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80135d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80135da:	425b      	negs	r3, r3
 80135dc:	105b      	asrs	r3, r3, #1
 80135de:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80135e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80135e4:	425b      	negs	r3, r3
 80135e6:	105b      	asrs	r3, r3, #1
 80135e8:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80135ea:	2300      	movs	r3, #0
 80135ec:	60a3      	str	r3, [r4, #8]
}
 80135ee:	b002      	add	sp, #8
 80135f0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80135f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80135f6:	425b      	negs	r3, r3
 80135f8:	105b      	asrs	r3, r3, #1
 80135fa:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80135fc:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8013600:	3302      	adds	r3, #2
 8013602:	109b      	asrs	r3, r3, #2
 8013604:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8013606:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801360a:	425b      	negs	r3, r3
 801360c:	105b      	asrs	r3, r3, #1
 801360e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8013610:	4b01      	ldr	r3, [pc, #4]	; (8013618 <SUBGRF_GetPacketStatus+0x74>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	6123      	str	r3, [r4, #16]
            break;
 8013616:	e7ea      	b.n	80135ee <SUBGRF_GetPacketStatus+0x4a>
 8013618:	20003e40 	.word	0x20003e40

0801361c <SUBGRF_WriteRegister>:
{
 801361c:	b500      	push	{lr}
 801361e:	b083      	sub	sp, #12
 8013620:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8013624:	2301      	movs	r3, #1
 8013626:	f10d 0207 	add.w	r2, sp, #7
 801362a:	4601      	mov	r1, r0
 801362c:	4802      	ldr	r0, [pc, #8]	; (8013638 <SUBGRF_WriteRegister+0x1c>)
 801362e:	f7f2 fb75 	bl	8005d1c <HAL_SUBGHZ_WriteRegisters>
}
 8013632:	b003      	add	sp, #12
 8013634:	f85d fb04 	ldr.w	pc, [sp], #4
 8013638:	20000290 	.word	0x20000290

0801363c <SUBGRF_SetRxBoosted>:
{
 801363c:	b510      	push	{r4, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8013642:	4b0c      	ldr	r3, [pc, #48]	; (8013674 <SUBGRF_SetRxBoosted+0x38>)
 8013644:	2205      	movs	r2, #5
 8013646:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8013648:	2197      	movs	r1, #151	; 0x97
 801364a:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801364e:	f7ff ffe5 	bl	801361c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8013652:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8013656:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801365a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801365e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8013662:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8013666:	2203      	movs	r2, #3
 8013668:	a901      	add	r1, sp, #4
 801366a:	2082      	movs	r0, #130	; 0x82
 801366c:	f7ff fdc4 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013670:	b002      	add	sp, #8
 8013672:	bd10      	pop	{r4, pc}
 8013674:	20003e46 	.word	0x20003e46

08013678 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8013678:	b500      	push	{lr}
 801367a:	b083      	sub	sp, #12
 801367c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8013680:	2201      	movs	r2, #1
 8013682:	f10d 0107 	add.w	r1, sp, #7
 8013686:	20a0      	movs	r0, #160	; 0xa0
 8013688:	f7ff fdb6 	bl	80131f8 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 801368c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013690:	2b3f      	cmp	r3, #63	; 0x3f
 8013692:	d90f      	bls.n	80136b4 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8013694:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8013696:	2200      	movs	r2, #0
        while( mant > 31 )
 8013698:	e002      	b.n	80136a0 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 801369a:	089b      	lsrs	r3, r3, #2
            exp++;
 801369c:	1c51      	adds	r1, r2, #1
 801369e:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 80136a0:	2b1f      	cmp	r3, #31
 80136a2:	d8fa      	bhi.n	801369a <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80136a4:	00d9      	lsls	r1, r3, #3
 80136a6:	b2c9      	uxtb	r1, r1
 80136a8:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80136aa:	b2c9      	uxtb	r1, r1
 80136ac:	f240 7006 	movw	r0, #1798	; 0x706
 80136b0:	f7ff ffb4 	bl	801361c <SUBGRF_WriteRegister>
}
 80136b4:	b003      	add	sp, #12
 80136b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080136bc <SUBGRF_SetPacketType>:
{
 80136bc:	b500      	push	{lr}
 80136be:	b083      	sub	sp, #12
 80136c0:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 80136c4:	b2c3      	uxtb	r3, r0
 80136c6:	4a09      	ldr	r2, [pc, #36]	; (80136ec <SUBGRF_SetPacketType+0x30>)
 80136c8:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 80136ca:	b143      	cbz	r3, 80136de <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80136cc:	2201      	movs	r2, #1
 80136ce:	f10d 0107 	add.w	r1, sp, #7
 80136d2:	208a      	movs	r0, #138	; 0x8a
 80136d4:	f7ff fd90 	bl	80131f8 <SUBGRF_WriteCommand>
}
 80136d8:	b003      	add	sp, #12
 80136da:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80136de:	2100      	movs	r1, #0
 80136e0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80136e4:	f7ff ff9a 	bl	801361c <SUBGRF_WriteRegister>
 80136e8:	e7f0      	b.n	80136cc <SUBGRF_SetPacketType+0x10>
 80136ea:	bf00      	nop
 80136ec:	20003e47 	.word	0x20003e47

080136f0 <SUBGRF_SetModulationParams>:
{
 80136f0:	b510      	push	{r4, lr}
 80136f2:	b082      	sub	sp, #8
 80136f4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80136f6:	4b3e      	ldr	r3, [pc, #248]	; (80137f0 <SUBGRF_SetModulationParams+0x100>)
 80136f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80136fc:	ab02      	add	r3, sp, #8
 80136fe:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8013702:	7820      	ldrb	r0, [r4, #0]
 8013704:	4b3b      	ldr	r3, [pc, #236]	; (80137f4 <SUBGRF_SetModulationParams+0x104>)
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	4298      	cmp	r0, r3
 801370a:	d106      	bne.n	801371a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 801370c:	7823      	ldrb	r3, [r4, #0]
 801370e:	2b03      	cmp	r3, #3
 8013710:	d82c      	bhi.n	801376c <SUBGRF_SetModulationParams+0x7c>
 8013712:	e8df f003 	tbb	[pc, r3]
 8013716:	4205      	.short	0x4205
 8013718:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801371a:	f7ff ffcf 	bl	80136bc <SUBGRF_SetPacketType>
 801371e:	e7f5      	b.n	801370c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8013720:	6862      	ldr	r2, [r4, #4]
 8013722:	4b35      	ldr	r3, [pc, #212]	; (80137f8 <SUBGRF_SetModulationParams+0x108>)
 8013724:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8013728:	0c1a      	lsrs	r2, r3, #16
 801372a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801372e:	0a1a      	lsrs	r2, r3, #8
 8013730:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8013734:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8013738:	7b23      	ldrb	r3, [r4, #12]
 801373a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801373e:	7b63      	ldrb	r3, [r4, #13]
 8013740:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8013744:	68a1      	ldr	r1, [r4, #8]
 8013746:	4a2d      	ldr	r2, [pc, #180]	; (80137fc <SUBGRF_SetModulationParams+0x10c>)
 8013748:	2300      	movs	r3, #0
 801374a:	0648      	lsls	r0, r1, #25
 801374c:	09c9      	lsrs	r1, r1, #7
 801374e:	f7ed fa2f 	bl	8000bb0 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8013752:	0c03      	lsrs	r3, r0, #16
 8013754:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8013758:	0a03      	lsrs	r3, r0, #8
 801375a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 801375e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8013762:	2208      	movs	r2, #8
 8013764:	4669      	mov	r1, sp
 8013766:	208b      	movs	r0, #139	; 0x8b
 8013768:	f7ff fd46 	bl	80131f8 <SUBGRF_WriteCommand>
}
 801376c:	b002      	add	sp, #8
 801376e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8013770:	6922      	ldr	r2, [r4, #16]
 8013772:	4b21      	ldr	r3, [pc, #132]	; (80137f8 <SUBGRF_SetModulationParams+0x108>)
 8013774:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8013778:	0c1a      	lsrs	r2, r3, #16
 801377a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801377e:	0a1a      	lsrs	r2, r3, #8
 8013780:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8013784:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8013788:	7d23      	ldrb	r3, [r4, #20]
 801378a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801378e:	2204      	movs	r2, #4
 8013790:	4669      	mov	r1, sp
 8013792:	208b      	movs	r0, #139	; 0x8b
 8013794:	f7ff fd30 	bl	80131f8 <SUBGRF_WriteCommand>
        break;
 8013798:	e7e8      	b.n	801376c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801379a:	7e23      	ldrb	r3, [r4, #24]
 801379c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80137a0:	7e63      	ldrb	r3, [r4, #25]
 80137a2:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80137a6:	7ea3      	ldrb	r3, [r4, #26]
 80137a8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80137ac:	7ee3      	ldrb	r3, [r4, #27]
 80137ae:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80137b2:	2204      	movs	r2, #4
 80137b4:	4669      	mov	r1, sp
 80137b6:	208b      	movs	r0, #139	; 0x8b
 80137b8:	f7ff fd1e 	bl	80131f8 <SUBGRF_WriteCommand>
        break;
 80137bc:	e7d6      	b.n	801376c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80137be:	6862      	ldr	r2, [r4, #4]
 80137c0:	4b0d      	ldr	r3, [pc, #52]	; (80137f8 <SUBGRF_SetModulationParams+0x108>)
 80137c2:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80137c6:	0c1a      	lsrs	r2, r3, #16
 80137c8:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80137cc:	0a1a      	lsrs	r2, r3, #8
 80137ce:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 80137d2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80137d6:	7b23      	ldrb	r3, [r4, #12]
 80137d8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80137dc:	7b63      	ldrb	r3, [r4, #13]
 80137de:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80137e2:	2205      	movs	r2, #5
 80137e4:	4669      	mov	r1, sp
 80137e6:	208b      	movs	r0, #139	; 0x8b
 80137e8:	f7ff fd06 	bl	80131f8 <SUBGRF_WriteCommand>
}
 80137ec:	e7be      	b.n	801376c <SUBGRF_SetModulationParams+0x7c>
 80137ee:	bf00      	nop
 80137f0:	08014c54 	.word	0x08014c54
 80137f4:	20003e47 	.word	0x20003e47
 80137f8:	3d090000 	.word	0x3d090000
 80137fc:	01e84800 	.word	0x01e84800

08013800 <SUBGRF_ReadRegister>:
{
 8013800:	b500      	push	{lr}
 8013802:	b083      	sub	sp, #12
 8013804:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8013806:	2301      	movs	r3, #1
 8013808:	f10d 0207 	add.w	r2, sp, #7
 801380c:	4803      	ldr	r0, [pc, #12]	; (801381c <SUBGRF_ReadRegister+0x1c>)
 801380e:	f7f2 fad5 	bl	8005dbc <HAL_SUBGHZ_ReadRegisters>
}
 8013812:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013816:	b003      	add	sp, #12
 8013818:	f85d fb04 	ldr.w	pc, [sp], #4
 801381c:	20000290 	.word	0x20000290

08013820 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8013820:	b510      	push	{r4, lr}
 8013822:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8013824:	f7ef fade 	bl	8002de4 <RBI_IsDCDC>
 8013828:	2801      	cmp	r0, #1
 801382a:	d000      	beq.n	801382e <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 801382c:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801382e:	f640 1023 	movw	r0, #2339	; 0x923
 8013832:	f7ff ffe5 	bl	8013800 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8013836:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801383a:	4321      	orrs	r1, r4
 801383c:	f640 1023 	movw	r0, #2339	; 0x923
 8013840:	f7ff feec 	bl	801361c <SUBGRF_WriteRegister>
}
 8013844:	e7f2      	b.n	801382c <Radio_SMPS_Set+0xc>
	...

08013848 <SUBGRF_Init>:
{
 8013848:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 801384a:	b108      	cbz	r0, 8013850 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 801384c:	4a16      	ldr	r2, [pc, #88]	; (80138a8 <SUBGRF_Init+0x60>)
 801384e:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8013850:	f7ee f90e 	bl	8001a70 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8013854:	2002      	movs	r0, #2
 8013856:	f7ff ffe3 	bl	8013820 <Radio_SMPS_Set>
    ImageCalibrated = false;
 801385a:	2000      	movs	r0, #0
 801385c:	4b13      	ldr	r3, [pc, #76]	; (80138ac <SUBGRF_Init+0x64>)
 801385e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8013860:	f7ff fcf0 	bl	8013244 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8013864:	f7ef faba 	bl	8002ddc <RBI_IsTCXO>
 8013868:	2801      	cmp	r0, #1
 801386a:	d00f      	beq.n	801388c <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801386c:	2120      	movs	r1, #32
 801386e:	f640 1011 	movw	r0, #2321	; 0x911
 8013872:	f7ff fed3 	bl	801361c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8013876:	2120      	movs	r1, #32
 8013878:	f640 1012 	movw	r0, #2322	; 0x912
 801387c:	f7ff fece 	bl	801361c <SUBGRF_WriteRegister>
    RBI_Init();
 8013880:	f7ef faa0 	bl	8002dc4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8013884:	4b0a      	ldr	r3, [pc, #40]	; (80138b0 <SUBGRF_Init+0x68>)
 8013886:	2201      	movs	r2, #1
 8013888:	701a      	strb	r2, [r3, #0]
}
 801388a:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801388c:	2140      	movs	r1, #64	; 0x40
 801388e:	f7ff fe21 	bl	80134d4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8013892:	2100      	movs	r1, #0
 8013894:	f640 1011 	movw	r0, #2321	; 0x911
 8013898:	f7ff fec0 	bl	801361c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 801389c:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80138a0:	f7ff fd7f 	bl	80133a2 <SUBGRF_Calibrate>
 80138a4:	e7ec      	b.n	8013880 <SUBGRF_Init+0x38>
 80138a6:	bf00      	nop
 80138a8:	20003e48 	.word	0x20003e48
 80138ac:	20003e44 	.word	0x20003e44
 80138b0:	20003e46 	.word	0x20003e46

080138b4 <SUBGRF_SetSleep>:
{
 80138b4:	b510      	push	{r4, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80138ba:	2000      	movs	r0, #0
 80138bc:	f7ef fa86 	bl	8002dcc <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80138c0:	2002      	movs	r0, #2
 80138c2:	f7ff ffad 	bl	8013820 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80138c6:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80138ca:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80138ce:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80138d0:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80138d4:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80138d6:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80138da:	2201      	movs	r2, #1
 80138dc:	f10d 0107 	add.w	r1, sp, #7
 80138e0:	2084      	movs	r0, #132	; 0x84
 80138e2:	f7ff fc89 	bl	80131f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80138e6:	4b02      	ldr	r3, [pc, #8]	; (80138f0 <SUBGRF_SetSleep+0x3c>)
 80138e8:	2200      	movs	r2, #0
 80138ea:	701a      	strb	r2, [r3, #0]
}
 80138ec:	b002      	add	sp, #8
 80138ee:	bd10      	pop	{r4, pc}
 80138f0:	20003e46 	.word	0x20003e46

080138f4 <SUBGRF_SetWhiteningSeed>:
{
 80138f4:	b510      	push	{r4, lr}
 80138f6:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80138f8:	f7ff fe32 	bl	8013560 <SUBGRF_GetPacketType>
 80138fc:	b100      	cbz	r0, 8013900 <SUBGRF_SetWhiteningSeed+0xc>
}
 80138fe:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8013900:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013904:	f7ff ff7c 	bl	8013800 <SUBGRF_ReadRegister>
 8013908:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801390c:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8013910:	4301      	orrs	r1, r0
 8013912:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8013916:	f7ff fe81 	bl	801361c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801391a:	b2e1      	uxtb	r1, r4
 801391c:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8013920:	f7ff fe7c 	bl	801361c <SUBGRF_WriteRegister>
}
 8013924:	e7eb      	b.n	80138fe <SUBGRF_SetWhiteningSeed+0xa>

08013926 <SUBGRF_SetTxParams>:
{
 8013926:	b570      	push	{r4, r5, r6, lr}
 8013928:	b082      	sub	sp, #8
 801392a:	460c      	mov	r4, r1
 801392c:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 801392e:	2801      	cmp	r0, #1
 8013930:	d035      	beq.n	801399e <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8013932:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8013936:	f7ff ff63 	bl	8013800 <SUBGRF_ReadRegister>
 801393a:	f040 011e 	orr.w	r1, r0, #30
 801393e:	b2c9      	uxtb	r1, r1
 8013940:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8013944:	f7ff fe6a 	bl	801361c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8013948:	2001      	movs	r0, #1
 801394a:	f7ef fa4f 	bl	8002dec <RBI_GetRFOMaxPowerConfig>
 801394e:	4605      	mov	r5, r0
        if (power > max_power)
 8013950:	4284      	cmp	r4, r0
 8013952:	dd00      	ble.n	8013956 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8013954:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8013956:	2d14      	cmp	r5, #20
 8013958:	d054      	beq.n	8013a04 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 801395a:	2d11      	cmp	r5, #17
 801395c:	d05c      	beq.n	8013a18 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 801395e:	2d0e      	cmp	r5, #14
 8013960:	d064      	beq.n	8013a2c <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8013962:	2301      	movs	r3, #1
 8013964:	2200      	movs	r2, #0
 8013966:	2107      	movs	r1, #7
 8013968:	2004      	movs	r0, #4
 801396a:	f7ff fd81 	bl	8013470 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801396e:	1b64      	subs	r4, r4, r5
 8013970:	3416      	adds	r4, #22
 8013972:	b264      	sxtb	r4, r4
        if (power < -9)
 8013974:	f114 0f09 	cmn.w	r4, #9
 8013978:	da01      	bge.n	801397e <SUBGRF_SetTxParams+0x58>
            power = -9;
 801397a:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801397e:	2138      	movs	r1, #56	; 0x38
 8013980:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8013984:	f7ff fe4a 	bl	801361c <SUBGRF_WriteRegister>
    buf[0] = power;
 8013988:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 801398c:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8013990:	2202      	movs	r2, #2
 8013992:	a901      	add	r1, sp, #4
 8013994:	208e      	movs	r0, #142	; 0x8e
 8013996:	f7ff fc2f 	bl	80131f8 <SUBGRF_WriteCommand>
}
 801399a:	b002      	add	sp, #8
 801399c:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801399e:	2000      	movs	r0, #0
 80139a0:	f7ef fa24 	bl	8002dec <RBI_GetRFOMaxPowerConfig>
 80139a4:	4605      	mov	r5, r0
        if (power >  max_power)
 80139a6:	4284      	cmp	r4, r0
 80139a8:	dd00      	ble.n	80139ac <SUBGRF_SetTxParams+0x86>
          power = max_power;
 80139aa:	b244      	sxtb	r4, r0
        if (max_power == 14)
 80139ac:	2d0e      	cmp	r5, #14
 80139ae:	d015      	beq.n	80139dc <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 80139b0:	2d0a      	cmp	r5, #10
 80139b2:	d01d      	beq.n	80139f0 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 80139b4:	2301      	movs	r3, #1
 80139b6:	461a      	mov	r2, r3
 80139b8:	2100      	movs	r1, #0
 80139ba:	2006      	movs	r0, #6
 80139bc:	f7ff fd58 	bl	8013470 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80139c0:	1b64      	subs	r4, r4, r5
 80139c2:	340e      	adds	r4, #14
 80139c4:	b264      	sxtb	r4, r4
        if (power < -17)
 80139c6:	f114 0f11 	cmn.w	r4, #17
 80139ca:	da01      	bge.n	80139d0 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 80139cc:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80139d0:	2118      	movs	r1, #24
 80139d2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80139d6:	f7ff fe21 	bl	801361c <SUBGRF_WriteRegister>
 80139da:	e7d5      	b.n	8013988 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80139dc:	2301      	movs	r3, #1
 80139de:	461a      	mov	r2, r3
 80139e0:	2100      	movs	r1, #0
 80139e2:	2004      	movs	r0, #4
 80139e4:	f7ff fd44 	bl	8013470 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80139e8:	1b64      	subs	r4, r4, r5
 80139ea:	340e      	adds	r4, #14
 80139ec:	b264      	sxtb	r4, r4
 80139ee:	e7ea      	b.n	80139c6 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80139f0:	2301      	movs	r3, #1
 80139f2:	461a      	mov	r2, r3
 80139f4:	2100      	movs	r1, #0
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7ff fd3a 	bl	8013470 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80139fc:	1b64      	subs	r4, r4, r5
 80139fe:	340d      	adds	r4, #13
 8013a00:	b264      	sxtb	r4, r4
 8013a02:	e7e0      	b.n	80139c6 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8013a04:	2301      	movs	r3, #1
 8013a06:	2200      	movs	r2, #0
 8013a08:	2105      	movs	r1, #5
 8013a0a:	2003      	movs	r0, #3
 8013a0c:	f7ff fd30 	bl	8013470 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8013a10:	1b64      	subs	r4, r4, r5
 8013a12:	3416      	adds	r4, #22
 8013a14:	b264      	sxtb	r4, r4
 8013a16:	e7ad      	b.n	8013974 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8013a18:	2301      	movs	r3, #1
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	2103      	movs	r1, #3
 8013a1e:	2002      	movs	r0, #2
 8013a20:	f7ff fd26 	bl	8013470 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8013a24:	1b64      	subs	r4, r4, r5
 8013a26:	3416      	adds	r4, #22
 8013a28:	b264      	sxtb	r4, r4
 8013a2a:	e7a3      	b.n	8013974 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	2200      	movs	r2, #0
 8013a30:	2102      	movs	r1, #2
 8013a32:	4608      	mov	r0, r1
 8013a34:	f7ff fd1c 	bl	8013470 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8013a38:	1b64      	subs	r4, r4, r5
 8013a3a:	340e      	adds	r4, #14
 8013a3c:	b264      	sxtb	r4, r4
 8013a3e:	e799      	b.n	8013974 <SUBGRF_SetTxParams+0x4e>

08013a40 <SUBGRF_GetRxBufferStatus>:
{
 8013a40:	b530      	push	{r4, r5, lr}
 8013a42:	b083      	sub	sp, #12
 8013a44:	4605      	mov	r5, r0
 8013a46:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8013a48:	2202      	movs	r2, #2
 8013a4a:	a901      	add	r1, sp, #4
 8013a4c:	2013      	movs	r0, #19
 8013a4e:	f7ff fbe3 	bl	8013218 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8013a52:	f7ff fd85 	bl	8013560 <SUBGRF_GetPacketType>
 8013a56:	2801      	cmp	r0, #1
 8013a58:	d007      	beq.n	8013a6a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8013a5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013a5e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8013a60:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013a64:	7023      	strb	r3, [r4, #0]
}
 8013a66:	b003      	add	sp, #12
 8013a68:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8013a6a:	4b05      	ldr	r3, [pc, #20]	; (8013a80 <SUBGRF_GetRxBufferStatus+0x40>)
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	d1f2      	bne.n	8013a5a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8013a74:	f240 7002 	movw	r0, #1794	; 0x702
 8013a78:	f7ff fec2 	bl	8013800 <SUBGRF_ReadRegister>
 8013a7c:	7028      	strb	r0, [r5, #0]
 8013a7e:	e7ef      	b.n	8013a60 <SUBGRF_GetRxBufferStatus+0x20>
 8013a80:	20003e45 	.word	0x20003e45

08013a84 <SUBGRF_WriteRegisters>:
{
 8013a84:	b510      	push	{r4, lr}
 8013a86:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a88:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013a8c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8013a8e:	460a      	mov	r2, r1
 8013a90:	4601      	mov	r1, r0
 8013a92:	4803      	ldr	r0, [pc, #12]	; (8013aa0 <SUBGRF_WriteRegisters+0x1c>)
 8013a94:	f7f2 f942 	bl	8005d1c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a98:	f384 8810 	msr	PRIMASK, r4
}
 8013a9c:	bd10      	pop	{r4, pc}
 8013a9e:	bf00      	nop
 8013aa0:	20000290 	.word	0x20000290

08013aa4 <SUBGRF_SetSyncWord>:
{
 8013aa4:	b508      	push	{r3, lr}
 8013aa6:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8013aa8:	2208      	movs	r2, #8
 8013aaa:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8013aae:	f7ff ffe9 	bl	8013a84 <SUBGRF_WriteRegisters>
}
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	bd08      	pop	{r3, pc}

08013ab6 <SUBGRF_SetCrcSeed>:
{
 8013ab6:	b500      	push	{lr}
 8013ab8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8013aba:	0a03      	lsrs	r3, r0, #8
 8013abc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8013ac0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013ac4:	f7ff fd4c 	bl	8013560 <SUBGRF_GetPacketType>
 8013ac8:	b110      	cbz	r0, 8013ad0 <SUBGRF_SetCrcSeed+0x1a>
}
 8013aca:	b003      	add	sp, #12
 8013acc:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8013ad0:	2202      	movs	r2, #2
 8013ad2:	a901      	add	r1, sp, #4
 8013ad4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8013ad8:	f7ff ffd4 	bl	8013a84 <SUBGRF_WriteRegisters>
}
 8013adc:	e7f5      	b.n	8013aca <SUBGRF_SetCrcSeed+0x14>

08013ade <SUBGRF_SetCrcPolynomial>:
{
 8013ade:	b500      	push	{lr}
 8013ae0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8013ae2:	0a03      	lsrs	r3, r0, #8
 8013ae4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8013ae8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8013aec:	f7ff fd38 	bl	8013560 <SUBGRF_GetPacketType>
 8013af0:	b110      	cbz	r0, 8013af8 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8013af2:	b003      	add	sp, #12
 8013af4:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8013af8:	2202      	movs	r2, #2
 8013afa:	a901      	add	r1, sp, #4
 8013afc:	f240 60be 	movw	r0, #1726	; 0x6be
 8013b00:	f7ff ffc0 	bl	8013a84 <SUBGRF_WriteRegisters>
}
 8013b04:	e7f5      	b.n	8013af2 <SUBGRF_SetCrcPolynomial+0x14>
	...

08013b08 <SUBGRF_SetPacketParams>:
{
 8013b08:	b510      	push	{r4, lr}
 8013b0a:	b084      	sub	sp, #16
 8013b0c:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8013b0e:	ab01      	add	r3, sp, #4
 8013b10:	4a33      	ldr	r2, [pc, #204]	; (8013be0 <SUBGRF_SetPacketParams+0xd8>)
 8013b12:	ca07      	ldmia	r2, {r0, r1, r2}
 8013b14:	c303      	stmia	r3!, {r0, r1}
 8013b16:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8013b18:	7820      	ldrb	r0, [r4, #0]
 8013b1a:	4b32      	ldr	r3, [pc, #200]	; (8013be4 <SUBGRF_SetPacketParams+0xdc>)
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	4298      	cmp	r0, r3
 8013b20:	d106      	bne.n	8013b30 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8013b22:	7823      	ldrb	r3, [r4, #0]
 8013b24:	2b03      	cmp	r3, #3
 8013b26:	d82a      	bhi.n	8013b7e <SUBGRF_SetPacketParams+0x76>
 8013b28:	e8df f003 	tbb	[pc, r3]
 8013b2c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8013b30:	f7ff fdc4 	bl	80136bc <SUBGRF_SetPacketType>
 8013b34:	e7f5      	b.n	8013b22 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8013b36:	7a63      	ldrb	r3, [r4, #9]
 8013b38:	2bf1      	cmp	r3, #241	; 0xf1
 8013b3a:	d022      	beq.n	8013b82 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8013b3c:	2bf2      	cmp	r3, #242	; 0xf2
 8013b3e:	d02a      	beq.n	8013b96 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8013b40:	8862      	ldrh	r2, [r4, #2]
 8013b42:	0a11      	lsrs	r1, r2, #8
 8013b44:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8013b48:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8013b4c:	7922      	ldrb	r2, [r4, #4]
 8013b4e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8013b52:	7962      	ldrb	r2, [r4, #5]
 8013b54:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8013b58:	79a2      	ldrb	r2, [r4, #6]
 8013b5a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8013b5e:	79e2      	ldrb	r2, [r4, #7]
 8013b60:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8013b64:	7a22      	ldrb	r2, [r4, #8]
 8013b66:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8013b6a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8013b6e:	7aa3      	ldrb	r3, [r4, #10]
 8013b70:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8013b74:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8013b76:	a901      	add	r1, sp, #4
 8013b78:	208c      	movs	r0, #140	; 0x8c
 8013b7a:	f7ff fb3d 	bl	80131f8 <SUBGRF_WriteCommand>
}
 8013b7e:	b004      	add	sp, #16
 8013b80:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8013b82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013b86:	f7ff ff96 	bl	8013ab6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8013b8a:	f248 0005 	movw	r0, #32773	; 0x8005
 8013b8e:	f7ff ffa6 	bl	8013ade <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8013b92:	2302      	movs	r3, #2
 8013b94:	e7d4      	b.n	8013b40 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8013b96:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8013b9a:	f7ff ff8c 	bl	8013ab6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8013b9e:	f241 0021 	movw	r0, #4129	; 0x1021
 8013ba2:	f7ff ff9c 	bl	8013ade <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8013ba6:	2306      	movs	r3, #6
 8013ba8:	e7ca      	b.n	8013b40 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8013baa:	7b23      	ldrb	r3, [r4, #12]
 8013bac:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8013bb0:	2201      	movs	r2, #1
        break;
 8013bb2:	e7e0      	b.n	8013b76 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8013bb4:	89e3      	ldrh	r3, [r4, #14]
 8013bb6:	0a1a      	lsrs	r2, r3, #8
 8013bb8:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8013bbc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8013bc0:	7c23      	ldrb	r3, [r4, #16]
 8013bc2:	4a09      	ldr	r2, [pc, #36]	; (8013be8 <SUBGRF_SetPacketParams+0xe0>)
 8013bc4:	7013      	strb	r3, [r2, #0]
 8013bc6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8013bca:	7c63      	ldrb	r3, [r4, #17]
 8013bcc:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8013bd0:	7ca3      	ldrb	r3, [r4, #18]
 8013bd2:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8013bd6:	7ce3      	ldrb	r3, [r4, #19]
 8013bd8:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8013bdc:	2206      	movs	r2, #6
        break;
 8013bde:	e7ca      	b.n	8013b76 <SUBGRF_SetPacketParams+0x6e>
 8013be0:	08014c5c 	.word	0x08014c5c
 8013be4:	20003e47 	.word	0x20003e47
 8013be8:	20003e45 	.word	0x20003e45

08013bec <SUBGRF_ReadRegisters>:
{
 8013bec:	b510      	push	{r4, lr}
 8013bee:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013bf0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013bf4:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8013bf6:	460a      	mov	r2, r1
 8013bf8:	4601      	mov	r1, r0
 8013bfa:	4803      	ldr	r0, [pc, #12]	; (8013c08 <SUBGRF_ReadRegisters+0x1c>)
 8013bfc:	f7f2 f8de 	bl	8005dbc <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c00:	f384 8810 	msr	PRIMASK, r4
}
 8013c04:	bd10      	pop	{r4, pc}
 8013c06:	bf00      	nop
 8013c08:	20000290 	.word	0x20000290

08013c0c <SUBGRF_GetRandom>:
{
 8013c0c:	b570      	push	{r4, r5, r6, lr}
 8013c0e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8013c10:	2600      	movs	r6, #0
 8013c12:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8013c14:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013c18:	f7ff fdf2 	bl	8013800 <SUBGRF_ReadRegister>
 8013c1c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8013c1e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8013c22:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013c26:	f7ff fcf9 	bl	801361c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8013c2a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013c2e:	f7ff fde7 	bl	8013800 <SUBGRF_ReadRegister>
 8013c32:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8013c34:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8013c38:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013c3c:	f7ff fcee 	bl	801361c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8013c40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013c44:	f7ff fb32 	bl	80132ac <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8013c48:	2204      	movs	r2, #4
 8013c4a:	eb0d 0102 	add.w	r1, sp, r2
 8013c4e:	f640 0019 	movw	r0, #2073	; 0x819
 8013c52:	f7ff ffcb 	bl	8013bec <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8013c56:	4630      	mov	r0, r6
 8013c58:	f7ff faf4 	bl	8013244 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8013c62:	f7ff fcdb 	bl	801361c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8013c66:	4621      	mov	r1, r4
 8013c68:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8013c6c:	f7ff fcd6 	bl	801361c <SUBGRF_WriteRegister>
}
 8013c70:	9801      	ldr	r0, [sp, #4]
 8013c72:	b002      	add	sp, #8
 8013c74:	bd70      	pop	{r4, r5, r6, pc}
	...

08013c78 <SUBGRF_WriteBuffer>:
{
 8013c78:	b510      	push	{r4, lr}
 8013c7a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c7c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013c80:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8013c82:	460a      	mov	r2, r1
 8013c84:	4601      	mov	r1, r0
 8013c86:	4803      	ldr	r0, [pc, #12]	; (8013c94 <SUBGRF_WriteBuffer+0x1c>)
 8013c88:	f7f2 f9ee 	bl	8006068 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c8c:	f384 8810 	msr	PRIMASK, r4
}
 8013c90:	bd10      	pop	{r4, pc}
 8013c92:	bf00      	nop
 8013c94:	20000290 	.word	0x20000290

08013c98 <SUBGRF_SetPayload>:
{
 8013c98:	b508      	push	{r3, lr}
 8013c9a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8013c9c:	4601      	mov	r1, r0
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	f7ff ffea 	bl	8013c78 <SUBGRF_WriteBuffer>
}
 8013ca4:	bd08      	pop	{r3, pc}

08013ca6 <SUBGRF_SendPayload>:
{
 8013ca6:	b510      	push	{r4, lr}
 8013ca8:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8013caa:	f7ff fff5 	bl	8013c98 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f7ff fae2 	bl	8013278 <SUBGRF_SetTx>
}
 8013cb4:	bd10      	pop	{r4, pc}
	...

08013cb8 <SUBGRF_ReadBuffer>:
{
 8013cb8:	b510      	push	{r4, lr}
 8013cba:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cbc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013cc0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8013cc2:	460a      	mov	r2, r1
 8013cc4:	4601      	mov	r1, r0
 8013cc6:	4803      	ldr	r0, [pc, #12]	; (8013cd4 <SUBGRF_ReadBuffer+0x1c>)
 8013cc8:	f7f2 fa18 	bl	80060fc <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ccc:	f384 8810 	msr	PRIMASK, r4
}
 8013cd0:	bd10      	pop	{r4, pc}
 8013cd2:	bf00      	nop
 8013cd4:	20000290 	.word	0x20000290

08013cd8 <SUBGRF_GetPayload>:
{
 8013cd8:	b570      	push	{r4, r5, r6, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	4606      	mov	r6, r0
 8013cde:	460c      	mov	r4, r1
 8013ce0:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8013ce8:	f10d 0107 	add.w	r1, sp, #7
 8013cec:	4620      	mov	r0, r4
 8013cee:	f7ff fea7 	bl	8013a40 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8013cf2:	7822      	ldrb	r2, [r4, #0]
 8013cf4:	42aa      	cmp	r2, r5
 8013cf6:	d902      	bls.n	8013cfe <SUBGRF_GetPayload+0x26>
        return 1;
 8013cf8:	2001      	movs	r0, #1
}
 8013cfa:	b002      	add	sp, #8
 8013cfc:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8013cfe:	4631      	mov	r1, r6
 8013d00:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8013d04:	f7ff ffd8 	bl	8013cb8 <SUBGRF_ReadBuffer>
    return 0;
 8013d08:	2000      	movs	r0, #0
 8013d0a:	e7f6      	b.n	8013cfa <SUBGRF_GetPayload+0x22>

08013d0c <SUBGRF_SetSwitch>:
{
 8013d0c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8013d0e:	2901      	cmp	r1, #1
 8013d10:	d003      	beq.n	8013d1a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8013d12:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8013d14:	f7ef f85a 	bl	8002dcc <RBI_ConfigRFSwitch>
}
 8013d18:	bd10      	pop	{r4, pc}
 8013d1a:	4604      	mov	r4, r0
 8013d1c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8013d1e:	2c01      	cmp	r4, #1
 8013d20:	d003      	beq.n	8013d2a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8013d22:	2c02      	cmp	r4, #2
 8013d24:	d1f6      	bne.n	8013d14 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8013d26:	2003      	movs	r0, #3
 8013d28:	e7f4      	b.n	8013d14 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8013d2a:	2004      	movs	r0, #4
 8013d2c:	f7ff fd78 	bl	8013820 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8013d30:	2002      	movs	r0, #2
 8013d32:	e7f6      	b.n	8013d22 <SUBGRF_SetSwitch+0x16>

08013d34 <SUBGRF_SetRfTxPower>:
{
 8013d34:	b538      	push	{r3, r4, r5, lr}
 8013d36:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8013d38:	f7ef f84c 	bl	8002dd4 <RBI_GetTxConfig>
    switch (TxConfig)
 8013d3c:	b148      	cbz	r0, 8013d52 <SUBGRF_SetRfTxPower+0x1e>
 8013d3e:	2802      	cmp	r0, #2
 8013d40:	d10d      	bne.n	8013d5e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8013d42:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8013d44:	2202      	movs	r2, #2
 8013d46:	4621      	mov	r1, r4
 8013d48:	4628      	mov	r0, r5
 8013d4a:	f7ff fdec 	bl	8013926 <SUBGRF_SetTxParams>
}
 8013d4e:	4628      	mov	r0, r5
 8013d50:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8013d52:	2c0f      	cmp	r4, #15
 8013d54:	dc01      	bgt.n	8013d5a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8013d56:	2501      	movs	r5, #1
 8013d58:	e7f4      	b.n	8013d44 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8013d5a:	2502      	movs	r5, #2
 8013d5c:	e7f2      	b.n	8013d44 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8013d5e:	2501      	movs	r5, #1
 8013d60:	e7f0      	b.n	8013d44 <SUBGRF_SetRfTxPower+0x10>

08013d62 <SUBGRF_GetRadioWakeUpTime>:
}
 8013d62:	2001      	movs	r0, #1
 8013d64:	4770      	bx	lr
	...

08013d68 <HAL_SUBGHZ_TxCpltCallback>:
{
 8013d68:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8013d6a:	4b02      	ldr	r3, [pc, #8]	; (8013d74 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	2001      	movs	r0, #1
 8013d70:	4798      	blx	r3
}
 8013d72:	bd08      	pop	{r3, pc}
 8013d74:	20003e48 	.word	0x20003e48

08013d78 <HAL_SUBGHZ_RxCpltCallback>:
{
 8013d78:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8013d7a:	4b02      	ldr	r3, [pc, #8]	; (8013d84 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	2002      	movs	r0, #2
 8013d80:	4798      	blx	r3
}
 8013d82:	bd08      	pop	{r3, pc}
 8013d84:	20003e48 	.word	0x20003e48

08013d88 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8013d88:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8013d8a:	4b02      	ldr	r3, [pc, #8]	; (8013d94 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2040      	movs	r0, #64	; 0x40
 8013d90:	4798      	blx	r3
}
 8013d92:	bd08      	pop	{r3, pc}
 8013d94:	20003e48 	.word	0x20003e48

08013d98 <HAL_SUBGHZ_CADStatusCallback>:
{
 8013d98:	b508      	push	{r3, lr}
    switch (cadstatus)
 8013d9a:	b111      	cbz	r1, 8013da2 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8013d9c:	2901      	cmp	r1, #1
 8013d9e:	d005      	beq.n	8013dac <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8013da0:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8013da2:	4b05      	ldr	r3, [pc, #20]	; (8013db8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	2080      	movs	r0, #128	; 0x80
 8013da8:	4798      	blx	r3
            break;
 8013daa:	e7f9      	b.n	8013da0 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8013dac:	4b02      	ldr	r3, [pc, #8]	; (8013db8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8013db4:	4798      	blx	r3
}
 8013db6:	e7f3      	b.n	8013da0 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8013db8:	20003e48 	.word	0x20003e48

08013dbc <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8013dbc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8013dbe:	4b03      	ldr	r3, [pc, #12]	; (8013dcc <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013dc6:	4798      	blx	r3
}
 8013dc8:	bd08      	pop	{r3, pc}
 8013dca:	bf00      	nop
 8013dcc:	20003e48 	.word	0x20003e48

08013dd0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8013dd0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8013dd2:	4b02      	ldr	r3, [pc, #8]	; (8013ddc <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	2020      	movs	r0, #32
 8013dd8:	4798      	blx	r3
}
 8013dda:	bd08      	pop	{r3, pc}
 8013ddc:	20003e48 	.word	0x20003e48

08013de0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8013de0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8013de2:	4b02      	ldr	r3, [pc, #8]	; (8013dec <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2004      	movs	r0, #4
 8013de8:	4798      	blx	r3
}
 8013dea:	bd08      	pop	{r3, pc}
 8013dec:	20003e48 	.word	0x20003e48

08013df0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8013df0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8013df2:	4b02      	ldr	r3, [pc, #8]	; (8013dfc <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	2008      	movs	r0, #8
 8013df8:	4798      	blx	r3
}
 8013dfa:	bd08      	pop	{r3, pc}
 8013dfc:	20003e48 	.word	0x20003e48

08013e00 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8013e00:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8013e02:	4b02      	ldr	r3, [pc, #8]	; (8013e0c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2010      	movs	r0, #16
 8013e08:	4798      	blx	r3
}
 8013e0a:	bd08      	pop	{r3, pc}
 8013e0c:	20003e48 	.word	0x20003e48

08013e10 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8013e10:	4601      	mov	r1, r0
 8013e12:	b188      	cbz	r0, 8013e38 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8013e14:	2300      	movs	r3, #0
 8013e16:	2b15      	cmp	r3, #21
 8013e18:	d80d      	bhi.n	8013e36 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	4a07      	ldr	r2, [pc, #28]	; (8013e3c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8013e1e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013e22:	428a      	cmp	r2, r1
 8013e24:	d802      	bhi.n	8013e2c <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8013e26:	3301      	adds	r3, #1
 8013e28:	b2db      	uxtb	r3, r3
 8013e2a:	e7f4      	b.n	8013e16 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8013e2c:	4b03      	ldr	r3, [pc, #12]	; (8013e3c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8013e2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8013e32:	7900      	ldrb	r0, [r0, #4]
 8013e34:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8013e36:	e7fe      	b.n	8013e36 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8013e38:	201f      	movs	r0, #31
}
 8013e3a:	4770      	bx	lr
 8013e3c:	08015b14 	.word	0x08015b14

08013e40 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8013e40:	b570      	push	{r4, r5, r6, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	4606      	mov	r6, r0
 8013e46:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8013e48:	4b1d      	ldr	r3, [pc, #116]	; (8013ec0 <SUBGRF_GetCFO+0x80>)
 8013e4a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8013e4c:	f640 0007 	movw	r0, #2055	; 0x807
 8013e50:	f7ff fcd6 	bl	8013800 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8013e54:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8013e58:	3308      	adds	r3, #8
 8013e5a:	446b      	add	r3, sp
 8013e5c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8013e60:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8013e64:	3b01      	subs	r3, #1
 8013e66:	fa05 f303 	lsl.w	r3, r5, r3
 8013e6a:	4d16      	ldr	r5, [pc, #88]	; (8013ec4 <SUBGRF_GetCFO+0x84>)
 8013e6c:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8013e70:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8013e74:	2a07      	cmp	r2, #7
 8013e76:	d921      	bls.n	8013ebc <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8013e78:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 8013e7a:	fb00 f202 	mul.w	r2, r0, r2
 8013e7e:	2a03      	cmp	r2, #3
 8013e80:	d800      	bhi.n	8013e84 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8013e82:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8013e84:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8013e88:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8013e8c:	f7ff fcb8 	bl	8013800 <SUBGRF_ReadRegister>
 8013e90:	0200      	lsls	r0, r0, #8
 8013e92:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8013e96:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8013e9a:	f7ff fcb1 	bl	8013800 <SUBGRF_ReadRegister>
 8013e9e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8013ea0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8013ea4:	d003      	beq.n	8013eae <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8013ea6:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 8013eaa:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8013eae:	096d      	lsrs	r5, r5, #5
 8013eb0:	fb05 f000 	mul.w	r0, r5, r0
 8013eb4:	11c0      	asrs	r0, r0, #7
 8013eb6:	6020      	str	r0, [r4, #0]
}
 8013eb8:	b002      	add	sp, #8
 8013eba:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 8013ebc:	2002      	movs	r0, #2
 8013ebe:	e7dc      	b.n	8013e7a <SUBGRF_GetCFO+0x3a>
 8013ec0:	0c0a0804 	.word	0x0c0a0804
 8013ec4:	01e84800 	.word	0x01e84800

08013ec8 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8013ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8013ecc:	4770      	bx	lr

08013ece <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 8013ece:	f04f 30ff 	mov.w	r0, #4294967295
 8013ed2:	4770      	bx	lr

08013ed4 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8013ed4:	4770      	bx	lr

08013ed6 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 8013ed6:	2000      	movs	r0, #0
 8013ed8:	4770      	bx	lr

08013eda <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 8013eda:	2000      	movs	r0, #0
 8013edc:	4770      	bx	lr

08013ede <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8013ede:	4770      	bx	lr

08013ee0 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8013ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee4:	4770      	bx	lr

08013ee6 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8013ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8013eea:	4770      	bx	lr

08013eec <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8013eec:	4770      	bx	lr

08013eee <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8013eee:	4770      	bx	lr

08013ef0 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8013ef0:	4770      	bx	lr
	...

08013ef4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8013ef4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ef6:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013efa:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8013efc:	4b1e      	ldr	r3, [pc, #120]	; (8013f78 <TRACE_AllocateBufer+0x84>)
 8013efe:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8013f02:	8a1a      	ldrh	r2, [r3, #16]
 8013f04:	4594      	cmp	ip, r2
 8013f06:	d011      	beq.n	8013f2c <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8013f08:	4594      	cmp	ip, r2
 8013f0a:	d921      	bls.n	8013f50 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8013f0c:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8013f10:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8013f12:	4283      	cmp	r3, r0
 8013f14:	d81f      	bhi.n	8013f56 <TRACE_AllocateBufer+0x62>
 8013f16:	4282      	cmp	r2, r0
 8013f18:	d91d      	bls.n	8013f56 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8013f1a:	4b17      	ldr	r3, [pc, #92]	; (8013f78 <TRACE_AllocateBufer+0x84>)
 8013f1c:	2401      	movs	r4, #1
 8013f1e:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8013f20:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8013f24:	2400      	movs	r4, #0
 8013f26:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8013f28:	4613      	mov	r3, r2
 8013f2a:	e014      	b.n	8013f56 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8013f2c:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8013f30:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8013f32:	4298      	cmp	r0, r3
 8013f34:	d30f      	bcc.n	8013f56 <TRACE_AllocateBufer+0x62>
 8013f36:	4282      	cmp	r2, r0
 8013f38:	d90d      	bls.n	8013f56 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8013f3a:	4b0f      	ldr	r3, [pc, #60]	; (8013f78 <TRACE_AllocateBufer+0x84>)
 8013f3c:	2401      	movs	r4, #1
 8013f3e:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8013f40:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8013f44:	f04f 0c00 	mov.w	ip, #0
 8013f48:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	e002      	b.n	8013f56 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8013f50:	eba2 030c 	sub.w	r3, r2, ip
 8013f54:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8013f56:	4283      	cmp	r3, r0
 8013f58:	d90a      	bls.n	8013f70 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8013f5a:	4a07      	ldr	r2, [pc, #28]	; (8013f78 <TRACE_AllocateBufer+0x84>)
 8013f5c:	8a53      	ldrh	r3, [r2, #18]
 8013f5e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8013f60:	4403      	add	r3, r0
 8013f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013f66:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8013f68:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f6a:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8013f6e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8013f70:	f04f 30ff 	mov.w	r0, #4294967295
 8013f74:	e7f9      	b.n	8013f6a <TRACE_AllocateBufer+0x76>
 8013f76:	bf00      	nop
 8013f78:	2000424c 	.word	0x2000424c

08013f7c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f7c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f80:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8013f82:	4a03      	ldr	r2, [pc, #12]	; (8013f90 <TRACE_Lock+0x14>)
 8013f84:	8ad3      	ldrh	r3, [r2, #22]
 8013f86:	3301      	adds	r3, #1
 8013f88:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f8a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8013f8e:	4770      	bx	lr
 8013f90:	2000424c 	.word	0x2000424c

08013f94 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f94:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013f98:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8013f9a:	4a03      	ldr	r2, [pc, #12]	; (8013fa8 <TRACE_UnLock+0x14>)
 8013f9c:	8ad3      	ldrh	r3, [r2, #22]
 8013f9e:	3b01      	subs	r3, #1
 8013fa0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fa2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8013fa6:	4770      	bx	lr
 8013fa8:	2000424c 	.word	0x2000424c

08013fac <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8013fac:	4b02      	ldr	r3, [pc, #8]	; (8013fb8 <TRACE_IsLocked+0xc>)
 8013fae:	8ad8      	ldrh	r0, [r3, #22]
}
 8013fb0:	3800      	subs	r0, #0
 8013fb2:	bf18      	it	ne
 8013fb4:	2001      	movne	r0, #1
 8013fb6:	4770      	bx	lr
 8013fb8:	2000424c 	.word	0x2000424c

08013fbc <UTIL_ADV_TRACE_Init>:
{
 8013fbc:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8013fbe:	2218      	movs	r2, #24
 8013fc0:	2100      	movs	r1, #0
 8013fc2:	4807      	ldr	r0, [pc, #28]	; (8013fe0 <UTIL_ADV_TRACE_Init+0x24>)
 8013fc4:	f000 f98f 	bl	80142e6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8013fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013fcc:	2100      	movs	r1, #0
 8013fce:	4805      	ldr	r0, [pc, #20]	; (8013fe4 <UTIL_ADV_TRACE_Init+0x28>)
 8013fd0:	f000 f989 	bl	80142e6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8013fd4:	4b04      	ldr	r3, [pc, #16]	; (8013fe8 <UTIL_ADV_TRACE_Init+0x2c>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	4804      	ldr	r0, [pc, #16]	; (8013fec <UTIL_ADV_TRACE_Init+0x30>)
 8013fda:	4798      	blx	r3
}
 8013fdc:	bd08      	pop	{r3, pc}
 8013fde:	bf00      	nop
 8013fe0:	2000424c 	.word	0x2000424c
 8013fe4:	20003e4c 	.word	0x20003e4c
 8013fe8:	08014d28 	.word	0x08014d28
 8013fec:	08014171 	.word	0x08014171

08013ff0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8013ff0:	4b01      	ldr	r3, [pc, #4]	; (8013ff8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8013ff2:	6058      	str	r0, [r3, #4]
}
 8013ff4:	4770      	bx	lr
 8013ff6:	bf00      	nop
 8013ff8:	2000424c 	.word	0x2000424c

08013ffc <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8013ffc:	4b01      	ldr	r3, [pc, #4]	; (8014004 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8013ffe:	7218      	strb	r0, [r3, #8]
}
 8014000:	4770      	bx	lr
 8014002:	bf00      	nop
 8014004:	2000424c 	.word	0x2000424c

08014008 <TRACE_Send>:
{
 8014008:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801400a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801400e:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8014010:	f7ff ffcc 	bl	8013fac <TRACE_IsLocked>
 8014014:	b118      	cbz	r0, 801401e <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014016:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801401a:	2000      	movs	r0, #0
}
 801401c:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 801401e:	f7ff ffad 	bl	8013f7c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8014022:	4b1d      	ldr	r3, [pc, #116]	; (8014098 <TRACE_Send+0x90>)
 8014024:	8a1a      	ldrh	r2, [r3, #16]
 8014026:	8a5b      	ldrh	r3, [r3, #18]
 8014028:	429a      	cmp	r2, r3
 801402a:	d02e      	beq.n	801408a <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801402c:	491a      	ldr	r1, [pc, #104]	; (8014098 <TRACE_Send+0x90>)
 801402e:	7889      	ldrb	r1, [r1, #2]
 8014030:	2901      	cmp	r1, #1
 8014032:	d017      	beq.n	8014064 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8014034:	4a18      	ldr	r2, [pc, #96]	; (8014098 <TRACE_Send+0x90>)
 8014036:	7892      	ldrb	r2, [r2, #2]
 8014038:	b932      	cbnz	r2, 8014048 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801403a:	4a17      	ldr	r2, [pc, #92]	; (8014098 <TRACE_Send+0x90>)
 801403c:	8a12      	ldrh	r2, [r2, #16]
 801403e:	4293      	cmp	r3, r2
 8014040:	d91e      	bls.n	8014080 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8014042:	1a9b      	subs	r3, r3, r2
 8014044:	4a14      	ldr	r2, [pc, #80]	; (8014098 <TRACE_Send+0x90>)
 8014046:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8014048:	4e13      	ldr	r6, [pc, #76]	; (8014098 <TRACE_Send+0x90>)
 801404a:	8a33      	ldrh	r3, [r6, #16]
 801404c:	4d13      	ldr	r5, [pc, #76]	; (801409c <TRACE_Send+0x94>)
 801404e:	441d      	add	r5, r3
 8014050:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8014054:	f7ed fdfa 	bl	8001c4c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8014058:	4b11      	ldr	r3, [pc, #68]	; (80140a0 <TRACE_Send+0x98>)
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	8ab1      	ldrh	r1, [r6, #20]
 801405e:	4628      	mov	r0, r5
 8014060:	4798      	blx	r3
 8014062:	e7db      	b.n	801401c <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8014064:	480c      	ldr	r0, [pc, #48]	; (8014098 <TRACE_Send+0x90>)
 8014066:	8801      	ldrh	r1, [r0, #0]
 8014068:	1a8a      	subs	r2, r1, r2
 801406a:	b292      	uxth	r2, r2
 801406c:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801406e:	2102      	movs	r1, #2
 8014070:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8014072:	2100      	movs	r1, #0
 8014074:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8014076:	2a00      	cmp	r2, #0
 8014078:	d1dc      	bne.n	8014034 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801407a:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801407c:	8201      	strh	r1, [r0, #16]
 801407e:	e7d9      	b.n	8014034 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014080:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8014084:	4a04      	ldr	r2, [pc, #16]	; (8014098 <TRACE_Send+0x90>)
 8014086:	8293      	strh	r3, [r2, #20]
 8014088:	e7de      	b.n	8014048 <TRACE_Send+0x40>
      TRACE_UnLock();
 801408a:	f7ff ff83 	bl	8013f94 <TRACE_UnLock>
 801408e:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8014092:	2000      	movs	r0, #0
}
 8014094:	e7c2      	b.n	801401c <TRACE_Send+0x14>
 8014096:	bf00      	nop
 8014098:	2000424c 	.word	0x2000424c
 801409c:	20003e4c 	.word	0x20003e4c
 80140a0:	08014d28 	.word	0x08014d28

080140a4 <UTIL_ADV_TRACE_COND_FSend>:
{
 80140a4:	b408      	push	{r3}
 80140a6:	b530      	push	{r4, r5, lr}
 80140a8:	b086      	sub	sp, #24
 80140aa:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80140ac:	2300      	movs	r3, #0
 80140ae:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80140b2:	4b2c      	ldr	r3, [pc, #176]	; (8014164 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80140b4:	7a1b      	ldrb	r3, [r3, #8]
 80140b6:	4283      	cmp	r3, r0
 80140b8:	d34d      	bcc.n	8014156 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80140ba:	4b2a      	ldr	r3, [pc, #168]	; (8014164 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	ea31 0303 	bics.w	r3, r1, r3
 80140c2:	d14b      	bne.n	801415c <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80140c4:	4b27      	ldr	r3, [pc, #156]	; (8014164 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	b123      	cbz	r3, 80140d4 <UTIL_ADV_TRACE_COND_FSend+0x30>
 80140ca:	b11a      	cbz	r2, 80140d4 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80140cc:	f10d 0102 	add.w	r1, sp, #2
 80140d0:	a801      	add	r0, sp, #4
 80140d2:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80140d4:	ab0a      	add	r3, sp, #40	; 0x28
 80140d6:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80140d8:	4622      	mov	r2, r4
 80140da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80140de:	4822      	ldr	r0, [pc, #136]	; (8014168 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80140e0:	f000 fbf4 	bl	80148cc <tiny_vsnprintf_like>
 80140e4:	b285      	uxth	r5, r0
  TRACE_Lock();
 80140e6:	f7ff ff49 	bl	8013f7c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80140ea:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80140ee:	4428      	add	r0, r5
 80140f0:	4669      	mov	r1, sp
 80140f2:	b280      	uxth	r0, r0
 80140f4:	f7ff fefe 	bl	8013ef4 <TRACE_AllocateBufer>
 80140f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80140fc:	d026      	beq.n	801414c <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 80140fe:	2300      	movs	r3, #0
 8014100:	e00d      	b.n	801411e <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8014102:	f8bd 2000 	ldrh.w	r2, [sp]
 8014106:	f103 0118 	add.w	r1, r3, #24
 801410a:	4469      	add	r1, sp
 801410c:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8014110:	4916      	ldr	r1, [pc, #88]	; (801416c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8014112:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8014114:	3201      	adds	r2, #1
 8014116:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 801411a:	3301      	adds	r3, #1
 801411c:	b29b      	uxth	r3, r3
 801411e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014122:	429a      	cmp	r2, r3
 8014124:	d8ed      	bhi.n	8014102 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8014126:	f8bd 0000 	ldrh.w	r0, [sp]
 801412a:	9b05      	ldr	r3, [sp, #20]
 801412c:	4622      	mov	r2, r4
 801412e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014132:	4c0e      	ldr	r4, [pc, #56]	; (801416c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8014134:	4420      	add	r0, r4
 8014136:	f000 fbc9 	bl	80148cc <tiny_vsnprintf_like>
    TRACE_UnLock();
 801413a:	f7ff ff2b 	bl	8013f94 <TRACE_UnLock>
    return TRACE_Send();
 801413e:	f7ff ff63 	bl	8014008 <TRACE_Send>
}
 8014142:	b006      	add	sp, #24
 8014144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014148:	b001      	add	sp, #4
 801414a:	4770      	bx	lr
  TRACE_UnLock();
 801414c:	f7ff ff22 	bl	8013f94 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8014150:	f06f 0002 	mvn.w	r0, #2
 8014154:	e7f5      	b.n	8014142 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8014156:	f06f 0004 	mvn.w	r0, #4
 801415a:	e7f2      	b.n	8014142 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801415c:	f06f 0005 	mvn.w	r0, #5
 8014160:	e7ef      	b.n	8014142 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8014162:	bf00      	nop
 8014164:	2000424c 	.word	0x2000424c
 8014168:	20004264 	.word	0x20004264
 801416c:	20003e4c 	.word	0x20003e4c

08014170 <TRACE_TxCpltCallback>:
{
 8014170:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014172:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014176:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8014178:	4b25      	ldr	r3, [pc, #148]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 801417a:	789b      	ldrb	r3, [r3, #2]
 801417c:	2b02      	cmp	r3, #2
 801417e:	d016      	beq.n	80141ae <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8014180:	4a23      	ldr	r2, [pc, #140]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 8014182:	8a13      	ldrh	r3, [r2, #16]
 8014184:	8a90      	ldrh	r0, [r2, #20]
 8014186:	4403      	add	r3, r0
 8014188:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801418c:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801418e:	4b20      	ldr	r3, [pc, #128]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 8014190:	8a1a      	ldrh	r2, [r3, #16]
 8014192:	8a5b      	ldrh	r3, [r3, #18]
 8014194:	429a      	cmp	r2, r3
 8014196:	d003      	beq.n	80141a0 <TRACE_TxCpltCallback+0x30>
 8014198:	481d      	ldr	r0, [pc, #116]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 801419a:	8ac0      	ldrh	r0, [r0, #22]
 801419c:	2801      	cmp	r0, #1
 801419e:	d00b      	beq.n	80141b8 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80141a0:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80141a4:	f7ed fd58 	bl	8001c58 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80141a8:	f7ff fef4 	bl	8013f94 <TRACE_UnLock>
}
 80141ac:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80141ae:	4b18      	ldr	r3, [pc, #96]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 80141b0:	2200      	movs	r2, #0
 80141b2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80141b4:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80141b6:	e7ea      	b.n	801418e <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80141b8:	4815      	ldr	r0, [pc, #84]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 80141ba:	7880      	ldrb	r0, [r0, #2]
 80141bc:	2801      	cmp	r0, #1
 80141be:	d014      	beq.n	80141ea <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80141c0:	4a13      	ldr	r2, [pc, #76]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 80141c2:	7892      	ldrb	r2, [r2, #2]
 80141c4:	b932      	cbnz	r2, 80141d4 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80141c6:	4a12      	ldr	r2, [pc, #72]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 80141c8:	8a12      	ldrh	r2, [r2, #16]
 80141ca:	4293      	cmp	r3, r2
 80141cc:	d91b      	bls.n	8014206 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80141ce:	1a9b      	subs	r3, r3, r2
 80141d0:	4a0f      	ldr	r2, [pc, #60]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 80141d2:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80141d4:	4b0e      	ldr	r3, [pc, #56]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 80141d6:	8a1a      	ldrh	r2, [r3, #16]
 80141d8:	480e      	ldr	r0, [pc, #56]	; (8014214 <TRACE_TxCpltCallback+0xa4>)
 80141da:	4410      	add	r0, r2
 80141dc:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80141e0:	4a0d      	ldr	r2, [pc, #52]	; (8014218 <TRACE_TxCpltCallback+0xa8>)
 80141e2:	68d2      	ldr	r2, [r2, #12]
 80141e4:	8a99      	ldrh	r1, [r3, #20]
 80141e6:	4790      	blx	r2
 80141e8:	e7e0      	b.n	80141ac <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80141ea:	4c09      	ldr	r4, [pc, #36]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 80141ec:	8820      	ldrh	r0, [r4, #0]
 80141ee:	1a82      	subs	r2, r0, r2
 80141f0:	b292      	uxth	r2, r2
 80141f2:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80141f4:	2002      	movs	r0, #2
 80141f6:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80141f8:	2000      	movs	r0, #0
 80141fa:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80141fc:	2a00      	cmp	r2, #0
 80141fe:	d1df      	bne.n	80141c0 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8014200:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8014202:	8220      	strh	r0, [r4, #16]
 8014204:	e7dc      	b.n	80141c0 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8014206:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 801420a:	4a01      	ldr	r2, [pc, #4]	; (8014210 <TRACE_TxCpltCallback+0xa0>)
 801420c:	8293      	strh	r3, [r2, #20]
 801420e:	e7e1      	b.n	80141d4 <TRACE_TxCpltCallback+0x64>
 8014210:	2000424c 	.word	0x2000424c
 8014214:	20003e4c 	.word	0x20003e4c
 8014218:	08014d28 	.word	0x08014d28

0801421c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801421c:	2300      	movs	r3, #0
 801421e:	4a02      	ldr	r2, [pc, #8]	; (8014228 <UTIL_LPM_Init+0xc>)
 8014220:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8014222:	4a02      	ldr	r2, [pc, #8]	; (801422c <UTIL_LPM_Init+0x10>)
 8014224:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8014226:	4770      	bx	lr
 8014228:	20004468 	.word	0x20004468
 801422c:	20004464 	.word	0x20004464

08014230 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014230:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014234:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8014236:	b141      	cbz	r1, 801424a <UTIL_LPM_SetStopMode+0x1a>
 8014238:	2901      	cmp	r1, #1
 801423a:	d103      	bne.n	8014244 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801423c:	4906      	ldr	r1, [pc, #24]	; (8014258 <UTIL_LPM_SetStopMode+0x28>)
 801423e:	680a      	ldr	r2, [r1, #0]
 8014240:	4310      	orrs	r0, r2
 8014242:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014244:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014248:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801424a:	4903      	ldr	r1, [pc, #12]	; (8014258 <UTIL_LPM_SetStopMode+0x28>)
 801424c:	680a      	ldr	r2, [r1, #0]
 801424e:	ea22 0000 	bic.w	r0, r2, r0
 8014252:	6008      	str	r0, [r1, #0]
      break;
 8014254:	e7f6      	b.n	8014244 <UTIL_LPM_SetStopMode+0x14>
 8014256:	bf00      	nop
 8014258:	20004468 	.word	0x20004468

0801425c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801425c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014260:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8014262:	b141      	cbz	r1, 8014276 <UTIL_LPM_SetOffMode+0x1a>
 8014264:	2901      	cmp	r1, #1
 8014266:	d103      	bne.n	8014270 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8014268:	4906      	ldr	r1, [pc, #24]	; (8014284 <UTIL_LPM_SetOffMode+0x28>)
 801426a:	680a      	ldr	r2, [r1, #0]
 801426c:	4310      	orrs	r0, r2
 801426e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014270:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8014274:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8014276:	4903      	ldr	r1, [pc, #12]	; (8014284 <UTIL_LPM_SetOffMode+0x28>)
 8014278:	680a      	ldr	r2, [r1, #0]
 801427a:	ea22 0000 	bic.w	r0, r2, r0
 801427e:	6008      	str	r0, [r1, #0]
      break;
 8014280:	e7f6      	b.n	8014270 <UTIL_LPM_SetOffMode+0x14>
 8014282:	bf00      	nop
 8014284:	20004464 	.word	0x20004464

08014288 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8014288:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801428a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801428e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8014290:	4b0c      	ldr	r3, [pc, #48]	; (80142c4 <UTIL_LPM_EnterLowPower+0x3c>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	b13b      	cbz	r3, 80142a6 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8014296:	4d0c      	ldr	r5, [pc, #48]	; (80142c8 <UTIL_LPM_EnterLowPower+0x40>)
 8014298:	682b      	ldr	r3, [r5, #0]
 801429a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801429c:	686b      	ldr	r3, [r5, #4]
 801429e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80142a0:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80142a4:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80142a6:	4b09      	ldr	r3, [pc, #36]	; (80142cc <UTIL_LPM_EnterLowPower+0x44>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	b12b      	cbz	r3, 80142b8 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80142ac:	4d06      	ldr	r5, [pc, #24]	; (80142c8 <UTIL_LPM_EnterLowPower+0x40>)
 80142ae:	68ab      	ldr	r3, [r5, #8]
 80142b0:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80142b2:	68eb      	ldr	r3, [r5, #12]
 80142b4:	4798      	blx	r3
 80142b6:	e7f3      	b.n	80142a0 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80142b8:	4d03      	ldr	r5, [pc, #12]	; (80142c8 <UTIL_LPM_EnterLowPower+0x40>)
 80142ba:	692b      	ldr	r3, [r5, #16]
 80142bc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80142be:	696b      	ldr	r3, [r5, #20]
 80142c0:	4798      	blx	r3
 80142c2:	e7ed      	b.n	80142a0 <UTIL_LPM_EnterLowPower+0x18>
 80142c4:	20004468 	.word	0x20004468
 80142c8:	08014cc4 	.word	0x08014cc4
 80142cc:	20004464 	.word	0x20004464

080142d0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80142d0:	e004      	b.n	80142dc <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80142d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80142d6:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80142da:	461a      	mov	r2, r3
 80142dc:	1e53      	subs	r3, r2, #1
 80142de:	b29b      	uxth	r3, r3
 80142e0:	2a00      	cmp	r2, #0
 80142e2:	d1f6      	bne.n	80142d2 <UTIL_MEM_cpy_8+0x2>
    }
}
 80142e4:	4770      	bx	lr

080142e6 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80142e6:	e002      	b.n	80142ee <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80142e8:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80142ec:	461a      	mov	r2, r3
 80142ee:	1e53      	subs	r3, r2, #1
 80142f0:	b29b      	uxth	r3, r3
 80142f2:	2a00      	cmp	r2, #0
 80142f4:	d1f8      	bne.n	80142e8 <UTIL_MEM_set_8+0x2>
  }
}
 80142f6:	4770      	bx	lr

080142f8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80142f8:	b082      	sub	sp, #8
 80142fa:	b082      	sub	sp, #8
 80142fc:	f10d 0c08 	add.w	ip, sp, #8
 8014300:	e90c 0006 	stmdb	ip, {r1, r2}
 8014304:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8014306:	2200      	movs	r2, #0
 8014308:	6002      	str	r2, [r0, #0]
 801430a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801430c:	440b      	add	r3, r1
 801430e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8014310:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014314:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014318:	440a      	add	r2, r1
 801431a:	b291      	uxth	r1, r2
 801431c:	b212      	sxth	r2, r2
 801431e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8014320:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8014324:	db04      	blt.n	8014330 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8014326:	3301      	adds	r3, #1
 8014328:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 801432a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 801432e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8014330:	b002      	add	sp, #8
 8014332:	b002      	add	sp, #8
 8014334:	4770      	bx	lr

08014336 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8014336:	b082      	sub	sp, #8
 8014338:	b082      	sub	sp, #8
 801433a:	f10d 0c08 	add.w	ip, sp, #8
 801433e:	e90c 0006 	stmdb	ip, {r1, r2}
 8014342:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8014344:	2200      	movs	r2, #0
 8014346:	6002      	str	r2, [r0, #0]
 8014348:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801434a:	1acb      	subs	r3, r1, r3
 801434c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801434e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8014352:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8014356:	1a52      	subs	r2, r2, r1
 8014358:	b291      	uxth	r1, r2
 801435a:	b212      	sxth	r2, r2
 801435c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 801435e:	2a00      	cmp	r2, #0
 8014360:	db02      	blt.n	8014368 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8014362:	b002      	add	sp, #8
 8014364:	b002      	add	sp, #8
 8014366:	4770      	bx	lr
    c.Seconds--;
 8014368:	3b01      	subs	r3, #1
 801436a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 801436c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8014370:	8081      	strh	r1, [r0, #4]
  return c;
 8014372:	e7f6      	b.n	8014362 <SysTimeSub+0x2c>

08014374 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8014374:	b530      	push	{r4, r5, lr}
 8014376:	b089      	sub	sp, #36	; 0x24
 8014378:	ac02      	add	r4, sp, #8
 801437a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801437e:	2300      	movs	r3, #0
 8014380:	9304      	str	r3, [sp, #16]
 8014382:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8014386:	4d0b      	ldr	r5, [pc, #44]	; (80143b4 <SysTimeSet+0x40>)
 8014388:	692b      	ldr	r3, [r5, #16]
 801438a:	a805      	add	r0, sp, #20
 801438c:	4798      	blx	r3
 801438e:	4603      	mov	r3, r0
 8014390:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8014392:	9a05      	ldr	r2, [sp, #20]
 8014394:	9200      	str	r2, [sp, #0]
 8014396:	e894 0006 	ldmia.w	r4, {r1, r2}
 801439a:	a806      	add	r0, sp, #24
 801439c:	f7ff ffcb 	bl	8014336 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80143a0:	682b      	ldr	r3, [r5, #0]
 80143a2:	9806      	ldr	r0, [sp, #24]
 80143a4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80143a6:	68ab      	ldr	r3, [r5, #8]
 80143a8:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80143ac:	4798      	blx	r3
}
 80143ae:	b009      	add	sp, #36	; 0x24
 80143b0:	bd30      	pop	{r4, r5, pc}
 80143b2:	bf00      	nop
 80143b4:	08014ce8 	.word	0x08014ce8

080143b8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80143b8:	b530      	push	{r4, r5, lr}
 80143ba:	b087      	sub	sp, #28
 80143bc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80143be:	2300      	movs	r3, #0
 80143c0:	9304      	str	r3, [sp, #16]
 80143c2:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80143c6:	6003      	str	r3, [r0, #0]
 80143c8:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80143ca:	4d0b      	ldr	r5, [pc, #44]	; (80143f8 <SysTimeGet+0x40>)
 80143cc:	692b      	ldr	r3, [r5, #16]
 80143ce:	a805      	add	r0, sp, #20
 80143d0:	4798      	blx	r3
 80143d2:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80143d4:	68eb      	ldr	r3, [r5, #12]
 80143d6:	4798      	blx	r3
 80143d8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80143dc:	686b      	ldr	r3, [r5, #4]
 80143de:	4798      	blx	r3
 80143e0:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80143e2:	9b05      	ldr	r3, [sp, #20]
 80143e4:	9300      	str	r3, [sp, #0]
 80143e6:	9b04      	ldr	r3, [sp, #16]
 80143e8:	aa02      	add	r2, sp, #8
 80143ea:	ca06      	ldmia	r2, {r1, r2}
 80143ec:	4620      	mov	r0, r4
 80143ee:	f7ff ff83 	bl	80142f8 <SysTimeAdd>

  return sysTime;
}
 80143f2:	4620      	mov	r0, r4
 80143f4:	b007      	add	sp, #28
 80143f6:	bd30      	pop	{r4, r5, pc}
 80143f8:	08014ce8 	.word	0x08014ce8

080143fc <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80143fc:	b530      	push	{r4, r5, lr}
 80143fe:	b083      	sub	sp, #12
 8014400:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8014402:	2300      	movs	r3, #0
 8014404:	9300      	str	r3, [sp, #0]
 8014406:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801440a:	4b06      	ldr	r3, [pc, #24]	; (8014424 <SysTimeGetMcuTime+0x28>)
 801440c:	691b      	ldr	r3, [r3, #16]
 801440e:	466d      	mov	r5, sp
 8014410:	a801      	add	r0, sp, #4
 8014412:	4798      	blx	r3
 8014414:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8014416:	e895 0003 	ldmia.w	r5, {r0, r1}
 801441a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 801441e:	4620      	mov	r0, r4
 8014420:	b003      	add	sp, #12
 8014422:	bd30      	pop	{r4, r5, pc}
 8014424:	08014ce8 	.word	0x08014ce8

08014428 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8014428:	b530      	push	{r4, r5, lr}
 801442a:	b089      	sub	sp, #36	; 0x24
 801442c:	ac02      	add	r4, sp, #8
 801442e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8014432:	4d0c      	ldr	r5, [pc, #48]	; (8014464 <SysTimeToMs+0x3c>)
 8014434:	68eb      	ldr	r3, [r5, #12]
 8014436:	4798      	blx	r3
 8014438:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801443c:	686b      	ldr	r3, [r5, #4]
 801443e:	4798      	blx	r3
 8014440:	4603      	mov	r3, r0
 8014442:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8014444:	9a07      	ldr	r2, [sp, #28]
 8014446:	9200      	str	r2, [sp, #0]
 8014448:	e894 0006 	ldmia.w	r4, {r1, r2}
 801444c:	a804      	add	r0, sp, #16
 801444e:	f7ff ff72 	bl	8014336 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8014452:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8014456:	9a04      	ldr	r2, [sp, #16]
 8014458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801445c:	fb00 3002 	mla	r0, r0, r2, r3
 8014460:	b009      	add	sp, #36	; 0x24
 8014462:	bd30      	pop	{r4, r5, pc}
 8014464:	08014ce8 	.word	0x08014ce8

08014468 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8014468:	b530      	push	{r4, r5, lr}
 801446a:	b087      	sub	sp, #28
 801446c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 801446e:	4b12      	ldr	r3, [pc, #72]	; (80144b8 <SysTimeFromMs+0x50>)
 8014470:	fba3 2301 	umull	r2, r3, r3, r1
 8014474:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8014476:	9304      	str	r3, [sp, #16]
 8014478:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801447c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8014480:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8014484:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8014488:	2300      	movs	r3, #0
 801448a:	9302      	str	r3, [sp, #8]
 801448c:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801448e:	4d0b      	ldr	r5, [pc, #44]	; (80144bc <SysTimeFromMs+0x54>)
 8014490:	68eb      	ldr	r3, [r5, #12]
 8014492:	4798      	blx	r3
 8014494:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8014498:	686b      	ldr	r3, [r5, #4]
 801449a:	4798      	blx	r3
 801449c:	4603      	mov	r3, r0
 801449e:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 80144a0:	9a03      	ldr	r2, [sp, #12]
 80144a2:	9200      	str	r2, [sp, #0]
 80144a4:	aa06      	add	r2, sp, #24
 80144a6:	e912 0006 	ldmdb	r2, {r1, r2}
 80144aa:	4620      	mov	r0, r4
 80144ac:	f7ff ff24 	bl	80142f8 <SysTimeAdd>
}
 80144b0:	4620      	mov	r0, r4
 80144b2:	b007      	add	sp, #28
 80144b4:	bd30      	pop	{r4, r5, pc}
 80144b6:	bf00      	nop
 80144b8:	10624dd3 	.word	0x10624dd3
 80144bc:	08014ce8 	.word	0x08014ce8

080144c0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80144c0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80144c2:	4b03      	ldr	r3, [pc, #12]	; (80144d0 <UTIL_TIMER_Init+0x10>)
 80144c4:	2200      	movs	r2, #0
 80144c6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80144c8:	4b02      	ldr	r3, [pc, #8]	; (80144d4 <UTIL_TIMER_Init+0x14>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	4798      	blx	r3
}
 80144ce:	bd08      	pop	{r3, pc}
 80144d0:	2000446c 	.word	0x2000446c
 80144d4:	08014cfc 	.word	0x08014cfc

080144d8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80144d8:	b1a8      	cbz	r0, 8014506 <UTIL_TIMER_Create+0x2e>
{
 80144da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144dc:	4617      	mov	r7, r2
 80144de:	461e      	mov	r6, r3
 80144e0:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80144e2:	b193      	cbz	r3, 801450a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80144e4:	2500      	movs	r5, #0
 80144e6:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80144e8:	4b09      	ldr	r3, [pc, #36]	; (8014510 <UTIL_TIMER_Create+0x38>)
 80144ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144ec:	4608      	mov	r0, r1
 80144ee:	4798      	blx	r3
 80144f0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80144f2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80144f4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80144f6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80144f8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80144fa:	9b06      	ldr	r3, [sp, #24]
 80144fc:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80144fe:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8014500:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8014502:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8014504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8014506:	2001      	movs	r0, #1
}
 8014508:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 801450a:	2001      	movs	r0, #1
 801450c:	e7fa      	b.n	8014504 <UTIL_TIMER_Create+0x2c>
 801450e:	bf00      	nop
 8014510:	08014cfc 	.word	0x08014cfc

08014514 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8014514:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8014516:	4c03      	ldr	r4, [pc, #12]	; (8014524 <UTIL_TIMER_GetCurrentTime+0x10>)
 8014518:	69e3      	ldr	r3, [r4, #28]
 801451a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 801451c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801451e:	4798      	blx	r3
}
 8014520:	bd10      	pop	{r4, pc}
 8014522:	bf00      	nop
 8014524:	08014cfc 	.word	0x08014cfc

08014528 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801452c:	4d05      	ldr	r5, [pc, #20]	; (8014544 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801452e:	69eb      	ldr	r3, [r5, #28]
 8014530:	4798      	blx	r3
 8014532:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8014534:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014536:	4630      	mov	r0, r6
 8014538:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801453a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801453c:	1a20      	subs	r0, r4, r0
 801453e:	4798      	blx	r3
}
 8014540:	bd70      	pop	{r4, r5, r6, pc}
 8014542:	bf00      	nop
 8014544:	08014cfc 	.word	0x08014cfc

08014548 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8014548:	4b05      	ldr	r3, [pc, #20]	; (8014560 <TimerExists+0x18>)
 801454a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 801454c:	e000      	b.n	8014550 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 801454e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8014550:	b11b      	cbz	r3, 801455a <TimerExists+0x12>
    if( cur == TimerObject )
 8014552:	4283      	cmp	r3, r0
 8014554:	d1fb      	bne.n	801454e <TimerExists+0x6>
      return true;
 8014556:	2001      	movs	r0, #1
  }
  return false;
}
 8014558:	4770      	bx	lr
  return false;
 801455a:	2000      	movs	r0, #0
 801455c:	4770      	bx	lr
 801455e:	bf00      	nop
 8014560:	2000446c 	.word	0x2000446c

08014564 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8014564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014566:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8014568:	4e09      	ldr	r6, [pc, #36]	; (8014590 <TimerSetTimeout+0x2c>)
 801456a:	6a33      	ldr	r3, [r6, #32]
 801456c:	4798      	blx	r3
 801456e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8014570:	2301      	movs	r3, #1
 8014572:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8014574:	6827      	ldr	r7, [r4, #0]
 8014576:	69b6      	ldr	r6, [r6, #24]
 8014578:	47b0      	blx	r6
 801457a:	4428      	add	r0, r5
 801457c:	4287      	cmp	r7, r0
 801457e:	d202      	bcs.n	8014586 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8014580:	47b0      	blx	r6
 8014582:	4405      	add	r5, r0
 8014584:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8014586:	4b02      	ldr	r3, [pc, #8]	; (8014590 <TimerSetTimeout+0x2c>)
 8014588:	689b      	ldr	r3, [r3, #8]
 801458a:	6820      	ldr	r0, [r4, #0]
 801458c:	4798      	blx	r3
}
 801458e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014590:	08014cfc 	.word	0x08014cfc

08014594 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8014594:	b368      	cbz	r0, 80145f2 <UTIL_TIMER_Stop+0x5e>
{
 8014596:	b510      	push	{r4, lr}
 8014598:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801459a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801459e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80145a0:	4b15      	ldr	r3, [pc, #84]	; (80145f8 <UTIL_TIMER_Stop+0x64>)
 80145a2:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80145a4:	2301      	movs	r3, #1
 80145a6:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80145a8:	b1e1      	cbz	r1, 80145e4 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80145aa:	2300      	movs	r3, #0
 80145ac:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80145ae:	4288      	cmp	r0, r1
 80145b0:	d006      	beq.n	80145c0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80145b2:	460b      	mov	r3, r1
        while( cur != NULL )
 80145b4:	b1b3      	cbz	r3, 80145e4 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80145b6:	4293      	cmp	r3, r2
 80145b8:	d011      	beq.n	80145de <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80145ba:	4619      	mov	r1, r3
            cur = cur->Next;
 80145bc:	695b      	ldr	r3, [r3, #20]
 80145be:	e7f9      	b.n	80145b4 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80145c0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80145c2:	6948      	ldr	r0, [r1, #20]
 80145c4:	b120      	cbz	r0, 80145d0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80145c6:	4b0c      	ldr	r3, [pc, #48]	; (80145f8 <UTIL_TIMER_Stop+0x64>)
 80145c8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80145ca:	f7ff ffcb 	bl	8014564 <TimerSetTimeout>
 80145ce:	e009      	b.n	80145e4 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80145d0:	4b0a      	ldr	r3, [pc, #40]	; (80145fc <UTIL_TIMER_Stop+0x68>)
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	4798      	blx	r3
            TimerListHead = NULL;
 80145d6:	4b08      	ldr	r3, [pc, #32]	; (80145f8 <UTIL_TIMER_Stop+0x64>)
 80145d8:	2200      	movs	r2, #0
 80145da:	601a      	str	r2, [r3, #0]
 80145dc:	e002      	b.n	80145e4 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80145de:	695b      	ldr	r3, [r3, #20]
 80145e0:	b123      	cbz	r3, 80145ec <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80145e2:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80145e4:	f384 8810 	msr	PRIMASK, r4
}
 80145e8:	2000      	movs	r0, #0
}
 80145ea:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80145ec:	2300      	movs	r3, #0
 80145ee:	614b      	str	r3, [r1, #20]
 80145f0:	e7f8      	b.n	80145e4 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80145f2:	2001      	movs	r0, #1
}
 80145f4:	4770      	bx	lr
 80145f6:	bf00      	nop
 80145f8:	2000446c 	.word	0x2000446c
 80145fc:	08014cfc 	.word	0x08014cfc

08014600 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8014600:	4b09      	ldr	r3, [pc, #36]	; (8014628 <TimerInsertTimer+0x28>)
 8014602:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8014604:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8014606:	e001      	b.n	801460c <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8014608:	461a      	mov	r2, r3
        next = next->Next;
 801460a:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 801460c:	6951      	ldr	r1, [r2, #20]
 801460e:	b139      	cbz	r1, 8014620 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8014610:	6819      	ldr	r1, [r3, #0]
 8014612:	f8d0 c000 	ldr.w	ip, [r0]
 8014616:	458c      	cmp	ip, r1
 8014618:	d8f6      	bhi.n	8014608 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801461a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 801461c:	6143      	str	r3, [r0, #20]
        return;
 801461e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8014620:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8014622:	2300      	movs	r3, #0
 8014624:	6143      	str	r3, [r0, #20]
}
 8014626:	4770      	bx	lr
 8014628:	2000446c 	.word	0x2000446c

0801462c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801462c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801462e:	4b05      	ldr	r3, [pc, #20]	; (8014644 <TimerInsertNewHeadTimer+0x18>)
 8014630:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8014632:	b10b      	cbz	r3, 8014638 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8014634:	2200      	movs	r2, #0
 8014636:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8014638:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801463a:	4b02      	ldr	r3, [pc, #8]	; (8014644 <TimerInsertNewHeadTimer+0x18>)
 801463c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801463e:	f7ff ff91 	bl	8014564 <TimerSetTimeout>
}
 8014642:	bd08      	pop	{r3, pc}
 8014644:	2000446c 	.word	0x2000446c

08014648 <UTIL_TIMER_Start>:
{
 8014648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801464a:	2800      	cmp	r0, #0
 801464c:	d036      	beq.n	80146bc <UTIL_TIMER_Start+0x74>
 801464e:	4604      	mov	r4, r0
 8014650:	f7ff ff7a 	bl	8014548 <TimerExists>
 8014654:	2800      	cmp	r0, #0
 8014656:	d134      	bne.n	80146c2 <UTIL_TIMER_Start+0x7a>
 8014658:	7a65      	ldrb	r5, [r4, #9]
 801465a:	2d00      	cmp	r5, #0
 801465c:	d133      	bne.n	80146c6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801465e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014662:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8014664:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8014666:	4b19      	ldr	r3, [pc, #100]	; (80146cc <UTIL_TIMER_Start+0x84>)
 8014668:	6a1b      	ldr	r3, [r3, #32]
 801466a:	4798      	blx	r3
    if( ticks < minValue )
 801466c:	4287      	cmp	r7, r0
 801466e:	d300      	bcc.n	8014672 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8014670:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8014672:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8014674:	2300      	movs	r3, #0
 8014676:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8014678:	2201      	movs	r2, #1
 801467a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801467c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801467e:	4b14      	ldr	r3, [pc, #80]	; (80146d0 <UTIL_TIMER_Start+0x88>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	b183      	cbz	r3, 80146a6 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8014684:	4b11      	ldr	r3, [pc, #68]	; (80146cc <UTIL_TIMER_Start+0x84>)
 8014686:	699b      	ldr	r3, [r3, #24]
 8014688:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 801468a:	6823      	ldr	r3, [r4, #0]
 801468c:	4418      	add	r0, r3
 801468e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8014690:	4b0f      	ldr	r3, [pc, #60]	; (80146d0 <UTIL_TIMER_Start+0x88>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	4298      	cmp	r0, r3
 8014698:	d20c      	bcs.n	80146b4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 801469a:	4620      	mov	r0, r4
 801469c:	f7ff ffc6 	bl	801462c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80146a0:	f386 8810 	msr	PRIMASK, r6
}
 80146a4:	e00b      	b.n	80146be <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80146a6:	4b09      	ldr	r3, [pc, #36]	; (80146cc <UTIL_TIMER_Start+0x84>)
 80146a8:	691b      	ldr	r3, [r3, #16]
 80146aa:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80146ac:	4620      	mov	r0, r4
 80146ae:	f7ff ffbd 	bl	801462c <TimerInsertNewHeadTimer>
 80146b2:	e7f5      	b.n	80146a0 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80146b4:	4620      	mov	r0, r4
 80146b6:	f7ff ffa3 	bl	8014600 <TimerInsertTimer>
 80146ba:	e7f1      	b.n	80146a0 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80146bc:	2501      	movs	r5, #1
}
 80146be:	4628      	mov	r0, r5
 80146c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80146c2:	2501      	movs	r5, #1
 80146c4:	e7fb      	b.n	80146be <UTIL_TIMER_Start+0x76>
 80146c6:	2501      	movs	r5, #1
 80146c8:	e7f9      	b.n	80146be <UTIL_TIMER_Start+0x76>
 80146ca:	bf00      	nop
 80146cc:	08014cfc 	.word	0x08014cfc
 80146d0:	2000446c 	.word	0x2000446c

080146d4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80146d4:	b198      	cbz	r0, 80146fe <UTIL_TIMER_SetPeriod+0x2a>
{
 80146d6:	b510      	push	{r4, lr}
 80146d8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80146da:	4b0a      	ldr	r3, [pc, #40]	; (8014704 <UTIL_TIMER_SetPeriod+0x30>)
 80146dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146de:	4608      	mov	r0, r1
 80146e0:	4798      	blx	r3
 80146e2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80146e4:	4620      	mov	r0, r4
 80146e6:	f7ff ff2f 	bl	8014548 <TimerExists>
 80146ea:	b908      	cbnz	r0, 80146f0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80146ec:	2000      	movs	r0, #0
}
 80146ee:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80146f0:	4620      	mov	r0, r4
 80146f2:	f7ff ff4f 	bl	8014594 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 80146f6:	4620      	mov	r0, r4
 80146f8:	f7ff ffa6 	bl	8014648 <UTIL_TIMER_Start>
 80146fc:	e7f7      	b.n	80146ee <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 80146fe:	2001      	movs	r0, #1
}
 8014700:	4770      	bx	lr
 8014702:	bf00      	nop
 8014704:	08014cfc 	.word	0x08014cfc

08014708 <UTIL_TIMER_IRQ_Handler>:
{
 8014708:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801470a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801470e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8014710:	4c1e      	ldr	r4, [pc, #120]	; (801478c <UTIL_TIMER_IRQ_Handler+0x84>)
 8014712:	6963      	ldr	r3, [r4, #20]
 8014714:	4798      	blx	r3
 8014716:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8014718:	6923      	ldr	r3, [r4, #16]
 801471a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 801471c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 801471e:	4b1c      	ldr	r3, [pc, #112]	; (8014790 <UTIL_TIMER_IRQ_Handler+0x88>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	b923      	cbnz	r3, 801472e <UTIL_TIMER_IRQ_Handler+0x26>
 8014724:	e018      	b.n	8014758 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8014726:	2200      	movs	r2, #0
 8014728:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 801472a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 801472c:	b1a3      	cbz	r3, 8014758 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 801472e:	681a      	ldr	r2, [r3, #0]
 8014730:	42a2      	cmp	r2, r4
 8014732:	d9f8      	bls.n	8014726 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8014734:	1a31      	subs	r1, r6, r0
 8014736:	440a      	add	r2, r1
 8014738:	601a      	str	r2, [r3, #0]
 801473a:	e7f6      	b.n	801472a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 801473c:	4b14      	ldr	r3, [pc, #80]	; (8014790 <UTIL_TIMER_IRQ_Handler+0x88>)
 801473e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8014740:	6962      	ldr	r2, [r4, #20]
 8014742:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8014744:	2300      	movs	r3, #0
 8014746:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8014748:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 801474a:	68e3      	ldr	r3, [r4, #12]
 801474c:	6920      	ldr	r0, [r4, #16]
 801474e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8014750:	8963      	ldrh	r3, [r4, #10]
 8014752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014756:	d012      	beq.n	801477e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8014758:	4b0d      	ldr	r3, [pc, #52]	; (8014790 <UTIL_TIMER_IRQ_Handler+0x88>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	b13b      	cbz	r3, 801476e <UTIL_TIMER_IRQ_Handler+0x66>
 801475e:	681c      	ldr	r4, [r3, #0]
 8014760:	2c00      	cmp	r4, #0
 8014762:	d0eb      	beq.n	801473c <UTIL_TIMER_IRQ_Handler+0x34>
 8014764:	4b09      	ldr	r3, [pc, #36]	; (801478c <UTIL_TIMER_IRQ_Handler+0x84>)
 8014766:	699b      	ldr	r3, [r3, #24]
 8014768:	4798      	blx	r3
 801476a:	4284      	cmp	r4, r0
 801476c:	d3e6      	bcc.n	801473c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801476e:	4b08      	ldr	r3, [pc, #32]	; (8014790 <UTIL_TIMER_IRQ_Handler+0x88>)
 8014770:	6818      	ldr	r0, [r3, #0]
 8014772:	b108      	cbz	r0, 8014778 <UTIL_TIMER_IRQ_Handler+0x70>
 8014774:	7a03      	ldrb	r3, [r0, #8]
 8014776:	b133      	cbz	r3, 8014786 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014778:	f385 8810 	msr	PRIMASK, r5
}
 801477c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 801477e:	4620      	mov	r0, r4
 8014780:	f7ff ff62 	bl	8014648 <UTIL_TIMER_Start>
 8014784:	e7e8      	b.n	8014758 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8014786:	f7ff feed 	bl	8014564 <TimerSetTimeout>
 801478a:	e7f5      	b.n	8014778 <UTIL_TIMER_IRQ_Handler+0x70>
 801478c:	08014cfc 	.word	0x08014cfc
 8014790:	2000446c 	.word	0x2000446c

08014794 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8014794:	4601      	mov	r1, r0
  int i = 0;
 8014796:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8014798:	e007      	b.n	80147aa <ee_skip_atoi+0x16>
 801479a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801479e:	1c53      	adds	r3, r2, #1
 80147a0:	600b      	str	r3, [r1, #0]
 80147a2:	7813      	ldrb	r3, [r2, #0]
 80147a4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80147a8:	3830      	subs	r0, #48	; 0x30
 80147aa:	680a      	ldr	r2, [r1, #0]
 80147ac:	7813      	ldrb	r3, [r2, #0]
 80147ae:	3b30      	subs	r3, #48	; 0x30
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	2b09      	cmp	r3, #9
 80147b4:	d9f1      	bls.n	801479a <ee_skip_atoi+0x6>
  return i;
}
 80147b6:	4770      	bx	lr

080147b8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80147b8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 80147bc:	b093      	sub	sp, #76	; 0x4c
 80147be:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80147c0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 80147c2:	f016 0f40 	tst.w	r6, #64	; 0x40
 80147c6:	d110      	bne.n	80147ea <ee_number+0x32>
  char *dig = lower_digits;
 80147c8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80148c4 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 80147cc:	1e9f      	subs	r7, r3, #2
 80147ce:	2f22      	cmp	r7, #34	; 0x22
 80147d0:	d875      	bhi.n	80148be <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 80147d2:	f016 0401 	ands.w	r4, r6, #1
 80147d6:	d00b      	beq.n	80147f0 <ee_number+0x38>
 80147d8:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 80147dc:	f016 0f02 	tst.w	r6, #2
 80147e0:	d00f      	beq.n	8014802 <ee_number+0x4a>
  {
    if (num < 0)
 80147e2:	2a00      	cmp	r2, #0
 80147e4:	db07      	blt.n	80147f6 <ee_number+0x3e>
  sign = 0;
 80147e6:	2700      	movs	r7, #0
 80147e8:	e00c      	b.n	8014804 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 80147ea:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80148c8 <ee_number+0x110>
 80147ee:	e7ed      	b.n	80147cc <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 80147f0:	f04f 0e20 	mov.w	lr, #32
 80147f4:	e7f2      	b.n	80147dc <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 80147f6:	4252      	negs	r2, r2
      size--;
 80147f8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80147fa:	3e01      	subs	r6, #1
 80147fc:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 80147fe:	272d      	movs	r7, #45	; 0x2d
 8014800:	e000      	b.n	8014804 <ee_number+0x4c>
  sign = 0;
 8014802:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8014804:	bb5a      	cbnz	r2, 801485e <ee_number+0xa6>
    tmp[i++] = '0';
 8014806:	2330      	movs	r3, #48	; 0x30
 8014808:	f88d 3004 	strb.w	r3, [sp, #4]
 801480c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8014810:	45ac      	cmp	ip, r5
 8014812:	dd00      	ble.n	8014816 <ee_number+0x5e>
 8014814:	4665      	mov	r5, ip
  size -= precision;
 8014816:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014818:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801481a:	b31c      	cbz	r4, 8014864 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 801481c:	b11f      	cbz	r7, 8014826 <ee_number+0x6e>
 801481e:	f800 7b01 	strb.w	r7, [r0], #1
 8014822:	3901      	subs	r1, #1
 8014824:	d007      	beq.n	8014836 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8014826:	2b00      	cmp	r3, #0
 8014828:	f103 33ff 	add.w	r3, r3, #4294967295
 801482c:	dd24      	ble.n	8014878 <ee_number+0xc0>
 801482e:	f800 eb01 	strb.w	lr, [r0], #1
 8014832:	3901      	subs	r1, #1
 8014834:	d1f7      	bne.n	8014826 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8014836:	b013      	add	sp, #76	; 0x4c
 8014838:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801483c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014840:	fb03 2216 	mls	r2, r3, r6, r2
 8014844:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8014848:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801484c:	446a      	add	r2, sp
 801484e:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8014852:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8014854:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8014858:	2a00      	cmp	r2, #0
 801485a:	d1ef      	bne.n	801483c <ee_number+0x84>
 801485c:	e7d8      	b.n	8014810 <ee_number+0x58>
  i = 0;
 801485e:	f04f 0c00 	mov.w	ip, #0
 8014862:	e7f9      	b.n	8014858 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8014864:	2b00      	cmp	r3, #0
 8014866:	f103 33ff 	add.w	r3, r3, #4294967295
 801486a:	ddd7      	ble.n	801481c <ee_number+0x64>
 801486c:	2220      	movs	r2, #32
 801486e:	f800 2b01 	strb.w	r2, [r0], #1
 8014872:	3901      	subs	r1, #1
 8014874:	d1f6      	bne.n	8014864 <ee_number+0xac>
 8014876:	e7de      	b.n	8014836 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8014878:	4565      	cmp	r5, ip
 801487a:	f105 35ff 	add.w	r5, r5, #4294967295
 801487e:	dd05      	ble.n	801488c <ee_number+0xd4>
 8014880:	2230      	movs	r2, #48	; 0x30
 8014882:	f800 2b01 	strb.w	r2, [r0], #1
 8014886:	3901      	subs	r1, #1
 8014888:	d1f6      	bne.n	8014878 <ee_number+0xc0>
 801488a:	e7d4      	b.n	8014836 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801488c:	4662      	mov	r2, ip
 801488e:	2a00      	cmp	r2, #0
 8014890:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014894:	dd09      	ble.n	80148aa <ee_number+0xf2>
 8014896:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 801489a:	446a      	add	r2, sp
 801489c:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 80148a0:	f800 2b01 	strb.w	r2, [r0], #1
 80148a4:	3901      	subs	r1, #1
 80148a6:	d1f1      	bne.n	801488c <ee_number+0xd4>
 80148a8:	e7c5      	b.n	8014836 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80148b0:	ddc1      	ble.n	8014836 <ee_number+0x7e>
 80148b2:	2220      	movs	r2, #32
 80148b4:	f800 2b01 	strb.w	r2, [r0], #1
 80148b8:	3901      	subs	r1, #1
 80148ba:	d1f6      	bne.n	80148aa <ee_number+0xf2>
 80148bc:	e7bb      	b.n	8014836 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 80148be:	2000      	movs	r0, #0
 80148c0:	e7b9      	b.n	8014836 <ee_number+0x7e>
 80148c2:	bf00      	nop
 80148c4:	08015bec 	.word	0x08015bec
 80148c8:	08015bc4 	.word	0x08015bc4

080148cc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80148cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148d0:	b087      	sub	sp, #28
 80148d2:	9205      	str	r2, [sp, #20]
 80148d4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80148d6:	1e0f      	subs	r7, r1, #0
 80148d8:	f340 80b8 	ble.w	8014a4c <tiny_vsnprintf_like+0x180>
 80148dc:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80148de:	4604      	mov	r4, r0
 80148e0:	e004      	b.n	80148ec <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 80148e2:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80148e6:	9b05      	ldr	r3, [sp, #20]
 80148e8:	3301      	adds	r3, #1
 80148ea:	9305      	str	r3, [sp, #20]
 80148ec:	9905      	ldr	r1, [sp, #20]
 80148ee:	780a      	ldrb	r2, [r1, #0]
 80148f0:	b922      	cbnz	r2, 80148fc <tiny_vsnprintf_like+0x30>
 80148f2:	1ba3      	subs	r3, r4, r6
 80148f4:	1e78      	subs	r0, r7, #1
 80148f6:	4283      	cmp	r3, r0
 80148f8:	f2c0 80a2 	blt.w	8014a40 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 80148fc:	1ba3      	subs	r3, r4, r6
 80148fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8014902:	4543      	cmp	r3, r8
 8014904:	f280 809c 	bge.w	8014a40 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8014908:	2a25      	cmp	r2, #37	; 0x25
 801490a:	d1ea      	bne.n	80148e2 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801490c:	1c4b      	adds	r3, r1, #1
 801490e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8014910:	784b      	ldrb	r3, [r1, #1]
 8014912:	2b30      	cmp	r3, #48	; 0x30
 8014914:	d020      	beq.n	8014958 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8014916:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 801491a:	3b30      	subs	r3, #48	; 0x30
 801491c:	b2db      	uxtb	r3, r3
 801491e:	2b09      	cmp	r3, #9
 8014920:	d91d      	bls.n	801495e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8014922:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8014926:	9b05      	ldr	r3, [sp, #20]
 8014928:	781a      	ldrb	r2, [r3, #0]
 801492a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 801492e:	2b20      	cmp	r3, #32
 8014930:	d867      	bhi.n	8014a02 <tiny_vsnprintf_like+0x136>
 8014932:	e8df f003 	tbb	[pc, r3]
 8014936:	664a      	.short	0x664a
 8014938:	66666666 	.word	0x66666666
 801493c:	66666666 	.word	0x66666666
 8014940:	66621e66 	.word	0x66621e66
 8014944:	62666666 	.word	0x62666666
 8014948:	66666666 	.word	0x66666666
 801494c:	66666666 	.word	0x66666666
 8014950:	19662866 	.word	0x19662866
 8014954:	6666      	.short	0x6666
 8014956:	7c          	.byte	0x7c
 8014957:	00          	.byte	0x00
      flags |= ZEROPAD;
 8014958:	f04f 0901 	mov.w	r9, #1
 801495c:	e7dd      	b.n	801491a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 801495e:	a805      	add	r0, sp, #20
 8014960:	f7ff ff18 	bl	8014794 <ee_skip_atoi>
 8014964:	4605      	mov	r5, r0
 8014966:	e7de      	b.n	8014926 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8014968:	230a      	movs	r3, #10
 801496a:	e031      	b.n	80149d0 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801496c:	2320      	movs	r3, #32
 801496e:	f804 3b01 	strb.w	r3, [r4], #1
 8014972:	3d01      	subs	r5, #1
 8014974:	2d00      	cmp	r5, #0
 8014976:	dcf9      	bgt.n	801496c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8014978:	9b04      	ldr	r3, [sp, #16]
 801497a:	1d1a      	adds	r2, r3, #4
 801497c:	9204      	str	r2, [sp, #16]
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8014984:	e7af      	b.n	80148e6 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8014986:	9b04      	ldr	r3, [sp, #16]
 8014988:	1d1a      	adds	r2, r3, #4
 801498a:	9204      	str	r2, [sp, #16]
 801498c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8014990:	f1b8 0f00 	cmp.w	r8, #0
 8014994:	d003      	beq.n	801499e <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8014996:	4640      	mov	r0, r8
 8014998:	f7eb fbf2 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801499c:	e006      	b.n	80149ac <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 801499e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014a50 <tiny_vsnprintf_like+0x184>
 80149a2:	e7f8      	b.n	8014996 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 80149a4:	2220      	movs	r2, #32
 80149a6:	f804 2b01 	strb.w	r2, [r4], #1
 80149aa:	461d      	mov	r5, r3
 80149ac:	1e6b      	subs	r3, r5, #1
 80149ae:	4285      	cmp	r5, r0
 80149b0:	dcf8      	bgt.n	80149a4 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80149b2:	2200      	movs	r2, #0
 80149b4:	e006      	b.n	80149c4 <tiny_vsnprintf_like+0xf8>
 80149b6:	4643      	mov	r3, r8
 80149b8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80149bc:	f804 1b01 	strb.w	r1, [r4], #1
 80149c0:	3201      	adds	r2, #1
 80149c2:	4698      	mov	r8, r3
 80149c4:	4282      	cmp	r2, r0
 80149c6:	dbf6      	blt.n	80149b6 <tiny_vsnprintf_like+0xea>
 80149c8:	e78d      	b.n	80148e6 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80149ca:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 80149ce:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 80149d0:	f019 0f02 	tst.w	r9, #2
 80149d4:	d02f      	beq.n	8014a36 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 80149d6:	9a04      	ldr	r2, [sp, #16]
 80149d8:	1d11      	adds	r1, r2, #4
 80149da:	9104      	str	r1, [sp, #16]
 80149dc:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80149de:	1ba1      	subs	r1, r4, r6
 80149e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80149e4:	f04f 30ff 	mov.w	r0, #4294967295
 80149e8:	9001      	str	r0, [sp, #4]
 80149ea:	9500      	str	r5, [sp, #0]
 80149ec:	eba8 0101 	sub.w	r1, r8, r1
 80149f0:	4620      	mov	r0, r4
 80149f2:	f7ff fee1 	bl	80147b8 <ee_number>
 80149f6:	4604      	mov	r4, r0
 80149f8:	e775      	b.n	80148e6 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 80149fa:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 80149fe:	230a      	movs	r3, #10
 8014a00:	e7e6      	b.n	80149d0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8014a02:	2a25      	cmp	r2, #37	; 0x25
 8014a04:	d002      	beq.n	8014a0c <tiny_vsnprintf_like+0x140>
 8014a06:	2325      	movs	r3, #37	; 0x25
 8014a08:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8014a0c:	1ba3      	subs	r3, r4, r6
 8014a0e:	4598      	cmp	r8, r3
 8014a10:	dd0f      	ble.n	8014a32 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8014a12:	9b05      	ldr	r3, [sp, #20]
 8014a14:	781a      	ldrb	r2, [r3, #0]
 8014a16:	b13a      	cbz	r2, 8014a28 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8014a18:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8014a1c:	1ba3      	subs	r3, r4, r6
 8014a1e:	4598      	cmp	r8, r3
 8014a20:	f73f af61 	bgt.w	80148e6 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8014a24:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8014a26:	e7d3      	b.n	80149d0 <tiny_vsnprintf_like+0x104>
          --fmt;
 8014a28:	3b01      	subs	r3, #1
 8014a2a:	9305      	str	r3, [sp, #20]
 8014a2c:	e7f6      	b.n	8014a1c <tiny_vsnprintf_like+0x150>
        base = 16;
 8014a2e:	2310      	movs	r3, #16
 8014a30:	e7ce      	b.n	80149d0 <tiny_vsnprintf_like+0x104>
    base = 10;
 8014a32:	230a      	movs	r3, #10
 8014a34:	e7cc      	b.n	80149d0 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8014a36:	9a04      	ldr	r2, [sp, #16]
 8014a38:	1d11      	adds	r1, r2, #4
 8014a3a:	9104      	str	r1, [sp, #16]
 8014a3c:	6812      	ldr	r2, [r2, #0]
 8014a3e:	e7ce      	b.n	80149de <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8014a40:	2300      	movs	r3, #0
 8014a42:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8014a44:	1ba0      	subs	r0, r4, r6
}
 8014a46:	b007      	add	sp, #28
 8014a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	e7fa      	b.n	8014a46 <tiny_vsnprintf_like+0x17a>
 8014a50:	08015c14 	.word	0x08015c14

08014a54 <__libc_init_array>:
 8014a54:	b570      	push	{r4, r5, r6, lr}
 8014a56:	4d0d      	ldr	r5, [pc, #52]	; (8014a8c <__libc_init_array+0x38>)
 8014a58:	4c0d      	ldr	r4, [pc, #52]	; (8014a90 <__libc_init_array+0x3c>)
 8014a5a:	1b64      	subs	r4, r4, r5
 8014a5c:	10a4      	asrs	r4, r4, #2
 8014a5e:	2600      	movs	r6, #0
 8014a60:	42a6      	cmp	r6, r4
 8014a62:	d109      	bne.n	8014a78 <__libc_init_array+0x24>
 8014a64:	4d0b      	ldr	r5, [pc, #44]	; (8014a94 <__libc_init_array+0x40>)
 8014a66:	4c0c      	ldr	r4, [pc, #48]	; (8014a98 <__libc_init_array+0x44>)
 8014a68:	f000 f8ae 	bl	8014bc8 <_init>
 8014a6c:	1b64      	subs	r4, r4, r5
 8014a6e:	10a4      	asrs	r4, r4, #2
 8014a70:	2600      	movs	r6, #0
 8014a72:	42a6      	cmp	r6, r4
 8014a74:	d105      	bne.n	8014a82 <__libc_init_array+0x2e>
 8014a76:	bd70      	pop	{r4, r5, r6, pc}
 8014a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a7c:	4798      	blx	r3
 8014a7e:	3601      	adds	r6, #1
 8014a80:	e7ee      	b.n	8014a60 <__libc_init_array+0xc>
 8014a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a86:	4798      	blx	r3
 8014a88:	3601      	adds	r6, #1
 8014a8a:	e7f2      	b.n	8014a72 <__libc_init_array+0x1e>
 8014a8c:	08015c28 	.word	0x08015c28
 8014a90:	08015c28 	.word	0x08015c28
 8014a94:	08015c28 	.word	0x08015c28
 8014a98:	08015c2c 	.word	0x08015c2c

08014a9c <memcpy>:
 8014a9c:	440a      	add	r2, r1
 8014a9e:	4291      	cmp	r1, r2
 8014aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8014aa4:	d100      	bne.n	8014aa8 <memcpy+0xc>
 8014aa6:	4770      	bx	lr
 8014aa8:	b510      	push	{r4, lr}
 8014aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ab2:	4291      	cmp	r1, r2
 8014ab4:	d1f9      	bne.n	8014aaa <memcpy+0xe>
 8014ab6:	bd10      	pop	{r4, pc}

08014ab8 <memset>:
 8014ab8:	4402      	add	r2, r0
 8014aba:	4603      	mov	r3, r0
 8014abc:	4293      	cmp	r3, r2
 8014abe:	d100      	bne.n	8014ac2 <memset+0xa>
 8014ac0:	4770      	bx	lr
 8014ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8014ac6:	e7f9      	b.n	8014abc <memset+0x4>

08014ac8 <floor>:
 8014ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014acc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8014ad0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8014ad4:	2e13      	cmp	r6, #19
 8014ad6:	4602      	mov	r2, r0
 8014ad8:	460b      	mov	r3, r1
 8014ada:	4607      	mov	r7, r0
 8014adc:	460c      	mov	r4, r1
 8014ade:	4605      	mov	r5, r0
 8014ae0:	dc33      	bgt.n	8014b4a <floor+0x82>
 8014ae2:	2e00      	cmp	r6, #0
 8014ae4:	da14      	bge.n	8014b10 <floor+0x48>
 8014ae6:	a334      	add	r3, pc, #208	; (adr r3, 8014bb8 <floor+0xf0>)
 8014ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aec:	f7eb fb56 	bl	800019c <__adddf3>
 8014af0:	2200      	movs	r2, #0
 8014af2:	2300      	movs	r3, #0
 8014af4:	f7eb fd86 	bl	8000604 <__aeabi_dcmpgt>
 8014af8:	b138      	cbz	r0, 8014b0a <floor+0x42>
 8014afa:	2c00      	cmp	r4, #0
 8014afc:	da58      	bge.n	8014bb0 <floor+0xe8>
 8014afe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014b02:	431d      	orrs	r5, r3
 8014b04:	d001      	beq.n	8014b0a <floor+0x42>
 8014b06:	4c2e      	ldr	r4, [pc, #184]	; (8014bc0 <floor+0xf8>)
 8014b08:	2500      	movs	r5, #0
 8014b0a:	4623      	mov	r3, r4
 8014b0c:	462f      	mov	r7, r5
 8014b0e:	e025      	b.n	8014b5c <floor+0x94>
 8014b10:	4a2c      	ldr	r2, [pc, #176]	; (8014bc4 <floor+0xfc>)
 8014b12:	fa42 f806 	asr.w	r8, r2, r6
 8014b16:	ea01 0208 	and.w	r2, r1, r8
 8014b1a:	4302      	orrs	r2, r0
 8014b1c:	d01e      	beq.n	8014b5c <floor+0x94>
 8014b1e:	a326      	add	r3, pc, #152	; (adr r3, 8014bb8 <floor+0xf0>)
 8014b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b24:	f7eb fb3a 	bl	800019c <__adddf3>
 8014b28:	2200      	movs	r2, #0
 8014b2a:	2300      	movs	r3, #0
 8014b2c:	f7eb fd6a 	bl	8000604 <__aeabi_dcmpgt>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d0ea      	beq.n	8014b0a <floor+0x42>
 8014b34:	2c00      	cmp	r4, #0
 8014b36:	bfbe      	ittt	lt
 8014b38:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014b3c:	fa43 f606 	asrlt.w	r6, r3, r6
 8014b40:	19a4      	addlt	r4, r4, r6
 8014b42:	ea24 0408 	bic.w	r4, r4, r8
 8014b46:	2500      	movs	r5, #0
 8014b48:	e7df      	b.n	8014b0a <floor+0x42>
 8014b4a:	2e33      	cmp	r6, #51	; 0x33
 8014b4c:	dd0a      	ble.n	8014b64 <floor+0x9c>
 8014b4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014b52:	d103      	bne.n	8014b5c <floor+0x94>
 8014b54:	f7eb fb22 	bl	800019c <__adddf3>
 8014b58:	4607      	mov	r7, r0
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	4638      	mov	r0, r7
 8014b5e:	4619      	mov	r1, r3
 8014b60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b64:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8014b68:	f04f 32ff 	mov.w	r2, #4294967295
 8014b6c:	fa22 f808 	lsr.w	r8, r2, r8
 8014b70:	ea18 0f00 	tst.w	r8, r0
 8014b74:	d0f2      	beq.n	8014b5c <floor+0x94>
 8014b76:	a310      	add	r3, pc, #64	; (adr r3, 8014bb8 <floor+0xf0>)
 8014b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b7c:	f7eb fb0e 	bl	800019c <__adddf3>
 8014b80:	2200      	movs	r2, #0
 8014b82:	2300      	movs	r3, #0
 8014b84:	f7eb fd3e 	bl	8000604 <__aeabi_dcmpgt>
 8014b88:	2800      	cmp	r0, #0
 8014b8a:	d0be      	beq.n	8014b0a <floor+0x42>
 8014b8c:	2c00      	cmp	r4, #0
 8014b8e:	da02      	bge.n	8014b96 <floor+0xce>
 8014b90:	2e14      	cmp	r6, #20
 8014b92:	d103      	bne.n	8014b9c <floor+0xd4>
 8014b94:	3401      	adds	r4, #1
 8014b96:	ea25 0508 	bic.w	r5, r5, r8
 8014b9a:	e7b6      	b.n	8014b0a <floor+0x42>
 8014b9c:	2301      	movs	r3, #1
 8014b9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014ba2:	fa03 f606 	lsl.w	r6, r3, r6
 8014ba6:	4435      	add	r5, r6
 8014ba8:	42bd      	cmp	r5, r7
 8014baa:	bf38      	it	cc
 8014bac:	18e4      	addcc	r4, r4, r3
 8014bae:	e7f2      	b.n	8014b96 <floor+0xce>
 8014bb0:	2500      	movs	r5, #0
 8014bb2:	462c      	mov	r4, r5
 8014bb4:	e7a9      	b.n	8014b0a <floor+0x42>
 8014bb6:	bf00      	nop
 8014bb8:	8800759c 	.word	0x8800759c
 8014bbc:	7e37e43c 	.word	0x7e37e43c
 8014bc0:	bff00000 	.word	0xbff00000
 8014bc4:	000fffff 	.word	0x000fffff

08014bc8 <_init>:
 8014bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bca:	bf00      	nop
 8014bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bce:	bc08      	pop	{r3}
 8014bd0:	469e      	mov	lr, r3
 8014bd2:	4770      	bx	lr

08014bd4 <_fini>:
 8014bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bd6:	bf00      	nop
 8014bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bda:	bc08      	pop	{r3}
 8014bdc:	469e      	mov	lr, r3
 8014bde:	4770      	bx	lr
