
LoRaWAN_End_Node_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015dc0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  08015f00  08015f00  00025f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f58  08016f58  0003e5c0  2**0
                  CONTENTS
  4 .ARM          00000008  08016f58  08016f58  00026f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016f60  08016f60  0003e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08016f60  08016f60  00026f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08016f68  08016f68  00026f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000c0  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000118  20000000  08016f70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b18  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00004430  20000118  20000118  00040118  2**2
                  ALLOC
 12 RAM1_region   00000000  20004548  20004548  0003e5c0  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5c0  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20004548  20004548  00040118  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY
 16 .debug_info   00073ac0  00000000  00000000  0003e5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000e19e  00000000  00000000  000b20aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0003b219  00000000  00000000  000c0248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003c50  00000000  00000000  000fb468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003f70  00000000  00000000  000ff0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002ffed  00000000  00000000  00103028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00069b19  00000000  00000000  00133015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f7c59  00000000  00000000  0019cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  00294787  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000acc8  00000000  00000000  002947d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000118 	.word	0x20000118
 800015c:	00000000 	.word	0x00000000
 8000160:	08015ee8 	.word	0x08015ee8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000011c 	.word	0x2000011c
 800017c:	08015ee8 	.word	0x08015ee8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_fmul>:
 8000884:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000888:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800088c:	bf1e      	ittt	ne
 800088e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000892:	ea92 0f0c 	teqne	r2, ip
 8000896:	ea93 0f0c 	teqne	r3, ip
 800089a:	d06f      	beq.n	800097c <__aeabi_fmul+0xf8>
 800089c:	441a      	add	r2, r3
 800089e:	ea80 0c01 	eor.w	ip, r0, r1
 80008a2:	0240      	lsls	r0, r0, #9
 80008a4:	bf18      	it	ne
 80008a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008aa:	d01e      	beq.n	80008ea <__aeabi_fmul+0x66>
 80008ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b8:	fba0 3101 	umull	r3, r1, r0, r1
 80008bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008c4:	bf3e      	ittt	cc
 80008c6:	0049      	lslcc	r1, r1, #1
 80008c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008cc:	005b      	lslcc	r3, r3, #1
 80008ce:	ea40 0001 	orr.w	r0, r0, r1
 80008d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008d6:	2afd      	cmp	r2, #253	; 0xfd
 80008d8:	d81d      	bhi.n	8000916 <__aeabi_fmul+0x92>
 80008da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e2:	bf08      	it	eq
 80008e4:	f020 0001 	biceq.w	r0, r0, #1
 80008e8:	4770      	bx	lr
 80008ea:	f090 0f00 	teq	r0, #0
 80008ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f2:	bf08      	it	eq
 80008f4:	0249      	lsleq	r1, r1, #9
 80008f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008fe:	3a7f      	subs	r2, #127	; 0x7f
 8000900:	bfc2      	ittt	gt
 8000902:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000906:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800090a:	4770      	bxgt	lr
 800090c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	3a01      	subs	r2, #1
 8000916:	dc5d      	bgt.n	80009d4 <__aeabi_fmul+0x150>
 8000918:	f112 0f19 	cmn.w	r2, #25
 800091c:	bfdc      	itt	le
 800091e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000922:	4770      	bxle	lr
 8000924:	f1c2 0200 	rsb	r2, r2, #0
 8000928:	0041      	lsls	r1, r0, #1
 800092a:	fa21 f102 	lsr.w	r1, r1, r2
 800092e:	f1c2 0220 	rsb	r2, r2, #32
 8000932:	fa00 fc02 	lsl.w	ip, r0, r2
 8000936:	ea5f 0031 	movs.w	r0, r1, rrx
 800093a:	f140 0000 	adc.w	r0, r0, #0
 800093e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000942:	bf08      	it	eq
 8000944:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000948:	4770      	bx	lr
 800094a:	f092 0f00 	teq	r2, #0
 800094e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000952:	bf02      	ittt	eq
 8000954:	0040      	lsleq	r0, r0, #1
 8000956:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800095a:	3a01      	subeq	r2, #1
 800095c:	d0f9      	beq.n	8000952 <__aeabi_fmul+0xce>
 800095e:	ea40 000c 	orr.w	r0, r0, ip
 8000962:	f093 0f00 	teq	r3, #0
 8000966:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800096a:	bf02      	ittt	eq
 800096c:	0049      	lsleq	r1, r1, #1
 800096e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000972:	3b01      	subeq	r3, #1
 8000974:	d0f9      	beq.n	800096a <__aeabi_fmul+0xe6>
 8000976:	ea41 010c 	orr.w	r1, r1, ip
 800097a:	e78f      	b.n	800089c <__aeabi_fmul+0x18>
 800097c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000980:	ea92 0f0c 	teq	r2, ip
 8000984:	bf18      	it	ne
 8000986:	ea93 0f0c 	teqne	r3, ip
 800098a:	d00a      	beq.n	80009a2 <__aeabi_fmul+0x11e>
 800098c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000990:	bf18      	it	ne
 8000992:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000996:	d1d8      	bne.n	800094a <__aeabi_fmul+0xc6>
 8000998:	ea80 0001 	eor.w	r0, r0, r1
 800099c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	4770      	bx	lr
 80009a2:	f090 0f00 	teq	r0, #0
 80009a6:	bf17      	itett	ne
 80009a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009ac:	4608      	moveq	r0, r1
 80009ae:	f091 0f00 	teqne	r1, #0
 80009b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009b6:	d014      	beq.n	80009e2 <__aeabi_fmul+0x15e>
 80009b8:	ea92 0f0c 	teq	r2, ip
 80009bc:	d101      	bne.n	80009c2 <__aeabi_fmul+0x13e>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d10f      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009c2:	ea93 0f0c 	teq	r3, ip
 80009c6:	d103      	bne.n	80009d0 <__aeabi_fmul+0x14c>
 80009c8:	024b      	lsls	r3, r1, #9
 80009ca:	bf18      	it	ne
 80009cc:	4608      	movne	r0, r1
 80009ce:	d108      	bne.n	80009e2 <__aeabi_fmul+0x15e>
 80009d0:	ea80 0001 	eor.w	r0, r0, r1
 80009d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e0:	4770      	bx	lr
 80009e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bx	lr

080009ec <__aeabi_fdiv>:
 80009ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009f4:	bf1e      	ittt	ne
 80009f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009fa:	ea92 0f0c 	teqne	r2, ip
 80009fe:	ea93 0f0c 	teqne	r3, ip
 8000a02:	d069      	beq.n	8000ad8 <__aeabi_fdiv+0xec>
 8000a04:	eba2 0203 	sub.w	r2, r2, r3
 8000a08:	ea80 0c01 	eor.w	ip, r0, r1
 8000a0c:	0249      	lsls	r1, r1, #9
 8000a0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a12:	d037      	beq.n	8000a84 <__aeabi_fdiv+0x98>
 8000a14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf38      	it	cc
 8000a28:	005b      	lslcc	r3, r3, #1
 8000a2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf24      	itt	cs
 8000a36:	1a5b      	subcs	r3, r3, r1
 8000a38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a40:	bf24      	itt	cs
 8000a42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a4e:	bf24      	itt	cs
 8000a50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a5c:	bf24      	itt	cs
 8000a5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	bf18      	it	ne
 8000a6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a6e:	d1e0      	bne.n	8000a32 <__aeabi_fdiv+0x46>
 8000a70:	2afd      	cmp	r2, #253	; 0xfd
 8000a72:	f63f af50 	bhi.w	8000916 <__aeabi_fmul+0x92>
 8000a76:	428b      	cmp	r3, r1
 8000a78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7c:	bf08      	it	eq
 8000a7e:	f020 0001 	biceq.w	r0, r0, #1
 8000a82:	4770      	bx	lr
 8000a84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8c:	327f      	adds	r2, #127	; 0x7f
 8000a8e:	bfc2      	ittt	gt
 8000a90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a98:	4770      	bxgt	lr
 8000a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a9e:	f04f 0300 	mov.w	r3, #0
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	e737      	b.n	8000916 <__aeabi_fmul+0x92>
 8000aa6:	f092 0f00 	teq	r2, #0
 8000aaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aae:	bf02      	ittt	eq
 8000ab0:	0040      	lsleq	r0, r0, #1
 8000ab2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ab6:	3a01      	subeq	r2, #1
 8000ab8:	d0f9      	beq.n	8000aae <__aeabi_fdiv+0xc2>
 8000aba:	ea40 000c 	orr.w	r0, r0, ip
 8000abe:	f093 0f00 	teq	r3, #0
 8000ac2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac6:	bf02      	ittt	eq
 8000ac8:	0049      	lsleq	r1, r1, #1
 8000aca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ace:	3b01      	subeq	r3, #1
 8000ad0:	d0f9      	beq.n	8000ac6 <__aeabi_fdiv+0xda>
 8000ad2:	ea41 010c 	orr.w	r1, r1, ip
 8000ad6:	e795      	b.n	8000a04 <__aeabi_fdiv+0x18>
 8000ad8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000adc:	ea92 0f0c 	teq	r2, ip
 8000ae0:	d108      	bne.n	8000af4 <__aeabi_fdiv+0x108>
 8000ae2:	0242      	lsls	r2, r0, #9
 8000ae4:	f47f af7d 	bne.w	80009e2 <__aeabi_fmul+0x15e>
 8000ae8:	ea93 0f0c 	teq	r3, ip
 8000aec:	f47f af70 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000af0:	4608      	mov	r0, r1
 8000af2:	e776      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	d104      	bne.n	8000b04 <__aeabi_fdiv+0x118>
 8000afa:	024b      	lsls	r3, r1, #9
 8000afc:	f43f af4c 	beq.w	8000998 <__aeabi_fmul+0x114>
 8000b00:	4608      	mov	r0, r1
 8000b02:	e76e      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b08:	bf18      	it	ne
 8000b0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	d1ca      	bne.n	8000aa6 <__aeabi_fdiv+0xba>
 8000b10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b14:	f47f af5c 	bne.w	80009d0 <__aeabi_fmul+0x14c>
 8000b18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b1c:	f47f af3c 	bne.w	8000998 <__aeabi_fmul+0x114>
 8000b20:	e75f      	b.n	80009e2 <__aeabi_fmul+0x15e>
 8000b22:	bf00      	nop

08000b24 <__aeabi_f2iz>:
 8000b24:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b2c:	d30f      	bcc.n	8000b4e <__aeabi_f2iz+0x2a>
 8000b2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_f2iz+0x30>
 8000b38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b40:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b44:	fa23 f002 	lsr.w	r0, r3, r2
 8000b48:	bf18      	it	ne
 8000b4a:	4240      	negne	r0, r0
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr
 8000b54:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b58:	d101      	bne.n	8000b5e <__aeabi_f2iz+0x3a>
 8000b5a:	0242      	lsls	r2, r0, #9
 8000b5c:	d105      	bne.n	8000b6a <__aeabi_f2iz+0x46>
 8000b5e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b62:	bf08      	it	eq
 8000b64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_f2uiz>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	d20e      	bcs.n	8000b92 <__aeabi_f2uiz+0x22>
 8000b74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b78:	d30b      	bcc.n	8000b92 <__aeabi_f2uiz+0x22>
 8000b7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b82:	d409      	bmi.n	8000b98 <__aeabi_f2uiz+0x28>
 8000b84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr
 8000b98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b9c:	d101      	bne.n	8000ba2 <__aeabi_f2uiz+0x32>
 8000b9e:	0242      	lsls	r2, r0, #9
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_f2uiz+0x38>
 8000ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc4:	f000 b974 	b.w	8000eb0 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	9e08      	ldr	r6, [sp, #32]
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	4688      	mov	r8, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14d      	bne.n	8000c8c <__udivmoddi4+0xac>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4694      	mov	ip, r2
 8000bf4:	d968      	bls.n	8000cc8 <__udivmoddi4+0xe8>
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	b152      	cbz	r2, 8000c12 <__udivmoddi4+0x32>
 8000bfc:	fa01 f302 	lsl.w	r3, r1, r2
 8000c00:	f1c2 0120 	rsb	r1, r2, #32
 8000c04:	fa20 f101 	lsr.w	r1, r0, r1
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	ea41 0803 	orr.w	r8, r1, r3
 8000c10:	4094      	lsls	r4, r2
 8000c12:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c16:	0c21      	lsrs	r1, r4, #16
 8000c18:	fbb8 fef5 	udiv	lr, r8, r5
 8000c1c:	fa1f f78c 	uxth.w	r7, ip
 8000c20:	fb05 831e 	mls	r3, r5, lr, r8
 8000c24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c28:	fb0e f107 	mul.w	r1, lr, r7
 8000c2c:	4299      	cmp	r1, r3
 8000c2e:	d90b      	bls.n	8000c48 <__udivmoddi4+0x68>
 8000c30:	eb1c 0303 	adds.w	r3, ip, r3
 8000c34:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c38:	f080 811e 	bcs.w	8000e78 <__udivmoddi4+0x298>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f240 811b 	bls.w	8000e78 <__udivmoddi4+0x298>
 8000c42:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c50:	fb05 3310 	mls	r3, r5, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x96>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 8108 	bcs.w	8000e7c <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8105 	bls.w	8000e7c <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	1be4      	subs	r4, r4, r7
 8000c78:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa8>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0xc2>
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	f000 80ee 	beq.w	8000e72 <__udivmoddi4+0x292>
 8000c96:	2100      	movs	r1, #0
 8000c98:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x160>
 8000caa:	42ab      	cmp	r3, r5
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xd4>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80f9 	bhi.w	8000ea6 <__udivmoddi4+0x2c6>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb65 0303 	sbc.w	r3, r5, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	4698      	mov	r8, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d0e2      	beq.n	8000c88 <__udivmoddi4+0xa8>
 8000cc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc6:	e7df      	b.n	8000c88 <__udivmoddi4+0xa8>
 8000cc8:	b902      	cbnz	r2, 8000ccc <__udivmoddi4+0xec>
 8000cca:	deff      	udf	#255	; 0xff
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	f040 8091 	bne.w	8000df8 <__udivmoddi4+0x218>
 8000cd6:	eba1 050c 	sub.w	r5, r1, ip
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce8:	fb07 5013 	mls	r0, r7, r3, r5
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cf2:	fb0e f003 	mul.w	r0, lr, r3
 8000cf6:	42a8      	cmp	r0, r5
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x12c>
 8000cfa:	eb1c 0505 	adds.w	r5, ip, r5
 8000cfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x12a>
 8000d04:	42a8      	cmp	r0, r5
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2c0>
 8000d0a:	4643      	mov	r3, r8
 8000d0c:	1a2d      	subs	r5, r5, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d14:	fb07 5510 	mls	r5, r7, r0, r5
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x156>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x154>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d34:	4628      	mov	r0, r5
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3e:	e79e      	b.n	8000c7e <__udivmoddi4+0x9e>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d52:	fa05 f301 	lsl.w	r3, r5, r1
 8000d56:	431c      	orrs	r4, r3
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	0c20      	lsrs	r0, r4, #16
 8000d68:	fa1f fe8c 	uxth.w	lr, ip
 8000d6c:	fb09 5518 	mls	r5, r9, r8, r5
 8000d70:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d74:	fb08 f00e 	mul.w	r0, r8, lr
 8000d78:	42a8      	cmp	r0, r5
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b8>
 8000d80:	eb1c 0505 	adds.w	r5, ip, r5
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2bc>
 8000d8c:	42a8      	cmp	r0, r5
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2bc>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4465      	add	r5, ip
 8000d98:	1a2d      	subs	r5, r5, r0
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000da0:	fb09 5510 	mls	r5, r9, r0, r5
 8000da4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dac:	45ae      	cmp	lr, r5
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1e2>
 8000db0:	eb1c 0505 	adds.w	r5, ip, r5
 8000db4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2b4>
 8000dba:	45ae      	cmp	lr, r5
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2b4>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4465      	add	r5, ip
 8000dc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dca:	eba5 050e 	sub.w	r5, r5, lr
 8000dce:	42a5      	cmp	r5, r4
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46a6      	mov	lr, r4
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x2a4>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x2a0>
 8000dd8:	b15e      	cbz	r6, 8000df2 <__udivmoddi4+0x212>
 8000dda:	ebb3 0208 	subs.w	r2, r3, r8
 8000dde:	eb65 050e 	sbc.w	r5, r5, lr
 8000de2:	fa05 f707 	lsl.w	r7, r5, r7
 8000de6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dea:	40cd      	lsrs	r5, r1
 8000dec:	431f      	orrs	r7, r3
 8000dee:	e9c6 7500 	strd	r7, r5, [r6]
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f103 	lsr.w	r1, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	fa25 f303 	lsr.w	r3, r5, r3
 8000e08:	4095      	lsls	r5, r2
 8000e0a:	430d      	orrs	r5, r1
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e18:	fb07 3011 	mls	r0, r7, r1, r3
 8000e1c:	0c2b      	lsrs	r3, r5, #16
 8000e1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e22:	fb01 f00e 	mul.w	r0, r1, lr
 8000e26:	4298      	cmp	r0, r3
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x260>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b8>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b8>
 8000e3c:	3902      	subs	r1, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a1b      	subs	r3, r3, r0
 8000e42:	b2ad      	uxth	r5, r5
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3310 	mls	r3, r7, r0, r3
 8000e4c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e50:	fb00 f30e 	mul.w	r3, r0, lr
 8000e54:	42ab      	cmp	r3, r5
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x28a>
 8000e58:	eb1c 0505 	adds.w	r5, ip, r5
 8000e5c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2b0>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2b0>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4465      	add	r5, ip
 8000e6a:	1aed      	subs	r5, r5, r3
 8000e6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0x104>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e707      	b.n	8000c88 <__udivmoddi4+0xa8>
 8000e78:	4686      	mov	lr, r0
 8000e7a:	e6e5      	b.n	8000c48 <__udivmoddi4+0x68>
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	e6fa      	b.n	8000c76 <__udivmoddi4+0x96>
 8000e80:	454b      	cmp	r3, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f8>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e8c:	3801      	subs	r0, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f8>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x28a>
 8000e94:	4620      	mov	r0, r4
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1e2>
 8000e98:	4641      	mov	r1, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x260>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b8>
 8000ea0:	3b02      	subs	r3, #2
 8000ea2:	4465      	add	r5, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x12c>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e709      	b.n	8000cbe <__udivmoddi4+0xde>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x156>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eb4:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_ADC_Init+0x50>)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <MX_ADC_Init+0x54>)
 8000eba:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ec0:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec8:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	2204      	movs	r2, #4
 8000ecc:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ece:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed0:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ed2:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ede:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ee0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000eea:	2207      	movs	r2, #7
 8000eec:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000eee:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ef0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ef4:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ef6:	f002 fa99 	bl	800342c <HAL_ADC_Init>
 8000efa:	b900      	cbnz	r0, 8000efe <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000efc:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000efe:	f000 fe71 	bl	8001be4 <Error_Handler>
}
 8000f02:	e7fb      	b.n	8000efc <MX_ADC_Init+0x48>
 8000f04:	20000134 	.word	0x20000134
 8000f08:	40012400 	.word	0x40012400

08000f0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f0c:	6802      	ldr	r2, [r0, #0]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HAL_ADC_MspInit+0x28>)
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d000      	beq.n	8000f16 <HAL_ADC_MspInit+0xa>
 8000f14:	4770      	bx	lr
{
 8000f16:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f22:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f2a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f2c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f2e:	b002      	add	sp, #8
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40012400 	.word	0x40012400

08000f38 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000f38:	6802      	ldr	r2, [r0, #0]
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_ADC_MspDeInit+0x18>)
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d000      	beq.n	8000f42 <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000f40:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f46:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8000f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	e7f7      	b.n	8000f40 <HAL_ADC_MspDeInit+0x8>
 8000f50:	40012400 	.word	0x40012400

08000f54 <ADC_ReadChannels>:


/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000f54:	b530      	push	{r4, r5, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	9302      	str	r3, [sp, #8]
 8000f60:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8000f62:	f7ff ffa7 	bl	8000eb4 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000f66:	4816      	ldr	r0, [pc, #88]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f68:	f002 fea4 	bl	8003cb4 <HAL_ADCEx_Calibration_Start>
 8000f6c:	b9f8      	cbnz	r0, 8000fae <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000f6e:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f74:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f76:	a901      	add	r1, sp, #4
 8000f78:	4811      	ldr	r0, [pc, #68]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f7a:	f002 fbe5 	bl	8003748 <HAL_ADC_ConfigChannel>
 8000f7e:	b9c8      	cbnz	r0, 8000fb4 <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000f80:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f82:	f002 fda5 	bl	8003ad0 <HAL_ADC_Start>
 8000f86:	b9c0      	cbnz	r0, 8000fba <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000f88:	4c0d      	ldr	r4, [pc, #52]	; (8000fc0 <ADC_ReadChannels+0x6c>)
 8000f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f002 fb78 	bl	8003684 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f94:	4620      	mov	r0, r4
 8000f96:	f002 fe6d 	bl	8003c74 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f002 fbd1 	bl	8003742 <HAL_ADC_GetValue>
 8000fa0:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f002 fe10 	bl	8003bc8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000fa8:	4628      	mov	r0, r5
 8000faa:	b005      	add	sp, #20
 8000fac:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000fae:	f000 fe19 	bl	8001be4 <Error_Handler>
 8000fb2:	e7dc      	b.n	8000f6e <ADC_ReadChannels+0x1a>
    Error_Handler();
 8000fb4:	f000 fe16 	bl	8001be4 <Error_Handler>
 8000fb8:	e7e2      	b.n	8000f80 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8000fba:	f000 fe13 	bl	8001be4 <Error_Handler>
 8000fbe:	e7e3      	b.n	8000f88 <ADC_ReadChannels+0x34>
 8000fc0:	20000134 	.word	0x20000134

08000fc4 <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <SYS_InitMeasurement+0x8>)
 8000fc6:	4a02      	ldr	r2, [pc, #8]	; (8000fd0 <SYS_InitMeasurement+0xc>)
 8000fc8:	601a      	str	r2, [r3, #0]
}
 8000fca:	4770      	bx	lr
 8000fcc:	20000134 	.word	0x20000134
 8000fd0:	40012400 	.word	0x40012400

08000fd4 <SYS_GetBatteryLevel>:
{
 8000fd4:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <SYS_GetBatteryLevel+0x38>)
 8000fd8:	f7ff ffbc 	bl	8000f54 <ADC_ReadChannels>
  if (measuredLevel == 0)
 8000fdc:	b1a0      	cbz	r0, 8001008 <SYS_GetBatteryLevel+0x34>
 8000fde:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <SYS_GetBatteryLevel+0x3c>)
 8000fe2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8000fe6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d007      	beq.n	8000ffe <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000fee:	f640 40e4 	movw	r0, #3300	; 0xce4
 8000ff2:	fb03 f000 	mul.w	r0, r3, r0
 8000ff6:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ffa:	b280      	uxth	r0, r0
 8000ffc:	e005      	b.n	800100a <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <SYS_GetBatteryLevel+0x40>)
 8001000:	fbb0 f0f2 	udiv	r0, r0, r2
 8001004:	b280      	uxth	r0, r0
 8001006:	e000      	b.n	800100a <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001008:	2000      	movs	r0, #0
}
 800100a:	bd08      	pop	{r3, pc}
 800100c:	b4002000 	.word	0xb4002000
 8001010:	1fff7500 	.word	0x1fff7500
 8001014:	004c08d8 	.word	0x004c08d8

08001018 <SYS_GetTemperatureLevel>:
{
 8001018:	b510      	push	{r4, lr}
 800101a:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001022:	f7ff ffd7 	bl	8000fd4 <SYS_GetBatteryLevel>
 8001026:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001028:	4821      	ldr	r0, [pc, #132]	; (80010b0 <SYS_GetTemperatureLevel+0x98>)
 800102a:	f7ff ff93 	bl	8000f54 <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SYS_GetTemperatureLevel+0x9c>)
 8001030:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001034:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001038:	428a      	cmp	r2, r1
 800103a:	d01d      	beq.n	8001078 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800103c:	fb00 f304 	mul.w	r3, r0, r4
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	4c1d      	ldr	r4, [pc, #116]	; (80010b8 <SYS_GetTemperatureLevel+0xa0>)
 8001044:	fba4 0303 	umull	r0, r3, r4, r3
 8001048:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	fb00 f303 	mul.w	r3, r0, r3
 8001052:	1a52      	subs	r2, r2, r1
 8001054:	fb93 f3f2 	sdiv	r3, r3, r2
 8001058:	331e      	adds	r3, #30
 800105a:	b21b      	sxth	r3, r3
 800105c:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001060:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001064:	b21b      	sxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21b      	sxth	r3, r3
 800106a:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 800106e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001072:	b200      	sxth	r0, r0
 8001074:	b002      	add	sp, #8
 8001076:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001078:	fb00 f404 	mul.w	r4, r0, r4
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <SYS_GetTemperatureLevel+0xa4>)
 800107e:	fba3 2304 	umull	r2, r3, r3, r4
 8001082:	1ae4      	subs	r4, r4, r3
 8001084:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001088:	0ae4      	lsrs	r4, r4, #11
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fb03 f404 	mul.w	r4, r3, r4
 8001092:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 8001096:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <SYS_GetTemperatureLevel+0xa8>)
 800109c:	fb83 2304 	smull	r2, r3, r3, r4
 80010a0:	17e4      	asrs	r4, r4, #31
 80010a2:	ebc4 24a3 	rsb	r4, r4, r3, asr #10
 80010a6:	341e      	adds	r4, #30
 80010a8:	b224      	sxth	r4, r4
 80010aa:	f8ad 4006 	strh.w	r4, [sp, #6]
 80010ae:	e7d7      	b.n	8001060 <SYS_GetTemperatureLevel+0x48>
 80010b0:	b0001000 	.word	0xb0001000
 80010b4:	1fff7500 	.word	0x1fff7500
 80010b8:	09ee009f 	.word	0x09ee009f
 80010bc:	00100101 	.word	0x00100101
 80010c0:	68db8bad 	.word	0x68db8bad

080010c4 <SYS_Lectura_CP>:
{
 80010c4:	b508      	push	{r3, lr}
  voltaje_leer = ADC_ReadChannels(ADC_CHANNEL_4);
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <SYS_Lectura_CP+0x18>)
 80010c8:	f7ff ff44 	bl	8000f54 <ADC_ReadChannels>
  voltaje_CP = (voltaje_leer * 3300)/4096;
 80010cc:	b280      	uxth	r0, r0
 80010ce:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010d2:	fb03 f000 	mul.w	r0, r3, r0
}
 80010d6:	f3c0 300f 	ubfx	r0, r0, #12, #16
 80010da:	bd08      	pop	{r3, pc}
 80010dc:	10000010 	.word	0x10000010

080010e0 <WakeUpTimer_Cb>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
static void  WakeUpTimer_Cb(void *context)
{
  /*Nothing to do*/
}
 80010e0:	4770      	bx	lr

080010e2 <app_freertos_ms_to_tick>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    tick = (uint32_t)((((uint64_t)(ms)) * configTICK_RATE_HZ) / configTICK_RATE_HZ_1MS);
  }
  return tick;
}
 80010e2:	4770      	bx	lr

080010e4 <app_freertos_tick_to_ms>:
  if (configTICK_RATE_HZ != configTICK_RATE_HZ_1MS)
  {
    ms = (uint32_t)((((uint64_t)(tick)) * configTICK_RATE_HZ_1MS) / configTICK_RATE_HZ);
  }
  return ms;
}
 80010e4:	4770      	bx	lr

080010e6 <Cargador_Coche>:
	{
 80010e6:	b508      	push	{r3, lr}
		cargador_coche_inicio();
 80010e8:	f000 f8c0 	bl	800126c <cargador_coche_inicio>
		HAL_Delay(500); // Tarea periódica para la FSM
 80010ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f0:	f000 ffce 	bl	8002090 <HAL_Delay>
		while(1){
 80010f4:	e7f8      	b.n	80010e8 <Cargador_Coche+0x2>
	...

080010f8 <LCD>:
		{
 80010f8:	b508      	push	{r3, lr}
		    lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)2, (uint8_t)10);
 80010fa:	230a      	movs	r3, #10
 80010fc:	2202      	movs	r2, #2
 80010fe:	2127      	movs	r1, #39	; 0x27
 8001100:	4809      	ldr	r0, [pc, #36]	; (8001128 <LCD+0x30>)
 8001102:	f000 fcbf 	bl	8001a84 <lcdInit>
		    lcdPrintStr((uint8_t*)"Hello,", 6);
 8001106:	2106      	movs	r1, #6
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <LCD+0x34>)
 800110a:	f000 fd57 	bl	8001bbc <lcdPrintStr>
		    lcdSetCursorPosition(0, 1);
 800110e:	2101      	movs	r1, #1
 8001110:	2000      	movs	r0, #0
 8001112:	f000 fd37 	bl	8001b84 <lcdSetCursorPosition>
		    lcdPrintStr((uint8_t*)"World!", 6);
 8001116:	2106      	movs	r1, #6
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <LCD+0x38>)
 800111a:	f000 fd4f 	bl	8001bbc <lcdPrintStr>
		        vTaskDelay(1000);
 800111e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001122:	f009 fa4b 	bl	800a5bc <vTaskDelay>
		    for (;;) {
 8001126:	e7fa      	b.n	800111e <LCD+0x26>
 8001128:	20000280 	.word	0x20000280
 800112c:	08015f88 	.word	0x08015f88
 8001130:	08015f90 	.word	0x08015f90

08001134 <StartDefaultTask>:
{
 8001134:	b508      	push	{r3, lr}
  MX_LoRaWAN_Init();
 8001136:	f001 fb61 	bl	80027fc <MX_LoRaWAN_Init>
    osThreadFlagsWait(1, osFlagsWaitAll, osWaitForever);
 800113a:	f04f 32ff 	mov.w	r2, #4294967295
 800113e:	2101      	movs	r1, #1
 8001140:	4608      	mov	r0, r1
 8001142:	f007 ff25 	bl	8008f90 <osThreadFlagsWait>
  for(;;)
 8001146:	e7f8      	b.n	800113a <StartDefaultTask+0x6>

08001148 <PreSleepProcessing>:
{
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	4604      	mov	r4, r0
  uint32_t WakeUpTimer_timeOut_ms = app_freertos_tick_to_ms(*ulExpectedIdleTime);
 800114e:	6800      	ldr	r0, [r0, #0]
 8001150:	f7ff ffc8 	bl	80010e4 <app_freertos_tick_to_ms>
 8001154:	4601      	mov	r1, r0
  UTIL_TIMER_Create(&WakeUpTimer, WakeUpTimer_timeOut_ms, UTIL_TIMER_ONESHOT, WakeUpTimer_Cb, NULL);
 8001156:	4e0a      	ldr	r6, [pc, #40]	; (8001180 <PreSleepProcessing+0x38>)
 8001158:	2500      	movs	r5, #0
 800115a:	9500      	str	r5, [sp, #0]
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <PreSleepProcessing+0x3c>)
 800115e:	462a      	mov	r2, r5
 8001160:	4630      	mov	r0, r6
 8001162:	f014 fb49 	bl	80157f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&WakeUpTimer);
 8001166:	4630      	mov	r0, r6
 8001168:	f014 fbfe 	bl	8015968 <UTIL_TIMER_Start>
  Time_BeforeSleep = UTIL_TIMER_GetCurrentTime();
 800116c:	f014 fb62 	bl	8015834 <UTIL_TIMER_GetCurrentTime>
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <PreSleepProcessing+0x40>)
 8001172:	6018      	str	r0, [r3, #0]
  UTIL_LPM_EnterLowPower();
 8001174:	f014 fa18 	bl	80155a8 <UTIL_LPM_EnterLowPower>
  *ulExpectedIdleTime = 0;
 8001178:	6025      	str	r5, [r4, #0]
}
 800117a:	b002      	add	sp, #8
 800117c:	bd70      	pop	{r4, r5, r6, pc}
 800117e:	bf00      	nop
 8001180:	200001a0 	.word	0x200001a0
 8001184:	080010e1 	.word	0x080010e1
 8001188:	2000019c 	.word	0x2000019c

0800118c <PostSleepProcessing>:
{
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4604      	mov	r4, r0
  uint32_t SleepDuration = UTIL_TIMER_GetElapsedTime(Time_BeforeSleep);
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <PostSleepProcessing+0x20>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f014 fb58 	bl	8015848 <UTIL_TIMER_GetElapsedTime>
 8001198:	4605      	mov	r5, r0
  UTIL_TIMER_Stop(&WakeUpTimer);
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <PostSleepProcessing+0x24>)
 800119c:	f014 fb8a 	bl	80158b4 <UTIL_TIMER_Stop>
  *ulExpectedIdleTime = app_freertos_ms_to_tick(SleepDuration);
 80011a0:	4628      	mov	r0, r5
 80011a2:	f7ff ff9e 	bl	80010e2 <app_freertos_ms_to_tick>
 80011a6:	6020      	str	r0, [r4, #0]
}
 80011a8:	bd38      	pop	{r3, r4, r5, pc}
 80011aa:	bf00      	nop
 80011ac:	2000019c 	.word	0x2000019c
 80011b0:	200001a0 	.word	0x200001a0

080011b4 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80011b4:	b538      	push	{r3, r4, r5, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011b6:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <MX_FREERTOS_Init+0x30>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MX_FREERTOS_Init+0x34>)
 80011bc:	f007 fe34 	bl	8008e28 <osThreadNew>
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <MX_FREERTOS_Init+0x38>)
 80011c2:	6018      	str	r0, [r3, #0]
  THREADHandle = osThreadNew(Cargador_Coche, NULL, &THREAD_attributes);//Este es mi hilo para el CARGADOR DEL COCHE
 80011c4:	4d0a      	ldr	r5, [pc, #40]	; (80011f0 <MX_FREERTOS_Init+0x3c>)
 80011c6:	462a      	mov	r2, r5
 80011c8:	2100      	movs	r1, #0
 80011ca:	480a      	ldr	r0, [pc, #40]	; (80011f4 <MX_FREERTOS_Init+0x40>)
 80011cc:	f007 fe2c 	bl	8008e28 <osThreadNew>
 80011d0:	4c09      	ldr	r4, [pc, #36]	; (80011f8 <MX_FREERTOS_Init+0x44>)
 80011d2:	6020      	str	r0, [r4, #0]
  THREADHandle = osThreadNew(LCD, NULL, &THREAD_attributes);// Tarea del LCD
 80011d4:	462a      	mov	r2, r5
 80011d6:	2100      	movs	r1, #0
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <MX_FREERTOS_Init+0x48>)
 80011da:	f007 fe25 	bl	8008e28 <osThreadNew>
 80011de:	6020      	str	r0, [r4, #0]
}
 80011e0:	bd38      	pop	{r3, r4, r5, pc}
 80011e2:	bf00      	nop
 80011e4:	08015fd4 	.word	0x08015fd4
 80011e8:	08001135 	.word	0x08001135
 80011ec:	200001b8 	.word	0x200001b8
 80011f0:	08015fb0 	.word	0x08015fb0
 80011f4:	080010e7 	.word	0x080010e7
 80011f8:	20000198 	.word	0x20000198
 80011fc:	080010f9 	.word	0x080010f9

08001200 <decodifica_estado>:
ESTADO_CARGADOR estado;


void decodifica_estado(uint16_t voltaje_CP)
{
	if ( voltaje_CP > 2800 ) // 3299mV -> +12V
 8001200:	f5b0 6f2f 	cmp.w	r0, #2800	; 0xaf0
 8001204:	d903      	bls.n	800120e <decodifica_estado+0xe>
			{
				estado = STANDBY;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <decodifica_estado+0x68>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	4770      	bx	lr
			}

	else if  (voltaje_CP > 1900  && voltaje_CP < 2800 )  // 2250mV -> +9V +-1
 800120e:	f2a0 736d 	subw	r3, r0, #1901	; 0x76d
 8001212:	b29b      	uxth	r3, r3
 8001214:	f240 3282 	movw	r2, #898	; 0x382
 8001218:	4293      	cmp	r3, r2
 800121a:	d803      	bhi.n	8001224 <decodifica_estado+0x24>
			{
				estado = VEHICULO_DETECTADO;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <decodifica_estado+0x68>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	4770      	bx	lr
			}

	else if ( voltaje_CP > 1000  && voltaje_CP < 1900 ) // 1500mV -> + 3V +-1
 8001224:	f2a0 33e9 	subw	r3, r0, #1001	; 0x3e9
 8001228:	b29b      	uxth	r3, r3
 800122a:	f240 3282 	movw	r2, #898	; 0x382
 800122e:	4293      	cmp	r3, r2
 8001230:	d803      	bhi.n	800123a <decodifica_estado+0x3a>
			{
				estado = CARGANDO;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <decodifica_estado+0x68>)
 8001234:	2202      	movs	r2, #2
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	4770      	bx	lr
			}

	else if ( voltaje_CP > 600  && voltaje_CP < 1000 ) // 750mV -> + 6V +-1
 800123a:	f2a0 2359 	subw	r3, r0, #601	; 0x259
 800123e:	b29b      	uxth	r3, r3
 8001240:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 8001244:	d803      	bhi.n	800124e <decodifica_estado+0x4e>
			{
				estado = VENTILACION;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <decodifica_estado+0x68>)
 8001248:	2203      	movs	r2, #3
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	4770      	bx	lr
			}

	else if ( voltaje_CP > 50  && voltaje_CP < 600 ) //  0V
 800124e:	3833      	subs	r0, #51	; 0x33
 8001250:	b280      	uxth	r0, r0
 8001252:	f5b0 7f09 	cmp.w	r0, #548	; 0x224
 8001256:	d803      	bhi.n	8001260 <decodifica_estado+0x60>
			{
				estado = NO_POWER;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <decodifica_estado+0x68>)
 800125a:	2204      	movs	r2, #4
 800125c:	701a      	strb	r2, [r3, #0]
 800125e:	4770      	bx	lr
			}
	else
			{
				estado = FALLO; //  - 12V
 8001260:	4b01      	ldr	r3, [pc, #4]	; (8001268 <decodifica_estado+0x68>)
 8001262:	2205      	movs	r2, #5
 8001264:	701a      	strb	r2, [r3, #0]
			}

}
 8001266:	4770      	bx	lr
 8001268:	200001bc 	.word	0x200001bc

0800126c <cargador_coche_inicio>:

/* Functions */


void cargador_coche_inicio()
{
 800126c:	b510      	push	{r4, lr}


	//while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)){

	voltaje_CP=GetLectura_CP();
 800126e:	f000 fedd 	bl	800202c <GetLectura_CP>
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <cargador_coche_inicio+0x6c>)
 8001274:	8018      	strh	r0, [r3, #0]

	//}

	decodifica_estado(voltaje_CP);
 8001276:	f7ff ffc3 	bl	8001200 <decodifica_estado>


	    switch (estado) {
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <cargador_coche_inicio+0x70>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b113      	cbz	r3, 8001286 <cargador_coche_inicio+0x1a>
 8001280:	2b03      	cmp	r3, #3
 8001282:	d014      	beq.n	80012ae <cargador_coche_inicio+0x42>

	       	    break;
	        default:
	            break;
	    }
}
 8001284:	bd10      	pop	{r4, pc}
	        	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 8001286:	4c16      	ldr	r4, [pc, #88]	; (80012e0 <cargador_coche_inicio+0x74>)
 8001288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128c:	4620      	mov	r0, r4
 800128e:	f003 fb7a 	bl	8004986 <HAL_GPIO_TogglePin>
	        	HAL_Delay(1000);
 8001292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001296:	f000 fefb 	bl	8002090 <HAL_Delay>
	        	HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800129a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129e:	4620      	mov	r0, r4
 80012a0:	f003 fb71 	bl	8004986 <HAL_GPIO_TogglePin>
	            HAL_Delay(1000);
 80012a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a8:	f000 fef2 	bl	8002090 <HAL_Delay>
	            break;
 80012ac:	e7ea      	b.n	8001284 <cargador_coche_inicio+0x18>
	        	HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80012ae:	4c0c      	ldr	r4, [pc, #48]	; (80012e0 <cargador_coche_inicio+0x74>)
 80012b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b4:	4620      	mov	r0, r4
 80012b6:	f003 fb66 	bl	8004986 <HAL_GPIO_TogglePin>
	        	HAL_Delay(1000);
 80012ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012be:	f000 fee7 	bl	8002090 <HAL_Delay>
	        	HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 80012c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c6:	4620      	mov	r0, r4
 80012c8:	f003 fb5d 	bl	8004986 <HAL_GPIO_TogglePin>
	        	HAL_Delay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012d0:	f000 fede 	bl	8002090 <HAL_Delay>
}
 80012d4:	e7d6      	b.n	8001284 <cargador_coche_inicio+0x18>
 80012d6:	bf00      	nop
 80012d8:	200001be 	.word	0x200001be
 80012dc:	200001bc 	.word	0x200001bc
 80012e0:	48000400 	.word	0x48000400

080012e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012e4:	b500      	push	{lr}
 80012e6:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ee:	f042 0204 	orr.w	r2, r2, #4
 80012f2:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012f6:	f002 0204 	and.w	r2, r2, #4
 80012fa:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80012fc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001300:	f042 0201 	orr.w	r2, r2, #1
 8001304:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800130e:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
*/

  /* DMA interrupt init */ //lo que añado
   /* DMA1_Channel1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2105      	movs	r1, #5
 8001314:	200b      	movs	r0, #11
 8001316:	f002 fd7f 	bl	8003e18 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800131a:	200b      	movs	r0, #11
 800131c:	f002 fdb4 	bl	8003e88 <HAL_NVIC_EnableIRQ>
   /* DMA1_Channel2_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2105      	movs	r1, #5
 8001324:	200c      	movs	r0, #12
 8001326:	f002 fd77 	bl	8003e18 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800132a:	200c      	movs	r0, #12
 800132c:	f002 fdac 	bl	8003e88 <HAL_NVIC_EnableIRQ>
   /* DMA1_Channel5_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2107      	movs	r1, #7
 8001334:	200f      	movs	r0, #15
 8001336:	f002 fd6f 	bl	8003e18 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800133a:	200f      	movs	r0, #15
 800133c:	f002 fda4 	bl	8003e88 <HAL_NVIC_EnableIRQ>




}
 8001340:	b003      	add	sp, #12
 8001342:	f85d fb04 	ldr.w	pc, [sp], #4

08001346 <FLASH_IF_IsEmpty>:
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001346:	e000      	b.n	800134a <FLASH_IF_IsEmpty+0x4>
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 8001348:	3901      	subs	r1, #1
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800134a:	f010 0307 	ands.w	r3, r0, #7
 800134e:	d012      	beq.n	8001376 <FLASH_IF_IsEmpty+0x30>
    if (*addr++ != UINT8_MAX)
 8001350:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001354:	2bff      	cmp	r3, #255	; 0xff
 8001356:	d0f7      	beq.n	8001348 <FLASH_IF_IsEmpty+0x2>
      return FLASH_NOT_EMPTY;
 8001358:	2001      	movs	r0, #1
 800135a:	4770      	bx	lr
  {
    if (*addr++ != UINT8_MAX)
    {
      return FLASH_NOT_EMPTY;
    }
    size--;
 800135c:	3901      	subs	r1, #1
  while (size != 0)
 800135e:	b129      	cbz	r1, 800136c <FLASH_IF_IsEmpty+0x26>
    if (*addr++ != UINT8_MAX)
 8001360:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001364:	2bff      	cmp	r3, #255	; 0xff
 8001366:	d0f9      	beq.n	800135c <FLASH_IF_IsEmpty+0x16>
      return FLASH_NOT_EMPTY;
 8001368:	2001      	movs	r0, #1
 800136a:	e002      	b.n	8001372 <FLASH_IF_IsEmpty+0x2c>
  }
  return FLASH_EMPTY;
 800136c:	2000      	movs	r0, #0
 800136e:	e000      	b.n	8001372 <FLASH_IF_IsEmpty+0x2c>
      return FLASH_NOT_EMPTY;
 8001370:	2001      	movs	r0, #1
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001372:	bc10      	pop	{r4}
 8001374:	4770      	bx	lr
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001376:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800137a:	d212      	bcs.n	80013a2 <FLASH_IF_IsEmpty+0x5c>
{
 800137c:	b410      	push	{r4}
    if (*addr64++ != UINT64_MAX)
 800137e:	4602      	mov	r2, r0
 8001380:	f852 4b08 	ldr.w	r4, [r2], #8
 8001384:	6840      	ldr	r0, [r0, #4]
 8001386:	f1b0 3fff 	cmp.w	r0, #4294967295
 800138a:	bf08      	it	eq
 800138c:	f1b4 3fff 	cmpeq.w	r4, #4294967295
 8001390:	d1ee      	bne.n	8001370 <FLASH_IF_IsEmpty+0x2a>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001392:	3301      	adds	r3, #1
    if (*addr64++ != UINT64_MAX)
 8001394:	4610      	mov	r0, r2
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001396:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800139a:	d3f0      	bcc.n	800137e <FLASH_IF_IsEmpty+0x38>
  size -= sizeof(uint64_t) * i;
 800139c:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 80013a0:	e7dd      	b.n	800135e <FLASH_IF_IsEmpty+0x18>
  size -= sizeof(uint64_t) * i;
 80013a2:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
  while (size != 0)
 80013a6:	b129      	cbz	r1, 80013b4 <FLASH_IF_IsEmpty+0x6e>
    if (*addr++ != UINT8_MAX)
 80013a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80013ac:	2bff      	cmp	r3, #255	; 0xff
 80013ae:	d103      	bne.n	80013b8 <FLASH_IF_IsEmpty+0x72>
    size--;
 80013b0:	3901      	subs	r1, #1
 80013b2:	e7f8      	b.n	80013a6 <FLASH_IF_IsEmpty+0x60>
  return FLASH_EMPTY;
 80013b4:	2000      	movs	r0, #0
 80013b6:	4770      	bx	lr
      return FLASH_NOT_EMPTY;
 80013b8:	2001      	movs	r0, #1
}
 80013ba:	4770      	bx	lr

080013bc <FLASH_IF_Write64>:
{
 80013bc:	b570      	push	{r4, r5, r6, lr}
 80013be:	4604      	mov	r4, r0
 80013c0:	4616      	mov	r6, r2
 80013c2:	461d      	mov	r5, r3
  while (*(uint64_t *)address != data)
 80013c4:	e005      	b.n	80013d2 <FLASH_IF_Write64+0x16>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80013c6:	4632      	mov	r2, r6
 80013c8:	462b      	mov	r3, r5
 80013ca:	4621      	mov	r1, r4
 80013cc:	2001      	movs	r0, #1
 80013ce:	f003 f889 	bl	80044e4 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	6863      	ldr	r3, [r4, #4]
 80013d6:	42ab      	cmp	r3, r5
 80013d8:	bf08      	it	eq
 80013da:	42b2      	cmpeq	r2, r6
 80013dc:	d005      	beq.n	80013ea <FLASH_IF_Write64+0x2e>
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80013de:	4904      	ldr	r1, [pc, #16]	; (80013f0 <FLASH_IF_Write64+0x34>)
 80013e0:	6909      	ldr	r1, [r1, #16]
 80013e2:	f411 2f00 	tst.w	r1, #524288	; 0x80000
 80013e6:	d1fa      	bne.n	80013de <FLASH_IF_Write64+0x22>
 80013e8:	e7ed      	b.n	80013c6 <FLASH_IF_Write64+0xa>
}
 80013ea:	2000      	movs	r0, #0
 80013ec:	bd70      	pop	{r4, r5, r6, pc}
 80013ee:	bf00      	nop
 80013f0:	58004000 	.word	0x58004000

080013f4 <FLASH_IF_Write_Buffer>:
{
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	4606      	mov	r6, r0
 80013fc:	460c      	mov	r4, r1
 80013fe:	4690      	mov	r8, r2
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001400:	2500      	movs	r5, #0
  int32_t status = FLASH_OK;
 8001402:	462f      	mov	r7, r5
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 8001404:	e003      	b.n	800140e <FLASH_IF_Write_Buffer+0x1a>
    pDestination += sizeof(uint64_t);
 8001406:	3608      	adds	r6, #8
    pSrc += sizeof(uint64_t);
 8001408:	3408      	adds	r4, #8
    if (status != FLASH_OK)
 800140a:	b9af      	cbnz	r7, 8001438 <FLASH_IF_Write_Buffer+0x44>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800140c:	3501      	adds	r5, #1
 800140e:	ebb5 0fd8 	cmp.w	r5, r8, lsr #3
 8001412:	d211      	bcs.n	8001438 <FLASH_IF_Write_Buffer+0x44>
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001414:	2208      	movs	r2, #8
 8001416:	4621      	mov	r1, r4
 8001418:	4668      	mov	r0, sp
 800141a:	f014 f8e9 	bl	80155f0 <UTIL_MEM_cpy_8>
    if (src_value != UINT64_MAX)
 800141e:	9a00      	ldr	r2, [sp, #0]
 8001420:	9b01      	ldr	r3, [sp, #4]
 8001422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001426:	bf08      	it	eq
 8001428:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800142c:	d0eb      	beq.n	8001406 <FLASH_IF_Write_Buffer+0x12>
      status = FLASH_IF_Write64(pDestination, src_value);
 800142e:	4630      	mov	r0, r6
 8001430:	f7ff ffc4 	bl	80013bc <FLASH_IF_Write64>
 8001434:	4607      	mov	r7, r0
 8001436:	e7e6      	b.n	8001406 <FLASH_IF_Write_Buffer+0x12>
}
 8001438:	4638      	mov	r0, r7
 800143a:	b002      	add	sp, #8
 800143c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001440 <FLASH_IF_EraseByPages>:
{
 8001440:	b500      	push	{lr}
 8001442:	b085      	sub	sp, #20
  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001444:	2302      	movs	r3, #2
 8001446:	9301      	str	r3, [sp, #4]
  erase_str.Page = page;
 8001448:	9002      	str	r0, [sp, #8]
  erase_str.NbPages = n;
 800144a:	9103      	str	r1, [sp, #12]
  if (interrupt)
 800144c:	b13a      	cbz	r2, 800145e <FLASH_IF_EraseByPages+0x1e>
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800144e:	a801      	add	r0, sp, #4
 8001450:	f003 f910 	bl	8004674 <HAL_FLASHEx_Erase_IT>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001454:	b140      	cbz	r0, 8001468 <FLASH_IF_EraseByPages+0x28>
 8001456:	2802      	cmp	r0, #2
 8001458:	d10a      	bne.n	8001470 <FLASH_IF_EraseByPages+0x30>
 800145a:	2001      	movs	r0, #1
 800145c:	e005      	b.n	800146a <FLASH_IF_EraseByPages+0x2a>
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800145e:	4669      	mov	r1, sp
 8001460:	a801      	add	r0, sp, #4
 8001462:	f003 f8c7 	bl	80045f4 <HAL_FLASHEx_Erase>
 8001466:	e7f5      	b.n	8001454 <FLASH_IF_EraseByPages+0x14>
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001468:	2000      	movs	r0, #0
}
 800146a:	b005      	add	sp, #20
 800146c:	f85d fb04 	ldr.w	pc, [sp], #4
  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001470:	f06f 0001 	mvn.w	r0, #1
 8001474:	e7f9      	b.n	800146a <FLASH_IF_EraseByPages+0x2a>
	...

08001478 <FLASH_IF_Write>:
{
 8001478:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800147c:	4693      	mov	fp, r2
 800147e:	4699      	mov	r9, r3
  uint32_t page_start_index = PAGE(address);
 8001480:	f100 4578 	add.w	r5, r0, #4160749568	; 0xf8000000
 8001484:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <FLASH_IF_Write+0x108>)
 8001486:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <FLASH_IF_Write+0x10c>)
 800148c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8001490:	fbb5 f2f3 	udiv	r2, r5, r3
 8001494:	fb03 5512 	mls	r5, r3, r2, r5
  uint32_t page_end_index = PAGE(address + size - 1);
 8001498:	eb00 0a0b 	add.w	sl, r0, fp
 800149c:	f10a 4a78 	add.w	sl, sl, #4160749568	; 0xf8000000
 80014a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80014a4:	fbba f2f3 	udiv	r2, sl, r3
 80014a8:	fb03 aa12 	mls	sl, r3, r2, sl
  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d052      	beq.n	8001556 <FLASH_IF_Write+0xde>
 80014b0:	4606      	mov	r6, r0
 80014b2:	0aed      	lsrs	r5, r5, #11
 80014b4:	ea4f 2ada 	mov.w	sl, sl, lsr #11
 80014b8:	4688      	mov	r8, r1
 80014ba:	f01b 0f07 	tst.w	fp, #7
 80014be:	d14d      	bne.n	800155c <FLASH_IF_Write+0xe4>
 80014c0:	f010 0f07 	tst.w	r0, #7
 80014c4:	d14d      	bne.n	8001562 <FLASH_IF_Write+0xea>
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <FLASH_IF_Write+0x110>)
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db4c      	blt.n	8001568 <FLASH_IF_Write+0xf0>
  if (page_start_index != page_end_index)
 80014ce:	4555      	cmp	r5, sl
 80014d0:	d004      	beq.n	80014dc <FLASH_IF_Write+0x64>
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80014d2:	f3c0 040a 	ubfx	r4, r0, #0, #11
 80014d6:	f5c4 6400 	rsb	r4, r4, #2048	; 0x800
 80014da:	e00d      	b.n	80014f8 <FLASH_IF_Write+0x80>
  uint32_t curr_size = size;
 80014dc:	465c      	mov	r4, fp
 80014de:	e00b      	b.n	80014f8 <FLASH_IF_Write+0x80>
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80014e0:	4622      	mov	r2, r4
 80014e2:	4641      	mov	r1, r8
 80014e4:	4630      	mov	r0, r6
 80014e6:	f7ff ff85 	bl	80013f4 <FLASH_IF_Write_Buffer>
 80014ea:	2800      	cmp	r0, #0
 80014ec:	d145      	bne.n	800157a <FLASH_IF_Write+0x102>
    curr_dest_addr += curr_size;
 80014ee:	4426      	add	r6, r4
    curr_src_addr += curr_size;
 80014f0:	44a0      	add	r8, r4
    curr_size = size - curr_size;
 80014f2:	ebab 0404 	sub.w	r4, fp, r4
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80014f6:	3501      	adds	r5, #1
 80014f8:	4555      	cmp	r5, sl
 80014fa:	d829      	bhi.n	8001550 <FLASH_IF_Write+0xd8>
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80014fc:	4621      	mov	r1, r4
 80014fe:	4630      	mov	r0, r6
 8001500:	f7ff ff21 	bl	8001346 <FLASH_IF_IsEmpty>
 8001504:	2800      	cmp	r0, #0
 8001506:	d0eb      	beq.n	80014e0 <FLASH_IF_Write+0x68>
      if (dataTempPage == NULL)
 8001508:	f1b9 0f00 	cmp.w	r9, #0
 800150c:	d02f      	beq.n	800156e <FLASH_IF_Write+0xf6>
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800150e:	f505 3780 	add.w	r7, r5, #65536	; 0x10000
 8001512:	02ff      	lsls	r7, r7, #11
 8001514:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001518:	4639      	mov	r1, r7
 800151a:	4648      	mov	r0, r9
 800151c:	f014 f868 	bl	80155f0 <UTIL_MEM_cpy_8>
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001520:	f3c6 000a 	ubfx	r0, r6, #0, #11
 8001524:	b2a2      	uxth	r2, r4
 8001526:	4641      	mov	r1, r8
 8001528:	4448      	add	r0, r9
 800152a:	f014 f861 	bl	80155f0 <UTIL_MEM_cpy_8>
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800152e:	2200      	movs	r2, #0
 8001530:	2101      	movs	r1, #1
 8001532:	4628      	mov	r0, r5
 8001534:	f7ff ff84 	bl	8001440 <FLASH_IF_EraseByPages>
 8001538:	b9e0      	cbnz	r0, 8001574 <FLASH_IF_Write+0xfc>
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800153a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800153e:	4649      	mov	r1, r9
 8001540:	4638      	mov	r0, r7
 8001542:	f7ff ff57 	bl	80013f4 <FLASH_IF_Write_Buffer>
 8001546:	2800      	cmp	r0, #0
 8001548:	d0d1      	beq.n	80014ee <FLASH_IF_Write+0x76>
          status = FLASH_WRITE_ERROR;
 800154a:	f06f 0002 	mvn.w	r0, #2
 800154e:	e000      	b.n	8001552 <FLASH_IF_Write+0xda>
  int32_t status = FLASH_OK;
 8001550:	2000      	movs	r0, #0
}
 8001552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FLASH_PARAM_ERROR;
 8001556:	f06f 0004 	mvn.w	r0, #4
 800155a:	e7fa      	b.n	8001552 <FLASH_IF_Write+0xda>
 800155c:	f06f 0004 	mvn.w	r0, #4
 8001560:	e7f7      	b.n	8001552 <FLASH_IF_Write+0xda>
 8001562:	f06f 0004 	mvn.w	r0, #4
 8001566:	e7f4      	b.n	8001552 <FLASH_IF_Write+0xda>
    return FLASH_LOCK_ERROR;
 8001568:	f06f 0003 	mvn.w	r0, #3
 800156c:	e7f1      	b.n	8001552 <FLASH_IF_Write+0xda>
        return FLASH_PARAM_ERROR;
 800156e:	f06f 0004 	mvn.w	r0, #4
 8001572:	e7ee      	b.n	8001552 <FLASH_IF_Write+0xda>
        status = FLASH_ERASE_ERROR;
 8001574:	f06f 0001 	mvn.w	r0, #1
 8001578:	e7eb      	b.n	8001552 <FLASH_IF_Write+0xda>
        status = FLASH_WRITE_ERROR;
 800157a:	f06f 0002 	mvn.w	r0, #2
 800157e:	e7e8      	b.n	8001552 <FLASH_IF_Write+0xda>
 8001580:	1fff7000 	.word	0x1fff7000
 8001584:	03fffc00 	.word	0x03fffc00
 8001588:	58004000 	.word	0x58004000

0800158c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800158c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001590:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	2400      	movs	r4, #0
 8001594:	9403      	str	r4, [sp, #12]
 8001596:	9404      	str	r4, [sp, #16]
 8001598:	9405      	str	r4, [sp, #20]
 800159a:	9406      	str	r4, [sp, #24]
 800159c:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ac:	f002 0201 	and.w	r2, r2, #1
 80015b0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80015b2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b6:	f042 0202 	orr.w	r2, r2, #2
 80015ba:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015be:	f002 0202 	and.w	r2, r2, #2
 80015c2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80015c4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c8:	f042 0204 	orr.w	r2, r2, #4
 80015cc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80015d6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80015d8:	4e2e      	ldr	r6, [pc, #184]	; (8001694 <MX_GPIO_Init+0x108>)
 80015da:	4622      	mov	r2, r4
 80015dc:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80015e0:	4630      	mov	r0, r6
 80015e2:	f003 f9cb 	bl	800497c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONTROL_CONTACTOR_GPIO_Port, CONTROL_CONTACTOR_Pin, GPIO_PIN_RESET);
 80015e6:	4622      	mov	r2, r4
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ee:	f003 f9c5 	bl	800497c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80015f2:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80015f6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2501      	movs	r5, #1
 80015fa:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015fe:	2302      	movs	r3, #2
 8001600:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	a903      	add	r1, sp, #12
 8001604:	4630      	mov	r0, r6
 8001606:	f003 f869 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 800160a:	f04f 0803 	mov.w	r8, #3
 800160e:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 8001616:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001618:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	a903      	add	r1, sp, #12
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f003 f85c 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001624:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001628:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	a903      	add	r1, sp, #12
 8001634:	4630      	mov	r0, r6
 8001636:	f003 f851 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTROL_CONTACTOR_Pin;
 800163a:	2640      	movs	r6, #64	; 0x40
 800163c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(CONTROL_CONTACTOR_GPIO_Port, &GPIO_InitStruct);
 8001644:	a903      	add	r1, sp, #12
 8001646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164a:	f003 f847 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 800164e:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001650:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001652:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 8001654:	a903      	add	r1, sp, #12
 8001656:	4810      	ldr	r0, [pc, #64]	; (8001698 <MX_GPIO_Init+0x10c>)
 8001658:	f003 f840 	bl	80046dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800165c:	4622      	mov	r2, r4
 800165e:	2105      	movs	r1, #5
 8001660:	2006      	movs	r0, #6
 8001662:	f002 fbd9 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001666:	2006      	movs	r0, #6
 8001668:	f002 fc0e 	bl	8003e88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800166c:	4622      	mov	r2, r4
 800166e:	2105      	movs	r1, #5
 8001670:	2007      	movs	r0, #7
 8001672:	f002 fbd1 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001676:	2007      	movs	r0, #7
 8001678:	f002 fc06 	bl	8003e88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800167c:	4622      	mov	r2, r4
 800167e:	2105      	movs	r1, #5
 8001680:	2016      	movs	r0, #22
 8001682:	f002 fbc9 	bl	8003e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001686:	2016      	movs	r0, #22
 8001688:	f002 fbfe 	bl	8003e88 <HAL_NVIC_EnableIRQ>

}
 800168c:	b008      	add	sp, #32
 800168e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001692:	bf00      	nop
 8001694:	48000400 	.word	0x48000400
 8001698:	48000800 	.word	0x48000800

0800169c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx; //añadido
DMA_HandleTypeDef hdma_i2c1_rx; //añadido

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800169c:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800169e:	4813      	ldr	r0, [pc, #76]	; (80016ec <MX_I2C1_Init+0x50>)
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_I2C1_Init+0x54>)
 80016a2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x0000090F;
 80016a4:	f640 130f 	movw	r3, #2319	; 0x90f
 80016a8:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ae:	2201      	movs	r2, #1
 80016b0:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b2:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ba:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016bc:	f003 fa1a 	bl	8004af4 <HAL_I2C_Init>
 80016c0:	b950      	cbnz	r0, 80016d8 <MX_I2C1_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4809      	ldr	r0, [pc, #36]	; (80016ec <MX_I2C1_Init+0x50>)
 80016c6:	f004 f8e0 	bl	800588a <HAL_I2CEx_ConfigAnalogFilter>
 80016ca:	b940      	cbnz	r0, 80016de <MX_I2C1_Init+0x42>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016cc:	2100      	movs	r1, #0
 80016ce:	4807      	ldr	r0, [pc, #28]	; (80016ec <MX_I2C1_Init+0x50>)
 80016d0:	f004 f909 	bl	80058e6 <HAL_I2CEx_ConfigDigitalFilter>
 80016d4:	b930      	cbnz	r0, 80016e4 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016d8:	f000 fa84 	bl	8001be4 <Error_Handler>
 80016dc:	e7f1      	b.n	80016c2 <MX_I2C1_Init+0x26>
    Error_Handler();
 80016de:	f000 fa81 	bl	8001be4 <Error_Handler>
 80016e2:	e7f3      	b.n	80016cc <MX_I2C1_Init+0x30>
    Error_Handler();
 80016e4:	f000 fa7e 	bl	8001be4 <Error_Handler>
}
 80016e8:	e7f5      	b.n	80016d6 <MX_I2C1_Init+0x3a>
 80016ea:	bf00      	nop
 80016ec:	20000280 	.word	0x20000280
 80016f0:	40005400 	.word	0x40005400

080016f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80016f4:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <MX_I2C2_Init+0x50>)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_I2C2_Init+0x54>)
 80016fa:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x0000090F;
 80016fc:	f640 130f 	movw	r3, #2319	; 0x90f
 8001700:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001706:	2201      	movs	r2, #1
 8001708:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800170a:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800170c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800170e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001710:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001712:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001714:	f003 f9ee 	bl	8004af4 <HAL_I2C_Init>
 8001718:	b950      	cbnz	r0, 8001730 <MX_I2C2_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800171a:	2100      	movs	r1, #0
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <MX_I2C2_Init+0x50>)
 800171e:	f004 f8b4 	bl	800588a <HAL_I2CEx_ConfigAnalogFilter>
 8001722:	b940      	cbnz	r0, 8001736 <MX_I2C2_Init+0x42>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001724:	2100      	movs	r1, #0
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <MX_I2C2_Init+0x50>)
 8001728:	f004 f8dd 	bl	80058e6 <HAL_I2CEx_ConfigDigitalFilter>
 800172c:	b930      	cbnz	r0, 800173c <MX_I2C2_Init+0x48>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800172e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001730:	f000 fa58 	bl	8001be4 <Error_Handler>
 8001734:	e7f1      	b.n	800171a <MX_I2C2_Init+0x26>
    Error_Handler();
 8001736:	f000 fa55 	bl	8001be4 <Error_Handler>
 800173a:	e7f3      	b.n	8001724 <MX_I2C2_Init+0x30>
    Error_Handler();
 800173c:	f000 fa52 	bl	8001be4 <Error_Handler>
}
 8001740:	e7f5      	b.n	800172e <MX_I2C2_Init+0x3a>
 8001742:	bf00      	nop
 8001744:	200002cc 	.word	0x200002cc
 8001748:	40005800 	.word	0x40005800

0800174c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	b098      	sub	sp, #96	; 0x60
 8001750:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	2100      	movs	r1, #0
 8001754:	9113      	str	r1, [sp, #76]	; 0x4c
 8001756:	9114      	str	r1, [sp, #80]	; 0x50
 8001758:	9115      	str	r1, [sp, #84]	; 0x54
 800175a:	9116      	str	r1, [sp, #88]	; 0x58
 800175c:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800175e:	2238      	movs	r2, #56	; 0x38
 8001760:	a805      	add	r0, sp, #20
 8001762:	f014 fb39 	bl	8015dd8 <memset>
  if(i2cHandle->Instance==I2C1)
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_I2C_MspInit+0x168>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d004      	beq.n	8001778 <HAL_I2C_MspInit+0x2c>

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800176e:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <HAL_I2C_MspInit+0x16c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d06e      	beq.n	8001852 <HAL_I2C_MspInit+0x106>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001774:	b018      	add	sp, #96	; 0x60
 8001776:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = 100000; // RCC_PERIPHCLK_I2C1;//100000;
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_I2C_MspInit+0x170>)
 800177a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c1ClockSelection = 100000; //RCC_I2C1CLKSOURCE_PCLK1;//100000;
 800177c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177e:	a805      	add	r0, sp, #20
 8001780:	f004 ff08 	bl	8006594 <HAL_RCCEx_PeriphCLKConfig>
 8001784:	2800      	cmp	r0, #0
 8001786:	d155      	bne.n	8001834 <HAL_I2C_MspInit+0xe8>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001788:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
 800178c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	64f3      	str	r3, [r6, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001794:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800179c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800179e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017a2:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a4:	2312      	movs	r3, #18
 80017a6:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;//GPIO_PULLUP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2500      	movs	r5, #0
 80017ae:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017b0:	2304      	movs	r3, #4
 80017b2:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	a913      	add	r1, sp, #76	; 0x4c
 80017b6:	4842      	ldr	r0, [pc, #264]	; (80018c0 <HAL_I2C_MspInit+0x174>)
 80017b8:	f002 ff90 	bl	80046dc <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017bc:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80017be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c2:	65b3      	str	r3, [r6, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017c4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80017c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ca:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017cc:	9b01      	ldr	r3, [sp, #4]
        hdma_i2c1_tx.Instance = DMA1_Channel1;
 80017ce:	483d      	ldr	r0, [pc, #244]	; (80018c4 <HAL_I2C_MspInit+0x178>)
 80017d0:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_I2C_MspInit+0x17c>)
 80017d2:	6003      	str	r3, [r0, #0]
        hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 80017d4:	230c      	movs	r3, #12
 80017d6:	6043      	str	r3, [r0, #4]
        hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d8:	2310      	movs	r3, #16
 80017da:	6083      	str	r3, [r0, #8]
        hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017dc:	60c5      	str	r5, [r0, #12]
        hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	6103      	str	r3, [r0, #16]
        hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e2:	6145      	str	r5, [r0, #20]
        hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e4:	6185      	str	r5, [r0, #24]
        hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80017e6:	61c5      	str	r5, [r0, #28]
        hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017e8:	6205      	str	r5, [r0, #32]
        if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80017ea:	f002 fbdd 	bl	8003fa8 <HAL_DMA_Init>
 80017ee:	bb20      	cbnz	r0, 800183a <HAL_I2C_MspInit+0xee>
        if (HAL_DMA_ConfigChannelAttributes(&hdma_i2c1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80017f0:	2110      	movs	r1, #16
 80017f2:	4834      	ldr	r0, [pc, #208]	; (80018c4 <HAL_I2C_MspInit+0x178>)
 80017f4:	f002 fddd 	bl	80043b2 <HAL_DMA_ConfigChannelAttributes>
 80017f8:	bb10      	cbnz	r0, 8001840 <HAL_I2C_MspInit+0xf4>
        __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80017fa:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <HAL_I2C_MspInit+0x178>)
 80017fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80017fe:	629c      	str	r4, [r3, #40]	; 0x28
        hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001800:	4832      	ldr	r0, [pc, #200]	; (80018cc <HAL_I2C_MspInit+0x180>)
 8001802:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_I2C_MspInit+0x184>)
 8001804:	6003      	str	r3, [r0, #0]
        hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001806:	230b      	movs	r3, #11
 8001808:	6043      	str	r3, [r0, #4]
        hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180a:	2300      	movs	r3, #0
 800180c:	6083      	str	r3, [r0, #8]
        hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800180e:	60c3      	str	r3, [r0, #12]
        hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	6102      	str	r2, [r0, #16]
        hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001814:	6143      	str	r3, [r0, #20]
        hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001816:	6183      	str	r3, [r0, #24]
        hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001818:	61c3      	str	r3, [r0, #28]
        hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800181a:	6203      	str	r3, [r0, #32]
        if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800181c:	f002 fbc4 	bl	8003fa8 <HAL_DMA_Init>
 8001820:	b988      	cbnz	r0, 8001846 <HAL_I2C_MspInit+0xfa>
        if (HAL_DMA_ConfigChannelAttributes(&hdma_i2c1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001822:	2110      	movs	r1, #16
 8001824:	4829      	ldr	r0, [pc, #164]	; (80018cc <HAL_I2C_MspInit+0x180>)
 8001826:	f002 fdc4 	bl	80043b2 <HAL_DMA_ConfigChannelAttributes>
 800182a:	b978      	cbnz	r0, 800184c <HAL_I2C_MspInit+0x100>
        __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_I2C_MspInit+0x180>)
 800182e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001830:	629c      	str	r4, [r3, #40]	; 0x28
 8001832:	e79f      	b.n	8001774 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 8001834:	f000 f9d6 	bl	8001be4 <Error_Handler>
 8001838:	e7a6      	b.n	8001788 <HAL_I2C_MspInit+0x3c>
          Error_Handler();
 800183a:	f000 f9d3 	bl	8001be4 <Error_Handler>
 800183e:	e7d7      	b.n	80017f0 <HAL_I2C_MspInit+0xa4>
          Error_Handler();
 8001840:	f000 f9d0 	bl	8001be4 <Error_Handler>
 8001844:	e7d9      	b.n	80017fa <HAL_I2C_MspInit+0xae>
          Error_Handler();
 8001846:	f000 f9cd 	bl	8001be4 <Error_Handler>
 800184a:	e7ea      	b.n	8001822 <HAL_I2C_MspInit+0xd6>
          Error_Handler();
 800184c:	f000 f9ca 	bl	8001be4 <Error_Handler>
 8001850:	e7ec      	b.n	800182c <HAL_I2C_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection =10240;// RCC_PERIPHCLK_I2C2;
 8001852:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001856:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c2ClockSelection = 10240;//RCC_I2C2CLKSOURCE_PCLK1;
 8001858:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185a:	a805      	add	r0, sp, #20
 800185c:	f004 fe9a 	bl	8006594 <HAL_RCCEx_PeriphCLKConfig>
 8001860:	bb20      	cbnz	r0, 80018ac <HAL_I2C_MspInit+0x160>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001862:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8001866:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800186e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001876:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8001878:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800187c:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	2312      	movs	r3, #18
 8001880:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;//GPIO_NOPULL;
 8001882:	2301      	movs	r3, #1
 8001884:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;//GPIO_SPEED_FREQ_LOW;
 8001886:	2302      	movs	r3, #2
 8001888:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800188a:	2304      	movs	r3, #4
 800188c:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	a913      	add	r1, sp, #76	; 0x4c
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f002 ff22 	bl	80046dc <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001898:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800189a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800189e:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80018a8:	9b03      	ldr	r3, [sp, #12]
}
 80018aa:	e763      	b.n	8001774 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80018ac:	f000 f99a 	bl	8001be4 <Error_Handler>
 80018b0:	e7d7      	b.n	8001862 <HAL_I2C_MspInit+0x116>
 80018b2:	bf00      	nop
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40005800 	.word	0x40005800
 80018bc:	000186a0 	.word	0x000186a0
 80018c0:	48000400 	.word	0x48000400
 80018c4:	20000220 	.word	0x20000220
 80018c8:	40020008 	.word	0x40020008
 80018cc:	200001c0 	.word	0x200001c0
 80018d0:	4002001c 	.word	0x4002001c

080018d4 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 80018d4:	b510      	push	{r4, lr}

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 80018d6:	4c1a      	ldr	r4, [pc, #104]	; (8001940 <lcdWriteByte+0x6c>)
 80018d8:	79e3      	ldrb	r3, [r4, #7]
 80018da:	4318      	orrs	r0, r3
 80018dc:	780b      	ldrb	r3, [r1, #0]
 80018de:	f023 030f 	bic.w	r3, r3, #15
 80018e2:	4303      	orrs	r3, r0
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	4a16      	ldr	r2, [pc, #88]	; (8001944 <lcdWriteByte+0x70>)
 80018ea:	7013      	strb	r3, [r2, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 80018ec:	7053      	strb	r3, [r2, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 80018ee:	fa4f fc80 	sxtb.w	ip, r0
 80018f2:	f991 3000 	ldrsb.w	r3, [r1]
 80018f6:	f023 030f 	bic.w	r3, r3, #15
 80018fa:	ea4c 0303 	orr.w	r3, ip, r3
 80018fe:	7093      	strb	r3, [r2, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 8001900:	780b      	ldrb	r3, [r1, #0]
 8001902:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
 8001906:	f040 0004 	orr.w	r0, r0, #4
 800190a:	b2c0      	uxtb	r0, r0
 800190c:	70d0      	strb	r0, [r2, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 800190e:	7110      	strb	r0, [r2, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001910:	780b      	ldrb	r3, [r1, #0]
 8001912:	ea4c 1c03 	orr.w	ip, ip, r3, lsl #4
 8001916:	f882 c005 	strb.w	ip, [r2, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 800191a:	2306      	movs	r3, #6
 800191c:	79a1      	ldrb	r1, [r4, #6]
 800191e:	6820      	ldr	r0, [r4, #0]
 8001920:	f003 f946 	bl	8004bb0 <HAL_I2C_Master_Transmit_DMA>
 8001924:	b120      	cbz	r0, 8001930 <lcdWriteByte+0x5c>
        return false;
 8001926:	2000      	movs	r0, #0
 8001928:	e009      	b.n	800193e <lcdWriteByte+0x6a>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 800192a:	2001      	movs	r0, #1
 800192c:	f008 fe46 	bl	800a5bc <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <lcdWriteByte+0x6c>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	f003 ffa6 	bl	8005884 <HAL_I2C_GetState>
 8001938:	2820      	cmp	r0, #32
 800193a:	d1f6      	bne.n	800192a <lcdWriteByte+0x56>
    }

    return true;
 800193c:	2001      	movs	r0, #1
}
 800193e:	bd10      	pop	{r4, pc}
 8001940:	20000320 	.word	0x20000320
 8001944:	20000318 	.word	0x20000318

08001948 <lcdCommand>:
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001948:	b510      	push	{r4, lr}
 800194a:	b082      	sub	sp, #8
    uint8_t lcdData = 0x00;
 800194c:	2300      	movs	r3, #0
 800194e:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (action) {
 8001952:	460c      	mov	r4, r1
 8001954:	2900      	cmp	r1, #0
 8001956:	d048      	beq.n	80019ea <lcdCommand+0xa2>
 8001958:	2901      	cmp	r1, #1
 800195a:	f040 808b 	bne.w	8001a74 <lcdCommand+0x12c>
            switch (command) {
 800195e:	1e43      	subs	r3, r0, #1
 8001960:	2b07      	cmp	r3, #7
 8001962:	f200 8089 	bhi.w	8001a78 <lcdCommand+0x130>
 8001966:	e8df f003 	tbb	[pc, r3]
 800196a:	1604      	.short	0x1604
 800196c:	4e25100a 	.word	0x4e25100a
 8001970:	3a34      	.short	0x3a34
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 8001972:	4a43      	ldr	r2, [pc, #268]	; (8001a80 <lcdCommand+0x138>)
 8001974:	7a13      	ldrb	r3, [r2, #8]
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	7213      	strb	r3, [r2, #8]
                    break;
 800197c:	e043      	b.n	8001a06 <lcdCommand+0xbe>
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 800197e:	4a40      	ldr	r2, [pc, #256]	; (8001a80 <lcdCommand+0x138>)
 8001980:	7a13      	ldrb	r3, [r2, #8]
 8001982:	f043 0302 	orr.w	r3, r3, #2
 8001986:	7213      	strb	r3, [r2, #8]
                    break;
 8001988:	e03d      	b.n	8001a06 <lcdCommand+0xbe>
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 800198a:	4a3d      	ldr	r2, [pc, #244]	; (8001a80 <lcdCommand+0x138>)
 800198c:	7a13      	ldrb	r3, [r2, #8]
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	7213      	strb	r3, [r2, #8]
                    break;
 8001994:	e037      	b.n	8001a06 <lcdCommand+0xbe>
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001996:	2301      	movs	r3, #1
 8001998:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 800199c:	f10d 0107 	add.w	r1, sp, #7
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff ff97 	bl	80018d4 <lcdWriteByte>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	d05b      	beq.n	8001a62 <lcdCommand+0x11a>
                        vTaskDelay(2);
 80019aa:	2002      	movs	r0, #2
 80019ac:	f008 fe06 	bl	800a5bc <vTaskDelay>
                        return true;
 80019b0:	4620      	mov	r0, r4
 80019b2:	e056      	b.n	8001a62 <lcdCommand+0x11a>
                    lcdData = LCD_BIT_CURSOR_HOME;
 80019b4:	2302      	movs	r3, #2
 80019b6:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 80019ba:	f10d 0107 	add.w	r1, sp, #7
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff ff88 	bl	80018d4 <lcdWriteByte>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d04c      	beq.n	8001a62 <lcdCommand+0x11a>
                        vTaskDelay(2);
 80019c8:	2002      	movs	r0, #2
 80019ca:	f008 fdf7 	bl	800a5bc <vTaskDelay>
                        return true;
 80019ce:	4620      	mov	r0, r4
 80019d0:	e047      	b.n	8001a62 <lcdCommand+0x11a>
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 80019d2:	4a2b      	ldr	r2, [pc, #172]	; (8001a80 <lcdCommand+0x138>)
 80019d4:	7a53      	ldrb	r3, [r2, #9]
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	7253      	strb	r3, [r2, #9]
                    break;
 80019dc:	e013      	b.n	8001a06 <lcdCommand+0xbe>
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 80019de:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <lcdCommand+0x138>)
 80019e0:	7a53      	ldrb	r3, [r2, #9]
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	7253      	strb	r3, [r2, #9]
                    break;
 80019e8:	e00d      	b.n	8001a06 <lcdCommand+0xbe>
            switch (command) {
 80019ea:	1e43      	subs	r3, r0, #1
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d845      	bhi.n	8001a7c <lcdCommand+0x134>
 80019f0:	e8df f003 	tbb	[pc, r3]
 80019f4:	1c164404 	.word	0x1c164404
 80019f8:	28220944 	.word	0x28220944
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80019fc:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <lcdCommand+0x138>)
 80019fe:	7a13      	ldrb	r3, [r2, #8]
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	7213      	strb	r3, [r2, #8]
    switch (command) {
 8001a06:	2804      	cmp	r0, #4
 8001a08:	d922      	bls.n	8001a50 <lcdCommand+0x108>
 8001a0a:	3806      	subs	r0, #6
 8001a0c:	b2c0      	uxtb	r0, r0
 8001a0e:	2802      	cmp	r0, #2
 8001a10:	d822      	bhi.n	8001a58 <lcdCommand+0x110>
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <lcdCommand+0x138>)
 8001a14:	7a5b      	ldrb	r3, [r3, #9]
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	f88d 3007 	strb.w	r3, [sp, #7]
            break;
 8001a1e:	e01b      	b.n	8001a58 <lcdCommand+0x110>
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <lcdCommand+0x138>)
 8001a22:	7a13      	ldrb	r3, [r2, #8]
 8001a24:	f023 0302 	bic.w	r3, r3, #2
 8001a28:	7213      	strb	r3, [r2, #8]
                    break;
 8001a2a:	e7ec      	b.n	8001a06 <lcdCommand+0xbe>
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <lcdCommand+0x138>)
 8001a2e:	7a13      	ldrb	r3, [r2, #8]
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	7213      	strb	r3, [r2, #8]
                    break;
 8001a36:	e7e6      	b.n	8001a06 <lcdCommand+0xbe>
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <lcdCommand+0x138>)
 8001a3a:	7a53      	ldrb	r3, [r2, #9]
 8001a3c:	f023 0302 	bic.w	r3, r3, #2
 8001a40:	7253      	strb	r3, [r2, #9]
                    break;
 8001a42:	e7e0      	b.n	8001a06 <lcdCommand+0xbe>
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <lcdCommand+0x138>)
 8001a46:	7a53      	ldrb	r3, [r2, #9]
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	7253      	strb	r3, [r2, #9]
                    break;
 8001a4e:	e7da      	b.n	8001a06 <lcdCommand+0xbe>
    switch (command) {
 8001a50:	2803      	cmp	r0, #3
 8001a52:	d208      	bcs.n	8001a66 <lcdCommand+0x11e>
 8001a54:	2801      	cmp	r0, #1
 8001a56:	d006      	beq.n	8001a66 <lcdCommand+0x11e>
    return lcdWriteByte((uint8_t)0x00, &lcdData);
 8001a58:	f10d 0107 	add.w	r1, sp, #7
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff ff39 	bl	80018d4 <lcdWriteByte>
}
 8001a62:	b002      	add	sp, #8
 8001a64:	bd10      	pop	{r4, pc}
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <lcdCommand+0x138>)
 8001a68:	7a1b      	ldrb	r3, [r3, #8]
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	f88d 3007 	strb.w	r3, [sp, #7]
            break;
 8001a72:	e7f1      	b.n	8001a58 <lcdCommand+0x110>
    switch (action) {
 8001a74:	2000      	movs	r0, #0
 8001a76:	e7f4      	b.n	8001a62 <lcdCommand+0x11a>
 8001a78:	2000      	movs	r0, #0
 8001a7a:	e7f2      	b.n	8001a62 <lcdCommand+0x11a>
 8001a7c:	4608      	mov	r0, r1
 8001a7e:	e7f0      	b.n	8001a62 <lcdCommand+0x11a>
 8001a80:	20000320 	.word	0x20000320

08001a84 <lcdInit>:
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001a84:	b510      	push	{r4, lr}
 8001a86:	b082      	sub	sp, #8
    uint8_t lcdData = LCD_BIT_2LINE;//LCD_BIT_5x8DOTS;
 8001a88:	f04f 0c08 	mov.w	ip, #8
 8001a8c:	f88d c003 	strb.w	ip, [sp, #3]
    lcdParams.hi2c      = hi2c;
 8001a90:	4c3a      	ldr	r4, [pc, #232]	; (8001b7c <lcdInit+0xf8>)
 8001a92:	6020      	str	r0, [r4, #0]
    lcdParams.address   = address << 1;
 8001a94:	0049      	lsls	r1, r1, #1
 8001a96:	71a1      	strb	r1, [r4, #6]
    lcdParams.lines     = lines;
 8001a98:	7122      	strb	r2, [r4, #4]
    lcdParams.columns   = columns;
 8001a9a:	7163      	strb	r3, [r4, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 8001a9c:	f884 c007 	strb.w	ip, [r4, #7]
    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <lcdInit+0xfc>)
 8001aa2:	2234      	movs	r2, #52	; 0x34
 8001aa4:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001aa6:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 8001aa8:	2230      	movs	r2, #48	; 0x30
 8001aaa:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; ++i) {
 8001aac:	2400      	movs	r4, #0
 8001aae:	e010      	b.n	8001ad2 <lcdInit+0x4e>
            vTaskDelay(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f008 fd83 	bl	800a5bc <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <lcdInit+0xf8>)
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	f003 fee3 	bl	8005884 <HAL_I2C_GetState>
 8001abe:	2820      	cmp	r0, #32
 8001ac0:	d1f6      	bne.n	8001ab0 <lcdInit+0x2c>
        if (i == 2) {
 8001ac2:	2c02      	cmp	r4, #2
 8001ac4:	d014      	beq.n	8001af0 <lcdInit+0x6c>
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 8001ac6:	2105      	movs	r1, #5
 8001ac8:	a801      	add	r0, sp, #4
 8001aca:	f008 fd25 	bl	800a518 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 8001ace:	3401      	adds	r4, #1
 8001ad0:	b2e4      	uxtb	r4, r4
 8001ad2:	2c02      	cmp	r4, #2
 8001ad4:	d811      	bhi.n	8001afa <lcdInit+0x76>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001ad6:	4829      	ldr	r0, [pc, #164]	; (8001b7c <lcdInit+0xf8>)
 8001ad8:	2303      	movs	r3, #3
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <lcdInit+0xfc>)
 8001adc:	7981      	ldrb	r1, [r0, #6]
 8001ade:	6800      	ldr	r0, [r0, #0]
 8001ae0:	f003 f866 	bl	8004bb0 <HAL_I2C_Master_Transmit_DMA>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d146      	bne.n	8001b76 <lcdInit+0xf2>
        xLastWakeTime = xTaskGetTickCount();
 8001ae8:	f008 fbee 	bl	800a2c8 <xTaskGetTickCount>
 8001aec:	9001      	str	r0, [sp, #4]
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001aee:	e7e2      	b.n	8001ab6 <lcdInit+0x32>
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 8001af0:	2101      	movs	r1, #1
 8001af2:	a801      	add	r0, sp, #4
 8001af4:	f008 fd10 	bl	800a518 <vTaskDelayUntil>
 8001af8:	e7e9      	b.n	8001ace <lcdInit+0x4a>
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 8001afa:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <lcdInit+0xfc>)
 8001afc:	232c      	movs	r3, #44	; 0x2c
 8001afe:	7013      	strb	r3, [r2, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001b00:	7053      	strb	r3, [r2, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 8001b02:	2328      	movs	r3, #40	; 0x28
 8001b04:	7093      	strb	r3, [r2, #2]
    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 8001b06:	481d      	ldr	r0, [pc, #116]	; (8001b7c <lcdInit+0xf8>)
 8001b08:	2303      	movs	r3, #3
 8001b0a:	7981      	ldrb	r1, [r0, #6]
 8001b0c:	6800      	ldr	r0, [r0, #0]
 8001b0e:	f003 f84f 	bl	8004bb0 <HAL_I2C_Master_Transmit_DMA>
 8001b12:	b120      	cbz	r0, 8001b1e <lcdInit+0x9a>
        return false;
 8001b14:	2000      	movs	r0, #0
 8001b16:	e02c      	b.n	8001b72 <lcdInit+0xee>
        vTaskDelay(1);
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f008 fd4f 	bl	800a5bc <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <lcdInit+0xf8>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	f003 feaf 	bl	8005884 <HAL_I2C_GetState>
 8001b26:	2820      	cmp	r0, #32
 8001b28:	d1f6      	bne.n	8001b18 <lcdInit+0x94>
    lcdData |= LCD_MODE_4BITS;
 8001b2a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f88d 3003 	strb.w	r3, [sp, #3]
    if (lcdParams.lines > 1) {
 8001b36:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <lcdInit+0xf8>)
 8001b38:	7912      	ldrb	r2, [r2, #4]
 8001b3a:	2a01      	cmp	r2, #1
 8001b3c:	d903      	bls.n	8001b46 <lcdInit+0xc2>
        lcdData |= LCD_BIT_2LINE;
 8001b3e:	f043 0308 	orr.w	r3, r3, #8
 8001b42:	f88d 3003 	strb.w	r3, [sp, #3]
    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001b46:	f10d 0103 	add.w	r1, sp, #3
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fec2 	bl	80018d4 <lcdWriteByte>
    lcdDisplayOn();
 8001b50:	2101      	movs	r1, #1
 8001b52:	4608      	mov	r0, r1
 8001b54:	f7ff fef8 	bl	8001948 <lcdCommand>
    lcdCursorDirToRight();
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2007      	movs	r0, #7
 8001b5c:	f7ff fef4 	bl	8001948 <lcdCommand>
    lcdDisplayClear();
 8001b60:	2101      	movs	r1, #1
 8001b62:	2002      	movs	r0, #2
 8001b64:	f7ff fef0 	bl	8001948 <lcdCommand>
    lcdCursorHome();
 8001b68:	2101      	movs	r1, #1
 8001b6a:	2005      	movs	r0, #5
 8001b6c:	f7ff feec 	bl	8001948 <lcdCommand>
    return true;
 8001b70:	2001      	movs	r0, #1
}
 8001b72:	b002      	add	sp, #8
 8001b74:	bd10      	pop	{r4, pc}
            return false;
 8001b76:	2000      	movs	r0, #0
 8001b78:	e7fb      	b.n	8001b72 <lcdInit+0xee>
 8001b7a:	bf00      	nop
 8001b7c:	20000320 	.word	0x20000320
 8001b80:	20000318 	.word	0x20000318

08001b84 <lcdSetCursorPosition>:
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001b84:	b500      	push	{lr}
 8001b86:	b083      	sub	sp, #12
    if ( line >= lcdParams.lines ) {
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <lcdSetCursorPosition+0x30>)
 8001b8a:	791b      	ldrb	r3, [r3, #4]
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	d801      	bhi.n	8001b94 <lcdSetCursorPosition+0x10>
        line = lcdParams.lines - 1;
 8001b90:	1e59      	subs	r1, r3, #1
 8001b92:	b2c9      	uxtb	r1, r1
    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <lcdSetCursorPosition+0x34>)
 8001b96:	5c5b      	ldrb	r3, [r3, r1]
 8001b98:	4403      	add	r3, r0
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ba0:	f88d 3007 	strb.w	r3, [sp, #7]
    return lcdWriteByte(0x00, &lcdCommand);
 8001ba4:	f10d 0107 	add.w	r1, sp, #7
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f7ff fe93 	bl	80018d4 <lcdWriteByte>
}
 8001bae:	b003      	add	sp, #12
 8001bb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb4:	20000320 	.word	0x20000320
 8001bb8:	08015ff8 	.word	0x08015ff8

08001bbc <lcdPrintStr>:
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 8001bbc:	b570      	push	{r4, r5, r6, lr}
 8001bbe:	4606      	mov	r6, r0
 8001bc0:	460d      	mov	r5, r1
    for (uint8_t i = 0; i < length; ++i) {
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	e001      	b.n	8001bca <lcdPrintStr+0xe>
 8001bc6:	3401      	adds	r4, #1
 8001bc8:	b2e4      	uxtb	r4, r4
 8001bca:	42ac      	cmp	r4, r5
 8001bcc:	d207      	bcs.n	8001bde <lcdPrintStr+0x22>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 8001bce:	1931      	adds	r1, r6, r4
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f7ff fe7f 	bl	80018d4 <lcdWriteByte>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1f4      	bne.n	8001bc6 <lcdPrintStr+0xa>
 8001bdc:	e000      	b.n	8001be0 <lcdPrintStr+0x24>
    return true;
 8001bde:	2301      	movs	r3, #1
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd70      	pop	{r4, r5, r6, pc}

08001be4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <Error_Handler+0x2>

08001be8 <SystemClock_Config>:
{
 8001be8:	b510      	push	{r4, lr}
 8001bea:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bec:	2248      	movs	r2, #72	; 0x48
 8001bee:	2100      	movs	r1, #0
 8001bf0:	a808      	add	r0, sp, #32
 8001bf2:	f014 f8f1 	bl	8015dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf6:	2400      	movs	r4, #0
 8001bf8:	9401      	str	r4, [sp, #4]
 8001bfa:	9402      	str	r4, [sp, #8]
 8001bfc:	9403      	str	r4, [sp, #12]
 8001bfe:	9404      	str	r4, [sp, #16]
 8001c00:	9405      	str	r4, [sp, #20]
 8001c02:	9406      	str	r4, [sp, #24]
 8001c04:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001c06:	f003 fe9b 	bl	8005940 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001c0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c0e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001c12:	f023 0318 	bic.w	r3, r3, #24
 8001c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001c34:	2324      	movs	r3, #36	; 0x24
 8001c36:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c38:	2381      	movs	r3, #129	; 0x81
 8001c3a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001c40:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001c42:	23b0      	movs	r3, #176	; 0xb0
 8001c44:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c46:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c48:	a808      	add	r0, sp, #32
 8001c4a:	f004 f813 	bl	8005c74 <HAL_RCC_OscConfig>
 8001c4e:	b988      	cbnz	r0, 8001c74 <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001c50:	234f      	movs	r3, #79	; 0x4f
 8001c52:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c54:	2300      	movs	r3, #0
 8001c56:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c58:	2280      	movs	r2, #128	; 0x80
 8001c5a:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001c5c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c60:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8001c62:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001c64:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c66:	2102      	movs	r1, #2
 8001c68:	a801      	add	r0, sp, #4
 8001c6a:	f004 fb3f 	bl	80062ec <HAL_RCC_ClockConfig>
 8001c6e:	b918      	cbnz	r0, 8001c78 <SystemClock_Config+0x90>
}
 8001c70:	b01a      	add	sp, #104	; 0x68
 8001c72:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001c74:	f7ff ffb6 	bl	8001be4 <Error_Handler>
    Error_Handler();
 8001c78:	f7ff ffb4 	bl	8001be4 <Error_Handler>

08001c7c <main>:
{
 8001c7c:	b508      	push	{r3, lr}
  HAL_Init();
 8001c7e:	f001 fb87 	bl	8003390 <HAL_Init>
  SystemClock_Config();
 8001c82:	f7ff ffb1 	bl	8001be8 <SystemClock_Config>
  MX_GPIO_Init();
 8001c86:	f7ff fc81 	bl	800158c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c8a:	f7ff fd07 	bl	800169c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001c8e:	f7ff fd31 	bl	80016f4 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001c92:	f000 faab 	bl	80021ec <MX_TIM1_Init>
  if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK) //Aquí inicio el PWM para el CP.
 8001c96:	2104      	movs	r1, #4
 8001c98:	4806      	ldr	r0, [pc, #24]	; (8001cb4 <main+0x38>)
 8001c9a:	f005 fde9 	bl	8007870 <HAL_TIM_PWM_Start>
 8001c9e:	b108      	cbz	r0, 8001ca4 <main+0x28>
     Error_Handler();
 8001ca0:	f7ff ffa0 	bl	8001be4 <Error_Handler>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ca4:	f007 f87e 	bl	8008da4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ca8:	f7ff fa84 	bl	80011b4 <MX_FREERTOS_Init>
  osKernelStart();
 8001cac:	f007 f898 	bl	8008de0 <osKernelStart>
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <main+0x34>
 8001cb2:	bf00      	nop
 8001cb4:	20000374 	.word	0x20000374

08001cb8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001cb8:	b500      	push	{lr}
 8001cba:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001cbc:	222c      	movs	r2, #44	; 0x2c
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	a801      	add	r0, sp, #4
 8001cc2:	f014 f889 	bl	8015dd8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cc6:	4819      	ldr	r0, [pc, #100]	; (8001d2c <MX_RTC_Init+0x74>)
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_RTC_Init+0x78>)
 8001cca:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001ccc:	231f      	movs	r3, #31
 8001cce:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cd4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cd6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cdc:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001cde:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ce6:	f004 fe67 	bl	80069b8 <HAL_RTC_Init>
 8001cea:	b9a8      	cbnz	r0, 8001d18 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001cec:	480f      	ldr	r0, [pc, #60]	; (8001d2c <MX_RTC_Init+0x74>)
 8001cee:	f004 ff9d 	bl	8006c2c <HAL_RTCEx_SetSSRU_IT>
 8001cf2:	b9a0      	cbnz	r0, 8001d1e <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001cf8:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cfa:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001cfc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d00:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d06:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001d08:	a901      	add	r1, sp, #4
 8001d0a:	4808      	ldr	r0, [pc, #32]	; (8001d2c <MX_RTC_Init+0x74>)
 8001d0c:	f004 feb2 	bl	8006a74 <HAL_RTC_SetAlarm_IT>
 8001d10:	b940      	cbnz	r0, 8001d24 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d12:	b00d      	add	sp, #52	; 0x34
 8001d14:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001d18:	f7ff ff64 	bl	8001be4 <Error_Handler>
 8001d1c:	e7e6      	b.n	8001cec <MX_RTC_Init+0x34>
    Error_Handler();
 8001d1e:	f7ff ff61 	bl	8001be4 <Error_Handler>
 8001d22:	e7e7      	b.n	8001cf4 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001d24:	f7ff ff5e 	bl	8001be4 <Error_Handler>
}
 8001d28:	e7f3      	b.n	8001d12 <MX_RTC_Init+0x5a>
 8001d2a:	bf00      	nop
 8001d2c:	2000032c 	.word	0x2000032c
 8001d30:	40002800 	.word	0x40002800

08001d34 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d34:	b510      	push	{r4, lr}
 8001d36:	b090      	sub	sp, #64	; 0x40
 8001d38:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d3a:	2238      	movs	r2, #56	; 0x38
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	a802      	add	r0, sp, #8
 8001d40:	f014 f84a 	bl	8015dd8 <memset>
  if(rtcHandle->Instance==RTC)
 8001d44:	6822      	ldr	r2, [r4, #0]
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_RTC_MspInit+0x7c>)
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d4c:	b010      	add	sp, #64	; 0x40
 8001d4e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d54:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5a:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5c:	a802      	add	r0, sp, #8
 8001d5e:	f004 fc19 	bl	8006594 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	bb08      	cbnz	r0, 8001da8 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d7a:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001d84:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 5, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f002 f844 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001d90:	2002      	movs	r0, #2
 8001d92:	f002 f879 	bl	8003e88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2105      	movs	r1, #5
 8001d9a:	202a      	movs	r0, #42	; 0x2a
 8001d9c:	f002 f83c 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001da0:	202a      	movs	r0, #42	; 0x2a
 8001da2:	f002 f871 	bl	8003e88 <HAL_NVIC_EnableIRQ>
}
 8001da6:	e7d1      	b.n	8001d4c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001da8:	f7ff ff1c 	bl	8001be4 <Error_Handler>
 8001dac:	e7da      	b.n	8001d64 <HAL_RTC_MspInit+0x30>
 8001dae:	bf00      	nop
 8001db0:	40002800 	.word	0x40002800

08001db4 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001db4:	4770      	bx	lr

08001db6 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001db6:	4770      	bx	lr

08001db8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001dba:	f001 faff 	bl	80033bc <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <PWR_EnterStopMode+0x14>)
 8001dc2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001dc6:	f003 fe1f 	bl	8005a08 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001dca:	bd08      	pop	{r3, pc}
 8001dcc:	58000400 	.word	0x58000400

08001dd0 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001dd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001dd2:	f001 fafa 	bl	80033ca <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001dd6:	bd08      	pop	{r3, pc}

08001dd8 <PWR_ExitStopMode>:
{
 8001dd8:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001dda:	f001 faf6 	bl	80033ca <HAL_ResumeTick>
  vcom_Resume();
 8001dde:	f000 fccd 	bl	800277c <vcom_Resume>
}
 8001de2:	bd08      	pop	{r3, pc}

08001de4 <PWR_EnterSleepMode>:
{
 8001de4:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001de6:	f001 fae9 	bl	80033bc <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001dea:	2101      	movs	r1, #1
 8001dec:	2000      	movs	r0, #0
 8001dee:	f003 fdaf 	bl	8005950 <HAL_PWR_EnterSLEEPMode>
}
 8001df2:	bd08      	pop	{r3, pc}

08001df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df4:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	210f      	movs	r1, #15
 8001dfa:	f06f 0001 	mvn.w	r0, #1
 8001dfe:	f002 f80b 	bl	8003e18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e02:	bd08      	pop	{r3, pc}

08001e04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <NMI_Handler>

08001e06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler>

08001e08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <MemManage_Handler>

08001e0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <BusFault_Handler>

08001e0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <UsageFault_Handler>

08001e0e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0e:	4770      	bx	lr

08001e10 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001e12:	4802      	ldr	r0, [pc, #8]	; (8001e1c <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001e14:	f004 ff36 	bl	8006c84 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001e18:	bd08      	pop	{r3, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000032c 	.word	0x2000032c

08001e20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001e22:	2001      	movs	r0, #1
 8001e24:	f002 fdb8 	bl	8004998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e28:	bd08      	pop	{r3, pc}

08001e2a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e2a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f002 fdb3 	bl	8004998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e32:	bd08      	pop	{r3, pc}

08001e34 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e36:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA1_Channel5_IRQHandler+0xc>)
 8001e38:	f002 fa44 	bl	80042c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e3c:	bd08      	pop	{r3, pc}
 8001e3e:	bf00      	nop
 8001e40:	200003c8 	.word	0x200003c8

08001e44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001e46:	2040      	movs	r0, #64	; 0x40
 8001e48:	f002 fda6 	bl	8004998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e4c:	bd08      	pop	{r3, pc}
	...

08001e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e52:	4802      	ldr	r0, [pc, #8]	; (8001e5c <USART2_IRQHandler+0xc>)
 8001e54:	f005 ff3a 	bl	8007ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e58:	bd08      	pop	{r3, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000428 	.word	0x20000428

08001e60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e62:	4802      	ldr	r0, [pc, #8]	; (8001e6c <RTC_Alarm_IRQHandler+0xc>)
 8001e64:	f004 fd20 	bl	80068a8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001e68:	bd08      	pop	{r3, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000032c 	.word	0x2000032c

08001e70 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001e72:	4802      	ldr	r0, [pc, #8]	; (8001e7c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001e74:	f005 f9b0 	bl	80071d8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001e78:	bd08      	pop	{r3, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000364 	.word	0x20000364

08001e80 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e80:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_SUBGHZ_Init+0x18>)
 8001e84:	2308      	movs	r3, #8
 8001e86:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e88:	f004 ff32 	bl	8006cf0 <HAL_SUBGHZ_Init>
 8001e8c:	b900      	cbnz	r0, 8001e90 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e8e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001e90:	f7ff fea8 	bl	8001be4 <Error_Handler>
}
 8001e94:	e7fb      	b.n	8001e8e <MX_SUBGHZ_Init+0xe>
 8001e96:	bf00      	nop
 8001e98:	20000364 	.word	0x20000364

08001e9c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e9c:	b500      	push	{lr}
 8001e9e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ea6:	f042 0201 	orr.w	r2, r2, #1
 8001eaa:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001eb4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2105      	movs	r1, #5
 8001eba:	2032      	movs	r0, #50	; 0x32
 8001ebc:	f001 ffac 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ec0:	2032      	movs	r0, #50	; 0x32
 8001ec2:	f001 ffe1 	bl	8003e88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ec6:	b003      	add	sp, #12
 8001ec8:	f85d fb04 	ldr.w	pc, [sp], #4

08001ecc <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ecc:	b40c      	push	{r2, r3}
 8001ece:	b500      	push	{lr}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	ab04      	add	r3, sp, #16
 8001ed4:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001ed8:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001eda:	f013 fe87 	bl	8015bec <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001ede:	b003      	add	sp, #12
 8001ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ee4:	b002      	add	sp, #8
 8001ee6:	4770      	bx	lr

08001ee8 <TimestampNow>:
{
 8001ee8:	b530      	push	{r4, r5, lr}
 8001eea:	b085      	sub	sp, #20
 8001eec:	4604      	mov	r4, r0
 8001eee:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001ef0:	a802      	add	r0, sp, #8
 8001ef2:	f013 fbf1 	bl	80156d8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001ef6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	9b02      	ldr	r3, [sp, #8]
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <TimestampNow+0x2c>)
 8001f00:	2110      	movs	r1, #16
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7ff ffe2 	bl	8001ecc <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7fe f939 	bl	8000180 <strlen>
 8001f0e:	8028      	strh	r0, [r5, #0]
}
 8001f10:	b005      	add	sp, #20
 8001f12:	bd30      	pop	{r4, r5, pc}
 8001f14:	08016014 	.word	0x08016014

08001f18 <SystemApp_Init>:
{
 8001f18:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f1e:	6893      	ldr	r3, [r2, #8]
 8001f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f24:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001f26:	f013 fc5b 	bl	80157e0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001f2a:	2401      	movs	r4, #1
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <SystemApp_Init+0x4c>)
 8001f2e:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001f30:	f000 f8b8 	bl	80020a4 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001f34:	f013 f9d2 	bl	80152dc <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001f38:	480b      	ldr	r0, [pc, #44]	; (8001f68 <SystemApp_Init+0x50>)
 8001f3a:	f013 f9e9 	bl	8015310 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <SystemApp_Init+0x54>)
 8001f40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f44:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f013 f9e8 	bl	801531c <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001f4c:	f7ff f83a 	bl	8000fc4 <SYS_InitMeasurement>
  EnvSensors_Init();
 8001f50:	f000 f908 	bl	8002164 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001f54:	f013 faf2 	bl	801553c <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f58:	4621      	mov	r1, r4
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f013 fb0e 	bl	801557c <UTIL_LPM_SetOffMode>
}
 8001f60:	bd10      	pop	{r4, pc}
 8001f62:	bf00      	nop
 8001f64:	20000370 	.word	0x20000370
 8001f68:	08001ee9 	.word	0x08001ee9
 8001f6c:	58004000 	.word	0x58004000

08001f70 <GetBatteryLevel>:
{
 8001f70:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f72:	f7ff f82f 	bl	8000fd4 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001f76:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f7a:	4298      	cmp	r0, r3
 8001f7c:	d80d      	bhi.n	8001f9a <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001f7e:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001f82:	d30c      	bcc.n	8001f9e <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f84:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001f88:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001f8c:	0040      	lsls	r0, r0, #1
 8001f8e:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <GetBatteryLevel+0x34>)
 8001f90:	fba3 3000 	umull	r3, r0, r3, r0
 8001f94:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001f98:	e000      	b.n	8001f9c <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001f9a:	20fe      	movs	r0, #254	; 0xfe
}
 8001f9c:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	e7fc      	b.n	8001f9c <GetBatteryLevel+0x2c>
 8001fa2:	bf00      	nop
 8001fa4:	1b4e81b5 	.word	0x1b4e81b5

08001fa8 <GetTemperatureLevel>:
{
 8001fa8:	b500      	push	{lr}
 8001faa:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001fac:	4668      	mov	r0, sp
 8001fae:	f000 f8bd 	bl	800212c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001fb2:	9801      	ldr	r0, [sp, #4]
 8001fb4:	f7fe fdb6 	bl	8000b24 <__aeabi_f2iz>
}
 8001fb8:	b200      	sxth	r0, r0
 8001fba:	b007      	add	sp, #28
 8001fbc:	f85d fb04 	ldr.w	pc, [sp], #4

08001fc0 <GetUniqueId>:
{
 8001fc0:	b538      	push	{r3, r4, r5, lr}
 8001fc2:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <GetUniqueId+0x68>)
 8001fc6:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d013      	beq.n	8001ff8 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001fd0:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001fd2:	0a1a      	lsrs	r2, r3, #8
 8001fd4:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001fd6:	0c1a      	lsrs	r2, r3, #16
 8001fd8:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001fda:	0e1b      	lsrs	r3, r3, #24
 8001fdc:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <GetUniqueId+0x68>)
 8001fe0:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001fe4:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001fe6:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001fea:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001fec:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001fee:	0c1a      	lsrs	r2, r3, #16
 8001ff0:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001ff2:	0e1b      	lsrs	r3, r3, #24
 8001ff4:	7003      	strb	r3, [r0, #0]
}
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001ff8:	f001 f9ee 	bl	80033d8 <HAL_GetUIDw0>
 8001ffc:	4605      	mov	r5, r0
 8001ffe:	f001 f9f7 	bl	80033f0 <HAL_GetUIDw2>
 8002002:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002004:	f001 f9ee 	bl	80033e4 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8002008:	0e2b      	lsrs	r3, r5, #24
 800200a:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 800200c:	0c2b      	lsrs	r3, r5, #16
 800200e:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8002010:	0a2b      	lsrs	r3, r5, #8
 8002012:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8002014:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8002016:	0e03      	lsrs	r3, r0, #24
 8002018:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 800201a:	0c03      	lsrs	r3, r0, #16
 800201c:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 800201e:	0a03      	lsrs	r3, r0, #8
 8002020:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8002022:	7020      	strb	r0, [r4, #0]
 8002024:	e7e7      	b.n	8001ff6 <GetUniqueId+0x36>
 8002026:	bf00      	nop
 8002028:	1fff7000 	.word	0x1fff7000

0800202c <GetLectura_CP>:
  {
 800202c:	b508      	push	{r3, lr}
	  voltaje_CP = (uint16_t) SYS_Lectura_CP();
 800202e:	f7ff f849 	bl	80010c4 <SYS_Lectura_CP>
  }
 8002032:	bd08      	pop	{r3, pc}

08002034 <GetDevAddr>:
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002034:	4b08      	ldr	r3, [pc, #32]	; (8002058 <GetDevAddr+0x24>)
 8002036:	f8d3 0580 	ldr.w	r0, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)
 800203a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800203e:	d000      	beq.n	8002042 <GetDevAddr+0xe>
}
 8002040:	4770      	bx	lr
{
 8002042:	b510      	push	{r4, lr}
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002044:	f001 f9c8 	bl	80033d8 <HAL_GetUIDw0>
 8002048:	4604      	mov	r4, r0
 800204a:	f001 f9cb 	bl	80033e4 <HAL_GetUIDw1>
 800204e:	4044      	eors	r4, r0
 8002050:	f001 f9ce 	bl	80033f0 <HAL_GetUIDw2>
 8002054:	4060      	eors	r0, r4
}
 8002056:	bd10      	pop	{r4, pc}
 8002058:	1fff7000 	.word	0x1fff7000

0800205c <UTIL_ADV_TRACE_PreSendHook>:
{
 800205c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800205e:	2101      	movs	r1, #1
 8002060:	2002      	movs	r0, #2
 8002062:	f013 fa75 	bl	8015550 <UTIL_LPM_SetStopMode>
}
 8002066:	bd08      	pop	{r3, pc}

08002068 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002068:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800206a:	2100      	movs	r1, #0
 800206c:	2002      	movs	r0, #2
 800206e:	f013 fa6f 	bl	8015550 <UTIL_LPM_SetStopMode>
}
 8002072:	bd08      	pop	{r3, pc}

08002074 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002074:	2000      	movs	r0, #0
 8002076:	4770      	bx	lr

08002078 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002078:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_GetTick+0x14>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b90b      	cbnz	r3, 8002084 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8002080:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8002082:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8002084:	f000 f944 	bl	8002310 <TIMER_IF_GetTimerValue>
 8002088:	e7fb      	b.n	8002082 <HAL_GetTick+0xa>
 800208a:	bf00      	nop
 800208c:	20000370 	.word	0x20000370

08002090 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002090:	b500      	push	{lr}
 8002092:	b083      	sub	sp, #12
 8002094:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002096:	9801      	ldr	r0, [sp, #4]
 8002098:	f000 fa20 	bl	80024dc <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800209c:	b003      	add	sp, #12
 800209e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080020a4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80020a8:	f001 f9a8 	bl	80033fc <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80020ac:	f001 f9ae 	bl	800340c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80020b0:	f001 f9b4 	bl	800341c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80020b4:	2400      	movs	r4, #0
 80020b6:	9403      	str	r4, [sp, #12]
 80020b8:	9404      	str	r4, [sp, #16]
 80020ba:	9405      	str	r4, [sp, #20]
 80020bc:	9406      	str	r4, [sp, #24]
 80020be:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80020c0:	2301      	movs	r3, #1
 80020c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ce:	f042 0202 	orr.w	r2, r2, #2
 80020d2:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d6:	f002 0202 	and.w	r2, r2, #2
 80020da:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80020dc:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020e0:	f042 0202 	orr.w	r2, r2, #2
 80020e4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80020ee:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80020f0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80020f4:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80020f6:	4d0c      	ldr	r5, [pc, #48]	; (8002128 <DBG_Init+0x84>)
 80020f8:	a903      	add	r1, sp, #12
 80020fa:	4628      	mov	r0, r5
 80020fc:	f002 faee 	bl	80046dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002100:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8002104:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002106:	a903      	add	r1, sp, #12
 8002108:	4628      	mov	r0, r5
 800210a:	f002 fae7 	bl	80046dc <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800210e:	4622      	mov	r2, r4
 8002110:	4639      	mov	r1, r7
 8002112:	4628      	mov	r0, r5
 8002114:	f002 fc32 	bl	800497c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002118:	4622      	mov	r2, r4
 800211a:	4631      	mov	r1, r6
 800211c:	4628      	mov	r0, r5
 800211e:	f002 fc2d 	bl	800497c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002122:	b009      	add	sp, #36	; 0x24
 8002124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002126:	bf00      	nop
 8002128:	48000400 	.word	0x48000400

0800212c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800212c:	b510      	push	{r4, lr}
 800212e:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002130:	f7fe ff72 	bl	8001018 <SYS_GetTemperatureLevel>
 8002134:	f340 200f 	sbfx	r0, r0, #8, #16
 8002138:	f7fe fb50 	bl	80007dc <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <EnvSensors_Read+0x28>)
 800213e:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002140:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <EnvSensors_Read+0x2c>)
 8002144:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <EnvSensors_Read+0x30>)
 8002148:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <EnvSensors_Read+0x34>)
 800214c:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 800214e:	2000      	movs	r0, #0
 8002150:	bd10      	pop	{r4, pc}
 8002152:	bf00      	nop
 8002154:	42480000 	.word	0x42480000
 8002158:	447a0000 	.word	0x447a0000
 800215c:	003e090d 	.word	0x003e090d
 8002160:	000503ab 	.word	0x000503ab

08002164 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002164:	2000      	movs	r0, #0
 8002166:	4770      	bx	lr

08002168 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8002168:	6802      	ldr	r2, [r0, #0]
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_TIM_PWM_MspInit+0x28>)
 800216c:	429a      	cmp	r2, r3
 800216e:	d000      	beq.n	8002172 <HAL_TIM_PWM_MspInit+0xa>
 8002170:	4770      	bx	lr
{
 8002172:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800217a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217e:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002186:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002188:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800218a:	b002      	add	sp, #8
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40012c00 	.word	0x40012c00

08002194 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002194:	b500      	push	{lr}
 8002196:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	9303      	str	r3, [sp, #12]
 80021a0:	9304      	str	r3, [sp, #16]
 80021a2:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM1)
 80021a4:	6802      	ldr	r2, [r0, #0]
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <HAL_TIM_MspPostInit+0x54>)
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d002      	beq.n	80021b2 <HAL_TIM_MspPostInit+0x1e>


  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021ac:	b007      	add	sp, #28
 80021ae:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80021c6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d2:	2301      	movs	r3, #1
 80021d4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d6:	2203      	movs	r2, #3
 80021d8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021da:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	a901      	add	r1, sp, #4
 80021de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e2:	f002 fa7b 	bl	80046dc <HAL_GPIO_Init>
}
 80021e6:	e7e1      	b.n	80021ac <HAL_TIM_MspPostInit+0x18>
 80021e8:	40012c00 	.word	0x40012c00

080021ec <MX_TIM1_Init>:
{
 80021ec:	b510      	push	{r4, lr}
 80021ee:	b098      	sub	sp, #96	; 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f0:	2400      	movs	r4, #0
 80021f2:	9415      	str	r4, [sp, #84]	; 0x54
 80021f4:	9416      	str	r4, [sp, #88]	; 0x58
 80021f6:	9417      	str	r4, [sp, #92]	; 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f8:	940e      	str	r4, [sp, #56]	; 0x38
 80021fa:	940f      	str	r4, [sp, #60]	; 0x3c
 80021fc:	9410      	str	r4, [sp, #64]	; 0x40
 80021fe:	9411      	str	r4, [sp, #68]	; 0x44
 8002200:	9412      	str	r4, [sp, #72]	; 0x48
 8002202:	9413      	str	r4, [sp, #76]	; 0x4c
 8002204:	9414      	str	r4, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002206:	2234      	movs	r2, #52	; 0x34
 8002208:	4621      	mov	r1, r4
 800220a:	a801      	add	r0, sp, #4
 800220c:	f013 fde4 	bl	8015dd8 <memset>
  htim1.Instance = TIM1;
 8002210:	4828      	ldr	r0, [pc, #160]	; (80022b4 <MX_TIM1_Init+0xc8>)
 8002212:	4b29      	ldr	r3, [pc, #164]	; (80022b8 <MX_TIM1_Init+0xcc>)
 8002214:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 0;
 8002216:	6044      	str	r4, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 6000;
 800221a:	f241 7370 	movw	r3, #6000	; 0x1770
 800221e:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002222:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002224:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002226:	f005 fa0b 	bl	8007640 <HAL_TIM_PWM_Init>
 800222a:	2800      	cmp	r0, #0
 800222c:	d136      	bne.n	800229c <MX_TIM1_Init+0xb0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	9315      	str	r3, [sp, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002232:	9316      	str	r3, [sp, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002236:	a915      	add	r1, sp, #84	; 0x54
 8002238:	481e      	ldr	r0, [pc, #120]	; (80022b4 <MX_TIM1_Init+0xc8>)
 800223a:	f005 fbab 	bl	8007994 <HAL_TIMEx_MasterConfigSynchronization>
 800223e:	2800      	cmp	r0, #0
 8002240:	d12f      	bne.n	80022a2 <MX_TIM1_Init+0xb6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002242:	2360      	movs	r3, #96	; 0x60
 8002244:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 960;
 8002246:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800224a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224c:	2300      	movs	r3, #0
 800224e:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002250:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002252:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002254:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002256:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002258:	2204      	movs	r2, #4
 800225a:	a90e      	add	r1, sp, #56	; 0x38
 800225c:	4815      	ldr	r0, [pc, #84]	; (80022b4 <MX_TIM1_Init+0xc8>)
 800225e:	f005 fa5b 	bl	8007718 <HAL_TIM_PWM_ConfigChannel>
 8002262:	bb08      	cbnz	r0, 80022a8 <MX_TIM1_Init+0xbc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002268:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800226a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800226c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800226e:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002274:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002276:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002278:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800227a:	9309      	str	r3, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800227c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002280:	920a      	str	r2, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002282:	930b      	str	r3, [sp, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002284:	930c      	str	r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002286:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002288:	a901      	add	r1, sp, #4
 800228a:	480a      	ldr	r0, [pc, #40]	; (80022b4 <MX_TIM1_Init+0xc8>)
 800228c:	f005 fbb6 	bl	80079fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002290:	b968      	cbnz	r0, 80022ae <MX_TIM1_Init+0xc2>
  HAL_TIM_MspPostInit(&htim1);
 8002292:	4808      	ldr	r0, [pc, #32]	; (80022b4 <MX_TIM1_Init+0xc8>)
 8002294:	f7ff ff7e 	bl	8002194 <HAL_TIM_MspPostInit>
}
 8002298:	b018      	add	sp, #96	; 0x60
 800229a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800229c:	f7ff fca2 	bl	8001be4 <Error_Handler>
 80022a0:	e7c5      	b.n	800222e <MX_TIM1_Init+0x42>
    Error_Handler();
 80022a2:	f7ff fc9f 	bl	8001be4 <Error_Handler>
 80022a6:	e7cc      	b.n	8002242 <MX_TIM1_Init+0x56>
    Error_Handler();
 80022a8:	f7ff fc9c 	bl	8001be4 <Error_Handler>
 80022ac:	e7da      	b.n	8002264 <MX_TIM1_Init+0x78>
    Error_Handler();
 80022ae:	f7ff fc99 	bl	8001be4 <Error_Handler>
 80022b2:	e7ee      	b.n	8002292 <MX_TIM1_Init+0xa6>
 80022b4:	20000374 	.word	0x20000374
 80022b8:	40012c00 	.word	0x40012c00

080022bc <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <TIMER_IF_SetTimerContext+0x1c>)
 80022be:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022c0:	e001      	b.n	80022c6 <TIMER_IF_SetTimerContext+0xa>
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <TIMER_IF_SetTimerContext+0x1c>)
 80022c4:	6898      	ldr	r0, [r3, #8]
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <TIMER_IF_SetTimerContext+0x1c>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4283      	cmp	r3, r0
 80022cc:	d1f9      	bne.n	80022c2 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 80022ce:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80022d0:	4b02      	ldr	r3, [pc, #8]	; (80022dc <TIMER_IF_SetTimerContext+0x20>)
 80022d2:	6018      	str	r0, [r3, #0]
}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40002800 	.word	0x40002800
 80022dc:	200003c4 	.word	0x200003c4

080022e0 <TIMER_IF_GetTimerContext>:
}
 80022e0:	4b01      	ldr	r3, [pc, #4]	; (80022e8 <TIMER_IF_GetTimerContext+0x8>)
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	200003c4 	.word	0x200003c4

080022ec <TIMER_IF_GetTimerElapsedTime>:
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80022ee:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022f0:	e001      	b.n	80022f6 <TIMER_IF_GetTimerElapsedTime+0xa>
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80022f4:	6898      	ldr	r0, [r3, #8]
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4283      	cmp	r3, r0
 80022fc:	d1f9      	bne.n	80022f2 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 80022fe:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <TIMER_IF_GetTimerElapsedTime+0x20>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	1ac0      	subs	r0, r0, r3
 8002306:	4770      	bx	lr
 8002308:	40002800 	.word	0x40002800
 800230c:	200003c4 	.word	0x200003c4

08002310 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <TIMER_IF_GetTimerValue+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b153      	cbz	r3, 800232c <TIMER_IF_GetTimerValue+0x1c>
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <TIMER_IF_GetTimerValue+0x24>)
 8002318:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800231a:	e001      	b.n	8002320 <TIMER_IF_GetTimerValue+0x10>
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <TIMER_IF_GetTimerValue+0x24>)
 800231e:	6898      	ldr	r0, [r3, #8]
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <TIMER_IF_GetTimerValue+0x24>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4283      	cmp	r3, r0
 8002326:	d1f9      	bne.n	800231c <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8002328:	43c0      	mvns	r0, r0
 800232a:	4770      	bx	lr
  uint32_t ret = 0;
 800232c:	2000      	movs	r0, #0
}
 800232e:	4770      	bx	lr
 8002330:	200003c0 	.word	0x200003c0
 8002334:	40002800 	.word	0x40002800

08002338 <TIMER_IF_GetMinimumTimeout>:
}
 8002338:	2003      	movs	r0, #3
 800233a:	4770      	bx	lr

0800233c <TIMER_IF_Convert_ms2Tick>:
{
 800233c:	b508      	push	{r3, lr}
 800233e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002344:	2300      	movs	r3, #0
 8002346:	0280      	lsls	r0, r0, #10
 8002348:	0d89      	lsrs	r1, r1, #22
 800234a:	f7fe fc31 	bl	8000bb0 <__aeabi_uldivmod>
}
 800234e:	bd08      	pop	{r3, pc}

08002350 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002350:	0ec2      	lsrs	r2, r0, #27
 8002352:	0143      	lsls	r3, r0, #5
 8002354:	1a1b      	subs	r3, r3, r0
 8002356:	f162 0200 	sbc.w	r2, r2, #0
 800235a:	0092      	lsls	r2, r2, #2
 800235c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	181b      	adds	r3, r3, r0
 8002364:	f142 0000 	adc.w	r0, r2, #0
 8002368:	00c0      	lsls	r0, r0, #3
 800236a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800236e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002372:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8002376:	4770      	bx	lr

08002378 <TIMER_IF_StopTimer>:
{
 8002378:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <TIMER_IF_StopTimer+0x20>)
 800237c:	2201      	movs	r2, #1
 800237e:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002380:	4c06      	ldr	r4, [pc, #24]	; (800239c <TIMER_IF_StopTimer+0x24>)
 8002382:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002386:	4620      	mov	r0, r4
 8002388:	f004 fa4e 	bl	8006828 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002392:	2000      	movs	r0, #0
 8002394:	bd10      	pop	{r4, pc}
 8002396:	bf00      	nop
 8002398:	40002800 	.word	0x40002800
 800239c:	2000032c 	.word	0x2000032c

080023a0 <TIMER_IF_BkUp_Write_MSBticks>:
{
 80023a0:	b508      	push	{r3, lr}
 80023a2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80023a4:	2102      	movs	r1, #2
 80023a6:	4802      	ldr	r0, [pc, #8]	; (80023b0 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 80023a8:	f004 fc81 	bl	8006cae <HAL_RTCEx_BKUPWrite>
}
 80023ac:	bd08      	pop	{r3, pc}
 80023ae:	bf00      	nop
 80023b0:	2000032c 	.word	0x2000032c

080023b4 <TIMER_IF_Init>:
{
 80023b4:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <TIMER_IF_Init+0x40>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b10b      	cbz	r3, 80023c0 <TIMER_IF_Init+0xc>
}
 80023bc:	2000      	movs	r0, #0
 80023be:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023c0:	4c0d      	ldr	r4, [pc, #52]	; (80023f8 <TIMER_IF_Init+0x44>)
 80023c2:	f04f 35ff 	mov.w	r5, #4294967295
 80023c6:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 80023c8:	f7ff fc76 	bl	8001cb8 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 80023cc:	f7ff ffd4 	bl	8002378 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80023d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d4:	4620      	mov	r0, r4
 80023d6:	f004 fa27 	bl	8006828 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80023da:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80023dc:	4620      	mov	r0, r4
 80023de:	f004 fc05 	bl	8006bec <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7ff ffdc 	bl	80023a0 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 80023e8:	f7ff ff68 	bl	80022bc <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 80023ec:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <TIMER_IF_Init+0x40>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e7e3      	b.n	80023bc <TIMER_IF_Init+0x8>
 80023f4:	200003c0 	.word	0x200003c0
 80023f8:	2000032c 	.word	0x2000032c

080023fc <TIMER_IF_BkUp_Write_Seconds>:
{
 80023fc:	b508      	push	{r3, lr}
 80023fe:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002400:	2100      	movs	r1, #0
 8002402:	4802      	ldr	r0, [pc, #8]	; (800240c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002404:	f004 fc53 	bl	8006cae <HAL_RTCEx_BKUPWrite>
}
 8002408:	bd08      	pop	{r3, pc}
 800240a:	bf00      	nop
 800240c:	2000032c 	.word	0x2000032c

08002410 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002410:	b508      	push	{r3, lr}
 8002412:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002414:	2101      	movs	r1, #1
 8002416:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002418:	f004 fc49 	bl	8006cae <HAL_RTCEx_BKUPWrite>
}
 800241c:	bd08      	pop	{r3, pc}
 800241e:	bf00      	nop
 8002420:	2000032c 	.word	0x2000032c

08002424 <TIMER_IF_StartTimer>:
{
 8002424:	b510      	push	{r4, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 800242a:	222c      	movs	r2, #44	; 0x2c
 800242c:	2100      	movs	r1, #0
 800242e:	a801      	add	r0, sp, #4
 8002430:	f013 fcd2 	bl	8015dd8 <memset>
  TIMER_IF_StopTimer();
 8002434:	f7ff ffa0 	bl	8002378 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <TIMER_IF_StartTimer+0x48>)
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800243e:	2300      	movs	r3, #0
 8002440:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002442:	43e4      	mvns	r4, r4
 8002444:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002446:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002448:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800244c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002452:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002454:	2201      	movs	r2, #1
 8002456:	a901      	add	r1, sp, #4
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <TIMER_IF_StartTimer+0x4c>)
 800245a:	f004 fb0b 	bl	8006a74 <HAL_RTC_SetAlarm_IT>
 800245e:	b910      	cbnz	r0, 8002466 <TIMER_IF_StartTimer+0x42>
}
 8002460:	2000      	movs	r0, #0
 8002462:	b00c      	add	sp, #48	; 0x30
 8002464:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002466:	f7ff fbbd 	bl	8001be4 <Error_Handler>
 800246a:	e7f9      	b.n	8002460 <TIMER_IF_StartTimer+0x3c>
 800246c:	200003c4 	.word	0x200003c4
 8002470:	2000032c 	.word	0x2000032c

08002474 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002474:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002476:	2102      	movs	r1, #2
 8002478:	4801      	ldr	r0, [pc, #4]	; (8002480 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800247a:	f004 fc1f 	bl	8006cbc <HAL_RTCEx_BKUPRead>
}
 800247e:	bd08      	pop	{r3, pc}
 8002480:	2000032c 	.word	0x2000032c

08002484 <TIMER_IF_GetTime>:
{
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4605      	mov	r5, r0
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <TIMER_IF_GetTime+0x34>)
 800248a:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800248c:	e001      	b.n	8002492 <TIMER_IF_GetTime+0xe>
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <TIMER_IF_GetTime+0x34>)
 8002490:	689c      	ldr	r4, [r3, #8]
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <TIMER_IF_GetTime+0x34>)
 8002494:	6892      	ldr	r2, [r2, #8]
 8002496:	42a2      	cmp	r2, r4
 8002498:	d1f9      	bne.n	800248e <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 800249a:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800249c:	f7ff ffea 	bl	8002474 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80024a0:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80024a2:	0aa4      	lsrs	r4, r4, #10
 80024a4:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80024a8:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80024ac:	f7ff ff50 	bl	8002350 <TIMER_IF_Convert_Tick2ms>
 80024b0:	8028      	strh	r0, [r5, #0]
}
 80024b2:	4620      	mov	r0, r4
 80024b4:	bd38      	pop	{r3, r4, r5, pc}
 80024b6:	bf00      	nop
 80024b8:	40002800 	.word	0x40002800

080024bc <TIMER_IF_BkUp_Read_Seconds>:
{
 80024bc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80024be:	2100      	movs	r1, #0
 80024c0:	4801      	ldr	r0, [pc, #4]	; (80024c8 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80024c2:	f004 fbfb 	bl	8006cbc <HAL_RTCEx_BKUPRead>
}
 80024c6:	bd08      	pop	{r3, pc}
 80024c8:	2000032c 	.word	0x2000032c

080024cc <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80024cc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80024ce:	2101      	movs	r1, #1
 80024d0:	4801      	ldr	r0, [pc, #4]	; (80024d8 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80024d2:	f004 fbf3 	bl	8006cbc <HAL_RTCEx_BKUPRead>
}
 80024d6:	bd08      	pop	{r3, pc}
 80024d8:	2000032c 	.word	0x2000032c

080024dc <TIMER_IF_DelayMs>:
{
 80024dc:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80024de:	f7ff ff2d 	bl	800233c <TIMER_IF_Convert_ms2Tick>
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <TIMER_IF_DelayMs+0x3c>)
 80024e4:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80024e6:	e001      	b.n	80024ec <TIMER_IF_DelayMs+0x10>
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <TIMER_IF_DelayMs+0x3c>)
 80024ea:	6899      	ldr	r1, [r3, #8]
 80024ec:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <TIMER_IF_DelayMs+0x3c>)
 80024ee:	6892      	ldr	r2, [r2, #8]
 80024f0:	428a      	cmp	r2, r1
 80024f2:	d1f9      	bne.n	80024e8 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 80024f4:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80024f6:	e00a      	b.n	800250e <TIMER_IF_DelayMs+0x32>
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <TIMER_IF_DelayMs+0x3c>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <TIMER_IF_DelayMs+0x3c>)
 80024fe:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002500:	429a      	cmp	r2, r3
 8002502:	d1f9      	bne.n	80024f8 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8002504:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002506:	1a5b      	subs	r3, r3, r1
 8002508:	4283      	cmp	r3, r0
 800250a:	d203      	bcs.n	8002514 <TIMER_IF_DelayMs+0x38>
    __NOP();
 800250c:	bf00      	nop
 800250e:	4b02      	ldr	r3, [pc, #8]	; (8002518 <TIMER_IF_DelayMs+0x3c>)
 8002510:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002512:	e7f3      	b.n	80024fc <TIMER_IF_DelayMs+0x20>
}
 8002514:	bd08      	pop	{r3, pc}
 8002516:	bf00      	nop
 8002518:	40002800 	.word	0x40002800

0800251c <HAL_RTC_AlarmAEventCallback>:
{
 800251c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800251e:	f013 fa83 	bl	8015a28 <UTIL_TIMER_IRQ_Handler>
}
 8002522:	bd08      	pop	{r3, pc}

08002524 <HAL_RTCEx_SSRUEventCallback>:
{
 8002524:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002526:	f7ff ffa5 	bl	8002474 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800252a:	3001      	adds	r0, #1
 800252c:	f7ff ff38 	bl	80023a0 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002530:	bd08      	pop	{r3, pc}
	...

08002534 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002534:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002536:	4817      	ldr	r0, [pc, #92]	; (8002594 <MX_USART2_UART_Init+0x60>)
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <MX_USART2_UART_Init+0x64>)
 800253a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800253c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002540:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002542:	2300      	movs	r3, #0
 8002544:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002546:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002548:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800254a:	220c      	movs	r2, #12
 800254c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002552:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002554:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002556:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002558:	f006 fa17 	bl	800898a <HAL_UART_Init>
 800255c:	b970      	cbnz	r0, 800257c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255e:	2100      	movs	r1, #0
 8002560:	480c      	ldr	r0, [pc, #48]	; (8002594 <MX_USART2_UART_Init+0x60>)
 8002562:	f006 fbd4 	bl	8008d0e <HAL_UARTEx_SetTxFifoThreshold>
 8002566:	b960      	cbnz	r0, 8002582 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002568:	2100      	movs	r1, #0
 800256a:	480a      	ldr	r0, [pc, #40]	; (8002594 <MX_USART2_UART_Init+0x60>)
 800256c:	f006 fbf4 	bl	8008d58 <HAL_UARTEx_SetRxFifoThreshold>
 8002570:	b950      	cbnz	r0, 8002588 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002572:	4808      	ldr	r0, [pc, #32]	; (8002594 <MX_USART2_UART_Init+0x60>)
 8002574:	f006 fba7 	bl	8008cc6 <HAL_UARTEx_EnableFifoMode>
 8002578:	b948      	cbnz	r0, 800258e <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800257a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800257c:	f7ff fb32 	bl	8001be4 <Error_Handler>
 8002580:	e7ed      	b.n	800255e <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002582:	f7ff fb2f 	bl	8001be4 <Error_Handler>
 8002586:	e7ef      	b.n	8002568 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002588:	f7ff fb2c 	bl	8001be4 <Error_Handler>
 800258c:	e7f1      	b.n	8002572 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 800258e:	f7ff fb29 	bl	8001be4 <Error_Handler>
}
 8002592:	e7f2      	b.n	800257a <MX_USART2_UART_Init+0x46>
 8002594:	20000428 	.word	0x20000428
 8002598:	40004400 	.word	0x40004400

0800259c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800259c:	b530      	push	{r4, r5, lr}
 800259e:	b097      	sub	sp, #92	; 0x5c
 80025a0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a2:	2100      	movs	r1, #0
 80025a4:	9111      	str	r1, [sp, #68]	; 0x44
 80025a6:	9112      	str	r1, [sp, #72]	; 0x48
 80025a8:	9113      	str	r1, [sp, #76]	; 0x4c
 80025aa:	9114      	str	r1, [sp, #80]	; 0x50
 80025ac:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025ae:	2238      	movs	r2, #56	; 0x38
 80025b0:	a803      	add	r0, sp, #12
 80025b2:	f013 fc11 	bl	8015dd8 <memset>
  if(uartHandle->Instance==USART2)
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <HAL_UART_MspInit+0xd4>)
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025be:	b017      	add	sp, #92	; 0x5c
 80025c0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025c2:	2302      	movs	r3, #2
 80025c4:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <HAL_UART_MspInit+0xd8>)
 80025c8:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025ca:	a803      	add	r0, sp, #12
 80025cc:	f003 ffe2 	bl	8006594 <HAL_RCCEx_PeriphCLKConfig>
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d144      	bne.n	800265e <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025de:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025e2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80025e6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80025e8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80025ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80025fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80025fc:	230c      	movs	r3, #12
 80025fe:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2500      	movs	r5, #0
 8002606:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260c:	2307      	movs	r3, #7
 800260e:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002610:	a911      	add	r1, sp, #68	; 0x44
 8002612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002616:	f002 f861 	bl	80046dc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800261a:	4817      	ldr	r0, [pc, #92]	; (8002678 <HAL_UART_MspInit+0xdc>)
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <HAL_UART_MspInit+0xe0>)
 800261e:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002620:	2314      	movs	r3, #20
 8002622:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002624:	2310      	movs	r3, #16
 8002626:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002628:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800262a:	2380      	movs	r3, #128	; 0x80
 800262c:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262e:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002630:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002632:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002634:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002636:	f001 fcb7 	bl	8003fa8 <HAL_DMA_Init>
 800263a:	b998      	cbnz	r0, 8002664 <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800263c:	2110      	movs	r1, #16
 800263e:	480e      	ldr	r0, [pc, #56]	; (8002678 <HAL_UART_MspInit+0xdc>)
 8002640:	f001 feb7 	bl	80043b2 <HAL_DMA_ConfigChannelAttributes>
 8002644:	b988      	cbnz	r0, 800266a <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_UART_MspInit+0xdc>)
 8002648:	67a3      	str	r3, [r4, #120]	; 0x78
 800264a:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 800264c:	2200      	movs	r2, #0
 800264e:	2107      	movs	r1, #7
 8002650:	2025      	movs	r0, #37	; 0x25
 8002652:	f001 fbe1 	bl	8003e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002656:	2025      	movs	r0, #37	; 0x25
 8002658:	f001 fc16 	bl	8003e88 <HAL_NVIC_EnableIRQ>
}
 800265c:	e7af      	b.n	80025be <HAL_UART_MspInit+0x22>
      Error_Handler();
 800265e:	f7ff fac1 	bl	8001be4 <Error_Handler>
 8002662:	e7b7      	b.n	80025d4 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8002664:	f7ff fabe 	bl	8001be4 <Error_Handler>
 8002668:	e7e8      	b.n	800263c <HAL_UART_MspInit+0xa0>
      Error_Handler();
 800266a:	f7ff fabb 	bl	8001be4 <Error_Handler>
 800266e:	e7ea      	b.n	8002646 <HAL_UART_MspInit+0xaa>
 8002670:	40004400 	.word	0x40004400
 8002674:	000c0004 	.word	0x000c0004
 8002678:	200003c8 	.word	0x200003c8
 800267c:	40020058 	.word	0x40020058

08002680 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002680:	6802      	ldr	r2, [r0, #0]
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_UART_MspDeInit+0x34>)
 8002684:	429a      	cmp	r2, r3
 8002686:	d000      	beq.n	800268a <HAL_UART_MspDeInit+0xa>
 8002688:	4770      	bx	lr
{
 800268a:	b510      	push	{r4, lr}
 800268c:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800268e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002692:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002694:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 800269a:	210c      	movs	r1, #12
 800269c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026a0:	f002 f8ee 	bl	8004880 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80026a4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80026a6:	f001 fcf1 	bl	800408c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80026aa:	2025      	movs	r0, #37	; 0x25
 80026ac:	f001 fbfa 	bl	8003ea4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80026b0:	bd10      	pop	{r4, pc}
 80026b2:	bf00      	nop
 80026b4:	40004400 	.word	0x40004400

080026b8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80026b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <vcom_Init+0x20>)
 80026bc:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80026be:	f7fe fe11 	bl	80012e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80026c2:	f7ff ff37 	bl	8002534 <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <vcom_Init+0x24>)
 80026c8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80026cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80026d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80026d4:	2000      	movs	r0, #0
 80026d6:	bd08      	pop	{r3, pc}
 80026d8:	200004bc 	.word	0x200004bc
 80026dc:	58000800 	.word	0x58000800

080026e0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80026e0:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026ec:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80026ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026f0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80026f6:	4804      	ldr	r0, [pc, #16]	; (8002708 <vcom_DeInit+0x28>)
 80026f8:	f7ff ffc2 	bl	8002680 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80026fc:	200f      	movs	r0, #15
 80026fe:	f001 fbd1 	bl	8003ea4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002702:	2000      	movs	r0, #0
 8002704:	bd08      	pop	{r3, pc}
 8002706:	bf00      	nop
 8002708:	20000428 	.word	0x20000428

0800270c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800270c:	b508      	push	{r3, lr}
 800270e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002710:	4601      	mov	r1, r0
 8002712:	4802      	ldr	r0, [pc, #8]	; (800271c <vcom_Trace_DMA+0x10>)
 8002714:	f005 fa06 	bl	8007b24 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002718:	2000      	movs	r0, #0
 800271a:	bd08      	pop	{r3, pc}
 800271c:	20000428 	.word	0x20000428

08002720 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002720:	b510      	push	{r4, lr}
 8002722:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <vcom_ReceiveInit+0x50>)
 8002726:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002728:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800272c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800272e:	ab02      	add	r3, sp, #8
 8002730:	e913 0006 	ldmdb	r3, {r1, r2}
 8002734:	480f      	ldr	r0, [pc, #60]	; (8002774 <vcom_ReceiveInit+0x54>)
 8002736:	f006 fa6e 	bl	8008c16 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <vcom_ReceiveInit+0x54>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002744:	d1f9      	bne.n	800273a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 800274c:	d0fb      	beq.n	8002746 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002754:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002756:	4c07      	ldr	r4, [pc, #28]	; (8002774 <vcom_ReceiveInit+0x54>)
 8002758:	4620      	mov	r0, r4
 800275a:	f006 fa9d 	bl	8008c98 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800275e:	2201      	movs	r2, #1
 8002760:	4905      	ldr	r1, [pc, #20]	; (8002778 <vcom_ReceiveInit+0x58>)
 8002762:	4620      	mov	r0, r4
 8002764:	f006 f9e8 	bl	8008b38 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002768:	2000      	movs	r0, #0
 800276a:	b002      	add	sp, #8
 800276c:	bd10      	pop	{r4, pc}
 800276e:	bf00      	nop
 8002770:	200004b8 	.word	0x200004b8
 8002774:	20000428 	.word	0x20000428
 8002778:	200004c0 	.word	0x200004c0

0800277c <vcom_Resume>:

void vcom_Resume(void)
{
 800277c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800277e:	4807      	ldr	r0, [pc, #28]	; (800279c <vcom_Resume+0x20>)
 8002780:	f006 f903 	bl	800898a <HAL_UART_Init>
 8002784:	b920      	cbnz	r0, 8002790 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002786:	4806      	ldr	r0, [pc, #24]	; (80027a0 <vcom_Resume+0x24>)
 8002788:	f001 fc0e 	bl	8003fa8 <HAL_DMA_Init>
 800278c:	b918      	cbnz	r0, 8002796 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800278e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002790:	f7ff fa28 	bl	8001be4 <Error_Handler>
 8002794:	e7f7      	b.n	8002786 <vcom_Resume+0xa>
    Error_Handler();
 8002796:	f7ff fa25 	bl	8001be4 <Error_Handler>
}
 800279a:	e7f8      	b.n	800278e <vcom_Resume+0x12>
 800279c:	20000428 	.word	0x20000428
 80027a0:	200003c8 	.word	0x200003c8

080027a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80027a6:	6802      	ldr	r2, [r0, #0]
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HAL_UART_TxCpltCallback+0x18>)
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d000      	beq.n	80027b0 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80027ae:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_UART_TxCpltCallback+0x1c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2000      	movs	r0, #0
 80027b6:	4798      	blx	r3
}
 80027b8:	e7f9      	b.n	80027ae <HAL_UART_TxCpltCallback+0xa>
 80027ba:	bf00      	nop
 80027bc:	40004400 	.word	0x40004400
 80027c0:	200004bc 	.word	0x200004bc

080027c4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80027c4:	6802      	ldr	r2, [r0, #0]
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_UART_RxCpltCallback+0x2c>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d000      	beq.n	80027ce <HAL_UART_RxCpltCallback+0xa>
 80027cc:	4770      	bx	lr
{
 80027ce:	b510      	push	{r4, lr}
 80027d0:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_UART_RxCpltCallback+0x30>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b12b      	cbz	r3, 80027e4 <HAL_UART_RxCpltCallback+0x20>
 80027d8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80027dc:	b912      	cbnz	r2, 80027e4 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 80027de:	2101      	movs	r1, #1
 80027e0:	4805      	ldr	r0, [pc, #20]	; (80027f8 <HAL_UART_RxCpltCallback+0x34>)
 80027e2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80027e4:	2201      	movs	r2, #1
 80027e6:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_UART_RxCpltCallback+0x34>)
 80027e8:	4620      	mov	r0, r4
 80027ea:	f006 f9a5 	bl	8008b38 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80027ee:	bd10      	pop	{r4, pc}
 80027f0:	40004400 	.word	0x40004400
 80027f4:	200004b8 	.word	0x200004b8
 80027f8:	200004c0 	.word	0x200004c0

080027fc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80027fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80027fe:	f7ff fb8b 	bl	8001f18 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002802:	f000 fbc7 	bl	8002f94 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002806:	bd08      	pop	{r3, pc}

08002808 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8002808:	4b01      	ldr	r3, [pc, #4]	; (8002810 <OnTxFrameCtrlChanged+0x8>)
 800280a:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000058 	.word	0x20000058

08002814 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8002814:	4b01      	ldr	r3, [pc, #4]	; (800281c <OnPingSlotPeriodicityChanged+0x8>)
 8002816:	7318      	strb	r0, [r3, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000058 	.word	0x20000058

08002820 <OnBeaconStatusChange>:
  if (params != NULL)
 8002820:	2800      	cmp	r0, #0
 8002822:	d03f      	beq.n	80028a4 <OnBeaconStatusChange+0x84>
{
 8002824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002828:	b08c      	sub	sp, #48	; 0x30
 800282a:	4603      	mov	r3, r0
    switch (params->State)
 800282c:	7842      	ldrb	r2, [r0, #1]
 800282e:	2a02      	cmp	r2, #2
 8002830:	d00a      	beq.n	8002848 <OnBeaconStatusChange+0x28>
 8002832:	2a03      	cmp	r2, #3
 8002834:	d02f      	beq.n	8002896 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <OnBeaconStatusChange+0x88>)
 8002838:	2200      	movs	r2, #0
 800283a:	4611      	mov	r1, r2
 800283c:	2002      	movs	r0, #2
 800283e:	f012 fdc1 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002842:	b00c      	add	sp, #48	; 0x30
 8002844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 8002848:	7c02      	ldrb	r2, [r0, #16]
 800284a:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 800284e:	f990 0014 	ldrsb.w	r0, [r0, #20]
 8002852:	7d9c      	ldrb	r4, [r3, #22]
 8002854:	7ddd      	ldrb	r5, [r3, #23]
 8002856:	7e1e      	ldrb	r6, [r3, #24]
 8002858:	7e5f      	ldrb	r7, [r3, #25]
 800285a:	f893 c01a 	ldrb.w	ip, [r3, #26]
 800285e:	f893 e01b 	ldrb.w	lr, [r3, #27]
 8002862:	f893 801c 	ldrb.w	r8, [r3, #28]
 8002866:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800286a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800286e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002872:	9708      	str	r7, [sp, #32]
 8002874:	9607      	str	r6, [sp, #28]
 8002876:	9506      	str	r5, [sp, #24]
 8002878:	9405      	str	r4, [sp, #20]
 800287a:	685c      	ldr	r4, [r3, #4]
 800287c:	9404      	str	r4, [sp, #16]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	9303      	str	r3, [sp, #12]
 8002882:	9002      	str	r0, [sp, #8]
 8002884:	9101      	str	r1, [sp, #4]
 8002886:	9200      	str	r2, [sp, #0]
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <OnBeaconStatusChange+0x8c>)
 800288a:	2200      	movs	r2, #0
 800288c:	4611      	mov	r1, r2
 800288e:	2002      	movs	r0, #2
 8002890:	f012 fd98 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002894:	e7d5      	b.n	8002842 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <OnBeaconStatusChange+0x90>)
 8002898:	2200      	movs	r2, #0
 800289a:	4611      	mov	r1, r2
 800289c:	2002      	movs	r0, #2
 800289e:	f012 fd91 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 80028a2:	e7ce      	b.n	8002842 <OnBeaconStatusChange+0x22>
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	08016070 	.word	0x08016070
 80028ac:	08016088 	.word	0x08016088
 80028b0:	080160fc 	.word	0x080160fc

080028b4 <OnClassChange>:
{
 80028b4:	b500      	push	{lr}
 80028b6:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <OnClassChange+0x1c>)
 80028ba:	5c1b      	ldrb	r3, [r3, r0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <OnClassChange+0x20>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	4611      	mov	r1, r2
 80028c4:	2002      	movs	r0, #2
 80028c6:	f012 fd7d 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 80028ca:	b003      	add	sp, #12
 80028cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80028d0:	08016138 	.word	0x08016138
 80028d4:	0801611c 	.word	0x0801611c

080028d8 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 80028d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 80028da:	2801      	cmp	r0, #1
 80028dc:	d006      	beq.n	80028ec <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <OnNvmDataChange+0x24>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	4611      	mov	r1, r2
 80028e4:	2002      	movs	r0, #2
 80028e6:	f012 fd6d 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 80028ea:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 80028ec:	4b04      	ldr	r3, [pc, #16]	; (8002900 <OnNvmDataChange+0x28>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	4611      	mov	r1, r2
 80028f2:	2002      	movs	r0, #2
 80028f4:	f012 fd66 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 80028f8:	e7f7      	b.n	80028ea <OnNvmDataChange+0x12>
 80028fa:	bf00      	nop
 80028fc:	08016150 	.word	0x08016150
 8002900:	0801613c 	.word	0x0801613c

08002904 <OnTxTimerEvent>:
{
 8002904:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LoraSendProcessId, 1);
 8002906:	2101      	movs	r1, #1
 8002908:	4b03      	ldr	r3, [pc, #12]	; (8002918 <OnTxTimerEvent+0x14>)
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	f006 faf8 	bl	8008f00 <osThreadFlagsSet>
  UTIL_TIMER_Start(&TxTimer);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <OnTxTimerEvent+0x18>)
 8002912:	f013 f829 	bl	8015968 <UTIL_TIMER_Start>
}
 8002916:	bd08      	pop	{r3, pc}
 8002918:	20000604 	.word	0x20000604
 800291c:	20000628 	.word	0x20000628

08002920 <OnMacProcessNotify>:
{
 8002920:	b508      	push	{r3, lr}
  osThreadFlagsSet(Thd_LmHandlerProcessId, 1);
 8002922:	2101      	movs	r1, #1
 8002924:	4b02      	ldr	r3, [pc, #8]	; (8002930 <OnMacProcessNotify+0x10>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	f006 faea 	bl	8008f00 <osThreadFlagsSet>
}
 800292c:	bd08      	pop	{r3, pc}
 800292e:	bf00      	nop
 8002930:	20000600 	.word	0x20000600

08002934 <OnSystemReset>:
{
 8002934:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002936:	f009 f885 	bl	800ba44 <LmHandlerHalt>
 800293a:	b100      	cbz	r0, 800293e <OnSystemReset+0xa>
}
 800293c:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800293e:	f008 fd03 	bl	800b348 <LmHandlerJoinStatus>
 8002942:	2801      	cmp	r0, #1
 8002944:	d1fa      	bne.n	800293c <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002946:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800294a:	4905      	ldr	r1, [pc, #20]	; (8002960 <OnSystemReset+0x2c>)
 800294c:	68ca      	ldr	r2, [r1, #12]
 800294e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002952:	4b04      	ldr	r3, [pc, #16]	; (8002964 <OnSystemReset+0x30>)
 8002954:	4313      	orrs	r3, r2
 8002956:	60cb      	str	r3, [r1, #12]
 8002958:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800295c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800295e:	e7fd      	b.n	800295c <OnSystemReset+0x28>
 8002960:	e000ed00 	.word	0xe000ed00
 8002964:	05fa0004 	.word	0x05fa0004

08002968 <OnTxPeriodicityChanged>:
{
 8002968:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <OnTxPeriodicityChanged+0x28>)
 800296c:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800296e:	b910      	cbnz	r0, 8002976 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8002970:	f242 7210 	movw	r2, #10000	; 0x2710
 8002974:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8002976:	4c07      	ldr	r4, [pc, #28]	; (8002994 <OnTxPeriodicityChanged+0x2c>)
 8002978:	4620      	mov	r0, r4
 800297a:	f012 ff9b 	bl	80158b4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <OnTxPeriodicityChanged+0x28>)
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	4620      	mov	r0, r4
 8002984:	f013 f836 	bl	80159f4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002988:	4620      	mov	r0, r4
 800298a:	f012 ffed 	bl	8015968 <UTIL_TIMER_Start>
}
 800298e:	bd10      	pop	{r4, pc}
 8002990:	2000006c 	.word	0x2000006c
 8002994:	20000628 	.word	0x20000628

08002998 <OnTxData>:
  if ((params != NULL))
 8002998:	2800      	cmp	r0, #0
 800299a:	d042      	beq.n	8002a22 <OnTxData+0x8a>
{
 800299c:	b510      	push	{r4, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 80029a2:	7803      	ldrb	r3, [r0, #0]
 80029a4:	b90b      	cbnz	r3, 80029aa <OnTxData+0x12>
}
 80029a6:	b004      	add	sp, #16
 80029a8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80029aa:	2201      	movs	r2, #1
 80029ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029b0:	481c      	ldr	r0, [pc, #112]	; (8002a24 <OnTxData+0x8c>)
 80029b2:	f001 ffe3 	bl	800497c <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80029b6:	481c      	ldr	r0, [pc, #112]	; (8002a28 <OnTxData+0x90>)
 80029b8:	f012 ffd6 	bl	8015968 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <OnTxData+0x94>)
 80029be:	2200      	movs	r2, #0
 80029c0:	4611      	mov	r1, r2
 80029c2:	2002      	movs	r0, #2
 80029c4:	f012 fcfe 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 80029c8:	7c23      	ldrb	r3, [r4, #16]
 80029ca:	f994 200a 	ldrsb.w	r2, [r4, #10]
 80029ce:	f994 1018 	ldrsb.w	r1, [r4, #24]
 80029d2:	9103      	str	r1, [sp, #12]
 80029d4:	9202      	str	r2, [sp, #8]
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	68e3      	ldr	r3, [r4, #12]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <OnTxData+0x98>)
 80029de:	2200      	movs	r2, #0
 80029e0:	4611      	mov	r1, r2
 80029e2:	2003      	movs	r0, #3
 80029e4:	f012 fcee 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <OnTxData+0x9c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	4611      	mov	r1, r2
 80029ee:	2003      	movs	r0, #3
 80029f0:	f012 fce8 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 80029f4:	7a23      	ldrb	r3, [r4, #8]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10c      	bne.n	8002a14 <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 80029fa:	7a63      	ldrb	r3, [r4, #9]
 80029fc:	b143      	cbz	r3, 8002a10 <OnTxData+0x78>
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <OnTxData+0xa0>)
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <OnTxData+0xa4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	4611      	mov	r1, r2
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f012 fcdb 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8002a0e:	e7ca      	b.n	80029a6 <OnTxData+0xe>
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <OnTxData+0xa8>)
 8002a12:	e7f5      	b.n	8002a00 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <OnTxData+0xac>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	4611      	mov	r1, r2
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f012 fcd2 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002a20:	e7c1      	b.n	80029a6 <OnTxData+0xe>
 8002a22:	4770      	bx	lr
 8002a24:	48000400 	.word	0x48000400
 8002a28:	20000610 	.word	0x20000610
 8002a2c:	08016170 	.word	0x08016170
 8002a30:	080161a4 	.word	0x080161a4
 8002a34:	080161d8 	.word	0x080161d8
 8002a38:	0801616c 	.word	0x0801616c
 8002a3c:	080161e8 	.word	0x080161e8
 8002a40:	08016164 	.word	0x08016164
 8002a44:	080161fc 	.word	0x080161fc

08002a48 <OnJoinRequest>:
  if (joinParams != NULL)
 8002a48:	b358      	cbz	r0, 8002aa2 <OnJoinRequest+0x5a>
{
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8002a4e:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8002a52:	b9fb      	cbnz	r3, 8002a94 <OnJoinRequest+0x4c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002a54:	4813      	ldr	r0, [pc, #76]	; (8002aa4 <OnJoinRequest+0x5c>)
 8002a56:	f012 ff2d 	bl	80158b4 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a60:	4811      	ldr	r0, [pc, #68]	; (8002aa8 <OnJoinRequest+0x60>)
 8002a62:	f001 ff8b 	bl	800497c <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <OnJoinRequest+0x64>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f012 fca9 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8002a72:	79a3      	ldrb	r3, [r4, #6]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d006      	beq.n	8002a86 <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <OnJoinRequest+0x68>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f012 fca0 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8002a84:	e00c      	b.n	8002aa0 <OnJoinRequest+0x58>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <OnJoinRequest+0x6c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f012 fc99 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8002a92:	e005      	b.n	8002aa0 <OnJoinRequest+0x58>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <OnJoinRequest+0x70>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	4611      	mov	r1, r2
 8002a9a:	2002      	movs	r0, #2
 8002a9c:	f012 fc92 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002aa0:	bd10      	pop	{r4, pc}
 8002aa2:	4770      	bx	lr
 8002aa4:	200005b8 	.word	0x200005b8
 8002aa8:	48000400 	.word	0x48000400
 8002aac:	0801620c 	.word	0x0801620c
 8002ab0:	08016244 	.word	0x08016244
 8002ab4:	08016224 	.word	0x08016224
 8002ab8:	08016264 	.word	0x08016264

08002abc <OnStopJoinTimerEvent>:
{
 8002abc:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8002abe:	4b0f      	ldr	r3, [pc, #60]	; (8002afc <OnStopJoinTimerEvent+0x40>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d013      	beq.n	8002aee <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002ac6:	4c0e      	ldr	r4, [pc, #56]	; (8002b00 <OnStopJoinTimerEvent+0x44>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f001 ff54 	bl	800497c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ada:	4620      	mov	r0, r4
 8002adc:	f001 ff4e 	bl	800497c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f001 ff48 	bl	800497c <HAL_GPIO_WritePin>
}
 8002aec:	bd10      	pop	{r4, pc}
    osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 8002aee:	2101      	movs	r1, #1
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <OnStopJoinTimerEvent+0x48>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	f006 fa04 	bl	8008f00 <osThreadFlagsSet>
 8002af8:	e7e5      	b.n	8002ac6 <OnStopJoinTimerEvent+0xa>
 8002afa:	bf00      	nop
 8002afc:	20000000 	.word	0x20000000
 8002b00:	48000400 	.word	0x48000400
 8002b04:	20000608 	.word	0x20000608

08002b08 <OnRxTimerLedEvent>:
{
 8002b08:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b10:	4801      	ldr	r0, [pc, #4]	; (8002b18 <OnRxTimerLedEvent+0x10>)
 8002b12:	f001 ff33 	bl	800497c <HAL_GPIO_WritePin>
}
 8002b16:	bd08      	pop	{r3, pc}
 8002b18:	48000400 	.word	0x48000400

08002b1c <OnTxTimerLedEvent>:
{
 8002b1c:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b24:	4801      	ldr	r0, [pc, #4]	; (8002b2c <OnTxTimerLedEvent+0x10>)
 8002b26:	f001 ff29 	bl	800497c <HAL_GPIO_WritePin>
}
 8002b2a:	bd08      	pop	{r3, pc}
 8002b2c:	48000400 	.word	0x48000400

08002b30 <OnRxData>:
  if (params != NULL)
 8002b30:	2900      	cmp	r1, #0
 8002b32:	d06e      	beq.n	8002c12 <OnRxData+0xe2>
{
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	4604      	mov	r4, r0
 8002b3a:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b42:	4834      	ldr	r0, [pc, #208]	; (8002c14 <OnRxData+0xe4>)
 8002b44:	f001 ff1a 	bl	800497c <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8002b48:	4833      	ldr	r0, [pc, #204]	; (8002c18 <OnRxData+0xe8>)
 8002b4a:	f012 ff0d 	bl	8015968 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 8002b4e:	782e      	ldrb	r6, [r5, #0]
 8002b50:	2e00      	cmp	r6, #0
 8002b52:	d042      	beq.n	8002bda <OnRxData+0xaa>
      if (appData != NULL)
 8002b54:	2c00      	cmp	r4, #0
 8002b56:	d03f      	beq.n	8002bd8 <OnRxData+0xa8>
        RxPort = appData->Port;
 8002b58:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 8002b5a:	6863      	ldr	r3, [r4, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d03c      	beq.n	8002bda <OnRxData+0xaa>
          switch (appData->Port)
 8002b60:	2e02      	cmp	r6, #2
 8002b62:	d016      	beq.n	8002b92 <OnRxData+0x62>
 8002b64:	2e03      	cmp	r6, #3
 8002b66:	d138      	bne.n	8002bda <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002b68:	7862      	ldrb	r2, [r4, #1]
 8002b6a:	2a01      	cmp	r2, #1
 8002b6c:	d135      	bne.n	8002bda <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d006      	beq.n	8002b82 <OnRxData+0x52>
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d008      	beq.n	8002b8a <OnRxData+0x5a>
 8002b78:	bb7b      	cbnz	r3, 8002bda <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f008 fc98 	bl	800b4b0 <LmHandlerRequestClass>
                    break;
 8002b80:	e02b      	b.n	8002bda <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f008 fc94 	bl	800b4b0 <LmHandlerRequestClass>
                    break;
 8002b88:	e027      	b.n	8002bda <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	f008 fc90 	bl	800b4b0 <LmHandlerRequestClass>
                    break;
 8002b90:	e023      	b.n	8002bda <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002b92:	7862      	ldrb	r2, [r4, #1]
 8002b94:	2a01      	cmp	r2, #1
 8002b96:	d120      	bne.n	8002bda <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <OnRxData+0xec>)
 8002ba0:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002ba2:	b963      	cbnz	r3, 8002bbe <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002ba4:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <OnRxData+0xf0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4611      	mov	r1, r2
 8002baa:	2003      	movs	r0, #3
 8002bac:	f012 fc0a 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bb6:	4817      	ldr	r0, [pc, #92]	; (8002c14 <OnRxData+0xe4>)
 8002bb8:	f001 fee0 	bl	800497c <HAL_GPIO_WritePin>
 8002bbc:	e00d      	b.n	8002bda <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <OnRxData+0xf4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f012 fbfd 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bd0:	4810      	ldr	r0, [pc, #64]	; (8002c14 <OnRxData+0xe4>)
 8002bd2:	f001 fed3 	bl	800497c <HAL_GPIO_WritePin>
 8002bd6:	e000      	b.n	8002bda <OnRxData+0xaa>
  uint8_t RxPort = 0;
 8002bd8:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8002bda:	7c2b      	ldrb	r3, [r5, #16]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d901      	bls.n	8002be4 <OnRxData+0xb4>
}
 8002be0:	b006      	add	sp, #24
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002be4:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8002be8:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002bec:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002bf0:	9005      	str	r0, [sp, #20]
 8002bf2:	9104      	str	r1, [sp, #16]
 8002bf4:	490c      	ldr	r1, [pc, #48]	; (8002c28 <OnRxData+0xf8>)
 8002bf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	9202      	str	r2, [sp, #8]
 8002bfe:	9601      	str	r6, [sp, #4]
 8002c00:	68eb      	ldr	r3, [r5, #12]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <OnRxData+0xfc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	4611      	mov	r1, r2
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f012 fbda 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002c10:	e7e6      	b.n	8002be0 <OnRxData+0xb0>
 8002c12:	4770      	bx	lr
 8002c14:	48000400 	.word	0x48000400
 8002c18:	200005d0 	.word	0x200005d0
 8002c1c:	200005b6 	.word	0x200005b6
 8002c20:	08016280 	.word	0x08016280
 8002c24:	0801628c 	.word	0x0801628c
 8002c28:	08016568 	.word	0x08016568
 8002c2c:	08016298 	.word	0x08016298

08002c30 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002c30:	b538      	push	{r3, r4, r5, lr}
 8002c32:	4605      	mov	r5, r0
 8002c34:	460c      	mov	r4, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8002c36:	f001 fbf9 	bl	800442c <HAL_FLASH_Unlock>
 8002c3a:	b100      	cbz	r0, 8002c3e <OnStoreContextRequest+0xe>
    HAL_FLASH_Lock();
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8002c3c:	bd38      	pop	{r3, r4, r5, pc}
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <OnStoreContextRequest+0x4c>)
 8002c40:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <OnStoreContextRequest+0x50>)
 8002c46:	ea03 2080 	and.w	r0, r3, r0, lsl #10
 8002c4a:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8002c4e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	f5c3 337c 	rsb	r3, r3, #258048	; 0x3f000
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	0ad8      	lsrs	r0, r3, #11
 8002c60:	f7fe fbee 	bl	8001440 <FLASH_IF_EraseByPages>
 8002c64:	b110      	cbz	r0, 8002c6c <OnStoreContextRequest+0x3c>
    HAL_FLASH_Lock();
 8002c66:	f001 fbf9 	bl	800445c <HAL_FLASH_Lock>
}
 8002c6a:	e7e7      	b.n	8002c3c <OnStoreContextRequest+0xc>
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	4622      	mov	r2, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	4804      	ldr	r0, [pc, #16]	; (8002c84 <OnStoreContextRequest+0x54>)
 8002c74:	f7fe fc00 	bl	8001478 <FLASH_IF_Write>
 8002c78:	e7f5      	b.n	8002c66 <OnStoreContextRequest+0x36>
 8002c7a:	bf00      	nop
 8002c7c:	1fff7000 	.word	0x1fff7000
 8002c80:	03fffc00 	.word	0x03fffc00
 8002c84:	0803f000 	.word	0x0803f000

08002c88 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8002c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8002c8a:	b28a      	uxth	r2, r1
 8002c8c:	4901      	ldr	r1, [pc, #4]	; (8002c94 <OnRestoreContextRequest+0xc>)
 8002c8e:	f012 fcaf 	bl	80155f0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002c92:	bd08      	pop	{r3, pc}
 8002c94:	0803f000 	.word	0x0803f000

08002c98 <StopJoin>:
{
 8002c98:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8002c9a:	4c1e      	ldr	r4, [pc, #120]	; (8002d14 <StopJoin+0x7c>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f001 fe6a 	bl	800497c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f001 fe64 	bl	800497c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f001 fe5e 	bl	800497c <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002cc0:	4815      	ldr	r0, [pc, #84]	; (8002d18 <StopJoin+0x80>)
 8002cc2:	f012 fdf7 	bl	80158b4 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002cc6:	f008 feb5 	bl	800ba34 <LmHandlerStop>
 8002cca:	b148      	cbz	r0, 8002ce0 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <StopJoin+0x84>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	2002      	movs	r0, #2
 8002cd4:	f012 fb76 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002cd8:	4811      	ldr	r0, [pc, #68]	; (8002d20 <StopJoin+0x88>)
 8002cda:	f012 fe45 	bl	8015968 <UTIL_TIMER_Start>
}
 8002cde:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002ce0:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <StopJoin+0x8c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	2002      	movs	r0, #2
 8002ce8:	f012 fb6c 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8002cec:	4c0e      	ldr	r4, [pc, #56]	; (8002d28 <StopJoin+0x90>)
 8002cee:	2501      	movs	r5, #1
 8002cf0:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <StopJoin+0x94>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	2002      	movs	r0, #2
 8002cfa:	f012 fb63 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 8002cfe:	480c      	ldr	r0, [pc, #48]	; (8002d30 <StopJoin+0x98>)
 8002d00:	f008 fd14 	bl	800b72c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002d04:	4629      	mov	r1, r5
 8002d06:	7820      	ldrb	r0, [r4, #0]
 8002d08:	f008 faa6 	bl	800b258 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <StopJoin+0x80>)
 8002d0e:	f012 fe2b 	bl	8015968 <UTIL_TIMER_Start>
 8002d12:	e7e1      	b.n	8002cd8 <StopJoin+0x40>
 8002d14:	48000400 	.word	0x48000400
 8002d18:	20000628 	.word	0x20000628
 8002d1c:	080162e0 	.word	0x080162e0
 8002d20:	200005e8 	.word	0x200005e8
 8002d24:	08016300 	.word	0x08016300
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	08016314 	.word	0x08016314
 8002d30:	20000058 	.word	0x20000058

08002d34 <Thd_LoraStopJoin>:
{
 8002d34:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002d36:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f006 f927 	bl	8008f90 <osThreadFlagsWait>
    StopJoin();  /*what you want to do*/
 8002d42:	f7ff ffa9 	bl	8002c98 <StopJoin>
  for (;;)
 8002d46:	e7f6      	b.n	8002d36 <Thd_LoraStopJoin+0x2>

08002d48 <StoreContext>:
{
 8002d48:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8002d4a:	f008 fe83 	bl	800ba54 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8002d4e:	f110 0f08 	cmn.w	r0, #8
 8002d52:	d003      	beq.n	8002d5c <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 8002d54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002d58:	d007      	beq.n	8002d6a <StoreContext+0x22>
}
 8002d5a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <StoreContext+0x30>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	4611      	mov	r1, r2
 8002d62:	2002      	movs	r0, #2
 8002d64:	f012 fb2e 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8002d68:	e7f7      	b.n	8002d5a <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <StoreContext+0x34>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4611      	mov	r1, r2
 8002d70:	2002      	movs	r0, #2
 8002d72:	f012 fb27 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002d76:	e7f0      	b.n	8002d5a <StoreContext+0x12>
 8002d78:	08016334 	.word	0x08016334
 8002d7c:	0801634c 	.word	0x0801634c

08002d80 <Thd_LoraStoreContext>:
{
 8002d80:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002d82:	f04f 32ff 	mov.w	r2, #4294967295
 8002d86:	2100      	movs	r1, #0
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f006 f901 	bl	8008f90 <osThreadFlagsWait>
    StoreContext();  /*what you want to do*/
 8002d8e:	f7ff ffdb 	bl	8002d48 <StoreContext>
  for (;;)
 8002d92:	e7f6      	b.n	8002d82 <Thd_LoraStoreContext+0x2>

08002d94 <SendTxData>:
{
 8002d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d96:	b089      	sub	sp, #36	; 0x24
  uint8_t batteryLevel = GetBatteryLevel();
 8002d98:	f7ff f8ea 	bl	8001f70 <GetBatteryLevel>
 8002d9c:	4605      	mov	r5, r0
  uint16_t voltaje_CP =  GetLectura_CP();//es el mío
 8002d9e:	f7ff f945 	bl	800202c <GetLectura_CP>
 8002da2:	4604      	mov	r4, r0
  EnvSensors_Read(&sensor_data);
 8002da4:	a802      	add	r0, sp, #8
 8002da6:	f7ff f9c1 	bl	800212c <EnvSensors_Read>
  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8002daa:	9500      	str	r5, [sp, #0]
 8002dac:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <SendTxData+0x188>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	2100      	movs	r1, #0
 8002db2:	2002      	movs	r0, #2
 8002db4:	f012 fb06 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002db8:	9803      	ldr	r0, [sp, #12]
 8002dba:	f7fd feb3 	bl	8000b24 <__aeabi_f2iz>
 8002dbe:	b200      	sxth	r0, r0
 8002dc0:	9000      	str	r0, [sp, #0]
 8002dc2:	4b57      	ldr	r3, [pc, #348]	; (8002f20 <SendTxData+0x18c>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2002      	movs	r0, #2
 8002dca:	f012 fafb 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "CP: %d\r\n", voltaje_CP);
 8002dce:	9400      	str	r4, [sp, #0]
 8002dd0:	4b54      	ldr	r3, [pc, #336]	; (8002f24 <SendTxData+0x190>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2002      	movs	r0, #2
 8002dd8:	f012 faf4 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002ddc:	4c52      	ldr	r4, [pc, #328]	; (8002f28 <SendTxData+0x194>)
 8002dde:	2302      	movs	r3, #2
 8002de0:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8002de2:	4952      	ldr	r1, [pc, #328]	; (8002f2c <SendTxData+0x198>)
 8002de4:	9804      	ldr	r0, [sp, #16]
 8002de6:	f7fd fd4d 	bl	8000884 <__aeabi_fmul>
 8002dea:	f7fd fec1 	bl	8000b70 <__aeabi_f2uiz>
 8002dee:	b285      	uxth	r5, r0
  temperature = (int16_t)(sensor_data.temperature);
 8002df0:	9803      	ldr	r0, [sp, #12]
 8002df2:	f7fd fe97 	bl	8000b24 <__aeabi_f2iz>
 8002df6:	b206      	sxth	r6, r0
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8002df8:	494d      	ldr	r1, [pc, #308]	; (8002f30 <SendTxData+0x19c>)
 8002dfa:	9802      	ldr	r0, [sp, #8]
 8002dfc:	f7fd fd42 	bl	8000884 <__aeabi_fmul>
 8002e00:	494a      	ldr	r1, [pc, #296]	; (8002f2c <SendTxData+0x198>)
 8002e02:	f7fd fdf3 	bl	80009ec <__aeabi_fdiv>
 8002e06:	f7fd feb3 	bl	8000b70 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8002e0a:	6863      	ldr	r3, [r4, #4]
 8002e0c:	4a49      	ldr	r2, [pc, #292]	; (8002f34 <SendTxData+0x1a0>)
 8002e0e:	7812      	ldrb	r2, [r2, #0]
 8002e10:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8002e12:	6863      	ldr	r3, [r4, #4]
 8002e14:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8002e18:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002e1a:	6863      	ldr	r3, [r4, #4]
 8002e1c:	7098      	strb	r0, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002e1e:	6863      	ldr	r3, [r4, #4]
 8002e20:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002e22:	6863      	ldr	r3, [r4, #4]
 8002e24:	0a2a      	lsrs	r2, r5, #8
 8002e26:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002e28:	6863      	ldr	r3, [r4, #4]
 8002e2a:	715d      	strb	r5, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002e2c:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <SendTxData+0x1a4>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d002      	beq.n	8002e3a <SendTxData+0xa6>
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d000      	beq.n	8002e3a <SendTxData+0xa6>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002e38:	bb63      	cbnz	r3, 8002e94 <SendTxData+0x100>
    AppData.Buffer[i++] = 0;
 8002e3a:	4a3b      	ldr	r2, [pc, #236]	; (8002f28 <SendTxData+0x194>)
 8002e3c:	6851      	ldr	r1, [r2, #4]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	718b      	strb	r3, [r1, #6]
    AppData.Buffer[i++] = 0;
 8002e42:	6851      	ldr	r1, [r2, #4]
 8002e44:	71cb      	strb	r3, [r1, #7]
    AppData.Buffer[i++] = 0;
 8002e46:	6852      	ldr	r2, [r2, #4]
 8002e48:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8002e4a:	7253      	strb	r3, [r2, #9]
 8002e4c:	220a      	movs	r2, #10
  AppData.BufferSize = i;
 8002e4e:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <SendTxData+0x194>)
 8002e50:	705a      	strb	r2, [r3, #1]
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002e52:	4b3a      	ldr	r3, [pc, #232]	; (8002f3c <SendTxData+0x1a8>)
 8002e54:	7a5b      	ldrb	r3, [r3, #9]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d138      	bne.n	8002ecc <SendTxData+0x138>
  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <SendTxData+0x1a4>)
 8002e5e:	78d9      	ldrb	r1, [r3, #3]
 8002e60:	4831      	ldr	r0, [pc, #196]	; (8002f28 <SendTxData+0x194>)
 8002e62:	f008 fa83 	bl	800b36c <LmHandlerSend>
  if (LORAMAC_HANDLER_SUCCESS == status)
 8002e66:	2800      	cmp	r0, #0
 8002e68:	d03e      	beq.n	8002ee8 <SendTxData+0x154>
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002e6a:	f110 0f06 	cmn.w	r0, #6
 8002e6e:	d043      	beq.n	8002ef8 <SendTxData+0x164>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002e70:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002e72:	4c33      	ldr	r4, [pc, #204]	; (8002f40 <SendTxData+0x1ac>)
 8002e74:	4620      	mov	r0, r4
 8002e76:	f012 fd1d 	bl	80158b4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002e7a:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <SendTxData+0x1b0>)
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	42a9      	cmp	r1, r5
 8002e80:	bf38      	it	cc
 8002e82:	4629      	movcc	r1, r5
 8002e84:	4620      	mov	r0, r4
 8002e86:	f012 fdb5 	bl	80159f4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f012 fd6c 	bl	8015968 <UTIL_TIMER_Start>
}
 8002e90:	b009      	add	sp, #36	; 0x24
 8002e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    latitude = sensor_data.latitude;
 8002e94:	9d05      	ldr	r5, [sp, #20]
    longitude = sensor_data.longitude;
 8002e96:	9c06      	ldr	r4, [sp, #24]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002e98:	4e23      	ldr	r6, [pc, #140]	; (8002f28 <SendTxData+0x194>)
 8002e9a:	6877      	ldr	r7, [r6, #4]
 8002e9c:	f7ff f868 	bl	8001f70 <GetBatteryLevel>
 8002ea0:	71b8      	strb	r0, [r7, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002ea2:	6873      	ldr	r3, [r6, #4]
 8002ea4:	f3c5 4207 	ubfx	r2, r5, #16, #8
 8002ea8:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002eaa:	6873      	ldr	r3, [r6, #4]
 8002eac:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8002eb0:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002eb2:	725d      	strb	r5, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002eb4:	f3c4 4207 	ubfx	r2, r4, #16, #8
 8002eb8:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002eba:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8002ebe:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002ec0:	731c      	strb	r4, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	735a      	strb	r2, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002ec6:	739a      	strb	r2, [r3, #14]
 8002ec8:	220f      	movs	r2, #15
 8002eca:	e7c0      	b.n	8002e4e <SendTxData+0xba>
  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002ecc:	f008 fa3c 	bl	800b348 <LmHandlerJoinStatus>
 8002ed0:	2801      	cmp	r0, #1
 8002ed2:	d1c2      	bne.n	8002e5a <SendTxData+0xc6>
    UTIL_TIMER_Stop(&JoinLedTimer);
 8002ed4:	4819      	ldr	r0, [pc, #100]	; (8002f3c <SendTxData+0x1a8>)
 8002ed6:	f012 fced 	bl	80158b4 <UTIL_TIMER_Stop>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002eda:	2200      	movs	r2, #0
 8002edc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ee0:	4819      	ldr	r0, [pc, #100]	; (8002f48 <SendTxData+0x1b4>)
 8002ee2:	f001 fd4b 	bl	800497c <HAL_GPIO_WritePin>
 8002ee6:	e7b8      	b.n	8002e5a <SendTxData+0xc6>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <SendTxData+0x1b8>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	2100      	movs	r1, #0
 8002eee:	4610      	mov	r0, r2
 8002ef0:	f012 fa68 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	e7bc      	b.n	8002e72 <SendTxData+0xde>
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002ef8:	f008 fa20 	bl	800b33c <LmHandlerGetDutyCycleWaitTime>
    if (nextTxIn > 0)
 8002efc:	4605      	mov	r5, r0
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d0b7      	beq.n	8002e72 <SendTxData+0xde>
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <SendTxData+0x1bc>)
 8002f04:	fba3 2300 	umull	r2, r3, r3, r0
 8002f08:	099b      	lsrs	r3, r3, #6
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <SendTxData+0x1c0>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2100      	movs	r1, #0
 8002f12:	4610      	mov	r0, r2
 8002f14:	f012 fa56 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8002f18:	e7ab      	b.n	8002e72 <SendTxData+0xde>
 8002f1a:	bf00      	nop
 8002f1c:	08016364 	.word	0x08016364
 8002f20:	08016370 	.word	0x08016370
 8002f24:	0801637c 	.word	0x0801637c
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	41200000 	.word	0x41200000
 8002f30:	42c80000 	.word	0x42c80000
 8002f34:	200005b6 	.word	0x200005b6
 8002f38:	20000058 	.word	0x20000058
 8002f3c:	200005b8 	.word	0x200005b8
 8002f40:	20000628 	.word	0x20000628
 8002f44:	2000006c 	.word	0x2000006c
 8002f48:	48000400 	.word	0x48000400
 8002f4c:	08016388 	.word	0x08016388
 8002f50:	10624dd3 	.word	0x10624dd3
 8002f54:	08016398 	.word	0x08016398

08002f58 <Thd_LoraSendProcess>:
{
 8002f58:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5e:	2100      	movs	r1, #0
 8002f60:	2001      	movs	r0, #1
 8002f62:	f006 f815 	bl	8008f90 <osThreadFlagsWait>
    SendTxData();  /*what you want to do*/
 8002f66:	f7ff ff15 	bl	8002d94 <SendTxData>
  for (;;)
 8002f6a:	e7f6      	b.n	8002f5a <Thd_LoraSendProcess+0x2>

08002f6c <Thd_LmHandlerProcess>:
{
 8002f6c:	b508      	push	{r3, lr}
    osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8002f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f72:	2100      	movs	r1, #0
 8002f74:	2001      	movs	r0, #1
 8002f76:	f006 f80b 	bl	8008f90 <osThreadFlagsWait>
    LmHandlerProcess(); /*what you want to do*/
 8002f7a:	f008 fa75 	bl	800b468 <LmHandlerProcess>
  for (;;)
 8002f7e:	e7f6      	b.n	8002f6e <Thd_LmHandlerProcess+0x2>

08002f80 <OnJoinTimerLedEvent>:
{
 8002f80:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002f82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f86:	4802      	ldr	r0, [pc, #8]	; (8002f90 <OnJoinTimerLedEvent+0x10>)
 8002f88:	f001 fcfd 	bl	8004986 <HAL_GPIO_TogglePin>
}
 8002f8c:	bd08      	pop	{r3, pc}
 8002f8e:	bf00      	nop
 8002f90:	48000400 	.word	0x48000400

08002f94 <LoRaWAN_Init>:
{
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	b086      	sub	sp, #24
  uint32_t feature_version = 0UL;
 8002f98:	2400      	movs	r4, #0
 8002f9a:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002f9c:	9402      	str	r4, [sp, #8]
 8002f9e:	2502      	movs	r5, #2
 8002fa0:	9501      	str	r5, [sp, #4]
 8002fa2:	2601      	movs	r6, #1
 8002fa4:	9600      	str	r6, [sp, #0]
 8002fa6:	4b57      	ldr	r3, [pc, #348]	; (8003104 <LoRaWAN_Init+0x170>)
 8002fa8:	4622      	mov	r2, r4
 8002faa:	4621      	mov	r1, r4
 8002fac:	4628      	mov	r0, r5
 8002fae:	f012 fa09 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002fb2:	9402      	str	r4, [sp, #8]
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	9500      	str	r5, [sp, #0]
 8002fba:	4b53      	ldr	r3, [pc, #332]	; (8003108 <LoRaWAN_Init+0x174>)
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	4628      	mov	r0, r5
 8002fc2:	f012 f9ff 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002fc6:	9402      	str	r4, [sp, #8]
 8002fc8:	9501      	str	r5, [sp, #4]
 8002fca:	9600      	str	r6, [sp, #0]
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	; (800310c <LoRaWAN_Init+0x178>)
 8002fce:	4622      	mov	r2, r4
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f012 f9f6 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002fd8:	a905      	add	r1, sp, #20
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f008 fd14 	bl	800ba08 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002fe0:	9b05      	ldr	r3, [sp, #20]
 8002fe2:	0e1a      	lsrs	r2, r3, #24
 8002fe4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002fe8:	9102      	str	r1, [sp, #8]
 8002fea:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <LoRaWAN_Init+0x17c>)
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f012 f9e3 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002ffe:	a905      	add	r1, sp, #20
 8003000:	4630      	mov	r0, r6
 8003002:	f008 fd01 	bl	800ba08 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8003006:	9b05      	ldr	r3, [sp, #20]
 8003008:	0e1a      	lsrs	r2, r3, #24
 800300a:	b2d9      	uxtb	r1, r3
 800300c:	9103      	str	r1, [sp, #12]
 800300e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003012:	9102      	str	r1, [sp, #8]
 8003014:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	9200      	str	r2, [sp, #0]
 800301c:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <LoRaWAN_Init+0x180>)
 800301e:	4622      	mov	r2, r4
 8003020:	4621      	mov	r1, r4
 8003022:	4628      	mov	r0, r5
 8003024:	f012 f9ce 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003028:	9400      	str	r4, [sp, #0]
 800302a:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <LoRaWAN_Init+0x184>)
 800302c:	4622      	mov	r2, r4
 800302e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003032:	483a      	ldr	r0, [pc, #232]	; (800311c <LoRaWAN_Init+0x188>)
 8003034:	f012 fbe0 	bl	80157f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8003038:	9400      	str	r4, [sp, #0]
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <LoRaWAN_Init+0x18c>)
 800303c:	4622      	mov	r2, r4
 800303e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003042:	4838      	ldr	r0, [pc, #224]	; (8003124 <LoRaWAN_Init+0x190>)
 8003044:	f012 fbd8 	bl	80157f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8003048:	9400      	str	r4, [sp, #0]
 800304a:	4b37      	ldr	r3, [pc, #220]	; (8003128 <LoRaWAN_Init+0x194>)
 800304c:	4632      	mov	r2, r6
 800304e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003052:	4836      	ldr	r0, [pc, #216]	; (800312c <LoRaWAN_Init+0x198>)
 8003054:	f012 fbd0 	bl	80157f8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8003058:	9400      	str	r4, [sp, #0]
 800305a:	4b35      	ldr	r3, [pc, #212]	; (8003130 <LoRaWAN_Init+0x19c>)
 800305c:	4622      	mov	r2, r4
 800305e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003062:	4834      	ldr	r0, [pc, #208]	; (8003134 <LoRaWAN_Init+0x1a0>)
 8003064:	f012 fbc8 	bl	80157f8 <UTIL_TIMER_Create>
  Thd_LmHandlerProcessId = osThreadNew(Thd_LmHandlerProcess, NULL, &Thd_LmHandlerProcess_attr);
 8003068:	4a33      	ldr	r2, [pc, #204]	; (8003138 <LoRaWAN_Init+0x1a4>)
 800306a:	4621      	mov	r1, r4
 800306c:	4833      	ldr	r0, [pc, #204]	; (800313c <LoRaWAN_Init+0x1a8>)
 800306e:	f005 fedb 	bl	8008e28 <osThreadNew>
 8003072:	4b33      	ldr	r3, [pc, #204]	; (8003140 <LoRaWAN_Init+0x1ac>)
 8003074:	6018      	str	r0, [r3, #0]
  if (Thd_LmHandlerProcessId == NULL)
 8003076:	2800      	cmp	r0, #0
 8003078:	d038      	beq.n	80030ec <LoRaWAN_Init+0x158>
  Thd_LoraSendProcessId = osThreadNew(Thd_LoraSendProcess, NULL, &Thd_LoraSendProcess_attr);
 800307a:	4a32      	ldr	r2, [pc, #200]	; (8003144 <LoRaWAN_Init+0x1b0>)
 800307c:	2100      	movs	r1, #0
 800307e:	4832      	ldr	r0, [pc, #200]	; (8003148 <LoRaWAN_Init+0x1b4>)
 8003080:	f005 fed2 	bl	8008e28 <osThreadNew>
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <LoRaWAN_Init+0x1b8>)
 8003086:	6018      	str	r0, [r3, #0]
  if (Thd_LoraSendProcessId == NULL)
 8003088:	2800      	cmp	r0, #0
 800308a:	d032      	beq.n	80030f2 <LoRaWAN_Init+0x15e>
  Thd_LoraStoreContextId = osThreadNew(Thd_LoraStoreContext, NULL, &Thd_LoraStoreContext_attr);
 800308c:	4a30      	ldr	r2, [pc, #192]	; (8003150 <LoRaWAN_Init+0x1bc>)
 800308e:	2100      	movs	r1, #0
 8003090:	4830      	ldr	r0, [pc, #192]	; (8003154 <LoRaWAN_Init+0x1c0>)
 8003092:	f005 fec9 	bl	8008e28 <osThreadNew>
 8003096:	4b30      	ldr	r3, [pc, #192]	; (8003158 <LoRaWAN_Init+0x1c4>)
 8003098:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStoreContextId == NULL)
 800309a:	b368      	cbz	r0, 80030f8 <LoRaWAN_Init+0x164>
  Thd_LoraStopJoinId = osThreadNew(Thd_LoraStopJoin, NULL, &Thd_LoraStopJoin_attr);
 800309c:	4a2f      	ldr	r2, [pc, #188]	; (800315c <LoRaWAN_Init+0x1c8>)
 800309e:	2100      	movs	r1, #0
 80030a0:	482f      	ldr	r0, [pc, #188]	; (8003160 <LoRaWAN_Init+0x1cc>)
 80030a2:	f005 fec1 	bl	8008e28 <osThreadNew>
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <LoRaWAN_Init+0x1d0>)
 80030a8:	6018      	str	r0, [r3, #0]
  if (Thd_LoraStopJoinId == NULL)
 80030aa:	b340      	cbz	r0, 80030fe <LoRaWAN_Init+0x16a>
  LoraInfo_Init();
 80030ac:	f000 f87e 	bl	80031ac <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80030b0:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 80030b4:	482c      	ldr	r0, [pc, #176]	; (8003168 <LoRaWAN_Init+0x1d4>)
 80030b6:	f008 fc6d 	bl	800b994 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80030ba:	482c      	ldr	r0, [pc, #176]	; (800316c <LoRaWAN_Init+0x1d8>)
 80030bc:	f008 fb36 	bl	800b72c <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80030c0:	481a      	ldr	r0, [pc, #104]	; (800312c <LoRaWAN_Init+0x198>)
 80030c2:	f012 fc51 	bl	8015968 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 80030c6:	2100      	movs	r1, #0
 80030c8:	4b29      	ldr	r3, [pc, #164]	; (8003170 <LoRaWAN_Init+0x1dc>)
 80030ca:	7818      	ldrb	r0, [r3, #0]
 80030cc:	f008 f8c4 	bl	800b258 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80030d0:	4c28      	ldr	r4, [pc, #160]	; (8003174 <LoRaWAN_Init+0x1e0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	9200      	str	r2, [sp, #0]
 80030d6:	4b28      	ldr	r3, [pc, #160]	; (8003178 <LoRaWAN_Init+0x1e4>)
 80030d8:	4928      	ldr	r1, [pc, #160]	; (800317c <LoRaWAN_Init+0x1e8>)
 80030da:	6809      	ldr	r1, [r1, #0]
 80030dc:	4620      	mov	r0, r4
 80030de:	f012 fb8b 	bl	80157f8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80030e2:	4620      	mov	r0, r4
 80030e4:	f012 fc40 	bl	8015968 <UTIL_TIMER_Start>
}
 80030e8:	b006      	add	sp, #24
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80030ec:	f7fe fd7a 	bl	8001be4 <Error_Handler>
 80030f0:	e7c3      	b.n	800307a <LoRaWAN_Init+0xe6>
    Error_Handler();
 80030f2:	f7fe fd77 	bl	8001be4 <Error_Handler>
 80030f6:	e7c9      	b.n	800308c <LoRaWAN_Init+0xf8>
    Error_Handler();
 80030f8:	f7fe fd74 	bl	8001be4 <Error_Handler>
 80030fc:	e7ce      	b.n	800309c <LoRaWAN_Init+0x108>
    Error_Handler();
 80030fe:	f7fe fd71 	bl	8001be4 <Error_Handler>
 8003102:	e7d3      	b.n	80030ac <LoRaWAN_Init+0x118>
 8003104:	080163b8 	.word	0x080163b8
 8003108:	080163dc 	.word	0x080163dc
 800310c:	08016400 	.word	0x08016400
 8003110:	08016424 	.word	0x08016424
 8003114:	08016448 	.word	0x08016448
 8003118:	08002b1d 	.word	0x08002b1d
 800311c:	20000610 	.word	0x20000610
 8003120:	08002b09 	.word	0x08002b09
 8003124:	200005d0 	.word	0x200005d0
 8003128:	08002f81 	.word	0x08002f81
 800312c:	200005b8 	.word	0x200005b8
 8003130:	08002abd 	.word	0x08002abd
 8003134:	200005e8 	.word	0x200005e8
 8003138:	080164d8 	.word	0x080164d8
 800313c:	08002f6d 	.word	0x08002f6d
 8003140:	20000600 	.word	0x20000600
 8003144:	080164fc 	.word	0x080164fc
 8003148:	08002f59 	.word	0x08002f59
 800314c:	20000604 	.word	0x20000604
 8003150:	08016544 	.word	0x08016544
 8003154:	08002d81 	.word	0x08002d81
 8003158:	2000060c 	.word	0x2000060c
 800315c:	08016520 	.word	0x08016520
 8003160:	08002d35 	.word	0x08002d35
 8003164:	20000608 	.word	0x20000608
 8003168:	2000000c 	.word	0x2000000c
 800316c:	20000058 	.word	0x20000058
 8003170:	20000000 	.word	0x20000000
 8003174:	20000628 	.word	0x20000628
 8003178:	08002905 	.word	0x08002905
 800317c:	2000006c 	.word	0x2000006c

08003180 <HAL_GPIO_EXTI_Callback>:
{
 8003180:	b508      	push	{r3, lr}
  switch (GPIO_Pin)
 8003182:	2802      	cmp	r0, #2
 8003184:	d002      	beq.n	800318c <HAL_GPIO_EXTI_Callback+0xc>
 8003186:	2840      	cmp	r0, #64	; 0x40
 8003188:	d006      	beq.n	8003198 <HAL_GPIO_EXTI_Callback+0x18>
}
 800318a:	bd08      	pop	{r3, pc}
      osThreadFlagsSet(Thd_LoraStopJoinId, 1);
 800318c:	2101      	movs	r1, #1
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_GPIO_EXTI_Callback+0x24>)
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	f005 feb5 	bl	8008f00 <osThreadFlagsSet>
      break;
 8003196:	e7f8      	b.n	800318a <HAL_GPIO_EXTI_Callback+0xa>
      osThreadFlagsSet(Thd_LoraStoreContextId, 1);
 8003198:	2101      	movs	r1, #1
 800319a:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_GPIO_EXTI_Callback+0x28>)
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	f005 feaf 	bl	8008f00 <osThreadFlagsSet>
}
 80031a2:	e7f2      	b.n	800318a <HAL_GPIO_EXTI_Callback+0xa>
 80031a4:	20000608 	.word	0x20000608
 80031a8:	2000060c 	.word	0x2000060c

080031ac <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <LoraInfo_Init+0x1c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80031b2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80031b4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80031b6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 80031b8:	2220      	movs	r2, #32
 80031ba:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 80031bc:	f44f 7290 	mov.w	r2, #288	; 0x120
 80031c0:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80031c2:	2203      	movs	r2, #3
 80031c4:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80031c6:	4770      	bx	lr
 80031c8:	20000640 	.word	0x20000640

080031cc <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80031cc:	4800      	ldr	r0, [pc, #0]	; (80031d0 <LoraInfo_GetPtr+0x4>)
 80031ce:	4770      	bx	lr
 80031d0:	20000640 	.word	0x20000640

080031d4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80031d4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80031d6:	f000 f83f 	bl	8003258 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80031da:	bd08      	pop	{r3, pc}

080031dc <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80031dc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80031de:	f000 f87d 	bl	80032dc <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80031e2:	bd08      	pop	{r3, pc}

080031e4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80031e4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80031e6:	f000 f8c7 	bl	8003378 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80031ea:	bd08      	pop	{r3, pc}

080031ec <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80031ec:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80031ee:	f000 f8c5 	bl	800337c <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80031f2:	bd08      	pop	{r3, pc}

080031f4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80031f4:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80031f6:	f000 f8c3 	bl	8003380 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80031fa:	bd08      	pop	{r3, pc}

080031fc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80031fc:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80031fe:	f000 f8c1 	bl	8003384 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8003202:	bd08      	pop	{r3, pc}

08003204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003206:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003208:	f000 f8c1 	bl	800338e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800320c:	480c      	ldr	r0, [pc, #48]	; (8003240 <LoopForever+0x6>)
  ldr r1, =_edata
 800320e:	490d      	ldr	r1, [pc, #52]	; (8003244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003210:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <LoopForever+0xe>)
  movs r3, #0
 8003212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003214:	e002      	b.n	800321c <LoopCopyDataInit>

08003216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800321a:	3304      	adds	r3, #4

0800321c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800321c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800321e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003220:	d3f9      	bcc.n	8003216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003224:	4c0a      	ldr	r4, [pc, #40]	; (8003250 <LoopForever+0x16>)
  movs r3, #0
 8003226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003228:	e001      	b.n	800322e <LoopFillZerobss>

0800322a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800322a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800322c:	3204      	adds	r2, #4

0800322e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800322e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003230:	d3fb      	bcc.n	800322a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003232:	f012 fd9f 	bl	8015d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003236:	f7fe fd21 	bl	8001c7c <main>

0800323a <LoopForever>:

LoopForever:
    b LoopForever
 800323a:	e7fe      	b.n	800323a <LoopForever>
  ldr   r0, =_estack
 800323c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003244:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8003248:	08016f70 	.word	0x08016f70
  ldr r2, =_sbss
 800324c:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8003250:	20004548 	.word	0x20004548

08003254 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003254:	e7fe      	b.n	8003254 <ADC_IRQHandler>
	...

08003258 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800325c:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800325e:	2400      	movs	r4, #0
 8003260:	9401      	str	r4, [sp, #4]
 8003262:	9402      	str	r4, [sp, #8]
 8003264:	9403      	str	r4, [sp, #12]
 8003266:	9404      	str	r4, [sp, #16]
 8003268:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003270:	f042 0204 	orr.w	r2, r2, #4
 8003274:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800327e:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003280:	2710      	movs	r7, #16
 8003282:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003284:	2301      	movs	r3, #1
 8003286:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800328c:	4d12      	ldr	r5, [pc, #72]	; (80032d8 <BSP_RADIO_Init+0x80>)
 800328e:	a901      	add	r1, sp, #4
 8003290:	4628      	mov	r0, r5
 8003292:	f001 fa23 	bl	80046dc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003296:	f04f 0820 	mov.w	r8, #32
 800329a:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800329e:	a901      	add	r1, sp, #4
 80032a0:	4628      	mov	r0, r5
 80032a2:	f001 fa1b 	bl	80046dc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80032a6:	2608      	movs	r6, #8
 80032a8:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80032aa:	a901      	add	r1, sp, #4
 80032ac:	4628      	mov	r0, r5
 80032ae:	f001 fa15 	bl	80046dc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80032b2:	4622      	mov	r2, r4
 80032b4:	4641      	mov	r1, r8
 80032b6:	4628      	mov	r0, r5
 80032b8:	f001 fb60 	bl	800497c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80032bc:	4622      	mov	r2, r4
 80032be:	4639      	mov	r1, r7
 80032c0:	4628      	mov	r0, r5
 80032c2:	f001 fb5b 	bl	800497c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80032c6:	4622      	mov	r2, r4
 80032c8:	4631      	mov	r1, r6
 80032ca:	4628      	mov	r0, r5
 80032cc:	f001 fb56 	bl	800497c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80032d0:	4620      	mov	r0, r4
 80032d2:	b006      	add	sp, #24
 80032d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032d8:	48000800 	.word	0x48000800

080032dc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80032dc:	b510      	push	{r4, lr}
  switch (Config)
 80032de:	2803      	cmp	r0, #3
 80032e0:	d813      	bhi.n	800330a <BSP_RADIO_ConfigRFSwitch+0x2e>
 80032e2:	e8df f000 	tbb	[pc, r0]
 80032e6:	1402      	.short	0x1402
 80032e8:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80032ea:	4c22      	ldr	r4, [pc, #136]	; (8003374 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	2108      	movs	r1, #8
 80032f0:	4620      	mov	r0, r4
 80032f2:	f001 fb43 	bl	800497c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2110      	movs	r1, #16
 80032fa:	4620      	mov	r0, r4
 80032fc:	f001 fb3e 	bl	800497c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003300:	2200      	movs	r2, #0
 8003302:	2120      	movs	r1, #32
 8003304:	4620      	mov	r0, r4
 8003306:	f001 fb39 	bl	800497c <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800330a:	2000      	movs	r0, #0
 800330c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800330e:	4c19      	ldr	r4, [pc, #100]	; (8003374 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003310:	2201      	movs	r2, #1
 8003312:	2108      	movs	r1, #8
 8003314:	4620      	mov	r0, r4
 8003316:	f001 fb31 	bl	800497c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800331a:	2201      	movs	r2, #1
 800331c:	2110      	movs	r1, #16
 800331e:	4620      	mov	r0, r4
 8003320:	f001 fb2c 	bl	800497c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003324:	2200      	movs	r2, #0
 8003326:	2120      	movs	r1, #32
 8003328:	4620      	mov	r0, r4
 800332a:	f001 fb27 	bl	800497c <HAL_GPIO_WritePin>
      break;
 800332e:	e7ec      	b.n	800330a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003330:	4c10      	ldr	r4, [pc, #64]	; (8003374 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003332:	2201      	movs	r2, #1
 8003334:	2108      	movs	r1, #8
 8003336:	4620      	mov	r0, r4
 8003338:	f001 fb20 	bl	800497c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800333c:	2201      	movs	r2, #1
 800333e:	2110      	movs	r1, #16
 8003340:	4620      	mov	r0, r4
 8003342:	f001 fb1b 	bl	800497c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003346:	2201      	movs	r2, #1
 8003348:	2120      	movs	r1, #32
 800334a:	4620      	mov	r0, r4
 800334c:	f001 fb16 	bl	800497c <HAL_GPIO_WritePin>
      break;
 8003350:	e7db      	b.n	800330a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003352:	4c08      	ldr	r4, [pc, #32]	; (8003374 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003354:	2201      	movs	r2, #1
 8003356:	2108      	movs	r1, #8
 8003358:	4620      	mov	r0, r4
 800335a:	f001 fb0f 	bl	800497c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800335e:	2200      	movs	r2, #0
 8003360:	2110      	movs	r1, #16
 8003362:	4620      	mov	r0, r4
 8003364:	f001 fb0a 	bl	800497c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003368:	2201      	movs	r2, #1
 800336a:	2120      	movs	r1, #32
 800336c:	4620      	mov	r0, r4
 800336e:	f001 fb05 	bl	800497c <HAL_GPIO_WritePin>
      break;
 8003372:	e7ca      	b.n	800330a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003374:	48000800 	.word	0x48000800

08003378 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8003378:	2000      	movs	r0, #0
 800337a:	4770      	bx	lr

0800337c <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 800337c:	2001      	movs	r0, #1
 800337e:	4770      	bx	lr

08003380 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8003380:	2001      	movs	r0, #1
 8003382:	4770      	bx	lr

08003384 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003384:	b908      	cbnz	r0, 800338a <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003386:	200f      	movs	r0, #15
 8003388:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 800338a:	2016      	movs	r0, #22
  }

  return ret;
}
 800338c:	4770      	bx	lr

0800338e <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800338e:	4770      	bx	lr

08003390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003390:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003392:	2003      	movs	r0, #3
 8003394:	f000 fd2e 	bl	8003df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003398:	f002 fc5c 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_Init+0x28>)
 800339e:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033a0:	200f      	movs	r0, #15
 80033a2:	f7fe fe67 	bl	8002074 <HAL_InitTick>
 80033a6:	b110      	cbz	r0, 80033ae <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80033a8:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80033aa:	4620      	mov	r0, r4
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	4604      	mov	r4, r0
    HAL_MspInit();
 80033b0:	f7fe fd20 	bl	8001df4 <HAL_MspInit>
 80033b4:	e7f9      	b.n	80033aa <HAL_Init+0x1a>
 80033b6:	bf00      	nop
 80033b8:	20000070 	.word	0x20000070

080033bc <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80033bc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80033c0:	6913      	ldr	r3, [r2, #16]
 80033c2:	f023 0302 	bic.w	r3, r3, #2
 80033c6:	6113      	str	r3, [r2, #16]
}
 80033c8:	4770      	bx	lr

080033ca <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80033ca:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80033ce:	6913      	ldr	r3, [r2, #16]
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	6113      	str	r3, [r2, #16]
}
 80033d6:	4770      	bx	lr

080033d8 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 80033d8:	4b01      	ldr	r3, [pc, #4]	; (80033e0 <HAL_GetUIDw0+0x8>)
 80033da:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 80033de:	4770      	bx	lr
 80033e0:	1fff7000 	.word	0x1fff7000

080033e4 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 80033e4:	4b01      	ldr	r3, [pc, #4]	; (80033ec <HAL_GetUIDw1+0x8>)
 80033e6:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 80033ea:	4770      	bx	lr
 80033ec:	1fff7000 	.word	0x1fff7000

080033f0 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 80033f0:	4b01      	ldr	r3, [pc, #4]	; (80033f8 <HAL_GetUIDw2+0x8>)
 80033f2:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 80033f6:	4770      	bx	lr
 80033f8:	1fff7000 	.word	0x1fff7000

080033fc <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80033fc:	4a02      	ldr	r2, [pc, #8]	; (8003408 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80033fe:	6853      	ldr	r3, [r2, #4]
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 8003406:	4770      	bx	lr
 8003408:	e0042000 	.word	0xe0042000

0800340c <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800340c:	4a02      	ldr	r2, [pc, #8]	; (8003418 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 800340e:	6853      	ldr	r3, [r2, #4]
 8003410:	f023 0302 	bic.w	r3, r3, #2
 8003414:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 8003416:	4770      	bx	lr
 8003418:	e0042000 	.word	0xe0042000

0800341c <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800341c:	4a02      	ldr	r2, [pc, #8]	; (8003428 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 800341e:	6853      	ldr	r3, [r2, #4]
 8003420:	f023 0304 	bic.w	r3, r3, #4
 8003424:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 8003426:	4770      	bx	lr
 8003428:	e0042000 	.word	0xe0042000

0800342c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003430:	2300      	movs	r3, #0
 8003432:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003434:	2800      	cmp	r0, #0
 8003436:	f000 811b 	beq.w	8003670 <HAL_ADC_Init+0x244>
 800343a:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800343c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800343e:	b1bb      	cbz	r3, 8003470 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003440:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003442:	6893      	ldr	r3, [r2, #8]
 8003444:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003448:	d11f      	bne.n	800348a <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800344a:	6893      	ldr	r3, [r2, #8]
 800344c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003450:	f023 0317 	bic.w	r3, r3, #23
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800345a:	4b86      	ldr	r3, [pc, #536]	; (8003674 <HAL_ADC_Init+0x248>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	4a85      	ldr	r2, [pc, #532]	; (8003678 <HAL_ADC_Init+0x24c>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	3301      	adds	r3, #1
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800346e:	e009      	b.n	8003484 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8003470:	f7fd fd4c 	bl	8000f0c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003474:	2300      	movs	r3, #0
 8003476:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003478:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 800347c:	e7e0      	b.n	8003440 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800347e:	9b01      	ldr	r3, [sp, #4]
 8003480:	3b01      	subs	r3, #1
 8003482:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003484:	9b01      	ldr	r3, [sp, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f9      	bne.n	800347e <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800348a:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800348c:	6893      	ldr	r3, [r2, #8]
 800348e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003492:	f040 809c 	bne.w	80035ce <HAL_ADC_Init+0x1a2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003498:	f043 0310 	orr.w	r3, r3, #16
 800349c:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034a6:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a8:	6893      	ldr	r3, [r2, #8]
 80034aa:	f013 0304 	ands.w	r3, r3, #4
 80034ae:	d000      	beq.n	80034b2 <HAL_ADC_Init+0x86>
 80034b0:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80034b4:	f011 0f10 	tst.w	r1, #16
 80034b8:	f040 80d3 	bne.w	8003662 <HAL_ADC_Init+0x236>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 80d0 	bne.w	8003662 <HAL_ADC_Init+0x236>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034c2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80034c4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80034c8:	f041 0102 	orr.w	r1, r1, #2
 80034cc:	65a1      	str	r1, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ce:	6891      	ldr	r1, [r2, #8]
 80034d0:	f011 0f01 	tst.w	r1, #1
 80034d4:	d151      	bne.n	800357a <HAL_ADC_Init+0x14e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80034d6:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034d8:	7e25      	ldrb	r5, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80034da:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034de:	7e65      	ldrb	r5, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80034e0:	ea41 31c5 	orr.w	r1, r1, r5, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034e4:	7ea6      	ldrb	r6, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80034e6:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80034ec:	b10d      	cbz	r5, 80034f2 <HAL_ADC_Init+0xc6>
 80034ee:	f44f 5580 	mov.w	r5, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80034f2:	4329      	orrs	r1, r5
                   hadc->Init.DataAlign                                           |
 80034f4:	68e5      	ldr	r5, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80034f6:	4329      	orrs	r1, r5
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80034f8:	6925      	ldr	r5, [r4, #16]
 80034fa:	2d00      	cmp	r5, #0
 80034fc:	db69      	blt.n	80035d2 <HAL_ADC_Init+0x1a6>
 80034fe:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003502:	4329      	orrs	r1, r5
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003504:	f894 502c 	ldrb.w	r5, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003508:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800350c:	f894 5020 	ldrb.w	r5, [r4, #32]
 8003510:	2d01      	cmp	r5, #1
 8003512:	d061      	beq.n	80035d8 <HAL_ADC_Init+0x1ac>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003514:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003516:	b125      	cbz	r5, 8003522 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003518:	f405 75e0 	and.w	r5, r5, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800351c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800351e:	4335      	orrs	r5, r6
 8003520:	4329      	orrs	r1, r5
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003522:	68d5      	ldr	r5, [r2, #12]
 8003524:	f425 3cfe 	bic.w	ip, r5, #130048	; 0x1fc00
 8003528:	f42c 7cff 	bic.w	ip, ip, #510	; 0x1fe
 800352c:	ea4c 0101 	orr.w	r1, ip, r1
 8003530:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003532:	6862      	ldr	r2, [r4, #4]
 8003534:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003538:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800353a:	ea42 0501 	orr.w	r5, r2, r1
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800353e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003542:	2901      	cmp	r1, #1
 8003544:	d055      	beq.n	80035f2 <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003546:	6822      	ldr	r2, [r4, #0]
 8003548:	6916      	ldr	r6, [r2, #16]
 800354a:	494c      	ldr	r1, [pc, #304]	; (800367c <HAL_ADC_Init+0x250>)
 800354c:	4031      	ands	r1, r6
 800354e:	4329      	orrs	r1, r5
 8003550:	6111      	str	r1, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003552:	6862      	ldr	r2, [r4, #4]
 8003554:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 8003558:	d00f      	beq.n	800357a <HAL_ADC_Init+0x14e>
 800355a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800355e:	d00c      	beq.n	800357a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003564:	d009      	beq.n	800357a <HAL_ADC_Init+0x14e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003566:	4d46      	ldr	r5, [pc, #280]	; (8003680 <HAL_ADC_Init+0x254>)
 8003568:	f8d5 1708 	ldr.w	r1, [r5, #1800]	; 0x708
 800356c:	f421 1170 	bic.w	r1, r1, #3932160	; 0x3c0000
 8003570:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8003574:	430a      	orrs	r2, r1
 8003576:	f8c5 2708 	str.w	r2, [r5, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800357a:	6825      	ldr	r5, [r4, #0]
 800357c:	6b62      	ldr	r2, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 800357e:	6969      	ldr	r1, [r5, #20]
 8003580:	f021 0107 	bic.w	r1, r1, #7
 8003584:	430a      	orrs	r2, r1
 8003586:	616a      	str	r2, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003588:	6821      	ldr	r1, [r4, #0]
 800358a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800358c:	694a      	ldr	r2, [r1, #20]
 800358e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003592:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003596:	614a      	str	r2, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003598:	6922      	ldr	r2, [r4, #16]
 800359a:	2a00      	cmp	r2, #0
 800359c:	d133      	bne.n	8003606 <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80035a2:	f063 030f 	orn	r3, r3, #15
 80035a6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035a8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 80035b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d04c      	beq.n	8003650 <HAL_ADC_Init+0x224>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80035b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035b8:	f023 0312 	bic.w	r3, r3, #18
 80035bc:	f043 0310 	orr.w	r3, r3, #16
 80035c0:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80035ca:	2001      	movs	r0, #1
 80035cc:	e04e      	b.n	800366c <HAL_ADC_Init+0x240>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ce:	2000      	movs	r0, #0
 80035d0:	e76a      	b.n	80034a8 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80035d2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80035d6:	e794      	b.n	8003502 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80035d8:	b916      	cbnz	r6, 80035e0 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80035da:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80035de:	e799      	b.n	8003514 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80035e2:	f045 0520 	orr.w	r5, r5, #32
 80035e6:	65a5      	str	r5, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035e8:	6de5      	ldr	r5, [r4, #92]	; 0x5c
 80035ea:	f045 0501 	orr.w	r5, r5, #1
 80035ee:	65e5      	str	r5, [r4, #92]	; 0x5c
 80035f0:	e790      	b.n	8003514 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 80035f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035f4:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.RightBitShift |
 80035f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80035f8:	430a      	orrs	r2, r1
                     hadc->Init.Oversampling.TriggeredMode
 80035fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80035fc:	430a      	orrs	r2, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80035fe:	432a      	orrs	r2, r5
 8003600:	f042 0501 	orr.w	r5, r2, #1
 8003604:	e79f      	b.n	8003546 <HAL_ADC_Init+0x11a>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003606:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800360a:	d1cd      	bne.n	80035a8 <HAL_ADC_Init+0x17c>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800360c:	2b07      	cmp	r3, #7
 800360e:	d808      	bhi.n	8003622 <HAL_ADC_Init+0x1f6>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003610:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003612:	0099      	lsls	r1, r3, #2
 8003614:	40ca      	lsrs	r2, r1
 8003616:	f002 020f 	and.w	r2, r2, #15
 800361a:	2a0f      	cmp	r2, #15
 800361c:	d001      	beq.n	8003622 <HAL_ADC_Init+0x1f6>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800361e:	3301      	adds	r3, #1
 8003620:	e7f4      	b.n	800360c <HAL_ADC_Init+0x1e0>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003622:	2b01      	cmp	r3, #1
 8003624:	d00e      	beq.n	8003644 <HAL_ADC_Init+0x218>
        MODIFY_REG(hadc->Instance->CHSELR,
 8003626:	6821      	ldr	r1, [r4, #0]
 8003628:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800362a:	69e3      	ldr	r3, [r4, #28]
 800362c:	3b01      	subs	r3, #1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	f003 031c 	and.w	r3, r3, #28
 8003634:	f06f 020f 	mvn.w	r2, #15
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800363e:	4313      	orrs	r3, r2
 8003640:	628b      	str	r3, [r1, #40]	; 0x28
 8003642:	e7b1      	b.n	80035a8 <HAL_ADC_Init+0x17c>
        SET_BIT(hadc->Instance->CHSELR,
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003648:	f063 030f 	orn	r3, r3, #15
 800364c:	6293      	str	r3, [r2, #40]	; 0x28
 800364e:	e7ab      	b.n	80035a8 <HAL_ADC_Init+0x17c>
      ADC_CLEAR_ERRORCODE(hadc);
 8003650:	2300      	movs	r3, #0
 8003652:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003654:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003656:	f023 0303 	bic.w	r3, r3, #3
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003660:	e004      	b.n	800366c <HAL_ADC_Init+0x240>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003664:	f043 0310 	orr.w	r3, r3, #16
 8003668:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800366a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 800366c:	b002      	add	sp, #8
 800366e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003670:	2001      	movs	r0, #1
 8003672:	e7fb      	b.n	800366c <HAL_ADC_Init+0x240>
 8003674:	20000070 	.word	0x20000070
 8003678:	053e2d63 	.word	0x053e2d63
 800367c:	1ffffc02 	.word	0x1ffffc02
 8003680:	40012000 	.word	0x40012000

08003684 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	4604      	mov	r4, r0
 8003688:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800368a:	6946      	ldr	r6, [r0, #20]
 800368c:	2e08      	cmp	r6, #8
 800368e:	d005      	beq.n	800369c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003690:	6803      	ldr	r3, [r0, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f013 0f01 	tst.w	r3, #1
 8003698:	d11e      	bne.n	80036d8 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800369a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800369c:	f7fe fcec 	bl	8002078 <HAL_GetTick>
 80036a0:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4232      	tst	r2, r6
 80036a8:	d11c      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	f1b5 3fff 	cmp.w	r5, #4294967295
 80036ae:	d0f8      	beq.n	80036a2 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036b0:	f7fe fce2 	bl	8002078 <HAL_GetTick>
 80036b4:	1bc3      	subs	r3, r0, r7
 80036b6:	42ab      	cmp	r3, r5
 80036b8:	d801      	bhi.n	80036be <HAL_ADC_PollForConversion+0x3a>
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	d1f1      	bne.n	80036a2 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4233      	tst	r3, r6
 80036c4:	d1ed      	bne.n	80036a2 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80036ce:	2300      	movs	r3, #0
 80036d0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 80036d4:	2003      	movs	r0, #3
 80036d6:	e028      	b.n	800372a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80036da:	f043 0320 	orr.w	r3, r3, #32
 80036de:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80036e0:	2001      	movs	r0, #1
 80036e2:	e022      	b.n	800372a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036e4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80036f2:	d115      	bne.n	8003720 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80036f4:	7ea2      	ldrb	r2, [r4, #26]
 80036f6:	b99a      	cbnz	r2, 8003720 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	f012 0f08 	tst.w	r2, #8
 80036fe:	d00f      	beq.n	8003720 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	f012 0f04 	tst.w	r2, #4
 8003706:	d111      	bne.n	800372c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	f022 020c 	bic.w	r2, r2, #12
 800370e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	f043 0301 	orr.w	r3, r3, #1
 800371e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003720:	7e20      	ldrb	r0, [r4, #24]
 8003722:	b960      	cbnz	r0, 800373e <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	220c      	movs	r2, #12
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800372e:	f043 0320 	orr.w	r3, r3, #32
 8003732:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003734:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800373c:	e7f0      	b.n	8003720 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800373e:	2000      	movs	r0, #0
 8003740:	e7f3      	b.n	800372a <HAL_ADC_PollForConversion+0xa6>

08003742 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003742:	6803      	ldr	r3, [r0, #0]
 8003744:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003746:	4770      	bx	lr

08003748 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003748:	b470      	push	{r4, r5, r6}
 800374a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800374c:	2200      	movs	r2, #0
 800374e:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003750:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003752:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8003756:	2a01      	cmp	r2, #1
 8003758:	f000 8105 	beq.w	8003966 <HAL_ADC_ConfigChannel+0x21e>
 800375c:	4603      	mov	r3, r0
 800375e:	2201      	movs	r2, #1
 8003760:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003764:	6802      	ldr	r2, [r0, #0]
 8003766:	6890      	ldr	r0, [r2, #8]
 8003768:	f010 0f04 	tst.w	r0, #4
 800376c:	d00a      	beq.n	8003784 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800376e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003770:	f042 0220 	orr.w	r2, r2, #32
 8003774:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003776:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800377e:	b003      	add	sp, #12
 8003780:	bc70      	pop	{r4, r5, r6}
 8003782:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003784:	6848      	ldr	r0, [r1, #4]
 8003786:	2802      	cmp	r0, #2
 8003788:	f000 809e 	beq.w	80038c8 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800378c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003790:	d029      	beq.n	80037e6 <HAL_ADC_ConfigChannel+0x9e>
 8003792:	4d76      	ldr	r5, [pc, #472]	; (800396c <HAL_ADC_ConfigChannel+0x224>)
 8003794:	42ac      	cmp	r4, r5
 8003796:	d026      	beq.n	80037e6 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003798:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800379a:	f000 001f 	and.w	r0, r0, #31
 800379e:	250f      	movs	r5, #15
 80037a0:	4085      	lsls	r5, r0
 80037a2:	ea24 0505 	bic.w	r5, r4, r5
 80037a6:	680c      	ldr	r4, [r1, #0]
 80037a8:	f3c4 0611 	ubfx	r6, r4, #0, #18
 80037ac:	2e00      	cmp	r6, #0
 80037ae:	d133      	bne.n	8003818 <HAL_ADC_ConfigChannel+0xd0>
 80037b0:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80037b4:	fa04 f000 	lsl.w	r0, r4, r0
 80037b8:	4328      	orrs	r0, r5
 80037ba:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80037bc:	684c      	ldr	r4, [r1, #4]
 80037be:	08a0      	lsrs	r0, r4, #2
 80037c0:	3001      	adds	r0, #1
 80037c2:	69dd      	ldr	r5, [r3, #28]
 80037c4:	42a8      	cmp	r0, r5
 80037c6:	d814      	bhi.n	80037f2 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80037c8:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 80037ca:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80037cc:	f004 041f 	and.w	r4, r4, #31
 80037d0:	260f      	movs	r6, #15
 80037d2:	40a6      	lsls	r6, r4
 80037d4:	ea20 0006 	bic.w	r0, r0, r6
 80037d8:	f3c5 6583 	ubfx	r5, r5, #26, #4
 80037dc:	fa05 f404 	lsl.w	r4, r5, r4
 80037e0:	4304      	orrs	r4, r0
 80037e2:	6294      	str	r4, [r2, #40]	; 0x28
}
 80037e4:	e005      	b.n	80037f2 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80037e6:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80037e8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80037ea:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80037ee:	4320      	orrs	r0, r4
 80037f0:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80037f2:	681c      	ldr	r4, [r3, #0]
 80037f4:	680d      	ldr	r5, [r1, #0]
 80037f6:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 80037f8:	6960      	ldr	r0, [r4, #20]
 80037fa:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 80037fe:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003802:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8003806:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800380a:	4302      	orrs	r2, r0
 800380c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800380e:	680a      	ldr	r2, [r1, #0]
 8003810:	2a00      	cmp	r2, #0
 8003812:	db09      	blt.n	8003828 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003814:	2000      	movs	r0, #0
 8003816:	e7af      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800381c:	b114      	cbz	r4, 8003824 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800381e:	fab4 f484 	clz	r4, r4
 8003822:	e7c7      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8003824:	2420      	movs	r4, #32
 8003826:	e7c5      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003828:	4951      	ldr	r1, [pc, #324]	; (8003970 <HAL_ADC_ConfigChannel+0x228>)
 800382a:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 800382e:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003832:	4c50      	ldr	r4, [pc, #320]	; (8003974 <HAL_ADC_ConfigChannel+0x22c>)
 8003834:	42a2      	cmp	r2, r4
 8003836:	d007      	beq.n	8003848 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003838:	4c4f      	ldr	r4, [pc, #316]	; (8003978 <HAL_ADC_ConfigChannel+0x230>)
 800383a:	42a2      	cmp	r2, r4
 800383c:	d026      	beq.n	800388c <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800383e:	4c4f      	ldr	r4, [pc, #316]	; (800397c <HAL_ADC_ConfigChannel+0x234>)
 8003840:	42a2      	cmp	r2, r4
 8003842:	d032      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003844:	2000      	movs	r0, #0
 8003846:	e797      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003848:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800384c:	d1f4      	bne.n	8003838 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800384e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003852:	4847      	ldr	r0, [pc, #284]	; (8003970 <HAL_ADC_ConfigChannel+0x228>)
 8003854:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003858:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800385c:	4311      	orrs	r1, r2
 800385e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003862:	4a47      	ldr	r2, [pc, #284]	; (8003980 <HAL_ADC_ConfigChannel+0x238>)
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	0992      	lsrs	r2, r2, #6
 8003868:	4946      	ldr	r1, [pc, #280]	; (8003984 <HAL_ADC_ConfigChannel+0x23c>)
 800386a:	fba1 1202 	umull	r1, r2, r1, r2
 800386e:	0992      	lsrs	r2, r2, #6
 8003870:	3201      	adds	r2, #1
 8003872:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003876:	0092      	lsls	r2, r2, #2
 8003878:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800387a:	e002      	b.n	8003882 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 800387c:	9a01      	ldr	r2, [sp, #4]
 800387e:	3a01      	subs	r2, #1
 8003880:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003882:	9a01      	ldr	r2, [sp, #4]
 8003884:	2a00      	cmp	r2, #0
 8003886:	d1f9      	bne.n	800387c <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003888:	2000      	movs	r0, #0
 800388a:	e775      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800388c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003890:	d1d5      	bne.n	800383e <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003892:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003896:	4836      	ldr	r0, [pc, #216]	; (8003970 <HAL_ADC_ConfigChannel+0x228>)
 8003898:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800389c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80038a0:	4311      	orrs	r1, r2
 80038a2:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a6:	2000      	movs	r0, #0
}
 80038a8:	e766      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80038aa:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80038ae:	d158      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038b0:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b4:	482e      	ldr	r0, [pc, #184]	; (8003970 <HAL_ADC_ConfigChannel+0x228>)
 80038b6:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80038ba:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80038be:	430a      	orrs	r2, r1
 80038c0:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c4:	2000      	movs	r0, #0
}
 80038c6:	e757      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80038c8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80038cc:	d002      	beq.n	80038d4 <HAL_ADC_ConfigChannel+0x18c>
 80038ce:	4827      	ldr	r0, [pc, #156]	; (800396c <HAL_ADC_ConfigChannel+0x224>)
 80038d0:	4284      	cmp	r4, r0
 80038d2:	d106      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80038d4:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80038d6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80038d8:	f3c4 0411 	ubfx	r4, r4, #0, #18
 80038dc:	ea20 0004 	bic.w	r0, r0, r4
 80038e0:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038e2:	680a      	ldr	r2, [r1, #0]
 80038e4:	2a00      	cmp	r2, #0
 80038e6:	db01      	blt.n	80038ec <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038e8:	2000      	movs	r0, #0
 80038ea:	e745      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038ec:	4920      	ldr	r1, [pc, #128]	; (8003970 <HAL_ADC_ConfigChannel+0x228>)
 80038ee:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038f2:	4820      	ldr	r0, [pc, #128]	; (8003974 <HAL_ADC_ConfigChannel+0x22c>)
 80038f4:	4282      	cmp	r2, r0
 80038f6:	d007      	beq.n	8003908 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80038f8:	481f      	ldr	r0, [pc, #124]	; (8003978 <HAL_ADC_ConfigChannel+0x230>)
 80038fa:	4282      	cmp	r2, r0
 80038fc:	d013      	beq.n	8003926 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038fe:	481f      	ldr	r0, [pc, #124]	; (800397c <HAL_ADC_ConfigChannel+0x234>)
 8003900:	4282      	cmp	r2, r0
 8003902:	d01f      	beq.n	8003944 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003904:	2000      	movs	r0, #0
 8003906:	e737      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003908:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800390c:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 8003910:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8003914:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8003918:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800391c:	4311      	orrs	r1, r2
 800391e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003922:	2000      	movs	r0, #0
}
 8003924:	e728      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003926:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800392a:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 800392e:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 8003932:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003936:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800393a:	430a      	orrs	r2, r1
 800393c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003940:	2000      	movs	r0, #0
}
 8003942:	e719      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003944:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003948:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 800394c:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8003950:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8003954:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003958:	430a      	orrs	r2, r1
 800395a:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800395e:	2000      	movs	r0, #0
}
 8003960:	e70a      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
 8003962:	2000      	movs	r0, #0
 8003964:	e708      	b.n	8003778 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 8003966:	2002      	movs	r0, #2
 8003968:	e709      	b.n	800377e <HAL_ADC_ConfigChannel+0x36>
 800396a:	bf00      	nop
 800396c:	80000004 	.word	0x80000004
 8003970:	40012000 	.word	0x40012000
 8003974:	b0001000 	.word	0xb0001000
 8003978:	b8004000 	.word	0xb8004000
 800397c:	b4002000 	.word	0xb4002000
 8003980:	20000070 	.word	0x20000070
 8003984:	053e2d63 	.word	0x053e2d63

08003988 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003988:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800398a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	f012 0f04 	tst.w	r2, #4
 8003992:	d02a      	beq.n	80039ea <ADC_ConversionStop+0x62>
 8003994:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	f012 0f02 	tst.w	r2, #2
 800399c:	d107      	bne.n	80039ae <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039a4:	f022 0217 	bic.w	r2, r2, #23
 80039a8:	f042 0210 	orr.w	r2, r2, #16
 80039ac:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039ae:	f7fe fb63 	bl	8002078 <HAL_GetTick>
 80039b2:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f013 0f04 	tst.w	r3, #4
 80039bc:	d013      	beq.n	80039e6 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80039be:	f7fe fb5b 	bl	8002078 <HAL_GetTick>
 80039c2:	1b43      	subs	r3, r0, r5
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d9f5      	bls.n	80039b4 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80039c8:	6823      	ldr	r3, [r4, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f013 0f04 	tst.w	r3, #4
 80039d0:	d0f0      	beq.n	80039b4 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039d4:	f043 0310 	orr.w	r3, r3, #16
 80039d8:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 80039e2:	2001      	movs	r0, #1
 80039e4:	e002      	b.n	80039ec <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80039e6:	2000      	movs	r0, #0
 80039e8:	e000      	b.n	80039ec <ADC_ConversionStop+0x64>
 80039ea:	2000      	movs	r0, #0
}
 80039ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080039f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039f0:	b530      	push	{r4, r5, lr}
 80039f2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	f012 0f01 	tst.w	r2, #1
 8003a00:	d15b      	bne.n	8003aba <ADC_Enable+0xca>
 8003a02:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	4a2e      	ldr	r2, [pc, #184]	; (8003ac0 <ADC_Enable+0xd0>)
 8003a08:	4211      	tst	r1, r2
 8003a0a:	d117      	bne.n	8003a3c <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a12:	f022 0217 	bic.w	r2, r2, #23
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a1c:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <ADC_Enable+0xd4>)
 8003a1e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003a22:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003a26:	d019      	beq.n	8003a5c <ADC_Enable+0x6c>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <ADC_Enable+0xd8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	099b      	lsrs	r3, r3, #6
 8003a2e:	4a27      	ldr	r2, [pc, #156]	; (8003acc <ADC_Enable+0xdc>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	099b      	lsrs	r3, r3, #6
 8003a36:	3301      	adds	r3, #1
 8003a38:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a3a:	e00c      	b.n	8003a56 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a3c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003a3e:	f043 0310 	orr.w	r3, r3, #16
 8003a42:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a44:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	e035      	b.n	8003abc <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 8003a50:	9b01      	ldr	r3, [sp, #4]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003a56:	9b01      	ldr	r3, [sp, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f9      	bne.n	8003a50 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003a5c:	7e63      	ldrb	r3, [r4, #25]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a62:	2000      	movs	r0, #0
 8003a64:	e02a      	b.n	8003abc <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 8003a66:	f7fe fb07 	bl	8002078 <HAL_GetTick>
 8003a6a:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	f012 0f01 	tst.w	r2, #1
 8003a74:	d11f      	bne.n	8003ab6 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	f012 0f01 	tst.w	r2, #1
 8003a7c:	d107      	bne.n	8003a8e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a84:	f022 0217 	bic.w	r2, r2, #23
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a8e:	f7fe faf3 	bl	8002078 <HAL_GetTick>
 8003a92:	1b40      	subs	r0, r0, r5
 8003a94:	2802      	cmp	r0, #2
 8003a96:	d9e9      	bls.n	8003a6c <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f013 0f01 	tst.w	r3, #1
 8003aa0:	d1e4      	bne.n	8003a6c <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003aa4:	f043 0310 	orr.w	r3, r3, #16
 8003aa8:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aaa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	e002      	b.n	8003abc <ADC_Enable+0xcc>
  return HAL_OK;
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	e000      	b.n	8003abc <ADC_Enable+0xcc>
 8003aba:	2000      	movs	r0, #0
}
 8003abc:	b003      	add	sp, #12
 8003abe:	bd30      	pop	{r4, r5, pc}
 8003ac0:	80000017 	.word	0x80000017
 8003ac4:	40012000 	.word	0x40012000
 8003ac8:	20000070 	.word	0x20000070
 8003acc:	053e2d63 	.word	0x053e2d63

08003ad0 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ad0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f013 0f04 	tst.w	r3, #4
 8003ad8:	d128      	bne.n	8003b2c <HAL_ADC_Start+0x5c>
{
 8003ada:	b510      	push	{r4, lr}
 8003adc:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 8003ade:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d024      	beq.n	8003b30 <HAL_ADC_Start+0x60>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8003aec:	f7ff ff80 	bl	80039f0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003af0:	b9c0      	cbnz	r0, 8003b24 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b00:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003b02:	2300      	movs	r3, #0
 8003b04:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b06:	6822      	ldr	r2, [r4, #0]
 8003b08:	211c      	movs	r1, #28
 8003b0a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8003b0c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003b10:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003b12:	6893      	ldr	r3, [r2, #8]
 8003b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b18:	f023 0317 	bic.w	r3, r3, #23
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6093      	str	r3, [r2, #8]
}
 8003b22:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8003b24:	2300      	movs	r3, #0
 8003b26:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8003b2a:	e7fa      	b.n	8003b22 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8003b2c:	2002      	movs	r0, #2
}
 8003b2e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 8003b30:	2002      	movs	r0, #2
 8003b32:	e7f6      	b.n	8003b22 <HAL_ADC_Start+0x52>

08003b34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b38:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b3a:	6893      	ldr	r3, [r2, #8]
 8003b3c:	f013 0302 	ands.w	r3, r3, #2
 8003b40:	d000      	beq.n	8003b44 <ADC_Disable+0x10>
 8003b42:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b44:	6891      	ldr	r1, [r2, #8]
 8003b46:	f011 0f01 	tst.w	r1, #1
 8003b4a:	d039      	beq.n	8003bc0 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d139      	bne.n	8003bc4 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b50:	6893      	ldr	r3, [r2, #8]
 8003b52:	f003 0305 	and.w	r3, r3, #5
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d009      	beq.n	8003b6e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b5c:	f043 0310 	orr.w	r3, r3, #16
 8003b60:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	e029      	b.n	8003bc2 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 8003b6e:	6893      	ldr	r3, [r2, #8]
 8003b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b74:	f023 0317 	bic.w	r3, r3, #23
 8003b78:	f043 0302 	orr.w	r3, r3, #2
 8003b7c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	2203      	movs	r2, #3
 8003b82:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b84:	f7fe fa78 	bl	8002078 <HAL_GetTick>
 8003b88:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f013 0f01 	tst.w	r3, #1
 8003b92:	d013      	beq.n	8003bbc <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b94:	f7fe fa70 	bl	8002078 <HAL_GetTick>
 8003b98:	1b40      	subs	r0, r0, r5
 8003b9a:	2802      	cmp	r0, #2
 8003b9c:	d9f5      	bls.n	8003b8a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f013 0f01 	tst.w	r3, #1
 8003ba6:	d0f0      	beq.n	8003b8a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003baa:	f043 0310 	orr.w	r3, r3, #16
 8003bae:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
 8003bba:	e002      	b.n	8003bc2 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	e000      	b.n	8003bc2 <ADC_Disable+0x8e>
 8003bc0:	2000      	movs	r0, #0
}
 8003bc2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	e7fc      	b.n	8003bc2 <ADC_Disable+0x8e>

08003bc8 <HAL_ADC_DeInit>:
{
 8003bc8:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d04c      	beq.n	8003c68 <HAL_ADC_DeInit+0xa0>
 8003bce:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003bd0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003bd2:	f043 0302 	orr.w	r3, r3, #2
 8003bd6:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003bd8:	f7ff fed6 	bl	8003988 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003bdc:	4606      	mov	r6, r0
 8003bde:	2800      	cmp	r0, #0
 8003be0:	d033      	beq.n	8003c4a <HAL_ADC_DeInit+0x82>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003be2:	6822      	ldr	r2, [r4, #0]
 8003be4:	6853      	ldr	r3, [r2, #4]
 8003be6:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003bf0:	6823      	ldr	r3, [r4, #0]
 8003bf2:	f240 329f 	movw	r2, #927	; 0x39f
 8003bf6:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003bf8:	6822      	ldr	r2, [r4, #0]
 8003bfa:	68d1      	ldr	r1, [r2, #12]
 8003bfc:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_ADC_DeInit+0xa4>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	6913      	ldr	r3, [r2, #16]
 8003c06:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003c0a:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003c0c:	6822      	ldr	r2, [r4, #0]
 8003c0e:	6953      	ldr	r3, [r2, #20]
 8003c10:	f023 0307 	bic.w	r3, r3, #7
 8003c14:	6153      	str	r3, [r2, #20]
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003c16:	6822      	ldr	r2, [r4, #0]
 8003c18:	6a13      	ldr	r3, [r2, #32]
 8003c1a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8003c1e:	6213      	str	r3, [r2, #32]
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c24:	2500      	movs	r5, #0
 8003c26:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003c28:	4a11      	ldr	r2, [pc, #68]	; (8003c70 <HAL_ADC_DeInit+0xa8>)
 8003c2a:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 8003c2e:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003c32:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 8003c36:	4620      	mov	r0, r4
 8003c38:	f7fd f97e 	bl	8000f38 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003c3c:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 8003c3e:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 8003c40:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8003c42:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 8003c46:	4630      	mov	r0, r6
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff ff72 	bl	8003b34 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003c50:	4606      	mov	r6, r0
 8003c52:	b908      	cbnz	r0, 8003c58 <HAL_ADC_DeInit+0x90>
      hadc->State = HAL_ADC_STATE_READY;
 8003c54:	2301      	movs	r3, #1
 8003c56:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003c58:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003c5a:	6893      	ldr	r3, [r2, #8]
 8003c5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003c60:	f023 0317 	bic.w	r3, r3, #23
 8003c64:	6093      	str	r3, [r2, #8]
}
 8003c66:	e7bc      	b.n	8003be2 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003c68:	2601      	movs	r6, #1
 8003c6a:	e7ec      	b.n	8003c46 <HAL_ADC_DeInit+0x7e>
 8003c6c:	833e0200 	.word	0x833e0200
 8003c70:	40012000 	.word	0x40012000

08003c74 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003c74:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d019      	beq.n	8003cb0 <HAL_ADC_Stop+0x3c>
{
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003c80:	2301      	movs	r3, #1
 8003c82:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003c86:	f7ff fe7f 	bl	8003988 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003c8a:	b118      	cbz	r0, 8003c94 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003c92:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003c94:	4620      	mov	r0, r4
 8003c96:	f7ff ff4d 	bl	8003b34 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d1f6      	bne.n	8003c8c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003c9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	65a3      	str	r3, [r4, #88]	; 0x58
 8003cae:	e7ed      	b.n	8003c8c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003cb0:	2002      	movs	r0, #2
}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003cbc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	f000 8094 	beq.w	8003dee <HAL_ADCEx_Calibration_Start+0x13a>
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	2301      	movs	r3, #1
 8003cca:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003cce:	f7ff ff31 	bl	8003b34 <ADC_Disable>
 8003cd2:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	f012 0201 	ands.w	r2, r2, #1
 8003cdc:	d009      	beq.n	8003cf2 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ce0:	f043 0310 	orr.w	r3, r3, #16
 8003ce4:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003cec:	4628      	mov	r0, r5
 8003cee:	b003      	add	sp, #12
 8003cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003cf2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003cf4:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003cf8:	f041 0102 	orr.w	r1, r1, #2
 8003cfc:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003cfe:	68de      	ldr	r6, [r3, #12]
 8003d00:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003d04:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003d08:	0436      	lsls	r6, r6, #16
 8003d0a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003d0c:	68d9      	ldr	r1, [r3, #12]
 8003d0e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003d12:	f021 0103 	bic.w	r1, r1, #3
 8003d16:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003d18:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003d1a:	e005      	b.n	8003d28 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003d24:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003d26:	3201      	adds	r2, #1
 8003d28:	2a07      	cmp	r2, #7
 8003d2a:	d81e      	bhi.n	8003d6a <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003d2c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003d2e:	688b      	ldr	r3, [r1, #8]
 8003d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d34:	f023 0317 	bic.w	r3, r3, #23
 8003d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d3c:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d3e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	2900      	cmp	r1, #0
 8003d44:	daea      	bge.n	8003d1c <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003d46:	9b01      	ldr	r3, [sp, #4]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d4c:	9b01      	ldr	r3, [sp, #4]
 8003d4e:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003d52:	d3f4      	bcc.n	8003d3e <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d56:	f023 0312 	bic.w	r3, r3, #18
 8003d5a:	f043 0310 	orr.w	r3, r3, #16
 8003d5e:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003d60:	2300      	movs	r3, #0
 8003d62:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003d66:	2501      	movs	r5, #1
 8003d68:	e7c0      	b.n	8003cec <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003d6a:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003d6e:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003d70:	688b      	ldr	r3, [r1, #8]
 8003d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d76:	f023 0317 	bic.w	r3, r3, #23
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003d80:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003d82:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003d86:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8003d8a:	4302      	orrs	r2, r0
 8003d8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003d90:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003d92:	6893      	ldr	r3, [r2, #8]
 8003d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d98:	f023 0317 	bic.w	r3, r3, #23
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003da2:	f7fe f969 	bl	8002078 <HAL_GetTick>
 8003da6:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003da8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	f012 0f01 	tst.w	r2, #1
 8003db0:	d109      	bne.n	8003dc6 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	4316      	orrs	r6, r2
 8003db6:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003db8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dba:	f023 0303 	bic.w	r3, r3, #3
 8003dbe:	f043 0301 	orr.w	r3, r3, #1
 8003dc2:	65a3      	str	r3, [r4, #88]	; 0x58
 8003dc4:	e78f      	b.n	8003ce6 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003dc6:	f7fe f957 	bl	8002078 <HAL_GetTick>
 8003dca:	1bc3      	subs	r3, r0, r7
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d9eb      	bls.n	8003da8 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f013 0f01 	tst.w	r3, #1
 8003dd8:	d0e6      	beq.n	8003da8 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ddc:	f043 0310 	orr.w	r3, r3, #16
 8003de0:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003dea:	2501      	movs	r5, #1
 8003dec:	e77e      	b.n	8003cec <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003dee:	2502      	movs	r5, #2
 8003df0:	e77c      	b.n	8003cec <HAL_ADCEx_Calibration_Start+0x38>
	...

08003df4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003df6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003df8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dfc:	041b      	lsls	r3, r3, #16
 8003dfe:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e00:	0200      	lsls	r0, r0, #8
 8003e02:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e06:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003e10:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e18:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e1a:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_NVIC_SetPriority+0x68>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e22:	f1c3 0c07 	rsb	ip, r3, #7
 8003e26:	f1bc 0f04 	cmp.w	ip, #4
 8003e2a:	bf28      	it	cs
 8003e2c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e30:	f103 0e04 	add.w	lr, r3, #4
 8003e34:	f1be 0f06 	cmp.w	lr, #6
 8003e38:	d918      	bls.n	8003e6c <HAL_NVIC_SetPriority+0x54>
 8003e3a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e3c:	f04f 3eff 	mov.w	lr, #4294967295
 8003e40:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003e44:	ea21 010c 	bic.w	r1, r1, ip
 8003e48:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e4a:	fa0e f303 	lsl.w	r3, lr, r3
 8003e4e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e52:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003e54:	2800      	cmp	r0, #0
 8003e56:	db0b      	blt.n	8003e70 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e58:	0109      	lsls	r1, r1, #4
 8003e5a:	b2c9      	uxtb	r1, r1
 8003e5c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003e60:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003e64:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e68:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e7e5      	b.n	8003e3c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e70:	f000 000f 	and.w	r0, r0, #15
 8003e74:	0109      	lsls	r1, r1, #4
 8003e76:	b2c9      	uxtb	r1, r1
 8003e78:	4b02      	ldr	r3, [pc, #8]	; (8003e84 <HAL_NVIC_SetPriority+0x6c>)
 8003e7a:	5419      	strb	r1, [r3, r0]
 8003e7c:	e7f4      	b.n	8003e68 <HAL_NVIC_SetPriority+0x50>
 8003e7e:	bf00      	nop
 8003e80:	e000ed00 	.word	0xe000ed00
 8003e84:	e000ed14 	.word	0xe000ed14

08003e88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	db07      	blt.n	8003e9c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e8c:	f000 021f 	and.w	r2, r0, #31
 8003e90:	0940      	lsrs	r0, r0, #5
 8003e92:	2301      	movs	r3, #1
 8003e94:	4093      	lsls	r3, r2
 8003e96:	4a02      	ldr	r2, [pc, #8]	; (8003ea0 <HAL_NVIC_EnableIRQ+0x18>)
 8003e98:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000e100 	.word	0xe000e100

08003ea4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	db0c      	blt.n	8003ec2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea8:	f000 021f 	and.w	r2, r0, #31
 8003eac:	0940      	lsrs	r0, r0, #5
 8003eae:	2301      	movs	r3, #1
 8003eb0:	4093      	lsls	r3, r2
 8003eb2:	3020      	adds	r0, #32
 8003eb4:	4a03      	ldr	r2, [pc, #12]	; (8003ec4 <HAL_NVIC_DisableIRQ+0x20>)
 8003eb6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003eba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ebe:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003ec2:	4770      	bx	lr
 8003ec4:	e000e100 	.word	0xe000e100

08003ec8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec8:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eca:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8003ecc:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8003ed0:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ed4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003ed6:	b124      	cbz	r4, 8003ee2 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed8:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8003eda:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8003ede:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ee2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003ee4:	f004 0c1c 	and.w	ip, r4, #28
 8003ee8:	2401      	movs	r4, #1
 8003eea:	fa04 f40c 	lsl.w	r4, r4, ip
 8003eee:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8003ef2:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ef6:	6804      	ldr	r4, [r0, #0]
 8003ef8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003efa:	6883      	ldr	r3, [r0, #8]
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d005      	beq.n	8003f0c <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003f00:	6803      	ldr	r3, [r0, #0]
 8003f02:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003f04:	6803      	ldr	r3, [r0, #0]
 8003f06:	60da      	str	r2, [r3, #12]
  }
}
 8003f08:	bc10      	pop	{r4}
 8003f0a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003f0c:	6803      	ldr	r3, [r0, #0]
 8003f0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003f10:	6803      	ldr	r3, [r0, #0]
 8003f12:	60d9      	str	r1, [r3, #12]
 8003f14:	e7f8      	b.n	8003f08 <DMA_SetConfig+0x40>
	...

08003f18 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f18:	6803      	ldr	r3, [r0, #0]
 8003f1a:	4a14      	ldr	r2, [pc, #80]	; (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d816      	bhi.n	8003f4e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f22:	f022 0203 	bic.w	r2, r2, #3
 8003f26:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003f2a:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 8003f2e:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	3b08      	subs	r3, #8
 8003f34:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	; (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8003f3e:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2201      	movs	r2, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003f4c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f50:	f022 0103 	bic.w	r1, r2, #3
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003f56:	440a      	add	r2, r1
 8003f58:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3b08      	subs	r3, #8
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	3307      	adds	r3, #7
 8003f68:	e7e8      	b.n	8003f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003f6a:	bf00      	nop
 8003f6c:	40020407 	.word	0x40020407
 8003f70:	cccccccd 	.word	0xcccccccd
 8003f74:	40020880 	.word	0x40020880
 8003f78:	4002081c 	.word	0x4002081c

08003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f7c:	6843      	ldr	r3, [r0, #4]
 8003f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f82:	4a07      	ldr	r2, [pc, #28]	; (8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8003f84:	441a      	add	r2, r3
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f8a:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8003f8c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2201      	movs	r2, #1
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	1000823f 	.word	0x1000823f
 8003fa4:	40020940 	.word	0x40020940

08003fa8 <HAL_DMA_Init>:
  if (hdma == NULL)
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d060      	beq.n	800406e <HAL_DMA_Init+0xc6>
{
 8003fac:	b510      	push	{r4, lr}
 8003fae:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fb0:	6802      	ldr	r2, [r0, #0]
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_DMA_Init+0xcc>)
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d842      	bhi.n	800403e <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_DMA_Init+0xd0>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	492f      	ldr	r1, [pc, #188]	; (800407c <HAL_DMA_Init+0xd4>)
 8003fbe:	fba1 1303 	umull	r1, r3, r1, r3
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_DMA_Init+0xd8>)
 8003fca:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003fd2:	6813      	ldr	r3, [r2, #0]
 8003fd4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003fde:	6821      	ldr	r1, [r4, #0]
 8003fe0:	680a      	ldr	r2, [r1, #0]
 8003fe2:	68a3      	ldr	r3, [r4, #8]
 8003fe4:	68e0      	ldr	r0, [r4, #12]
 8003fe6:	4303      	orrs	r3, r0
 8003fe8:	6920      	ldr	r0, [r4, #16]
 8003fea:	4303      	orrs	r3, r0
 8003fec:	6960      	ldr	r0, [r4, #20]
 8003fee:	4303      	orrs	r3, r0
 8003ff0:	69a0      	ldr	r0, [r4, #24]
 8003ff2:	4303      	orrs	r3, r0
 8003ff4:	69e0      	ldr	r0, [r4, #28]
 8003ff6:	4303      	orrs	r3, r0
 8003ff8:	6a20      	ldr	r0, [r4, #32]
 8003ffa:	4303      	orrs	r3, r0
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004000:	4620      	mov	r0, r4
 8004002:	f7ff ff89 	bl	8003f18 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004006:	68a3      	ldr	r3, [r4, #8]
 8004008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400c:	d022      	beq.n	8004054 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800400e:	6863      	ldr	r3, [r4, #4]
 8004010:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004016:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004018:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800401a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800401c:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800401e:	6863      	ldr	r3, [r4, #4]
 8004020:	3b01      	subs	r3, #1
 8004022:	2b03      	cmp	r3, #3
 8004024:	d919      	bls.n	800405a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800402a:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800402c:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800402e:	2000      	movs	r0, #0
 8004030:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004032:	2301      	movs	r3, #1
 8004034:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8004038:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800403c:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_DMA_Init+0xdc>)
 8004040:	4413      	add	r3, r2
 8004042:	490e      	ldr	r1, [pc, #56]	; (800407c <HAL_DMA_Init+0xd4>)
 8004044:	fba1 1303 	umull	r1, r3, r1, r3
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800404e:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <HAL_DMA_Init+0xe0>)
 8004050:	6403      	str	r3, [r0, #64]	; 0x40
 8004052:	e7bb      	b.n	8003fcc <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004054:	2300      	movs	r3, #0
 8004056:	6063      	str	r3, [r4, #4]
 8004058:	e7d9      	b.n	800400e <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800405a:	4620      	mov	r0, r4
 800405c:	f7ff ff8e 	bl	8003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004060:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004066:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004068:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	e7df      	b.n	800402e <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800406e:	2001      	movs	r0, #1
}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40020407 	.word	0x40020407
 8004078:	bffdfff8 	.word	0xbffdfff8
 800407c:	cccccccd 	.word	0xcccccccd
 8004080:	40020000 	.word	0x40020000
 8004084:	bffdfbf8 	.word	0xbffdfbf8
 8004088:	40020400 	.word	0x40020400

0800408c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 800408c:	2800      	cmp	r0, #0
 800408e:	d04b      	beq.n	8004128 <HAL_DMA_DeInit+0x9c>
{
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004094:	6802      	ldr	r2, [r0, #0]
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800409e:	6802      	ldr	r2, [r0, #0]
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_DMA_DeInit+0xa0>)
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d82c      	bhi.n	8004100 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040a6:	4b22      	ldr	r3, [pc, #136]	; (8004130 <HAL_DMA_DeInit+0xa4>)
 80040a8:	4413      	add	r3, r2
 80040aa:	4922      	ldr	r1, [pc, #136]	; (8004134 <HAL_DMA_DeInit+0xa8>)
 80040ac:	fba1 1303 	umull	r1, r3, r1, r3
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_DMA_DeInit+0xac>)
 80040b8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80040ba:	2500      	movs	r5, #0
 80040bc:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80040c0:	f003 021c 	and.w	r2, r3, #28
 80040c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80040c6:	2301      	movs	r3, #1
 80040c8:	4093      	lsls	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040cc:	4620      	mov	r0, r4
 80040ce:	f7ff ff23 	bl	8003f18 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80040d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80040d4:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80040d8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80040da:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040dc:	6863      	ldr	r3, [r4, #4]
 80040de:	3b01      	subs	r3, #1
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d918      	bls.n	8004116 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = 0U;
 80040e4:	2000      	movs	r0, #0
 80040e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80040e8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80040ea:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80040ec:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80040ee:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80040f0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80040f2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80040f6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80040fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004100:	4b0e      	ldr	r3, [pc, #56]	; (800413c <HAL_DMA_DeInit+0xb0>)
 8004102:	4413      	add	r3, r2
 8004104:	490b      	ldr	r1, [pc, #44]	; (8004134 <HAL_DMA_DeInit+0xa8>)
 8004106:	fba1 1303 	umull	r1, r3, r1, r3
 800410a:	091b      	lsrs	r3, r3, #4
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_DMA_DeInit+0xb4>)
 8004112:	6403      	str	r3, [r0, #64]	; 0x40
 8004114:	e7d1      	b.n	80040ba <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004116:	4620      	mov	r0, r4
 8004118:	f7ff ff30 	bl	8003f7c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800411c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800411e:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004120:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004122:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004124:	605a      	str	r2, [r3, #4]
 8004126:	e7dd      	b.n	80040e4 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004128:	2001      	movs	r0, #1
}
 800412a:	4770      	bx	lr
 800412c:	40020407 	.word	0x40020407
 8004130:	bffdfff8 	.word	0xbffdfff8
 8004134:	cccccccd 	.word	0xcccccccd
 8004138:	40020000 	.word	0x40020000
 800413c:	bffdfbf8 	.word	0xbffdfbf8
 8004140:	40020400 	.word	0x40020400

08004144 <HAL_DMA_Start_IT>:
{
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004148:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800414c:	2801      	cmp	r0, #1
 800414e:	d043      	beq.n	80041d8 <HAL_DMA_Start_IT+0x94>
 8004150:	2001      	movs	r0, #1
 8004152:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004156:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800415a:	b2c0      	uxtb	r0, r0
 800415c:	2801      	cmp	r0, #1
 800415e:	d006      	beq.n	800416e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004164:	2300      	movs	r3, #0
 8004166:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800416a:	2001      	movs	r0, #1
}
 800416c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800416e:	2002      	movs	r0, #2
 8004170:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004174:	2000      	movs	r0, #0
 8004176:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004178:	6825      	ldr	r5, [r4, #0]
 800417a:	6828      	ldr	r0, [r5, #0]
 800417c:	f020 0001 	bic.w	r0, r0, #1
 8004180:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff fea0 	bl	8003ec8 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004188:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800418a:	b1d3      	cbz	r3, 80041c2 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	6813      	ldr	r3, [r2, #0]
 8004190:	f043 030e 	orr.w	r3, r3, #14
 8004194:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004196:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800419e:	d003      	beq.n	80041a8 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041a6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80041a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80041aa:	b11b      	cbz	r3, 80041b4 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2000      	movs	r0, #0
 80041c0:	e7d4      	b.n	800416c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	6813      	ldr	r3, [r2, #0]
 80041c6:	f023 0304 	bic.w	r3, r3, #4
 80041ca:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	f043 030a 	orr.w	r3, r3, #10
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e7de      	b.n	8004196 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80041d8:	2002      	movs	r0, #2
 80041da:	e7c7      	b.n	800416c <HAL_DMA_Start_IT+0x28>

080041dc <HAL_DMA_Abort>:
  if (NULL == hdma)
 80041dc:	4603      	mov	r3, r0
 80041de:	2800      	cmp	r0, #0
 80041e0:	d034      	beq.n	800424c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041e2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	2a02      	cmp	r2, #2
 80041ea:	d006      	beq.n	80041fa <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ec:	2204      	movs	r2, #4
 80041ee:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80041f0:	2200      	movs	r2, #0
 80041f2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80041f6:	2001      	movs	r0, #1
 80041f8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041fa:	6801      	ldr	r1, [r0, #0]
 80041fc:	680a      	ldr	r2, [r1, #0]
 80041fe:	f022 020e 	bic.w	r2, r2, #14
 8004202:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004204:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004206:	680a      	ldr	r2, [r1, #0]
 8004208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800420e:	6801      	ldr	r1, [r0, #0]
 8004210:	680a      	ldr	r2, [r1, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800421a:	f002 011c 	and.w	r1, r2, #28
 800421e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8004220:	2201      	movs	r2, #1
 8004222:	408a      	lsls	r2, r1
 8004224:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004228:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800422a:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800422c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800422e:	b132      	cbz	r2, 800423e <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004230:	6811      	ldr	r1, [r2, #0]
 8004232:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004236:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004238:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800423a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800423c:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004244:	2000      	movs	r0, #0
 8004246:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800424a:	4770      	bx	lr
    return HAL_ERROR;
 800424c:	2001      	movs	r0, #1
}
 800424e:	4770      	bx	lr

08004250 <HAL_DMA_Abort_IT>:
{
 8004250:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004252:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d003      	beq.n	8004264 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800425c:	2304      	movs	r3, #4
 800425e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004260:	2001      	movs	r0, #1
}
 8004262:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004264:	6802      	ldr	r2, [r0, #0]
 8004266:	6813      	ldr	r3, [r2, #0]
 8004268:	f023 030e 	bic.w	r3, r3, #14
 800426c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800426e:	6802      	ldr	r2, [r0, #0]
 8004270:	6813      	ldr	r3, [r2, #0]
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004278:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004280:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004282:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004284:	f003 021c 	and.w	r2, r3, #28
 8004288:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800428a:	2301      	movs	r3, #1
 800428c:	4093      	lsls	r3, r2
 800428e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004290:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004292:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004294:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8004296:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004298:	b133      	cbz	r3, 80042a8 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80042a4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80042a6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80042ae:	2300      	movs	r3, #0
 80042b0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80042b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80042b6:	b113      	cbz	r3, 80042be <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80042b8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	2000      	movs	r0, #0
 80042bc:	e7d1      	b.n	8004262 <HAL_DMA_Abort_IT+0x12>
 80042be:	2000      	movs	r0, #0
 80042c0:	e7cf      	b.n	8004262 <HAL_DMA_Abort_IT+0x12>
	...

080042c4 <HAL_DMA_IRQHandler>:
{
 80042c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042c8:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80042ca:	6804      	ldr	r4, [r0, #0]
 80042cc:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80042d0:	f003 031c 	and.w	r3, r3, #28
 80042d4:	2204      	movs	r2, #4
 80042d6:	409a      	lsls	r2, r3
 80042d8:	420a      	tst	r2, r1
 80042da:	d015      	beq.n	8004308 <HAL_DMA_IRQHandler+0x44>
 80042dc:	f015 0f04 	tst.w	r5, #4
 80042e0:	d012      	beq.n	8004308 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f013 0f20 	tst.w	r3, #32
 80042e8:	d103      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	f023 0304 	bic.w	r3, r3, #4
 80042f0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80042f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80042f4:	f003 021c 	and.w	r2, r3, #28
 80042f8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80042fa:	2304      	movs	r3, #4
 80042fc:	4093      	lsls	r3, r2
 80042fe:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004300:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004302:	b103      	cbz	r3, 8004306 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8004304:	4798      	blx	r3
}
 8004306:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004308:	2202      	movs	r2, #2
 800430a:	409a      	lsls	r2, r3
 800430c:	420a      	tst	r2, r1
 800430e:	d028      	beq.n	8004362 <HAL_DMA_IRQHandler+0x9e>
 8004310:	f015 0f02 	tst.w	r5, #2
 8004314:	d025      	beq.n	8004362 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	f013 0f20 	tst.w	r3, #32
 800431c:	d106      	bne.n	800432c <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f023 030a 	bic.w	r3, r3, #10
 8004324:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8004326:	2301      	movs	r3, #1
 8004328:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800432c:	6802      	ldr	r2, [r0, #0]
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_DMA_IRQHandler+0xdc>)
 8004330:	429a      	cmp	r2, r3
 8004332:	d90e      	bls.n	8004352 <HAL_DMA_IRQHandler+0x8e>
 8004334:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004336:	f003 021c 	and.w	r2, r3, #28
 800433a:	2302      	movs	r3, #2
 800433c:	4093      	lsls	r3, r2
 800433e:	4a19      	ldr	r2, [pc, #100]	; (80043a4 <HAL_DMA_IRQHandler+0xe0>)
 8004340:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004342:	2300      	movs	r3, #0
 8004344:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004348:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0db      	beq.n	8004306 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800434e:	4798      	blx	r3
 8004350:	e7d9      	b.n	8004306 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004352:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004354:	f003 021c 	and.w	r2, r3, #28
 8004358:	2302      	movs	r3, #2
 800435a:	4093      	lsls	r3, r2
 800435c:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <HAL_DMA_IRQHandler+0xe4>)
 800435e:	6053      	str	r3, [r2, #4]
 8004360:	e7ef      	b.n	8004342 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004362:	2208      	movs	r2, #8
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	420b      	tst	r3, r1
 800436a:	d0cc      	beq.n	8004306 <HAL_DMA_IRQHandler+0x42>
 800436c:	f015 0f08 	tst.w	r5, #8
 8004370:	d0c9      	beq.n	8004306 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	f023 030e 	bic.w	r3, r3, #14
 8004378:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800437a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800437c:	f003 031c 	and.w	r3, r3, #28
 8004380:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004382:	2201      	movs	r2, #1
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800438a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800438c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004390:	2300      	movs	r3, #0
 8004392:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004396:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0b4      	beq.n	8004306 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800439c:	4798      	blx	r3
  return;
 800439e:	e7b2      	b.n	8004306 <HAL_DMA_IRQHandler+0x42>
 80043a0:	40020080 	.word	0x40020080
 80043a4:	40020400 	.word	0x40020400
 80043a8:	40020000 	.word	0x40020000

080043ac <HAL_DMA_GetState>:
  return hdma->State;
 80043ac:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 80043b0:	4770      	bx	lr

080043b2 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80043b2:	b178      	cbz	r0, 80043d4 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80043b4:	6803      	ldr	r3, [r0, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80043b8:	f011 0f10 	tst.w	r1, #16
 80043bc:	d004      	beq.n	80043c8 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80043be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80043c2:	d004      	beq.n	80043ce <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80043c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80043c8:	601a      	str	r2, [r3, #0]
  return status;
 80043ca:	2000      	movs	r0, #0
 80043cc:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80043ce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80043d2:	e7f9      	b.n	80043c8 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80043d4:	2001      	movs	r0, #1
}
 80043d6:	4770      	bx	lr

080043d8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80043d8:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80043da:	4c05      	ldr	r4, [pc, #20]	; (80043f0 <FLASH_Program_DoubleWord+0x18>)
 80043dc:	6961      	ldr	r1, [r4, #20]
 80043de:	f041 0101 	orr.w	r1, r1, #1
 80043e2:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80043e4:	6002      	str	r2, [r0, #0]
 80043e6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80043ea:	6043      	str	r3, [r0, #4]
}
 80043ec:	bc10      	pop	{r4}
 80043ee:	4770      	bx	lr
 80043f0:	58004000 	.word	0x58004000

080043f4 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80043f4:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <FLASH_Program_Fast+0x34>)
 80043f6:	6953      	ldr	r3, [r2, #20]
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043fe:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004402:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004404:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004406:	f851 2b04 	ldr.w	r2, [r1], #4
 800440a:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 800440e:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8004410:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004414:	d1f7      	bne.n	8004406 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004416:	4b04      	ldr	r3, [pc, #16]	; (8004428 <FLASH_Program_Fast+0x34>)
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800441e:	d1fa      	bne.n	8004416 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004420:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	58004000 	.word	0x58004000

0800442c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_FLASH_Unlock+0x28>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	2b00      	cmp	r3, #0
 8004432:	db01      	blt.n	8004438 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2000      	movs	r0, #0
 8004436:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <HAL_FLASH_Unlock+0x28>)
 800443a:	4a07      	ldr	r2, [pc, #28]	; (8004458 <HAL_FLASH_Unlock+0x2c>)
 800443c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800443e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004442:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	db01      	blt.n	800444e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800444a:	2000      	movs	r0, #0
 800444c:	4770      	bx	lr
      status = HAL_ERROR;
 800444e:	2001      	movs	r0, #1
}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	58004000 	.word	0x58004000
 8004458:	45670123 	.word	0x45670123

0800445c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_FLASH_Lock+0x18>)
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004464:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	db01      	blt.n	8004470 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 800446c:	2001      	movs	r0, #1
}
 800446e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004470:	2000      	movs	r0, #0
 8004472:	4770      	bx	lr
 8004474:	58004000 	.word	0x58004000

08004478 <FLASH_WaitForLastOperation>:
{
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7fd fdfc 	bl	8002078 <HAL_GetTick>
 8004480:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <FLASH_WaitForLastOperation+0x64>)
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800448a:	d006      	beq.n	800449a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800448c:	f7fd fdf4 	bl	8002078 <HAL_GetTick>
 8004490:	1b00      	subs	r0, r0, r4
 8004492:	42a8      	cmp	r0, r5
 8004494:	d3f5      	bcc.n	8004482 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004496:	2003      	movs	r0, #3
}
 8004498:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <FLASH_WaitForLastOperation+0x64>)
 800449c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800449e:	f013 0f01 	tst.w	r3, #1
 80044a2:	d002      	beq.n	80044aa <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80044a4:	4a0d      	ldr	r2, [pc, #52]	; (80044dc <FLASH_WaitForLastOperation+0x64>)
 80044a6:	2101      	movs	r1, #1
 80044a8:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 80044aa:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 80044ae:	4013      	ands	r3, r2
 80044b0:	d001      	beq.n	80044b6 <FLASH_WaitForLastOperation+0x3e>
 80044b2:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <FLASH_WaitForLastOperation+0x64>)
 80044b4:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 80044b6:	b95b      	cbnz	r3, 80044d0 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <FLASH_WaitForLastOperation+0x64>)
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80044c0:	d00a      	beq.n	80044d8 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80044c2:	f7fd fdd9 	bl	8002078 <HAL_GetTick>
 80044c6:	1b00      	subs	r0, r0, r4
 80044c8:	42a8      	cmp	r0, r5
 80044ca:	d3f5      	bcc.n	80044b8 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 80044cc:	2003      	movs	r0, #3
 80044ce:	e7e3      	b.n	8004498 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 80044d0:	4a03      	ldr	r2, [pc, #12]	; (80044e0 <FLASH_WaitForLastOperation+0x68>)
 80044d2:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80044d4:	2001      	movs	r0, #1
 80044d6:	e7df      	b.n	8004498 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 80044d8:	2000      	movs	r0, #0
 80044da:	e7dd      	b.n	8004498 <FLASH_WaitForLastOperation+0x20>
 80044dc:	58004000 	.word	0x58004000
 80044e0:	20000650 	.word	0x20000650

080044e4 <HAL_FLASH_Program>:
{
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80044e8:	4b15      	ldr	r3, [pc, #84]	; (8004540 <HAL_FLASH_Program+0x5c>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d025      	beq.n	800453c <HAL_FLASH_Program+0x58>
 80044f0:	4604      	mov	r4, r0
 80044f2:	460d      	mov	r5, r1
 80044f4:	4616      	mov	r6, r2
 80044f6:	4b12      	ldr	r3, [pc, #72]	; (8004540 <HAL_FLASH_Program+0x5c>)
 80044f8:	2201      	movs	r2, #1
 80044fa:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80044fc:	2200      	movs	r2, #0
 80044fe:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004504:	f7ff ffb8 	bl	8004478 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004508:	b970      	cbnz	r0, 8004528 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800450a:	2c01      	cmp	r4, #1
 800450c:	d010      	beq.n	8004530 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800450e:	4631      	mov	r1, r6
 8004510:	4628      	mov	r0, r5
 8004512:	f7ff ff6f 	bl	80043f4 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800451a:	f7ff ffad 	bl	8004478 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <HAL_FLASH_Program+0x60>)
 8004520:	6953      	ldr	r3, [r2, #20]
 8004522:	ea23 0404 	bic.w	r4, r3, r4
 8004526:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_FLASH_Program+0x5c>)
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
}
 800452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8004530:	4632      	mov	r2, r6
 8004532:	463b      	mov	r3, r7
 8004534:	4628      	mov	r0, r5
 8004536:	f7ff ff4f 	bl	80043d8 <FLASH_Program_DoubleWord>
 800453a:	e7ec      	b.n	8004516 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 800453c:	2002      	movs	r0, #2
 800453e:	e7f6      	b.n	800452e <HAL_FLASH_Program+0x4a>
 8004540:	20000650 	.word	0x20000650
 8004544:	58004000 	.word	0x58004000

08004548 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004548:	4a03      	ldr	r2, [pc, #12]	; (8004558 <FLASH_MassErase+0x10>)
 800454a:	6953      	ldr	r3, [r2, #20]
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	6153      	str	r3, [r2, #20]
#endif
}
 8004556:	4770      	bx	lr
 8004558:	58004000 	.word	0x58004000

0800455c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800455c:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <FLASH_FlushCaches+0x64>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004564:	2b01      	cmp	r3, #1
 8004566:	d006      	beq.n	8004576 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004568:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <FLASH_FlushCaches+0x64>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004570:	2b01      	cmp	r3, #1
 8004572:	d012      	beq.n	800459a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004574:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004576:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <FLASH_FlushCaches+0x64>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800457e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	e7e6      	b.n	8004568 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800459a:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <FLASH_FlushCaches+0x64>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045b2:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	e7da      	b.n	8004574 <FLASH_FlushCaches+0x18>
 80045be:	bf00      	nop
 80045c0:	58004000 	.word	0x58004000

080045c4 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80045c4:	4a03      	ldr	r2, [pc, #12]	; (80045d4 <FLASH_AcknowledgePageErase+0x10>)
 80045c6:	6953      	ldr	r3, [r2, #20]
 80045c8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80045cc:	f023 0302 	bic.w	r3, r3, #2
 80045d0:	6153      	str	r3, [r2, #20]
#endif
}
 80045d2:	4770      	bx	lr
 80045d4:	58004000 	.word	0x58004000

080045d8 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80045d8:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <FLASH_PageErase+0x18>)
 80045da:	6953      	ldr	r3, [r2, #20]
 80045dc:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80045e0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80045e4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80045e8:	f040 0002 	orr.w	r0, r0, #2
 80045ec:	6150      	str	r0, [r2, #20]
}
 80045ee:	4770      	bx	lr
 80045f0:	58004000 	.word	0x58004000

080045f4 <HAL_FLASHEx_Erase>:
{
 80045f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_FLASHEx_Erase+0x7c>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d035      	beq.n	800466a <HAL_FLASHEx_Erase+0x76>
 80045fe:	4605      	mov	r5, r0
 8004600:	460f      	mov	r7, r1
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_FLASHEx_Erase+0x7c>)
 8004604:	2201      	movs	r2, #1
 8004606:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004608:	2200      	movs	r2, #0
 800460a:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800460c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004610:	f7ff ff32 	bl	8004478 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8004614:	4606      	mov	r6, r0
 8004616:	bb18      	cbnz	r0, 8004660 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	2b04      	cmp	r3, #4
 800461c:	d013      	beq.n	8004646 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004624:	686c      	ldr	r4, [r5, #4]
 8004626:	686b      	ldr	r3, [r5, #4]
 8004628:	68aa      	ldr	r2, [r5, #8]
 800462a:	4413      	add	r3, r2
 800462c:	42a3      	cmp	r3, r4
 800462e:	d913      	bls.n	8004658 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff ffd1 	bl	80045d8 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800463a:	f7ff ff1d 	bl	8004478 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 800463e:	4606      	mov	r6, r0
 8004640:	b948      	cbnz	r0, 8004656 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004642:	3401      	adds	r4, #1
 8004644:	e7ef      	b.n	8004626 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004646:	f7ff ff7f 	bl	8004548 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800464a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800464e:	f7ff ff13 	bl	8004478 <FLASH_WaitForLastOperation>
 8004652:	4606      	mov	r6, r0
 8004654:	e002      	b.n	800465c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004656:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004658:	f7ff ffb4 	bl	80045c4 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 800465c:	f7ff ff7e 	bl	800455c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <HAL_FLASHEx_Erase+0x7c>)
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
}
 8004666:	4630      	mov	r0, r6
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800466a:	2602      	movs	r6, #2
 800466c:	e7fb      	b.n	8004666 <HAL_FLASHEx_Erase+0x72>
 800466e:	bf00      	nop
 8004670:	20000650 	.word	0x20000650

08004674 <HAL_FLASHEx_Erase_IT>:
{
 8004674:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(&pFlash);
 8004676:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <HAL_FLASHEx_Erase_IT+0x60>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d028      	beq.n	80046d0 <HAL_FLASHEx_Erase_IT+0x5c>
 800467e:	4604      	mov	r4, r0
 8004680:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <HAL_FLASHEx_Erase_IT+0x60>)
 8004682:	2201      	movs	r2, #1
 8004684:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800468a:	6802      	ldr	r2, [r0, #0]
 800468c:	609a      	str	r2, [r3, #8]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800468e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004692:	f7ff fef1 	bl	8004478 <FLASH_WaitForLastOperation>
  if (status != HAL_OK)
 8004696:	4605      	mov	r5, r0
 8004698:	b120      	cbz	r0, 80046a4 <HAL_FLASHEx_Erase_IT+0x30>
    __HAL_UNLOCK(&pFlash);
 800469a:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <HAL_FLASHEx_Erase_IT+0x60>)
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
}
 80046a0:	4628      	mov	r0, r5
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80046a4:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <HAL_FLASHEx_Erase_IT+0x64>)
 80046a6:	6953      	ldr	r3, [r2, #20]
 80046a8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80046ac:	6153      	str	r3, [r2, #20]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80046ae:	6823      	ldr	r3, [r4, #0]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d007      	beq.n	80046c4 <HAL_FLASHEx_Erase_IT+0x50>
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80046b4:	68a2      	ldr	r2, [r4, #8]
 80046b6:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <HAL_FLASHEx_Erase_IT+0x60>)
 80046b8:	615a      	str	r2, [r3, #20]
      pFlash.Page = pEraseInit->Page;
 80046ba:	6860      	ldr	r0, [r4, #4]
 80046bc:	6118      	str	r0, [r3, #16]
      FLASH_PageErase(pEraseInit->Page);
 80046be:	f7ff ff8b 	bl	80045d8 <FLASH_PageErase>
 80046c2:	e7ed      	b.n	80046a0 <HAL_FLASHEx_Erase_IT+0x2c>
      pFlash.Page = 0;
 80046c4:	4b03      	ldr	r3, [pc, #12]	; (80046d4 <HAL_FLASHEx_Erase_IT+0x60>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	611a      	str	r2, [r3, #16]
      FLASH_MassErase();
 80046ca:	f7ff ff3d 	bl	8004548 <FLASH_MassErase>
 80046ce:	e7e7      	b.n	80046a0 <HAL_FLASHEx_Erase_IT+0x2c>
  __HAL_LOCK(&pFlash);
 80046d0:	2502      	movs	r5, #2
 80046d2:	e7e5      	b.n	80046a0 <HAL_FLASHEx_Erase_IT+0x2c>
 80046d4:	20000650 	.word	0x20000650
 80046d8:	58004000 	.word	0x58004000

080046dc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046dc:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80046de:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046e0:	e069      	b.n	80047b6 <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046e2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046e4:	005e      	lsls	r6, r3, #1
 80046e6:	2403      	movs	r4, #3
 80046e8:	40b4      	lsls	r4, r6
 80046ea:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ee:	68cc      	ldr	r4, [r1, #12]
 80046f0:	40b4      	lsls	r4, r6
 80046f2:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80046f4:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046f6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046f8:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046fc:	684c      	ldr	r4, [r1, #4]
 80046fe:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004702:	409c      	lsls	r4, r3
 8004704:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004708:	6044      	str	r4, [r0, #4]
 800470a:	e065      	b.n	80047d8 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800470c:	08dd      	lsrs	r5, r3, #3
 800470e:	3508      	adds	r5, #8
 8004710:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004714:	f003 0407 	and.w	r4, r3, #7
 8004718:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800471c:	240f      	movs	r4, #15
 800471e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004722:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004726:	690c      	ldr	r4, [r1, #16]
 8004728:	fa04 f40c 	lsl.w	r4, r4, ip
 800472c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004730:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004734:	e067      	b.n	8004806 <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004736:	2402      	movs	r4, #2
 8004738:	e000      	b.n	800473c <HAL_GPIO_Init+0x60>
 800473a:	2400      	movs	r4, #0
 800473c:	fa04 f40e 	lsl.w	r4, r4, lr
 8004740:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004742:	f10c 0c02 	add.w	ip, ip, #2
 8004746:	4d4b      	ldr	r5, [pc, #300]	; (8004874 <HAL_GPIO_Init+0x198>)
 8004748:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800474c:	4c4a      	ldr	r4, [pc, #296]	; (8004878 <HAL_GPIO_Init+0x19c>)
 800474e:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004750:	43d4      	mvns	r4, r2
 8004752:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004756:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800475a:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 800475e:	d001      	beq.n	8004764 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004760:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8004764:	4d44      	ldr	r5, [pc, #272]	; (8004878 <HAL_GPIO_Init+0x19c>)
 8004766:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004768:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800476a:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800476e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004772:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8004776:	d001      	beq.n	800477c <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8004778:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800477c:	4d3e      	ldr	r5, [pc, #248]	; (8004878 <HAL_GPIO_Init+0x19c>)
 800477e:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004780:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004784:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004788:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800478c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8004790:	d001      	beq.n	8004796 <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8004792:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004796:	4d38      	ldr	r5, [pc, #224]	; (8004878 <HAL_GPIO_Init+0x19c>)
 8004798:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800479c:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80047a0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047a2:	684e      	ldr	r6, [r1, #4]
 80047a4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80047a8:	d001      	beq.n	80047ae <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 80047aa:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80047ae:	4a32      	ldr	r2, [pc, #200]	; (8004878 <HAL_GPIO_Init+0x19c>)
 80047b0:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80047b4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047b6:	680a      	ldr	r2, [r1, #0]
 80047b8:	fa32 f403 	lsrs.w	r4, r2, r3
 80047bc:	d058      	beq.n	8004870 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047be:	f04f 0c01 	mov.w	ip, #1
 80047c2:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 80047c6:	ea1c 0202 	ands.w	r2, ip, r2
 80047ca:	d0f3      	beq.n	80047b4 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047cc:	684c      	ldr	r4, [r1, #4]
 80047ce:	f004 0403 	and.w	r4, r4, #3
 80047d2:	3c01      	subs	r4, #1
 80047d4:	2c01      	cmp	r4, #1
 80047d6:	d984      	bls.n	80046e2 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047d8:	684c      	ldr	r4, [r1, #4]
 80047da:	f004 0403 	and.w	r4, r4, #3
 80047de:	2c03      	cmp	r4, #3
 80047e0:	d00c      	beq.n	80047fc <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80047e2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047e4:	005d      	lsls	r5, r3, #1
 80047e6:	f04f 0c03 	mov.w	ip, #3
 80047ea:	fa0c fc05 	lsl.w	ip, ip, r5
 80047ee:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047f2:	688c      	ldr	r4, [r1, #8]
 80047f4:	40ac      	lsls	r4, r5
 80047f6:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80047fa:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fc:	684c      	ldr	r4, [r1, #4]
 80047fe:	f004 0403 	and.w	r4, r4, #3
 8004802:	2c02      	cmp	r4, #2
 8004804:	d082      	beq.n	800470c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8004806:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004808:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800480c:	f04f 0c03 	mov.w	ip, #3
 8004810:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004814:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004818:	684c      	ldr	r4, [r1, #4]
 800481a:	f004 0403 	and.w	r4, r4, #3
 800481e:	fa04 f40e 	lsl.w	r4, r4, lr
 8004822:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004826:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004828:	684c      	ldr	r4, [r1, #4]
 800482a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 800482e:	d0c1      	beq.n	80047b4 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004830:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004834:	f10c 0502 	add.w	r5, ip, #2
 8004838:	4c0e      	ldr	r4, [pc, #56]	; (8004874 <HAL_GPIO_Init+0x198>)
 800483a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800483e:	f003 0403 	and.w	r4, r3, #3
 8004842:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004846:	2407      	movs	r4, #7
 8004848:	fa04 f40e 	lsl.w	r4, r4, lr
 800484c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004850:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004854:	f43f af71 	beq.w	800473a <HAL_GPIO_Init+0x5e>
 8004858:	4c08      	ldr	r4, [pc, #32]	; (800487c <HAL_GPIO_Init+0x1a0>)
 800485a:	42a0      	cmp	r0, r4
 800485c:	d006      	beq.n	800486c <HAL_GPIO_Init+0x190>
 800485e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004862:	42a0      	cmp	r0, r4
 8004864:	f43f af67 	beq.w	8004736 <HAL_GPIO_Init+0x5a>
 8004868:	2407      	movs	r4, #7
 800486a:	e767      	b.n	800473c <HAL_GPIO_Init+0x60>
 800486c:	2401      	movs	r4, #1
 800486e:	e765      	b.n	800473c <HAL_GPIO_Init+0x60>
  }
}
 8004870:	bd70      	pop	{r4, r5, r6, pc}
 8004872:	bf00      	nop
 8004874:	40010000 	.word	0x40010000
 8004878:	58000800 	.word	0x58000800
 800487c:	48000400 	.word	0x48000400

08004880 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8004880:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004882:	fa31 f203 	lsrs.w	r2, r1, r3
 8004886:	d071      	beq.n	800496c <HAL_GPIO_DeInit+0xec>
{
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	e02e      	b.n	80048ea <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800488c:	2502      	movs	r5, #2
 800488e:	e000      	b.n	8004892 <HAL_GPIO_DeInit+0x12>
 8004890:	2500      	movs	r5, #0
 8004892:	fa05 fc0c 	lsl.w	ip, r5, ip
 8004896:	45a4      	cmp	ip, r4
 8004898:	d049      	beq.n	800492e <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800489a:	6804      	ldr	r4, [r0, #0]
 800489c:	005d      	lsls	r5, r3, #1
 800489e:	f04f 0c03 	mov.w	ip, #3
 80048a2:	fa0c fc05 	lsl.w	ip, ip, r5
 80048a6:	ea44 040c 	orr.w	r4, r4, ip
 80048aa:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80048ac:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80048b0:	f10e 0e08 	add.w	lr, lr, #8
 80048b4:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80048b8:	f003 0507 	and.w	r5, r3, #7
 80048bc:	00ae      	lsls	r6, r5, #2
 80048be:	250f      	movs	r5, #15
 80048c0:	40b5      	lsls	r5, r6
 80048c2:	ea24 0405 	bic.w	r4, r4, r5
 80048c6:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048ca:	6884      	ldr	r4, [r0, #8]
 80048cc:	ea24 040c 	bic.w	r4, r4, ip
 80048d0:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80048d2:	6844      	ldr	r4, [r0, #4]
 80048d4:	ea24 0202 	bic.w	r2, r4, r2
 80048d8:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048da:	68c2      	ldr	r2, [r0, #12]
 80048dc:	ea22 020c 	bic.w	r2, r2, ip
 80048e0:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80048e2:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80048e4:	fa31 f203 	lsrs.w	r2, r1, r3
 80048e8:	d03f      	beq.n	800496a <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80048ea:	2201      	movs	r2, #1
 80048ec:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80048ee:	ea12 0701 	ands.w	r7, r2, r1
 80048f2:	d0f6      	beq.n	80048e2 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80048f4:	089e      	lsrs	r6, r3, #2
 80048f6:	1cb5      	adds	r5, r6, #2
 80048f8:	4c1d      	ldr	r4, [pc, #116]	; (8004970 <HAL_GPIO_DeInit+0xf0>)
 80048fa:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80048fe:	f003 0c03 	and.w	ip, r3, #3
 8004902:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004906:	f04f 0e07 	mov.w	lr, #7
 800490a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800490e:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004912:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004916:	d0bb      	beq.n	8004890 <HAL_GPIO_DeInit+0x10>
 8004918:	4d16      	ldr	r5, [pc, #88]	; (8004974 <HAL_GPIO_DeInit+0xf4>)
 800491a:	42a8      	cmp	r0, r5
 800491c:	d005      	beq.n	800492a <HAL_GPIO_DeInit+0xaa>
 800491e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004922:	42a8      	cmp	r0, r5
 8004924:	d0b2      	beq.n	800488c <HAL_GPIO_DeInit+0xc>
 8004926:	2507      	movs	r5, #7
 8004928:	e7b3      	b.n	8004892 <HAL_GPIO_DeInit+0x12>
 800492a:	2501      	movs	r5, #1
 800492c:	e7b1      	b.n	8004892 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 800492e:	4c12      	ldr	r4, [pc, #72]	; (8004978 <HAL_GPIO_DeInit+0xf8>)
 8004930:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004934:	ea25 0507 	bic.w	r5, r5, r7
 8004938:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800493c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004940:	ea25 0507 	bic.w	r5, r5, r7
 8004944:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004948:	6825      	ldr	r5, [r4, #0]
 800494a:	ea25 0507 	bic.w	r5, r5, r7
 800494e:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004950:	6865      	ldr	r5, [r4, #4]
 8004952:	ea25 0707 	bic.w	r7, r5, r7
 8004956:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004958:	4d05      	ldr	r5, [pc, #20]	; (8004970 <HAL_GPIO_DeInit+0xf0>)
 800495a:	3602      	adds	r6, #2
 800495c:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004960:	ea24 040e 	bic.w	r4, r4, lr
 8004964:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004968:	e797      	b.n	800489a <HAL_GPIO_DeInit+0x1a>
  }
}
 800496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40010000 	.word	0x40010000
 8004974:	48000400 	.word	0x48000400
 8004978:	58000800 	.word	0x58000800

0800497c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800497c:	b10a      	cbz	r2, 8004982 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800497e:	6181      	str	r1, [r0, #24]
 8004980:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004982:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004984:	4770      	bx	lr

08004986 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004986:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004988:	ea01 0203 	and.w	r2, r1, r3
 800498c:	ea21 0103 	bic.w	r1, r1, r3
 8004990:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004994:	6181      	str	r1, [r0, #24]
}
 8004996:	4770      	bx	lr

08004998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004998:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	4203      	tst	r3, r0
 80049a0:	d100      	bne.n	80049a4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80049a2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049a4:	4b02      	ldr	r3, [pc, #8]	; (80049b0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80049a6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049a8:	f7fe fbea 	bl	8003180 <HAL_GPIO_EXTI_Callback>
}
 80049ac:	e7f9      	b.n	80049a2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80049ae:	bf00      	nop
 80049b0:	58000800 	.word	0x58000800

080049b4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049b4:	6803      	ldr	r3, [r0, #0]
 80049b6:	699a      	ldr	r2, [r3, #24]
 80049b8:	f012 0f02 	tst.w	r2, #2
 80049bc:	d001      	beq.n	80049c2 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049be:	2200      	movs	r2, #0
 80049c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c2:	6803      	ldr	r3, [r0, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	f012 0f01 	tst.w	r2, #1
 80049ca:	d103      	bne.n	80049d4 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	619a      	str	r2, [r3, #24]
  }
}
 80049d4:	4770      	bx	lr

080049d6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049d6:	b410      	push	{r4}
 80049d8:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80049de:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049e2:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049e4:	4321      	orrs	r1, r4
 80049e6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049ea:	6802      	ldr	r2, [r0, #0]
 80049ec:	6853      	ldr	r3, [r2, #4]
 80049ee:	0d64      	lsrs	r4, r4, #21
 80049f0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80049f4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80049f8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80049fc:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8004a00:	f044 0403 	orr.w	r4, r4, #3
 8004a04:	ea23 0404 	bic.w	r4, r3, r4
 8004a08:	4321      	orrs	r1, r4
 8004a0a:	6051      	str	r1, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a0c:	bc10      	pop	{r4}
 8004a0e:	4770      	bx	lr

08004a10 <I2C_Enable_IRQ>:
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8004a10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a12:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <I2C_Enable_IRQ+0x6c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d015      	beq.n	8004a44 <I2C_Enable_IRQ+0x34>
 8004a18:	4a19      	ldr	r2, [pc, #100]	; (8004a80 <I2C_Enable_IRQ+0x70>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d012      	beq.n	8004a44 <I2C_Enable_IRQ+0x34>
      tmpisr |= I2C_IT_TCI;
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a1e:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004a22:	d129      	bne.n	8004a78 <I2C_Enable_IRQ+0x68>
  uint32_t tmpisr = 0U;
 8004a24:	2300      	movs	r3, #0
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a26:	f011 0f01 	tst.w	r1, #1
 8004a2a:	d001      	beq.n	8004a30 <I2C_Enable_IRQ+0x20>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004a2c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a30:	f011 0f02 	tst.w	r1, #2
 8004a34:	d001      	beq.n	8004a3a <I2C_Enable_IRQ+0x2a>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004a36:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a3a:	2920      	cmp	r1, #32
 8004a3c:	d10c      	bne.n	8004a58 <I2C_Enable_IRQ+0x48>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004a3e:	f043 0320 	orr.w	r3, r3, #32
 8004a42:	e009      	b.n	8004a58 <I2C_Enable_IRQ+0x48>
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a44:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004a48:	d10b      	bne.n	8004a62 <I2C_Enable_IRQ+0x52>
  uint32_t tmpisr = 0U;
 8004a4a:	2300      	movs	r3, #0
    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a4c:	2910      	cmp	r1, #16
 8004a4e:	d00a      	beq.n	8004a66 <I2C_Enable_IRQ+0x56>
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a50:	2920      	cmp	r1, #32
 8004a52:	d00b      	beq.n	8004a6c <I2C_Enable_IRQ+0x5c>
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a54:	2940      	cmp	r1, #64	; 0x40
 8004a56:	d00c      	beq.n	8004a72 <I2C_Enable_IRQ+0x62>
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004a58:	6801      	ldr	r1, [r0, #0]
 8004a5a:	680a      	ldr	r2, [r1, #0]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
}
 8004a60:	4770      	bx	lr
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a62:	23b8      	movs	r3, #184	; 0xb8
 8004a64:	e7f2      	b.n	8004a4c <I2C_Enable_IRQ+0x3c>
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a66:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004a6a:	e7f1      	b.n	8004a50 <I2C_Enable_IRQ+0x40>
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004a6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004a70:	e7f0      	b.n	8004a54 <I2C_Enable_IRQ+0x44>
      tmpisr |= I2C_IT_TCI;
 8004a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a76:	e7ef      	b.n	8004a58 <I2C_Enable_IRQ+0x48>
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a78:	23b8      	movs	r3, #184	; 0xb8
 8004a7a:	e7d4      	b.n	8004a26 <I2C_Enable_IRQ+0x16>
 8004a7c:	080056b9 	.word	0x080056b9
 8004a80:	08005595 	.word	0x08005595

08004a84 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a84:	f011 0f01 	tst.w	r1, #1
 8004a88:	d009      	beq.n	8004a9e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004a8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a92:	2b28      	cmp	r3, #40	; 0x28
 8004a94:	d001      	beq.n	8004a9a <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a96:	23f2      	movs	r3, #242	; 0xf2
 8004a98:	e002      	b.n	8004aa0 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a9a:	2342      	movs	r3, #66	; 0x42
 8004a9c:	e000      	b.n	8004aa0 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8004a9e:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004aa0:	f011 0f02 	tst.w	r1, #2
 8004aa4:	d009      	beq.n	8004aba <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004aa6:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aaa:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004aae:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004ab2:	2a28      	cmp	r2, #40	; 0x28
 8004ab4:	d010      	beq.n	8004ad8 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ab6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004aba:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004abe:	d10d      	bne.n	8004adc <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ac0:	2910      	cmp	r1, #16
 8004ac2:	d00e      	beq.n	8004ae2 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ac4:	2920      	cmp	r1, #32
 8004ac6:	d00f      	beq.n	8004ae8 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ac8:	2940      	cmp	r1, #64	; 0x40
 8004aca:	d010      	beq.n	8004aee <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004acc:	6801      	ldr	r1, [r0, #0]
 8004ace:	680a      	ldr	r2, [r1, #0]
 8004ad0:	ea22 0303 	bic.w	r3, r2, r3
 8004ad4:	600b      	str	r3, [r1, #0]
}
 8004ad6:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004ad8:	4663      	mov	r3, ip
 8004ada:	e7ee      	b.n	8004aba <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004adc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004ae0:	e7ee      	b.n	8004ac0 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004ae2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004ae6:	e7ed      	b.n	8004ac4 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8004ae8:	f043 0320 	orr.w	r3, r3, #32
 8004aec:	e7ec      	b.n	8004ac8 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8004aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af2:	e7eb      	b.n	8004acc <I2C_Disable_IRQ+0x48>

08004af4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d059      	beq.n	8004bac <HAL_I2C_Init+0xb8>
{
 8004af8:	b510      	push	{r4, lr}
 8004afa:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004afc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d043      	beq.n	8004b8c <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b04:	2324      	movs	r3, #36	; 0x24
 8004b06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b14:	6863      	ldr	r3, [r4, #4]
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004b1c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	6893      	ldr	r3, [r2, #8]
 8004b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b26:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b28:	68e3      	ldr	r3, [r4, #12]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d033      	beq.n	8004b96 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b2e:	68a3      	ldr	r3, [r4, #8]
 8004b30:	6822      	ldr	r2, [r4, #0]
 8004b32:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004b36:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b38:	68e3      	ldr	r3, [r4, #12]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d031      	beq.n	8004ba2 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b3e:	6822      	ldr	r2, [r4, #0]
 8004b40:	6853      	ldr	r3, [r2, #4]
 8004b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b4c:	6822      	ldr	r2, [r4, #0]
 8004b4e:	68d3      	ldr	r3, [r2, #12]
 8004b50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b54:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b56:	6923      	ldr	r3, [r4, #16]
 8004b58:	6962      	ldr	r2, [r4, #20]
 8004b5a:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b5c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b64:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b66:	69e3      	ldr	r3, [r4, #28]
 8004b68:	6a21      	ldr	r1, [r4, #32]
 8004b6a:	6822      	ldr	r2, [r4, #0]
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	6813      	ldr	r3, [r2, #0]
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	2320      	movs	r3, #32
 8004b80:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b84:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b86:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004b8a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004b8c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004b90:	f7fc fddc 	bl	800174c <HAL_I2C_MspInit>
 8004b94:	e7b6      	b.n	8004b04 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b96:	68a3      	ldr	r3, [r4, #8]
 8004b98:	6822      	ldr	r2, [r4, #0]
 8004b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b9e:	6093      	str	r3, [r2, #8]
 8004ba0:	e7ca      	b.n	8004b38 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	e7c8      	b.n	8004b3e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004bac:	2001      	movs	r0, #1
}
 8004bae:	4770      	bx	lr

08004bb0 <HAL_I2C_Master_Transmit_DMA>:
{
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb6:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
 8004bba:	b2c0      	uxtb	r0, r0
 8004bbc:	2820      	cmp	r0, #32
 8004bbe:	f040 808d 	bne.w	8004cdc <HAL_I2C_Master_Transmit_DMA+0x12c>
 8004bc2:	460d      	mov	r5, r1
 8004bc4:	4611      	mov	r1, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	6992      	ldr	r2, [r2, #24]
 8004bca:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004bce:	f040 8088 	bne.w	8004ce2 <HAL_I2C_Master_Transmit_DMA+0x132>
    __HAL_LOCK(hi2c);
 8004bd2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004bd6:	2a01      	cmp	r2, #1
 8004bd8:	f000 8085 	beq.w	8004ce6 <HAL_I2C_Master_Transmit_DMA+0x136>
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004be2:	2221      	movs	r2, #33	; 0x21
 8004be4:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004be8:	2210      	movs	r2, #16
 8004bea:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004bee:	2200      	movs	r2, #0
 8004bf0:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->pBuffPtr    = pData;
 8004bf2:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bf4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf6:	4b3d      	ldr	r3, [pc, #244]	; (8004cec <HAL_I2C_Master_Transmit_DMA+0x13c>)
 8004bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004bfa:	4b3d      	ldr	r3, [pc, #244]	; (8004cf0 <HAL_I2C_Master_Transmit_DMA+0x140>)
 8004bfc:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2bff      	cmp	r3, #255	; 0xff
 8004c04:	d927      	bls.n	8004c56 <HAL_I2C_Master_Transmit_DMA+0xa6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c06:	23ff      	movs	r3, #255	; 0xff
 8004c08:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004c0a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if (hi2c->XferSize > 0U)
 8004c0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004c10:	2a00      	cmp	r2, #0
 8004c12:	d04f      	beq.n	8004cb4 <HAL_I2C_Master_Transmit_DMA+0x104>
      if (hi2c->hdmatx != NULL)
 8004c14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c16:	b31b      	cbz	r3, 8004c60 <HAL_I2C_Master_Transmit_DMA+0xb0>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004c18:	4a36      	ldr	r2, [pc, #216]	; (8004cf4 <HAL_I2C_Master_Transmit_DMA+0x144>)
 8004c1a:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c1e:	4a36      	ldr	r2, [pc, #216]	; (8004cf8 <HAL_I2C_Master_Transmit_DMA+0x148>)
 8004c20:	635a      	str	r2, [r3, #52]	; 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004c22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c24:	2300      	movs	r3, #0
 8004c26:	6313      	str	r3, [r2, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004c28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c2a:	6393      	str	r3, [r2, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004c2c:	6822      	ldr	r2, [r4, #0]
 8004c2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004c30:	3228      	adds	r2, #40	; 0x28
 8004c32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004c34:	f7ff fa86 	bl	8004144 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8004c38:	b300      	cbz	r0, 8004c7c <HAL_I2C_Master_Transmit_DMA+0xcc>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004c3a:	2320      	movs	r3, #32
 8004c3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c40:	2200      	movs	r2, #0
 8004c42:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004c46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c48:	f043 0310 	orr.w	r3, r3, #16
 8004c4c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004c4e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004c52:	2001      	movs	r0, #1
 8004c54:	e043      	b.n	8004cde <HAL_I2C_Master_Transmit_DMA+0x12e>
      hi2c->XferSize = hi2c->XferCount;
 8004c56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c58:	8523      	strh	r3, [r4, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004c5a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8004c5e:	e7d6      	b.n	8004c0e <HAL_I2C_Master_Transmit_DMA+0x5e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004c60:	2320      	movs	r3, #32
 8004c62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c66:	2200      	movs	r2, #0
 8004c68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c72:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004c74:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004c78:	2001      	movs	r0, #1
 8004c7a:	e030      	b.n	8004cde <HAL_I2C_Master_Transmit_DMA+0x12e>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004c7c:	4b1f      	ldr	r3, [pc, #124]	; (8004cfc <HAL_I2C_Master_Transmit_DMA+0x14c>)
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	4633      	mov	r3, r6
 8004c82:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004c86:	4629      	mov	r1, r5
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f7ff fea4 	bl	80049d6 <I2C_TransferConfig>
        hi2c->XferCount -= hi2c->XferSize;
 8004c8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8563      	strh	r3, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004ca0:	2110      	movs	r1, #16
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7ff feb4 	bl	8004a10 <I2C_Enable_IRQ>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004ca8:	6822      	ldr	r2, [r4, #0]
 8004caa:	6813      	ldr	r3, [r2, #0]
 8004cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	e011      	b.n	8004cd8 <HAL_I2C_Master_Transmit_DMA+0x128>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <HAL_I2C_Master_Transmit_DMA+0x150>)
 8004cb6:	6363      	str	r3, [r4, #52]	; 0x34
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cb8:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <HAL_I2C_Master_Transmit_DMA+0x14c>)
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cc0:	b2d2      	uxtb	r2, r2
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7ff fe86 	bl	80049d6 <I2C_TransferConfig>
      __HAL_UNLOCK(hi2c);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f7ff fe9c 	bl	8004a10 <I2C_Enable_IRQ>
    return HAL_OK;
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e000      	b.n	8004cde <HAL_I2C_Master_Transmit_DMA+0x12e>
    return HAL_BUSY;
 8004cdc:	2002      	movs	r0, #2
}
 8004cde:	b002      	add	sp, #8
 8004ce0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_BUSY;
 8004ce2:	2002      	movs	r0, #2
 8004ce4:	e7fb      	b.n	8004cde <HAL_I2C_Master_Transmit_DMA+0x12e>
    __HAL_LOCK(hi2c);
 8004ce6:	2002      	movs	r0, #2
 8004ce8:	e7f9      	b.n	8004cde <HAL_I2C_Master_Transmit_DMA+0x12e>
 8004cea:	bf00      	nop
 8004cec:	ffff0000 	.word	0xffff0000
 8004cf0:	080056b9 	.word	0x080056b9
 8004cf4:	08005811 	.word	0x08005811
 8004cf8:	080057fb 	.word	0x080057fb
 8004cfc:	80002000 	.word	0x80002000
 8004d00:	08005415 	.word	0x08005415

08004d04 <HAL_I2C_MasterTxCpltCallback>:
}
 8004d04:	4770      	bx	lr

08004d06 <HAL_I2C_MasterRxCpltCallback>:
}
 8004d06:	4770      	bx	lr

08004d08 <I2C_ITMasterSeqCplt>:
{
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	4604      	mov	r4, r0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d12:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b21      	cmp	r3, #33	; 0x21
 8004d1a:	d00f      	beq.n	8004d3c <I2C_ITMasterSeqCplt+0x34>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d1c:	2320      	movs	r3, #32
 8004d1e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d22:	2312      	movs	r3, #18
 8004d24:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004d26:	2500      	movs	r5, #0
 8004d28:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004d2a:	2102      	movs	r1, #2
 8004d2c:	f7ff feaa 	bl	8004a84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d30:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7ff ffe6 	bl	8004d06 <HAL_I2C_MasterRxCpltCallback>
}
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d42:	2311      	movs	r3, #17
 8004d44:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004d46:	2500      	movs	r5, #0
 8004d48:	6345      	str	r5, [r0, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	f7ff fe9a 	bl	8004a84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004d50:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d54:	4620      	mov	r0, r4
 8004d56:	f7ff ffd5 	bl	8004d04 <HAL_I2C_MasterTxCpltCallback>
 8004d5a:	e7ee      	b.n	8004d3a <I2C_ITMasterSeqCplt+0x32>

08004d5c <HAL_I2C_SlaveTxCpltCallback>:
}
 8004d5c:	4770      	bx	lr

08004d5e <HAL_I2C_SlaveRxCpltCallback>:
}
 8004d5e:	4770      	bx	lr

08004d60 <I2C_ITSlaveSeqCplt>:
{
 8004d60:	b510      	push	{r4, lr}
 8004d62:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004d64:	6803      	ldr	r3, [r0, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d68:	2100      	movs	r1, #0
 8004d6a:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d6e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004d72:	d00e      	beq.n	8004d92 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d7a:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004d7c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b29      	cmp	r3, #41	; 0x29
 8004d84:	d00d      	beq.n	8004da2 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d86:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8e:	d018      	beq.n	8004dc2 <I2C_ITSlaveSeqCplt+0x62>
}
 8004d90:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d92:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004d96:	d0f1      	beq.n	8004d7c <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e7ec      	b.n	8004d7c <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004da2:	2328      	movs	r3, #40	; 0x28
 8004da4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004da8:	2321      	movs	r3, #33	; 0x21
 8004daa:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004dac:	2101      	movs	r1, #1
 8004dae:	4620      	mov	r0, r4
 8004db0:	f7ff fe68 	bl	8004a84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004db4:	2300      	movs	r3, #0
 8004db6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f7ff ffce 	bl	8004d5c <HAL_I2C_SlaveTxCpltCallback>
 8004dc0:	e7e6      	b.n	8004d90 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004dc2:	2328      	movs	r3, #40	; 0x28
 8004dc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dc8:	2322      	movs	r3, #34	; 0x22
 8004dca:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004dcc:	2102      	movs	r1, #2
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f7ff fe58 	bl	8004a84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f7ff ffbf 	bl	8004d5e <HAL_I2C_SlaveRxCpltCallback>
}
 8004de0:	e7d6      	b.n	8004d90 <I2C_ITSlaveSeqCplt+0x30>

08004de2 <HAL_I2C_AddrCallback>:
}
 8004de2:	4770      	bx	lr

08004de4 <I2C_ITAddrCplt>:
{
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004de8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004dec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004df0:	2b28      	cmp	r3, #40	; 0x28
 8004df2:	d006      	beq.n	8004e02 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004df4:	6803      	ldr	r3, [r0, #0]
 8004df6:	2208      	movs	r2, #8
 8004df8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004e02:	6803      	ldr	r3, [r0, #0]
 8004e04:	699e      	ldr	r6, [r3, #24]
 8004e06:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004e0a:	699a      	ldr	r2, [r3, #24]
 8004e0c:	0c12      	lsrs	r2, r2, #16
 8004e0e:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004e18:	68df      	ldr	r7, [r3, #12]
 8004e1a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e1e:	68c1      	ldr	r1, [r0, #12]
 8004e20:	2902      	cmp	r1, #2
 8004e22:	d122      	bne.n	8004e6a <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004e24:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8004e28:	f015 0f06 	tst.w	r5, #6
 8004e2c:	d110      	bne.n	8004e50 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8004e2e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004e30:	3101      	adds	r1, #1
 8004e32:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004e34:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004e36:	2902      	cmp	r1, #2
 8004e38:	d1e2      	bne.n	8004e00 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e3e:	2008      	movs	r0, #8
 8004e40:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004e42:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e46:	4631      	mov	r1, r6
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f7ff ffca 	bl	8004de2 <HAL_I2C_AddrCallback>
 8004e4e:	e7d7      	b.n	8004e00 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e54:	f7ff fe16 	bl	8004a84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e5e:	463a      	mov	r2, r7
 8004e60:	4631      	mov	r1, r6
 8004e62:	4620      	mov	r0, r4
 8004e64:	f7ff ffbd 	bl	8004de2 <HAL_I2C_AddrCallback>
 8004e68:	e7ca      	b.n	8004e00 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e6e:	f7ff fe09 	bl	8004a84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e72:	2300      	movs	r3, #0
 8004e74:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e78:	462a      	mov	r2, r5
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f7ff ffb0 	bl	8004de2 <HAL_I2C_AddrCallback>
 8004e82:	e7bd      	b.n	8004e00 <I2C_ITAddrCplt+0x1c>

08004e84 <HAL_I2C_ListenCpltCallback>:
}
 8004e84:	4770      	bx	lr
	...

08004e88 <I2C_ITListenCplt>:
{
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e8c:	4b17      	ldr	r3, [pc, #92]	; (8004eec <I2C_ITListenCplt+0x64>)
 8004e8e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	2220      	movs	r2, #32
 8004e96:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e9e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004ea0:	f011 0f04 	tst.w	r1, #4
 8004ea4:	d013      	beq.n	8004ece <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ea6:	6803      	ldr	r3, [r0, #0]
 8004ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004eac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004eae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004eb4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004eb6:	b153      	cbz	r3, 8004ece <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004ebc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ec6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004ec8:	f043 0304 	orr.w	r3, r3, #4
 8004ecc:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ece:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	f7ff fdd6 	bl	8004a84 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	2210      	movs	r2, #16
 8004edc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7ff ffcd 	bl	8004e84 <HAL_I2C_ListenCpltCallback>
}
 8004eea:	bd10      	pop	{r4, pc}
 8004eec:	ffff0000 	.word	0xffff0000

08004ef0 <HAL_I2C_MemTxCpltCallback>:
}
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_I2C_MemRxCpltCallback>:
}
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_I2C_ErrorCallback>:
}
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_I2C_AbortCpltCallback>:
}
 8004ef6:	4770      	bx	lr

08004ef8 <I2C_TreatErrorCallback>:
{
 8004ef8:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004efa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b60      	cmp	r3, #96	; 0x60
 8004f02:	d006      	beq.n	8004f12 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f08:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004f0c:	f7ff fff2 	bl	8004ef4 <HAL_I2C_ErrorCallback>
}
 8004f10:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	2320      	movs	r3, #32
 8004f14:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f1c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f20:	f7ff ffe9 	bl	8004ef6 <HAL_I2C_AbortCpltCallback>
 8004f24:	e7f4      	b.n	8004f10 <I2C_TreatErrorCallback+0x18>
	...

08004f28 <I2C_ITError>:
{
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f2c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f30:	2000      	movs	r0, #0
 8004f32:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f36:	4a3b      	ldr	r2, [pc, #236]	; (8005024 <I2C_ITError+0xfc>)
 8004f38:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004f3a:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004f3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f42:	3b28      	subs	r3, #40	; 0x28
 8004f44:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d819      	bhi.n	8004f7e <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f4a:	2103      	movs	r1, #3
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f7ff fd99 	bl	8004a84 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f52:	2328      	movs	r3, #40	; 0x28
 8004f54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f58:	4b33      	ldr	r3, [pc, #204]	; (8005028 <I2C_ITError+0x100>)
 8004f5a:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004f5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f60:	b11a      	cbz	r2, 8004f6a <I2C_ITError+0x42>
 8004f62:	2b11      	cmp	r3, #17
 8004f64:	d01b      	beq.n	8004f9e <I2C_ITError+0x76>
 8004f66:	2b21      	cmp	r3, #33	; 0x21
 8004f68:	d019      	beq.n	8004f9e <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004f6a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004f6c:	b11a      	cbz	r2, 8004f76 <I2C_ITError+0x4e>
 8004f6e:	2b12      	cmp	r3, #18
 8004f70:	d036      	beq.n	8004fe0 <I2C_ITError+0xb8>
 8004f72:	2b22      	cmp	r3, #34	; 0x22
 8004f74:	d034      	beq.n	8004fe0 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7ff ffbe 	bl	8004ef8 <I2C_TreatErrorCallback>
}
 8004f7c:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f7e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f82:	4620      	mov	r0, r4
 8004f84:	f7ff fd7e 	bl	8004a84 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b60      	cmp	r3, #96	; 0x60
 8004f90:	d002      	beq.n	8004f98 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f92:	2320      	movs	r3, #32
 8004f94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6363      	str	r3, [r4, #52]	; 0x34
 8004f9c:	e7de      	b.n	8004f5c <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004fa6:	d003      	beq.n	8004fb0 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fae:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fb0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004fb2:	f7ff f9fb 	bl	80043ac <HAL_DMA_GetState>
 8004fb6:	2801      	cmp	r0, #1
 8004fb8:	d00e      	beq.n	8004fd8 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fbc:	4a1b      	ldr	r2, [pc, #108]	; (800502c <I2C_ITError+0x104>)
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fc6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004fc8:	f7ff f942 	bl	8004250 <HAL_DMA_Abort_IT>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d0d5      	beq.n	8004f7c <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004fd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004fd4:	4798      	blx	r3
 8004fd6:	e7d1      	b.n	8004f7c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f7ff ff8d 	bl	8004ef8 <I2C_TreatErrorCallback>
 8004fde:	e7cd      	b.n	8004f7c <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004fe8:	d003      	beq.n	8004ff2 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ff0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ff2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004ff4:	f7ff f9da 	bl	80043ac <HAL_DMA_GetState>
 8004ff8:	2801      	cmp	r0, #1
 8004ffa:	d00e      	beq.n	800501a <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ffc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ffe:	4a0b      	ldr	r2, [pc, #44]	; (800502c <I2C_ITError+0x104>)
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005008:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800500a:	f7ff f921 	bl	8004250 <HAL_DMA_Abort_IT>
 800500e:	2800      	cmp	r0, #0
 8005010:	d0b4      	beq.n	8004f7c <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005012:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005014:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005016:	4798      	blx	r3
 8005018:	e7b0      	b.n	8004f7c <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 800501a:	4620      	mov	r0, r4
 800501c:	f7ff ff6c 	bl	8004ef8 <I2C_TreatErrorCallback>
 8005020:	e7ac      	b.n	8004f7c <I2C_ITError+0x54>
 8005022:	bf00      	nop
 8005024:	ffff0000 	.word	0xffff0000
 8005028:	08005199 	.word	0x08005199
 800502c:	0800586b 	.word	0x0800586b

08005030 <I2C_ITSlaveCplt>:
{
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	4604      	mov	r4, r0
 8005034:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005036:	6802      	ldr	r2, [r0, #0]
 8005038:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800503a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800503e:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005040:	2120      	movs	r1, #32
 8005042:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005044:	2b21      	cmp	r3, #33	; 0x21
 8005046:	d00d      	beq.n	8005064 <I2C_ITSlaveCplt+0x34>
 8005048:	2b29      	cmp	r3, #41	; 0x29
 800504a:	d00b      	beq.n	8005064 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800504c:	2b22      	cmp	r3, #34	; 0x22
 800504e:	d001      	beq.n	8005054 <I2C_ITSlaveCplt+0x24>
 8005050:	2b2a      	cmp	r3, #42	; 0x2a
 8005052:	d10e      	bne.n	8005072 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005054:	f248 0102 	movw	r1, #32770	; 0x8002
 8005058:	4620      	mov	r0, r4
 800505a:	f7ff fd13 	bl	8004a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800505e:	2322      	movs	r3, #34	; 0x22
 8005060:	6323      	str	r3, [r4, #48]	; 0x30
 8005062:	e006      	b.n	8005072 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005064:	f248 0101 	movw	r1, #32769	; 0x8001
 8005068:	4620      	mov	r0, r4
 800506a:	f7ff fd0b 	bl	8004a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800506e:	2321      	movs	r3, #33	; 0x21
 8005070:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	6853      	ldr	r3, [r2, #4]
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800507c:	6822      	ldr	r2, [r4, #0]
 800507e:	6853      	ldr	r3, [r2, #4]
 8005080:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005084:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005088:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8005092:	4620      	mov	r0, r4
 8005094:	f7ff fc8e 	bl	80049b4 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005098:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 800509c:	d040      	beq.n	8005120 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	6813      	ldr	r3, [r2, #0]
 80050a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80050a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050aa:	b11b      	cbz	r3, 80050b4 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80050b4:	f015 0f04 	tst.w	r5, #4
 80050b8:	d011      	beq.n	80050de <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80050ba:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050c8:	3301      	adds	r3, #1
 80050ca:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80050cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050ce:	b133      	cbz	r3, 80050de <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 80050d0:	3b01      	subs	r3, #1
 80050d2:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80050d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29b      	uxth	r3, r3
 80050dc:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 80050de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	b11b      	cbz	r3, 80050ec <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050e6:	f043 0304 	orr.w	r3, r3, #4
 80050ea:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 80050f2:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050f6:	bb1b      	cbnz	r3, 8005140 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80050f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80050fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050fe:	d12d      	bne.n	800515c <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005100:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b22      	cmp	r3, #34	; 0x22
 8005108:	d038      	beq.n	800517c <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 800510a:	2320      	movs	r3, #32
 800510c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005110:	2300      	movs	r3, #0
 8005112:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005114:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff fe1f 	bl	8004d5c <HAL_I2C_SlaveTxCpltCallback>
}
 800511e:	e02c      	b.n	800517a <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005120:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8005124:	d0c6      	beq.n	80050b4 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	6813      	ldr	r3, [r2, #0]
 800512a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800512e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8005130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0be      	beq.n	80050b4 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	b29b      	uxth	r3, r3
 800513c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800513e:	e7b9      	b.n	80050b4 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005140:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005142:	4620      	mov	r0, r4
 8005144:	f7ff fef0 	bl	8004f28 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005148:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b28      	cmp	r3, #40	; 0x28
 8005150:	d113      	bne.n	800517a <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005152:	4629      	mov	r1, r5
 8005154:	4620      	mov	r0, r4
 8005156:	f7ff fe97 	bl	8004e88 <I2C_ITListenCplt>
 800515a:	e00e      	b.n	800517a <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff fdff 	bl	8004d60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <I2C_ITSlaveCplt+0x164>)
 8005164:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005166:	2320      	movs	r3, #32
 8005168:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800516c:	2300      	movs	r3, #0
 800516e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005170:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005174:	4620      	mov	r0, r4
 8005176:	f7ff fe85 	bl	8004e84 <HAL_I2C_ListenCpltCallback>
}
 800517a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800517c:	2320      	movs	r3, #32
 800517e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005182:	2300      	movs	r3, #0
 8005184:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005186:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800518a:	4620      	mov	r0, r4
 800518c:	f7ff fde7 	bl	8004d5e <HAL_I2C_SlaveRxCpltCallback>
 8005190:	e7f3      	b.n	800517a <I2C_ITSlaveCplt+0x14a>
 8005192:	bf00      	nop
 8005194:	ffff0000 	.word	0xffff0000

08005198 <I2C_Slave_ISR_IT>:
{
 8005198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 800519a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800519c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f000 809e 	beq.w	80052e2 <I2C_Slave_ISR_IT+0x14a>
 80051a6:	4604      	mov	r4, r0
 80051a8:	460d      	mov	r5, r1
 80051aa:	4616      	mov	r6, r2
 80051ac:	2301      	movs	r3, #1
 80051ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80051b2:	f011 0f20 	tst.w	r1, #32
 80051b6:	d002      	beq.n	80051be <I2C_Slave_ISR_IT+0x26>
 80051b8:	f012 0f20 	tst.w	r2, #32
 80051bc:	d119      	bne.n	80051f2 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051be:	f015 0f10 	tst.w	r5, #16
 80051c2:	d03e      	beq.n	8005242 <I2C_Slave_ISR_IT+0xaa>
 80051c4:	f016 0f10 	tst.w	r6, #16
 80051c8:	d03b      	beq.n	8005242 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 80051ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	bb43      	cbnz	r3, 8005222 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051d0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b28      	cmp	r3, #40	; 0x28
 80051d8:	d00e      	beq.n	80051f8 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b29      	cmp	r3, #41	; 0x29
 80051e2:	d011      	beq.n	8005208 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	2210      	movs	r2, #16
 80051e8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80051ea:	2000      	movs	r0, #0
 80051ec:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80051f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80051f2:	f7ff ff1d 	bl	8005030 <I2C_ITSlaveCplt>
 80051f6:	e7e2      	b.n	80051be <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051f8:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80051fc:	d1ed      	bne.n	80051da <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80051fe:	4629      	mov	r1, r5
 8005200:	4620      	mov	r0, r4
 8005202:	f7ff fe41 	bl	8004e88 <I2C_ITListenCplt>
 8005206:	e7f0      	b.n	80051ea <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005208:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800520c:	d0ea      	beq.n	80051e4 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	2210      	movs	r2, #16
 8005212:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005214:	4620      	mov	r0, r4
 8005216:	f7ff fbcd 	bl	80049b4 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800521a:	4620      	mov	r0, r4
 800521c:	f7ff fda0 	bl	8004d60 <I2C_ITSlaveSeqCplt>
 8005220:	e7e3      	b.n	80051ea <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	2210      	movs	r2, #16
 8005226:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005228:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800522a:	f043 0304 	orr.w	r3, r3, #4
 800522e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005230:	b117      	cbz	r7, 8005238 <I2C_Slave_ISR_IT+0xa0>
 8005232:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005236:	d1d8      	bne.n	80051ea <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005238:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800523a:	4620      	mov	r0, r4
 800523c:	f7ff fe74 	bl	8004f28 <I2C_ITError>
 8005240:	e7d3      	b.n	80051ea <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005242:	f015 0f04 	tst.w	r5, #4
 8005246:	d01f      	beq.n	8005288 <I2C_Slave_ISR_IT+0xf0>
 8005248:	f016 0f04 	tst.w	r6, #4
 800524c:	d01c      	beq.n	8005288 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800524e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	b173      	cbz	r3, 8005272 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800525a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800525c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800525e:	3301      	adds	r3, #1
 8005260:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005262:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005264:	3b01      	subs	r3, #1
 8005266:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005268:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29b      	uxth	r3, r3
 8005270:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8005272:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1b7      	bne.n	80051ea <I2C_Slave_ISR_IT+0x52>
 800527a:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800527e:	d0b4      	beq.n	80051ea <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 8005280:	4620      	mov	r0, r4
 8005282:	f7ff fd6d 	bl	8004d60 <I2C_ITSlaveSeqCplt>
 8005286:	e7b0      	b.n	80051ea <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005288:	f015 0f08 	tst.w	r5, #8
 800528c:	d002      	beq.n	8005294 <I2C_Slave_ISR_IT+0xfc>
 800528e:	f016 0f08 	tst.w	r6, #8
 8005292:	d118      	bne.n	80052c6 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005294:	f015 0f02 	tst.w	r5, #2
 8005298:	d0a7      	beq.n	80051ea <I2C_Slave_ISR_IT+0x52>
 800529a:	f016 0f02 	tst.w	r6, #2
 800529e:	d0a4      	beq.n	80051ea <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80052a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	b1a3      	cbz	r3, 80052d0 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80052ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052b0:	3301      	adds	r3, #1
 80052b2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80052b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80052be:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052c0:	3b01      	subs	r3, #1
 80052c2:	8523      	strh	r3, [r4, #40]	; 0x28
 80052c4:	e791      	b.n	80051ea <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80052c6:	4629      	mov	r1, r5
 80052c8:	4620      	mov	r0, r4
 80052ca:	f7ff fd8b 	bl	8004de4 <I2C_ITAddrCplt>
 80052ce:	e78c      	b.n	80051ea <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80052d0:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 80052d4:	d001      	beq.n	80052da <I2C_Slave_ISR_IT+0x142>
 80052d6:	2f00      	cmp	r7, #0
 80052d8:	d187      	bne.n	80051ea <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80052da:	4620      	mov	r0, r4
 80052dc:	f7ff fd40 	bl	8004d60 <I2C_ITSlaveSeqCplt>
 80052e0:	e783      	b.n	80051ea <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80052e2:	2002      	movs	r0, #2
 80052e4:	e784      	b.n	80051f0 <I2C_Slave_ISR_IT+0x58>

080052e6 <I2C_ITMasterCplt>:
{
 80052e6:	b530      	push	{r4, r5, lr}
 80052e8:	b083      	sub	sp, #12
 80052ea:	4604      	mov	r4, r0
 80052ec:	460d      	mov	r5, r1
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ee:	6803      	ldr	r3, [r0, #0]
 80052f0:	2220      	movs	r2, #32
 80052f2:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b21      	cmp	r3, #33	; 0x21
 80052fc:	d033      	beq.n	8005366 <I2C_ITMasterCplt+0x80>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b22      	cmp	r3, #34	; 0x22
 8005306:	d034      	beq.n	8005372 <I2C_ITMasterCplt+0x8c>
  I2C_RESET_CR2(hi2c);
 8005308:	6822      	ldr	r2, [r4, #0]
 800530a:	6853      	ldr	r3, [r2, #4]
 800530c:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005310:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005314:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005318:	f023 0301 	bic.w	r3, r3, #1
 800531c:	6053      	str	r3, [r2, #4]
  hi2c->XferISR       = NULL;
 800531e:	2300      	movs	r3, #0
 8005320:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005322:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8005326:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005328:	f015 0f10 	tst.w	r5, #16
 800532c:	d006      	beq.n	800533c <I2C_ITMasterCplt+0x56>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	2210      	movs	r2, #16
 8005332:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005334:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005336:	f043 0304 	orr.w	r3, r3, #4
 800533a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800533c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b60      	cmp	r3, #96	; 0x60
 8005344:	d01b      	beq.n	800537e <I2C_ITMasterCplt+0x98>
  I2C_Flush_TXDR(hi2c);
 8005346:	4620      	mov	r0, r4
 8005348:	f7ff fb34 	bl	80049b4 <I2C_Flush_TXDR>
  tmperror = hi2c->ErrorCode;
 800534c:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800534e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d000      	beq.n	800535a <I2C_ITMasterCplt+0x74>
 8005358:	b1d2      	cbz	r2, 8005390 <I2C_ITMasterCplt+0xaa>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800535a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800535c:	4620      	mov	r0, r4
 800535e:	f7ff fde3 	bl	8004f28 <I2C_ITError>
}
 8005362:	b003      	add	sp, #12
 8005364:	bd30      	pop	{r4, r5, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005366:	2101      	movs	r1, #1
 8005368:	f7ff fb8c 	bl	8004a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800536c:	2311      	movs	r3, #17
 800536e:	6323      	str	r3, [r4, #48]	; 0x30
 8005370:	e7ca      	b.n	8005308 <I2C_ITMasterCplt+0x22>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005372:	2102      	movs	r1, #2
 8005374:	f7ff fb86 	bl	8004a84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005378:	2312      	movs	r3, #18
 800537a:	6323      	str	r3, [r4, #48]	; 0x30
 800537c:	e7c4      	b.n	8005308 <I2C_ITMasterCplt+0x22>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800537e:	f015 0f04 	tst.w	r5, #4
 8005382:	d0e0      	beq.n	8005346 <I2C_ITMasterCplt+0x60>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	b2db      	uxtb	r3, r3
 800538a:	9301      	str	r3, [sp, #4]
    UNUSED(tmpreg);
 800538c:	9b01      	ldr	r3, [sp, #4]
 800538e:	e7da      	b.n	8005346 <I2C_ITMasterCplt+0x60>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005390:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b21      	cmp	r3, #33	; 0x21
 8005398:	d017      	beq.n	80053ca <I2C_ITMasterCplt+0xe4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800539a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b22      	cmp	r3, #34	; 0x22
 80053a2:	d1de      	bne.n	8005362 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 80053a4:	2320      	movs	r3, #32
 80053a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053ae:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d024      	beq.n	8005402 <I2C_ITMasterCplt+0x11c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80053be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053c2:	4620      	mov	r0, r4
 80053c4:	f7ff fc9f 	bl	8004d06 <HAL_I2C_MasterRxCpltCallback>
}
 80053c8:	e7cb      	b.n	8005362 <I2C_ITMasterCplt+0x7c>
    hi2c->State = HAL_I2C_STATE_READY;
 80053ca:	2320      	movs	r3, #32
 80053cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80053d0:	2300      	movs	r3, #0
 80053d2:	6323      	str	r3, [r4, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053d4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b40      	cmp	r3, #64	; 0x40
 80053dc:	d008      	beq.n	80053f0 <I2C_ITMasterCplt+0x10a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053de:	2300      	movs	r3, #0
 80053e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80053e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80053e8:	4620      	mov	r0, r4
 80053ea:	f7ff fc8b 	bl	8004d04 <HAL_I2C_MasterTxCpltCallback>
 80053ee:	e7b8      	b.n	8005362 <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80053f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80053fa:	4620      	mov	r0, r4
 80053fc:	f7ff fd78 	bl	8004ef0 <HAL_I2C_MemTxCpltCallback>
 8005400:	e7af      	b.n	8005362 <I2C_ITMasterCplt+0x7c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005402:	2300      	movs	r3, #0
 8005404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005408:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800540c:	4620      	mov	r0, r4
 800540e:	f7ff fd70 	bl	8004ef2 <HAL_I2C_MemRxCpltCallback>
 8005412:	e7a6      	b.n	8005362 <I2C_ITMasterCplt+0x7c>

08005414 <I2C_Master_ISR_IT>:
  __HAL_LOCK(hi2c);
 8005414:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005418:	2b01      	cmp	r3, #1
 800541a:	f000 80b9 	beq.w	8005590 <I2C_Master_ISR_IT+0x17c>
{
 800541e:	b570      	push	{r4, r5, r6, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	4604      	mov	r4, r0
 8005424:	460d      	mov	r5, r1
 8005426:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8005428:	2301      	movs	r3, #1
 800542a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800542e:	f011 0f10 	tst.w	r1, #16
 8005432:	d002      	beq.n	800543a <I2C_Master_ISR_IT+0x26>
 8005434:	f012 0f10 	tst.w	r2, #16
 8005438:	d122      	bne.n	8005480 <I2C_Master_ISR_IT+0x6c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800543a:	f015 0f04 	tst.w	r5, #4
 800543e:	d029      	beq.n	8005494 <I2C_Master_ISR_IT+0x80>
 8005440:	f016 0f04 	tst.w	r6, #4
 8005444:	d026      	beq.n	8005494 <I2C_Master_ISR_IT+0x80>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005446:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800544e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005450:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005454:	3301      	adds	r3, #1
 8005456:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8005458:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 800545e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29b      	uxth	r3, r3
 8005466:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005468:	f015 0f20 	tst.w	r5, #32
 800546c:	d003      	beq.n	8005476 <I2C_Master_ISR_IT+0x62>
 800546e:	f016 0f20 	tst.w	r6, #32
 8005472:	f040 8088 	bne.w	8005586 <I2C_Master_ISR_IT+0x172>
  __HAL_UNLOCK(hi2c);
 8005476:	2000      	movs	r0, #0
 8005478:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800547c:	b002      	add	sp, #8
 800547e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005480:	6803      	ldr	r3, [r0, #0]
 8005482:	2210      	movs	r2, #16
 8005484:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005486:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005488:	f043 0304 	orr.w	r3, r3, #4
 800548c:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Flush_TXDR(hi2c);
 800548e:	f7ff fa91 	bl	80049b4 <I2C_Flush_TXDR>
 8005492:	e7e9      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005494:	f015 0f02 	tst.w	r5, #2
 8005498:	d012      	beq.n	80054c0 <I2C_Master_ISR_IT+0xac>
 800549a:	f016 0f02 	tst.w	r6, #2
 800549e:	d00f      	beq.n	80054c0 <I2C_Master_ISR_IT+0xac>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	629a      	str	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr++;
 80054a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054aa:	3301      	adds	r3, #1
 80054ac:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 80054ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 80054b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80054be:	e7d3      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80054c0:	f015 0f80 	tst.w	r5, #128	; 0x80
 80054c4:	d03f      	beq.n	8005546 <I2C_Master_ISR_IT+0x132>
 80054c6:	f016 0f40 	tst.w	r6, #64	; 0x40
 80054ca:	d03c      	beq.n	8005546 <I2C_Master_ISR_IT+0x132>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	b35b      	cbz	r3, 800552a <I2C_Master_ISR_IT+0x116>
 80054d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054d4:	bb4b      	cbnz	r3, 800552a <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80054d6:	6823      	ldr	r3, [r4, #0]
 80054d8:	6859      	ldr	r1, [r3, #4]
 80054da:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2bff      	cmp	r3, #255	; 0xff
 80054e4:	d80e      	bhi.n	8005504 <I2C_Master_ISR_IT+0xf0>
        hi2c->XferSize = hi2c->XferCount;
 80054e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80054e8:	b292      	uxth	r2, r2
 80054ea:	8522      	strh	r2, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80054ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054f2:	d011      	beq.n	8005518 <I2C_Master_ISR_IT+0x104>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80054f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054f6:	2000      	movs	r0, #0
 80054f8:	9000      	str	r0, [sp, #0]
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7ff fa6a 	bl	80049d6 <I2C_TransferConfig>
 8005502:	e7b1      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	8522      	strh	r2, [r4, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005508:	2300      	movs	r3, #0
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005510:	4620      	mov	r0, r4
 8005512:	f7ff fa60 	bl	80049d6 <I2C_TransferConfig>
 8005516:	e7a7      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005518:	2300      	movs	r3, #0
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	4620      	mov	r0, r4
 8005524:	f7ff fa57 	bl	80049d6 <I2C_TransferConfig>
 8005528:	e79e      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005532:	d103      	bne.n	800553c <I2C_Master_ISR_IT+0x128>
        I2C_ITMasterSeqCplt(hi2c);
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff fbe7 	bl	8004d08 <I2C_ITMasterSeqCplt>
 800553a:	e795      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800553c:	2140      	movs	r1, #64	; 0x40
 800553e:	4620      	mov	r0, r4
 8005540:	f7ff fcf2 	bl	8004f28 <I2C_ITError>
 8005544:	e790      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005546:	f015 0f40 	tst.w	r5, #64	; 0x40
 800554a:	d08d      	beq.n	8005468 <I2C_Master_ISR_IT+0x54>
 800554c:	f016 0f40 	tst.w	r6, #64	; 0x40
 8005550:	d08a      	beq.n	8005468 <I2C_Master_ISR_IT+0x54>
    if (hi2c->XferCount == 0U)
 8005552:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	b98b      	cbnz	r3, 800557c <I2C_Master_ISR_IT+0x168>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005560:	d182      	bne.n	8005468 <I2C_Master_ISR_IT+0x54>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005562:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005564:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8005568:	d104      	bne.n	8005574 <I2C_Master_ISR_IT+0x160>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005570:	605a      	str	r2, [r3, #4]
 8005572:	e779      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
          I2C_ITMasterSeqCplt(hi2c);
 8005574:	4620      	mov	r0, r4
 8005576:	f7ff fbc7 	bl	8004d08 <I2C_ITMasterSeqCplt>
 800557a:	e775      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800557c:	2140      	movs	r1, #64	; 0x40
 800557e:	4620      	mov	r0, r4
 8005580:	f7ff fcd2 	bl	8004f28 <I2C_ITError>
 8005584:	e770      	b.n	8005468 <I2C_Master_ISR_IT+0x54>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005586:	4629      	mov	r1, r5
 8005588:	4620      	mov	r0, r4
 800558a:	f7ff feac 	bl	80052e6 <I2C_ITMasterCplt>
 800558e:	e772      	b.n	8005476 <I2C_Master_ISR_IT+0x62>
  __HAL_LOCK(hi2c);
 8005590:	2002      	movs	r0, #2
}
 8005592:	4770      	bx	lr

08005594 <I2C_Slave_ISR_DMA>:
{
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8005596:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8005598:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800559c:	2b01      	cmp	r3, #1
 800559e:	f000 8089 	beq.w	80056b4 <I2C_Slave_ISR_DMA+0x120>
 80055a2:	4604      	mov	r4, r0
 80055a4:	460d      	mov	r5, r1
 80055a6:	4616      	mov	r6, r2
 80055a8:	2301      	movs	r3, #1
 80055aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055ae:	f011 0f20 	tst.w	r1, #32
 80055b2:	d002      	beq.n	80055ba <I2C_Slave_ISR_DMA+0x26>
 80055b4:	f012 0f20 	tst.w	r2, #32
 80055b8:	d117      	bne.n	80055ea <I2C_Slave_ISR_DMA+0x56>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80055ba:	f015 0f10 	tst.w	r5, #16
 80055be:	d06a      	beq.n	8005696 <I2C_Slave_ISR_DMA+0x102>
 80055c0:	f016 0f10 	tst.w	r6, #16
 80055c4:	d067      	beq.n	8005696 <I2C_Slave_ISR_DMA+0x102>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80055c6:	f3c6 3280 	ubfx	r2, r6, #14, #1
 80055ca:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80055ce:	d102      	bne.n	80055d6 <I2C_Slave_ISR_DMA+0x42>
 80055d0:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80055d4:	d05b      	beq.n	800568e <I2C_Slave_ISR_DMA+0xfa>
      if (hi2c->hdmarx != NULL)
 80055d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055d8:	b153      	cbz	r3, 80055f0 <I2C_Slave_ISR_DMA+0x5c>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80055da:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 80055de:	d009      	beq.n	80055f4 <I2C_Slave_ISR_DMA+0x60>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	b33b      	cbz	r3, 8005636 <I2C_Slave_ISR_DMA+0xa2>
  uint32_t treatdmanack = 0U;
 80055e6:	2100      	movs	r1, #0
 80055e8:	e005      	b.n	80055f6 <I2C_Slave_ISR_DMA+0x62>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80055ea:	f7ff fd21 	bl	8005030 <I2C_ITSlaveCplt>
 80055ee:	e7e4      	b.n	80055ba <I2C_Slave_ISR_DMA+0x26>
  uint32_t treatdmanack = 0U;
 80055f0:	2100      	movs	r1, #0
 80055f2:	e000      	b.n	80055f6 <I2C_Slave_ISR_DMA+0x62>
 80055f4:	2100      	movs	r1, #0
      if (hi2c->hdmatx != NULL)
 80055f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80055f8:	b11b      	cbz	r3, 8005602 <I2C_Slave_ISR_DMA+0x6e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80055fa:	b112      	cbz	r2, 8005602 <I2C_Slave_ISR_DMA+0x6e>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	b1db      	cbz	r3, 800563a <I2C_Slave_ISR_DMA+0xa6>
      if (treatdmanack == 1U)
 8005602:	b9d1      	cbnz	r1, 800563a <I2C_Slave_ISR_DMA+0xa6>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	2210      	movs	r2, #16
 8005608:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800560a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800560c:	f043 0304 	orr.w	r3, r3, #4
 8005610:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 8005612:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005616:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005618:	b117      	cbz	r7, 8005620 <I2C_Slave_ISR_DMA+0x8c>
 800561a:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 800561e:	d140      	bne.n	80056a2 <I2C_Slave_ISR_DMA+0x10e>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005620:	2b21      	cmp	r3, #33	; 0x21
 8005622:	d02d      	beq.n	8005680 <I2C_Slave_ISR_DMA+0xec>
 8005624:	2b29      	cmp	r3, #41	; 0x29
 8005626:	d02b      	beq.n	8005680 <I2C_Slave_ISR_DMA+0xec>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005628:	2b22      	cmp	r3, #34	; 0x22
 800562a:	d001      	beq.n	8005630 <I2C_Slave_ISR_DMA+0x9c>
 800562c:	2b2a      	cmp	r3, #42	; 0x2a
 800562e:	d129      	bne.n	8005684 <I2C_Slave_ISR_DMA+0xf0>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005630:	2322      	movs	r3, #34	; 0x22
 8005632:	6323      	str	r3, [r4, #48]	; 0x30
 8005634:	e026      	b.n	8005684 <I2C_Slave_ISR_DMA+0xf0>
            treatdmanack = 1U;
 8005636:	2101      	movs	r1, #1
 8005638:	e7dd      	b.n	80055f6 <I2C_Slave_ISR_DMA+0x62>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800563a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b28      	cmp	r3, #40	; 0x28
 8005642:	d008      	beq.n	8005656 <I2C_Slave_ISR_DMA+0xc2>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005644:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b29      	cmp	r3, #41	; 0x29
 800564c:	d00b      	beq.n	8005666 <I2C_Slave_ISR_DMA+0xd2>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	2210      	movs	r2, #16
 8005652:	61da      	str	r2, [r3, #28]
 8005654:	e025      	b.n	80056a2 <I2C_Slave_ISR_DMA+0x10e>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005656:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 800565a:	d1f3      	bne.n	8005644 <I2C_Slave_ISR_DMA+0xb0>
          I2C_ITListenCplt(hi2c, ITFlags);
 800565c:	4629      	mov	r1, r5
 800565e:	4620      	mov	r0, r4
 8005660:	f7ff fc12 	bl	8004e88 <I2C_ITListenCplt>
 8005664:	e01d      	b.n	80056a2 <I2C_Slave_ISR_DMA+0x10e>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005666:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800566a:	d0f0      	beq.n	800564e <I2C_Slave_ISR_DMA+0xba>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	2210      	movs	r2, #16
 8005670:	61da      	str	r2, [r3, #28]
          I2C_Flush_TXDR(hi2c);
 8005672:	4620      	mov	r0, r4
 8005674:	f7ff f99e 	bl	80049b4 <I2C_Flush_TXDR>
          I2C_ITSlaveSeqCplt(hi2c);
 8005678:	4620      	mov	r0, r4
 800567a:	f7ff fb71 	bl	8004d60 <I2C_ITSlaveSeqCplt>
 800567e:	e010      	b.n	80056a2 <I2C_Slave_ISR_DMA+0x10e>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005680:	2321      	movs	r3, #33	; 0x21
 8005682:	6323      	str	r3, [r4, #48]	; 0x30
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005684:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005686:	4620      	mov	r0, r4
 8005688:	f7ff fc4e 	bl	8004f28 <I2C_ITError>
 800568c:	e009      	b.n	80056a2 <I2C_Slave_ISR_DMA+0x10e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	2210      	movs	r2, #16
 8005692:	61da      	str	r2, [r3, #28]
 8005694:	e005      	b.n	80056a2 <I2C_Slave_ISR_DMA+0x10e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005696:	f015 0f08 	tst.w	r5, #8
 800569a:	d002      	beq.n	80056a2 <I2C_Slave_ISR_DMA+0x10e>
 800569c:	f016 0f08 	tst.w	r6, #8
 80056a0:	d103      	bne.n	80056aa <I2C_Slave_ISR_DMA+0x116>
  __HAL_UNLOCK(hi2c);
 80056a2:	2000      	movs	r0, #0
 80056a4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80056a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITAddrCplt(hi2c, ITFlags);
 80056aa:	4629      	mov	r1, r5
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7ff fb99 	bl	8004de4 <I2C_ITAddrCplt>
 80056b2:	e7f6      	b.n	80056a2 <I2C_Slave_ISR_DMA+0x10e>
  __HAL_LOCK(hi2c);
 80056b4:	2002      	movs	r0, #2
 80056b6:	e7f7      	b.n	80056a8 <I2C_Slave_ISR_DMA+0x114>

080056b8 <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80056b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80056bc:	2b01      	cmp	r3, #1
 80056be:	f000 809a 	beq.w	80057f6 <I2C_Master_ISR_DMA+0x13e>
{
 80056c2:	b510      	push	{r4, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	4604      	mov	r4, r0
  __HAL_LOCK(hi2c);
 80056c8:	2301      	movs	r3, #1
 80056ca:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80056ce:	f011 0f10 	tst.w	r1, #16
 80056d2:	d002      	beq.n	80056da <I2C_Master_ISR_DMA+0x22>
 80056d4:	f012 0f10 	tst.w	r2, #16
 80056d8:	d132      	bne.n	8005740 <I2C_Master_ISR_DMA+0x88>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80056da:	f011 0f80 	tst.w	r1, #128	; 0x80
 80056de:	d060      	beq.n	80057a2 <I2C_Master_ISR_DMA+0xea>
 80056e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80056e4:	d05d      	beq.n	80057a2 <I2C_Master_ISR_DMA+0xea>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80056e6:	6822      	ldr	r2, [r4, #0]
 80056e8:	6813      	ldr	r3, [r2, #0]
 80056ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ee:	6013      	str	r3, [r2, #0]
    if (hi2c->XferCount != 0U)
 80056f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d046      	beq.n	8005786 <I2C_Master_ISR_DMA+0xce>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	f3c1 0109 	ubfx	r1, r1, #0, #10
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005700:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	2bff      	cmp	r3, #255	; 0xff
 8005706:	d92d      	bls.n	8005764 <I2C_Master_ISR_DMA+0xac>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005708:	23ff      	movs	r3, #255	; 0xff
 800570a:	8523      	strh	r3, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800570c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005710:	2200      	movs	r2, #0
 8005712:	9200      	str	r2, [sp, #0]
 8005714:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005718:	4620      	mov	r0, r4
 800571a:	f7ff f95c 	bl	80049d6 <I2C_TransferConfig>
      hi2c->XferCount -= hi2c->XferSize;
 800571e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	b29b      	uxth	r3, r3
 8005728:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800572a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b22      	cmp	r3, #34	; 0x22
 8005732:	d022      	beq.n	800577a <I2C_Master_ISR_DMA+0xc2>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005734:	6822      	ldr	r2, [r4, #0]
 8005736:	6813      	ldr	r3, [r2, #0]
 8005738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e00c      	b.n	800575a <I2C_Master_ISR_DMA+0xa2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005740:	6803      	ldr	r3, [r0, #0]
 8005742:	2210      	movs	r2, #16
 8005744:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005746:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005748:	f043 0304 	orr.w	r3, r3, #4
 800574c:	6443      	str	r3, [r0, #68]	; 0x44
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800574e:	2120      	movs	r1, #32
 8005750:	f7ff f95e 	bl	8004a10 <I2C_Enable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8005754:	4620      	mov	r0, r4
 8005756:	f7ff f92d 	bl	80049b4 <I2C_Flush_TXDR>
  __HAL_UNLOCK(hi2c);
 800575a:	2000      	movs	r0, #0
 800575c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005760:	b002      	add	sp, #8
 8005762:	bd10      	pop	{r4, pc}
        hi2c->XferSize = hi2c->XferCount;
 8005764:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005766:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800576a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800576e:	d001      	beq.n	8005774 <I2C_Master_ISR_DMA+0xbc>
          xfermode = hi2c->XferOptions;
 8005770:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005772:	e7cd      	b.n	8005710 <I2C_Master_ISR_DMA+0x58>
          xfermode = I2C_AUTOEND_MODE;
 8005774:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005778:	e7ca      	b.n	8005710 <I2C_Master_ISR_DMA+0x58>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	6813      	ldr	r3, [r2, #0]
 800577e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	e7e9      	b.n	800575a <I2C_Master_ISR_DMA+0xa2>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005786:	6823      	ldr	r3, [r4, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800578e:	d103      	bne.n	8005798 <I2C_Master_ISR_DMA+0xe0>
        I2C_ITMasterSeqCplt(hi2c);
 8005790:	4620      	mov	r0, r4
 8005792:	f7ff fab9 	bl	8004d08 <I2C_ITMasterSeqCplt>
 8005796:	e7e0      	b.n	800575a <I2C_Master_ISR_DMA+0xa2>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005798:	2140      	movs	r1, #64	; 0x40
 800579a:	4620      	mov	r0, r4
 800579c:	f7ff fbc4 	bl	8004f28 <I2C_ITError>
 80057a0:	e7db      	b.n	800575a <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80057a2:	f011 0f40 	tst.w	r1, #64	; 0x40
 80057a6:	d01c      	beq.n	80057e2 <I2C_Master_ISR_DMA+0x12a>
 80057a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80057ac:	d019      	beq.n	80057e2 <I2C_Master_ISR_DMA+0x12a>
    if (hi2c->XferCount == 0U)
 80057ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	b98b      	cbnz	r3, 80057d8 <I2C_Master_ISR_DMA+0x120>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80057bc:	d1cd      	bne.n	800575a <I2C_Master_ISR_DMA+0xa2>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80057be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80057c0:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80057c4:	d104      	bne.n	80057d0 <I2C_Master_ISR_DMA+0x118>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	e7c4      	b.n	800575a <I2C_Master_ISR_DMA+0xa2>
          I2C_ITMasterSeqCplt(hi2c);
 80057d0:	4620      	mov	r0, r4
 80057d2:	f7ff fa99 	bl	8004d08 <I2C_ITMasterSeqCplt>
 80057d6:	e7c0      	b.n	800575a <I2C_Master_ISR_DMA+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80057d8:	2140      	movs	r1, #64	; 0x40
 80057da:	4620      	mov	r0, r4
 80057dc:	f7ff fba4 	bl	8004f28 <I2C_ITError>
 80057e0:	e7bb      	b.n	800575a <I2C_Master_ISR_DMA+0xa2>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057e2:	f011 0f20 	tst.w	r1, #32
 80057e6:	d0b8      	beq.n	800575a <I2C_Master_ISR_DMA+0xa2>
 80057e8:	f012 0f20 	tst.w	r2, #32
 80057ec:	d0b5      	beq.n	800575a <I2C_Master_ISR_DMA+0xa2>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80057ee:	4620      	mov	r0, r4
 80057f0:	f7ff fd79 	bl	80052e6 <I2C_ITMasterCplt>
 80057f4:	e7b1      	b.n	800575a <I2C_Master_ISR_DMA+0xa2>
  __HAL_LOCK(hi2c);
 80057f6:	2002      	movs	r0, #2
}
 80057f8:	4770      	bx	lr

080057fa <I2C_DMAError>:
{
 80057fa:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80057fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80057fe:	6802      	ldr	r2, [r0, #0]
 8005800:	6853      	ldr	r3, [r2, #4]
 8005802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005806:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005808:	2110      	movs	r1, #16
 800580a:	f7ff fb8d 	bl	8004f28 <I2C_ITError>
}
 800580e:	bd08      	pop	{r3, pc}

08005810 <I2C_DMAMasterTransmitCplt>:
{
 8005810:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005812:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005814:	6822      	ldr	r2, [r4, #0]
 8005816:	6813      	ldr	r3, [r2, #0]
 8005818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581c:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 800581e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	b1ab      	cbz	r3, 8005850 <I2C_DMAMasterTransmitCplt+0x40>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005824:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005826:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005828:	4419      	add	r1, r3
 800582a:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800582c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2bff      	cmp	r3, #255	; 0xff
 8005832:	d912      	bls.n	800585a <I2C_DMAMasterTransmitCplt+0x4a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005834:	23ff      	movs	r3, #255	; 0xff
 8005836:	8523      	strh	r3, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800583c:	3228      	adds	r2, #40	; 0x28
 800583e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005840:	f7fe fc80 	bl	8004144 <HAL_DMA_Start_IT>
 8005844:	b160      	cbz	r0, 8005860 <I2C_DMAMasterTransmitCplt+0x50>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005846:	2110      	movs	r1, #16
 8005848:	4620      	mov	r0, r4
 800584a:	f7ff fb6d 	bl	8004f28 <I2C_ITError>
}
 800584e:	bd10      	pop	{r4, pc}
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005850:	2120      	movs	r1, #32
 8005852:	4620      	mov	r0, r4
 8005854:	f7ff f8dc 	bl	8004a10 <I2C_Enable_IRQ>
 8005858:	e7f9      	b.n	800584e <I2C_DMAMasterTransmitCplt+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 800585a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800585c:	8523      	strh	r3, [r4, #40]	; 0x28
 800585e:	e7eb      	b.n	8005838 <I2C_DMAMasterTransmitCplt+0x28>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005860:	2140      	movs	r1, #64	; 0x40
 8005862:	4620      	mov	r0, r4
 8005864:	f7ff f8d4 	bl	8004a10 <I2C_Enable_IRQ>
}
 8005868:	e7f1      	b.n	800584e <I2C_DMAMasterTransmitCplt+0x3e>

0800586a <I2C_DMAAbort>:
{
 800586a:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800586c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 800586e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005870:	b10b      	cbz	r3, 8005876 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005872:	2200      	movs	r2, #0
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8005876:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005878:	b10b      	cbz	r3, 800587e <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800587a:	2200      	movs	r2, #0
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 800587e:	f7ff fb3b 	bl	8004ef8 <I2C_TreatErrorCallback>
}
 8005882:	bd08      	pop	{r3, pc}

08005884 <HAL_I2C_GetState>:
  return hi2c->State;
 8005884:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005888:	4770      	bx	lr

0800588a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800588a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b20      	cmp	r3, #32
 8005892:	d124      	bne.n	80058de <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005894:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005898:	2b01      	cmp	r3, #1
 800589a:	d022      	beq.n	80058e2 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800589c:	2301      	movs	r3, #1
 800589e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058a2:	2324      	movs	r3, #36	; 0x24
 80058a4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058a8:	6802      	ldr	r2, [r0, #0]
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	f023 0301 	bic.w	r3, r3, #1
 80058b0:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058b2:	6802      	ldr	r2, [r0, #0]
 80058b4:	6813      	ldr	r3, [r2, #0]
 80058b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058ba:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058bc:	6802      	ldr	r2, [r0, #0]
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	4319      	orrs	r1, r3
 80058c2:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058c4:	6802      	ldr	r2, [r0, #0]
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ce:	2320      	movs	r3, #32
 80058d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d4:	2300      	movs	r3, #0
 80058d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80058da:	4618      	mov	r0, r3
 80058dc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80058de:	2002      	movs	r0, #2
 80058e0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80058e2:	2002      	movs	r0, #2
  }
}
 80058e4:	4770      	bx	lr

080058e6 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d122      	bne.n	8005936 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d020      	beq.n	800593a <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80058f8:	2301      	movs	r3, #1
 80058fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058fe:	2324      	movs	r3, #36	; 0x24
 8005900:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005904:	6802      	ldr	r2, [r0, #0]
 8005906:	6813      	ldr	r3, [r2, #0]
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800590e:	6802      	ldr	r2, [r0, #0]
 8005910:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005912:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005916:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800591a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800591c:	6802      	ldr	r2, [r0, #0]
 800591e:	6813      	ldr	r3, [r2, #0]
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005926:	2320      	movs	r3, #32
 8005928:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592c:	2300      	movs	r3, #0
 800592e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005932:	4618      	mov	r0, r3
 8005934:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005936:	2002      	movs	r0, #2
 8005938:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800593a:	2002      	movs	r0, #2
  }
}
 800593c:	4770      	bx	lr
	...

08005940 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005940:	4a02      	ldr	r2, [pc, #8]	; (800594c <HAL_PWR_EnableBkUpAccess+0xc>)
 8005942:	6813      	ldr	r3, [r2, #0]
 8005944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	4770      	bx	lr
 800594c:	58000400 	.word	0x58000400

08005950 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005950:	b510      	push	{r4, lr}
 8005952:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005954:	b9a0      	cbnz	r0, 8005980 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005956:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800595e:	d10a      	bne.n	8005976 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005960:	4a0d      	ldr	r2, [pc, #52]	; (8005998 <HAL_PWR_EnterSLEEPMode+0x48>)
 8005962:	6913      	ldr	r3, [r2, #16]
 8005964:	f023 0304 	bic.w	r3, r3, #4
 8005968:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800596a:	2c01      	cmp	r4, #1
 800596c:	d010      	beq.n	8005990 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800596e:	bf40      	sev
    __WFE();
 8005970:	bf20      	wfe
    __WFE();
 8005972:	bf20      	wfe
  }
}
 8005974:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005976:	f000 f821 	bl	80059bc <HAL_PWREx_DisableLowPowerRunMode>
 800597a:	2800      	cmp	r0, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_PWR_EnterSLEEPMode+0x10>
 800597e:	e7f9      	b.n	8005974 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005980:	4b04      	ldr	r3, [pc, #16]	; (8005994 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005988:	d1ea      	bne.n	8005960 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 800598a:	f000 f80f 	bl	80059ac <HAL_PWREx_EnableLowPowerRunMode>
 800598e:	e7e7      	b.n	8005960 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005990:	bf30      	wfi
 8005992:	e7ef      	b.n	8005974 <HAL_PWR_EnterSLEEPMode+0x24>
 8005994:	58000400 	.word	0x58000400
 8005998:	e000ed00 	.word	0xe000ed00

0800599c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 800599c:	4b02      	ldr	r3, [pc, #8]	; (80059a8 <HAL_PWREx_GetVoltageRange+0xc>)
 800599e:	6818      	ldr	r0, [r3, #0]
}
 80059a0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	58000400 	.word	0x58000400

080059ac <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80059ac:	4a02      	ldr	r2, [pc, #8]	; (80059b8 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 80059ae:	6813      	ldr	r3, [r2, #0]
 80059b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059b4:	6013      	str	r3, [r2, #0]
}
 80059b6:	4770      	bx	lr
 80059b8:	58000400 	.word	0x58000400

080059bc <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80059bc:	4a0f      	ldr	r2, [pc, #60]	; (80059fc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80059be:	6813      	ldr	r3, [r2, #0]
 80059c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059c4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80059c6:	4b0e      	ldr	r3, [pc, #56]	; (8005a00 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2232      	movs	r2, #50	; 0x32
 80059cc:	fb02 f303 	mul.w	r3, r2, r3
 80059d0:	4a0c      	ldr	r2, [pc, #48]	; (8005a04 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80059d2:	fba2 2303 	umull	r2, r3, r2, r3
 80059d6:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80059d8:	e000      	b.n	80059dc <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 80059da:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80059dc:	4a07      	ldr	r2, [pc, #28]	; (80059fc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80059de:	6952      	ldr	r2, [r2, #20]
 80059e0:	f412 7f00 	tst.w	r2, #512	; 0x200
 80059e4:	d001      	beq.n	80059ea <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f7      	bne.n	80059da <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80059ea:	4b04      	ldr	r3, [pc, #16]	; (80059fc <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f413 7f00 	tst.w	r3, #512	; 0x200
 80059f2:	d101      	bne.n	80059f8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 80059f4:	2000      	movs	r0, #0
 80059f6:	4770      	bx	lr
    return HAL_TIMEOUT;
 80059f8:	2003      	movs	r0, #3
}
 80059fa:	4770      	bx	lr
 80059fc:	58000400 	.word	0x58000400
 8005a00:	20000070 	.word	0x20000070
 8005a04:	431bde83 	.word	0x431bde83

08005a08 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005a08:	4a0c      	ldr	r2, [pc, #48]	; (8005a3c <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	f023 0307 	bic.w	r3, r3, #7
 8005a10:	f043 0302 	orr.w	r3, r3, #2
 8005a14:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a16:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005a18:	6913      	ldr	r3, [r2, #16]
 8005a1a:	f043 0304 	orr.w	r3, r3, #4
 8005a1e:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005a20:	2801      	cmp	r0, #1
 8005a22:	d008      	beq.n	8005a36 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005a24:	bf40      	sev
    __WFE();
 8005a26:	bf20      	wfe
    __WFE();
 8005a28:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005a2a:	4a05      	ldr	r2, [pc, #20]	; (8005a40 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005a2c:	6913      	ldr	r3, [r2, #16]
 8005a2e:	f023 0304 	bic.w	r3, r3, #4
 8005a32:	6113      	str	r3, [r2, #16]
}
 8005a34:	4770      	bx	lr
    __WFI();
 8005a36:	bf30      	wfi
 8005a38:	e7f7      	b.n	8005a2a <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005a3a:	bf00      	nop
 8005a3c:	58000400 	.word	0x58000400
 8005a40:	e000ed00 	.word	0xe000ed00

08005a44 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005a44:	b530      	push	{r4, r5, lr}
 8005a46:	b089      	sub	sp, #36	; 0x24
 8005a48:	4604      	mov	r4, r0
 8005a4a:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005a4c:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <RCC_SetFlashLatency+0xb4>)
 8005a4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a52:	9006      	str	r0, [sp, #24]
 8005a54:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005a58:	f103 0208 	add.w	r2, r3, #8
 8005a5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a60:	9004      	str	r0, [sp, #16]
 8005a62:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005a66:	ad01      	add	r5, sp, #4
 8005a68:	3310      	adds	r3, #16
 8005a6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a6e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a72:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8005a76:	d007      	beq.n	8005a88 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005a78:	2300      	movs	r3, #0
 8005a7a:	e014      	b.n	8005aa6 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005a7c:	aa08      	add	r2, sp, #32
 8005a7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a82:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005a86:	e01e      	b.n	8005ac6 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d808      	bhi.n	8005aa0 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005a8e:	aa08      	add	r2, sp, #32
 8005a90:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005a94:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005a98:	42a2      	cmp	r2, r4
 8005a9a:	d2ef      	bcs.n	8005a7c <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	e7f4      	b.n	8005a8a <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005aa0:	2500      	movs	r5, #0
 8005aa2:	e010      	b.n	8005ac6 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d80c      	bhi.n	8005ac4 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005aaa:	aa08      	add	r2, sp, #32
 8005aac:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005ab0:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005ab4:	42a2      	cmp	r2, r4
 8005ab6:	d3f5      	bcc.n	8005aa4 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ab8:	aa08      	add	r2, sp, #32
 8005aba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005abe:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005ac2:	e000      	b.n	8005ac6 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ac4:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ac6:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <RCC_SetFlashLatency+0xb8>)
 8005ac8:	6813      	ldr	r3, [r2, #0]
 8005aca:	f023 0307 	bic.w	r3, r3, #7
 8005ace:	432b      	orrs	r3, r5
 8005ad0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ad2:	f7fc fad1 	bl	8002078 <HAL_GetTick>
 8005ad6:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ad8:	4b08      	ldr	r3, [pc, #32]	; (8005afc <RCC_SetFlashLatency+0xb8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	42ab      	cmp	r3, r5
 8005ae2:	d006      	beq.n	8005af2 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ae4:	f7fc fac8 	bl	8002078 <HAL_GetTick>
 8005ae8:	1b00      	subs	r0, r0, r4
 8005aea:	2802      	cmp	r0, #2
 8005aec:	d9f4      	bls.n	8005ad8 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8005aee:	2003      	movs	r0, #3
 8005af0:	e000      	b.n	8005af4 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8005af2:	2000      	movs	r0, #0
}
 8005af4:	b009      	add	sp, #36	; 0x24
 8005af6:	bd30      	pop	{r4, r5, pc}
 8005af8:	08015f00 	.word	0x08015f00
 8005afc:	58004000 	.word	0x58004000

08005b00 <RCC_SetFlashLatencyFromMSIRange>:
{
 8005b00:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005b02:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005b06:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005b08:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005b1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b1e:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005b22:	f7ff ff3b 	bl	800599c <HAL_PWREx_GetVoltageRange>
 8005b26:	4601      	mov	r1, r0
 8005b28:	4805      	ldr	r0, [pc, #20]	; (8005b40 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005b2a:	fba0 3004 	umull	r3, r0, r0, r4
 8005b2e:	0c80      	lsrs	r0, r0, #18
 8005b30:	f7ff ff88 	bl	8005a44 <RCC_SetFlashLatency>
}
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	bf00      	nop
 8005b38:	080165e0 	.word	0x080165e0
 8005b3c:	08016580 	.word	0x08016580
 8005b40:	431bde83 	.word	0x431bde83

08005b44 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b48:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b50:	f011 010c 	ands.w	r1, r1, #12
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCC_GetSysClockFreq+0x28>
 8005b56:	290c      	cmp	r1, #12
 8005b58:	d006      	beq.n	8005b68 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b5a:	2904      	cmp	r1, #4
 8005b5c:	d047      	beq.n	8005bee <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b5e:	2908      	cmp	r1, #8
 8005b60:	d03b      	beq.n	8005bda <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005b62:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005b64:	4610      	mov	r0, r2
 8005b66:	e026      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d1f6      	bne.n	8005b5a <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f013 0308 	ands.w	r3, r3, #8
 8005b76:	d00d      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0x50>
 8005b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f013 0308 	ands.w	r3, r3, #8
 8005b82:	d124      	bne.n	8005bce <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b88:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005b8c:	4a2e      	ldr	r2, [pc, #184]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8005b8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b92:	e00e      	b.n	8005bb2 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b98:	6812      	ldr	r2, [r2, #0]
 8005b9a:	f012 0f08 	tst.w	r2, #8
 8005b9e:	d112      	bne.n	8005bc6 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005bac:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x104>)
 8005bae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005bb2:	b1d1      	cbz	r1, 8005bea <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005bb4:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	d01a      	beq.n	8005bfa <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005bc4:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	e7ee      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x68>
 8005bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd2:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005bd4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005bd8:	e7d8      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005be4:	d106      	bne.n	8005bf4 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005be6:	4819      	ldr	r0, [pc, #100]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005be8:	e7e5      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005bea:	4610      	mov	r0, r2
 8005bec:	e7e3      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005bee:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8005bf0:	4817      	ldr	r0, [pc, #92]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005bf2:	e7e0      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005bf4:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005bf6:	4816      	ldr	r0, [pc, #88]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005bf8:	e7dd      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d009      	beq.n	8005c1c <HAL_RCC_GetSysClockFreq+0xd8>
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d108      	bne.n	8005c1e <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005c16:	d115      	bne.n	8005c44 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005c18:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8005c1a:	e000      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8005c1c:	4a0c      	ldr	r2, [pc, #48]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c22:	68d8      	ldr	r0, [r3, #12]
 8005c24:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005c28:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005c2c:	68d8      	ldr	r0, [r3, #12]
 8005c2e:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8005c32:	3001      	adds	r0, #1
 8005c34:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005c38:	68d8      	ldr	r0, [r3, #12]
 8005c3a:	0f40      	lsrs	r0, r0, #29
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8005c42:	e7bf      	b.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8005c44:	4a02      	ldr	r2, [pc, #8]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c46:	e7ea      	b.n	8005c1e <HAL_RCC_GetSysClockFreq+0xda>
 8005c48:	080165e0 	.word	0x080165e0
 8005c4c:	01e84800 	.word	0x01e84800
 8005c50:	00f42400 	.word	0x00f42400

08005c54 <HAL_RCC_GetHCLKFreq>:
{
 8005c54:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005c56:	f7ff ff75 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c64:	4a02      	ldr	r2, [pc, #8]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x1c>)
 8005c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005c6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c6e:	bd08      	pop	{r3, pc}
 8005c70:	08016580 	.word	0x08016580

08005c74 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005c74:	2800      	cmp	r0, #0
 8005c76:	f000 8319 	beq.w	80062ac <HAL_RCC_OscConfig+0x638>
{
 8005c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7c:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c82:	689d      	ldr	r5, [r3, #8]
 8005c84:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005c88:	68de      	ldr	r6, [r3, #12]
 8005c8a:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c8e:	6803      	ldr	r3, [r0, #0]
 8005c90:	f013 0f20 	tst.w	r3, #32
 8005c94:	f000 808f 	beq.w	8005db6 <HAL_RCC_OscConfig+0x142>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c98:	b1ed      	cbz	r5, 8005cd6 <HAL_RCC_OscConfig+0x62>
 8005c9a:	2d0c      	cmp	r5, #12
 8005c9c:	d019      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x5e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c9e:	6a23      	ldr	r3, [r4, #32]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80bc 	beq.w	8005e1e <HAL_RCC_OscConfig+0x1aa>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005cb2:	f7fc f9e1 	bl	8002078 <HAL_GetTick>
 8005cb6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f013 0f02 	tst.w	r3, #2
 8005cc2:	d165      	bne.n	8005d90 <HAL_RCC_OscConfig+0x11c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cc4:	f7fc f9d8 	bl	8002078 <HAL_GetTick>
 8005cc8:	1bc0      	subs	r0, r0, r7
 8005cca:	2802      	cmp	r0, #2
 8005ccc:	d9f4      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8005cce:	2003      	movs	r0, #3
 8005cd0:	e2f9      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005cd2:	2e01      	cmp	r6, #1
 8005cd4:	d1e3      	bne.n	8005c9e <HAL_RCC_OscConfig+0x2a>
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f013 0f02 	tst.w	r3, #2
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_OscConfig+0x76>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ce2:	6a23      	ldr	r3, [r4, #32]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 82e3 	beq.w	80062b0 <HAL_RCC_OscConfig+0x63c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005cea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f013 0f08 	tst.w	r3, #8
 8005cf6:	d029      	beq.n	8005d4c <HAL_RCC_OscConfig+0xd8>
 8005cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d02:	4298      	cmp	r0, r3
 8005d04:	d92a      	bls.n	8005d5c <HAL_RCC_OscConfig+0xe8>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d06:	f7ff fefb 	bl	8005b00 <RCC_SetFlashLatencyFromMSIRange>
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f040 82d2 	bne.w	80062b4 <HAL_RCC_OscConfig+0x640>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	f042 0208 	orr.w	r2, r2, #8
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005d22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d24:	430a      	orrs	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d28:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005d30:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d34:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d36:	f7ff ff8d 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8005d3a:	4bb0      	ldr	r3, [pc, #704]	; (8005ffc <HAL_RCC_OscConfig+0x388>)
 8005d3c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8005d3e:	4bb0      	ldr	r3, [pc, #704]	; (8006000 <HAL_RCC_OscConfig+0x38c>)
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	f7fc f997 	bl	8002074 <HAL_InitTick>
        if (status != HAL_OK)
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d035      	beq.n	8005db6 <HAL_RCC_OscConfig+0x142>
 8005d4a:	e2bc      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d5a:	e7d2      	b.n	8005d02 <HAL_RCC_OscConfig+0x8e>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	f042 0208 	orr.w	r2, r2, #8
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005d6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005d70:	430a      	orrs	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005d7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005d80:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005d84:	f7ff febc 	bl	8005b00 <RCC_SetFlashLatencyFromMSIRange>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d0d4      	beq.n	8005d36 <HAL_RCC_OscConfig+0xc2>
            return HAL_ERROR;
 8005d8c:	2001      	movs	r0, #1
 8005d8e:	e29a      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	f042 0208 	orr.w	r2, r2, #8
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005da2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005da8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005db0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005db4:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	f013 0f01 	tst.w	r3, #1
 8005dbc:	d051      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1ee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005dbe:	2d08      	cmp	r5, #8
 8005dc0:	d045      	beq.n	8005e4e <HAL_RCC_OscConfig+0x1da>
 8005dc2:	2d0c      	cmp	r5, #12
 8005dc4:	d041      	beq.n	8005e4a <HAL_RCC_OscConfig+0x1d6>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005dd0:	68a1      	ldr	r1, [r4, #8]
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dd6:	6863      	ldr	r3, [r4, #4]
 8005dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ddc:	d063      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x232>
 8005dde:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005de2:	d065      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x23c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005dee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005df6:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005df8:	6863      	ldr	r3, [r4, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d063      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x252>
        tickstart = HAL_GetTick();
 8005dfe:	f7fc f93b 	bl	8002078 <HAL_GetTick>
 8005e02:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005e0e:	d128      	bne.n	8005e62 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e10:	f7fc f932 	bl	8002078 <HAL_GetTick>
 8005e14:	1bc0      	subs	r0, r0, r7
 8005e16:	2864      	cmp	r0, #100	; 0x64
 8005e18:	d9f4      	bls.n	8005e04 <HAL_RCC_OscConfig+0x190>
            return HAL_TIMEOUT;
 8005e1a:	2003      	movs	r0, #3
 8005e1c:	e253      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e22:	6813      	ldr	r3, [r2, #0]
 8005e24:	f023 0301 	bic.w	r3, r3, #1
 8005e28:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e2a:	f7fc f925 	bl	8002078 <HAL_GetTick>
 8005e2e:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f013 0f02 	tst.w	r3, #2
 8005e3a:	d0bc      	beq.n	8005db6 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e3c:	f7fc f91c 	bl	8002078 <HAL_GetTick>
 8005e40:	1bc0      	subs	r0, r0, r7
 8005e42:	2802      	cmp	r0, #2
 8005e44:	d9f4      	bls.n	8005e30 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8005e46:	2003      	movs	r0, #3
 8005e48:	e23d      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e4a:	2e03      	cmp	r6, #3
 8005e4c:	d1bb      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x152>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005e58:	d003      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e5a:	6863      	ldr	r3, [r4, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 822b 	beq.w	80062b8 <HAL_RCC_OscConfig+0x644>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	f013 0f02 	tst.w	r3, #2
 8005e68:	d052      	beq.n	8005f10 <HAL_RCC_OscConfig+0x29c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e6a:	2d04      	cmp	r5, #4
 8005e6c:	d03d      	beq.n	8005eea <HAL_RCC_OscConfig+0x276>
 8005e6e:	2d0c      	cmp	r5, #12
 8005e70:	d039      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x272>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8091 	beq.w	8005f9c <HAL_RCC_OscConfig+0x328>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e86:	f7fc f8f7 	bl	8002078 <HAL_GetTick>
 8005e8a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005e96:	d177      	bne.n	8005f88 <HAL_RCC_OscConfig+0x314>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e98:	f7fc f8ee 	bl	8002078 <HAL_GetTick>
 8005e9c:	1b80      	subs	r0, r0, r6
 8005e9e:	2802      	cmp	r0, #2
 8005ea0:	d9f4      	bls.n	8005e8c <HAL_RCC_OscConfig+0x218>
            return HAL_TIMEOUT;
 8005ea2:	2003      	movs	r0, #3
 8005ea4:	e20f      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eac:	6013      	str	r3, [r2, #0]
}
 8005eae:	e7a3      	b.n	8005df8 <HAL_RCC_OscConfig+0x184>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005eba:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005ec2:	601a      	str	r2, [r3, #0]
}
 8005ec4:	e798      	b.n	8005df8 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 8005ec6:	f7fc f8d7 	bl	8002078 <HAL_GetTick>
 8005eca:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ed6:	d0c4      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ed8:	f7fc f8ce 	bl	8002078 <HAL_GetTick>
 8005edc:	1bc0      	subs	r0, r0, r7
 8005ede:	2864      	cmp	r0, #100	; 0x64
 8005ee0:	d9f4      	bls.n	8005ecc <HAL_RCC_OscConfig+0x258>
            return HAL_TIMEOUT;
 8005ee2:	2003      	movs	r0, #3
 8005ee4:	e1ef      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ee6:	2e02      	cmp	r6, #2
 8005ee8:	d1c3      	bne.n	8005e72 <HAL_RCC_OscConfig+0x1fe>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005ef4:	d003      	beq.n	8005efe <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef6:	6923      	ldr	r3, [r4, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 81df 	beq.w	80062bc <HAL_RCC_OscConfig+0x648>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005efe:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f04:	6853      	ldr	r3, [r2, #4]
 8005f06:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f0a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f0e:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	f013 0f08 	tst.w	r3, #8
 8005f16:	f000 808e 	beq.w	8006036 <HAL_RCC_OscConfig+0x3c2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f1a:	69a3      	ldr	r3, [r4, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d071      	beq.n	8006004 <HAL_RCC_OscConfig+0x390>
      uint32_t csr_temp = RCC->CSR;
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005f28:	69e1      	ldr	r1, [r4, #28]
 8005f2a:	f003 0210 	and.w	r2, r3, #16
 8005f2e:	4291      	cmp	r1, r2
 8005f30:	d011      	beq.n	8005f56 <HAL_RCC_OscConfig+0x2e2>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005f32:	f003 0203 	and.w	r2, r3, #3
 8005f36:	2a02      	cmp	r2, #2
 8005f38:	f000 81c2 	beq.w	80062c0 <HAL_RCC_OscConfig+0x64c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005f3c:	f013 0f01 	tst.w	r3, #1
 8005f40:	d142      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x354>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f46:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005f4a:	f023 0310 	bic.w	r3, r3, #16
 8005f4e:	69e1      	ldr	r1, [r4, #28]
 8005f50:	430b      	orrs	r3, r1
 8005f52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f5a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005f66:	f7fc f887 	bl	8002078 <HAL_GetTick>
 8005f6a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f74:	f013 0f02 	tst.w	r3, #2
 8005f78:	d15d      	bne.n	8006036 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f7a:	f7fc f87d 	bl	8002078 <HAL_GetTick>
 8005f7e:	1b80      	subs	r0, r0, r6
 8005f80:	2811      	cmp	r0, #17
 8005f82:	d9f3      	bls.n	8005f6c <HAL_RCC_OscConfig+0x2f8>
          return HAL_TIMEOUT;
 8005f84:	2003      	movs	r0, #3
 8005f86:	e19e      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f88:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f8e:	6853      	ldr	r3, [r2, #4]
 8005f90:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005f94:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005f98:	6053      	str	r3, [r2, #4]
}
 8005f9a:	e7b9      	b.n	8005f10 <HAL_RCC_OscConfig+0x29c>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa0:	6813      	ldr	r3, [r2, #0]
 8005fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005fa8:	f7fc f866 	bl	8002078 <HAL_GetTick>
 8005fac:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005fb8:	d0aa      	beq.n	8005f10 <HAL_RCC_OscConfig+0x29c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fba:	f7fc f85d 	bl	8002078 <HAL_GetTick>
 8005fbe:	1b80      	subs	r0, r0, r6
 8005fc0:	2802      	cmp	r0, #2
 8005fc2:	d9f4      	bls.n	8005fae <HAL_RCC_OscConfig+0x33a>
            return HAL_TIMEOUT;
 8005fc4:	2003      	movs	r0, #3
 8005fc6:	e17e      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fcc:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8005fd0:	f023 0301 	bic.w	r3, r3, #1
 8005fd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005fd8:	f7fc f84e 	bl	8002078 <HAL_GetTick>
 8005fdc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fe6:	f013 0f02 	tst.w	r3, #2
 8005fea:	d0aa      	beq.n	8005f42 <HAL_RCC_OscConfig+0x2ce>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fec:	f7fc f844 	bl	8002078 <HAL_GetTick>
 8005ff0:	1b80      	subs	r0, r0, r6
 8005ff2:	2811      	cmp	r0, #17
 8005ff4:	d9f3      	bls.n	8005fde <HAL_RCC_OscConfig+0x36a>
              return HAL_TIMEOUT;
 8005ff6:	2003      	movs	r0, #3
 8005ff8:	e165      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
 8005ffa:	bf00      	nop
 8005ffc:	20000070 	.word	0x20000070
 8006000:	20000074 	.word	0x20000074
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006008:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8006014:	f7fc f830 	bl	8002078 <HAL_GetTick>
 8006018:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800601a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006022:	f013 0f02 	tst.w	r3, #2
 8006026:	d006      	beq.n	8006036 <HAL_RCC_OscConfig+0x3c2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006028:	f7fc f826 	bl	8002078 <HAL_GetTick>
 800602c:	1b80      	subs	r0, r0, r6
 800602e:	2811      	cmp	r0, #17
 8006030:	d9f3      	bls.n	800601a <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8006032:	2003      	movs	r0, #3
 8006034:	e147      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	f013 0f04 	tst.w	r3, #4
 800603c:	f000 80b1 	beq.w	80061a2 <HAL_RCC_OscConfig+0x52e>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006040:	4ba8      	ldr	r3, [pc, #672]	; (80062e4 <HAL_RCC_OscConfig+0x670>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006048:	d110      	bne.n	800606c <HAL_RCC_OscConfig+0x3f8>
      HAL_PWR_EnableBkUpAccess();
 800604a:	f7ff fc79 	bl	8005940 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800604e:	f7fc f813 	bl	8002078 <HAL_GetTick>
 8006052:	4606      	mov	r6, r0
 8006054:	4ba3      	ldr	r3, [pc, #652]	; (80062e4 <HAL_RCC_OscConfig+0x670>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f413 7f80 	tst.w	r3, #256	; 0x100
 800605c:	d106      	bne.n	800606c <HAL_RCC_OscConfig+0x3f8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605e:	f7fc f80b 	bl	8002078 <HAL_GetTick>
 8006062:	1b80      	subs	r0, r0, r6
 8006064:	2802      	cmp	r0, #2
 8006066:	d9f5      	bls.n	8006054 <HAL_RCC_OscConfig+0x3e0>
          return HAL_TIMEOUT;
 8006068:	2003      	movs	r0, #3
 800606a:	e12c      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800606c:	68e3      	ldr	r3, [r4, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d061      	beq.n	8006136 <HAL_RCC_OscConfig+0x4c2>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006072:	2b85      	cmp	r3, #133	; 0x85
 8006074:	d001      	beq.n	800607a <HAL_RCC_OscConfig+0x406>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006076:	2b05      	cmp	r3, #5
 8006078:	d107      	bne.n	800608a <HAL_RCC_OscConfig+0x416>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800607a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800607e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006082:	f043 0304 	orr.w	r3, r3, #4
 8006086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800608a:	f7fb fff5 	bl	8002078 <HAL_GetTick>
 800608e:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006094:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f013 0f02 	tst.w	r3, #2
 80060ac:	d108      	bne.n	80060c0 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ae:	f7fb ffe3 	bl	8002078 <HAL_GetTick>
 80060b2:	1b80      	subs	r0, r0, r6
 80060b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80060b8:	4298      	cmp	r0, r3
 80060ba:	d9f1      	bls.n	80060a0 <HAL_RCC_OscConfig+0x42c>
          return HAL_TIMEOUT;
 80060bc:	2003      	movs	r0, #3
 80060be:	e102      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80060c0:	68e3      	ldr	r3, [r4, #12]
 80060c2:	2b81      	cmp	r3, #129	; 0x81
 80060c4:	d001      	beq.n	80060ca <HAL_RCC_OscConfig+0x456>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80060c6:	2b85      	cmp	r3, #133	; 0x85
 80060c8:	d11a      	bne.n	8006100 <HAL_RCC_OscConfig+0x48c>
        tickstart = HAL_GetTick();
 80060ca:	f7fb ffd5 	bl	8002078 <HAL_GetTick>
 80060ce:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80060d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80060ec:	d159      	bne.n	80061a2 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ee:	f7fb ffc3 	bl	8002078 <HAL_GetTick>
 80060f2:	1b80      	subs	r0, r0, r6
 80060f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80060f8:	4298      	cmp	r0, r3
 80060fa:	d9f1      	bls.n	80060e0 <HAL_RCC_OscConfig+0x46c>
            return HAL_TIMEOUT;
 80060fc:	2003      	movs	r0, #3
 80060fe:	e0e2      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        tickstart = HAL_GetTick();
 8006100:	f7fb ffba 	bl	8002078 <HAL_GetTick>
 8006104:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800610e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006122:	d03e      	beq.n	80061a2 <HAL_RCC_OscConfig+0x52e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006124:	f7fb ffa8 	bl	8002078 <HAL_GetTick>
 8006128:	1b80      	subs	r0, r0, r6
 800612a:	f241 3388 	movw	r3, #5000	; 0x1388
 800612e:	4298      	cmp	r0, r3
 8006130:	d9f1      	bls.n	8006116 <HAL_RCC_OscConfig+0x4a2>
            return HAL_TIMEOUT;
 8006132:	2003      	movs	r0, #3
 8006134:	e0c7      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 8006136:	f7fb ff9f 	bl	8002078 <HAL_GetTick>
 800613a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800613c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006140:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006158:	d008      	beq.n	800616c <HAL_RCC_OscConfig+0x4f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615a:	f7fb ff8d 	bl	8002078 <HAL_GetTick>
 800615e:	1b80      	subs	r0, r0, r6
 8006160:	f241 3388 	movw	r3, #5000	; 0x1388
 8006164:	4298      	cmp	r0, r3
 8006166:	d9f1      	bls.n	800614c <HAL_RCC_OscConfig+0x4d8>
          return HAL_TIMEOUT;
 8006168:	2003      	movs	r0, #3
 800616a:	e0ac      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
      tickstart = HAL_GetTick();
 800616c:	f7fb ff84 	bl	8002078 <HAL_GetTick>
 8006170:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006176:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800617a:	f023 0301 	bic.w	r3, r3, #1
 800617e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	f013 0f02 	tst.w	r3, #2
 800618e:	d008      	beq.n	80061a2 <HAL_RCC_OscConfig+0x52e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006190:	f7fb ff72 	bl	8002078 <HAL_GetTick>
 8006194:	1b80      	subs	r0, r0, r6
 8006196:	f241 3388 	movw	r3, #5000	; 0x1388
 800619a:	4298      	cmp	r0, r3
 800619c:	d9f1      	bls.n	8006182 <HAL_RCC_OscConfig+0x50e>
          return HAL_TIMEOUT;
 800619e:	2003      	movs	r0, #3
 80061a0:	e091      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 808d 	beq.w	80062c4 <HAL_RCC_OscConfig+0x650>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061aa:	2d0c      	cmp	r5, #12
 80061ac:	d062      	beq.n	8006274 <HAL_RCC_OscConfig+0x600>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d01f      	beq.n	80061f2 <HAL_RCC_OscConfig+0x57e>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80061b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80061bc:	601a      	str	r2, [r3, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	f022 0203 	bic.w	r2, r2, #3
 80061c4:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80061cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061d0:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80061d2:	f7fb ff51 	bl	8002078 <HAL_GetTick>
 80061d6:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80061d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80061e2:	d073      	beq.n	80062cc <HAL_RCC_OscConfig+0x658>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e4:	f7fb ff48 	bl	8002078 <HAL_GetTick>
 80061e8:	1b00      	subs	r0, r0, r4
 80061ea:	280a      	cmp	r0, #10
 80061ec:	d9f4      	bls.n	80061d8 <HAL_RCC_OscConfig+0x564>
            return HAL_TIMEOUT;
 80061ee:	2003      	movs	r0, #3
 80061f0:	e069      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80061f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061f6:	6813      	ldr	r3, [r2, #0]
 80061f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80061fe:	f7fb ff3b 	bl	8002078 <HAL_GetTick>
 8006202:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800620e:	d12a      	bne.n	8006266 <HAL_RCC_OscConfig+0x5f2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006210:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006214:	68d3      	ldr	r3, [r2, #12]
 8006216:	4934      	ldr	r1, [pc, #208]	; (80062e8 <HAL_RCC_OscConfig+0x674>)
 8006218:	4019      	ands	r1, r3
 800621a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800621c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800621e:	4303      	orrs	r3, r0
 8006220:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006222:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006226:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006228:	4303      	orrs	r3, r0
 800622a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800622c:	4303      	orrs	r3, r0
 800622e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006230:	4303      	orrs	r3, r0
 8006232:	430b      	orrs	r3, r1
 8006234:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800623c:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800623e:	68d3      	ldr	r3, [r2, #12]
 8006240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006244:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006246:	f7fb ff17 	bl	8002078 <HAL_GetTick>
 800624a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800624c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006256:	d137      	bne.n	80062c8 <HAL_RCC_OscConfig+0x654>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006258:	f7fb ff0e 	bl	8002078 <HAL_GetTick>
 800625c:	1b00      	subs	r0, r0, r4
 800625e:	280a      	cmp	r0, #10
 8006260:	d9f4      	bls.n	800624c <HAL_RCC_OscConfig+0x5d8>
            return HAL_TIMEOUT;
 8006262:	2003      	movs	r0, #3
 8006264:	e02f      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006266:	f7fb ff07 	bl	8002078 <HAL_GetTick>
 800626a:	1b40      	subs	r0, r0, r5
 800626c:	280a      	cmp	r0, #10
 800626e:	d9c9      	bls.n	8006204 <HAL_RCC_OscConfig+0x590>
            return HAL_TIMEOUT;
 8006270:	2003      	movs	r0, #3
 8006272:	e028      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006274:	2b01      	cmp	r3, #1
 8006276:	d02b      	beq.n	80062d0 <HAL_RCC_OscConfig+0x65c>
        pll_config = RCC->PLLCFGR;
 8006278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627c:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800627e:	f003 0103 	and.w	r1, r3, #3
 8006282:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006284:	4291      	cmp	r1, r2
 8006286:	d125      	bne.n	80062d4 <HAL_RCC_OscConfig+0x660>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006288:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800628c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800628e:	428a      	cmp	r2, r1
 8006290:	d122      	bne.n	80062d8 <HAL_RCC_OscConfig+0x664>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006292:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006296:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006298:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800629c:	d11e      	bne.n	80062dc <HAL_RCC_OscConfig+0x668>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800629e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80062a2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d11b      	bne.n	80062e0 <HAL_RCC_OscConfig+0x66c>
  return HAL_OK;
 80062a8:	2000      	movs	r0, #0
 80062aa:	e00c      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
    return HAL_ERROR;
 80062ac:	2001      	movs	r0, #1
}
 80062ae:	4770      	bx	lr
        return HAL_ERROR;
 80062b0:	2001      	movs	r0, #1
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
            return HAL_ERROR;
 80062b4:	2001      	movs	r0, #1
 80062b6:	e006      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80062b8:	2001      	movs	r0, #1
 80062ba:	e004      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80062bc:	2001      	movs	r0, #1
 80062be:	e002      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 80062c0:	2001      	movs	r0, #1
 80062c2:	e000      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
  return HAL_OK;
 80062c4:	2000      	movs	r0, #0
}
 80062c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80062c8:	2000      	movs	r0, #0
 80062ca:	e7fc      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
 80062cc:	2000      	movs	r0, #0
 80062ce:	e7fa      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
        return HAL_ERROR;
 80062d0:	2001      	movs	r0, #1
 80062d2:	e7f8      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
          return HAL_ERROR;
 80062d4:	2001      	movs	r0, #1
 80062d6:	e7f6      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
 80062d8:	2001      	movs	r0, #1
 80062da:	e7f4      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
 80062dc:	2001      	movs	r0, #1
 80062de:	e7f2      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
 80062e0:	2001      	movs	r0, #1
 80062e2:	e7f0      	b.n	80062c6 <HAL_RCC_OscConfig+0x652>
 80062e4:	58000400 	.word	0x58000400
 80062e8:	11c1808c 	.word	0x11c1808c

080062ec <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80062ec:	2800      	cmp	r0, #0
 80062ee:	f000 8127 	beq.w	8006540 <HAL_RCC_ClockConfig+0x254>
{
 80062f2:	b570      	push	{r4, r5, r6, lr}
 80062f4:	460c      	mov	r4, r1
 80062f6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062f8:	4b93      	ldr	r3, [pc, #588]	; (8006548 <HAL_RCC_ClockConfig+0x25c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	428b      	cmp	r3, r1
 8006302:	d32d      	bcc.n	8006360 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	f013 0f02 	tst.w	r3, #2
 800630a:	d13f      	bne.n	800638c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	f013 0f20 	tst.w	r3, #32
 8006312:	d153      	bne.n	80063bc <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	f013 0f40 	tst.w	r3, #64	; 0x40
 800631a:	d16a      	bne.n	80063f2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	f013 0f04 	tst.w	r3, #4
 8006322:	f040 8083 	bne.w	800642c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	f013 0f08 	tst.w	r3, #8
 800632c:	f040 8097 	bne.w	800645e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	f013 0f01 	tst.w	r3, #1
 8006336:	f000 80de 	beq.w	80064f6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800633a:	686b      	ldr	r3, [r5, #4]
 800633c:	2b02      	cmp	r3, #2
 800633e:	f000 80a8 	beq.w	8006492 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006342:	2b03      	cmp	r3, #3
 8006344:	f000 80ad 	beq.w	80064a2 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 80b2 	bne.w	80064b2 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800634e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006352:	6812      	ldr	r2, [r2, #0]
 8006354:	f012 0f02 	tst.w	r2, #2
 8006358:	f040 80b1 	bne.w	80064be <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800635c:	2001      	movs	r0, #1
 800635e:	e0ee      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006360:	4a79      	ldr	r2, [pc, #484]	; (8006548 <HAL_RCC_ClockConfig+0x25c>)
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	f023 0307 	bic.w	r3, r3, #7
 8006368:	430b      	orrs	r3, r1
 800636a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800636c:	f7fb fe84 	bl	8002078 <HAL_GetTick>
 8006370:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006372:	4b75      	ldr	r3, [pc, #468]	; (8006548 <HAL_RCC_ClockConfig+0x25c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	42a3      	cmp	r3, r4
 800637c:	d0c2      	beq.n	8006304 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800637e:	f7fb fe7b 	bl	8002078 <HAL_GetTick>
 8006382:	1b80      	subs	r0, r0, r6
 8006384:	2802      	cmp	r0, #2
 8006386:	d9f4      	bls.n	8006372 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8006388:	2003      	movs	r0, #3
 800638a:	e0d8      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800638c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800638e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006392:	688a      	ldr	r2, [r1, #8]
 8006394:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006398:	4313      	orrs	r3, r2
 800639a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800639c:	f7fb fe6c 	bl	8002078 <HAL_GetTick>
 80063a0:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80063a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80063ac:	d1ae      	bne.n	800630c <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063ae:	f7fb fe63 	bl	8002078 <HAL_GetTick>
 80063b2:	1b80      	subs	r0, r0, r6
 80063b4:	2802      	cmp	r0, #2
 80063b6:	d9f4      	bls.n	80063a2 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80063b8:	2003      	movs	r0, #3
 80063ba:	e0c0      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80063bc:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80063be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063c2:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 80063c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 80063d0:	f7fb fe52 	bl	8002078 <HAL_GetTick>
 80063d4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80063d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80063de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80063e2:	d197      	bne.n	8006314 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063e4:	f7fb fe48 	bl	8002078 <HAL_GetTick>
 80063e8:	1b80      	subs	r0, r0, r6
 80063ea:	2802      	cmp	r0, #2
 80063ec:	d9f3      	bls.n	80063d6 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80063ee:	2003      	movs	r0, #3
 80063f0:	e0a5      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80063f2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80063f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063f8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80063fc:	f023 030f 	bic.w	r3, r3, #15
 8006400:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8006404:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8006408:	f7fb fe36 	bl	8002078 <HAL_GetTick>
 800640c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800640e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006412:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006416:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800641a:	f47f af7f 	bne.w	800631c <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800641e:	f7fb fe2b 	bl	8002078 <HAL_GetTick>
 8006422:	1b80      	subs	r0, r0, r6
 8006424:	2802      	cmp	r0, #2
 8006426:	d9f2      	bls.n	800640e <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006428:	2003      	movs	r0, #3
 800642a:	e088      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800642c:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800642e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006432:	688a      	ldr	r2, [r1, #8]
 8006434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006438:	4313      	orrs	r3, r2
 800643a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800643c:	f7fb fe1c 	bl	8002078 <HAL_GetTick>
 8006440:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800644c:	f47f af6b 	bne.w	8006326 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006450:	f7fb fe12 	bl	8002078 <HAL_GetTick>
 8006454:	1b80      	subs	r0, r0, r6
 8006456:	2802      	cmp	r0, #2
 8006458:	d9f3      	bls.n	8006442 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800645a:	2003      	movs	r0, #3
 800645c:	e06f      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800645e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006464:	6893      	ldr	r3, [r2, #8]
 8006466:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800646a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800646e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006470:	f7fb fe02 	bl	8002078 <HAL_GetTick>
 8006474:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006480:	f47f af56 	bne.w	8006330 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006484:	f7fb fdf8 	bl	8002078 <HAL_GetTick>
 8006488:	1b80      	subs	r0, r0, r6
 800648a:	2802      	cmp	r0, #2
 800648c:	d9f3      	bls.n	8006476 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800648e:	2003      	movs	r0, #3
 8006490:	e055      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800649c:	d10f      	bne.n	80064be <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800649e:	2001      	movs	r0, #1
 80064a0:	e04d      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80064a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80064ac:	d107      	bne.n	80064be <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80064ae:	2001      	movs	r0, #1
 80064b0:	e045      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80064b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80064bc:	d042      	beq.n	8006544 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80064be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c2:	688a      	ldr	r2, [r1, #8]
 80064c4:	f022 0203 	bic.w	r2, r2, #3
 80064c8:	4313      	orrs	r3, r2
 80064ca:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80064cc:	f7fb fdd4 	bl	8002078 <HAL_GetTick>
 80064d0:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80064d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064dc:	686a      	ldr	r2, [r5, #4]
 80064de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80064e2:	d008      	beq.n	80064f6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e4:	f7fb fdc8 	bl	8002078 <HAL_GetTick>
 80064e8:	1b80      	subs	r0, r0, r6
 80064ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80064ee:	4298      	cmp	r0, r3
 80064f0:	d9ef      	bls.n	80064d2 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 80064f2:	2003      	movs	r0, #3
 80064f4:	e023      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <HAL_RCC_ClockConfig+0x25c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	42a3      	cmp	r3, r4
 8006500:	d915      	bls.n	800652e <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006502:	4a11      	ldr	r2, [pc, #68]	; (8006548 <HAL_RCC_ClockConfig+0x25c>)
 8006504:	6813      	ldr	r3, [r2, #0]
 8006506:	f023 0307 	bic.w	r3, r3, #7
 800650a:	4323      	orrs	r3, r4
 800650c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800650e:	f7fb fdb3 	bl	8002078 <HAL_GetTick>
 8006512:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006514:	4b0c      	ldr	r3, [pc, #48]	; (8006548 <HAL_RCC_ClockConfig+0x25c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	42a3      	cmp	r3, r4
 800651e:	d006      	beq.n	800652e <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006520:	f7fb fdaa 	bl	8002078 <HAL_GetTick>
 8006524:	1b40      	subs	r0, r0, r5
 8006526:	2802      	cmp	r0, #2
 8006528:	d9f4      	bls.n	8006514 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800652a:	2003      	movs	r0, #3
 800652c:	e007      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800652e:	f7ff fb91 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
 8006532:	4b06      	ldr	r3, [pc, #24]	; (800654c <HAL_RCC_ClockConfig+0x260>)
 8006534:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8006536:	4b06      	ldr	r3, [pc, #24]	; (8006550 <HAL_RCC_ClockConfig+0x264>)
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	f7fb fd9b 	bl	8002074 <HAL_InitTick>
}
 800653e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006540:	2001      	movs	r0, #1
}
 8006542:	4770      	bx	lr
        return HAL_ERROR;
 8006544:	2001      	movs	r0, #1
 8006546:	e7fa      	b.n	800653e <HAL_RCC_ClockConfig+0x252>
 8006548:	58004000 	.word	0x58004000
 800654c:	20000070 	.word	0x20000070
 8006550:	20000074 	.word	0x20000074

08006554 <HAL_RCC_GetPCLK1Freq>:
{
 8006554:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006556:	f7ff fb7d 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800655a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006564:	4a02      	ldr	r2, [pc, #8]	; (8006570 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800656a:	40d8      	lsrs	r0, r3
 800656c:	bd08      	pop	{r3, pc}
 800656e:	bf00      	nop
 8006570:	080165c0 	.word	0x080165c0

08006574 <HAL_RCC_GetPCLK2Freq>:
{
 8006574:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006576:	f7ff fb6d 	bl	8005c54 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800657a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006584:	4a02      	ldr	r2, [pc, #8]	; (8006590 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800658a:	40d8      	lsrs	r0, r3
 800658c:	bd08      	pop	{r3, pc}
 800658e:	bf00      	nop
 8006590:	080165c0 	.word	0x080165c0

08006594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006598:	6803      	ldr	r3, [r0, #0]
 800659a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800659e:	f040 80ab 	bne.w	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80065a2:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	f013 0f01 	tst.w	r3, #1
 80065aa:	d00a      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065ac:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80065ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80065b6:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80065ba:	b292      	uxth	r2, r2
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	f013 0f02 	tst.w	r3, #2
 80065c8:	d00a      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065ca:	68a2      	ldr	r2, [r4, #8]
 80065cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065d0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80065d4:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80065d8:	b292      	uxth	r2, r2
 80065da:	4313      	orrs	r3, r2
 80065dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	f013 0f20 	tst.w	r3, #32
 80065e6:	d009      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065e8:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80065ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80065f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80065f6:	4313      	orrs	r3, r2
 80065f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006602:	d00c      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006604:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800660a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800660e:	0c02      	lsrs	r2, r0, #16
 8006610:	0412      	lsls	r2, r2, #16
 8006612:	ea23 0302 	bic.w	r3, r3, r2
 8006616:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006624:	d00c      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006626:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800662c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006630:	0c02      	lsrs	r2, r0, #16
 8006632:	0412      	lsls	r2, r2, #16
 8006634:	ea23 0302 	bic.w	r3, r3, r2
 8006638:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800663c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006646:	d00c      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006648:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800664a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800664e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8006652:	0c02      	lsrs	r2, r0, #16
 8006654:	0412      	lsls	r2, r2, #16
 8006656:	ea23 0302 	bic.w	r3, r3, r2
 800665a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800665e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006668:	f040 809e 	bne.w	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006672:	f040 80aa 	bne.w	80067ca <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	f413 7f80 	tst.w	r3, #256	; 0x100
 800667c:	f040 80b6 	bne.w	80067ec <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	f013 0f10 	tst.w	r3, #16
 8006686:	d00e      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006688:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800668a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800668e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006692:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800669c:	68e3      	ldr	r3, [r4, #12]
 800669e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a2:	f000 80b4 	beq.w	800680e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80066ac:	d00f      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80066b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066b8:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066c4:	b91b      	cbnz	r3, 80066ce <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80066c6:	68cb      	ldr	r3, [r1, #12]
 80066c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066cc:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80066d4:	d00e      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80066d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80066e4:	4313      	orrs	r3, r2
 80066e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80066ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80066ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f0:	f000 8092 	beq.w	8006818 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 80066f4:	4628      	mov	r0, r5
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 80066f8:	f7ff f922 	bl	8005940 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80066fc:	f7fb fcbc 	bl	8002078 <HAL_GetTick>
 8006700:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006702:	4b48      	ldr	r3, [pc, #288]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f413 7f80 	tst.w	r3, #256	; 0x100
 800670a:	d106      	bne.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670c:	f7fb fcb4 	bl	8002078 <HAL_GetTick>
 8006710:	1b40      	subs	r0, r0, r5
 8006712:	2802      	cmp	r0, #2
 8006714:	d9f5      	bls.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8006716:	2503      	movs	r5, #3
 8006718:	e000      	b.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800671a:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800671c:	2d00      	cmp	r5, #0
 800671e:	f47f af41 	bne.w	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672a:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800672e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006730:	429a      	cmp	r2, r3
 8006732:	d024      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006738:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800673c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006740:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006744:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006748:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800674c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006750:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006754:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800675c:	f012 0f02 	tst.w	r2, #2
 8006760:	d10f      	bne.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8006762:	2d00      	cmp	r5, #0
 8006764:	f47f af1e 	bne.w	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006768:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800676a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800676e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006772:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800677c:	e712      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800677e:	2200      	movs	r2, #0
 8006780:	e7ec      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8006782:	f7fb fc79 	bl	8002078 <HAL_GetTick>
 8006786:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800678c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006790:	f013 0f02 	tst.w	r3, #2
 8006794:	d1e5      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006796:	f7fb fc6f 	bl	8002078 <HAL_GetTick>
 800679a:	1b80      	subs	r0, r0, r6
 800679c:	f241 3388 	movw	r3, #5000	; 0x1388
 80067a0:	4298      	cmp	r0, r3
 80067a2:	d9f1      	bls.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 80067a4:	2503      	movs	r5, #3
 80067a6:	e7dc      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067a8:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80067aa:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80067ae:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067b2:	0919      	lsrs	r1, r3, #4
 80067b4:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80067b8:	ea22 0201 	bic.w	r2, r2, r1
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80067c8:	e750      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067ca:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80067cc:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80067d0:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067d4:	0919      	lsrs	r1, r3, #4
 80067d6:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80067da:	ea22 0201 	bic.w	r2, r2, r1
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80067ea:	e744      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067ec:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80067ee:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80067f2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067f6:	0919      	lsrs	r1, r3, #4
 80067f8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 80067fc:	ea22 0201 	bic.w	r2, r2, r1
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800680c:	e738      	b.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800680e:	68cb      	ldr	r3, [r1, #12]
 8006810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006814:	60cb      	str	r3, [r1, #12]
 8006816:	e746      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006818:	68cb      	ldr	r3, [r1, #12]
 800681a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681e:	60cb      	str	r3, [r1, #12]
 8006820:	e768      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006822:	bf00      	nop
 8006824:	58000400 	.word	0x58000400

08006828 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006828:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d036      	beq.n	800689e <HAL_RTC_DeactivateAlarm+0x76>
 8006830:	2301      	movs	r3, #1
 8006832:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006836:	2302      	movs	r3, #2
 8006838:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800683c:	4b19      	ldr	r3, [pc, #100]	; (80068a4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800683e:	22ca      	movs	r2, #202	; 0xca
 8006840:	625a      	str	r2, [r3, #36]	; 0x24
 8006842:	2253      	movs	r2, #83	; 0x53
 8006844:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006846:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800684a:	d019      	beq.n	8006880 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800684c:	4b15      	ldr	r3, [pc, #84]	; (80068a4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800684e:	699a      	ldr	r2, [r3, #24]
 8006850:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006854:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006858:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800685c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800685e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006860:	f022 0202 	bic.w	r2, r2, #2
 8006864:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006866:	2202      	movs	r2, #2
 8006868:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800686a:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <HAL_RTC_DeactivateAlarm+0x7c>)
 800686c:	22ff      	movs	r2, #255	; 0xff
 800686e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006870:	2301      	movs	r3, #1
 8006872:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006876:	2300      	movs	r3, #0
 8006878:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800687c:	4618      	mov	r0, r3
 800687e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006886:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800688e:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006890:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006898:	2201      	movs	r2, #1
 800689a:	65da      	str	r2, [r3, #92]	; 0x5c
 800689c:	e7e5      	b.n	800686a <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 800689e:	2002      	movs	r0, #2
}
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40002800 	.word	0x40002800

080068a8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80068ac:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80068ae:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80068b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80068b2:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80068b4:	f015 0f01 	tst.w	r5, #1
 80068b8:	d106      	bne.n	80068c8 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80068ba:	f015 0f02 	tst.w	r5, #2
 80068be:	d109      	bne.n	80068d4 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068c0:	2301      	movs	r3, #1
 80068c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 80068ce:	f7fb fe25 	bl	800251c <HAL_RTC_AlarmAEventCallback>
 80068d2:	e7f2      	b.n	80068ba <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80068d4:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 80068d6:	2202      	movs	r2, #2
 80068d8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80068da:	4620      	mov	r0, r4
 80068dc:	f000 f9e6 	bl	8006cac <HAL_RTCEx_AlarmBEventCallback>
 80068e0:	e7ee      	b.n	80068c0 <HAL_RTC_AlarmIRQHandler+0x18>
 80068e2:	bf00      	nop
 80068e4:	40002800 	.word	0x40002800

080068e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068e8:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80068ea:	4a0b      	ldr	r2, [pc, #44]	; (8006918 <HAL_RTC_WaitForSynchro+0x30>)
 80068ec:	68d3      	ldr	r3, [r2, #12]
 80068ee:	f023 0320 	bic.w	r3, r3, #32
 80068f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80068f4:	f7fb fbc0 	bl	8002078 <HAL_GetTick>
 80068f8:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068fa:	4b07      	ldr	r3, [pc, #28]	; (8006918 <HAL_RTC_WaitForSynchro+0x30>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f013 0f20 	tst.w	r3, #32
 8006902:	d107      	bne.n	8006914 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006904:	f7fb fbb8 	bl	8002078 <HAL_GetTick>
 8006908:	1b00      	subs	r0, r0, r4
 800690a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800690e:	d9f4      	bls.n	80068fa <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006910:	2003      	movs	r0, #3
 8006912:	e000      	b.n	8006916 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006914:	2000      	movs	r0, #0
}
 8006916:	bd10      	pop	{r4, pc}
 8006918:	40002800 	.word	0x40002800

0800691c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800691c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800691e:	4b11      	ldr	r3, [pc, #68]	; (8006964 <RTC_EnterInitMode+0x48>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006926:	d002      	beq.n	800692e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006928:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800692a:	4620      	mov	r0, r4
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006930:	4a0c      	ldr	r2, [pc, #48]	; (8006964 <RTC_EnterInitMode+0x48>)
 8006932:	68d3      	ldr	r3, [r2, #12]
 8006934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006938:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800693a:	f7fb fb9d 	bl	8002078 <HAL_GetTick>
 800693e:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006940:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006942:	4b08      	ldr	r3, [pc, #32]	; (8006964 <RTC_EnterInitMode+0x48>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f013 0f40 	tst.w	r3, #64	; 0x40
 800694a:	d1ee      	bne.n	800692a <RTC_EnterInitMode+0xe>
 800694c:	2c03      	cmp	r4, #3
 800694e:	d0ec      	beq.n	800692a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006950:	f7fb fb92 	bl	8002078 <HAL_GetTick>
 8006954:	1b43      	subs	r3, r0, r5
 8006956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800695a:	d9f2      	bls.n	8006942 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800695c:	2403      	movs	r4, #3
 800695e:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8006962:	e7ee      	b.n	8006942 <RTC_EnterInitMode+0x26>
 8006964:	40002800 	.word	0x40002800

08006968 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006968:	b510      	push	{r4, lr}
 800696a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800696c:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <RTC_ExitInitMode+0x4c>)
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006974:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f013 0f20 	tst.w	r3, #32
 800697c:	d107      	bne.n	800698e <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800697e:	f7ff ffb3 	bl	80068e8 <HAL_RTC_WaitForSynchro>
 8006982:	4603      	mov	r3, r0
 8006984:	b1a0      	cbz	r0, 80069b0 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800698c:	e010      	b.n	80069b0 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <RTC_ExitInitMode+0x4c>)
 8006990:	6993      	ldr	r3, [r2, #24]
 8006992:	f023 0320 	bic.w	r3, r3, #32
 8006996:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006998:	f7ff ffa6 	bl	80068e8 <HAL_RTC_WaitForSynchro>
 800699c:	4603      	mov	r3, r0
 800699e:	b110      	cbz	r0, 80069a6 <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069a6:	4903      	ldr	r1, [pc, #12]	; (80069b4 <RTC_ExitInitMode+0x4c>)
 80069a8:	698a      	ldr	r2, [r1, #24]
 80069aa:	f042 0220 	orr.w	r2, r2, #32
 80069ae:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	bd10      	pop	{r4, pc}
 80069b4:	40002800 	.word	0x40002800

080069b8 <HAL_RTC_Init>:
  if (hrtc != NULL)
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d04a      	beq.n	8006a52 <HAL_RTC_Init+0x9a>
{
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80069c0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80069c4:	b19b      	cbz	r3, 80069ee <HAL_RTC_Init+0x36>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80069c6:	2302      	movs	r3, #2
 80069c8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069cc:	4b22      	ldr	r3, [pc, #136]	; (8006a58 <HAL_RTC_Init+0xa0>)
 80069ce:	22ca      	movs	r2, #202	; 0xca
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24
 80069d2:	2253      	movs	r2, #83	; 0x53
 80069d4:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80069d6:	4620      	mov	r0, r4
 80069d8:	f7ff ffa0 	bl	800691c <RTC_EnterInitMode>
    if (status == HAL_OK)
 80069dc:	b160      	cbz	r0, 80069f8 <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069de:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_RTC_Init+0xa0>)
 80069e0:	22ff      	movs	r2, #255	; 0xff
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80069e4:	b910      	cbnz	r0, 80069ec <HAL_RTC_Init+0x34>
      hrtc->State = HAL_RTC_STATE_READY;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 80069ec:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80069ee:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 80069f2:	f7fb f99f 	bl	8001d34 <HAL_RTC_MspInit>
 80069f6:	e7e6      	b.n	80069c6 <HAL_RTC_Init+0xe>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80069f8:	4b17      	ldr	r3, [pc, #92]	; (8006a58 <HAL_RTC_Init+0xa0>)
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a04:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006a06:	6999      	ldr	r1, [r3, #24]
 8006a08:	6862      	ldr	r2, [r4, #4]
 8006a0a:	6920      	ldr	r0, [r4, #16]
 8006a0c:	4302      	orrs	r2, r0
 8006a0e:	69a0      	ldr	r0, [r4, #24]
 8006a10:	4302      	orrs	r2, r0
 8006a12:	430a      	orrs	r2, r1
 8006a14:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006a16:	68e2      	ldr	r2, [r4, #12]
 8006a18:	68a1      	ldr	r1, [r4, #8]
 8006a1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006a1e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006a20:	68da      	ldr	r2, [r3, #12]
 8006a22:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8006a26:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a28:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006a2a:	4301      	orrs	r1, r0
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	60da      	str	r2, [r3, #12]
      status = RTC_ExitInitMode(hrtc);
 8006a30:	4620      	mov	r0, r4
 8006a32:	f7ff ff99 	bl	8006968 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d1d1      	bne.n	80069de <HAL_RTC_Init+0x26>
        MODIFY_REG(RTC->CR, \
 8006a3a:	4907      	ldr	r1, [pc, #28]	; (8006a58 <HAL_RTC_Init+0xa0>)
 8006a3c:	698b      	ldr	r3, [r1, #24]
 8006a3e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8006a42:	6a22      	ldr	r2, [r4, #32]
 8006a44:	69e5      	ldr	r5, [r4, #28]
 8006a46:	432a      	orrs	r2, r5
 8006a48:	6965      	ldr	r5, [r4, #20]
 8006a4a:	432a      	orrs	r2, r5
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	618b      	str	r3, [r1, #24]
 8006a50:	e7c5      	b.n	80069de <HAL_RTC_Init+0x26>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a52:	2001      	movs	r0, #1
}
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40002800 	.word	0x40002800

08006a5c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006a5c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006a5e:	e002      	b.n	8006a66 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006a60:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006a62:	380a      	subs	r0, #10
 8006a64:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8006a66:	2809      	cmp	r0, #9
 8006a68:	d8fa      	bhi.n	8006a60 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	b2db      	uxtb	r3, r3
}
 8006a6e:	4318      	orrs	r0, r3
 8006a70:	4770      	bx	lr
	...

08006a74 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006a74:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	f000 80b0 	beq.w	8006bde <HAL_RTC_SetAlarm_IT+0x16a>
{
 8006a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a82:	4605      	mov	r5, r0
 8006a84:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8006a86:	2301      	movs	r3, #1
 8006a88:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006a92:	4b54      	ldr	r3, [pc, #336]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006a94:	68de      	ldr	r6, [r3, #12]
 8006a96:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006a9a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006a9e:	d043      	beq.n	8006b28 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006aa0:	bb12      	cbnz	r2, 8006ae8 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006aa8:	d101      	bne.n	8006aae <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006aae:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ab2:	7820      	ldrb	r0, [r4, #0]
 8006ab4:	f7ff ffd2 	bl	8006a5c <RTC_ByteToBcd2>
 8006ab8:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006aba:	7860      	ldrb	r0, [r4, #1]
 8006abc:	f7ff ffce 	bl	8006a5c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ac0:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ac4:	78a0      	ldrb	r0, [r4, #2]
 8006ac6:	f7ff ffc9 	bl	8006a5c <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006aca:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006acc:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ace:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ad2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8006ad6:	f7ff ffc1 	bl	8006a5c <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006ada:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006ade:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006ae0:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ae2:	ea48 0000 	orr.w	r0, r8, r0
 8006ae6:	e020      	b.n	8006b2a <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006ae8:	6948      	ldr	r0, [r1, #20]
 8006aea:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006aee:	d009      	beq.n	8006b04 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006af4:	d006      	beq.n	8006b04 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006af6:	4b3b      	ldr	r3, [pc, #236]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006afe:	d101      	bne.n	8006b04 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b04:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b06:	7863      	ldrb	r3, [r4, #1]
 8006b08:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b0e:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b10:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b12:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006b14:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b18:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006b1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006b20:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006b22:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b24:	4318      	orrs	r0, r3
 8006b26:	e000      	b.n	8006b2a <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8006b28:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b2a:	4b2e      	ldr	r3, [pc, #184]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b2c:	22ca      	movs	r2, #202	; 0xca
 8006b2e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b30:	2253      	movs	r2, #83	; 0x53
 8006b32:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006b34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3a:	d02a      	beq.n	8006b92 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006b3c:	4b29      	ldr	r3, [pc, #164]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b3e:	699a      	ldr	r2, [r3, #24]
 8006b40:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8006b44:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006b46:	2202      	movs	r2, #2
 8006b48:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006b4a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006b4e:	d040      	beq.n	8006bd2 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006b50:	4b24      	ldr	r3, [pc, #144]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b52:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006b54:	69a2      	ldr	r2, [r4, #24]
 8006b56:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006b58:	6862      	ldr	r2, [r4, #4]
 8006b5a:	4b22      	ldr	r3, [pc, #136]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b5c:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006b5e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006b60:	f042 0202 	orr.w	r2, r2, #2
 8006b64:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006b66:	699a      	ldr	r2, [r3, #24]
 8006b68:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8006b6c:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006b6e:	4a1e      	ldr	r2, [pc, #120]	; (8006be8 <HAL_RTC_SetAlarm_IT+0x174>)
 8006b70:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8006b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b7c:	4b19      	ldr	r3, [pc, #100]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b7e:	22ff      	movs	r2, #255	; 0xff
 8006b80:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006b88:	2000      	movs	r0, #0
 8006b8a:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006b92:	4b14      	ldr	r3, [pc, #80]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006b94:	699a      	ldr	r2, [r3, #24]
 8006b96:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006b9a:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006ba0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006ba4:	d00f      	beq.n	8006bc6 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006ba6:	4b0f      	ldr	r3, [pc, #60]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006ba8:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006baa:	69a2      	ldr	r2, [r4, #24]
 8006bac:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006bae:	6862      	ldr	r2, [r4, #4]
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006bb2:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006bb4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006bb6:	f042 0201 	orr.w	r2, r2, #1
 8006bba:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8006bc2:	619a      	str	r2, [r3, #24]
 8006bc4:	e7d3      	b.n	8006b6e <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006bc6:	69a3      	ldr	r3, [r4, #24]
 8006bc8:	69e2      	ldr	r2, [r4, #28]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006bce:	6453      	str	r3, [r2, #68]	; 0x44
 8006bd0:	e7ed      	b.n	8006bae <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006bd2:	69a3      	ldr	r3, [r4, #24]
 8006bd4:	69e2      	ldr	r2, [r4, #28]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	4a02      	ldr	r2, [pc, #8]	; (8006be4 <HAL_RTC_SetAlarm_IT+0x170>)
 8006bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006bdc:	e7bc      	b.n	8006b58 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006bde:	2002      	movs	r0, #2
}
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40002800 	.word	0x40002800
 8006be8:	58000800 	.word	0x58000800

08006bec <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d017      	beq.n	8006c24 <HAL_RTCEx_EnableBypassShadow+0x38>
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c00:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8006c02:	22ca      	movs	r2, #202	; 0xca
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24
 8006c06:	2253      	movs	r2, #83	; 0x53
 8006c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	f042 0220 	orr.w	r2, r2, #32
 8006c10:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c12:	22ff      	movs	r2, #255	; 0xff
 8006c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c16:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006c20:	4618      	mov	r0, r3
 8006c22:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006c24:	2002      	movs	r0, #2
}
 8006c26:	4770      	bx	lr
 8006c28:	40002800 	.word	0x40002800

08006c2c <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c2c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d020      	beq.n	8006c76 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8006c34:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8006c36:	2101      	movs	r1, #1
 8006c38:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c42:	4b0e      	ldr	r3, [pc, #56]	; (8006c7c <HAL_RTCEx_SetSSRU_IT+0x50>)
 8006c44:	22ca      	movs	r2, #202	; 0xca
 8006c46:	625a      	str	r2, [r3, #36]	; 0x24
 8006c48:	2253      	movs	r2, #83	; 0x53
 8006c4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c52:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006c54:	4c0a      	ldr	r4, [pc, #40]	; (8006c80 <HAL_RTCEx_SetSSRU_IT+0x54>)
 8006c56:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8006c5a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006c5e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c62:	22ff      	movs	r2, #255	; 0xff
 8006c64:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c66:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006c70:	4618      	mov	r0, r3
}
 8006c72:	bc10      	pop	{r4}
 8006c74:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8006c76:	2002      	movs	r0, #2
}
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40002800 	.word	0x40002800
 8006c80:	58000800 	.word	0x58000800

08006c84 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006c84:	b510      	push	{r4, lr}
 8006c86:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c90:	d103      	bne.n	8006c9a <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006c98:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006c9a:	4b03      	ldr	r3, [pc, #12]	; (8006ca8 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006c9c:	2240      	movs	r2, #64	; 0x40
 8006c9e:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006ca0:	f7fb fc40 	bl	8002524 <HAL_RTCEx_SSRUEventCallback>
 8006ca4:	e7f5      	b.n	8006c92 <HAL_RTCEx_SSRUIRQHandler+0xe>
 8006ca6:	bf00      	nop
 8006ca8:	40002800 	.word	0x40002800

08006cac <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006cac:	4770      	bx	lr

08006cae <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006cae:	0089      	lsls	r1, r1, #2
 8006cb0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006cb4:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006cb8:	600a      	str	r2, [r1, #0]
}
 8006cba:	4770      	bx	lr

08006cbc <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006cbc:	0089      	lsls	r1, r1, #2
 8006cbe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8006cc2:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006cc6:	6808      	ldr	r0, [r1, #0]
}
 8006cc8:	4770      	bx	lr
	...

08006ccc <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006ccc:	4b07      	ldr	r3, [pc, #28]	; (8006cec <SUBGHZSPI_Init+0x20>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cd4:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006cd6:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006cda:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006cdc:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006ce0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ce8:	601a      	str	r2, [r3, #0]
}
 8006cea:	4770      	bx	lr
 8006cec:	58010000 	.word	0x58010000

08006cf0 <HAL_SUBGHZ_Init>:
{
 8006cf0:	b530      	push	{r4, r5, lr}
 8006cf2:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	d04e      	beq.n	8006d96 <HAL_SUBGHZ_Init+0xa6>
 8006cf8:	4604      	mov	r4, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006cfa:	7983      	ldrb	r3, [r0, #6]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d03b      	beq.n	8006d78 <HAL_SUBGHZ_Init+0x88>
  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006d00:	2302      	movs	r3, #2
 8006d02:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d08:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8006d0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d14:	4b21      	ldr	r3, [pc, #132]	; (8006d9c <HAL_SUBGHZ_Init+0xac>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006d1c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006d20:	2264      	movs	r2, #100	; 0x64
 8006d22:	fb02 f303 	mul.w	r3, r2, r3
 8006d26:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8006d28:	9b01      	ldr	r3, [sp, #4]
 8006d2a:	b34b      	cbz	r3, 8006d80 <HAL_SUBGHZ_Init+0x90>
    count--;
 8006d2c:	9b01      	ldr	r3, [sp, #4]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d3a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006d3e:	d1f3      	bne.n	8006d28 <HAL_SUBGHZ_Init+0x38>
    status = HAL_OK;
 8006d40:	2500      	movs	r5, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d42:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <HAL_SUBGHZ_Init+0xb0>)
 8006d44:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006d50:	4914      	ldr	r1, [pc, #80]	; (8006da4 <HAL_SUBGHZ_Init+0xb4>)
 8006d52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006d56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d64:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d6a:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006d6c:	b15d      	cbz	r5, 8006d86 <HAL_SUBGHZ_Init+0x96>
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	71a3      	strb	r3, [r4, #6]
}
 8006d72:	4628      	mov	r0, r5
 8006d74:	b003      	add	sp, #12
 8006d76:	bd30      	pop	{r4, r5, pc}
    hsubghz->Lock = HAL_UNLOCKED;
 8006d78:	7143      	strb	r3, [r0, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006d7a:	f7fb f88f 	bl	8001e9c <HAL_SUBGHZ_MspInit>
 8006d7e:	e7bf      	b.n	8006d00 <HAL_SUBGHZ_Init+0x10>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d80:	2501      	movs	r5, #1
 8006d82:	60a5      	str	r5, [r4, #8]
      break;
 8006d84:	e7dd      	b.n	8006d42 <HAL_SUBGHZ_Init+0x52>
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006d86:	6820      	ldr	r0, [r4, #0]
 8006d88:	f7ff ffa0 	bl	8006ccc <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60a3      	str	r3, [r4, #8]
 8006d94:	e7eb      	b.n	8006d6e <HAL_SUBGHZ_Init+0x7e>
    return status;
 8006d96:	2501      	movs	r5, #1
 8006d98:	e7eb      	b.n	8006d72 <HAL_SUBGHZ_Init+0x82>
 8006d9a:	bf00      	nop
 8006d9c:	20000070 	.word	0x20000070
 8006da0:	58000400 	.word	0x58000400
 8006da4:	58000800 	.word	0x58000800

08006da8 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006da8:	b082      	sub	sp, #8
 8006daa:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006dac:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <SUBGHZSPI_Transmit+0x70>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006db4:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006db8:	2064      	movs	r0, #100	; 0x64
 8006dba:	fb00 f303 	mul.w	r3, r0, r3
 8006dbe:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	b14b      	cbz	r3, 8006dd8 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006dc4:	9b01      	ldr	r3, [sp, #4]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006dca:	4b14      	ldr	r3, [pc, #80]	; (8006e1c <SUBGHZSPI_Transmit+0x74>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f013 0f02 	tst.w	r3, #2
 8006dd2:	d0f5      	beq.n	8006dc0 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	e001      	b.n	8006ddc <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006dd8:	2001      	movs	r0, #1
 8006dda:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <SUBGHZSPI_Transmit+0x74>)
 8006dde:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006de0:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <SUBGHZSPI_Transmit+0x70>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006de8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006dec:	2164      	movs	r1, #100	; 0x64
 8006dee:	fb01 f303 	mul.w	r3, r1, r3
 8006df2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006df4:	9b01      	ldr	r3, [sp, #4]
 8006df6:	b143      	cbz	r3, 8006e0a <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006dfe:	4b07      	ldr	r3, [pc, #28]	; (8006e1c <SUBGHZSPI_Transmit+0x74>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f013 0f01 	tst.w	r3, #1
 8006e06:	d0f5      	beq.n	8006df4 <SUBGHZSPI_Transmit+0x4c>
 8006e08:	e001      	b.n	8006e0e <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006e0e:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <SUBGHZSPI_Transmit+0x74>)
 8006e10:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8006e12:	b002      	add	sp, #8
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20000070 	.word	0x20000070
 8006e1c:	58010000 	.word	0x58010000

08006e20 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006e20:	b082      	sub	sp, #8
 8006e22:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e24:	4b1c      	ldr	r3, [pc, #112]	; (8006e98 <SUBGHZSPI_Receive+0x78>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e2c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006e30:	2064      	movs	r0, #100	; 0x64
 8006e32:	fb00 f303 	mul.w	r3, r0, r3
 8006e36:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006e38:	9b01      	ldr	r3, [sp, #4]
 8006e3a:	b14b      	cbz	r3, 8006e50 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006e3c:	9b01      	ldr	r3, [sp, #4]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006e42:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <SUBGHZSPI_Receive+0x7c>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f013 0f02 	tst.w	r3, #2
 8006e4a:	d0f5      	beq.n	8006e38 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	e001      	b.n	8006e54 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e50:	2001      	movs	r0, #1
 8006e52:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8006e54:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <SUBGHZSPI_Receive+0x7c>)
 8006e56:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006e5a:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e5e:	4b0e      	ldr	r3, [pc, #56]	; (8006e98 <SUBGHZSPI_Receive+0x78>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006e66:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006e6a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006e6e:	fb0c f303 	mul.w	r3, ip, r3
 8006e72:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	b143      	cbz	r3, 8006e8a <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006e78:	9b01      	ldr	r3, [sp, #4]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <SUBGHZSPI_Receive+0x7c>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f013 0f01 	tst.w	r3, #1
 8006e86:	d0f5      	beq.n	8006e74 <SUBGHZSPI_Receive+0x54>
 8006e88:	e001      	b.n	8006e8e <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006e8e:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <SUBGHZSPI_Receive+0x7c>)
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006e94:	b002      	add	sp, #8
 8006e96:	4770      	bx	lr
 8006e98:	20000070 	.word	0x20000070
 8006e9c:	58010000 	.word	0x58010000

08006ea0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006ea0:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <SUBGHZ_WaitOnBusy+0x50>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006eaa:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8006eae:	2264      	movs	r2, #100	; 0x64
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	e006      	b.n	8006ec6 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006eb8:	2302      	movs	r3, #2
 8006eba:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006ebc:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8006ebe:	b002      	add	sp, #8
 8006ec0:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006ec2:	4213      	tst	r3, r2
 8006ec4:	d012      	beq.n	8006eec <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <SUBGHZ_WaitOnBusy+0x54>)
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f013 0304 	ands.w	r3, r3, #4
 8006ece:	d000      	beq.n	8006ed2 <SUBGHZ_WaitOnBusy+0x32>
 8006ed0:	2301      	movs	r3, #1
    if (count == 0U)
 8006ed2:	9a01      	ldr	r2, [sp, #4]
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	d0ef      	beq.n	8006eb8 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006ed8:	9a01      	ldr	r2, [sp, #4]
 8006eda:	3a01      	subs	r2, #1
 8006edc:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006ede:	4a05      	ldr	r2, [pc, #20]	; (8006ef4 <SUBGHZ_WaitOnBusy+0x54>)
 8006ee0:	6952      	ldr	r2, [r2, #20]
 8006ee2:	f012 0202 	ands.w	r2, r2, #2
 8006ee6:	d0ec      	beq.n	8006ec2 <SUBGHZ_WaitOnBusy+0x22>
 8006ee8:	2201      	movs	r2, #1
 8006eea:	e7ea      	b.n	8006ec2 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7e6      	b.n	8006ebe <SUBGHZ_WaitOnBusy+0x1e>
 8006ef0:	20000070 	.word	0x20000070
 8006ef4:	58000400 	.word	0x58000400

08006ef8 <SUBGHZ_CheckDeviceReady>:
{
 8006ef8:	b500      	push	{lr}
 8006efa:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006efc:	7903      	ldrb	r3, [r0, #4]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d004      	beq.n	8006f0c <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006f02:	f7ff ffcd 	bl	8006ea0 <SUBGHZ_WaitOnBusy>
}
 8006f06:	b003      	add	sp, #12
 8006f08:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <SUBGHZ_CheckDeviceReady+0x4c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006f14:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006f18:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f1a:	4a0b      	ldr	r2, [pc, #44]	; (8006f48 <SUBGHZ_CheckDeviceReady+0x50>)
 8006f1c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8006f28:	9b01      	ldr	r3, [sp, #4]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1f9      	bne.n	8006f28 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f34:	4a04      	ldr	r2, [pc, #16]	; (8006f48 <SUBGHZ_CheckDeviceReady+0x50>)
 8006f36:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006f42:	e7de      	b.n	8006f02 <SUBGHZ_CheckDeviceReady+0xa>
 8006f44:	20000070 	.word	0x20000070
 8006f48:	58000400 	.word	0x58000400

08006f4c <HAL_SUBGHZ_WriteRegisters>:
{
 8006f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f50:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f52:	7980      	ldrb	r0, [r0, #6]
 8006f54:	fa5f f880 	uxtb.w	r8, r0
 8006f58:	f1b8 0f01 	cmp.w	r8, #1
 8006f5c:	d13e      	bne.n	8006fdc <HAL_SUBGHZ_WriteRegisters+0x90>
 8006f5e:	460c      	mov	r4, r1
 8006f60:	4617      	mov	r7, r2
 8006f62:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006f64:	796b      	ldrb	r3, [r5, #5]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d03b      	beq.n	8006fe2 <HAL_SUBGHZ_WriteRegisters+0x96>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f6e:	2302      	movs	r3, #2
 8006f70:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f72:	4628      	mov	r0, r5
 8006f74:	f7ff ffc0 	bl	8006ef8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006f78:	4a1b      	ldr	r2, [pc, #108]	; (8006fe8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006f7a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006f7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006f86:	210d      	movs	r1, #13
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f7ff ff0d 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f8e:	0a21      	lsrs	r1, r4, #8
 8006f90:	4628      	mov	r0, r5
 8006f92:	f7ff ff09 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f96:	b2e1      	uxtb	r1, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f7ff ff05 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	e005      	b.n	8006fae <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006fa2:	5d39      	ldrb	r1, [r7, r4]
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f7ff feff 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006faa:	3401      	adds	r4, #1
 8006fac:	b2a4      	uxth	r4, r4
 8006fae:	42b4      	cmp	r4, r6
 8006fb0:	d3f7      	bcc.n	8006fa2 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006fb2:	4a0d      	ldr	r2, [pc, #52]	; (8006fe8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006fb4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f7ff ff6d 	bl	8006ea0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fc6:	68ab      	ldr	r3, [r5, #8]
 8006fc8:	b90b      	cbnz	r3, 8006fce <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006fca:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	716b      	strb	r3, [r5, #5]
}
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006fdc:	f04f 0802 	mov.w	r8, #2
 8006fe0:	e7f9      	b.n	8006fd6 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 8006fe2:	f04f 0802 	mov.w	r8, #2
 8006fe6:	e7f6      	b.n	8006fd6 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006fe8:	58000400 	.word	0x58000400

08006fec <HAL_SUBGHZ_ReadRegisters>:
{
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ff2:	7980      	ldrb	r0, [r0, #6]
 8006ff4:	fa5f f880 	uxtb.w	r8, r0
 8006ff8:	f1b8 0f01 	cmp.w	r8, #1
 8006ffc:	d141      	bne.n	8007082 <HAL_SUBGHZ_ReadRegisters+0x96>
 8006ffe:	460c      	mov	r4, r1
 8007000:	4615      	mov	r5, r2
 8007002:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007004:	7973      	ldrb	r3, [r6, #5]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d03e      	beq.n	8007088 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800700a:	2301      	movs	r3, #1
 800700c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800700e:	4630      	mov	r0, r6
 8007010:	f7ff ff72 	bl	8006ef8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007014:	4a1e      	ldr	r2, [pc, #120]	; (8007090 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8007016:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800701a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800701e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007022:	211d      	movs	r1, #29
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff febf 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800702a:	0a21      	lsrs	r1, r4, #8
 800702c:	4630      	mov	r0, r6
 800702e:	f7ff febb 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007032:	b2e1      	uxtb	r1, r4
 8007034:	4630      	mov	r0, r6
 8007036:	f7ff feb7 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800703a:	2100      	movs	r1, #0
 800703c:	4630      	mov	r0, r6
 800703e:	f7ff feb3 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007042:	2400      	movs	r4, #0
 8007044:	e006      	b.n	8007054 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007046:	4629      	mov	r1, r5
 8007048:	4630      	mov	r0, r6
 800704a:	f7ff fee9 	bl	8006e20 <SUBGHZSPI_Receive>
      pData++;
 800704e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007050:	3401      	adds	r4, #1
 8007052:	b2a4      	uxth	r4, r4
 8007054:	42bc      	cmp	r4, r7
 8007056:	d3f6      	bcc.n	8007046 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007058:	4a0d      	ldr	r2, [pc, #52]	; (8007090 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800705a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800705e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007066:	4630      	mov	r0, r6
 8007068:	f7ff ff1a 	bl	8006ea0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800706c:	68b3      	ldr	r3, [r6, #8]
 800706e:	b90b      	cbnz	r3, 8007074 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8007070:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007074:	2301      	movs	r3, #1
 8007076:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8007078:	2300      	movs	r3, #0
 800707a:	7173      	strb	r3, [r6, #5]
}
 800707c:	4640      	mov	r0, r8
 800707e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8007082:	f04f 0802 	mov.w	r8, #2
 8007086:	e7f9      	b.n	800707c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8007088:	f04f 0802 	mov.w	r8, #2
 800708c:	e7f6      	b.n	800707c <HAL_SUBGHZ_ReadRegisters+0x90>
 800708e:	bf00      	nop
 8007090:	58000400 	.word	0x58000400

08007094 <HAL_SUBGHZ_ExecSetCmd>:
{
 8007094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007098:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800709a:	7980      	ldrb	r0, [r0, #6]
 800709c:	fa5f f980 	uxtb.w	r9, r0
 80070a0:	f1b9 0f01 	cmp.w	r9, #1
 80070a4:	d143      	bne.n	800712e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80070a6:	4688      	mov	r8, r1
 80070a8:	4617      	mov	r7, r2
 80070aa:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80070ac:	796b      	ldrb	r3, [r5, #5]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d040      	beq.n	8007134 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80070b2:	2301      	movs	r3, #1
 80070b4:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7ff ff1e 	bl	8006ef8 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80070bc:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80070c0:	d005      	beq.n	80070ce <HAL_SUBGHZ_ExecSetCmd+0x3a>
 80070c2:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 80070c6:	d002      	beq.n	80070ce <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	712b      	strb	r3, [r5, #4]
 80070cc:	e001      	b.n	80070d2 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80070ce:	2301      	movs	r3, #1
 80070d0:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070d2:	4a1a      	ldr	r2, [pc, #104]	; (800713c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80070d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80070d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070e0:	4641      	mov	r1, r8
 80070e2:	4628      	mov	r0, r5
 80070e4:	f7ff fe60 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070e8:	2400      	movs	r4, #0
 80070ea:	e005      	b.n	80070f8 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070ec:	5d39      	ldrb	r1, [r7, r4]
 80070ee:	4628      	mov	r0, r5
 80070f0:	f7ff fe5a 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070f4:	3401      	adds	r4, #1
 80070f6:	b2a4      	uxth	r4, r4
 80070f8:	42b4      	cmp	r4, r6
 80070fa:	d3f7      	bcc.n	80070ec <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80070fc:	4a0f      	ldr	r2, [pc, #60]	; (800713c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80070fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800710a:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800710e:	d10a      	bne.n	8007126 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007110:	68ab      	ldr	r3, [r5, #8]
 8007112:	b90b      	cbnz	r3, 8007118 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 8007114:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007118:	2301      	movs	r3, #1
 800711a:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800711c:	2300      	movs	r3, #0
 800711e:	716b      	strb	r3, [r5, #5]
}
 8007120:	4648      	mov	r0, r9
 8007122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007126:	4628      	mov	r0, r5
 8007128:	f7ff feba 	bl	8006ea0 <SUBGHZ_WaitOnBusy>
 800712c:	e7f0      	b.n	8007110 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800712e:	f04f 0902 	mov.w	r9, #2
 8007132:	e7f5      	b.n	8007120 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 8007134:	f04f 0902 	mov.w	r9, #2
 8007138:	e7f2      	b.n	8007120 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 800713a:	bf00      	nop
 800713c:	58000400 	.word	0x58000400

08007140 <HAL_SUBGHZ_ExecGetCmd>:
{
 8007140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007144:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007146:	7980      	ldrb	r0, [r0, #6]
 8007148:	fa5f f880 	uxtb.w	r8, r0
 800714c:	f1b8 0f01 	cmp.w	r8, #1
 8007150:	d139      	bne.n	80071c6 <HAL_SUBGHZ_ExecGetCmd+0x86>
 8007152:	460c      	mov	r4, r1
 8007154:	4615      	mov	r5, r2
 8007156:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007158:	7973      	ldrb	r3, [r6, #5]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d036      	beq.n	80071cc <HAL_SUBGHZ_ExecGetCmd+0x8c>
 800715e:	2301      	movs	r3, #1
 8007160:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007162:	4630      	mov	r0, r6
 8007164:	f7ff fec8 	bl	8006ef8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007168:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800716a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800716e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007176:	4621      	mov	r1, r4
 8007178:	4630      	mov	r0, r6
 800717a:	f7ff fe15 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800717e:	2100      	movs	r1, #0
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff fe11 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007186:	2400      	movs	r4, #0
 8007188:	e006      	b.n	8007198 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800718a:	4629      	mov	r1, r5
 800718c:	4630      	mov	r0, r6
 800718e:	f7ff fe47 	bl	8006e20 <SUBGHZSPI_Receive>
      pData++;
 8007192:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007194:	3401      	adds	r4, #1
 8007196:	b2a4      	uxth	r4, r4
 8007198:	42bc      	cmp	r4, r7
 800719a:	d3f6      	bcc.n	800718a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800719c:	4a0d      	ldr	r2, [pc, #52]	; (80071d4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800719e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80071a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff fe78 	bl	8006ea0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071b0:	68b3      	ldr	r3, [r6, #8]
 80071b2:	b90b      	cbnz	r3, 80071b8 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80071b4:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071b8:	2301      	movs	r3, #1
 80071ba:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80071bc:	2300      	movs	r3, #0
 80071be:	7173      	strb	r3, [r6, #5]
}
 80071c0:	4640      	mov	r0, r8
 80071c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80071c6:	f04f 0802 	mov.w	r8, #2
 80071ca:	e7f9      	b.n	80071c0 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80071cc:	f04f 0802 	mov.w	r8, #2
 80071d0:	e7f6      	b.n	80071c0 <HAL_SUBGHZ_ExecGetCmd+0x80>
 80071d2:	bf00      	nop
 80071d4:	58000400 	.word	0x58000400

080071d8 <HAL_SUBGHZ_IRQHandler>:
{
 80071d8:	b530      	push	{r4, r5, lr}
 80071da:	b083      	sub	sp, #12
 80071dc:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80071de:	2300      	movs	r3, #0
 80071e0:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80071e4:	2302      	movs	r3, #2
 80071e6:	aa01      	add	r2, sp, #4
 80071e8:	2112      	movs	r1, #18
 80071ea:	f7ff ffa9 	bl	8007140 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80071ee:	f89d 4004 	ldrb.w	r4, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 80071f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80071f6:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80071fa:	f013 0f01 	tst.w	r3, #1
 80071fe:	d126      	bne.n	800724e <HAL_SUBGHZ_IRQHandler+0x76>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007200:	f014 0f02 	tst.w	r4, #2
 8007204:	d127      	bne.n	8007256 <HAL_SUBGHZ_IRQHandler+0x7e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007206:	f014 0f04 	tst.w	r4, #4
 800720a:	d128      	bne.n	800725e <HAL_SUBGHZ_IRQHandler+0x86>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800720c:	f014 0f08 	tst.w	r4, #8
 8007210:	d129      	bne.n	8007266 <HAL_SUBGHZ_IRQHandler+0x8e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007212:	f014 0f10 	tst.w	r4, #16
 8007216:	d12a      	bne.n	800726e <HAL_SUBGHZ_IRQHandler+0x96>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007218:	f014 0f20 	tst.w	r4, #32
 800721c:	d12b      	bne.n	8007276 <HAL_SUBGHZ_IRQHandler+0x9e>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800721e:	f014 0f40 	tst.w	r4, #64	; 0x40
 8007222:	d12c      	bne.n	800727e <HAL_SUBGHZ_IRQHandler+0xa6>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007224:	f014 0f80 	tst.w	r4, #128	; 0x80
 8007228:	d006      	beq.n	8007238 <HAL_SUBGHZ_IRQHandler+0x60>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800722a:	f414 7f80 	tst.w	r4, #256	; 0x100
 800722e:	d02a      	beq.n	8007286 <HAL_SUBGHZ_IRQHandler+0xae>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007230:	2101      	movs	r1, #1
 8007232:	4628      	mov	r0, r5
 8007234:	f00d ff40 	bl	80150b8 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007238:	f414 7f00 	tst.w	r4, #512	; 0x200
 800723c:	d128      	bne.n	8007290 <HAL_SUBGHZ_IRQHandler+0xb8>
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800723e:	2302      	movs	r3, #2
 8007240:	aa01      	add	r2, sp, #4
 8007242:	4619      	mov	r1, r3
 8007244:	4628      	mov	r0, r5
 8007246:	f7ff ff25 	bl	8007094 <HAL_SUBGHZ_ExecSetCmd>
}
 800724a:	b003      	add	sp, #12
 800724c:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800724e:	4628      	mov	r0, r5
 8007250:	f00d ff1a 	bl	8015088 <HAL_SUBGHZ_TxCpltCallback>
 8007254:	e7d4      	b.n	8007200 <HAL_SUBGHZ_IRQHandler+0x28>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007256:	4628      	mov	r0, r5
 8007258:	f00d ff1e 	bl	8015098 <HAL_SUBGHZ_RxCpltCallback>
 800725c:	e7d3      	b.n	8007206 <HAL_SUBGHZ_IRQHandler+0x2e>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800725e:	4628      	mov	r0, r5
 8007260:	f00d ff4e 	bl	8015100 <HAL_SUBGHZ_PreambleDetectedCallback>
 8007264:	e7d2      	b.n	800720c <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007266:	4628      	mov	r0, r5
 8007268:	f00d ff52 	bl	8015110 <HAL_SUBGHZ_SyncWordValidCallback>
 800726c:	e7d1      	b.n	8007212 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800726e:	4628      	mov	r0, r5
 8007270:	f00d ff56 	bl	8015120 <HAL_SUBGHZ_HeaderValidCallback>
 8007274:	e7d0      	b.n	8007218 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007276:	4628      	mov	r0, r5
 8007278:	f00d ff3a 	bl	80150f0 <HAL_SUBGHZ_HeaderErrorCallback>
 800727c:	e7cf      	b.n	800721e <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800727e:	4628      	mov	r0, r5
 8007280:	f00d ff12 	bl	80150a8 <HAL_SUBGHZ_CRCErrorCallback>
 8007284:	e7ce      	b.n	8007224 <HAL_SUBGHZ_IRQHandler+0x4c>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007286:	2100      	movs	r1, #0
 8007288:	4628      	mov	r0, r5
 800728a:	f00d ff15 	bl	80150b8 <HAL_SUBGHZ_CADStatusCallback>
 800728e:	e7d3      	b.n	8007238 <HAL_SUBGHZ_IRQHandler+0x60>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007290:	4628      	mov	r0, r5
 8007292:	f00d ff23 	bl	80150dc <HAL_SUBGHZ_RxTxTimeoutCallback>
 8007296:	e7d2      	b.n	800723e <HAL_SUBGHZ_IRQHandler+0x66>

08007298 <HAL_SUBGHZ_WriteBuffer>:
{
 8007298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800729c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800729e:	7980      	ldrb	r0, [r0, #6]
 80072a0:	fa5f f880 	uxtb.w	r8, r0
 80072a4:	f1b8 0f01 	cmp.w	r8, #1
 80072a8:	d138      	bne.n	800731c <HAL_SUBGHZ_WriteBuffer+0x84>
 80072aa:	460c      	mov	r4, r1
 80072ac:	4617      	mov	r7, r2
 80072ae:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80072b0:	796b      	ldrb	r3, [r5, #5]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d035      	beq.n	8007322 <HAL_SUBGHZ_WriteBuffer+0x8a>
 80072b6:	2301      	movs	r3, #1
 80072b8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072ba:	4628      	mov	r0, r5
 80072bc:	f7ff fe1c 	bl	8006ef8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80072c0:	4a19      	ldr	r2, [pc, #100]	; (8007328 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80072c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80072c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80072ce:	210e      	movs	r1, #14
 80072d0:	4628      	mov	r0, r5
 80072d2:	f7ff fd69 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072d6:	4621      	mov	r1, r4
 80072d8:	4628      	mov	r0, r5
 80072da:	f7ff fd65 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072de:	2400      	movs	r4, #0
 80072e0:	e005      	b.n	80072ee <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80072e2:	5d39      	ldrb	r1, [r7, r4]
 80072e4:	4628      	mov	r0, r5
 80072e6:	f7ff fd5f 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80072ea:	3401      	adds	r4, #1
 80072ec:	b2a4      	uxth	r4, r4
 80072ee:	42b4      	cmp	r4, r6
 80072f0:	d3f7      	bcc.n	80072e2 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80072f2:	4a0d      	ldr	r2, [pc, #52]	; (8007328 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80072f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80072f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007300:	4628      	mov	r0, r5
 8007302:	f7ff fdcd 	bl	8006ea0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007306:	68ab      	ldr	r3, [r5, #8]
 8007308:	b90b      	cbnz	r3, 800730e <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800730a:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800730e:	2301      	movs	r3, #1
 8007310:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8007312:	2300      	movs	r3, #0
 8007314:	716b      	strb	r3, [r5, #5]
}
 8007316:	4640      	mov	r0, r8
 8007318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800731c:	f04f 0802 	mov.w	r8, #2
 8007320:	e7f9      	b.n	8007316 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8007322:	f04f 0802 	mov.w	r8, #2
 8007326:	e7f6      	b.n	8007316 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8007328:	58000400 	.word	0x58000400

0800732c <HAL_SUBGHZ_ReadBuffer>:
{
 800732c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007330:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007332:	7980      	ldrb	r0, [r0, #6]
 8007334:	fa5f f880 	uxtb.w	r8, r0
 8007338:	f1b8 0f01 	cmp.w	r8, #1
 800733c:	d13d      	bne.n	80073ba <HAL_SUBGHZ_ReadBuffer+0x8e>
 800733e:	460c      	mov	r4, r1
 8007340:	4615      	mov	r5, r2
 8007342:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8007344:	7973      	ldrb	r3, [r6, #5]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d03a      	beq.n	80073c0 <HAL_SUBGHZ_ReadBuffer+0x94>
 800734a:	2301      	movs	r3, #1
 800734c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800734e:	4630      	mov	r0, r6
 8007350:	f7ff fdd2 	bl	8006ef8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007354:	4a1c      	ldr	r2, [pc, #112]	; (80073c8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007356:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800735a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800735e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007362:	211e      	movs	r1, #30
 8007364:	4630      	mov	r0, r6
 8007366:	f7ff fd1f 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800736a:	4621      	mov	r1, r4
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff fd1b 	bl	8006da8 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007372:	2100      	movs	r1, #0
 8007374:	4630      	mov	r0, r6
 8007376:	f7ff fd17 	bl	8006da8 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800737a:	2400      	movs	r4, #0
 800737c:	e006      	b.n	800738c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800737e:	4629      	mov	r1, r5
 8007380:	4630      	mov	r0, r6
 8007382:	f7ff fd4d 	bl	8006e20 <SUBGHZSPI_Receive>
      pData++;
 8007386:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8007388:	3401      	adds	r4, #1
 800738a:	b2a4      	uxth	r4, r4
 800738c:	42bc      	cmp	r4, r7
 800738e:	d3f6      	bcc.n	800737e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007390:	4a0d      	ldr	r2, [pc, #52]	; (80073c8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8007392:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8007396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800739a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800739e:	4630      	mov	r0, r6
 80073a0:	f7ff fd7e 	bl	8006ea0 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80073a4:	68b3      	ldr	r3, [r6, #8]
 80073a6:	b90b      	cbnz	r3, 80073ac <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80073a8:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073ac:	2301      	movs	r3, #1
 80073ae:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80073b0:	2300      	movs	r3, #0
 80073b2:	7173      	strb	r3, [r6, #5]
}
 80073b4:	4640      	mov	r0, r8
 80073b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80073ba:	f04f 0802 	mov.w	r8, #2
 80073be:	e7f9      	b.n	80073b4 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80073c0:	f04f 0802 	mov.w	r8, #2
 80073c4:	e7f6      	b.n	80073b4 <HAL_SUBGHZ_ReadBuffer+0x88>
 80073c6:	bf00      	nop
 80073c8:	58000400 	.word	0x58000400

080073cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073cc:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ce:	6a03      	ldr	r3, [r0, #32]
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073da:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80073e0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073e4:	680c      	ldr	r4, [r1, #0]
 80073e6:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073e8:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ec:	688c      	ldr	r4, [r1, #8]
 80073ee:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073f0:	4c15      	ldr	r4, [pc, #84]	; (8007448 <TIM_OC1_SetConfig+0x7c>)
 80073f2:	42a0      	cmp	r0, r4
 80073f4:	d007      	beq.n	8007406 <TIM_OC1_SetConfig+0x3a>
 80073f6:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80073fa:	42a0      	cmp	r0, r4
 80073fc:	d003      	beq.n	8007406 <TIM_OC1_SetConfig+0x3a>
 80073fe:	f5a4 6480 	sub.w	r4, r4, #1024	; 0x400
 8007402:	42a0      	cmp	r0, r4
 8007404:	d105      	bne.n	8007412 <TIM_OC1_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007406:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800740a:	68cc      	ldr	r4, [r1, #12]
 800740c:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800740e:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007412:	4c0d      	ldr	r4, [pc, #52]	; (8007448 <TIM_OC1_SetConfig+0x7c>)
 8007414:	42a0      	cmp	r0, r4
 8007416:	d007      	beq.n	8007428 <TIM_OC1_SetConfig+0x5c>
 8007418:	f504 54c0 	add.w	r4, r4, #6144	; 0x1800
 800741c:	42a0      	cmp	r0, r4
 800741e:	d003      	beq.n	8007428 <TIM_OC1_SetConfig+0x5c>
 8007420:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007424:	42a0      	cmp	r0, r4
 8007426:	d107      	bne.n	8007438 <TIM_OC1_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007428:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800742c:	694c      	ldr	r4, [r1, #20]
 800742e:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007432:	698d      	ldr	r5, [r1, #24]
 8007434:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007438:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800743a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800743c:	684a      	ldr	r2, [r1, #4]
 800743e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007440:	6203      	str	r3, [r0, #32]
}
 8007442:	bc30      	pop	{r4, r5}
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40012c00 	.word	0x40012c00

0800744c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800744c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800744e:	6a03      	ldr	r3, [r0, #32]
 8007450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007454:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007456:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007458:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800745c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007460:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007464:	680d      	ldr	r5, [r1, #0]
 8007466:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800746c:	688d      	ldr	r5, [r1, #8]
 800746e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007472:	4d12      	ldr	r5, [pc, #72]	; (80074bc <TIM_OC3_SetConfig+0x70>)
 8007474:	42a8      	cmp	r0, r5
 8007476:	d019      	beq.n	80074ac <TIM_OC3_SetConfig+0x60>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	4d10      	ldr	r5, [pc, #64]	; (80074bc <TIM_OC3_SetConfig+0x70>)
 800747a:	42a8      	cmp	r0, r5
 800747c:	d007      	beq.n	800748e <TIM_OC3_SetConfig+0x42>
 800747e:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 8007482:	42a8      	cmp	r0, r5
 8007484:	d003      	beq.n	800748e <TIM_OC3_SetConfig+0x42>
 8007486:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800748a:	42a8      	cmp	r0, r5
 800748c:	d107      	bne.n	800749e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800748e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007492:	694d      	ldr	r5, [r1, #20]
 8007494:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007498:	698d      	ldr	r5, [r1, #24]
 800749a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074a2:	684a      	ldr	r2, [r1, #4]
 80074a4:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a6:	6203      	str	r3, [r0, #32]
}
 80074a8:	bc30      	pop	{r4, r5}
 80074aa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 80074ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074b0:	68cd      	ldr	r5, [r1, #12]
 80074b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80074b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ba:	e7dd      	b.n	8007478 <TIM_OC3_SetConfig+0x2c>
 80074bc:	40012c00 	.word	0x40012c00

080074c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074c2:	6a03      	ldr	r3, [r0, #32]
 80074c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074cc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ce:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074d4:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074d8:	680d      	ldr	r5, [r1, #0]
 80074da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074e2:	688d      	ldr	r5, [r1, #8]
 80074e4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e8:	4d0b      	ldr	r5, [pc, #44]	; (8007518 <TIM_OC4_SetConfig+0x58>)
 80074ea:	42a8      	cmp	r0, r5
 80074ec:	d007      	beq.n	80074fe <TIM_OC4_SetConfig+0x3e>
 80074ee:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80074f2:	42a8      	cmp	r0, r5
 80074f4:	d003      	beq.n	80074fe <TIM_OC4_SetConfig+0x3e>
 80074f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80074fa:	42a8      	cmp	r0, r5
 80074fc:	d104      	bne.n	8007508 <TIM_OC4_SetConfig+0x48>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074fe:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007502:	694d      	ldr	r5, [r1, #20]
 8007504:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007508:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750a:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800750c:	684b      	ldr	r3, [r1, #4]
 800750e:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007510:	6202      	str	r2, [r0, #32]
}
 8007512:	bc30      	pop	{r4, r5}
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40012c00 	.word	0x40012c00

0800751c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800751e:	6a03      	ldr	r3, [r0, #32]
 8007520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007524:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007528:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800752a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800752c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007530:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007534:	680d      	ldr	r5, [r1, #0]
 8007536:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007538:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800753c:	688d      	ldr	r5, [r1, #8]
 800753e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007542:	4d0b      	ldr	r5, [pc, #44]	; (8007570 <TIM_OC5_SetConfig+0x54>)
 8007544:	42a8      	cmp	r0, r5
 8007546:	d007      	beq.n	8007558 <TIM_OC5_SetConfig+0x3c>
 8007548:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 800754c:	42a8      	cmp	r0, r5
 800754e:	d003      	beq.n	8007558 <TIM_OC5_SetConfig+0x3c>
 8007550:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007554:	42a8      	cmp	r0, r5
 8007556:	d104      	bne.n	8007562 <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007558:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800755c:	694d      	ldr	r5, [r1, #20]
 800755e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007562:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007564:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007566:	684a      	ldr	r2, [r1, #4]
 8007568:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756a:	6203      	str	r3, [r0, #32]
}
 800756c:	bc30      	pop	{r4, r5}
 800756e:	4770      	bx	lr
 8007570:	40012c00 	.word	0x40012c00

08007574 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007576:	6a03      	ldr	r3, [r0, #32]
 8007578:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800757c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007580:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007582:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007584:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800758c:	680d      	ldr	r5, [r1, #0]
 800758e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007592:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007596:	688d      	ldr	r5, [r1, #8]
 8007598:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <TIM_OC6_SetConfig+0x58>)
 800759e:	42a8      	cmp	r0, r5
 80075a0:	d007      	beq.n	80075b2 <TIM_OC6_SetConfig+0x3e>
 80075a2:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80075a6:	42a8      	cmp	r0, r5
 80075a8:	d003      	beq.n	80075b2 <TIM_OC6_SetConfig+0x3e>
 80075aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80075ae:	42a8      	cmp	r0, r5
 80075b0:	d104      	bne.n	80075bc <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80075b2:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80075b6:	694d      	ldr	r5, [r1, #20]
 80075b8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075be:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80075c0:	684b      	ldr	r3, [r1, #4]
 80075c2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c4:	6202      	str	r2, [r0, #32]
}
 80075c6:	bc30      	pop	{r4, r5}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	40012c00 	.word	0x40012c00

080075d0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80075d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075d2:	4a1a      	ldr	r2, [pc, #104]	; (800763c <TIM_Base_SetConfig+0x6c>)
 80075d4:	4290      	cmp	r0, r2
 80075d6:	d002      	beq.n	80075de <TIM_Base_SetConfig+0xe>
 80075d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80075dc:	d103      	bne.n	80075e6 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80075e2:	684a      	ldr	r2, [r1, #4]
 80075e4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e6:	4a15      	ldr	r2, [pc, #84]	; (800763c <TIM_Base_SetConfig+0x6c>)
 80075e8:	4290      	cmp	r0, r2
 80075ea:	d00a      	beq.n	8007602 <TIM_Base_SetConfig+0x32>
 80075ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80075f0:	d007      	beq.n	8007602 <TIM_Base_SetConfig+0x32>
 80075f2:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80075f6:	4290      	cmp	r0, r2
 80075f8:	d003      	beq.n	8007602 <TIM_Base_SetConfig+0x32>
 80075fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075fe:	4290      	cmp	r0, r2
 8007600:	d103      	bne.n	800760a <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8007602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007606:	68ca      	ldr	r2, [r1, #12]
 8007608:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800760a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760e:	694a      	ldr	r2, [r1, #20]
 8007610:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007612:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007614:	688b      	ldr	r3, [r1, #8]
 8007616:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007618:	680b      	ldr	r3, [r1, #0]
 800761a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800761c:	4b07      	ldr	r3, [pc, #28]	; (800763c <TIM_Base_SetConfig+0x6c>)
 800761e:	4298      	cmp	r0, r3
 8007620:	d007      	beq.n	8007632 <TIM_Base_SetConfig+0x62>
 8007622:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007626:	4298      	cmp	r0, r3
 8007628:	d003      	beq.n	8007632 <TIM_Base_SetConfig+0x62>
 800762a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800762e:	4298      	cmp	r0, r3
 8007630:	d101      	bne.n	8007636 <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 8007632:	690b      	ldr	r3, [r1, #16]
 8007634:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007636:	2301      	movs	r3, #1
 8007638:	6143      	str	r3, [r0, #20]
}
 800763a:	4770      	bx	lr
 800763c:	40012c00 	.word	0x40012c00

08007640 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007640:	b360      	cbz	r0, 800769c <HAL_TIM_PWM_Init+0x5c>
{
 8007642:	b510      	push	{r4, lr}
 8007644:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007646:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800764a:	b313      	cbz	r3, 8007692 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800764c:	2302      	movs	r3, #2
 800764e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007652:	4621      	mov	r1, r4
 8007654:	f851 0b04 	ldr.w	r0, [r1], #4
 8007658:	f7ff ffba 	bl	80075d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765c:	2301      	movs	r3, #1
 800765e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007662:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007666:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800766a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800766e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007672:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800767a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800767e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007682:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007686:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800768a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800768e:	2000      	movs	r0, #0
}
 8007690:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007692:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007696:	f7fa fd67 	bl	8002168 <HAL_TIM_PWM_MspInit>
 800769a:	e7d7      	b.n	800764c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800769c:	2001      	movs	r0, #1
}
 800769e:	4770      	bx	lr

080076a0 <TIM_OC2_SetConfig>:
{
 80076a0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a2:	6a03      	ldr	r3, [r0, #32]
 80076a4:	f023 0310 	bic.w	r3, r3, #16
 80076a8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80076aa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80076ac:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80076ae:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076b0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80076b4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076b8:	680d      	ldr	r5, [r1, #0]
 80076ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80076be:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076c2:	688d      	ldr	r5, [r1, #8]
 80076c4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076c8:	4d12      	ldr	r5, [pc, #72]	; (8007714 <TIM_OC2_SetConfig+0x74>)
 80076ca:	42a8      	cmp	r0, r5
 80076cc:	d019      	beq.n	8007702 <TIM_OC2_SetConfig+0x62>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ce:	4d11      	ldr	r5, [pc, #68]	; (8007714 <TIM_OC2_SetConfig+0x74>)
 80076d0:	42a8      	cmp	r0, r5
 80076d2:	d007      	beq.n	80076e4 <TIM_OC2_SetConfig+0x44>
 80076d4:	f505 55c0 	add.w	r5, r5, #6144	; 0x1800
 80076d8:	42a8      	cmp	r0, r5
 80076da:	d003      	beq.n	80076e4 <TIM_OC2_SetConfig+0x44>
 80076dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80076e0:	42a8      	cmp	r0, r5
 80076e2:	d107      	bne.n	80076f4 <TIM_OC2_SetConfig+0x54>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076e4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e8:	694d      	ldr	r5, [r1, #20]
 80076ea:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076ee:	698d      	ldr	r5, [r1, #24]
 80076f0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80076f4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80076f6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80076f8:	684a      	ldr	r2, [r1, #4]
 80076fa:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80076fc:	6203      	str	r3, [r0, #32]
}
 80076fe:	bc30      	pop	{r4, r5}
 8007700:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8007702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007706:	68cd      	ldr	r5, [r1, #12]
 8007708:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800770c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007710:	e7dd      	b.n	80076ce <TIM_OC2_SetConfig+0x2e>
 8007712:	bf00      	nop
 8007714:	40012c00 	.word	0x40012c00

08007718 <HAL_TIM_PWM_ConfigChannel>:
{
 8007718:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800771a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800771e:	2b01      	cmp	r3, #1
 8007720:	f000 8095 	beq.w	800784e <HAL_TIM_PWM_ConfigChannel+0x136>
 8007724:	4604      	mov	r4, r0
 8007726:	460d      	mov	r5, r1
 8007728:	2301      	movs	r3, #1
 800772a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800772e:	2a14      	cmp	r2, #20
 8007730:	f200 8088 	bhi.w	8007844 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8007734:	e8df f002 	tbb	[pc, r2]
 8007738:	8686860b 	.word	0x8686860b
 800773c:	8686861f 	.word	0x8686861f
 8007740:	86868634 	.word	0x86868634
 8007744:	86868648 	.word	0x86868648
 8007748:	8686865d 	.word	0x8686865d
 800774c:	71          	.byte	0x71
 800774d:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800774e:	6800      	ldr	r0, [r0, #0]
 8007750:	f7ff fe3c 	bl	80073cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007754:	6822      	ldr	r2, [r4, #0]
 8007756:	6993      	ldr	r3, [r2, #24]
 8007758:	f043 0308 	orr.w	r3, r3, #8
 800775c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800775e:	6822      	ldr	r2, [r4, #0]
 8007760:	6993      	ldr	r3, [r2, #24]
 8007762:	f023 0304 	bic.w	r3, r3, #4
 8007766:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007768:	6822      	ldr	r2, [r4, #0]
 800776a:	6993      	ldr	r3, [r2, #24]
 800776c:	6929      	ldr	r1, [r5, #16]
 800776e:	430b      	orrs	r3, r1
 8007770:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2000      	movs	r0, #0
      break;
 8007774:	e067      	b.n	8007846 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007776:	6800      	ldr	r0, [r0, #0]
 8007778:	f7ff ff92 	bl	80076a0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800777c:	6822      	ldr	r2, [r4, #0]
 800777e:	6993      	ldr	r3, [r2, #24]
 8007780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007784:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007786:	6822      	ldr	r2, [r4, #0]
 8007788:	6993      	ldr	r3, [r2, #24]
 800778a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800778e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	6993      	ldr	r3, [r2, #24]
 8007794:	6929      	ldr	r1, [r5, #16]
 8007796:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800779a:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800779c:	2000      	movs	r0, #0
      break;
 800779e:	e052      	b.n	8007846 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077a0:	6800      	ldr	r0, [r0, #0]
 80077a2:	f7ff fe53 	bl	800744c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077a6:	6822      	ldr	r2, [r4, #0]
 80077a8:	69d3      	ldr	r3, [r2, #28]
 80077aa:	f043 0308 	orr.w	r3, r3, #8
 80077ae:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077b0:	6822      	ldr	r2, [r4, #0]
 80077b2:	69d3      	ldr	r3, [r2, #28]
 80077b4:	f023 0304 	bic.w	r3, r3, #4
 80077b8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	69d3      	ldr	r3, [r2, #28]
 80077be:	6929      	ldr	r1, [r5, #16]
 80077c0:	430b      	orrs	r3, r1
 80077c2:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80077c4:	2000      	movs	r0, #0
      break;
 80077c6:	e03e      	b.n	8007846 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077c8:	6800      	ldr	r0, [r0, #0]
 80077ca:	f7ff fe79 	bl	80074c0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	69d3      	ldr	r3, [r2, #28]
 80077d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077d6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077d8:	6822      	ldr	r2, [r4, #0]
 80077da:	69d3      	ldr	r3, [r2, #28]
 80077dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077e0:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077e2:	6822      	ldr	r2, [r4, #0]
 80077e4:	69d3      	ldr	r3, [r2, #28]
 80077e6:	6929      	ldr	r1, [r5, #16]
 80077e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80077ec:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80077ee:	2000      	movs	r0, #0
      break;
 80077f0:	e029      	b.n	8007846 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	f7ff fe92 	bl	800751c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077f8:	6822      	ldr	r2, [r4, #0]
 80077fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80077fc:	f043 0308 	orr.w	r3, r3, #8
 8007800:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007802:	6822      	ldr	r2, [r4, #0]
 8007804:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007806:	f023 0304 	bic.w	r3, r3, #4
 800780a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800780c:	6822      	ldr	r2, [r4, #0]
 800780e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007810:	6929      	ldr	r1, [r5, #16]
 8007812:	430b      	orrs	r3, r1
 8007814:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007816:	2000      	movs	r0, #0
      break;
 8007818:	e015      	b.n	8007846 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800781a:	6800      	ldr	r0, [r0, #0]
 800781c:	f7ff feaa 	bl	8007574 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007820:	6822      	ldr	r2, [r4, #0]
 8007822:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007828:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800782a:	6822      	ldr	r2, [r4, #0]
 800782c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800782e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007832:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007834:	6822      	ldr	r2, [r4, #0]
 8007836:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007838:	6929      	ldr	r1, [r5, #16]
 800783a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800783e:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8007840:	2000      	movs	r0, #0
      break;
 8007842:	e000      	b.n	8007846 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8007844:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007846:	2300      	movs	r3, #0
 8007848:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800784c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800784e:	2002      	movs	r0, #2
 8007850:	e7fc      	b.n	800784c <HAL_TIM_PWM_ConfigChannel+0x134>

08007852 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007852:	f001 011f 	and.w	r1, r1, #31
 8007856:	2301      	movs	r3, #1
 8007858:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800785c:	6a03      	ldr	r3, [r0, #32]
 800785e:	ea23 030c 	bic.w	r3, r3, ip
 8007862:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007864:	6a03      	ldr	r3, [r0, #32]
 8007866:	fa02 f101 	lsl.w	r1, r2, r1
 800786a:	430b      	orrs	r3, r1
 800786c:	6203      	str	r3, [r0, #32]
}
 800786e:	4770      	bx	lr

08007870 <HAL_TIM_PWM_Start>:
{
 8007870:	b510      	push	{r4, lr}
 8007872:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007874:	4608      	mov	r0, r1
 8007876:	bb71      	cbnz	r1, 80078d6 <HAL_TIM_PWM_Start+0x66>
 8007878:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800787c:	b2db      	uxtb	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	bf18      	it	ne
 8007882:	2301      	movne	r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d17b      	bne.n	8007980 <HAL_TIM_PWM_Start+0x110>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007888:	2800      	cmp	r0, #0
 800788a:	d14f      	bne.n	800792c <HAL_TIM_PWM_Start+0xbc>
 800788c:	2302      	movs	r3, #2
 800788e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007892:	2201      	movs	r2, #1
 8007894:	4601      	mov	r1, r0
 8007896:	6820      	ldr	r0, [r4, #0]
 8007898:	f7ff ffdb 	bl	8007852 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	4a3b      	ldr	r2, [pc, #236]	; (800798c <HAL_TIM_PWM_Start+0x11c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d007      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x44>
 80078a4:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d003      	beq.n	80078b4 <HAL_TIM_PWM_Start+0x44>
 80078ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d103      	bne.n	80078bc <HAL_TIM_PWM_Start+0x4c>
    __HAL_TIM_MOE_ENABLE(htim);
 80078b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078ba:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	4a33      	ldr	r2, [pc, #204]	; (800798c <HAL_TIM_PWM_Start+0x11c>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d04f      	beq.n	8007964 <HAL_TIM_PWM_Start+0xf4>
 80078c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c8:	d04c      	beq.n	8007964 <HAL_TIM_PWM_Start+0xf4>
    __HAL_TIM_ENABLE(htim);
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	f042 0201 	orr.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80078d2:	2000      	movs	r0, #0
 80078d4:	e055      	b.n	8007982 <HAL_TIM_PWM_Start+0x112>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078d6:	2904      	cmp	r1, #4
 80078d8:	d00c      	beq.n	80078f4 <HAL_TIM_PWM_Start+0x84>
 80078da:	2908      	cmp	r1, #8
 80078dc:	d011      	beq.n	8007902 <HAL_TIM_PWM_Start+0x92>
 80078de:	290c      	cmp	r1, #12
 80078e0:	d016      	beq.n	8007910 <HAL_TIM_PWM_Start+0xa0>
 80078e2:	2910      	cmp	r1, #16
 80078e4:	d01b      	beq.n	800791e <HAL_TIM_PWM_Start+0xae>
 80078e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	3b01      	subs	r3, #1
 80078ee:	bf18      	it	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	e7c7      	b.n	8007884 <HAL_TIM_PWM_Start+0x14>
 80078f4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	bf18      	it	ne
 80078fe:	2301      	movne	r3, #1
 8007900:	e7c0      	b.n	8007884 <HAL_TIM_PWM_Start+0x14>
 8007902:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8007906:	b2db      	uxtb	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	bf18      	it	ne
 800790c:	2301      	movne	r3, #1
 800790e:	e7b9      	b.n	8007884 <HAL_TIM_PWM_Start+0x14>
 8007910:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007914:	b2db      	uxtb	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	bf18      	it	ne
 800791a:	2301      	movne	r3, #1
 800791c:	e7b2      	b.n	8007884 <HAL_TIM_PWM_Start+0x14>
 800791e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8007922:	b2db      	uxtb	r3, r3
 8007924:	3b01      	subs	r3, #1
 8007926:	bf18      	it	ne
 8007928:	2301      	movne	r3, #1
 800792a:	e7ab      	b.n	8007884 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800792c:	2804      	cmp	r0, #4
 800792e:	d009      	beq.n	8007944 <HAL_TIM_PWM_Start+0xd4>
 8007930:	2808      	cmp	r0, #8
 8007932:	d00b      	beq.n	800794c <HAL_TIM_PWM_Start+0xdc>
 8007934:	280c      	cmp	r0, #12
 8007936:	d00d      	beq.n	8007954 <HAL_TIM_PWM_Start+0xe4>
 8007938:	2810      	cmp	r0, #16
 800793a:	d00f      	beq.n	800795c <HAL_TIM_PWM_Start+0xec>
 800793c:	2302      	movs	r3, #2
 800793e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007942:	e7a6      	b.n	8007892 <HAL_TIM_PWM_Start+0x22>
 8007944:	2302      	movs	r3, #2
 8007946:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800794a:	e7a2      	b.n	8007892 <HAL_TIM_PWM_Start+0x22>
 800794c:	2302      	movs	r3, #2
 800794e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007952:	e79e      	b.n	8007892 <HAL_TIM_PWM_Start+0x22>
 8007954:	2302      	movs	r3, #2
 8007956:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800795a:	e79a      	b.n	8007892 <HAL_TIM_PWM_Start+0x22>
 800795c:	2302      	movs	r3, #2
 800795e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007962:	e796      	b.n	8007892 <HAL_TIM_PWM_Start+0x22>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007964:	6899      	ldr	r1, [r3, #8]
 8007966:	4a0a      	ldr	r2, [pc, #40]	; (8007990 <HAL_TIM_PWM_Start+0x120>)
 8007968:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796a:	2a06      	cmp	r2, #6
 800796c:	d00a      	beq.n	8007984 <HAL_TIM_PWM_Start+0x114>
 800796e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007972:	d009      	beq.n	8007988 <HAL_TIM_PWM_Start+0x118>
      __HAL_TIM_ENABLE(htim);
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	f042 0201 	orr.w	r2, r2, #1
 800797a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800797c:	2000      	movs	r0, #0
 800797e:	e000      	b.n	8007982 <HAL_TIM_PWM_Start+0x112>
    return HAL_ERROR;
 8007980:	2001      	movs	r0, #1
}
 8007982:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8007984:	2000      	movs	r0, #0
 8007986:	e7fc      	b.n	8007982 <HAL_TIM_PWM_Start+0x112>
 8007988:	2000      	movs	r0, #0
 800798a:	e7fa      	b.n	8007982 <HAL_TIM_PWM_Start+0x112>
 800798c:	40012c00 	.word	0x40012c00
 8007990:	00010007 	.word	0x00010007

08007994 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007994:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007998:	2b01      	cmp	r3, #1
 800799a:	d02b      	beq.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 800799c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800799e:	2301      	movs	r3, #1
 80079a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	2302      	movs	r3, #2
 80079a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079aa:	6802      	ldr	r2, [r0, #0]
 80079ac:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079ae:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079b0:	4d11      	ldr	r5, [pc, #68]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80079b2:	42aa      	cmp	r2, r5
 80079b4:	d019      	beq.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079ba:	680d      	ldr	r5, [r1, #0]
 80079bc:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079be:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c0:	6803      	ldr	r3, [r0, #0]
 80079c2:	4a0d      	ldr	r2, [pc, #52]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d002      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80079c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079cc:	d104      	bne.n	80079d8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ce:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079d2:	688a      	ldr	r2, [r1, #8]
 80079d4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079d6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079d8:	2301      	movs	r3, #1
 80079da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079de:	2300      	movs	r3, #0
 80079e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80079e4:	4618      	mov	r0, r3
}
 80079e6:	bc30      	pop	{r4, r5}
 80079e8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079ee:	684d      	ldr	r5, [r1, #4]
 80079f0:	432b      	orrs	r3, r5
 80079f2:	e7e0      	b.n	80079b6 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80079f4:	2002      	movs	r0, #2
}
 80079f6:	4770      	bx	lr
 80079f8:	40012c00 	.word	0x40012c00

080079fc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d046      	beq.n	8007a92 <HAL_TIMEx_ConfigBreakDeadTime+0x96>
{
 8007a04:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8007a06:	2301      	movs	r3, #1
 8007a08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a0c:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a12:	688a      	ldr	r2, [r1, #8]
 8007a14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a1a:	684a      	ldr	r2, [r1, #4]
 8007a1c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a22:	680a      	ldr	r2, [r1, #0]
 8007a24:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a2a:	690a      	ldr	r2, [r1, #16]
 8007a2c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a32:	694a      	ldr	r2, [r1, #20]
 8007a34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a3a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007a3c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a3e:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007a42:	698a      	ldr	r2, [r1, #24]
 8007a44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a48:	6802      	ldr	r2, [r0, #0]
 8007a4a:	4c13      	ldr	r4, [pc, #76]	; (8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8007a4c:	42a2      	cmp	r2, r4
 8007a4e:	d009      	beq.n	8007a64 <HAL_TIMEx_ConfigBreakDeadTime+0x68>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a50:	4c11      	ldr	r4, [pc, #68]	; (8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8007a52:	42a2      	cmp	r2, r4
 8007a54:	d00b      	beq.n	8007a6e <HAL_TIMEx_ConfigBreakDeadTime+0x72>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a56:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007a5e:	4618      	mov	r0, r3
}
 8007a60:	bc10      	pop	{r4}
 8007a62:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a68:	69cc      	ldr	r4, [r1, #28]
 8007a6a:	4323      	orrs	r3, r4
 8007a6c:	e7f0      	b.n	8007a50 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a72:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8007a74:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a7c:	6a0c      	ldr	r4, [r1, #32]
 8007a7e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a80:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007a84:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007a86:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a8c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	e7e1      	b.n	8007a56 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 8007a92:	2002      	movs	r0, #2
}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40012c00 	.word	0x40012c00

08007a9c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007a9c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	e852 3f00 	ldrex	r3, [r2]
 8007aa2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa6:	e842 3100 	strex	r1, r3, [r2]
 8007aaa:	2900      	cmp	r1, #0
 8007aac:	d1f6      	bne.n	8007a9c <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007aae:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	f102 0308 	add.w	r3, r2, #8
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	3208      	adds	r2, #8
 8007abe:	e842 3100 	strex	r1, r3, [r2]
 8007ac2:	2900      	cmp	r1, #0
 8007ac4:	d1f3      	bne.n	8007aae <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ac6:	2320      	movs	r3, #32
 8007ac8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 8007acc:	4770      	bx	lr

08007ace <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ace:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad0:	e852 3f00 	ldrex	r3, [r2]
 8007ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad8:	e842 3100 	strex	r1, r3, [r2]
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d1f6      	bne.n	8007ace <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ae0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	f102 0308 	add.w	r3, r2, #8
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	3208      	adds	r2, #8
 8007af4:	e842 3100 	strex	r1, r3, [r2]
 8007af8:	2900      	cmp	r1, #0
 8007afa:	d1f1      	bne.n	8007ae0 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d006      	beq.n	8007b10 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b02:	2320      	movs	r3, #32
 8007b04:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b0c:	6703      	str	r3, [r0, #112]	; 0x70
}
 8007b0e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b10:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b12:	e852 3f00 	ldrex	r3, [r2]
 8007b16:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	e842 3100 	strex	r1, r3, [r2]
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	d1f6      	bne.n	8007b10 <UART_EndRxTransfer+0x42>
 8007b22:	e7ee      	b.n	8007b02 <UART_EndRxTransfer+0x34>

08007b24 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8007b24:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d14c      	bne.n	8007bc6 <HAL_UART_Transmit_DMA+0xa2>
{
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8007b30:	2900      	cmp	r1, #0
 8007b32:	d04a      	beq.n	8007bca <HAL_UART_Transmit_DMA+0xa6>
 8007b34:	2a00      	cmp	r2, #0
 8007b36:	d04a      	beq.n	8007bce <HAL_UART_Transmit_DMA+0xaa>
    __HAL_LOCK(huart);
 8007b38:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d048      	beq.n	8007bd2 <HAL_UART_Transmit_DMA+0xae>
 8007b40:	2301      	movs	r3, #1
 8007b42:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8007b46:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007b48:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b4c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b56:	2321      	movs	r3, #33	; 0x21
 8007b58:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    if (huart->hdmatx != NULL)
 8007b5c:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007b5e:	b1f3      	cbz	r3, 8007b9e <HAL_UART_Transmit_DMA+0x7a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b60:	491d      	ldr	r1, [pc, #116]	; (8007bd8 <HAL_UART_Transmit_DMA+0xb4>)
 8007b62:	62d9      	str	r1, [r3, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b64:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007b66:	491d      	ldr	r1, [pc, #116]	; (8007bdc <HAL_UART_Transmit_DMA+0xb8>)
 8007b68:	6319      	str	r1, [r3, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b6a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007b6c:	491c      	ldr	r1, [pc, #112]	; (8007be0 <HAL_UART_Transmit_DMA+0xbc>)
 8007b6e:	6359      	str	r1, [r3, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007b70:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007b72:	2100      	movs	r1, #0
 8007b74:	6399      	str	r1, [r3, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b76:	6801      	ldr	r1, [r0, #0]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	f101 0228 	add.w	r2, r1, #40	; 0x28
 8007b7e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8007b80:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8007b82:	f7fc fadf 	bl	8004144 <HAL_DMA_Start_IT>
 8007b86:	b150      	cbz	r0, 8007b9e <HAL_UART_Transmit_DMA+0x7a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8007b94:	2320      	movs	r3, #32
 8007b96:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	e012      	b.n	8007bc4 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b9e:	6823      	ldr	r3, [r4, #0]
 8007ba0:	2240      	movs	r2, #64	; 0x40
 8007ba2:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007baa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	f102 0308 	add.w	r3, r2, #8
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	3208      	adds	r2, #8
 8007bba:	e842 3100 	strex	r1, r3, [r2]
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d1f3      	bne.n	8007baa <HAL_UART_Transmit_DMA+0x86>
    return HAL_OK;
 8007bc2:	2000      	movs	r0, #0
}
 8007bc4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8007bc6:	2002      	movs	r0, #2
}
 8007bc8:	4770      	bx	lr
      return HAL_ERROR;
 8007bca:	2001      	movs	r0, #1
 8007bcc:	e7fa      	b.n	8007bc4 <HAL_UART_Transmit_DMA+0xa0>
 8007bce:	2001      	movs	r0, #1
 8007bd0:	e7f8      	b.n	8007bc4 <HAL_UART_Transmit_DMA+0xa0>
    __HAL_LOCK(huart);
 8007bd2:	2002      	movs	r0, #2
 8007bd4:	e7f6      	b.n	8007bc4 <HAL_UART_Transmit_DMA+0xa0>
 8007bd6:	bf00      	nop
 8007bd8:	08007be5 	.word	0x08007be5
 8007bdc:	08007c53 	.word	0x08007c53
 8007be0:	08007c5f 	.word	0x08007c5f

08007be4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007be4:	b508      	push	{r3, lr}
 8007be6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007be8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f013 0f20 	tst.w	r3, #32
 8007bf2:	d118      	bne.n	8007c26 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bfa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	f102 0308 	add.w	r3, r2, #8
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	3208      	adds	r2, #8
 8007c0a:	e842 3100 	strex	r1, r3, [r2]
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d1f3      	bne.n	8007bfa <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	e852 3f00 	ldrex	r3, [r2]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1c:	e842 3100 	strex	r1, r3, [r2]
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d1f6      	bne.n	8007c12 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007c24:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007c26:	f7fa fdbd 	bl	80027a4 <HAL_UART_TxCpltCallback>
}
 8007c2a:	e7fb      	b.n	8007c24 <UART_DMATransmitCplt+0x40>

08007c2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c2c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c2e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	e852 3f00 	ldrex	r3, [r2]
 8007c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	e842 3100 	strex	r1, r3, [r2]
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	d1f6      	bne.n	8007c2e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c40:	2320      	movs	r3, #32
 8007c42:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c46:	2300      	movs	r3, #0
 8007c48:	6743      	str	r3, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c4a:	f7fa fdab 	bl	80027a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c4e:	bd08      	pop	{r3, pc}

08007c50 <HAL_UART_TxHalfCpltCallback>:
}
 8007c50:	4770      	bx	lr

08007c52 <UART_DMATxHalfCplt>:
{
 8007c52:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007c54:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007c56:	f7ff fffb 	bl	8007c50 <HAL_UART_TxHalfCpltCallback>
}
 8007c5a:	bd08      	pop	{r3, pc}

08007c5c <HAL_UART_ErrorCallback>:
}
 8007c5c:	4770      	bx	lr

08007c5e <UART_DMAError>:
{
 8007c5e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c60:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c62:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c66:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007c72:	d001      	beq.n	8007c78 <UART_DMAError+0x1a>
 8007c74:	2a21      	cmp	r2, #33	; 0x21
 8007c76:	d010      	beq.n	8007c9a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007c80:	d001      	beq.n	8007c86 <UART_DMAError+0x28>
 8007c82:	2d22      	cmp	r5, #34	; 0x22
 8007c84:	d010      	beq.n	8007ca8 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c86:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007c8a:	f043 0310 	orr.w	r3, r3, #16
 8007c8e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 8007c92:	4620      	mov	r0, r4
 8007c94:	f7ff ffe2 	bl	8007c5c <HAL_UART_ErrorCallback>
}
 8007c98:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f7ff fefb 	bl	8007a9c <UART_EndTxTransfer>
 8007ca6:	e7e7      	b.n	8007c78 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007cae:	4620      	mov	r0, r4
 8007cb0:	f7ff ff0d 	bl	8007ace <UART_EndRxTransfer>
 8007cb4:	e7e7      	b.n	8007c86 <UART_DMAError+0x28>

08007cb6 <UART_DMAAbortOnError>:
{
 8007cb6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007cc0:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8007cc4:	f7ff ffca 	bl	8007c5c <HAL_UART_ErrorCallback>
}
 8007cc8:	bd08      	pop	{r3, pc}

08007cca <HAL_UARTEx_RxEventCallback>:
}
 8007cca:	4770      	bx	lr

08007ccc <HAL_UART_IRQHandler>:
{
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007cd0:	6801      	ldr	r1, [r0, #0]
 8007cd2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cd4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cd6:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007cd8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8007cdc:	401a      	ands	r2, r3
 8007cde:	d108      	bne.n	8007cf2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ce0:	f013 0f20 	tst.w	r3, #32
 8007ce4:	d005      	beq.n	8007cf2 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ce6:	f010 0f20 	tst.w	r0, #32
 8007cea:	d134      	bne.n	8007d56 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cec:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007cf0:	d131      	bne.n	8007d56 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8007cf2:	b12a      	cbz	r2, 8007d00 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007cf4:	4a95      	ldr	r2, [pc, #596]	; (8007f4c <HAL_UART_IRQHandler+0x280>)
 8007cf6:	402a      	ands	r2, r5
 8007cf8:	d133      	bne.n	8007d62 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007cfa:	4e95      	ldr	r6, [pc, #596]	; (8007f50 <HAL_UART_IRQHandler+0x284>)
 8007cfc:	4230      	tst	r0, r6
 8007cfe:	d130      	bne.n	8007d62 <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d00:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007d02:	2a01      	cmp	r2, #1
 8007d04:	f000 80c3 	beq.w	8007e8e <HAL_UART_IRQHandler+0x1c2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007d0c:	d003      	beq.n	8007d16 <HAL_UART_IRQHandler+0x4a>
 8007d0e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8007d12:	f040 815b 	bne.w	8007fcc <HAL_UART_IRQHandler+0x300>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d1a:	d007      	beq.n	8007d2c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d1c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007d20:	f040 815b 	bne.w	8007fda <HAL_UART_IRQHandler+0x30e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d24:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8007d28:	f040 8157 	bne.w	8007fda <HAL_UART_IRQHandler+0x30e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007d30:	d003      	beq.n	8007d3a <HAL_UART_IRQHandler+0x6e>
 8007d32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d36:	f040 8157 	bne.w	8007fe8 <HAL_UART_IRQHandler+0x31c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d3a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007d3e:	d003      	beq.n	8007d48 <HAL_UART_IRQHandler+0x7c>
 8007d40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d44:	f040 8154 	bne.w	8007ff0 <HAL_UART_IRQHandler+0x324>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d48:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8007d4c:	d002      	beq.n	8007d54 <HAL_UART_IRQHandler+0x88>
 8007d4e:	2800      	cmp	r0, #0
 8007d50:	f2c0 8152 	blt.w	8007ff8 <HAL_UART_IRQHandler+0x32c>
}
 8007d54:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8007d56:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0fb      	beq.n	8007d54 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4798      	blx	r3
      return;
 8007d60:	e7f8      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d62:	f013 0f01 	tst.w	r3, #1
 8007d66:	d009      	beq.n	8007d7c <HAL_UART_IRQHandler+0xb0>
 8007d68:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007d6c:	d006      	beq.n	8007d7c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d6e:	2601      	movs	r6, #1
 8007d70:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d72:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007d76:	4331      	orrs	r1, r6
 8007d78:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d7c:	f013 0f02 	tst.w	r3, #2
 8007d80:	d00b      	beq.n	8007d9a <HAL_UART_IRQHandler+0xce>
 8007d82:	f015 0f01 	tst.w	r5, #1
 8007d86:	d008      	beq.n	8007d9a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d88:	6821      	ldr	r1, [r4, #0]
 8007d8a:	2602      	movs	r6, #2
 8007d8c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d8e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007d92:	f041 0104 	orr.w	r1, r1, #4
 8007d96:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d9a:	f013 0f04 	tst.w	r3, #4
 8007d9e:	d00b      	beq.n	8007db8 <HAL_UART_IRQHandler+0xec>
 8007da0:	f015 0f01 	tst.w	r5, #1
 8007da4:	d008      	beq.n	8007db8 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007da6:	6821      	ldr	r1, [r4, #0]
 8007da8:	2604      	movs	r6, #4
 8007daa:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dac:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007db0:	f041 0102 	orr.w	r1, r1, #2
 8007db4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007db8:	f013 0f08 	tst.w	r3, #8
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007dbe:	f010 0f20 	tst.w	r0, #32
 8007dc2:	d100      	bne.n	8007dc6 <HAL_UART_IRQHandler+0xfa>
 8007dc4:	b13a      	cbz	r2, 8007dd6 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	2108      	movs	r1, #8
 8007dca:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dcc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007dd6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8007dda:	d00c      	beq.n	8007df6 <HAL_UART_IRQHandler+0x12a>
 8007ddc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007de0:	d009      	beq.n	8007df6 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007de8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007dea:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007dee:	f042 0220 	orr.w	r2, r2, #32
 8007df2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007df6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	d0aa      	beq.n	8007d54 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007dfe:	f013 0f20 	tst.w	r3, #32
 8007e02:	d009      	beq.n	8007e18 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e04:	f010 0f20 	tst.w	r0, #32
 8007e08:	d102      	bne.n	8007e10 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e0a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8007e0e:	d003      	beq.n	8007e18 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8007e10:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007e12:	b10b      	cbz	r3, 8007e18 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8007e14:	4620      	mov	r0, r4
 8007e16:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8007e18:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e24:	d102      	bne.n	8007e2c <HAL_UART_IRQHandler+0x160>
 8007e26:	f012 0f28 	tst.w	r2, #40	; 0x28
 8007e2a:	d029      	beq.n	8007e80 <HAL_UART_IRQHandler+0x1b4>
        UART_EndRxTransfer(huart);
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7ff fe4e 	bl	8007ace <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007e3a:	d01d      	beq.n	8007e78 <HAL_UART_IRQHandler+0x1ac>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	f102 0308 	add.w	r3, r2, #8
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	3208      	adds	r2, #8
 8007e4c:	e842 3100 	strex	r1, r3, [r2]
 8007e50:	2900      	cmp	r1, #0
 8007e52:	d1f3      	bne.n	8007e3c <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8007e54:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007e56:	b15b      	cbz	r3, 8007e70 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e58:	4a3e      	ldr	r2, [pc, #248]	; (8007f54 <HAL_UART_IRQHandler+0x288>)
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e5c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007e5e:	f7fc f9f7 	bl	8004250 <HAL_DMA_Abort_IT>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f43f af76 	beq.w	8007d54 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e68:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007e6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007e6c:	4798      	blx	r3
 8007e6e:	e771      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007e70:	4620      	mov	r0, r4
 8007e72:	f7ff fef3 	bl	8007c5c <HAL_UART_ErrorCallback>
 8007e76:	e76d      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f7ff feef 	bl	8007c5c <HAL_UART_ErrorCallback>
 8007e7e:	e769      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007e80:	4620      	mov	r0, r4
 8007e82:	f7ff feeb 	bl	8007c5c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 8007e8c:	e762      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007e8e:	f013 0f10 	tst.w	r3, #16
 8007e92:	f43f af39 	beq.w	8007d08 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007e96:	f010 0f10 	tst.w	r0, #16
 8007e9a:	f43f af35 	beq.w	8007d08 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007eaa:	d055      	beq.n	8007f58 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eac:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007eae:	6813      	ldr	r3, [r2, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f43f af4d 	beq.w	8007d54 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007eba:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007ebe:	4299      	cmp	r1, r3
 8007ec0:	f67f af48 	bls.w	8007d54 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8007ec4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ec8:	6813      	ldr	r3, [r2, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f013 0f20 	tst.w	r3, #32
 8007ed0:	d131      	bne.n	8007f36 <HAL_UART_IRQHandler+0x26a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ed2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	e852 3f00 	ldrex	r3, [r2]
 8007ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	e842 3100 	strex	r1, r3, [r2]
 8007ee0:	2900      	cmp	r1, #0
 8007ee2:	d1f6      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x206>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	f102 0308 	add.w	r3, r2, #8
 8007eea:	e853 3f00 	ldrex	r3, [r3]
 8007eee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	3208      	adds	r2, #8
 8007ef4:	e842 3100 	strex	r1, r3, [r2]
 8007ef8:	2900      	cmp	r1, #0
 8007efa:	d1f3      	bne.n	8007ee4 <HAL_UART_IRQHandler+0x218>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007efc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	f102 0308 	add.w	r3, r2, #8
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	3208      	adds	r2, #8
 8007f0c:	e842 3100 	strex	r1, r3, [r2]
 8007f10:	2900      	cmp	r1, #0
 8007f12:	d1f3      	bne.n	8007efc <HAL_UART_IRQHandler+0x230>
          huart->RxState = HAL_UART_STATE_READY;
 8007f14:	2320      	movs	r3, #32
 8007f16:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	e852 3f00 	ldrex	r3, [r2]
 8007f24:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	e842 3100 	strex	r1, r3, [r2]
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	d1f6      	bne.n	8007f1e <HAL_UART_IRQHandler+0x252>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f30:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8007f32:	f7fc f953 	bl	80041dc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f36:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007f3a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	1ac9      	subs	r1, r1, r3
 8007f42:	b289      	uxth	r1, r1
 8007f44:	4620      	mov	r0, r4
 8007f46:	f7ff fec0 	bl	8007cca <HAL_UARTEx_RxEventCallback>
      return;
 8007f4a:	e703      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
 8007f4c:	10000001 	.word	0x10000001
 8007f50:	04000120 	.word	0x04000120
 8007f54:	08007cb7 	.word	0x08007cb7
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f58:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007f5c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	1ac9      	subs	r1, r1, r3
 8007f64:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8007f66:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f43f aef1 	beq.w	8007d54 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 8007f72:	2900      	cmp	r1, #0
 8007f74:	f43f aeee 	beq.w	8007d54 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	e852 3f00 	ldrex	r3, [r2]
 8007f7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	e842 3000 	strex	r0, r3, [r2]
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d1f6      	bne.n	8007f78 <HAL_UART_IRQHandler+0x2ac>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	f102 0308 	add.w	r3, r2, #8
 8007f90:	e853 3f00 	ldrex	r3, [r3]
 8007f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f98:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	3208      	adds	r2, #8
 8007f9e:	e842 3000 	strex	r0, r3, [r2]
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d1f1      	bne.n	8007f8a <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	2320      	movs	r3, #32
 8007fa8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fac:	2300      	movs	r3, #0
 8007fae:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8007fb0:	6723      	str	r3, [r4, #112]	; 0x70
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	e852 3f00 	ldrex	r3, [r2]
 8007fb8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	e842 3000 	strex	r0, r3, [r2]
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d1f6      	bne.n	8007fb2 <HAL_UART_IRQHandler+0x2e6>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f7ff fe80 	bl	8007cca <HAL_UARTEx_RxEventCallback>
      return;
 8007fca:	e6c3      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007fcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007fd0:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fe1c 	bl	8008c10 <HAL_UARTEx_WakeupCallback>
    return;
 8007fd8:	e6bc      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8007fda:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f43f aeb9 	beq.w	8007d54 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	4798      	blx	r3
    return;
 8007fe6:	e6b5      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f7ff fe1f 	bl	8007c2c <UART_EndTransmit_IT>
    return;
 8007fee:	e6b1      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fe0f 	bl	8008c14 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8007ff6:	e6ad      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fe0a 	bl	8008c12 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8007ffe:	e6a9      	b.n	8007d54 <HAL_UART_IRQHandler+0x88>

08008000 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008000:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8008002:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008006:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800800a:	2a22      	cmp	r2, #34	; 0x22
 800800c:	d005      	beq.n	800801a <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800800e:	6802      	ldr	r2, [r0, #0]
 8008010:	6993      	ldr	r3, [r2, #24]
 8008012:	f043 0308 	orr.w	r3, r3, #8
 8008016:	6193      	str	r3, [r2, #24]
  }
}
 8008018:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800801a:	6802      	ldr	r2, [r0, #0]
 800801c:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800801e:	b2db      	uxtb	r3, r3
 8008020:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008022:	400b      	ands	r3, r1
 8008024:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8008026:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008028:	3301      	adds	r3, #1
 800802a:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800802c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29b      	uxth	r3, r3
 8008036:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800803a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1e9      	bne.n	8008018 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008044:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	e852 3f00 	ldrex	r3, [r2]
 800804a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	e842 3100 	strex	r1, r3, [r2]
 8008052:	2900      	cmp	r1, #0
 8008054:	d1f6      	bne.n	8008044 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008056:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	f102 0308 	add.w	r3, r2, #8
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	3208      	adds	r2, #8
 8008066:	e842 3100 	strex	r1, r3, [r2]
 800806a:	2900      	cmp	r1, #0
 800806c:	d1f3      	bne.n	8008056 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800806e:	2320      	movs	r3, #32
 8008070:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8008074:	2300      	movs	r3, #0
 8008076:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008078:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d116      	bne.n	80080ac <UART_RxISR_8BIT+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807e:	2300      	movs	r3, #0
 8008080:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008082:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	e852 3f00 	ldrex	r3, [r2]
 8008088:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808c:	e842 3100 	strex	r1, r3, [r2]
 8008090:	2900      	cmp	r1, #0
 8008092:	d1f6      	bne.n	8008082 <UART_RxISR_8BIT+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008094:	6803      	ldr	r3, [r0, #0]
 8008096:	69da      	ldr	r2, [r3, #28]
 8008098:	f012 0f10 	tst.w	r2, #16
 800809c:	d001      	beq.n	80080a2 <UART_RxISR_8BIT+0xa2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800809e:	2210      	movs	r2, #16
 80080a0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80080a6:	f7ff fe10 	bl	8007cca <HAL_UARTEx_RxEventCallback>
 80080aa:	e7b5      	b.n	8008018 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80080ac:	f7fa fb8a 	bl	80027c4 <HAL_UART_RxCpltCallback>
 80080b0:	e7b2      	b.n	8008018 <UART_RxISR_8BIT+0x18>

080080b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080b2:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080b4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80080bc:	2b22      	cmp	r3, #34	; 0x22
 80080be:	d005      	beq.n	80080cc <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080c0:	6802      	ldr	r2, [r0, #0]
 80080c2:	6993      	ldr	r3, [r2, #24]
 80080c4:	f043 0308 	orr.w	r3, r3, #8
 80080c8:	6193      	str	r3, [r2, #24]
  }
}
 80080ca:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080cc:	6803      	ldr	r3, [r0, #0]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080d0:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80080d2:	4013      	ands	r3, r2
 80080d4:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80080d6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80080d8:	3302      	adds	r3, #2
 80080da:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80080dc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b01      	subs	r3, #1
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80080ea:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1ea      	bne.n	80080ca <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080f4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	e852 3f00 	ldrex	r3, [r2]
 80080fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	e842 3100 	strex	r1, r3, [r2]
 8008102:	2900      	cmp	r1, #0
 8008104:	d1f6      	bne.n	80080f4 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008106:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	f102 0308 	add.w	r3, r2, #8
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008114:	3208      	adds	r2, #8
 8008116:	e842 3100 	strex	r1, r3, [r2]
 800811a:	2900      	cmp	r1, #0
 800811c:	d1f3      	bne.n	8008106 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800811e:	2320      	movs	r3, #32
 8008120:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
      huart->RxISR = NULL;
 8008124:	2300      	movs	r3, #0
 8008126:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008128:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800812a:	2b01      	cmp	r3, #1
 800812c:	d116      	bne.n	800815c <UART_RxISR_16BIT+0xaa>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800812e:	2300      	movs	r3, #0
 8008130:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008132:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	e852 3f00 	ldrex	r3, [r2]
 8008138:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	e842 3100 	strex	r1, r3, [r2]
 8008140:	2900      	cmp	r1, #0
 8008142:	d1f6      	bne.n	8008132 <UART_RxISR_16BIT+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008144:	6803      	ldr	r3, [r0, #0]
 8008146:	69da      	ldr	r2, [r3, #28]
 8008148:	f012 0f10 	tst.w	r2, #16
 800814c:	d001      	beq.n	8008152 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800814e:	2210      	movs	r2, #16
 8008150:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008152:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8008156:	f7ff fdb8 	bl	8007cca <HAL_UARTEx_RxEventCallback>
 800815a:	e7b6      	b.n	80080ca <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800815c:	f7fa fb32 	bl	80027c4 <HAL_UART_RxCpltCallback>
 8008160:	e7b3      	b.n	80080ca <UART_RxISR_16BIT+0x18>
	...

08008164 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8008168:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800816c:	6803      	ldr	r3, [r0, #0]
 800816e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008170:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008174:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008178:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800817c:	2a22      	cmp	r2, #34	; 0x22
 800817e:	d005      	beq.n	800818c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	f042 0208 	orr.w	r2, r2, #8
 8008186:	619a      	str	r2, [r3, #24]
  }
}
 8008188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800818e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008192:	e008      	b.n	80081a6 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008194:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008198:	2b00      	cmp	r3, #0
 800819a:	d14c      	bne.n	8008236 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800819c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d04e      	beq.n	8008244 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081a6:	2f00      	cmp	r7, #0
 80081a8:	f000 8087 	beq.w	80082ba <UART_RxISR_8BIT_FIFOEN+0x156>
 80081ac:	f015 0f20 	tst.w	r5, #32
 80081b0:	f000 8083 	beq.w	80082ba <UART_RxISR_8BIT_FIFOEN+0x156>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081b8:	b2f3      	uxtb	r3, r6
 80081ba:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80081bc:	400b      	ands	r3, r1
 80081be:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80081c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081c2:	3301      	adds	r3, #1
 80081c4:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80081c6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80081d8:	f015 0f07 	tst.w	r5, #7
 80081dc:	d0de      	beq.n	800819c <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081de:	f015 0f01 	tst.w	r5, #1
 80081e2:	d009      	beq.n	80081f8 <UART_RxISR_8BIT_FIFOEN+0x94>
 80081e4:	f419 7f80 	tst.w	r9, #256	; 0x100
 80081e8:	d006      	beq.n	80081f8 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081ea:	2201      	movs	r2, #1
 80081ec:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80081f2:	4313      	orrs	r3, r2
 80081f4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081f8:	f015 0f02 	tst.w	r5, #2
 80081fc:	d00b      	beq.n	8008216 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80081fe:	f018 0f01 	tst.w	r8, #1
 8008202:	d008      	beq.n	8008216 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	2202      	movs	r2, #2
 8008208:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800820a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800820e:	f043 0304 	orr.w	r3, r3, #4
 8008212:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008216:	f015 0f04 	tst.w	r5, #4
 800821a:	d0bb      	beq.n	8008194 <UART_RxISR_8BIT_FIFOEN+0x30>
 800821c:	f018 0f01 	tst.w	r8, #1
 8008220:	d0b8      	beq.n	8008194 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	2204      	movs	r2, #4
 8008226:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008228:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800822c:	f043 0302 	orr.w	r3, r3, #2
 8008230:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008234:	e7ae      	b.n	8008194 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8008236:	4620      	mov	r0, r4
 8008238:	f7ff fd10 	bl	8007c5c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823c:	2300      	movs	r3, #0
 800823e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008242:	e7ab      	b.n	800819c <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008244:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	e852 3f00 	ldrex	r3, [r2]
 800824a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800824e:	e842 3100 	strex	r1, r3, [r2]
 8008252:	2900      	cmp	r1, #0
 8008254:	d1f6      	bne.n	8008244 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008256:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	f102 0308 	add.w	r3, r2, #8
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008264:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	3208      	adds	r2, #8
 800826a:	e842 3100 	strex	r1, r3, [r2]
 800826e:	2900      	cmp	r1, #0
 8008270:	d1f1      	bne.n	8008256 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8008272:	2320      	movs	r3, #32
 8008274:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8008278:	2300      	movs	r3, #0
 800827a:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800827e:	2b01      	cmp	r3, #1
 8008280:	d003      	beq.n	800828a <UART_RxISR_8BIT_FIFOEN+0x126>
          HAL_UART_RxCpltCallback(huart);
 8008282:	4620      	mov	r0, r4
 8008284:	f7fa fa9e 	bl	80027c4 <HAL_UART_RxCpltCallback>
 8008288:	e78d      	b.n	80081a6 <UART_RxISR_8BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828a:	2300      	movs	r3, #0
 800828c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	e852 3f00 	ldrex	r3, [r2]
 8008294:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	e842 3100 	strex	r1, r3, [r2]
 800829c:	2900      	cmp	r1, #0
 800829e:	d1f6      	bne.n	800828e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	f012 0f10 	tst.w	r2, #16
 80082a8:	d001      	beq.n	80082ae <UART_RxISR_8BIT_FIFOEN+0x14a>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082aa:	2210      	movs	r2, #16
 80082ac:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff fd09 	bl	8007cca <HAL_UARTEx_RxEventCallback>
 80082b8:	e775      	b.n	80081a6 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80082ba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80082be:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f43f af61 	beq.w	8008188 <UART_RxISR_8BIT_FIFOEN+0x24>
 80082c6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80082ca:	429a      	cmp	r2, r3
 80082cc:	f67f af5c 	bls.w	8008188 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	f102 0308 	add.w	r3, r2, #8
 80082d6:	e853 3f00 	ldrex	r3, [r3]
 80082da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	3208      	adds	r2, #8
 80082e0:	e842 3100 	strex	r1, r3, [r2]
 80082e4:	2900      	cmp	r1, #0
 80082e6:	d1f3      	bne.n	80082d0 <UART_RxISR_8BIT_FIFOEN+0x16c>
      huart->RxISR = UART_RxISR_8BIT;
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <UART_RxISR_8BIT_FIFOEN+0x19c>)
 80082ea:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80082ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	e852 3f00 	ldrex	r3, [r2]
 80082f2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	e842 3100 	strex	r1, r3, [r2]
 80082fa:	2900      	cmp	r1, #0
 80082fc:	d1f6      	bne.n	80082ec <UART_RxISR_8BIT_FIFOEN+0x188>
 80082fe:	e743      	b.n	8008188 <UART_RxISR_8BIT_FIFOEN+0x24>
 8008300:	08008001 	.word	0x08008001

08008304 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008308:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800830c:	6803      	ldr	r3, [r0, #0]
 800830e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008310:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008314:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008318:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800831c:	2a22      	cmp	r2, #34	; 0x22
 800831e:	d005      	beq.n	800832c <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	f042 0208 	orr.w	r2, r2, #8
 8008326:	619a      	str	r2, [r3, #24]
  }
}
 8008328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800832c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800832e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008332:	e008      	b.n	8008346 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008334:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d14b      	bne.n	80083d4 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800833c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d04d      	beq.n	80083e2 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008346:	2f00      	cmp	r7, #0
 8008348:	f000 8086 	beq.w	8008458 <UART_RxISR_16BIT_FIFOEN+0x154>
 800834c:	f015 0f20 	tst.w	r5, #32
 8008350:	f000 8082 	beq.w	8008458 <UART_RxISR_16BIT_FIFOEN+0x154>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008358:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800835a:	4033      	ands	r3, r6
 800835c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800835e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008360:	3302      	adds	r3, #2
 8008362:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008364:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b01      	subs	r3, #1
 800836c:	b29b      	uxth	r3, r3
 800836e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008376:	f015 0f07 	tst.w	r5, #7
 800837a:	d0df      	beq.n	800833c <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800837c:	f015 0f01 	tst.w	r5, #1
 8008380:	d009      	beq.n	8008396 <UART_RxISR_16BIT_FIFOEN+0x92>
 8008382:	f419 7f80 	tst.w	r9, #256	; 0x100
 8008386:	d006      	beq.n	8008396 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008388:	2201      	movs	r2, #1
 800838a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800838c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008396:	f015 0f02 	tst.w	r5, #2
 800839a:	d00b      	beq.n	80083b4 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800839c:	f018 0f01 	tst.w	r8, #1
 80083a0:	d008      	beq.n	80083b4 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083a2:	6823      	ldr	r3, [r4, #0]
 80083a4:	2202      	movs	r2, #2
 80083a6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80083ac:	f043 0304 	orr.w	r3, r3, #4
 80083b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083b4:	f015 0f04 	tst.w	r5, #4
 80083b8:	d0bc      	beq.n	8008334 <UART_RxISR_16BIT_FIFOEN+0x30>
 80083ba:	f018 0f01 	tst.w	r8, #1
 80083be:	d0b9      	beq.n	8008334 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	2204      	movs	r2, #4
 80083c4:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80083ca:	f043 0302 	orr.w	r3, r3, #2
 80083ce:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80083d2:	e7af      	b.n	8008334 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80083d4:	4620      	mov	r0, r4
 80083d6:	f7ff fc41 	bl	8007c5c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083da:	2300      	movs	r3, #0
 80083dc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 80083e0:	e7ac      	b.n	800833c <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	e852 3f00 	ldrex	r3, [r2]
 80083e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	e842 3100 	strex	r1, r3, [r2]
 80083f0:	2900      	cmp	r1, #0
 80083f2:	d1f6      	bne.n	80083e2 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083f4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	f102 0308 	add.w	r3, r2, #8
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008402:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	3208      	adds	r2, #8
 8008408:	e842 3100 	strex	r1, r3, [r2]
 800840c:	2900      	cmp	r1, #0
 800840e:	d1f1      	bne.n	80083f4 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8008410:	2320      	movs	r3, #32
 8008412:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->RxISR = NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800841c:	2b01      	cmp	r3, #1
 800841e:	d003      	beq.n	8008428 <UART_RxISR_16BIT_FIFOEN+0x124>
          HAL_UART_RxCpltCallback(huart);
 8008420:	4620      	mov	r0, r4
 8008422:	f7fa f9cf 	bl	80027c4 <HAL_UART_RxCpltCallback>
 8008426:	e78e      	b.n	8008346 <UART_RxISR_16BIT_FIFOEN+0x42>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008428:	2300      	movs	r3, #0
 800842a:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	e852 3f00 	ldrex	r3, [r2]
 8008432:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008436:	e842 3100 	strex	r1, r3, [r2]
 800843a:	2900      	cmp	r1, #0
 800843c:	d1f6      	bne.n	800842c <UART_RxISR_16BIT_FIFOEN+0x128>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	69da      	ldr	r2, [r3, #28]
 8008442:	f012 0f10 	tst.w	r2, #16
 8008446:	d001      	beq.n	800844c <UART_RxISR_16BIT_FIFOEN+0x148>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008448:	2210      	movs	r2, #16
 800844a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800844c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008450:	4620      	mov	r0, r4
 8008452:	f7ff fc3a 	bl	8007cca <HAL_UARTEx_RxEventCallback>
 8008456:	e776      	b.n	8008346 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8008458:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800845c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800845e:	2b00      	cmp	r3, #0
 8008460:	f43f af62 	beq.w	8008328 <UART_RxISR_16BIT_FIFOEN+0x24>
 8008464:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008468:	429a      	cmp	r2, r3
 800846a:	f67f af5d 	bls.w	8008328 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800846e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	f102 0308 	add.w	r3, r2, #8
 8008474:	e853 3f00 	ldrex	r3, [r3]
 8008478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	3208      	adds	r2, #8
 800847e:	e842 3100 	strex	r1, r3, [r2]
 8008482:	2900      	cmp	r1, #0
 8008484:	d1f3      	bne.n	800846e <UART_RxISR_16BIT_FIFOEN+0x16a>
      huart->RxISR = UART_RxISR_16BIT;
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <UART_RxISR_16BIT_FIFOEN+0x19c>)
 8008488:	6723      	str	r3, [r4, #112]	; 0x70
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800848a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	e852 3f00 	ldrex	r3, [r2]
 8008490:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	e842 3100 	strex	r1, r3, [r2]
 8008498:	2900      	cmp	r1, #0
 800849a:	d1f6      	bne.n	800848a <UART_RxISR_16BIT_FIFOEN+0x186>
 800849c:	e744      	b.n	8008328 <UART_RxISR_16BIT_FIFOEN+0x24>
 800849e:	bf00      	nop
 80084a0:	080080b3 	.word	0x080080b3

080084a4 <UART_SetConfig>:
{
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80084a8:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084aa:	6883      	ldr	r3, [r0, #8]
 80084ac:	6902      	ldr	r2, [r0, #16]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	6942      	ldr	r2, [r0, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	69c2      	ldr	r2, [r0, #28]
 80084b6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084b8:	6808      	ldr	r0, [r1, #0]
 80084ba:	4a9d      	ldr	r2, [pc, #628]	; (8008730 <UART_SetConfig+0x28c>)
 80084bc:	4002      	ands	r2, r0
 80084be:	4313      	orrs	r3, r2
 80084c0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	6853      	ldr	r3, [r2, #4]
 80084c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80084ca:	68e1      	ldr	r1, [r4, #12]
 80084cc:	430b      	orrs	r3, r1
 80084ce:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084d0:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	4b97      	ldr	r3, [pc, #604]	; (8008734 <UART_SetConfig+0x290>)
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d001      	beq.n	80084de <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80084da:	6a23      	ldr	r3, [r4, #32]
 80084dc:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084de:	6893      	ldr	r3, [r2, #8]
 80084e0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80084e4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80084e8:	430b      	orrs	r3, r1
 80084ea:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084ec:	6822      	ldr	r2, [r4, #0]
 80084ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80084f0:	f023 030f 	bic.w	r3, r3, #15
 80084f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80084f6:	430b      	orrs	r3, r1
 80084f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	4a8e      	ldr	r2, [pc, #568]	; (8008738 <UART_SetConfig+0x294>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01c      	beq.n	800853c <UART_SetConfig+0x98>
 8008502:	4a8e      	ldr	r2, [pc, #568]	; (800873c <UART_SetConfig+0x298>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d031      	beq.n	800856c <UART_SetConfig+0xc8>
 8008508:	4a8a      	ldr	r2, [pc, #552]	; (8008734 <UART_SetConfig+0x290>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d04b      	beq.n	80085a6 <UART_SetConfig+0x102>
 800850e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8008510:	4988      	ldr	r1, [pc, #544]	; (8008734 <UART_SetConfig+0x290>)
 8008512:	428b      	cmp	r3, r1
 8008514:	d068      	beq.n	80085e8 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008516:	69e0      	ldr	r0, [r4, #28]
 8008518:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800851c:	f000 80a5 	beq.w	800866a <UART_SetConfig+0x1c6>
    switch (clocksource)
 8008520:	2a08      	cmp	r2, #8
 8008522:	f200 811f 	bhi.w	8008764 <UART_SetConfig+0x2c0>
 8008526:	e8df f012 	tbh	[pc, r2, lsl #1]
 800852a:	00d3      	.short	0x00d3
 800852c:	00d100f5 	.word	0x00d100f5
 8008530:	00f8011d 	.word	0x00f8011d
 8008534:	011d011d 	.word	0x011d011d
 8008538:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800853c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008540:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008544:	f002 0203 	and.w	r2, r2, #3
 8008548:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800854c:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8008550:	2a03      	cmp	r2, #3
 8008552:	d809      	bhi.n	8008568 <UART_SetConfig+0xc4>
 8008554:	e8df f002 	tbb	[pc, r2]
 8008558:	063c0402 	.word	0x063c0402
 800855c:	2201      	movs	r2, #1
 800855e:	e7d7      	b.n	8008510 <UART_SetConfig+0x6c>
 8008560:	2204      	movs	r2, #4
 8008562:	e7d5      	b.n	8008510 <UART_SetConfig+0x6c>
 8008564:	2208      	movs	r2, #8
 8008566:	e7d3      	b.n	8008510 <UART_SetConfig+0x6c>
 8008568:	2210      	movs	r2, #16
 800856a:	e7d1      	b.n	8008510 <UART_SetConfig+0x6c>
 800856c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008570:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8008574:	f002 020c 	and.w	r2, r2, #12
 8008578:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800857c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8008580:	2a0c      	cmp	r2, #12
 8008582:	d80e      	bhi.n	80085a2 <UART_SetConfig+0xfe>
 8008584:	e8df f002 	tbb	[pc, r2]
 8008588:	0d0d0d07 	.word	0x0d0d0d07
 800858c:	0d0d0d09 	.word	0x0d0d0d09
 8008590:	0d0d0d26 	.word	0x0d0d0d26
 8008594:	0b          	.byte	0x0b
 8008595:	00          	.byte	0x00
 8008596:	2200      	movs	r2, #0
 8008598:	e7ba      	b.n	8008510 <UART_SetConfig+0x6c>
 800859a:	2204      	movs	r2, #4
 800859c:	e7b8      	b.n	8008510 <UART_SetConfig+0x6c>
 800859e:	2208      	movs	r2, #8
 80085a0:	e7b6      	b.n	8008510 <UART_SetConfig+0x6c>
 80085a2:	2210      	movs	r2, #16
 80085a4:	e7b4      	b.n	8008510 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80085a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085aa:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80085ae:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80085b2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80085b6:	d00f      	beq.n	80085d8 <UART_SetConfig+0x134>
 80085b8:	d805      	bhi.n	80085c6 <UART_SetConfig+0x122>
 80085ba:	b17a      	cbz	r2, 80085dc <UART_SetConfig+0x138>
 80085bc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80085c0:	d10e      	bne.n	80085e0 <UART_SetConfig+0x13c>
 80085c2:	2204      	movs	r2, #4
 80085c4:	e7a4      	b.n	8008510 <UART_SetConfig+0x6c>
 80085c6:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80085ca:	d10b      	bne.n	80085e4 <UART_SetConfig+0x140>
 80085cc:	2208      	movs	r2, #8
 80085ce:	e79f      	b.n	8008510 <UART_SetConfig+0x6c>
 80085d0:	2202      	movs	r2, #2
 80085d2:	e79d      	b.n	8008510 <UART_SetConfig+0x6c>
 80085d4:	2202      	movs	r2, #2
 80085d6:	e79b      	b.n	8008510 <UART_SetConfig+0x6c>
 80085d8:	2202      	movs	r2, #2
 80085da:	e799      	b.n	8008510 <UART_SetConfig+0x6c>
 80085dc:	2200      	movs	r2, #0
 80085de:	e797      	b.n	8008510 <UART_SetConfig+0x6c>
 80085e0:	2210      	movs	r2, #16
 80085e2:	e795      	b.n	8008510 <UART_SetConfig+0x6c>
 80085e4:	2210      	movs	r2, #16
 80085e6:	e793      	b.n	8008510 <UART_SetConfig+0x6c>
    switch (clocksource)
 80085e8:	2a08      	cmp	r2, #8
 80085ea:	f200 809c 	bhi.w	8008726 <UART_SetConfig+0x282>
 80085ee:	e8df f002 	tbb	[pc, r2]
 80085f2:	9a08      	.short	0x9a08
 80085f4:	9a379a3a 	.word	0x9a379a3a
 80085f8:	9a9a      	.short	0x9a9a
 80085fa:	05          	.byte	0x05
 80085fb:	00          	.byte	0x00
 80085fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008600:	e004      	b.n	800860c <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008602:	f7fd ffa7 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008606:	2800      	cmp	r0, #0
 8008608:	f000 808f 	beq.w	800872a <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800860c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800860e:	4b4c      	ldr	r3, [pc, #304]	; (8008740 <UART_SetConfig+0x29c>)
 8008610:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8008614:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008618:	6865      	ldr	r5, [r4, #4]
 800861a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800861e:	4299      	cmp	r1, r3
 8008620:	f200 8094 	bhi.w	800874c <UART_SetConfig+0x2a8>
 8008624:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8008628:	f200 8092 	bhi.w	8008750 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800862c:	2600      	movs	r6, #0
 800862e:	4633      	mov	r3, r6
 8008630:	4631      	mov	r1, r6
 8008632:	f7f8 fabd 	bl	8000bb0 <__aeabi_uldivmod>
 8008636:	0209      	lsls	r1, r1, #8
 8008638:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800863c:	0200      	lsls	r0, r0, #8
 800863e:	086b      	lsrs	r3, r5, #1
 8008640:	18c0      	adds	r0, r0, r3
 8008642:	462a      	mov	r2, r5
 8008644:	4633      	mov	r3, r6
 8008646:	f141 0100 	adc.w	r1, r1, #0
 800864a:	f7f8 fab1 	bl	8000bb0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800864e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8008652:	4b3c      	ldr	r3, [pc, #240]	; (8008744 <UART_SetConfig+0x2a0>)
 8008654:	429a      	cmp	r2, r3
 8008656:	d87d      	bhi.n	8008754 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	60d8      	str	r0, [r3, #12]
 800865c:	4630      	mov	r0, r6
 800865e:	e050      	b.n	8008702 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8008660:	f7fd fa70 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
        break;
 8008664:	e7cf      	b.n	8008606 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8008666:	4838      	ldr	r0, [pc, #224]	; (8008748 <UART_SetConfig+0x2a4>)
 8008668:	e7d0      	b.n	800860c <UART_SetConfig+0x168>
    switch (clocksource)
 800866a:	2a08      	cmp	r2, #8
 800866c:	d874      	bhi.n	8008758 <UART_SetConfig+0x2b4>
 800866e:	e8df f002 	tbb	[pc, r2]
 8008672:	2707      	.short	0x2707
 8008674:	732a7305 	.word	0x732a7305
 8008678:	7373      	.short	0x7373
 800867a:	0b          	.byte	0x0b
 800867b:	00          	.byte	0x00
 800867c:	4832      	ldr	r0, [pc, #200]	; (8008748 <UART_SetConfig+0x2a4>)
 800867e:	e003      	b.n	8008688 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008680:	f7fd ff68 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008684:	2800      	cmp	r0, #0
 8008686:	d069      	beq.n	800875c <UART_SetConfig+0x2b8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008688:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800868a:	4b2d      	ldr	r3, [pc, #180]	; (8008740 <UART_SetConfig+0x29c>)
 800868c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8008690:	fbb0 f0f3 	udiv	r0, r0, r3
 8008694:	6862      	ldr	r2, [r4, #4]
 8008696:	0853      	lsrs	r3, r2, #1
 8008698:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800869c:	fbb0 f0f2 	udiv	r0, r0, r2
 80086a0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a2:	f1a0 0210 	sub.w	r2, r0, #16
 80086a6:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d858      	bhi.n	8008760 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086ae:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086b2:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80086b6:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	60d8      	str	r0, [r3, #12]
 80086bc:	2000      	movs	r0, #0
 80086be:	e020      	b.n	8008702 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80086c0:	f7fd ff58 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
        break;
 80086c4:	e7de      	b.n	8008684 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80086c6:	f7fd fa3d 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
        break;
 80086ca:	e7db      	b.n	8008684 <UART_SetConfig+0x1e0>
    switch (clocksource)
 80086cc:	481e      	ldr	r0, [pc, #120]	; (8008748 <UART_SetConfig+0x2a4>)
 80086ce:	e003      	b.n	80086d8 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d0:	f7fd ff40 	bl	8006554 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d047      	beq.n	8008768 <UART_SetConfig+0x2c4>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80086da:	4b19      	ldr	r3, [pc, #100]	; (8008740 <UART_SetConfig+0x29c>)
 80086dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80086e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80086e4:	6863      	ldr	r3, [r4, #4]
 80086e6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80086ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80086ee:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086f0:	f1a0 0210 	sub.w	r2, r0, #16
 80086f4:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d837      	bhi.n	800876c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = usartdiv;
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	60d8      	str	r0, [r3, #12]
 8008700:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8008702:	2301      	movs	r3, #1
 8008704:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008708:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800870c:	2300      	movs	r3, #0
 800870e:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8008710:	6763      	str	r3, [r4, #116]	; 0x74
}
 8008712:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8008714:	f7fd ff2e 	bl	8006574 <HAL_RCC_GetPCLK2Freq>
        break;
 8008718:	e7dc      	b.n	80086d4 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800871a:	f7fd fa13 	bl	8005b44 <HAL_RCC_GetSysClockFreq>
        break;
 800871e:	e7d9      	b.n	80086d4 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8008720:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008724:	e7d8      	b.n	80086d8 <UART_SetConfig+0x234>
    switch (clocksource)
 8008726:	2001      	movs	r0, #1
 8008728:	e7eb      	b.n	8008702 <UART_SetConfig+0x25e>
 800872a:	2000      	movs	r0, #0
 800872c:	e7e9      	b.n	8008702 <UART_SetConfig+0x25e>
 800872e:	bf00      	nop
 8008730:	cfff69f3 	.word	0xcfff69f3
 8008734:	40008000 	.word	0x40008000
 8008738:	40013800 	.word	0x40013800
 800873c:	40004400 	.word	0x40004400
 8008740:	08016620 	.word	0x08016620
 8008744:	000ffcff 	.word	0x000ffcff
 8008748:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800874c:	2001      	movs	r0, #1
 800874e:	e7d8      	b.n	8008702 <UART_SetConfig+0x25e>
 8008750:	2001      	movs	r0, #1
 8008752:	e7d6      	b.n	8008702 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8008754:	2001      	movs	r0, #1
 8008756:	e7d4      	b.n	8008702 <UART_SetConfig+0x25e>
    switch (clocksource)
 8008758:	2001      	movs	r0, #1
 800875a:	e7d2      	b.n	8008702 <UART_SetConfig+0x25e>
 800875c:	2000      	movs	r0, #0
 800875e:	e7d0      	b.n	8008702 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8008760:	2001      	movs	r0, #1
 8008762:	e7ce      	b.n	8008702 <UART_SetConfig+0x25e>
    switch (clocksource)
 8008764:	2001      	movs	r0, #1
 8008766:	e7cc      	b.n	8008702 <UART_SetConfig+0x25e>
 8008768:	2000      	movs	r0, #0
 800876a:	e7ca      	b.n	8008702 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800876c:	2001      	movs	r0, #1
 800876e:	e7c8      	b.n	8008702 <UART_SetConfig+0x25e>

08008770 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008770:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008772:	f013 0f01 	tst.w	r3, #1
 8008776:	d006      	beq.n	8008786 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008778:	6802      	ldr	r2, [r0, #0]
 800877a:	6853      	ldr	r3, [r2, #4]
 800877c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008780:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008782:	430b      	orrs	r3, r1
 8008784:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008786:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008788:	f013 0f02 	tst.w	r3, #2
 800878c:	d006      	beq.n	800879c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800878e:	6802      	ldr	r2, [r0, #0]
 8008790:	6853      	ldr	r3, [r2, #4]
 8008792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008796:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008798:	430b      	orrs	r3, r1
 800879a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800879c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800879e:	f013 0f04 	tst.w	r3, #4
 80087a2:	d006      	beq.n	80087b2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087a4:	6802      	ldr	r2, [r0, #0]
 80087a6:	6853      	ldr	r3, [r2, #4]
 80087a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ac:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80087ae:	430b      	orrs	r3, r1
 80087b0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087b4:	f013 0f08 	tst.w	r3, #8
 80087b8:	d006      	beq.n	80087c8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087ba:	6802      	ldr	r2, [r0, #0]
 80087bc:	6853      	ldr	r3, [r2, #4]
 80087be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087c2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087ca:	f013 0f10 	tst.w	r3, #16
 80087ce:	d006      	beq.n	80087de <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087d0:	6802      	ldr	r2, [r0, #0]
 80087d2:	6893      	ldr	r3, [r2, #8]
 80087d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80087da:	430b      	orrs	r3, r1
 80087dc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087e0:	f013 0f20 	tst.w	r3, #32
 80087e4:	d006      	beq.n	80087f4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087e6:	6802      	ldr	r2, [r0, #0]
 80087e8:	6893      	ldr	r3, [r2, #8]
 80087ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80087f0:	430b      	orrs	r3, r1
 80087f2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80087fa:	d00a      	beq.n	8008812 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087fc:	6802      	ldr	r2, [r0, #0]
 80087fe:	6853      	ldr	r3, [r2, #4]
 8008800:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008804:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008806:	430b      	orrs	r3, r1
 8008808:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800880a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800880c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008810:	d00b      	beq.n	800882a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008812:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008814:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008818:	d006      	beq.n	8008828 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800881a:	6802      	ldr	r2, [r0, #0]
 800881c:	6853      	ldr	r3, [r2, #4]
 800881e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008822:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008824:	430b      	orrs	r3, r1
 8008826:	6053      	str	r3, [r2, #4]
}
 8008828:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800882a:	6802      	ldr	r2, [r0, #0]
 800882c:	6853      	ldr	r3, [r2, #4]
 800882e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008832:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008834:	430b      	orrs	r3, r1
 8008836:	6053      	str	r3, [r2, #4]
 8008838:	e7eb      	b.n	8008812 <UART_AdvFeatureConfig+0xa2>

0800883a <UART_WaitOnFlagUntilTimeout>:
{
 800883a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800883e:	4605      	mov	r5, r0
 8008840:	460f      	mov	r7, r1
 8008842:	4616      	mov	r6, r2
 8008844:	4699      	mov	r9, r3
 8008846:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800884a:	682c      	ldr	r4, [r5, #0]
 800884c:	69e4      	ldr	r4, [r4, #28]
 800884e:	ea37 0304 	bics.w	r3, r7, r4
 8008852:	bf0c      	ite	eq
 8008854:	f04f 0c01 	moveq.w	ip, #1
 8008858:	f04f 0c00 	movne.w	ip, #0
 800885c:	45b4      	cmp	ip, r6
 800885e:	d157      	bne.n	8008910 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8008860:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008864:	d0f1      	beq.n	800884a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008866:	f7f9 fc07 	bl	8002078 <HAL_GetTick>
 800886a:	eba0 0009 	sub.w	r0, r0, r9
 800886e:	4540      	cmp	r0, r8
 8008870:	d82f      	bhi.n	80088d2 <UART_WaitOnFlagUntilTimeout+0x98>
 8008872:	f1b8 0f00 	cmp.w	r8, #0
 8008876:	d02c      	beq.n	80088d2 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	f012 0f04 	tst.w	r2, #4
 8008880:	d0e3      	beq.n	800884a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008888:	d0df      	beq.n	800884a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800888a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800888e:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008890:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	e852 3f00 	ldrex	r3, [r2]
 8008896:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	e842 3100 	strex	r1, r3, [r2]
 800889e:	2900      	cmp	r1, #0
 80088a0:	d1f6      	bne.n	8008890 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	f102 0308 	add.w	r3, r2, #8
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b0:	3208      	adds	r2, #8
 80088b2:	e842 3100 	strex	r1, r3, [r2]
 80088b6:	2900      	cmp	r1, #0
 80088b8:	d1f3      	bne.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 80088ba:	2320      	movs	r3, #32
 80088bc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80088c0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088c4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 80088c8:	2300      	movs	r3, #0
 80088ca:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 80088ce:	2003      	movs	r0, #3
 80088d0:	e01f      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088d2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	e852 3f00 	ldrex	r3, [r2]
 80088d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	e842 3100 	strex	r1, r3, [r2]
 80088e0:	2900      	cmp	r1, #0
 80088e2:	d1f6      	bne.n	80088d2 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	f102 0308 	add.w	r3, r2, #8
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f2:	3208      	adds	r2, #8
 80088f4:	e842 3100 	strex	r1, r3, [r2]
 80088f8:	2900      	cmp	r1, #0
 80088fa:	d1f3      	bne.n	80088e4 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 80088fc:	2320      	movs	r3, #32
 80088fe:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008902:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8008906:	2300      	movs	r3, #0
 8008908:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 800890c:	2003      	movs	r0, #3
 800890e:	e000      	b.n	8008912 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8008910:	2000      	movs	r0, #0
}
 8008912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008916 <UART_CheckIdleState>:
{
 8008916:	b530      	push	{r4, r5, lr}
 8008918:	b083      	sub	sp, #12
 800891a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891c:	2300      	movs	r3, #0
 800891e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8008922:	f7f9 fba9 	bl	8002078 <HAL_GetTick>
 8008926:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	f012 0f08 	tst.w	r2, #8
 8008930:	d10f      	bne.n	8008952 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f013 0f04 	tst.w	r3, #4
 800893a:	d118      	bne.n	800896e <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 800893c:	2320      	movs	r3, #32
 800893e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008942:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008946:	2000      	movs	r0, #0
 8008948:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 800894a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800894e:	b003      	add	sp, #12
 8008950:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008952:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	4603      	mov	r3, r0
 800895a:	2200      	movs	r2, #0
 800895c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008960:	4620      	mov	r0, r4
 8008962:	f7ff ff6a 	bl	800883a <UART_WaitOnFlagUntilTimeout>
 8008966:	2800      	cmp	r0, #0
 8008968:	d0e3      	beq.n	8008932 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800896a:	2003      	movs	r0, #3
 800896c:	e7ef      	b.n	800894e <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800896e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	462b      	mov	r3, r5
 8008976:	2200      	movs	r2, #0
 8008978:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800897c:	4620      	mov	r0, r4
 800897e:	f7ff ff5c 	bl	800883a <UART_WaitOnFlagUntilTimeout>
 8008982:	2800      	cmp	r0, #0
 8008984:	d0da      	beq.n	800893c <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8008986:	2003      	movs	r0, #3
 8008988:	e7e1      	b.n	800894e <UART_CheckIdleState+0x38>

0800898a <HAL_UART_Init>:
  if (huart == NULL)
 800898a:	b378      	cbz	r0, 80089ec <HAL_UART_Init+0x62>
{
 800898c:	b510      	push	{r4, lr}
 800898e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008990:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008994:	b30b      	cbz	r3, 80089da <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8008996:	2324      	movs	r3, #36	; 0x24
 8008998:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	6813      	ldr	r3, [r2, #0]
 80089a0:	f023 0301 	bic.w	r3, r3, #1
 80089a4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80089a6:	4620      	mov	r0, r4
 80089a8:	f7ff fd7c 	bl	80084a4 <UART_SetConfig>
 80089ac:	2801      	cmp	r0, #1
 80089ae:	d013      	beq.n	80089d8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80089b2:	b9bb      	cbnz	r3, 80089e4 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	6853      	ldr	r3, [r2, #4]
 80089b8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80089bc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089be:	6822      	ldr	r2, [r4, #0]
 80089c0:	6893      	ldr	r3, [r2, #8]
 80089c2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80089c6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	6813      	ldr	r3, [r2, #0]
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff ff9f 	bl	8008916 <UART_CheckIdleState>
}
 80089d8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80089da:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 80089de:	f7f9 fddd 	bl	800259c <HAL_UART_MspInit>
 80089e2:	e7d8      	b.n	8008996 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7ff fec3 	bl	8008770 <UART_AdvFeatureConfig>
 80089ea:	e7e3      	b.n	80089b4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80089ec:	2001      	movs	r0, #1
}
 80089ee:	4770      	bx	lr

080089f0 <UART_Start_Receive_IT>:
{
 80089f0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80089f2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80089f4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80089f8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80089fc:	2300      	movs	r3, #0
 80089fe:	6703      	str	r3, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 8008a00:	6883      	ldr	r3, [r0, #8]
 8008a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a06:	d006      	beq.n	8008a16 <UART_Start_Receive_IT+0x26>
 8008a08:	b9a3      	cbnz	r3, 8008a34 <UART_Start_Receive_IT+0x44>
 8008a0a:	6903      	ldr	r3, [r0, #16]
 8008a0c:	b973      	cbnz	r3, 8008a2c <UART_Start_Receive_IT+0x3c>
 8008a0e:	23ff      	movs	r3, #255	; 0xff
 8008a10:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008a14:	e014      	b.n	8008a40 <UART_Start_Receive_IT+0x50>
 8008a16:	6903      	ldr	r3, [r0, #16]
 8008a18:	b923      	cbnz	r3, 8008a24 <UART_Start_Receive_IT+0x34>
 8008a1a:	f240 13ff 	movw	r3, #511	; 0x1ff
 8008a1e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008a22:	e00d      	b.n	8008a40 <UART_Start_Receive_IT+0x50>
 8008a24:	23ff      	movs	r3, #255	; 0xff
 8008a26:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008a2a:	e009      	b.n	8008a40 <UART_Start_Receive_IT+0x50>
 8008a2c:	237f      	movs	r3, #127	; 0x7f
 8008a2e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008a32:	e005      	b.n	8008a40 <UART_Start_Receive_IT+0x50>
 8008a34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a38:	d030      	beq.n	8008a9c <UART_Start_Receive_IT+0xac>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a46:	2322      	movs	r3, #34	; 0x22
 8008a48:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	f101 0308 	add.w	r3, r1, #8
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	3108      	adds	r1, #8
 8008a5c:	e841 3400 	strex	r4, r3, [r1]
 8008a60:	2c00      	cmp	r4, #0
 8008a62:	d1f3      	bne.n	8008a4c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a64:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a6a:	d021      	beq.n	8008ab0 <UART_Start_Receive_IT+0xc0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a6c:	6883      	ldr	r3, [r0, #8]
 8008a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a72:	d048      	beq.n	8008b06 <UART_Start_Receive_IT+0x116>
      huart->RxISR = UART_RxISR_8BIT;
 8008a74:	4b2c      	ldr	r3, [pc, #176]	; (8008b28 <UART_Start_Receive_IT+0x138>)
 8008a76:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a7e:	6903      	ldr	r3, [r0, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d046      	beq.n	8008b12 <UART_Start_Receive_IT+0x122>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a84:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	e852 3f00 	ldrex	r3, [r2]
 8008a8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	e842 3100 	strex	r1, r3, [r2]
 8008a92:	2900      	cmp	r1, #0
 8008a94:	d1f6      	bne.n	8008a84 <UART_Start_Receive_IT+0x94>
}
 8008a96:	2000      	movs	r0, #0
 8008a98:	bc10      	pop	{r4}
 8008a9a:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8008a9c:	6903      	ldr	r3, [r0, #16]
 8008a9e:	b91b      	cbnz	r3, 8008aa8 <UART_Start_Receive_IT+0xb8>
 8008aa0:	237f      	movs	r3, #127	; 0x7f
 8008aa2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008aa6:	e7cb      	b.n	8008a40 <UART_Start_Receive_IT+0x50>
 8008aa8:	233f      	movs	r3, #63	; 0x3f
 8008aaa:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008aae:	e7c7      	b.n	8008a40 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008ab0:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d8d9      	bhi.n	8008a6c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ab8:	6883      	ldr	r3, [r0, #8]
 8008aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008abe:	d01c      	beq.n	8008afa <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008ac0:	4b1a      	ldr	r3, [pc, #104]	; (8008b2c <UART_Start_Receive_IT+0x13c>)
 8008ac2:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008aca:	6903      	ldr	r3, [r0, #16]
 8008acc:	b143      	cbz	r3, 8008ae0 <UART_Start_Receive_IT+0xf0>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ace:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	e852 3f00 	ldrex	r3, [r2]
 8008ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	e842 3100 	strex	r1, r3, [r2]
 8008adc:	2900      	cmp	r1, #0
 8008ade:	d1f6      	bne.n	8008ace <UART_Start_Receive_IT+0xde>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ae0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	f102 0308 	add.w	r3, r2, #8
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	3208      	adds	r2, #8
 8008af0:	e842 3100 	strex	r1, r3, [r2]
 8008af4:	2900      	cmp	r1, #0
 8008af6:	d1f3      	bne.n	8008ae0 <UART_Start_Receive_IT+0xf0>
 8008af8:	e7cd      	b.n	8008a96 <UART_Start_Receive_IT+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afa:	6903      	ldr	r3, [r0, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d1df      	bne.n	8008ac0 <UART_Start_Receive_IT+0xd0>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b00:	4b0b      	ldr	r3, [pc, #44]	; (8008b30 <UART_Start_Receive_IT+0x140>)
 8008b02:	6703      	str	r3, [r0, #112]	; 0x70
 8008b04:	e7de      	b.n	8008ac4 <UART_Start_Receive_IT+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b06:	6903      	ldr	r3, [r0, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1b3      	bne.n	8008a74 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <UART_Start_Receive_IT+0x144>)
 8008b0e:	6703      	str	r3, [r0, #112]	; 0x70
 8008b10:	e7b2      	b.n	8008a78 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b12:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	e852 3f00 	ldrex	r3, [r2]
 8008b18:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	e842 3100 	strex	r1, r3, [r2]
 8008b20:	2900      	cmp	r1, #0
 8008b22:	d1f6      	bne.n	8008b12 <UART_Start_Receive_IT+0x122>
 8008b24:	e7b7      	b.n	8008a96 <UART_Start_Receive_IT+0xa6>
 8008b26:	bf00      	nop
 8008b28:	08008001 	.word	0x08008001
 8008b2c:	08008165 	.word	0x08008165
 8008b30:	08008305 	.word	0x08008305
 8008b34:	080080b3 	.word	0x080080b3

08008b38 <HAL_UART_Receive_IT>:
{
 8008b38:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b3a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8008b3e:	2b20      	cmp	r3, #32
 8008b40:	d11e      	bne.n	8008b80 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8008b42:	b1f9      	cbz	r1, 8008b84 <HAL_UART_Receive_IT+0x4c>
 8008b44:	b302      	cbz	r2, 8008b88 <HAL_UART_Receive_IT+0x50>
    __HAL_LOCK(huart);
 8008b46:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d01e      	beq.n	8008b8c <HAL_UART_Receive_IT+0x54>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b54:	2300      	movs	r3, #0
 8008b56:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b58:	6803      	ldr	r3, [r0, #0]
 8008b5a:	4c0d      	ldr	r4, [pc, #52]	; (8008b90 <HAL_UART_Receive_IT+0x58>)
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d00c      	beq.n	8008b7a <HAL_UART_Receive_IT+0x42>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008b66:	d008      	beq.n	8008b7a <HAL_UART_Receive_IT+0x42>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b68:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	e854 3f00 	ldrex	r3, [r4]
 8008b6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	e844 3500 	strex	r5, r3, [r4]
 8008b76:	2d00      	cmp	r5, #0
 8008b78:	d1f6      	bne.n	8008b68 <HAL_UART_Receive_IT+0x30>
    return(UART_Start_Receive_IT(huart, pData, Size));
 8008b7a:	f7ff ff39 	bl	80089f0 <UART_Start_Receive_IT>
 8008b7e:	e000      	b.n	8008b82 <HAL_UART_Receive_IT+0x4a>
    return HAL_BUSY;
 8008b80:	2002      	movs	r0, #2
}
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8008b84:	2001      	movs	r0, #1
 8008b86:	e7fc      	b.n	8008b82 <HAL_UART_Receive_IT+0x4a>
 8008b88:	2001      	movs	r0, #1
 8008b8a:	e7fa      	b.n	8008b82 <HAL_UART_Receive_IT+0x4a>
    __HAL_LOCK(huart);
 8008b8c:	2002      	movs	r0, #2
 8008b8e:	e7f8      	b.n	8008b82 <HAL_UART_Receive_IT+0x4a>
 8008b90:	40008000 	.word	0x40008000

08008b94 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8008b94:	b082      	sub	sp, #8
 8008b96:	ab02      	add	r3, sp, #8
 8008b98:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8008b9c:	6802      	ldr	r2, [r0, #0]
 8008b9e:	6853      	ldr	r3, [r2, #4]
 8008ba0:	f023 0310 	bic.w	r3, r3, #16
 8008ba4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8008ba8:	430b      	orrs	r3, r1
 8008baa:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8008bac:	6802      	ldr	r2, [r0, #0]
 8008bae:	6853      	ldr	r3, [r2, #4]
 8008bb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008bb4:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8008bb8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8008bbc:	6053      	str	r3, [r2, #4]
}
 8008bbe:	b002      	add	sp, #8
 8008bc0:	4770      	bx	lr
	...

08008bc4 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bc4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008bc6:	b92b      	cbnz	r3, 8008bd4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bce:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8008bd2:	4770      	bx	lr
{
 8008bd4:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bd6:	6803      	ldr	r3, [r0, #0]
 8008bd8:	689a      	ldr	r2, [r3, #8]
 8008bda:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bde:	6899      	ldr	r1, [r3, #8]
 8008be0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008be2:	4d09      	ldr	r5, [pc, #36]	; (8008c08 <UARTEx_SetNbDataToProcess+0x44>)
 8008be4:	5c6b      	ldrb	r3, [r5, r1]
 8008be6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008be8:	4c08      	ldr	r4, [pc, #32]	; (8008c0c <UARTEx_SetNbDataToProcess+0x48>)
 8008bea:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bec:	fb93 f3f1 	sdiv	r3, r3, r1
 8008bf0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bf4:	5cab      	ldrb	r3, [r5, r2]
 8008bf6:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bf8:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bfe:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8008c02:	bc30      	pop	{r4, r5}
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	08016640 	.word	0x08016640
 8008c0c:	08016638 	.word	0x08016638

08008c10 <HAL_UARTEx_WakeupCallback>:
}
 8008c10:	4770      	bx	lr

08008c12 <HAL_UARTEx_RxFifoFullCallback>:
}
 8008c12:	4770      	bx	lr

08008c14 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8008c14:	4770      	bx	lr

08008c16 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8008c16:	b510      	push	{r4, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	ab04      	add	r3, sp, #16
 8008c1c:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008c20:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d035      	beq.n	8008c94 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008c30:	2324      	movs	r3, #36	; 0x24
 8008c32:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8008c36:	6802      	ldr	r2, [r0, #0]
 8008c38:	6813      	ldr	r3, [r2, #0]
 8008c3a:	f023 0301 	bic.w	r3, r3, #1
 8008c3e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008c40:	6801      	ldr	r1, [r0, #0]
 8008c42:	688b      	ldr	r3, [r1, #8]
 8008c44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008c48:	9a02      	ldr	r2, [sp, #8]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008c4e:	b1aa      	cbz	r2, 8008c7c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008c50:	6822      	ldr	r2, [r4, #0]
 8008c52:	6813      	ldr	r3, [r2, #0]
 8008c54:	f043 0301 	orr.w	r3, r3, #1
 8008c58:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8008c5a:	f7f9 fa0d 	bl	8002078 <HAL_GetTick>
 8008c5e:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c60:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008c64:	9200      	str	r2, [sp, #0]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f7ff fde4 	bl	800883a <UART_WaitOnFlagUntilTimeout>
 8008c72:	b948      	cbnz	r0, 8008c88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8008c74:	2320      	movs	r3, #32
 8008c76:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8008c7a:	e006      	b.n	8008c8a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008c7c:	ab04      	add	r3, sp, #16
 8008c7e:	e913 0006 	ldmdb	r3, {r1, r2}
 8008c82:	f7ff ff87 	bl	8008b94 <UARTEx_Wakeup_AddressConfig>
 8008c86:	e7e3      	b.n	8008c50 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008c88:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8008c90:	b004      	add	sp, #16
 8008c92:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008c94:	2002      	movs	r0, #2
 8008c96:	e7fb      	b.n	8008c90 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008c98 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008c98:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d010      	beq.n	8008cc2 <HAL_UARTEx_EnableStopMode+0x2a>
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8008ca6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	e852 3f00 	ldrex	r3, [r2]
 8008cac:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	e842 3100 	strex	r1, r3, [r2]
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	d1f6      	bne.n	8008ca6 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008cc2:	2002      	movs	r0, #2
}
 8008cc4:	4770      	bx	lr

08008cc6 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8008cc6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d01d      	beq.n	8008d0a <HAL_UARTEx_EnableFifoMode+0x44>
{
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008cd8:	2324      	movs	r3, #36	; 0x24
 8008cda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cde:	6802      	ldr	r2, [r0, #0]
 8008ce0:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008ce2:	6811      	ldr	r1, [r2, #0]
 8008ce4:	f021 0101 	bic.w	r1, r1, #1
 8008ce8:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008cea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008cee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008cf2:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cf4:	6802      	ldr	r2, [r0, #0]
 8008cf6:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8008cf8:	f7ff ff64 	bl	8008bc4 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8008cfc:	2320      	movs	r3, #32
 8008cfe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008d02:	2000      	movs	r0, #0
 8008d04:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008d08:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8008d0a:	2002      	movs	r0, #2
}
 8008d0c:	4770      	bx	lr

08008d0e <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008d0e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008d10:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d01d      	beq.n	8008d54 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8008d18:	4604      	mov	r4, r0
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008d20:	2324      	movs	r3, #36	; 0x24
 8008d22:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d26:	6803      	ldr	r3, [r0, #0]
 8008d28:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	f022 0201 	bic.w	r2, r2, #1
 8008d30:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d32:	6802      	ldr	r2, [r0, #0]
 8008d34:	6893      	ldr	r3, [r2, #8]
 8008d36:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8008d3a:	4319      	orrs	r1, r3
 8008d3c:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008d3e:	f7ff ff41 	bl	8008bc4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008d46:	2320      	movs	r3, #32
 8008d48:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008d54:	2002      	movs	r0, #2
 8008d56:	e7fc      	b.n	8008d52 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008d58 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008d58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008d5a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d01d      	beq.n	8008d9e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008d62:	4604      	mov	r4, r0
 8008d64:	2301      	movs	r3, #1
 8008d66:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008d6a:	2324      	movs	r3, #36	; 0x24
 8008d6c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d70:	6803      	ldr	r3, [r0, #0]
 8008d72:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d7c:	6802      	ldr	r2, [r0, #0]
 8008d7e:	6893      	ldr	r3, [r2, #8]
 8008d80:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8008d84:	4319      	orrs	r1, r3
 8008d86:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008d88:	f7ff ff1c 	bl	8008bc4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008d90:	2320      	movs	r3, #32
 8008d92:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008d96:	2000      	movs	r0, #0
 8008d98:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008d9e:	2002      	movs	r0, #2
 8008da0:	e7fc      	b.n	8008d9c <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08008da4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008da8:	b97b      	cbnz	r3, 8008dca <osKernelInitialize+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008daa:	f3ef 8310 	mrs	r3, PRIMASK
 8008dae:	b913      	cbnz	r3, 8008db6 <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008db0:	f3ef 8311 	mrs	r3, BASEPRI
 8008db4:	b11b      	cbz	r3, 8008dbe <osKernelInitialize+0x1a>
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <osKernelInitialize+0x38>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d008      	beq.n	8008dd0 <osKernelInitialize+0x2c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dbe:	4b07      	ldr	r3, [pc, #28]	; (8008ddc <osKernelInitialize+0x38>)
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	b940      	cbnz	r0, 8008dd6 <osKernelInitialize+0x32>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008dc8:	4770      	bx	lr
    stat = osErrorISR;
 8008dca:	f06f 0005 	mvn.w	r0, #5
 8008dce:	4770      	bx	lr
 8008dd0:	f06f 0005 	mvn.w	r0, #5
 8008dd4:	4770      	bx	lr
    } else {
      stat = osError;
 8008dd6:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008dda:	4770      	bx	lr
 8008ddc:	200008c4 	.word	0x200008c4

08008de0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008de0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008de2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008de6:	b9a3      	cbnz	r3, 8008e12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dec:	b913      	cbnz	r3, 8008df4 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dee:	f3ef 8311 	mrs	r3, BASEPRI
 8008df2:	b11b      	cbz	r3, 8008dfc <osKernelStart+0x1c>
 8008df4:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <osKernelStart+0x44>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d00d      	beq.n	8008e18 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <osKernelStart+0x44>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d10c      	bne.n	8008e1e <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e04:	4b07      	ldr	r3, [pc, #28]	; (8008e24 <osKernelStart+0x44>)
 8008e06:	2202      	movs	r2, #2
 8008e08:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e0a:	f001 fa07 	bl	800a21c <vTaskStartScheduler>
      stat = osOK;
 8008e0e:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8008e10:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8008e12:	f06f 0005 	mvn.w	r0, #5
 8008e16:	e7fb      	b.n	8008e10 <osKernelStart+0x30>
 8008e18:	f06f 0005 	mvn.w	r0, #5
 8008e1c:	e7f8      	b.n	8008e10 <osKernelStart+0x30>
      stat = osError;
 8008e1e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008e22:	e7f5      	b.n	8008e10 <osKernelStart+0x30>
 8008e24:	200008c4 	.word	0x200008c4

08008e28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e2a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e2c:	2400      	movs	r4, #0
 8008e2e:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e30:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	d138      	bne.n	8008eaa <osThreadNew+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e38:	f3ef 8310 	mrs	r3, PRIMASK
 8008e3c:	b913      	cbnz	r3, 8008e44 <osThreadNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e3e:	f3ef 8311 	mrs	r3, BASEPRI
 8008e42:	b11b      	cbz	r3, 8008e4c <osThreadNew+0x24>
 8008e44:	4b2d      	ldr	r3, [pc, #180]	; (8008efc <osThreadNew+0xd4>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d02e      	beq.n	8008eaa <osThreadNew+0x82>
 8008e4c:	b368      	cbz	r0, 8008eaa <osThreadNew+0x82>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008e4e:	b322      	cbz	r2, 8008e9a <osThreadNew+0x72>
      if (attr->name != NULL) {
 8008e50:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008e52:	6993      	ldr	r3, [r2, #24]
 8008e54:	b903      	cbnz	r3, 8008e58 <osThreadNew+0x30>
    prio  = (UBaseType_t)osPriorityNormal;
 8008e56:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e58:	1e5c      	subs	r4, r3, #1
 8008e5a:	2c37      	cmp	r4, #55	; 0x37
 8008e5c:	d849      	bhi.n	8008ef2 <osThreadNew+0xca>
 8008e5e:	6854      	ldr	r4, [r2, #4]
 8008e60:	f014 0f01 	tst.w	r4, #1
 8008e64:	d147      	bne.n	8008ef6 <osThreadNew+0xce>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008e66:	6956      	ldr	r6, [r2, #20]
 8008e68:	b16e      	cbz	r6, 8008e86 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e6a:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e6e:	6894      	ldr	r4, [r2, #8]
 8008e70:	b12c      	cbz	r4, 8008e7e <osThreadNew+0x56>
 8008e72:	68d7      	ldr	r7, [r2, #12]
 8008e74:	2f5b      	cmp	r7, #91	; 0x5b
 8008e76:	d902      	bls.n	8008e7e <osThreadNew+0x56>
 8008e78:	6917      	ldr	r7, [r2, #16]
 8008e7a:	b107      	cbz	r7, 8008e7e <osThreadNew+0x56>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e7c:	b9c6      	cbnz	r6, 8008eb0 <osThreadNew+0x88>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e7e:	b12c      	cbz	r4, 8008e8c <osThreadNew+0x64>
    mem  = -1;
 8008e80:	f04f 34ff 	mov.w	r4, #4294967295
 8008e84:	e00e      	b.n	8008ea4 <osThreadNew+0x7c>
    stack = configMINIMAL_STACK_SIZE;
 8008e86:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8008e8a:	e7f0      	b.n	8008e6e <osThreadNew+0x46>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e8c:	68d4      	ldr	r4, [r2, #12]
 8008e8e:	b98c      	cbnz	r4, 8008eb4 <osThreadNew+0x8c>
 8008e90:	6914      	ldr	r4, [r2, #16]
 8008e92:	b194      	cbz	r4, 8008eba <osThreadNew+0x92>
    mem  = -1;
 8008e94:	f04f 34ff 	mov.w	r4, #4294967295
 8008e98:	e004      	b.n	8008ea4 <osThreadNew+0x7c>
    name = NULL;
 8008e9a:	4615      	mov	r5, r2
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8008e9c:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8008e9e:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8008ea0:	f04f 0c80 	mov.w	ip, #128	; 0x80
    }

    if (mem == 1) {
 8008ea4:	2c01      	cmp	r4, #1
 8008ea6:	d00a      	beq.n	8008ebe <osThreadNew+0x96>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8008ea8:	b1ac      	cbz	r4, 8008ed6 <osThreadNew+0xae>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008eaa:	9805      	ldr	r0, [sp, #20]
}
 8008eac:	b007      	add	sp, #28
 8008eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8008eb0:	2401      	movs	r4, #1
 8008eb2:	e7f7      	b.n	8008ea4 <osThreadNew+0x7c>
    mem  = -1;
 8008eb4:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb8:	e7f4      	b.n	8008ea4 <osThreadNew+0x7c>
          mem = 0;
 8008eba:	2400      	movs	r4, #0
 8008ebc:	e7f2      	b.n	8008ea4 <osThreadNew+0x7c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ebe:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008ec0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ec2:	9202      	str	r2, [sp, #8]
 8008ec4:	9401      	str	r4, [sp, #4]
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4662      	mov	r2, ip
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f001 f935 	bl	800a13c <xTaskCreateStatic>
 8008ed2:	9005      	str	r0, [sp, #20]
 8008ed4:	e7e9      	b.n	8008eaa <osThreadNew+0x82>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ed6:	aa05      	add	r2, sp, #20
 8008ed8:	9201      	str	r2, [sp, #4]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	460b      	mov	r3, r1
 8008ede:	fa1f f28c 	uxth.w	r2, ip
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	f001 f965 	bl	800a1b2 <xTaskCreate>
 8008ee8:	2801      	cmp	r0, #1
 8008eea:	d0de      	beq.n	8008eaa <osThreadNew+0x82>
          hTask = NULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	9305      	str	r3, [sp, #20]
 8008ef0:	e7db      	b.n	8008eaa <osThreadNew+0x82>
        return (NULL);
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e7da      	b.n	8008eac <osThreadNew+0x84>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e7d8      	b.n	8008eac <osThreadNew+0x84>
 8008efa:	bf00      	nop
 8008efc:	200008c4 	.word	0x200008c4

08008f00 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8008f00:	b530      	push	{r4, r5, lr}
 8008f02:	b085      	sub	sp, #20
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8008f04:	b1f0      	cbz	r0, 8008f44 <osThreadFlagsSet+0x44>
 8008f06:	4604      	mov	r4, r0
 8008f08:	2900      	cmp	r1, #0
 8008f0a:	db1b      	blt.n	8008f44 <osThreadFlagsSet+0x44>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    rflags = (uint32_t)osError;
 8008f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f10:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f12:	f3ef 8305 	mrs	r3, IPSR

    if (IS_IRQ()) {
 8008f16:	b9db      	cbnz	r3, 8008f50 <osThreadFlagsSet+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f18:	f3ef 8310 	mrs	r3, PRIMASK
 8008f1c:	b913      	cbnz	r3, 8008f24 <osThreadFlagsSet+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8008f22:	b11b      	cbz	r3, 8008f2c <osThreadFlagsSet+0x2c>
 8008f24:	4b19      	ldr	r3, [pc, #100]	; (8008f8c <osThreadFlagsSet+0x8c>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d011      	beq.n	8008f50 <osThreadFlagsSet+0x50>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);

      portYIELD_FROM_ISR (yield);
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	2201      	movs	r2, #1
 8008f30:	4620      	mov	r0, r4
 8008f32:	f001 fd7d 	bl	800aa30 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f001 fd77 	bl	800aa30 <xTaskGenericNotify>
 8008f42:	e002      	b.n	8008f4a <osThreadFlagsSet+0x4a>
    rflags = (uint32_t)osErrorParameter;
 8008f44:	f06f 0303 	mvn.w	r3, #3
 8008f48:	9303      	str	r3, [sp, #12]
    }
  }
  /* Return flags after setting */
  return (rflags);
}
 8008f4a:	9803      	ldr	r0, [sp, #12]
 8008f4c:	b005      	add	sp, #20
 8008f4e:	bd30      	pop	{r4, r5, pc}
      yield = pdFALSE;
 8008f50:	2500      	movs	r5, #0
 8008f52:	9502      	str	r5, [sp, #8]
      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8008f54:	ab02      	add	r3, sp, #8
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	462b      	mov	r3, r5
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f001 fde9 	bl	800ab34 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8008f62:	9500      	str	r5, [sp, #0]
 8008f64:	ab03      	add	r3, sp, #12
 8008f66:	462a      	mov	r2, r5
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f001 fde2 	bl	800ab34 <xTaskGenericNotifyFromISR>
      portYIELD_FROM_ISR (yield);
 8008f70:	9b02      	ldr	r3, [sp, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0e9      	beq.n	8008f4a <osThreadFlagsSet+0x4a>
 8008f76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	e7de      	b.n	8008f4a <osThreadFlagsSet+0x4a>
 8008f8c:	200008c4 	.word	0x200008c4

08008f90 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	b085      	sub	sp, #20
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f96:	f3ef 8305 	mrs	r3, IPSR
 8008f9a:	9301      	str	r3, [sp, #4]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d14c      	bne.n	800903a <osThreadFlagsWait+0xaa>
 8008fa0:	4681      	mov	r9, r0
 8008fa2:	468a      	mov	sl, r1
 8008fa4:	4617      	mov	r7, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8008faa:	b913      	cbnz	r3, 8008fb2 <osThreadFlagsWait+0x22>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fac:	f3ef 8311 	mrs	r3, BASEPRI
 8008fb0:	b11b      	cbz	r3, 8008fba <osThreadFlagsWait+0x2a>
 8008fb2:	4b29      	ldr	r3, [pc, #164]	; (8009058 <osThreadFlagsWait+0xc8>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d045      	beq.n	8009046 <osThreadFlagsWait+0xb6>
    rflags = (uint32_t)osErrorISR;
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008fba:	f1b9 0f00 	cmp.w	r9, #0
 8008fbe:	db45      	blt.n	800904c <osThreadFlagsWait+0xbc>
    rflags = (uint32_t)osErrorParameter;
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008fc0:	f01a 0f02 	tst.w	sl, #2
 8008fc4:	d007      	beq.n	8008fd6 <osThreadFlagsWait+0x46>
      clear = 0U;
 8008fc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
    }

    rflags = 0U;
    tout   = timeout;

    t0 = xTaskGetTickCount();
 8008fca:	f001 f97d 	bl	800a2c8 <xTaskGetTickCount>
 8008fce:	4683      	mov	fp, r0
    tout   = timeout;
 8008fd0:	463e      	mov	r6, r7
    rflags = 0U;
 8008fd2:	9d01      	ldr	r5, [sp, #4]
 8008fd4:	e023      	b.n	800901e <osThreadFlagsWait+0x8e>
      clear = flags;
 8008fd6:	46c8      	mov	r8, r9
 8008fd8:	e7f7      	b.n	8008fca <osThreadFlagsWait+0x3a>
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);

      if (rval == pdPASS) {
        rflags &= flags;
 8008fda:	ea05 0509 	and.w	r5, r5, r9
        rflags |= nval;
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	431d      	orrs	r5, r3

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8008fe2:	f01a 0f01 	tst.w	sl, #1
 8008fe6:	d00d      	beq.n	8009004 <osThreadFlagsWait+0x74>
          if ((flags & rflags) == flags) {
 8008fe8:	ea39 0305 	bics.w	r3, r9, r5
 8008fec:	d027      	beq.n	800903e <osThreadFlagsWait+0xae>
            break;
          } else {
            if (timeout == 0U) {
 8008fee:	b387      	cbz	r7, 8009052 <osThreadFlagsWait+0xc2>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008ff0:	f001 f96a 	bl	800a2c8 <xTaskGetTickCount>
 8008ff4:	eba0 030b 	sub.w	r3, r0, fp

        if (td > tout) {
 8008ff8:	429e      	cmp	r6, r3
 8008ffa:	d30b      	bcc.n	8009014 <osThreadFlagsWait+0x84>
          tout  = 0;
        } else {
          tout -= td;
 8008ffc:	ebab 0000 	sub.w	r0, fp, r0
 8009000:	4406      	add	r6, r0
 8009002:	e00b      	b.n	800901c <osThreadFlagsWait+0x8c>
          if ((flags & rflags) != 0) {
 8009004:	ea19 0f05 	tst.w	r9, r5
 8009008:	d119      	bne.n	800903e <osThreadFlagsWait+0xae>
            if (timeout == 0U) {
 800900a:	2f00      	cmp	r7, #0
 800900c:	d1f0      	bne.n	8008ff0 <osThreadFlagsWait+0x60>
              rflags = (uint32_t)osErrorResource;
 800900e:	f06f 0502 	mvn.w	r5, #2
    }
    while (rval != pdFAIL);
  }

  /* Return flags before clearing */
  return (rflags);
 8009012:	e014      	b.n	800903e <osThreadFlagsWait+0xae>
          tout  = 0;
 8009014:	9e01      	ldr	r6, [sp, #4]
 8009016:	e001      	b.n	800901c <osThreadFlagsWait+0x8c>
          rflags = (uint32_t)osErrorTimeout;
 8009018:	f06f 0501 	mvn.w	r5, #1
    while (rval != pdFAIL);
 800901c:	b17c      	cbz	r4, 800903e <osThreadFlagsWait+0xae>
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800901e:	4633      	mov	r3, r6
 8009020:	aa03      	add	r2, sp, #12
 8009022:	4641      	mov	r1, r8
 8009024:	2000      	movs	r0, #0
 8009026:	f001 fcb7 	bl	800a998 <xTaskNotifyWait>
 800902a:	4604      	mov	r4, r0
      if (rval == pdPASS) {
 800902c:	2801      	cmp	r0, #1
 800902e:	d0d4      	beq.n	8008fda <osThreadFlagsWait+0x4a>
        if (timeout == 0) {
 8009030:	2f00      	cmp	r7, #0
 8009032:	d1f1      	bne.n	8009018 <osThreadFlagsWait+0x88>
          rflags = (uint32_t)osErrorResource;
 8009034:	f06f 0502 	mvn.w	r5, #2
 8009038:	e7f0      	b.n	800901c <osThreadFlagsWait+0x8c>
    rflags = (uint32_t)osErrorISR;
 800903a:	f06f 0505 	mvn.w	r5, #5
}
 800903e:	4628      	mov	r0, r5
 8009040:	b005      	add	sp, #20
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rflags = (uint32_t)osErrorISR;
 8009046:	f06f 0505 	mvn.w	r5, #5
 800904a:	e7f8      	b.n	800903e <osThreadFlagsWait+0xae>
    rflags = (uint32_t)osErrorParameter;
 800904c:	f06f 0503 	mvn.w	r5, #3
 8009050:	e7f5      	b.n	800903e <osThreadFlagsWait+0xae>
              rflags = (uint32_t)osErrorResource;
 8009052:	f06f 0502 	mvn.w	r5, #2
 8009056:	e7f2      	b.n	800903e <osThreadFlagsWait+0xae>
 8009058:	200008c4 	.word	0x200008c4

0800905c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800905c:	4b03      	ldr	r3, [pc, #12]	; (800906c <vApplicationGetIdleTaskMemory+0x10>)
 800905e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009060:	4b03      	ldr	r3, [pc, #12]	; (8009070 <vApplicationGetIdleTaskMemory+0x14>)
 8009062:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009064:	2380      	movs	r3, #128	; 0x80
 8009066:	6013      	str	r3, [r2, #0]
}
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	20000868 	.word	0x20000868
 8009070:	20000668 	.word	0x20000668

08009074 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009074:	4b03      	ldr	r3, [pc, #12]	; (8009084 <vApplicationGetTimerTaskMemory+0x10>)
 8009076:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009078:	4b03      	ldr	r3, [pc, #12]	; (8009088 <vApplicationGetTimerTaskMemory+0x14>)
 800907a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800907c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009080:	6013      	str	r3, [r2, #0]
}
 8009082:	4770      	bx	lr
 8009084:	20000cc8 	.word	0x20000cc8
 8009088:	200008c8 	.word	0x200008c8

0800908c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800908c:	4a12      	ldr	r2, [pc, #72]	; (80090d8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800908e:	f012 0f07 	tst.w	r2, #7
 8009092:	d01e      	beq.n	80090d2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009094:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009096:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800909a:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
 800909e:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090a2:	480e      	ldr	r0, [pc, #56]	; (80090dc <prvHeapInit+0x50>)
 80090a4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090a6:	2100      	movs	r1, #0
 80090a8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090aa:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80090ac:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090ae:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80090b2:	480b      	ldr	r0, [pc, #44]	; (80090e0 <prvHeapInit+0x54>)
 80090b4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80090b6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090b8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090ba:	1a99      	subs	r1, r3, r2
 80090bc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090be:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090c0:	4b08      	ldr	r3, [pc, #32]	; (80090e4 <prvHeapInit+0x58>)
 80090c2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090c4:	4b08      	ldr	r3, [pc, #32]	; (80090e8 <prvHeapInit+0x5c>)
 80090c6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090c8:	4b08      	ldr	r3, [pc, #32]	; (80090ec <prvHeapInit+0x60>)
 80090ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090ce:	601a      	str	r2, [r3, #0]
}
 80090d0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090d6:	e7e4      	b.n	80090a2 <prvHeapInit+0x16>
 80090d8:	20000d28 	.word	0x20000d28
 80090dc:	20002d34 	.word	0x20002d34
 80090e0:	20000d24 	.word	0x20000d24
 80090e4:	20002d30 	.word	0x20002d30
 80090e8:	20002d2c 	.word	0x20002d2c
 80090ec:	20002d28 	.word	0x20002d28

080090f0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090f0:	4b15      	ldr	r3, [pc, #84]	; (8009148 <prvInsertBlockIntoFreeList+0x58>)
 80090f2:	461a      	mov	r2, r3
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4283      	cmp	r3, r0
 80090f8:	d3fb      	bcc.n	80090f2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090fa:	6851      	ldr	r1, [r2, #4]
 80090fc:	eb02 0c01 	add.w	ip, r2, r1
 8009100:	4584      	cmp	ip, r0
 8009102:	d009      	beq.n	8009118 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009104:	6841      	ldr	r1, [r0, #4]
 8009106:	eb00 0c01 	add.w	ip, r0, r1
 800910a:	4563      	cmp	r3, ip
 800910c:	d009      	beq.n	8009122 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800910e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009110:	4290      	cmp	r0, r2
 8009112:	d018      	beq.n	8009146 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009114:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8009116:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009118:	6840      	ldr	r0, [r0, #4]
 800911a:	4401      	add	r1, r0
 800911c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800911e:	4610      	mov	r0, r2
 8009120:	e7f0      	b.n	8009104 <prvInsertBlockIntoFreeList+0x14>
{
 8009122:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009124:	4c09      	ldr	r4, [pc, #36]	; (800914c <prvInsertBlockIntoFreeList+0x5c>)
 8009126:	6824      	ldr	r4, [r4, #0]
 8009128:	42a3      	cmp	r3, r4
 800912a:	d00a      	beq.n	8009142 <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	4419      	add	r1, r3
 8009130:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8009138:	4290      	cmp	r0, r2
 800913a:	d000      	beq.n	800913e <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800913c:	6010      	str	r0, [r2, #0]
	}
}
 800913e:	bc10      	pop	{r4}
 8009140:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009142:	6004      	str	r4, [r0, #0]
 8009144:	e7f8      	b.n	8009138 <prvInsertBlockIntoFreeList+0x48>
 8009146:	4770      	bx	lr
 8009148:	20002d34 	.word	0x20002d34
 800914c:	20000d24 	.word	0x20000d24

08009150 <pvPortMalloc>:
{
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8009154:	f001 f8b0 	bl	800a2b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009158:	4b34      	ldr	r3, [pc, #208]	; (800922c <pvPortMalloc+0xdc>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	b1a3      	cbz	r3, 8009188 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800915e:	4b34      	ldr	r3, [pc, #208]	; (8009230 <pvPortMalloc+0xe0>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	421d      	tst	r5, r3
 8009164:	d14a      	bne.n	80091fc <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 8009166:	b135      	cbz	r5, 8009176 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 8009168:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800916a:	f015 0f07 	tst.w	r5, #7
 800916e:	d002      	beq.n	8009176 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009170:	f025 0507 	bic.w	r5, r5, #7
 8009174:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009176:	2d00      	cmp	r5, #0
 8009178:	d042      	beq.n	8009200 <pvPortMalloc+0xb0>
 800917a:	4b2e      	ldr	r3, [pc, #184]	; (8009234 <pvPortMalloc+0xe4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	42ab      	cmp	r3, r5
 8009180:	d34d      	bcc.n	800921e <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 8009182:	4a2d      	ldr	r2, [pc, #180]	; (8009238 <pvPortMalloc+0xe8>)
 8009184:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009186:	e004      	b.n	8009192 <pvPortMalloc+0x42>
			prvHeapInit();
 8009188:	f7ff ff80 	bl	800908c <prvHeapInit>
 800918c:	e7e7      	b.n	800915e <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800918e:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8009190:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009192:	6863      	ldr	r3, [r4, #4]
 8009194:	42ab      	cmp	r3, r5
 8009196:	d202      	bcs.n	800919e <pvPortMalloc+0x4e>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1f7      	bne.n	800918e <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800919e:	4b23      	ldr	r3, [pc, #140]	; (800922c <pvPortMalloc+0xdc>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	d03d      	beq.n	8009222 <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091a6:	6816      	ldr	r6, [r2, #0]
 80091a8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091ae:	6863      	ldr	r3, [r4, #4]
 80091b0:	1b5b      	subs	r3, r3, r5
 80091b2:	2b10      	cmp	r3, #16
 80091b4:	d910      	bls.n	80091d8 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091b6:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091b8:	f010 0f07 	tst.w	r0, #7
 80091bc:	d008      	beq.n	80091d0 <pvPortMalloc+0x80>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	e7fe      	b.n	80091ce <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091d0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091d2:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091d4:	f7ff ff8c 	bl	80090f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091d8:	6862      	ldr	r2, [r4, #4]
 80091da:	4916      	ldr	r1, [pc, #88]	; (8009234 <pvPortMalloc+0xe4>)
 80091dc:	680b      	ldr	r3, [r1, #0]
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091e2:	4916      	ldr	r1, [pc, #88]	; (800923c <pvPortMalloc+0xec>)
 80091e4:	6809      	ldr	r1, [r1, #0]
 80091e6:	428b      	cmp	r3, r1
 80091e8:	d201      	bcs.n	80091ee <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091ea:	4914      	ldr	r1, [pc, #80]	; (800923c <pvPortMalloc+0xec>)
 80091ec:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091ee:	4b10      	ldr	r3, [pc, #64]	; (8009230 <pvPortMalloc+0xe0>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	e002      	b.n	8009202 <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 80091fc:	2600      	movs	r6, #0
 80091fe:	e000      	b.n	8009202 <pvPortMalloc+0xb2>
 8009200:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8009202:	f001 f90d 	bl	800a420 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009206:	f016 0f07 	tst.w	r6, #7
 800920a:	d00c      	beq.n	8009226 <pvPortMalloc+0xd6>
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	e7fe      	b.n	800921c <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 800921e:	2600      	movs	r6, #0
 8009220:	e7ef      	b.n	8009202 <pvPortMalloc+0xb2>
 8009222:	2600      	movs	r6, #0
 8009224:	e7ed      	b.n	8009202 <pvPortMalloc+0xb2>
}
 8009226:	4630      	mov	r0, r6
 8009228:	bd70      	pop	{r4, r5, r6, pc}
 800922a:	bf00      	nop
 800922c:	20000d24 	.word	0x20000d24
 8009230:	20002d28 	.word	0x20002d28
 8009234:	20002d2c 	.word	0x20002d2c
 8009238:	20002d34 	.word	0x20002d34
 800923c:	20002d30 	.word	0x20002d30

08009240 <vPortFree>:
	if( pv != NULL )
 8009240:	b380      	cbz	r0, 80092a4 <vPortFree+0x64>
{
 8009242:	b538      	push	{r3, r4, r5, lr}
 8009244:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009246:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800924a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800924e:	4a16      	ldr	r2, [pc, #88]	; (80092a8 <vPortFree+0x68>)
 8009250:	6812      	ldr	r2, [r2, #0]
 8009252:	4213      	tst	r3, r2
 8009254:	d108      	bne.n	8009268 <vPortFree+0x28>
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	e7fe      	b.n	8009266 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009268:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800926c:	b141      	cbz	r1, 8009280 <vPortFree+0x40>
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	f383 8811 	msr	BASEPRI, r3
 8009276:	f3bf 8f6f 	isb	sy
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	e7fe      	b.n	800927e <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009280:	ea23 0302 	bic.w	r3, r3, r2
 8009284:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009288:	f001 f816 	bl	800a2b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800928c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009290:	4a06      	ldr	r2, [pc, #24]	; (80092ac <vPortFree+0x6c>)
 8009292:	6813      	ldr	r3, [r2, #0]
 8009294:	440b      	add	r3, r1
 8009296:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009298:	4628      	mov	r0, r5
 800929a:	f7ff ff29 	bl	80090f0 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800929e:	f001 f8bf 	bl	800a420 <xTaskResumeAll>
}
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20002d28 	.word	0x20002d28
 80092ac:	20002d2c 	.word	0x20002d2c

080092b0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092b0:	f100 0308 	add.w	r3, r0, #8
 80092b4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092b6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092bc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092be:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092c4:	4770      	bx	lr

080092c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092ca:	4770      	bx	lr

080092cc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80092cc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092d4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092d6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80092d8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80092da:	6803      	ldr	r3, [r0, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	6003      	str	r3, [r0, #0]
}
 80092e0:	4770      	bx	lr

080092e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092e2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092e4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092e6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80092ea:	d011      	beq.n	8009310 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092ec:	f100 0308 	add.w	r3, r0, #8
 80092f0:	461c      	mov	r4, r3
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	42aa      	cmp	r2, r5
 80092f8:	d9fa      	bls.n	80092f0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092fa:	6863      	ldr	r3, [r4, #4]
 80092fc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092fe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009300:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009302:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009304:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009306:	6803      	ldr	r3, [r0, #0]
 8009308:	3301      	adds	r3, #1
 800930a:	6003      	str	r3, [r0, #0]
}
 800930c:	bc30      	pop	{r4, r5}
 800930e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009310:	6904      	ldr	r4, [r0, #16]
 8009312:	e7f2      	b.n	80092fa <vListInsert+0x18>

08009314 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009314:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009316:	6841      	ldr	r1, [r0, #4]
 8009318:	6882      	ldr	r2, [r0, #8]
 800931a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800931c:	6841      	ldr	r1, [r0, #4]
 800931e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	4282      	cmp	r2, r0
 8009324:	d006      	beq.n	8009334 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009326:	2200      	movs	r2, #0
 8009328:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	3a01      	subs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009330:	6818      	ldr	r0, [r3, #0]
}
 8009332:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009334:	6882      	ldr	r2, [r0, #8]
 8009336:	605a      	str	r2, [r3, #4]
 8009338:	e7f5      	b.n	8009326 <uxListRemove+0x12>
	...

0800933c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800933c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800933e:	2300      	movs	r3, #0
 8009340:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009342:	4b0d      	ldr	r3, [pc, #52]	; (8009378 <prvTaskExitError+0x3c>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934a:	d008      	beq.n	800935e <prvTaskExitError+0x22>
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	e7fe      	b.n	800935c <prvTaskExitError+0x20>
 800935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0fc      	beq.n	800936e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009374:	b002      	add	sp, #8
 8009376:	4770      	bx	lr
 8009378:	20000078 	.word	0x20000078

0800937c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800937c:	4806      	ldr	r0, [pc, #24]	; (8009398 <prvPortStartFirstTask+0x1c>)
 800937e:	6800      	ldr	r0, [r0, #0]
 8009380:	6800      	ldr	r0, [r0, #0]
 8009382:	f380 8808 	msr	MSP, r0
 8009386:	b662      	cpsie	i
 8009388:	b661      	cpsie	f
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	df00      	svc	0
 8009394:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009396:	0000      	.short	0x0000
 8009398:	e000ed08 	.word	0xe000ed08

0800939c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800939c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093a0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093a4:	f021 0101 	bic.w	r1, r1, #1
 80093a8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093ac:	4b03      	ldr	r3, [pc, #12]	; (80093bc <pxPortInitialiseStack+0x20>)
 80093ae:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80093b2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80093b6:	3840      	subs	r0, #64	; 0x40
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	0800933d 	.word	0x0800933d

080093c0 <SVC_Handler>:
	__asm volatile (
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <pxCurrentTCBConst2>)
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	6808      	ldr	r0, [r1, #0]
 80093c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80093ca:	f380 8809 	msr	PSP, r0
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8811 	msr	BASEPRI, r0
 80093da:	f04e 0e0d 	orr.w	lr, lr, #13
 80093de:	4770      	bx	lr

080093e0 <pxCurrentTCBConst2>:
 80093e0:	20002d90 	.word	0x20002d90

080093e4 <vPortEnterCritical>:
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	f383 8811 	msr	BASEPRI, r3
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093f4:	4a0b      	ldr	r2, [pc, #44]	; (8009424 <vPortEnterCritical+0x40>)
 80093f6:	6813      	ldr	r3, [r2, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d000      	beq.n	8009402 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8009400:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009402:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009406:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800940a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800940e:	d0f7      	beq.n	8009400 <vPortEnterCritical+0x1c>
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	e7fe      	b.n	8009420 <vPortEnterCritical+0x3c>
 8009422:	bf00      	nop
 8009424:	20000078 	.word	0x20000078

08009428 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009428:	4b09      	ldr	r3, [pc, #36]	; (8009450 <vPortExitCritical+0x28>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	b943      	cbnz	r3, 8009440 <vPortExitCritical+0x18>
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	e7fe      	b.n	800943e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009440:	3b01      	subs	r3, #1
 8009442:	4a03      	ldr	r2, [pc, #12]	; (8009450 <vPortExitCritical+0x28>)
 8009444:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009446:	b90b      	cbnz	r3, 800944c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009448:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	20000078 	.word	0x20000078
	...

08009460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009460:	f3ef 8009 	mrs	r0, PSP
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	4b0d      	ldr	r3, [pc, #52]	; (80094a0 <pxCurrentTCBConst>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009470:	6010      	str	r0, [r2, #0]
 8009472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009476:	f04f 0050 	mov.w	r0, #80	; 0x50
 800947a:	f380 8811 	msr	BASEPRI, r0
 800947e:	f001 f8fb 	bl	800a678 <vTaskSwitchContext>
 8009482:	f04f 0000 	mov.w	r0, #0
 8009486:	f380 8811 	msr	BASEPRI, r0
 800948a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800948e:	6819      	ldr	r1, [r3, #0]
 8009490:	6808      	ldr	r0, [r1, #0]
 8009492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009496:	f380 8809 	msr	PSP, r0
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	4770      	bx	lr

080094a0 <pxCurrentTCBConst>:
 80094a0:	20002d90 	.word	0x20002d90

080094a4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094a4:	b508      	push	{r3, lr}
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094b6:	f000 ff27 	bl	800a308 <xTaskIncrementTick>
 80094ba:	b128      	cbz	r0, 80094c8 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80094c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80094c8:	2300      	movs	r3, #0
 80094ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80094ce:	bd08      	pop	{r3, pc}

080094d0 <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 80094d0:	b510      	push	{r4, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	9001      	str	r0, [sp, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80094d6:	4b46      	ldr	r3, [pc, #280]	; (80095f0 <vPortSuppressTicksAndSleep+0x120>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4298      	cmp	r0, r3
 80094dc:	d900      	bls.n	80094e0 <vPortSuppressTicksAndSleep+0x10>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80094de:	9301      	str	r3, [sp, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80094e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80094e4:	691a      	ldr	r2, [r3, #16]
 80094e6:	f022 0201 	bic.w	r2, r2, #1
 80094ea:	611a      	str	r2, [r3, #16]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80094ec:	699c      	ldr	r4, [r3, #24]
 80094ee:	9b01      	ldr	r3, [sp, #4]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	4a40      	ldr	r2, [pc, #256]	; (80095f4 <vPortSuppressTicksAndSleep+0x124>)
 80094f4:	6812      	ldr	r2, [r2, #0]
 80094f6:	fb02 4403 	mla	r4, r2, r3, r4
		if( ulReloadValue > ulStoppedTimerCompensation )
 80094fa:	4b3f      	ldr	r3, [pc, #252]	; (80095f8 <vPortSuppressTicksAndSleep+0x128>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	42a3      	cmp	r3, r4
 8009500:	d200      	bcs.n	8009504 <vPortSuppressTicksAndSleep+0x34>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8009502:	1ae4      	subs	r4, r4, r3
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8009504:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8009506:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800950a:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800950e:	f001 f9cd 	bl	800a8ac <eTaskConfirmSleepModeStatus>
 8009512:	b970      	cbnz	r0, 8009532 <vPortSuppressTicksAndSleep+0x62>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8009514:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009518:	699a      	ldr	r2, [r3, #24]
 800951a:	615a      	str	r2, [r3, #20]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800951c:	691a      	ldr	r2, [r3, #16]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	611a      	str	r2, [r3, #16]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009524:	4a33      	ldr	r2, [pc, #204]	; (80095f4 <vPortSuppressTicksAndSleep+0x124>)
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	3a01      	subs	r2, #1
 800952a:	615a      	str	r2, [r3, #20]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800952c:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800952e:	b004      	add	sp, #16
 8009530:	bd10      	pop	{r4, pc}
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8009532:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009536:	615c      	str	r4, [r3, #20]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009538:	2200      	movs	r2, #0
 800953a:	619a      	str	r2, [r3, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800953c:	691a      	ldr	r2, [r3, #16]
 800953e:	f042 0201 	orr.w	r2, r2, #1
 8009542:	611a      	str	r2, [r3, #16]
			xModifiableIdleTime = xExpectedIdleTime;
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	9303      	str	r3, [sp, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8009548:	a803      	add	r0, sp, #12
 800954a:	f7f7 fdfd 	bl	8001148 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	b123      	cbz	r3, 800955c <vPortSuppressTicksAndSleep+0x8c>
				__asm volatile( "dsb" ::: "memory" );
 8009552:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8009556:	bf30      	wfi
				__asm volatile( "isb" );
 8009558:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800955c:	a801      	add	r0, sp, #4
 800955e:	f7f7 fe15 	bl	800118c <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8009562:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8009564:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009568:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800956c:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800956e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009572:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8009576:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800957a:	2206      	movs	r2, #6
 800957c:	611a      	str	r2, [r3, #16]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009584:	d023      	beq.n	80095ce <vPortSuppressTicksAndSleep+0xfe>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8009586:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <vPortSuppressTicksAndSleep+0x124>)
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	1b1c      	subs	r4, r3, r4
 8009592:	4414      	add	r4, r2
 8009594:	3c01      	subs	r4, #1
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8009596:	4b18      	ldr	r3, [pc, #96]	; (80095f8 <vPortSuppressTicksAndSleep+0x128>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	42a3      	cmp	r3, r4
 800959c:	d801      	bhi.n	80095a2 <vPortSuppressTicksAndSleep+0xd2>
 800959e:	42a2      	cmp	r2, r4
 80095a0:	d200      	bcs.n	80095a4 <vPortSuppressTicksAndSleep+0xd4>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 80095a2:	1e54      	subs	r4, r2, #1
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 80095a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80095a8:	615c      	str	r4, [r3, #20]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80095aa:	9801      	ldr	r0, [sp, #4]
 80095ac:	3801      	subs	r0, #1
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095ae:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 80095b2:	2300      	movs	r3, #0
 80095b4:	61a3      	str	r3, [r4, #24]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80095b6:	6923      	ldr	r3, [r4, #16]
 80095b8:	f043 0301 	orr.w	r3, r3, #1
 80095bc:	6123      	str	r3, [r4, #16]
			vTaskStepTick( ulCompleteTickPeriods );
 80095be:	f000 fe89 	bl	800a2d4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80095c2:	4b0c      	ldr	r3, [pc, #48]	; (80095f4 <vPortSuppressTicksAndSleep+0x124>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	6163      	str	r3, [r4, #20]
			__asm volatile( "cpsie i" ::: "memory" );
 80095ca:	b662      	cpsie	i
	}
 80095cc:	e7af      	b.n	800952e <vPortSuppressTicksAndSleep+0x5e>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80095ce:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <vPortSuppressTicksAndSleep+0x124>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	fb03 f102 	mul.w	r1, r3, r2
 80095d8:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 80095dc:	69a3      	ldr	r3, [r4, #24]
 80095de:	1ac8      	subs	r0, r1, r3
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80095e0:	fbb0 f0f2 	udiv	r0, r0, r2
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80095e4:	fb00 2202 	mla	r2, r0, r2, r2
 80095e8:	1a5b      	subs	r3, r3, r1
 80095ea:	4413      	add	r3, r2
 80095ec:	6163      	str	r3, [r4, #20]
 80095ee:	e7de      	b.n	80095ae <vPortSuppressTicksAndSleep+0xde>
 80095f0:	20002d4c 	.word	0x20002d4c
 80095f4:	20002d48 	.word	0x20002d48
 80095f8:	20002d44 	.word	0x20002d44

080095fc <vPortSetupTimerInterrupt>:
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80095fc:	4b0f      	ldr	r3, [pc, #60]	; (800963c <vPortSetupTimerInterrupt+0x40>)
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	480f      	ldr	r0, [pc, #60]	; (8009640 <vPortSetupTimerInterrupt+0x44>)
 8009602:	fba0 1202 	umull	r1, r2, r0, r2
 8009606:	0992      	lsrs	r2, r2, #6
 8009608:	490e      	ldr	r1, [pc, #56]	; (8009644 <vPortSetupTimerInterrupt+0x48>)
 800960a:	600a      	str	r2, [r1, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800960c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009610:	fbb1 f2f2 	udiv	r2, r1, r2
 8009614:	490c      	ldr	r1, [pc, #48]	; (8009648 <vPortSetupTimerInterrupt+0x4c>)
 8009616:	600a      	str	r2, [r1, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8009618:	4a0c      	ldr	r2, [pc, #48]	; (800964c <vPortSetupTimerInterrupt+0x50>)
 800961a:	212d      	movs	r1, #45	; 0x2d
 800961c:	6011      	str	r1, [r2, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800961e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009622:	2100      	movs	r1, #0
 8009624:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009626:	6191      	str	r1, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	fba0 1303 	umull	r1, r3, r0, r3
 800962e:	099b      	lsrs	r3, r3, #6
 8009630:	3b01      	subs	r3, #1
 8009632:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009634:	2307      	movs	r3, #7
 8009636:	6113      	str	r3, [r2, #16]
}
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000070 	.word	0x20000070
 8009640:	10624dd3 	.word	0x10624dd3
 8009644:	20002d48 	.word	0x20002d48
 8009648:	20002d4c 	.word	0x20002d4c
 800964c:	20002d44 	.word	0x20002d44

08009650 <xPortStartScheduler>:
{
 8009650:	b510      	push	{r4, lr}
 8009652:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009654:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <xPortStartScheduler+0xb0>)
 8009656:	781a      	ldrb	r2, [r3, #0]
 8009658:	b2d2      	uxtb	r2, r2
 800965a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800965c:	22ff      	movs	r2, #255	; 0xff
 800965e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009668:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800966c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009670:	4a24      	ldr	r2, [pc, #144]	; (8009704 <xPortStartScheduler+0xb4>)
 8009672:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009674:	4b24      	ldr	r3, [pc, #144]	; (8009708 <xPortStartScheduler+0xb8>)
 8009676:	2207      	movs	r2, #7
 8009678:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800967a:	e009      	b.n	8009690 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 800967c:	4a22      	ldr	r2, [pc, #136]	; (8009708 <xPortStartScheduler+0xb8>)
 800967e:	6813      	ldr	r3, [r2, #0]
 8009680:	3b01      	subs	r3, #1
 8009682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009684:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009690:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009694:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009698:	d1f0      	bne.n	800967c <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800969a:	4b1b      	ldr	r3, [pc, #108]	; (8009708 <xPortStartScheduler+0xb8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d008      	beq.n	80096b4 <xPortStartScheduler+0x64>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	e7fe      	b.n	80096b2 <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096b4:	021b      	lsls	r3, r3, #8
 80096b6:	4a14      	ldr	r2, [pc, #80]	; (8009708 <xPortStartScheduler+0xb8>)
 80096b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096be:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	4a0e      	ldr	r2, [pc, #56]	; (8009700 <xPortStartScheduler+0xb0>)
 80096c6:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80096cc:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80096d0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80096d4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096d8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80096dc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80096e0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80096e4:	f7ff ff8a 	bl	80095fc <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80096e8:	2400      	movs	r4, #0
 80096ea:	4b08      	ldr	r3, [pc, #32]	; (800970c <xPortStartScheduler+0xbc>)
 80096ec:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80096ee:	f7ff fe45 	bl	800937c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80096f2:	f000 ffc1 	bl	800a678 <vTaskSwitchContext>
	prvTaskExitError();
 80096f6:	f7ff fe21 	bl	800933c <prvTaskExitError>
}
 80096fa:	4620      	mov	r0, r4
 80096fc:	b002      	add	sp, #8
 80096fe:	bd10      	pop	{r4, pc}
 8009700:	e000e400 	.word	0xe000e400
 8009704:	20002d3c 	.word	0x20002d3c
 8009708:	20002d40 	.word	0x20002d40
 800970c:	20000078 	.word	0x20000078

08009710 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009710:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009714:	2b0f      	cmp	r3, #15
 8009716:	d90f      	bls.n	8009738 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009718:	4a11      	ldr	r2, [pc, #68]	; (8009760 <vPortValidateInterruptPriority+0x50>)
 800971a:	5c9b      	ldrb	r3, [r3, r2]
 800971c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800971e:	4a11      	ldr	r2, [pc, #68]	; (8009764 <vPortValidateInterruptPriority+0x54>)
 8009720:	7812      	ldrb	r2, [r2, #0]
 8009722:	429a      	cmp	r2, r3
 8009724:	d908      	bls.n	8009738 <vPortValidateInterruptPriority+0x28>
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	e7fe      	b.n	8009736 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009738:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800973c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009744:	4a08      	ldr	r2, [pc, #32]	; (8009768 <vPortValidateInterruptPriority+0x58>)
 8009746:	6812      	ldr	r2, [r2, #0]
 8009748:	4293      	cmp	r3, r2
 800974a:	d908      	bls.n	800975e <vPortValidateInterruptPriority+0x4e>
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	e7fe      	b.n	800975c <vPortValidateInterruptPriority+0x4c>
	}
 800975e:	4770      	bx	lr
 8009760:	e000e3f0 	.word	0xe000e3f0
 8009764:	20002d3c 	.word	0x20002d3c
 8009768:	20002d40 	.word	0x20002d40

0800976c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800976c:	b510      	push	{r4, lr}
 800976e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009770:	f7ff fe38 	bl	80093e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009774:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009776:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009778:	429a      	cmp	r2, r3
 800977a:	d004      	beq.n	8009786 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800977c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800977e:	f7ff fe53 	bl	8009428 <vPortExitCritical>

	return xReturn;
}
 8009782:	4620      	mov	r0, r4
 8009784:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009786:	2401      	movs	r4, #1
 8009788:	e7f9      	b.n	800977e <prvIsQueueFull+0x12>

0800978a <prvIsQueueEmpty>:
{
 800978a:	b510      	push	{r4, lr}
 800978c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800978e:	f7ff fe29 	bl	80093e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009794:	b923      	cbnz	r3, 80097a0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8009796:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009798:	f7ff fe46 	bl	8009428 <vPortExitCritical>
}
 800979c:	4620      	mov	r0, r4
 800979e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 80097a0:	2400      	movs	r4, #0
 80097a2:	e7f9      	b.n	8009798 <prvIsQueueEmpty+0xe>

080097a4 <prvCopyDataToQueue>:
{
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	4604      	mov	r4, r0
 80097a8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097aa:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80097ae:	b95a      	cbnz	r2, 80097c8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097b0:	6803      	ldr	r3, [r0, #0]
 80097b2:	b11b      	cbz	r3, 80097bc <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80097b4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80097b6:	3601      	adds	r6, #1
 80097b8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097bc:	6880      	ldr	r0, [r0, #8]
 80097be:	f001 f8a3 	bl	800a908 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60a3      	str	r3, [r4, #8]
 80097c6:	e7f6      	b.n	80097b6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80097c8:	b96d      	cbnz	r5, 80097e6 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097ca:	6840      	ldr	r0, [r0, #4]
 80097cc:	f00c faf6 	bl	8015dbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80097d2:	6863      	ldr	r3, [r4, #4]
 80097d4:	4413      	add	r3, r2
 80097d6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097d8:	68a2      	ldr	r2, [r4, #8]
 80097da:	4293      	cmp	r3, r2
 80097dc:	d319      	bcc.n	8009812 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80097e2:	4628      	mov	r0, r5
 80097e4:	e7e7      	b.n	80097b6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80097e6:	68c0      	ldr	r0, [r0, #12]
 80097e8:	f00c fae8 	bl	8015dbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80097ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80097ee:	4251      	negs	r1, r2
 80097f0:	68e3      	ldr	r3, [r4, #12]
 80097f2:	1a9b      	subs	r3, r3, r2
 80097f4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097f6:	6822      	ldr	r2, [r4, #0]
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d202      	bcs.n	8009802 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80097fc:	68a3      	ldr	r3, [r4, #8]
 80097fe:	440b      	add	r3, r1
 8009800:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009802:	2d02      	cmp	r5, #2
 8009804:	d001      	beq.n	800980a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8009806:	2000      	movs	r0, #0
 8009808:	e7d5      	b.n	80097b6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800980a:	b126      	cbz	r6, 8009816 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800980c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800980e:	2000      	movs	r0, #0
 8009810:	e7d1      	b.n	80097b6 <prvCopyDataToQueue+0x12>
 8009812:	4628      	mov	r0, r5
 8009814:	e7cf      	b.n	80097b6 <prvCopyDataToQueue+0x12>
 8009816:	2000      	movs	r0, #0
 8009818:	e7cd      	b.n	80097b6 <prvCopyDataToQueue+0x12>

0800981a <prvCopyDataFromQueue>:
{
 800981a:	b508      	push	{r3, lr}
 800981c:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800981e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009820:	b162      	cbz	r2, 800983c <prvCopyDataFromQueue+0x22>
 8009822:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009824:	68d9      	ldr	r1, [r3, #12]
 8009826:	4411      	add	r1, r2
 8009828:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800982a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800982e:	4561      	cmp	r1, ip
 8009830:	d301      	bcc.n	8009836 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009832:	6819      	ldr	r1, [r3, #0]
 8009834:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009836:	68d9      	ldr	r1, [r3, #12]
 8009838:	f00c fac0 	bl	8015dbc <memcpy>
}
 800983c:	bd08      	pop	{r3, pc}

0800983e <prvUnlockQueue>:
{
 800983e:	b538      	push	{r3, r4, r5, lr}
 8009840:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8009842:	f7ff fdcf 	bl	80093e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009846:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800984a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800984c:	e001      	b.n	8009852 <prvUnlockQueue+0x14>
			--cTxLock;
 800984e:	3c01      	subs	r4, #1
 8009850:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009852:	2c00      	cmp	r4, #0
 8009854:	dd0a      	ble.n	800986c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009856:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009858:	b143      	cbz	r3, 800986c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800985a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800985e:	f000 ff89 	bl	800a774 <xTaskRemoveFromEventList>
 8009862:	2800      	cmp	r0, #0
 8009864:	d0f3      	beq.n	800984e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8009866:	f001 f81b 	bl	800a8a0 <vTaskMissedYield>
 800986a:	e7f0      	b.n	800984e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800986c:	23ff      	movs	r3, #255	; 0xff
 800986e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009872:	f7ff fdd9 	bl	8009428 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009876:	f7ff fdb5 	bl	80093e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800987a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800987e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009880:	e001      	b.n	8009886 <prvUnlockQueue+0x48>
				--cRxLock;
 8009882:	3c01      	subs	r4, #1
 8009884:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009886:	2c00      	cmp	r4, #0
 8009888:	dd0a      	ble.n	80098a0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800988a:	692b      	ldr	r3, [r5, #16]
 800988c:	b143      	cbz	r3, 80098a0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800988e:	f105 0010 	add.w	r0, r5, #16
 8009892:	f000 ff6f 	bl	800a774 <xTaskRemoveFromEventList>
 8009896:	2800      	cmp	r0, #0
 8009898:	d0f3      	beq.n	8009882 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800989a:	f001 f801 	bl	800a8a0 <vTaskMissedYield>
 800989e:	e7f0      	b.n	8009882 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 80098a0:	23ff      	movs	r3, #255	; 0xff
 80098a2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80098a6:	f7ff fdbf 	bl	8009428 <vPortExitCritical>
}
 80098aa:	bd38      	pop	{r3, r4, r5, pc}

080098ac <xQueueGenericReset>:
{
 80098ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80098ae:	b1e0      	cbz	r0, 80098ea <xQueueGenericReset+0x3e>
 80098b0:	460d      	mov	r5, r1
 80098b2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80098b4:	f7ff fd96 	bl	80093e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80098bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80098be:	fb01 3002 	mla	r0, r1, r2, r3
 80098c2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098c4:	2000      	movs	r0, #0
 80098c6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098c8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098ca:	3a01      	subs	r2, #1
 80098cc:	fb02 3301 	mla	r3, r2, r1, r3
 80098d0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098d2:	23ff      	movs	r3, #255	; 0xff
 80098d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80098dc:	b9fd      	cbnz	r5, 800991e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098de:	6923      	ldr	r3, [r4, #16]
 80098e0:	b963      	cbnz	r3, 80098fc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80098e2:	f7ff fda1 	bl	8009428 <vPortExitCritical>
}
 80098e6:	2001      	movs	r0, #1
 80098e8:	bd38      	pop	{r3, r4, r5, pc}
 80098ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80098fa:	e7fe      	b.n	80098fa <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098fc:	f104 0010 	add.w	r0, r4, #16
 8009900:	f000 ff38 	bl	800a774 <xTaskRemoveFromEventList>
 8009904:	2800      	cmp	r0, #0
 8009906:	d0ec      	beq.n	80098e2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8009908:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800990c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009910:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	e7e1      	b.n	80098e2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800991e:	f104 0010 	add.w	r0, r4, #16
 8009922:	f7ff fcc5 	bl	80092b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009926:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800992a:	f7ff fcc1 	bl	80092b0 <vListInitialise>
 800992e:	e7d8      	b.n	80098e2 <xQueueGenericReset+0x36>

08009930 <prvInitialiseNewQueue>:
{
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	461d      	mov	r5, r3
 8009934:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009936:	460b      	mov	r3, r1
 8009938:	b949      	cbnz	r1, 800994e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800993a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800993c:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800993e:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009940:	2101      	movs	r1, #1
 8009942:	4620      	mov	r0, r4
 8009944:	f7ff ffb2 	bl	80098ac <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009948:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800994c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800994e:	6022      	str	r2, [r4, #0]
 8009950:	e7f4      	b.n	800993c <prvInitialiseNewQueue+0xc>

08009952 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009952:	b940      	cbnz	r0, 8009966 <xQueueGenericCreateStatic+0x14>
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	e7fe      	b.n	8009964 <xQueueGenericCreateStatic+0x12>
	{
 8009966:	b510      	push	{r4, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	461c      	mov	r4, r3
 800996c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800996e:	b153      	cbz	r3, 8009986 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009970:	b192      	cbz	r2, 8009998 <xQueueGenericCreateStatic+0x46>
 8009972:	b989      	cbnz	r1, 8009998 <xQueueGenericCreateStatic+0x46>
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	e7fe      	b.n	8009984 <xQueueGenericCreateStatic+0x32>
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009996:	e7fe      	b.n	8009996 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009998:	b16a      	cbz	r2, 80099b6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800999a:	2350      	movs	r3, #80	; 0x50
 800999c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	2b50      	cmp	r3, #80	; 0x50
 80099a2:	d013      	beq.n	80099cc <xQueueGenericCreateStatic+0x7a>
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	e7fe      	b.n	80099b4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099b6:	2900      	cmp	r1, #0
 80099b8:	d0ef      	beq.n	800999a <xQueueGenericCreateStatic+0x48>
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	e7fe      	b.n	80099ca <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099cc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80099d4:	9400      	str	r4, [sp, #0]
 80099d6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80099da:	4660      	mov	r0, ip
 80099dc:	f7ff ffa8 	bl	8009930 <prvInitialiseNewQueue>
	}
 80099e0:	4620      	mov	r0, r4
 80099e2:	b004      	add	sp, #16
 80099e4:	bd10      	pop	{r4, pc}

080099e6 <xQueueGenericSend>:
{
 80099e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099e8:	b085      	sub	sp, #20
 80099ea:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80099ec:	b188      	cbz	r0, 8009a12 <xQueueGenericSend+0x2c>
 80099ee:	460f      	mov	r7, r1
 80099f0:	461d      	mov	r5, r3
 80099f2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f4:	b1b1      	cbz	r1, 8009a24 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099f6:	2d02      	cmp	r5, #2
 80099f8:	d120      	bne.n	8009a3c <xQueueGenericSend+0x56>
 80099fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d01d      	beq.n	8009a3c <xQueueGenericSend+0x56>
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	e7fe      	b.n	8009a10 <xQueueGenericSend+0x2a>
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009a22:	e7fe      	b.n	8009a22 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a24:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d0e5      	beq.n	80099f6 <xQueueGenericSend+0x10>
 8009a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2e:	f383 8811 	msr	BASEPRI, r3
 8009a32:	f3bf 8f6f 	isb	sy
 8009a36:	f3bf 8f4f 	dsb	sy
 8009a3a:	e7fe      	b.n	8009a3a <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a3c:	f000 ff54 	bl	800a8e8 <xTaskGetSchedulerState>
 8009a40:	4606      	mov	r6, r0
 8009a42:	b958      	cbnz	r0, 8009a5c <xQueueGenericSend+0x76>
 8009a44:	9b01      	ldr	r3, [sp, #4]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d048      	beq.n	8009adc <xQueueGenericSend+0xf6>
 8009a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	e7fe      	b.n	8009a5a <xQueueGenericSend+0x74>
 8009a5c:	2600      	movs	r6, #0
 8009a5e:	e03d      	b.n	8009adc <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a60:	462a      	mov	r2, r5
 8009a62:	4639      	mov	r1, r7
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff fe9d 	bl	80097a4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a6c:	b97b      	cbnz	r3, 8009a8e <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8009a6e:	b148      	cbz	r0, 8009a84 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8009a70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009a84:	f7ff fcd0 	bl	8009428 <vPortExitCritical>
				return pdPASS;
 8009a88:	2001      	movs	r0, #1
}
 8009a8a:	b005      	add	sp, #20
 8009a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a92:	f000 fe6f 	bl	800a774 <xTaskRemoveFromEventList>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d0f4      	beq.n	8009a84 <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8009a9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	e7e9      	b.n	8009a84 <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8009ab0:	f7ff fcba 	bl	8009428 <vPortExitCritical>
					return errQUEUE_FULL;
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e7e8      	b.n	8009a8a <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ab8:	a802      	add	r0, sp, #8
 8009aba:	f000 fea3 	bl	800a804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009abe:	2601      	movs	r6, #1
 8009ac0:	e019      	b.n	8009af6 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009ac8:	e021      	b.n	8009b0e <xQueueGenericSend+0x128>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ad0:	e023      	b.n	8009b1a <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f7ff feb3 	bl	800983e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ad8:	f000 fca2 	bl	800a420 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009adc:	f7ff fc82 	bl	80093e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ae0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d3bb      	bcc.n	8009a60 <xQueueGenericSend+0x7a>
 8009ae8:	2d02      	cmp	r5, #2
 8009aea:	d0b9      	beq.n	8009a60 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aec:	9b01      	ldr	r3, [sp, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0de      	beq.n	8009ab0 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8009af2:	2e00      	cmp	r6, #0
 8009af4:	d0e0      	beq.n	8009ab8 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8009af6:	f7ff fc97 	bl	8009428 <vPortExitCritical>
		vTaskSuspendAll();
 8009afa:	f000 fbdd 	bl	800a2b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009afe:	f7ff fc71 	bl	80093e4 <vPortEnterCritical>
 8009b02:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8009b06:	b252      	sxtb	r2, r2
 8009b08:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b0c:	d0d9      	beq.n	8009ac2 <xQueueGenericSend+0xdc>
 8009b0e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8009b12:	b252      	sxtb	r2, r2
 8009b14:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b18:	d0d7      	beq.n	8009aca <xQueueGenericSend+0xe4>
 8009b1a:	f7ff fc85 	bl	8009428 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b1e:	a901      	add	r1, sp, #4
 8009b20:	a802      	add	r0, sp, #8
 8009b22:	f000 fe7b 	bl	800a81c <xTaskCheckForTimeOut>
 8009b26:	b9d8      	cbnz	r0, 8009b60 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff fe1f 	bl	800976c <prvIsQueueFull>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d0cf      	beq.n	8009ad2 <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b32:	9901      	ldr	r1, [sp, #4]
 8009b34:	f104 0010 	add.w	r0, r4, #16
 8009b38:	f000 fde8 	bl	800a70c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f7ff fe7e 	bl	800983e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b42:	f000 fc6d 	bl	800a420 <xTaskResumeAll>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d1c8      	bne.n	8009adc <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8009b4a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b52:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	e7bd      	b.n	8009adc <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8009b60:	4620      	mov	r0, r4
 8009b62:	f7ff fe6c 	bl	800983e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b66:	f000 fc5b 	bl	800a420 <xTaskResumeAll>
			return errQUEUE_FULL;
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e78d      	b.n	8009a8a <xQueueGenericSend+0xa4>

08009b6e <xQueueGenericSendFromISR>:
{
 8009b6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009b72:	b190      	cbz	r0, 8009b9a <xQueueGenericSendFromISR+0x2c>
 8009b74:	460f      	mov	r7, r1
 8009b76:	4616      	mov	r6, r2
 8009b78:	461c      	mov	r4, r3
 8009b7a:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b7c:	b1b1      	cbz	r1, 8009bac <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b7e:	2c02      	cmp	r4, #2
 8009b80:	d120      	bne.n	8009bc4 <xQueueGenericSendFromISR+0x56>
 8009b82:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d01d      	beq.n	8009bc4 <xQueueGenericSendFromISR+0x56>
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	e7fe      	b.n	8009b98 <xQueueGenericSendFromISR+0x2a>
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009baa:	e7fe      	b.n	8009baa <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0e5      	beq.n	8009b7e <xQueueGenericSendFromISR+0x10>
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	e7fe      	b.n	8009bc2 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bc4:	f7ff fda4 	bl	8009710 <vPortValidateInterruptPriority>
	__asm volatile
 8009bc8:	f3ef 8911 	mrs	r9, BASEPRI
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bdc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8009bde:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d306      	bcc.n	8009bf2 <xQueueGenericSendFromISR+0x84>
 8009be4:	2c02      	cmp	r4, #2
 8009be6:	d004      	beq.n	8009bf2 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009be8:	2000      	movs	r0, #0
	__asm volatile
 8009bea:	f389 8811 	msr	BASEPRI, r9
}
 8009bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8009bf2:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8009bf6:	fa4f f888 	sxtb.w	r8, r8
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f7ff fdd0 	bl	80097a4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8009c04:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009c08:	d006      	beq.n	8009c18 <xQueueGenericSendFromISR+0xaa>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c0a:	f108 0301 	add.w	r3, r8, #1
 8009c0e:	b25b      	sxtb	r3, r3
 8009c10:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8009c14:	2001      	movs	r0, #1
 8009c16:	e7e8      	b.n	8009bea <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c18:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c1a:	b90b      	cbnz	r3, 8009c20 <xQueueGenericSendFromISR+0xb2>
			xReturn = pdPASS;
 8009c1c:	2001      	movs	r0, #1
 8009c1e:	e7e4      	b.n	8009bea <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c20:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009c24:	f000 fda6 	bl	800a774 <xTaskRemoveFromEventList>
 8009c28:	b118      	cbz	r0, 8009c32 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8009c2a:	b126      	cbz	r6, 8009c36 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c2c:	2001      	movs	r0, #1
 8009c2e:	6030      	str	r0, [r6, #0]
 8009c30:	e7db      	b.n	8009bea <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 8009c32:	2001      	movs	r0, #1
 8009c34:	e7d9      	b.n	8009bea <xQueueGenericSendFromISR+0x7c>
 8009c36:	2001      	movs	r0, #1
 8009c38:	e7d7      	b.n	8009bea <xQueueGenericSendFromISR+0x7c>

08009c3a <xQueueReceive>:
{
 8009c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009c40:	b190      	cbz	r0, 8009c68 <xQueueReceive+0x2e>
 8009c42:	460f      	mov	r7, r1
 8009c44:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c46:	b1c1      	cbz	r1, 8009c7a <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c48:	f000 fe4e 	bl	800a8e8 <xTaskGetSchedulerState>
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	bb00      	cbnz	r0, 8009c92 <xQueueReceive+0x58>
 8009c50:	9b01      	ldr	r3, [sp, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d05e      	beq.n	8009d14 <xQueueReceive+0xda>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	e7fe      	b.n	8009c66 <xQueueReceive+0x2c>
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009c78:	e7fe      	b.n	8009c78 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0e3      	beq.n	8009c48 <xQueueReceive+0xe>
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	e7fe      	b.n	8009c90 <xQueueReceive+0x56>
 8009c92:	2600      	movs	r6, #0
 8009c94:	e03e      	b.n	8009d14 <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c96:	4639      	mov	r1, r7
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f7ff fdbe 	bl	800981a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c9e:	3d01      	subs	r5, #1
 8009ca0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ca2:	6923      	ldr	r3, [r4, #16]
 8009ca4:	b923      	cbnz	r3, 8009cb0 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8009ca6:	f7ff fbbf 	bl	8009428 <vPortExitCritical>
				return pdPASS;
 8009caa:	2001      	movs	r0, #1
}
 8009cac:	b005      	add	sp, #20
 8009cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cb0:	f104 0010 	add.w	r0, r4, #16
 8009cb4:	f000 fd5e 	bl	800a774 <xTaskRemoveFromEventList>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d0f4      	beq.n	8009ca6 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8009cbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	f3bf 8f6f 	isb	sy
 8009cd0:	e7e9      	b.n	8009ca6 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009cd2:	f7ff fba9 	bl	8009428 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8009cd6:	2000      	movs	r0, #0
 8009cd8:	e7e8      	b.n	8009cac <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cda:	a802      	add	r0, sp, #8
 8009cdc:	f000 fd92 	bl	800a804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ce0:	2601      	movs	r6, #1
 8009ce2:	e021      	b.n	8009d28 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009cea:	e029      	b.n	8009d40 <xQueueReceive+0x106>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cf2:	e02b      	b.n	8009d4c <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f7ff fda2 	bl	800983e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cfa:	f000 fb91 	bl	800a420 <xTaskResumeAll>
 8009cfe:	e009      	b.n	8009d14 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8009d00:	4620      	mov	r0, r4
 8009d02:	f7ff fd9c 	bl	800983e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d06:	f000 fb8b 	bl	800a420 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff fd3d 	bl	800978a <prvIsQueueEmpty>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d13f      	bne.n	8009d94 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8009d14:	f7ff fb66 	bl	80093e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d18:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d1a:	2d00      	cmp	r5, #0
 8009d1c:	d1bb      	bne.n	8009c96 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d1e:	9b01      	ldr	r3, [sp, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d0d6      	beq.n	8009cd2 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 8009d24:	2e00      	cmp	r6, #0
 8009d26:	d0d8      	beq.n	8009cda <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 8009d28:	f7ff fb7e 	bl	8009428 <vPortExitCritical>
		vTaskSuspendAll();
 8009d2c:	f000 fac4 	bl	800a2b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d30:	f7ff fb58 	bl	80093e4 <vPortEnterCritical>
 8009d34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009d38:	b25b      	sxtb	r3, r3
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d0d1      	beq.n	8009ce4 <xQueueReceive+0xaa>
 8009d40:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4a:	d0cf      	beq.n	8009cec <xQueueReceive+0xb2>
 8009d4c:	f7ff fb6c 	bl	8009428 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d50:	a901      	add	r1, sp, #4
 8009d52:	a802      	add	r0, sp, #8
 8009d54:	f000 fd62 	bl	800a81c <xTaskCheckForTimeOut>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d1d1      	bne.n	8009d00 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7ff fd14 	bl	800978a <prvIsQueueEmpty>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d0c6      	beq.n	8009cf4 <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d66:	9901      	ldr	r1, [sp, #4]
 8009d68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009d6c:	f000 fcce 	bl	800a70c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d70:	4620      	mov	r0, r4
 8009d72:	f7ff fd64 	bl	800983e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d76:	f000 fb53 	bl	800a420 <xTaskResumeAll>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	d1ca      	bne.n	8009d14 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8009d7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d86:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	e7bf      	b.n	8009d14 <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 8009d94:	2000      	movs	r0, #0
 8009d96:	e789      	b.n	8009cac <xQueueReceive+0x72>

08009d98 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d98:	2300      	movs	r3, #0
 8009d9a:	2b07      	cmp	r3, #7
 8009d9c:	d80c      	bhi.n	8009db8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d9e:	4a07      	ldr	r2, [pc, #28]	; (8009dbc <vQueueAddToRegistry+0x24>)
 8009da0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009da4:	b10a      	cbz	r2, 8009daa <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009da6:	3301      	adds	r3, #1
 8009da8:	e7f7      	b.n	8009d9a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009daa:	4a04      	ldr	r2, [pc, #16]	; (8009dbc <vQueueAddToRegistry+0x24>)
 8009dac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009db0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009db4:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009db6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	20002d50 	.word	0x20002d50

08009dc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009dc8:	f7ff fb0c 	bl	80093e4 <vPortEnterCritical>
 8009dcc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009dd0:	b25b      	sxtb	r3, r3
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd6:	d00d      	beq.n	8009df4 <vQueueWaitForMessageRestricted+0x34>
 8009dd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009ddc:	b25b      	sxtb	r3, r3
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de2:	d00b      	beq.n	8009dfc <vQueueWaitForMessageRestricted+0x3c>
 8009de4:	f7ff fb20 	bl	8009428 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009de8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009dea:	b15b      	cbz	r3, 8009e04 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009dec:	4620      	mov	r0, r4
 8009dee:	f7ff fd26 	bl	800983e <prvUnlockQueue>
	}
 8009df2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 8009df4:	2300      	movs	r3, #0
 8009df6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009dfa:	e7ed      	b.n	8009dd8 <vQueueWaitForMessageRestricted+0x18>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e02:	e7ef      	b.n	8009de4 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e04:	4632      	mov	r2, r6
 8009e06:	4629      	mov	r1, r5
 8009e08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009e0c:	f000 fc96 	bl	800a73c <vTaskPlaceOnEventListRestricted>
 8009e10:	e7ec      	b.n	8009dec <vQueueWaitForMessageRestricted+0x2c>
	...

08009e14 <prvGetExpectedIdleTime>:
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <prvGetExpectedIdleTime+0x2c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	b103      	cbz	r3, 8009e1c <prvGetExpectedIdleTime+0x8>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8009e1a:	2301      	movs	r3, #1
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8009e1c:	4a09      	ldr	r2, [pc, #36]	; (8009e44 <prvGetExpectedIdleTime+0x30>)
 8009e1e:	6812      	ldr	r2, [r2, #0]
 8009e20:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8009e22:	b950      	cbnz	r0, 8009e3a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8009e24:	4a08      	ldr	r2, [pc, #32]	; (8009e48 <prvGetExpectedIdleTime+0x34>)
 8009e26:	6812      	ldr	r2, [r2, #0]
 8009e28:	2a01      	cmp	r2, #1
 8009e2a:	d807      	bhi.n	8009e3c <prvGetExpectedIdleTime+0x28>
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8009e2c:	b933      	cbnz	r3, 8009e3c <prvGetExpectedIdleTime+0x28>
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8009e2e:	4b07      	ldr	r3, [pc, #28]	; (8009e4c <prvGetExpectedIdleTime+0x38>)
 8009e30:	6818      	ldr	r0, [r3, #0]
 8009e32:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <prvGetExpectedIdleTime+0x3c>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	1ac0      	subs	r0, r0, r3
 8009e38:	4770      	bx	lr
			xReturn = 0;
 8009e3a:	2000      	movs	r0, #0
		}

		return xReturn;
	}
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20003210 	.word	0x20003210
 8009e44:	20002d90 	.word	0x20002d90
 8009e48:	20002d9c 	.word	0x20002d9c
 8009e4c:	20003240 	.word	0x20003240
 8009e50:	20003288 	.word	0x20003288

08009e54 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e54:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <prvResetNextTaskUnblockTime+0x24>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	b923      	cbnz	r3, 8009e66 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e5c:	4b07      	ldr	r3, [pc, #28]	; (8009e7c <prvResetNextTaskUnblockTime+0x28>)
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	601a      	str	r2, [r3, #0]
 8009e64:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e66:	4b04      	ldr	r3, [pc, #16]	; (8009e78 <prvResetNextTaskUnblockTime+0x24>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	4b02      	ldr	r3, [pc, #8]	; (8009e7c <prvResetNextTaskUnblockTime+0x28>)
 8009e72:	601a      	str	r2, [r3, #0]
	}
}
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	20002d94 	.word	0x20002d94
 8009e7c:	20003240 	.word	0x20003240

08009e80 <prvInitialiseNewTask>:
{
 8009e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e84:	4680      	mov	r8, r0
 8009e86:	460d      	mov	r5, r1
 8009e88:	4617      	mov	r7, r2
 8009e8a:	4699      	mov	r9, r3
 8009e8c:	9e08      	ldr	r6, [sp, #32]
 8009e8e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009e92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e94:	0092      	lsls	r2, r2, #2
 8009e96:	21a5      	movs	r1, #165	; 0xa5
 8009e98:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009e9a:	f00b ff9d 	bl	8015dd8 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ea0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 8009ea4:	3a01      	subs	r2, #1
 8009ea6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009eaa:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 8009eae:	b3b5      	cbz	r5, 8009f1e <prvInitialiseNewTask+0x9e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009eb0:	f04f 0c00 	mov.w	ip, #0
 8009eb4:	f1bc 0f0f 	cmp.w	ip, #15
 8009eb8:	d80b      	bhi.n	8009ed2 <prvInitialiseNewTask+0x52>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009eba:	f815 200c 	ldrb.w	r2, [r5, ip]
 8009ebe:	eb04 030c 	add.w	r3, r4, ip
 8009ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8009ec6:	f815 300c 	ldrb.w	r3, [r5, ip]
 8009eca:	b113      	cbz	r3, 8009ed2 <prvInitialiseNewTask+0x52>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ecc:	f10c 0c01 	add.w	ip, ip, #1
 8009ed0:	e7f0      	b.n	8009eb4 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ed8:	2e37      	cmp	r6, #55	; 0x37
 8009eda:	d900      	bls.n	8009ede <prvInitialiseNewTask+0x5e>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009edc:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009ede:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8009ee0:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ee2:	2500      	movs	r5, #0
 8009ee4:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ee6:	1d20      	adds	r0, r4, #4
 8009ee8:	f7ff f9ed 	bl	80092c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009eec:	f104 0018 	add.w	r0, r4, #24
 8009ef0:	f7ff f9e9 	bl	80092c6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ef4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef6:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8009efa:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009efc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009efe:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f00:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f04:	464a      	mov	r2, r9
 8009f06:	4641      	mov	r1, r8
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff fa47 	bl	800939c <pxPortInitialiseStack>
 8009f0e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8009f10:	f1ba 0f00 	cmp.w	sl, #0
 8009f14:	d001      	beq.n	8009f1a <prvInitialiseNewTask+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f16:	f8ca 4000 	str.w	r4, [sl]
}
 8009f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8009f24:	e7d8      	b.n	8009ed8 <prvInitialiseNewTask+0x58>
	...

08009f28 <prvInitialiseTaskLists>:
{
 8009f28:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f2a:	2400      	movs	r4, #0
 8009f2c:	e007      	b.n	8009f3e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f2e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009f32:	0093      	lsls	r3, r2, #2
 8009f34:	480e      	ldr	r0, [pc, #56]	; (8009f70 <prvInitialiseTaskLists+0x48>)
 8009f36:	4418      	add	r0, r3
 8009f38:	f7ff f9ba 	bl	80092b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f3c:	3401      	adds	r4, #1
 8009f3e:	2c37      	cmp	r4, #55	; 0x37
 8009f40:	d9f5      	bls.n	8009f2e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8009f42:	4d0c      	ldr	r5, [pc, #48]	; (8009f74 <prvInitialiseTaskLists+0x4c>)
 8009f44:	4628      	mov	r0, r5
 8009f46:	f7ff f9b3 	bl	80092b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f4a:	4c0b      	ldr	r4, [pc, #44]	; (8009f78 <prvInitialiseTaskLists+0x50>)
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f7ff f9af 	bl	80092b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f52:	480a      	ldr	r0, [pc, #40]	; (8009f7c <prvInitialiseTaskLists+0x54>)
 8009f54:	f7ff f9ac 	bl	80092b0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009f58:	4809      	ldr	r0, [pc, #36]	; (8009f80 <prvInitialiseTaskLists+0x58>)
 8009f5a:	f7ff f9a9 	bl	80092b0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009f5e:	4809      	ldr	r0, [pc, #36]	; (8009f84 <prvInitialiseTaskLists+0x5c>)
 8009f60:	f7ff f9a6 	bl	80092b0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f64:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <prvInitialiseTaskLists+0x60>)
 8009f66:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f68:	4b08      	ldr	r3, [pc, #32]	; (8009f8c <prvInitialiseTaskLists+0x64>)
 8009f6a:	601c      	str	r4, [r3, #0]
}
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
 8009f6e:	bf00      	nop
 8009f70:	20002d9c 	.word	0x20002d9c
 8009f74:	20003214 	.word	0x20003214
 8009f78:	20003228 	.word	0x20003228
 8009f7c:	20003248 	.word	0x20003248
 8009f80:	20003274 	.word	0x20003274
 8009f84:	20003260 	.word	0x20003260
 8009f88:	20002d94 	.word	0x20002d94
 8009f8c:	20002d98 	.word	0x20002d98

08009f90 <prvAddNewTaskToReadyList>:
{
 8009f90:	b510      	push	{r4, lr}
 8009f92:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009f94:	f7ff fa26 	bl	80093e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009f98:	4a22      	ldr	r2, [pc, #136]	; (800a024 <prvAddNewTaskToReadyList+0x94>)
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009fa0:	4b21      	ldr	r3, [pc, #132]	; (800a028 <prvAddNewTaskToReadyList+0x98>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	b15b      	cbz	r3, 8009fbe <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009fa6:	4b21      	ldr	r3, [pc, #132]	; (800a02c <prvAddNewTaskToReadyList+0x9c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	b96b      	cbnz	r3, 8009fc8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fac:	4b1e      	ldr	r3, [pc, #120]	; (800a028 <prvAddNewTaskToReadyList+0x98>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d807      	bhi.n	8009fc8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009fb8:	4b1b      	ldr	r3, [pc, #108]	; (800a028 <prvAddNewTaskToReadyList+0x98>)
 8009fba:	601c      	str	r4, [r3, #0]
 8009fbc:	e004      	b.n	8009fc8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8009fbe:	4b1a      	ldr	r3, [pc, #104]	; (800a028 <prvAddNewTaskToReadyList+0x98>)
 8009fc0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d029      	beq.n	800a01c <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 8009fc8:	4a19      	ldr	r2, [pc, #100]	; (800a030 <prvAddNewTaskToReadyList+0xa0>)
 8009fca:	6813      	ldr	r3, [r2, #0]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009fd0:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009fd2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <prvAddNewTaskToReadyList+0xa4>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4298      	cmp	r0, r3
 8009fda:	d901      	bls.n	8009fe0 <prvAddNewTaskToReadyList+0x50>
 8009fdc:	4b15      	ldr	r3, [pc, #84]	; (800a034 <prvAddNewTaskToReadyList+0xa4>)
 8009fde:	6018      	str	r0, [r3, #0]
 8009fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009fe4:	1d21      	adds	r1, r4, #4
 8009fe6:	4b14      	ldr	r3, [pc, #80]	; (800a038 <prvAddNewTaskToReadyList+0xa8>)
 8009fe8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fec:	f7ff f96e 	bl	80092cc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009ff0:	f7ff fa1a 	bl	8009428 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009ff4:	4b0d      	ldr	r3, [pc, #52]	; (800a02c <prvAddNewTaskToReadyList+0x9c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	b17b      	cbz	r3, 800a01a <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ffa:	4b0b      	ldr	r3, [pc, #44]	; (800a028 <prvAddNewTaskToReadyList+0x98>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a000:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a002:	429a      	cmp	r2, r3
 800a004:	d209      	bcs.n	800a01a <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800a006:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	f3bf 8f6f 	isb	sy
}
 800a01a:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800a01c:	f7ff ff84 	bl	8009f28 <prvInitialiseTaskLists>
 800a020:	e7d2      	b.n	8009fc8 <prvAddNewTaskToReadyList+0x38>
 800a022:	bf00      	nop
 800a024:	200031fc 	.word	0x200031fc
 800a028:	20002d90 	.word	0x20002d90
 800a02c:	2000325c 	.word	0x2000325c
 800a030:	2000320c 	.word	0x2000320c
 800a034:	20003210 	.word	0x20003210
 800a038:	20002d9c 	.word	0x20002d9c

0800a03c <prvDeleteTCB>:
	{
 800a03c:	b510      	push	{r4, lr}
 800a03e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a040:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800a044:	b163      	cbz	r3, 800a060 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a046:	2b01      	cmp	r3, #1
 800a048:	d011      	beq.n	800a06e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d00e      	beq.n	800a06c <prvDeleteTCB+0x30>
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	e7fe      	b.n	800a05e <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800a060:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800a062:	f7ff f8ed 	bl	8009240 <vPortFree>
				vPortFree( pxTCB );
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff f8ea 	bl	8009240 <vPortFree>
	}
 800a06c:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800a06e:	f7ff f8e7 	bl	8009240 <vPortFree>
 800a072:	e7fb      	b.n	800a06c <prvDeleteTCB+0x30>

0800a074 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a074:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <prvCheckTasksWaitingTermination+0x40>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	b1d3      	cbz	r3, 800a0b0 <prvCheckTasksWaitingTermination+0x3c>
{
 800a07a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800a07c:	f7ff f9b2 	bl	80093e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a080:	4b0d      	ldr	r3, [pc, #52]	; (800a0b8 <prvCheckTasksWaitingTermination+0x44>)
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a086:	1d20      	adds	r0, r4, #4
 800a088:	f7ff f944 	bl	8009314 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a08c:	4a0b      	ldr	r2, [pc, #44]	; (800a0bc <prvCheckTasksWaitingTermination+0x48>)
 800a08e:	6813      	ldr	r3, [r2, #0]
 800a090:	3b01      	subs	r3, #1
 800a092:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a094:	4a07      	ldr	r2, [pc, #28]	; (800a0b4 <prvCheckTasksWaitingTermination+0x40>)
 800a096:	6813      	ldr	r3, [r2, #0]
 800a098:	3b01      	subs	r3, #1
 800a09a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800a09c:	f7ff f9c4 	bl	8009428 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f7ff ffcb 	bl	800a03c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0a6:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <prvCheckTasksWaitingTermination+0x40>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1e6      	bne.n	800a07c <prvCheckTasksWaitingTermination+0x8>
}
 800a0ae:	bd10      	pop	{r4, pc}
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	20003200 	.word	0x20003200
 800a0b8:	20003274 	.word	0x20003274
 800a0bc:	200031fc 	.word	0x200031fc

0800a0c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0c6:	4b17      	ldr	r3, [pc, #92]	; (800a124 <prvAddCurrentTaskToDelayedList+0x64>)
 800a0c8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ca:	4b17      	ldr	r3, [pc, #92]	; (800a128 <prvAddCurrentTaskToDelayedList+0x68>)
 800a0cc:	6818      	ldr	r0, [r3, #0]
 800a0ce:	3004      	adds	r0, #4
 800a0d0:	f7ff f920 	bl	8009314 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a0d8:	d00d      	beq.n	800a0f6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0da:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0dc:	4b12      	ldr	r3, [pc, #72]	; (800a128 <prvAddCurrentTaskToDelayedList+0x68>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800a0e2:	42a6      	cmp	r6, r4
 800a0e4:	d910      	bls.n	800a108 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0e6:	4b11      	ldr	r3, [pc, #68]	; (800a12c <prvAddCurrentTaskToDelayedList+0x6c>)
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	4b0f      	ldr	r3, [pc, #60]	; (800a128 <prvAddCurrentTaskToDelayedList+0x68>)
 800a0ec:	6819      	ldr	r1, [r3, #0]
 800a0ee:	3104      	adds	r1, #4
 800a0f0:	f7ff f8f7 	bl	80092e2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0f4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0f6:	2d00      	cmp	r5, #0
 800a0f8:	d0ef      	beq.n	800a0da <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0fa:	4b0b      	ldr	r3, [pc, #44]	; (800a128 <prvAddCurrentTaskToDelayedList+0x68>)
 800a0fc:	6819      	ldr	r1, [r3, #0]
 800a0fe:	3104      	adds	r1, #4
 800a100:	480b      	ldr	r0, [pc, #44]	; (800a130 <prvAddCurrentTaskToDelayedList+0x70>)
 800a102:	f7ff f8e3 	bl	80092cc <vListInsertEnd>
 800a106:	e7f5      	b.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <prvAddCurrentTaskToDelayedList+0x74>)
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	4b06      	ldr	r3, [pc, #24]	; (800a128 <prvAddCurrentTaskToDelayedList+0x68>)
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	3104      	adds	r1, #4
 800a112:	f7ff f8e6 	bl	80092e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a116:	4b08      	ldr	r3, [pc, #32]	; (800a138 <prvAddCurrentTaskToDelayedList+0x78>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	42a3      	cmp	r3, r4
 800a11c:	d9ea      	bls.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800a11e:	4b06      	ldr	r3, [pc, #24]	; (800a138 <prvAddCurrentTaskToDelayedList+0x78>)
 800a120:	601c      	str	r4, [r3, #0]
}
 800a122:	e7e7      	b.n	800a0f4 <prvAddCurrentTaskToDelayedList+0x34>
 800a124:	20003288 	.word	0x20003288
 800a128:	20002d90 	.word	0x20002d90
 800a12c:	20002d98 	.word	0x20002d98
 800a130:	20003260 	.word	0x20003260
 800a134:	20002d94 	.word	0x20002d94
 800a138:	20003240 	.word	0x20003240

0800a13c <xTaskCreateStatic>:
	{
 800a13c:	b530      	push	{r4, r5, lr}
 800a13e:	b087      	sub	sp, #28
 800a140:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800a142:	b17c      	cbz	r4, 800a164 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a144:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a146:	b1b5      	cbz	r5, 800a176 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800a148:	255c      	movs	r5, #92	; 0x5c
 800a14a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a14c:	9d04      	ldr	r5, [sp, #16]
 800a14e:	2d5c      	cmp	r5, #92	; 0x5c
 800a150:	d01a      	beq.n	800a188 <xTaskCreateStatic+0x4c>
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	e7fe      	b.n	800a162 <xTaskCreateStatic+0x26>
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800a174:	e7fe      	b.n	800a174 <xTaskCreateStatic+0x38>
 800a176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17a:	f383 8811 	msr	BASEPRI, r3
 800a17e:	f3bf 8f6f 	isb	sy
 800a182:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800a186:	e7fe      	b.n	800a186 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a188:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a18a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a18c:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a18e:	2402      	movs	r4, #2
 800a190:	f885 4059 	strb.w	r4, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a194:	2400      	movs	r4, #0
 800a196:	9403      	str	r4, [sp, #12]
 800a198:	9502      	str	r5, [sp, #8]
 800a19a:	ac05      	add	r4, sp, #20
 800a19c:	9401      	str	r4, [sp, #4]
 800a19e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1a0:	9400      	str	r4, [sp, #0]
 800a1a2:	f7ff fe6d 	bl	8009e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1a6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a1a8:	f7ff fef2 	bl	8009f90 <prvAddNewTaskToReadyList>
	}
 800a1ac:	9805      	ldr	r0, [sp, #20]
 800a1ae:	b007      	add	sp, #28
 800a1b0:	bd30      	pop	{r4, r5, pc}

0800a1b2 <xTaskCreate>:
	{
 800a1b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	4688      	mov	r8, r1
 800a1bc:	4614      	mov	r4, r2
 800a1be:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1c0:	0090      	lsls	r0, r2, #2
 800a1c2:	f7fe ffc5 	bl	8009150 <pvPortMalloc>
			if( pxStack != NULL )
 800a1c6:	b300      	cbz	r0, 800a20a <xTaskCreate+0x58>
 800a1c8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1ca:	205c      	movs	r0, #92	; 0x5c
 800a1cc:	f7fe ffc0 	bl	8009150 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800a1d0:	4605      	mov	r5, r0
 800a1d2:	b1b0      	cbz	r0, 800a202 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800a1d4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800a1d8:	b1e5      	cbz	r5, 800a214 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1e0:	9303      	str	r3, [sp, #12]
 800a1e2:	9502      	str	r5, [sp, #8]
 800a1e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	4633      	mov	r3, r6
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f7ff fe44 	bl	8009e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f7ff fec9 	bl	8009f90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a1fe:	2001      	movs	r0, #1
 800a200:	e005      	b.n	800a20e <xTaskCreate+0x5c>
					vPortFree( pxStack );
 800a202:	4648      	mov	r0, r9
 800a204:	f7ff f81c 	bl	8009240 <vPortFree>
 800a208:	e7e6      	b.n	800a1d8 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a20a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800a20e:	b005      	add	sp, #20
 800a210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a214:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800a218:	e7f9      	b.n	800a20e <xTaskCreate+0x5c>
	...

0800a21c <vTaskStartScheduler>:
{
 800a21c:	b510      	push	{r4, lr}
 800a21e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a220:	2400      	movs	r4, #0
 800a222:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a224:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a226:	aa07      	add	r2, sp, #28
 800a228:	a906      	add	r1, sp, #24
 800a22a:	a805      	add	r0, sp, #20
 800a22c:	f7fe ff16 	bl	800905c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	9302      	str	r3, [sp, #8]
 800a234:	9b06      	ldr	r3, [sp, #24]
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	9400      	str	r4, [sp, #0]
 800a23a:	4623      	mov	r3, r4
 800a23c:	9a07      	ldr	r2, [sp, #28]
 800a23e:	4918      	ldr	r1, [pc, #96]	; (800a2a0 <vTaskStartScheduler+0x84>)
 800a240:	4818      	ldr	r0, [pc, #96]	; (800a2a4 <vTaskStartScheduler+0x88>)
 800a242:	f7ff ff7b 	bl	800a13c <xTaskCreateStatic>
 800a246:	4b18      	ldr	r3, [pc, #96]	; (800a2a8 <vTaskStartScheduler+0x8c>)
 800a248:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800a24a:	b140      	cbz	r0, 800a25e <vTaskStartScheduler+0x42>
			xReturn = xTimerCreateTimerTask();
 800a24c:	f000 fd78 	bl	800ad40 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800a250:	2801      	cmp	r0, #1
 800a252:	d006      	beq.n	800a262 <vTaskStartScheduler+0x46>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a254:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a258:	d018      	beq.n	800a28c <vTaskStartScheduler+0x70>
}
 800a25a:	b008      	add	sp, #32
 800a25c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800a25e:	2000      	movs	r0, #0
 800a260:	e7f6      	b.n	800a250 <vTaskStartScheduler+0x34>
 800a262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800a272:	4b0e      	ldr	r3, [pc, #56]	; (800a2ac <vTaskStartScheduler+0x90>)
 800a274:	f04f 32ff 	mov.w	r2, #4294967295
 800a278:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a27a:	4b0d      	ldr	r3, [pc, #52]	; (800a2b0 <vTaskStartScheduler+0x94>)
 800a27c:	2201      	movs	r2, #1
 800a27e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a280:	4b0c      	ldr	r3, [pc, #48]	; (800a2b4 <vTaskStartScheduler+0x98>)
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800a286:	f7ff f9e3 	bl	8009650 <xPortStartScheduler>
 800a28a:	e7e6      	b.n	800a25a <vTaskStartScheduler+0x3e>
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a29c:	e7fe      	b.n	800a29c <vTaskStartScheduler+0x80>
 800a29e:	bf00      	nop
 800a2a0:	08016648 	.word	0x08016648
 800a2a4:	0800a609 	.word	0x0800a609
 800a2a8:	2000323c 	.word	0x2000323c
 800a2ac:	20003240 	.word	0x20003240
 800a2b0:	2000325c 	.word	0x2000325c
 800a2b4:	20003288 	.word	0x20003288

0800a2b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800a2b8:	4a02      	ldr	r2, [pc, #8]	; (800a2c4 <vTaskSuspendAll+0xc>)
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	6013      	str	r3, [r2, #0]
}
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	20003208 	.word	0x20003208

0800a2c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800a2c8:	4b01      	ldr	r3, [pc, #4]	; (800a2d0 <xTaskGetTickCount+0x8>)
 800a2ca:	6818      	ldr	r0, [r3, #0]
}
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	20003288 	.word	0x20003288

0800a2d4 <vTaskStepTick>:
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <vTaskStepTick+0x2c>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4403      	add	r3, r0
 800a2da:	4a0a      	ldr	r2, [pc, #40]	; (800a304 <vTaskStepTick+0x30>)
 800a2dc:	6812      	ldr	r2, [r2, #0]
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d908      	bls.n	800a2f4 <vTaskStepTick+0x20>
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	e7fe      	b.n	800a2f2 <vTaskStepTick+0x1e>
		xTickCount += xTicksToJump;
 800a2f4:	4a02      	ldr	r2, [pc, #8]	; (800a300 <vTaskStepTick+0x2c>)
 800a2f6:	6813      	ldr	r3, [r2, #0]
 800a2f8:	4418      	add	r0, r3
 800a2fa:	6010      	str	r0, [r2, #0]
	}
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	20003288 	.word	0x20003288
 800a304:	20003240 	.word	0x20003240

0800a308 <xTaskIncrementTick>:
{
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a30a:	4b3a      	ldr	r3, [pc, #232]	; (800a3f4 <xTaskIncrementTick+0xec>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d164      	bne.n	800a3dc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a312:	4b39      	ldr	r3, [pc, #228]	; (800a3f8 <xTaskIncrementTick+0xf0>)
 800a314:	681d      	ldr	r5, [r3, #0]
 800a316:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800a318:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a31a:	b9c5      	cbnz	r5, 800a34e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800a31c:	4b37      	ldr	r3, [pc, #220]	; (800a3fc <xTaskIncrementTick+0xf4>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	b143      	cbz	r3, 800a336 <xTaskIncrementTick+0x2e>
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	e7fe      	b.n	800a334 <xTaskIncrementTick+0x2c>
 800a336:	4a31      	ldr	r2, [pc, #196]	; (800a3fc <xTaskIncrementTick+0xf4>)
 800a338:	6811      	ldr	r1, [r2, #0]
 800a33a:	4b31      	ldr	r3, [pc, #196]	; (800a400 <xTaskIncrementTick+0xf8>)
 800a33c:	6818      	ldr	r0, [r3, #0]
 800a33e:	6010      	str	r0, [r2, #0]
 800a340:	6019      	str	r1, [r3, #0]
 800a342:	4a30      	ldr	r2, [pc, #192]	; (800a404 <xTaskIncrementTick+0xfc>)
 800a344:	6813      	ldr	r3, [r2, #0]
 800a346:	3301      	adds	r3, #1
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	f7ff fd83 	bl	8009e54 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a34e:	4b2e      	ldr	r3, [pc, #184]	; (800a408 <xTaskIncrementTick+0x100>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	42ab      	cmp	r3, r5
 800a354:	d938      	bls.n	800a3c8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800a356:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a358:	4b2c      	ldr	r3, [pc, #176]	; (800a40c <xTaskIncrementTick+0x104>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a362:	009a      	lsls	r2, r3, #2
 800a364:	4b2a      	ldr	r3, [pc, #168]	; (800a410 <xTaskIncrementTick+0x108>)
 800a366:	589b      	ldr	r3, [r3, r2]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d93c      	bls.n	800a3e6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800a36c:	2701      	movs	r7, #1
 800a36e:	e03a      	b.n	800a3e6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800a370:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a372:	4b22      	ldr	r3, [pc, #136]	; (800a3fc <xTaskIncrementTick+0xf4>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	b343      	cbz	r3, 800a3cc <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a37a:	4b20      	ldr	r3, [pc, #128]	; (800a3fc <xTaskIncrementTick+0xf4>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a382:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800a384:	429d      	cmp	r5, r3
 800a386:	d326      	bcc.n	800a3d6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a388:	1d26      	adds	r6, r4, #4
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7fe ffc2 	bl	8009314 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a390:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a392:	b11b      	cbz	r3, 800a39c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a394:	f104 0018 	add.w	r0, r4, #24
 800a398:	f7fe ffbc 	bl	8009314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a39c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a39e:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <xTaskIncrementTick+0x10c>)
 800a3a0:	6812      	ldr	r2, [r2, #0]
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d901      	bls.n	800a3aa <xTaskIncrementTick+0xa2>
 800a3a6:	4a1b      	ldr	r2, [pc, #108]	; (800a414 <xTaskIncrementTick+0x10c>)
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800a3ae:	009a      	lsls	r2, r3, #2
 800a3b0:	4631      	mov	r1, r6
 800a3b2:	4817      	ldr	r0, [pc, #92]	; (800a410 <xTaskIncrementTick+0x108>)
 800a3b4:	4410      	add	r0, r2
 800a3b6:	f7fe ff89 	bl	80092cc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a3bc:	4b13      	ldr	r3, [pc, #76]	; (800a40c <xTaskIncrementTick+0x104>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d2d4      	bcs.n	800a370 <xTaskIncrementTick+0x68>
 800a3c6:	e7d4      	b.n	800a372 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800a3c8:	2700      	movs	r7, #0
 800a3ca:	e7d2      	b.n	800a372 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3cc:	4b0e      	ldr	r3, [pc, #56]	; (800a408 <xTaskIncrementTick+0x100>)
 800a3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d2:	601a      	str	r2, [r3, #0]
					break;
 800a3d4:	e7c0      	b.n	800a358 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800a3d6:	4a0c      	ldr	r2, [pc, #48]	; (800a408 <xTaskIncrementTick+0x100>)
 800a3d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3da:	e7bd      	b.n	800a358 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800a3dc:	4a0e      	ldr	r2, [pc, #56]	; (800a418 <xTaskIncrementTick+0x110>)
 800a3de:	6813      	ldr	r3, [r2, #0]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800a3e4:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <xTaskIncrementTick+0x114>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800a3ec:	2701      	movs	r7, #1
}
 800a3ee:	4638      	mov	r0, r7
 800a3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20003208 	.word	0x20003208
 800a3f8:	20003288 	.word	0x20003288
 800a3fc:	20002d94 	.word	0x20002d94
 800a400:	20002d98 	.word	0x20002d98
 800a404:	20003244 	.word	0x20003244
 800a408:	20003240 	.word	0x20003240
 800a40c:	20002d90 	.word	0x20002d90
 800a410:	20002d9c 	.word	0x20002d9c
 800a414:	20003210 	.word	0x20003210
 800a418:	20003204 	.word	0x20003204
 800a41c:	2000328c 	.word	0x2000328c

0800a420 <xTaskResumeAll>:
{
 800a420:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800a422:	4b35      	ldr	r3, [pc, #212]	; (800a4f8 <xTaskResumeAll+0xd8>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	b943      	cbnz	r3, 800a43a <xTaskResumeAll+0x1a>
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	e7fe      	b.n	800a438 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800a43a:	f7fe ffd3 	bl	80093e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800a43e:	4b2e      	ldr	r3, [pc, #184]	; (800a4f8 <xTaskResumeAll+0xd8>)
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	3a01      	subs	r2, #1
 800a444:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d14f      	bne.n	800a4ec <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a44c:	4b2b      	ldr	r3, [pc, #172]	; (800a4fc <xTaskResumeAll+0xdc>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	b90b      	cbnz	r3, 800a456 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800a452:	2400      	movs	r4, #0
 800a454:	e04b      	b.n	800a4ee <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800a456:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a458:	4b29      	ldr	r3, [pc, #164]	; (800a500 <xTaskResumeAll+0xe0>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	b31b      	cbz	r3, 800a4a6 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a45e:	4b28      	ldr	r3, [pc, #160]	; (800a500 <xTaskResumeAll+0xe0>)
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a464:	f104 0018 	add.w	r0, r4, #24
 800a468:	f7fe ff54 	bl	8009314 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a46c:	1d25      	adds	r5, r4, #4
 800a46e:	4628      	mov	r0, r5
 800a470:	f7fe ff50 	bl	8009314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a474:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a476:	4b23      	ldr	r3, [pc, #140]	; (800a504 <xTaskResumeAll+0xe4>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	4298      	cmp	r0, r3
 800a47c:	d901      	bls.n	800a482 <xTaskResumeAll+0x62>
 800a47e:	4b21      	ldr	r3, [pc, #132]	; (800a504 <xTaskResumeAll+0xe4>)
 800a480:	6018      	str	r0, [r3, #0]
 800a482:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a486:	4629      	mov	r1, r5
 800a488:	4b1f      	ldr	r3, [pc, #124]	; (800a508 <xTaskResumeAll+0xe8>)
 800a48a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a48e:	f7fe ff1d 	bl	80092cc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a492:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a494:	4b1d      	ldr	r3, [pc, #116]	; (800a50c <xTaskResumeAll+0xec>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d3dc      	bcc.n	800a458 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800a49e:	4b1c      	ldr	r3, [pc, #112]	; (800a510 <xTaskResumeAll+0xf0>)
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e7d8      	b.n	800a458 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800a4a6:	b10c      	cbz	r4, 800a4ac <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800a4a8:	f7ff fcd4 	bl	8009e54 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a4ac:	4b19      	ldr	r3, [pc, #100]	; (800a514 <xTaskResumeAll+0xf4>)
 800a4ae:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a4b0:	b984      	cbnz	r4, 800a4d4 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800a4b2:	4b17      	ldr	r3, [pc, #92]	; (800a510 <xTaskResumeAll+0xf0>)
 800a4b4:	681c      	ldr	r4, [r3, #0]
 800a4b6:	b1d4      	cbz	r4, 800a4ee <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800a4b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a4c4:	f3bf 8f4f 	dsb	sy
 800a4c8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800a4cc:	2401      	movs	r4, #1
 800a4ce:	e00e      	b.n	800a4ee <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a4d0:	3c01      	subs	r4, #1
 800a4d2:	d007      	beq.n	800a4e4 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800a4d4:	f7ff ff18 	bl	800a308 <xTaskIncrementTick>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d0f9      	beq.n	800a4d0 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <xTaskResumeAll+0xf0>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	e7f5      	b.n	800a4d0 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 800a4e4:	4b0b      	ldr	r3, [pc, #44]	; (800a514 <xTaskResumeAll+0xf4>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	601a      	str	r2, [r3, #0]
 800a4ea:	e7e2      	b.n	800a4b2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800a4ec:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a4ee:	f7fe ff9b 	bl	8009428 <vPortExitCritical>
}
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	bd38      	pop	{r3, r4, r5, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20003208 	.word	0x20003208
 800a4fc:	200031fc 	.word	0x200031fc
 800a500:	20003248 	.word	0x20003248
 800a504:	20003210 	.word	0x20003210
 800a508:	20002d9c 	.word	0x20002d9c
 800a50c:	20002d90 	.word	0x20002d90
 800a510:	2000328c 	.word	0x2000328c
 800a514:	20003204 	.word	0x20003204

0800a518 <vTaskDelayUntil>:
	{
 800a518:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
 800a51a:	b158      	cbz	r0, 800a534 <vTaskDelayUntil+0x1c>
 800a51c:	460c      	mov	r4, r1
 800a51e:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
 800a520:	b989      	cbnz	r1, 800a546 <vTaskDelayUntil+0x2e>
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	e7fe      	b.n	800a532 <vTaskDelayUntil+0x1a>
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 800a544:	e7fe      	b.n	800a544 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
 800a546:	4b1b      	ldr	r3, [pc, #108]	; (800a5b4 <vTaskDelayUntil+0x9c>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	b143      	cbz	r3, 800a55e <vTaskDelayUntil+0x46>
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	e7fe      	b.n	800a55c <vTaskDelayUntil+0x44>
		vTaskSuspendAll();
 800a55e:	f7ff feab 	bl	800a2b8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 800a562:	4b15      	ldr	r3, [pc, #84]	; (800a5b8 <vTaskDelayUntil+0xa0>)
 800a564:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a566:	682b      	ldr	r3, [r5, #0]
 800a568:	441c      	add	r4, r3
			if( xConstTickCount < *pxPreviousWakeTime )
 800a56a:	4283      	cmp	r3, r0
 800a56c:	d909      	bls.n	800a582 <vTaskDelayUntil+0x6a>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a56e:	42a3      	cmp	r3, r4
 800a570:	d801      	bhi.n	800a576 <vTaskDelayUntil+0x5e>
			*pxPreviousWakeTime = xTimeToWake;
 800a572:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800a574:	e00e      	b.n	800a594 <vTaskDelayUntil+0x7c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a576:	42a0      	cmp	r0, r4
 800a578:	d301      	bcc.n	800a57e <vTaskDelayUntil+0x66>
			*pxPreviousWakeTime = xTimeToWake;
 800a57a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800a57c:	e00a      	b.n	800a594 <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
 800a57e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800a580:	e004      	b.n	800a58c <vTaskDelayUntil+0x74>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a582:	42a3      	cmp	r3, r4
 800a584:	d801      	bhi.n	800a58a <vTaskDelayUntil+0x72>
 800a586:	42a0      	cmp	r0, r4
 800a588:	d212      	bcs.n	800a5b0 <vTaskDelayUntil+0x98>
			*pxPreviousWakeTime = xTimeToWake;
 800a58a:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a58c:	2100      	movs	r1, #0
 800a58e:	1a20      	subs	r0, r4, r0
 800a590:	f7ff fd96 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
		xAlreadyYielded = xTaskResumeAll();
 800a594:	f7ff ff44 	bl	800a420 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a598:	b948      	cbnz	r0, 800a5ae <vTaskDelayUntil+0x96>
			portYIELD_WITHIN_API();
 800a59a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a59e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	f3bf 8f6f 	isb	sy
	}
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
 800a5b0:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
 800a5b2:	e7ef      	b.n	800a594 <vTaskDelayUntil+0x7c>
 800a5b4:	20003208 	.word	0x20003208
 800a5b8:	20003288 	.word	0x20003288

0800a5bc <vTaskDelay>:
	{
 800a5bc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a5be:	b1a8      	cbz	r0, 800a5ec <vTaskDelay+0x30>
 800a5c0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800a5c2:	4b10      	ldr	r3, [pc, #64]	; (800a604 <vTaskDelay+0x48>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	b143      	cbz	r3, 800a5da <vTaskDelay+0x1e>
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	e7fe      	b.n	800a5d8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800a5da:	f7ff fe6d 	bl	800a2b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a5de:	2100      	movs	r1, #0
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7ff fd6d 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800a5e6:	f7ff ff1b 	bl	800a420 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800a5ea:	b948      	cbnz	r0, 800a600 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800a5ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	f3bf 8f6f 	isb	sy
	}
 800a600:	bd10      	pop	{r4, pc}
 800a602:	bf00      	nop
 800a604:	20003208 	.word	0x20003208

0800a608 <prvIdleTask>:
{
 800a608:	b508      	push	{r3, lr}
 800a60a:	e003      	b.n	800a614 <prvIdleTask+0xc>
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800a60c:	f7ff fc02 	bl	8009e14 <prvGetExpectedIdleTime>
			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a610:	2801      	cmp	r0, #1
 800a612:	d810      	bhi.n	800a636 <prvIdleTask+0x2e>
		prvCheckTasksWaitingTermination();
 800a614:	f7ff fd2e 	bl	800a074 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a618:	4b14      	ldr	r3, [pc, #80]	; (800a66c <prvIdleTask+0x64>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d9f5      	bls.n	800a60c <prvIdleTask+0x4>
				taskYIELD();
 800a620:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a628:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	e7ea      	b.n	800a60c <prvIdleTask+0x4>
				vTaskSuspendAll();
 800a636:	f7ff fe3f 	bl	800a2b8 <vTaskSuspendAll>
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800a63a:	4b0d      	ldr	r3, [pc, #52]	; (800a670 <prvIdleTask+0x68>)
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <prvIdleTask+0x6c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	429a      	cmp	r2, r3
 800a644:	d306      	bcc.n	800a654 <prvIdleTask+0x4c>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800a646:	f7ff fbe5 	bl	8009e14 <prvGetExpectedIdleTime>
					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800a64a:	2801      	cmp	r0, #1
 800a64c:	d80b      	bhi.n	800a666 <prvIdleTask+0x5e>
				( void ) xTaskResumeAll();
 800a64e:	f7ff fee7 	bl	800a420 <xTaskResumeAll>
 800a652:	e7df      	b.n	800a614 <prvIdleTask+0xc>
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800a664:	e7fe      	b.n	800a664 <prvIdleTask+0x5c>
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800a666:	f7fe ff33 	bl	80094d0 <vPortSuppressTicksAndSleep>
						traceLOW_POWER_IDLE_END();
 800a66a:	e7f0      	b.n	800a64e <prvIdleTask+0x46>
 800a66c:	20002d9c 	.word	0x20002d9c
 800a670:	20003240 	.word	0x20003240
 800a674:	20003288 	.word	0x20003288

0800a678 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a678:	4b1f      	ldr	r3, [pc, #124]	; (800a6f8 <vTaskSwitchContext+0x80>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	b11b      	cbz	r3, 800a686 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800a67e:	4b1f      	ldr	r3, [pc, #124]	; (800a6fc <vTaskSwitchContext+0x84>)
 800a680:	2201      	movs	r2, #1
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800a686:	4b1d      	ldr	r3, [pc, #116]	; (800a6fc <vTaskSwitchContext+0x84>)
 800a688:	2200      	movs	r2, #0
 800a68a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68c:	4b1c      	ldr	r3, [pc, #112]	; (800a700 <vTaskSwitchContext+0x88>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800a694:	008a      	lsls	r2, r1, #2
 800a696:	491b      	ldr	r1, [pc, #108]	; (800a704 <vTaskSwitchContext+0x8c>)
 800a698:	588a      	ldr	r2, [r1, r2]
 800a69a:	b95a      	cbnz	r2, 800a6b4 <vTaskSwitchContext+0x3c>
 800a69c:	b10b      	cbz	r3, 800a6a2 <vTaskSwitchContext+0x2a>
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	e7f6      	b.n	800a690 <vTaskSwitchContext+0x18>
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	e7fe      	b.n	800a6b2 <vTaskSwitchContext+0x3a>
 800a6b4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800a6b8:	0082      	lsls	r2, r0, #2
 800a6ba:	440a      	add	r2, r1
 800a6bc:	6850      	ldr	r0, [r2, #4]
 800a6be:	6840      	ldr	r0, [r0, #4]
 800a6c0:	6050      	str	r0, [r2, #4]
 800a6c2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800a6c6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800a6ca:	3208      	adds	r2, #8
 800a6cc:	4411      	add	r1, r2
 800a6ce:	4288      	cmp	r0, r1
 800a6d0:	d00b      	beq.n	800a6ea <vTaskSwitchContext+0x72>
 800a6d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800a6d6:	0091      	lsls	r1, r2, #2
 800a6d8:	4a0a      	ldr	r2, [pc, #40]	; (800a704 <vTaskSwitchContext+0x8c>)
 800a6da:	440a      	add	r2, r1
 800a6dc:	6852      	ldr	r2, [r2, #4]
 800a6de:	68d1      	ldr	r1, [r2, #12]
 800a6e0:	4a09      	ldr	r2, [pc, #36]	; (800a708 <vTaskSwitchContext+0x90>)
 800a6e2:	6011      	str	r1, [r2, #0]
 800a6e4:	4a06      	ldr	r2, [pc, #24]	; (800a700 <vTaskSwitchContext+0x88>)
 800a6e6:	6013      	str	r3, [r2, #0]
}
 800a6e8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ea:	6840      	ldr	r0, [r0, #4]
 800a6ec:	4662      	mov	r2, ip
 800a6ee:	0091      	lsls	r1, r2, #2
 800a6f0:	4a04      	ldr	r2, [pc, #16]	; (800a704 <vTaskSwitchContext+0x8c>)
 800a6f2:	440a      	add	r2, r1
 800a6f4:	6050      	str	r0, [r2, #4]
 800a6f6:	e7ec      	b.n	800a6d2 <vTaskSwitchContext+0x5a>
 800a6f8:	20003208 	.word	0x20003208
 800a6fc:	2000328c 	.word	0x2000328c
 800a700:	20003210 	.word	0x20003210
 800a704:	20002d9c 	.word	0x20002d9c
 800a708:	20002d90 	.word	0x20002d90

0800a70c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800a70c:	b158      	cbz	r0, 800a726 <vTaskPlaceOnEventList+0x1a>
{
 800a70e:	b510      	push	{r4, lr}
 800a710:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a712:	4a09      	ldr	r2, [pc, #36]	; (800a738 <vTaskPlaceOnEventList+0x2c>)
 800a714:	6811      	ldr	r1, [r2, #0]
 800a716:	3118      	adds	r1, #24
 800a718:	f7fe fde3 	bl	80092e2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a71c:	2101      	movs	r1, #1
 800a71e:	4620      	mov	r0, r4
 800a720:	f7ff fcce 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
}
 800a724:	bd10      	pop	{r4, pc}
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800a736:	e7fe      	b.n	800a736 <vTaskPlaceOnEventList+0x2a>
 800a738:	20002d90 	.word	0x20002d90

0800a73c <vTaskPlaceOnEventListRestricted>:
	{
 800a73c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800a73e:	b170      	cbz	r0, 800a75e <vTaskPlaceOnEventListRestricted+0x22>
 800a740:	460d      	mov	r5, r1
 800a742:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a744:	4a0a      	ldr	r2, [pc, #40]	; (800a770 <vTaskPlaceOnEventListRestricted+0x34>)
 800a746:	6811      	ldr	r1, [r2, #0]
 800a748:	3118      	adds	r1, #24
 800a74a:	f7fe fdbf 	bl	80092cc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800a74e:	b10c      	cbz	r4, 800a754 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800a750:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a754:	4621      	mov	r1, r4
 800a756:	4628      	mov	r0, r5
 800a758:	f7ff fcb2 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
	}
 800a75c:	bd38      	pop	{r3, r4, r5, pc}
 800a75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800a76e:	e7fe      	b.n	800a76e <vTaskPlaceOnEventListRestricted+0x32>
 800a770:	20002d90 	.word	0x20002d90

0800a774 <xTaskRemoveFromEventList>:
{
 800a774:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a776:	68c3      	ldr	r3, [r0, #12]
 800a778:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800a77a:	b334      	cbz	r4, 800a7ca <xTaskRemoveFromEventList+0x56>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a77c:	f104 0518 	add.w	r5, r4, #24
 800a780:	4628      	mov	r0, r5
 800a782:	f7fe fdc7 	bl	8009314 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a786:	4b19      	ldr	r3, [pc, #100]	; (800a7ec <xTaskRemoveFromEventList+0x78>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	bb3b      	cbnz	r3, 800a7dc <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a78c:	1d25      	adds	r5, r4, #4
 800a78e:	4628      	mov	r0, r5
 800a790:	f7fe fdc0 	bl	8009314 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a794:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800a796:	4b16      	ldr	r3, [pc, #88]	; (800a7f0 <xTaskRemoveFromEventList+0x7c>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4298      	cmp	r0, r3
 800a79c:	d901      	bls.n	800a7a2 <xTaskRemoveFromEventList+0x2e>
 800a79e:	4b14      	ldr	r3, [pc, #80]	; (800a7f0 <xTaskRemoveFromEventList+0x7c>)
 800a7a0:	6018      	str	r0, [r3, #0]
 800a7a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <xTaskRemoveFromEventList+0x80>)
 800a7aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7ae:	f7fe fd8d 	bl	80092cc <vListInsertEnd>
			prvResetNextTaskUnblockTime();
 800a7b2:	f7ff fb4f 	bl	8009e54 <prvResetNextTaskUnblockTime>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a7b8:	4b0f      	ldr	r3, [pc, #60]	; (800a7f8 <xTaskRemoveFromEventList+0x84>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d911      	bls.n	800a7e6 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 800a7c2:	2001      	movs	r0, #1
 800a7c4:	4b0d      	ldr	r3, [pc, #52]	; (800a7fc <xTaskRemoveFromEventList+0x88>)
 800a7c6:	6018      	str	r0, [r3, #0]
}
 800a7c8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800a7da:	e7fe      	b.n	800a7da <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7dc:	4629      	mov	r1, r5
 800a7de:	4808      	ldr	r0, [pc, #32]	; (800a800 <xTaskRemoveFromEventList+0x8c>)
 800a7e0:	f7fe fd74 	bl	80092cc <vListInsertEnd>
 800a7e4:	e7e7      	b.n	800a7b6 <xTaskRemoveFromEventList+0x42>
		xReturn = pdFALSE;
 800a7e6:	2000      	movs	r0, #0
	return xReturn;
 800a7e8:	e7ee      	b.n	800a7c8 <xTaskRemoveFromEventList+0x54>
 800a7ea:	bf00      	nop
 800a7ec:	20003208 	.word	0x20003208
 800a7f0:	20003210 	.word	0x20003210
 800a7f4:	20002d9c 	.word	0x20002d9c
 800a7f8:	20002d90 	.word	0x20002d90
 800a7fc:	2000328c 	.word	0x2000328c
 800a800:	20003248 	.word	0x20003248

0800a804 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a804:	4b03      	ldr	r3, [pc, #12]	; (800a814 <vTaskInternalSetTimeOutState+0x10>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a80a:	4b03      	ldr	r3, [pc, #12]	; (800a818 <vTaskInternalSetTimeOutState+0x14>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	6043      	str	r3, [r0, #4]
}
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20003244 	.word	0x20003244
 800a818:	20003288 	.word	0x20003288

0800a81c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800a81c:	b1d8      	cbz	r0, 800a856 <xTaskCheckForTimeOut+0x3a>
{
 800a81e:	b570      	push	{r4, r5, r6, lr}
 800a820:	460c      	mov	r4, r1
 800a822:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800a824:	b301      	cbz	r1, 800a868 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 800a826:	f7fe fddd 	bl	80093e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800a82a:	4b1b      	ldr	r3, [pc, #108]	; (800a898 <xTaskCheckForTimeOut+0x7c>)
 800a82c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a82e:	686b      	ldr	r3, [r5, #4]
 800a830:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800a832:	6822      	ldr	r2, [r4, #0]
 800a834:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a838:	d027      	beq.n	800a88a <xTaskCheckForTimeOut+0x6e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a83a:	4e18      	ldr	r6, [pc, #96]	; (800a89c <xTaskCheckForTimeOut+0x80>)
 800a83c:	6836      	ldr	r6, [r6, #0]
 800a83e:	f8d5 c000 	ldr.w	ip, [r5]
 800a842:	45b4      	cmp	ip, r6
 800a844:	d001      	beq.n	800a84a <xTaskCheckForTimeOut+0x2e>
 800a846:	428b      	cmp	r3, r1
 800a848:	d924      	bls.n	800a894 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a84a:	4282      	cmp	r2, r0
 800a84c:	d815      	bhi.n	800a87a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait = 0;
 800a84e:	2300      	movs	r3, #0
 800a850:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800a852:	2401      	movs	r4, #1
 800a854:	e01a      	b.n	800a88c <xTaskCheckForTimeOut+0x70>
 800a856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800a866:	e7fe      	b.n	800a866 <xTaskCheckForTimeOut+0x4a>
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800a878:	e7fe      	b.n	800a878 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait -= xElapsedTime;
 800a87a:	1a5b      	subs	r3, r3, r1
 800a87c:	4413      	add	r3, r2
 800a87e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a880:	4628      	mov	r0, r5
 800a882:	f7ff ffbf 	bl	800a804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a886:	2400      	movs	r4, #0
 800a888:	e000      	b.n	800a88c <xTaskCheckForTimeOut+0x70>
				xReturn = pdFALSE;
 800a88a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a88c:	f7fe fdcc 	bl	8009428 <vPortExitCritical>
}
 800a890:	4620      	mov	r0, r4
 800a892:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800a894:	2401      	movs	r4, #1
 800a896:	e7f9      	b.n	800a88c <xTaskCheckForTimeOut+0x70>
 800a898:	20003288 	.word	0x20003288
 800a89c:	20003244 	.word	0x20003244

0800a8a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800a8a0:	4b01      	ldr	r3, [pc, #4]	; (800a8a8 <vTaskMissedYield+0x8>)
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	601a      	str	r2, [r3, #0]
}
 800a8a6:	4770      	bx	lr
 800a8a8:	2000328c 	.word	0x2000328c

0800a8ac <eTaskConfirmSleepModeStatus>:
		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <eTaskConfirmSleepModeStatus+0x2c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	b95b      	cbnz	r3, 800a8ca <eTaskConfirmSleepModeStatus+0x1e>
		else if( xYieldPending != pdFALSE )
 800a8b2:	4b0a      	ldr	r3, [pc, #40]	; (800a8dc <eTaskConfirmSleepModeStatus+0x30>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	b953      	cbnz	r3, 800a8ce <eTaskConfirmSleepModeStatus+0x22>
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800a8b8:	4b09      	ldr	r3, [pc, #36]	; (800a8e0 <eTaskConfirmSleepModeStatus+0x34>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <eTaskConfirmSleepModeStatus+0x38>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d005      	beq.n	800a8d2 <eTaskConfirmSleepModeStatus+0x26>
	eSleepModeStatus eReturn = eStandardSleep;
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	4770      	bx	lr
			eReturn = eAbortSleep;
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	4770      	bx	lr
			eReturn = eAbortSleep;
 800a8ce:	2000      	movs	r0, #0
 800a8d0:	4770      	bx	lr
				eReturn = eNoTasksWaitingTimeout;
 800a8d2:	2002      	movs	r0, #2
	}
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	20003248 	.word	0x20003248
 800a8dc:	2000328c 	.word	0x2000328c
 800a8e0:	20003260 	.word	0x20003260
 800a8e4:	200031fc 	.word	0x200031fc

0800a8e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800a8e8:	4b05      	ldr	r3, [pc, #20]	; (800a900 <xTaskGetSchedulerState+0x18>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	b133      	cbz	r3, 800a8fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <xTaskGetSchedulerState+0x1c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	b10b      	cbz	r3, 800a8f8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800a8f4:	2000      	movs	r0, #0
	}
 800a8f6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800a8f8:	2002      	movs	r0, #2
 800a8fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a8fc:	2001      	movs	r0, #1
 800a8fe:	4770      	bx	lr
 800a900:	2000325c 	.word	0x2000325c
 800a904:	20003208 	.word	0x20003208

0800a908 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800a908:	2800      	cmp	r0, #0
 800a90a:	d03b      	beq.n	800a984 <xTaskPriorityDisinherit+0x7c>
	{
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a910:	4b1e      	ldr	r3, [pc, #120]	; (800a98c <xTaskPriorityDisinherit+0x84>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4283      	cmp	r3, r0
 800a916:	d008      	beq.n	800a92a <xTaskPriorityDisinherit+0x22>
 800a918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	e7fe      	b.n	800a928 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a92a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a92c:	b943      	cbnz	r3, 800a940 <xTaskPriorityDisinherit+0x38>
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	f383 8811 	msr	BASEPRI, r3
 800a936:	f3bf 8f6f 	isb	sy
 800a93a:	f3bf 8f4f 	dsb	sy
 800a93e:	e7fe      	b.n	800a93e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a940:	3b01      	subs	r3, #1
 800a942:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a944:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a946:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a948:	4291      	cmp	r1, r2
 800a94a:	d01d      	beq.n	800a988 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a94c:	b10b      	cbz	r3, 800a952 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a94e:	2000      	movs	r0, #0
	}
 800a950:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a952:	1d05      	adds	r5, r0, #4
 800a954:	4628      	mov	r0, r5
 800a956:	f7fe fcdd 	bl	8009314 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a95a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a95c:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a95e:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800a962:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a964:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <xTaskPriorityDisinherit+0x88>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4298      	cmp	r0, r3
 800a96a:	d901      	bls.n	800a970 <xTaskPriorityDisinherit+0x68>
 800a96c:	4b08      	ldr	r3, [pc, #32]	; (800a990 <xTaskPriorityDisinherit+0x88>)
 800a96e:	6018      	str	r0, [r3, #0]
 800a970:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a974:	4629      	mov	r1, r5
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <xTaskPriorityDisinherit+0x8c>)
 800a978:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a97c:	f7fe fca6 	bl	80092cc <vListInsertEnd>
					xReturn = pdTRUE;
 800a980:	2001      	movs	r0, #1
 800a982:	e7e5      	b.n	800a950 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a984:	2000      	movs	r0, #0
	}
 800a986:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a988:	2000      	movs	r0, #0
 800a98a:	e7e1      	b.n	800a950 <xTaskPriorityDisinherit+0x48>
 800a98c:	20002d90 	.word	0x20002d90
 800a990:	20003210 	.word	0x20003210
 800a994:	20002d9c 	.word	0x20002d9c

0800a998 <xTaskNotifyWait>:
	{
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	4614      	mov	r4, r2
 800a9a0:	461d      	mov	r5, r3
		taskENTER_CRITICAL();
 800a9a2:	f7fe fd1f 	bl	80093e4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a9a6:	4b21      	ldr	r3, [pc, #132]	; (800aa2c <xTaskNotifyWait+0x94>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	2a02      	cmp	r2, #2
 800a9b2:	d00a      	beq.n	800a9ca <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a9b4:	4b1d      	ldr	r3, [pc, #116]	; (800aa2c <xTaskNotifyWait+0x94>)
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800a9ba:	ea20 0606 	bic.w	r6, r0, r6
 800a9be:	6556      	str	r6, [r2, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 800a9c8:	b9cd      	cbnz	r5, 800a9fe <xTaskNotifyWait+0x66>
		taskEXIT_CRITICAL();
 800a9ca:	f7fe fd2d 	bl	8009428 <vPortExitCritical>
		taskENTER_CRITICAL();
 800a9ce:	f7fe fd09 	bl	80093e4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800a9d2:	b11c      	cbz	r4, 800a9dc <xTaskNotifyWait+0x44>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a9d4:	4b15      	ldr	r3, [pc, #84]	; (800aa2c <xTaskNotifyWait+0x94>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9da:	6023      	str	r3, [r4, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a9dc:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <xTaskNotifyWait+0x94>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d018      	beq.n	800aa1c <xTaskNotifyWait+0x84>
				xReturn = pdFALSE;
 800a9ea:	2400      	movs	r4, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a9ec:	4b0f      	ldr	r3, [pc, #60]	; (800aa2c <xTaskNotifyWait+0x94>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 800a9f6:	f7fe fd17 	bl	8009428 <vPortExitCritical>
	}
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4628      	mov	r0, r5
 800aa02:	f7ff fb5d 	bl	800a0c0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800aa06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aa0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	e7d6      	b.n	800a9ca <xTaskNotifyWait+0x32>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800aa1c:	4b03      	ldr	r3, [pc, #12]	; (800aa2c <xTaskNotifyWait+0x94>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa22:	ea21 0707 	bic.w	r7, r1, r7
 800aa26:	655f      	str	r7, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800aa28:	2401      	movs	r4, #1
 800aa2a:	e7df      	b.n	800a9ec <xTaskNotifyWait+0x54>
 800aa2c:	20002d90 	.word	0x20002d90

0800aa30 <xTaskGenericNotify>:
	{
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800aa32:	b1a8      	cbz	r0, 800aa60 <xTaskGenericNotify+0x30>
 800aa34:	460f      	mov	r7, r1
 800aa36:	4614      	mov	r4, r2
 800aa38:	461d      	mov	r5, r3
 800aa3a:	4606      	mov	r6, r0
		taskENTER_CRITICAL();
 800aa3c:	f7fe fcd2 	bl	80093e4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800aa40:	b10d      	cbz	r5, 800aa46 <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800aa42:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800aa44:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800aa46:	f896 3058 	ldrb.w	r3, [r6, #88]	; 0x58
 800aa4a:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800aa4c:	2202      	movs	r2, #2
 800aa4e:	f886 2058 	strb.w	r2, [r6, #88]	; 0x58
			switch( eAction )
 800aa52:	2c04      	cmp	r4, #4
 800aa54:	d81f      	bhi.n	800aa96 <xTaskGenericNotify+0x66>
 800aa56:	e8df f004 	tbb	[pc, r4]
 800aa5a:	0c2b      	.short	0x0c2b
 800aa5c:	1611      	.short	0x1611
 800aa5e:	19          	.byte	0x19
 800aa5f:	00          	.byte	0x00
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800aa70:	e7fe      	b.n	800aa70 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 800aa72:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800aa74:	4317      	orrs	r7, r2
 800aa76:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800aa78:	2401      	movs	r4, #1
					break;
 800aa7a:	e01a      	b.n	800aab2 <xTaskGenericNotify+0x82>
					( pxTCB->ulNotifiedValue )++;
 800aa7c:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800aa7e:	3201      	adds	r2, #1
 800aa80:	6572      	str	r2, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800aa82:	2401      	movs	r4, #1
					break;
 800aa84:	e015      	b.n	800aab2 <xTaskGenericNotify+0x82>
					pxTCB->ulNotifiedValue = ulValue;
 800aa86:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800aa88:	2401      	movs	r4, #1
					break;
 800aa8a:	e012      	b.n	800aab2 <xTaskGenericNotify+0x82>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d016      	beq.n	800aabe <xTaskGenericNotify+0x8e>
						pxTCB->ulNotifiedValue = ulValue;
 800aa90:	6577      	str	r7, [r6, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800aa92:	2401      	movs	r4, #1
 800aa94:	e00d      	b.n	800aab2 <xTaskGenericNotify+0x82>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800aa96:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800aa98:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa9c:	d011      	beq.n	800aac2 <xTaskGenericNotify+0x92>
 800aa9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	f3bf 8f6f 	isb	sy
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	e7fe      	b.n	800aaae <xTaskGenericNotify+0x7e>
			switch( eAction )
 800aab0:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d007      	beq.n	800aac6 <xTaskGenericNotify+0x96>
		taskEXIT_CRITICAL();
 800aab6:	f7fe fcb7 	bl	8009428 <vPortExitCritical>
	}
 800aaba:	4620      	mov	r0, r4
 800aabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						xReturn = pdFAIL;
 800aabe:	2400      	movs	r4, #0
 800aac0:	e7f7      	b.n	800aab2 <xTaskGenericNotify+0x82>
	BaseType_t xReturn = pdPASS;
 800aac2:	2401      	movs	r4, #1
 800aac4:	e7f5      	b.n	800aab2 <xTaskGenericNotify+0x82>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aac6:	1d35      	adds	r5, r6, #4
 800aac8:	4628      	mov	r0, r5
 800aaca:	f7fe fc23 	bl	8009314 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800aace:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800aad0:	4b15      	ldr	r3, [pc, #84]	; (800ab28 <xTaskGenericNotify+0xf8>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4298      	cmp	r0, r3
 800aad6:	d901      	bls.n	800aadc <xTaskGenericNotify+0xac>
 800aad8:	4b13      	ldr	r3, [pc, #76]	; (800ab28 <xTaskGenericNotify+0xf8>)
 800aada:	6018      	str	r0, [r3, #0]
 800aadc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800aae0:	4629      	mov	r1, r5
 800aae2:	4b12      	ldr	r3, [pc, #72]	; (800ab2c <xTaskGenericNotify+0xfc>)
 800aae4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aae8:	f7fe fbf0 	bl	80092cc <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aaec:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800aaee:	b143      	cbz	r3, 800ab02 <xTaskGenericNotify+0xd2>
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	e7fe      	b.n	800ab00 <xTaskGenericNotify+0xd0>
					prvResetNextTaskUnblockTime();
 800ab02:	f7ff f9a7 	bl	8009e54 <prvResetNextTaskUnblockTime>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab06:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800ab08:	4b09      	ldr	r3, [pc, #36]	; (800ab30 <xTaskGenericNotify+0x100>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d9d1      	bls.n	800aab6 <xTaskGenericNotify+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800ab12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ab16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	e7c6      	b.n	800aab6 <xTaskGenericNotify+0x86>
 800ab28:	20003210 	.word	0x20003210
 800ab2c:	20002d9c 	.word	0x20002d9c
 800ab30:	20002d90 	.word	0x20002d90

0800ab34 <xTaskGenericNotifyFromISR>:
		configASSERT( xTaskToNotify );
 800ab34:	b308      	cbz	r0, 800ab7a <xTaskGenericNotifyFromISR+0x46>
	{
 800ab36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab3a:	460e      	mov	r6, r1
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	461d      	mov	r5, r3
 800ab40:	4607      	mov	r7, r0
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab42:	f7fe fde5 	bl	8009710 <vPortValidateInterruptPriority>
	__asm volatile
 800ab46:	f3ef 8811 	mrs	r8, BASEPRI
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800ab5a:	b10d      	cbz	r5, 800ab60 <xTaskGenericNotifyFromISR+0x2c>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ab5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab5e:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ab60:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800ab64:	b2db      	uxtb	r3, r3
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ab66:	2202      	movs	r2, #2
 800ab68:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
			switch( eAction )
 800ab6c:	2c04      	cmp	r4, #4
 800ab6e:	d81f      	bhi.n	800abb0 <xTaskGenericNotifyFromISR+0x7c>
 800ab70:	e8df f004 	tbb	[pc, r4]
 800ab74:	16110c2b 	.word	0x16110c2b
 800ab78:	19          	.byte	0x19
 800ab79:	00          	.byte	0x00
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800ab8a:	e7fe      	b.n	800ab8a <xTaskGenericNotifyFromISR+0x56>
					pxTCB->ulNotifiedValue |= ulValue;
 800ab8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab8e:	4316      	orrs	r6, r2
 800ab90:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800ab92:	2401      	movs	r4, #1
					break;
 800ab94:	e01a      	b.n	800abcc <xTaskGenericNotifyFromISR+0x98>
					( pxTCB->ulNotifiedValue )++;
 800ab96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab98:	3201      	adds	r2, #1
 800ab9a:	657a      	str	r2, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800ab9c:	2401      	movs	r4, #1
					break;
 800ab9e:	e015      	b.n	800abcc <xTaskGenericNotifyFromISR+0x98>
					pxTCB->ulNotifiedValue = ulValue;
 800aba0:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800aba2:	2401      	movs	r4, #1
					break;
 800aba4:	e012      	b.n	800abcc <xTaskGenericNotifyFromISR+0x98>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d017      	beq.n	800abda <xTaskGenericNotifyFromISR+0xa6>
						pxTCB->ulNotifiedValue = ulValue;
 800abaa:	657e      	str	r6, [r7, #84]	; 0x54
	BaseType_t xReturn = pdPASS;
 800abac:	2401      	movs	r4, #1
 800abae:	e00d      	b.n	800abcc <xTaskGenericNotifyFromISR+0x98>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800abb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abb2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abb6:	d012      	beq.n	800abde <xTaskGenericNotifyFromISR+0xaa>
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	e7fe      	b.n	800abc8 <xTaskGenericNotifyFromISR+0x94>
			switch( eAction )
 800abca:	2401      	movs	r4, #1
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d008      	beq.n	800abe2 <xTaskGenericNotifyFromISR+0xae>
	__asm volatile
 800abd0:	f388 8811 	msr	BASEPRI, r8
	}
 800abd4:	4620      	mov	r0, r4
 800abd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						xReturn = pdFAIL;
 800abda:	2400      	movs	r4, #0
 800abdc:	e7f6      	b.n	800abcc <xTaskGenericNotifyFromISR+0x98>
	BaseType_t xReturn = pdPASS;
 800abde:	2401      	movs	r4, #1
 800abe0:	e7f4      	b.n	800abcc <xTaskGenericNotifyFromISR+0x98>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800abe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe4:	b143      	cbz	r3, 800abf8 <xTaskGenericNotifyFromISR+0xc4>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	e7fe      	b.n	800abf6 <xTaskGenericNotifyFromISR+0xc2>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abf8:	4b15      	ldr	r3, [pc, #84]	; (800ac50 <xTaskGenericNotifyFromISR+0x11c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	bb0b      	cbnz	r3, 800ac42 <xTaskGenericNotifyFromISR+0x10e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abfe:	1d3d      	adds	r5, r7, #4
 800ac00:	4628      	mov	r0, r5
 800ac02:	f7fe fb87 	bl	8009314 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac08:	4b12      	ldr	r3, [pc, #72]	; (800ac54 <xTaskGenericNotifyFromISR+0x120>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4298      	cmp	r0, r3
 800ac0e:	d901      	bls.n	800ac14 <xTaskGenericNotifyFromISR+0xe0>
 800ac10:	4b10      	ldr	r3, [pc, #64]	; (800ac54 <xTaskGenericNotifyFromISR+0x120>)
 800ac12:	6018      	str	r0, [r3, #0]
 800ac14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ac18:	4629      	mov	r1, r5
 800ac1a:	4b0f      	ldr	r3, [pc, #60]	; (800ac58 <xTaskGenericNotifyFromISR+0x124>)
 800ac1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac20:	f7fe fb54 	bl	80092cc <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <xTaskGenericNotifyFromISR+0x128>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d9cf      	bls.n	800abd0 <xTaskGenericNotifyFromISR+0x9c>
					if( pxHigherPriorityTaskWoken != NULL )
 800ac30:	9b06      	ldr	r3, [sp, #24]
 800ac32:	b113      	cbz	r3, 800ac3a <xTaskGenericNotifyFromISR+0x106>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ac34:	2301      	movs	r3, #1
 800ac36:	9a06      	ldr	r2, [sp, #24]
 800ac38:	6013      	str	r3, [r2, #0]
					xYieldPending = pdTRUE;
 800ac3a:	4b09      	ldr	r3, [pc, #36]	; (800ac60 <xTaskGenericNotifyFromISR+0x12c>)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e7c6      	b.n	800abd0 <xTaskGenericNotifyFromISR+0x9c>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ac42:	f107 0118 	add.w	r1, r7, #24
 800ac46:	4807      	ldr	r0, [pc, #28]	; (800ac64 <xTaskGenericNotifyFromISR+0x130>)
 800ac48:	f7fe fb40 	bl	80092cc <vListInsertEnd>
 800ac4c:	e7ea      	b.n	800ac24 <xTaskGenericNotifyFromISR+0xf0>
 800ac4e:	bf00      	nop
 800ac50:	20003208 	.word	0x20003208
 800ac54:	20003210 	.word	0x20003210
 800ac58:	20002d9c 	.word	0x20002d9c
 800ac5c:	20002d90 	.word	0x20002d90
 800ac60:	2000328c 	.word	0x2000328c
 800ac64:	20003248 	.word	0x20003248

0800ac68 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac68:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <prvGetNextExpireTime+0x1c>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	6813      	ldr	r3, [r2, #0]
 800ac6e:	b92b      	cbnz	r3, 800ac7c <prvGetNextExpireTime+0x14>
 800ac70:	2301      	movs	r3, #1
 800ac72:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac74:	b923      	cbnz	r3, 800ac80 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac76:	68d3      	ldr	r3, [r2, #12]
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e7f8      	b.n	800ac72 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac80:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800ac82:	4770      	bx	lr
 800ac84:	20003290 	.word	0x20003290

0800ac88 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ac88:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac8a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac8c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac8e:	4291      	cmp	r1, r2
 800ac90:	d80c      	bhi.n	800acac <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac92:	1ad2      	subs	r2, r2, r3
 800ac94:	6983      	ldr	r3, [r0, #24]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d301      	bcc.n	800ac9e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac9a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800ac9c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac9e:	1d01      	adds	r1, r0, #4
 800aca0:	4b09      	ldr	r3, [pc, #36]	; (800acc8 <prvInsertTimerInActiveList+0x40>)
 800aca2:	6818      	ldr	r0, [r3, #0]
 800aca4:	f7fe fb1d 	bl	80092e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800aca8:	2000      	movs	r0, #0
 800acaa:	e7f7      	b.n	800ac9c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800acac:	429a      	cmp	r2, r3
 800acae:	d201      	bcs.n	800acb4 <prvInsertTimerInActiveList+0x2c>
 800acb0:	4299      	cmp	r1, r3
 800acb2:	d206      	bcs.n	800acc2 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800acb4:	1d01      	adds	r1, r0, #4
 800acb6:	4b05      	ldr	r3, [pc, #20]	; (800accc <prvInsertTimerInActiveList+0x44>)
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	f7fe fb12 	bl	80092e2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800acbe:	2000      	movs	r0, #0
 800acc0:	e7ec      	b.n	800ac9c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800acc2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800acc4:	e7ea      	b.n	800ac9c <prvInsertTimerInActiveList+0x14>
 800acc6:	bf00      	nop
 800acc8:	20003294 	.word	0x20003294
 800accc:	20003290 	.word	0x20003290

0800acd0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acd0:	b530      	push	{r4, r5, lr}
 800acd2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acd4:	f7fe fb86 	bl	80093e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acd8:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <prvCheckForValidListAndQueue+0x50>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	b11b      	cbz	r3, 800ace6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acde:	f7fe fba3 	bl	8009428 <vPortExitCritical>
}
 800ace2:	b003      	add	sp, #12
 800ace4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800ace6:	4d0f      	ldr	r5, [pc, #60]	; (800ad24 <prvCheckForValidListAndQueue+0x54>)
 800ace8:	4628      	mov	r0, r5
 800acea:	f7fe fae1 	bl	80092b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800acee:	4c0e      	ldr	r4, [pc, #56]	; (800ad28 <prvCheckForValidListAndQueue+0x58>)
 800acf0:	4620      	mov	r0, r4
 800acf2:	f7fe fadd 	bl	80092b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acf6:	4b0d      	ldr	r3, [pc, #52]	; (800ad2c <prvCheckForValidListAndQueue+0x5c>)
 800acf8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800acfa:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <prvCheckForValidListAndQueue+0x60>)
 800acfc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acfe:	2300      	movs	r3, #0
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	4b0c      	ldr	r3, [pc, #48]	; (800ad34 <prvCheckForValidListAndQueue+0x64>)
 800ad04:	4a0c      	ldr	r2, [pc, #48]	; (800ad38 <prvCheckForValidListAndQueue+0x68>)
 800ad06:	2110      	movs	r1, #16
 800ad08:	200a      	movs	r0, #10
 800ad0a:	f7fe fe22 	bl	8009952 <xQueueGenericCreateStatic>
 800ad0e:	4b04      	ldr	r3, [pc, #16]	; (800ad20 <prvCheckForValidListAndQueue+0x50>)
 800ad10:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800ad12:	2800      	cmp	r0, #0
 800ad14:	d0e3      	beq.n	800acde <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad16:	4909      	ldr	r1, [pc, #36]	; (800ad3c <prvCheckForValidListAndQueue+0x6c>)
 800ad18:	f7ff f83e 	bl	8009d98 <vQueueAddToRegistry>
 800ad1c:	e7df      	b.n	800acde <prvCheckForValidListAndQueue+0xe>
 800ad1e:	bf00      	nop
 800ad20:	200033b4 	.word	0x200033b4
 800ad24:	20003338 	.word	0x20003338
 800ad28:	2000334c 	.word	0x2000334c
 800ad2c:	20003290 	.word	0x20003290
 800ad30:	20003294 	.word	0x20003294
 800ad34:	20003364 	.word	0x20003364
 800ad38:	20003298 	.word	0x20003298
 800ad3c:	08016650 	.word	0x08016650

0800ad40 <xTimerCreateTimerTask>:
{
 800ad40:	b510      	push	{r4, lr}
 800ad42:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ad44:	f7ff ffc4 	bl	800acd0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ad48:	4b12      	ldr	r3, [pc, #72]	; (800ad94 <xTimerCreateTimerTask+0x54>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	b1cb      	cbz	r3, 800ad82 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad4e:	2400      	movs	r4, #0
 800ad50:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad52:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad54:	aa07      	add	r2, sp, #28
 800ad56:	a906      	add	r1, sp, #24
 800ad58:	a805      	add	r0, sp, #20
 800ad5a:	f7fe f98b 	bl	8009074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad5e:	9b05      	ldr	r3, [sp, #20]
 800ad60:	9302      	str	r3, [sp, #8]
 800ad62:	9b06      	ldr	r3, [sp, #24]
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	2302      	movs	r3, #2
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	4623      	mov	r3, r4
 800ad6c:	9a07      	ldr	r2, [sp, #28]
 800ad6e:	490a      	ldr	r1, [pc, #40]	; (800ad98 <xTimerCreateTimerTask+0x58>)
 800ad70:	480a      	ldr	r0, [pc, #40]	; (800ad9c <xTimerCreateTimerTask+0x5c>)
 800ad72:	f7ff f9e3 	bl	800a13c <xTaskCreateStatic>
 800ad76:	4b0a      	ldr	r3, [pc, #40]	; (800ada0 <xTimerCreateTimerTask+0x60>)
 800ad78:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800ad7a:	b110      	cbz	r0, 800ad82 <xTimerCreateTimerTask+0x42>
}
 800ad7c:	2001      	movs	r0, #1
 800ad7e:	b008      	add	sp, #32
 800ad80:	bd10      	pop	{r4, pc}
 800ad82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad86:	f383 8811 	msr	BASEPRI, r3
 800ad8a:	f3bf 8f6f 	isb	sy
 800ad8e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800ad92:	e7fe      	b.n	800ad92 <xTimerCreateTimerTask+0x52>
 800ad94:	200033b4 	.word	0x200033b4
 800ad98:	08016658 	.word	0x08016658
 800ad9c:	0800b0a5 	.word	0x0800b0a5
 800ada0:	200033b8 	.word	0x200033b8

0800ada4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800ada4:	b1b8      	cbz	r0, 800add6 <xTimerGenericCommand+0x32>
 800ada6:	469c      	mov	ip, r3
 800ada8:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800adaa:	4818      	ldr	r0, [pc, #96]	; (800ae0c <xTimerGenericCommand+0x68>)
 800adac:	6800      	ldr	r0, [r0, #0]
 800adae:	b358      	cbz	r0, 800ae08 <xTimerGenericCommand+0x64>
{
 800adb0:	b500      	push	{lr}
 800adb2:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800adb4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adb6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adb8:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800adba:	2905      	cmp	r1, #5
 800adbc:	dc1c      	bgt.n	800adf8 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800adbe:	f7ff fd93 	bl	800a8e8 <xTaskGetSchedulerState>
 800adc2:	2802      	cmp	r0, #2
 800adc4:	d010      	beq.n	800ade8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800adc6:	2300      	movs	r3, #0
 800adc8:	461a      	mov	r2, r3
 800adca:	4669      	mov	r1, sp
 800adcc:	480f      	ldr	r0, [pc, #60]	; (800ae0c <xTimerGenericCommand+0x68>)
 800adce:	6800      	ldr	r0, [r0, #0]
 800add0:	f7fe fe09 	bl	80099e6 <xQueueGenericSend>
 800add4:	e015      	b.n	800ae02 <xTimerGenericCommand+0x5e>
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	f383 8811 	msr	BASEPRI, r3
 800adde:	f3bf 8f6f 	isb	sy
 800ade2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800ade6:	e7fe      	b.n	800ade6 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ade8:	2300      	movs	r3, #0
 800adea:	9a06      	ldr	r2, [sp, #24]
 800adec:	4669      	mov	r1, sp
 800adee:	4807      	ldr	r0, [pc, #28]	; (800ae0c <xTimerGenericCommand+0x68>)
 800adf0:	6800      	ldr	r0, [r0, #0]
 800adf2:	f7fe fdf8 	bl	80099e6 <xQueueGenericSend>
 800adf6:	e004      	b.n	800ae02 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800adf8:	2300      	movs	r3, #0
 800adfa:	4662      	mov	r2, ip
 800adfc:	4669      	mov	r1, sp
 800adfe:	f7fe feb6 	bl	8009b6e <xQueueGenericSendFromISR>
}
 800ae02:	b005      	add	sp, #20
 800ae04:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800ae08:	2000      	movs	r0, #0
}
 800ae0a:	4770      	bx	lr
 800ae0c:	200033b4 	.word	0x200033b4

0800ae10 <prvSwitchTimerLists>:
{
 800ae10:	b570      	push	{r4, r5, r6, lr}
 800ae12:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae14:	4b1b      	ldr	r3, [pc, #108]	; (800ae84 <prvSwitchTimerLists+0x74>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	b362      	cbz	r2, 800ae76 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae20:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae22:	1d25      	adds	r5, r4, #4
 800ae24:	4628      	mov	r0, r5
 800ae26:	f7fe fa75 	bl	8009314 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae2a:	6a23      	ldr	r3, [r4, #32]
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae30:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ae34:	f013 0f04 	tst.w	r3, #4
 800ae38:	d0ec      	beq.n	800ae14 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae3a:	69a3      	ldr	r3, [r4, #24]
 800ae3c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800ae3e:	429e      	cmp	r6, r3
 800ae40:	d207      	bcs.n	800ae52 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae42:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae44:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae46:	4629      	mov	r1, r5
 800ae48:	4b0e      	ldr	r3, [pc, #56]	; (800ae84 <prvSwitchTimerLists+0x74>)
 800ae4a:	6818      	ldr	r0, [r3, #0]
 800ae4c:	f7fe fa49 	bl	80092e2 <vListInsert>
 800ae50:	e7e0      	b.n	800ae14 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae52:	2100      	movs	r1, #0
 800ae54:	9100      	str	r1, [sp, #0]
 800ae56:	460b      	mov	r3, r1
 800ae58:	4632      	mov	r2, r6
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f7ff ffa2 	bl	800ada4 <xTimerGenericCommand>
				configASSERT( xResult );
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d1d7      	bne.n	800ae14 <prvSwitchTimerLists+0x4>
 800ae64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	e7fe      	b.n	800ae74 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800ae76:	4a04      	ldr	r2, [pc, #16]	; (800ae88 <prvSwitchTimerLists+0x78>)
 800ae78:	6810      	ldr	r0, [r2, #0]
 800ae7a:	4902      	ldr	r1, [pc, #8]	; (800ae84 <prvSwitchTimerLists+0x74>)
 800ae7c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800ae7e:	6013      	str	r3, [r2, #0]
}
 800ae80:	b002      	add	sp, #8
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	20003290 	.word	0x20003290
 800ae88:	20003294 	.word	0x20003294

0800ae8c <prvSampleTimeNow>:
{
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800ae90:	f7ff fa1a 	bl	800a2c8 <xTaskGetTickCount>
 800ae94:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800ae96:	4b07      	ldr	r3, [pc, #28]	; (800aeb4 <prvSampleTimeNow+0x28>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4283      	cmp	r3, r0
 800ae9c:	d805      	bhi.n	800aeaa <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800aea2:	4b04      	ldr	r3, [pc, #16]	; (800aeb4 <prvSampleTimeNow+0x28>)
 800aea4:	601c      	str	r4, [r3, #0]
}
 800aea6:	4620      	mov	r0, r4
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800aeaa:	f7ff ffb1 	bl	800ae10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	602b      	str	r3, [r5, #0]
 800aeb2:	e7f6      	b.n	800aea2 <prvSampleTimeNow+0x16>
 800aeb4:	20003360 	.word	0x20003360

0800aeb8 <prvProcessExpiredTimer>:
{
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	4606      	mov	r6, r0
 800aebe:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aec0:	4917      	ldr	r1, [pc, #92]	; (800af20 <prvProcessExpiredTimer+0x68>)
 800aec2:	6809      	ldr	r1, [r1, #0]
 800aec4:	68c9      	ldr	r1, [r1, #12]
 800aec6:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aec8:	1d20      	adds	r0, r4, #4
 800aeca:	f7fe fa23 	bl	8009314 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aece:	f894 c028 	ldrb.w	ip, [r4, #40]	; 0x28
 800aed2:	f01c 0f04 	tst.w	ip, #4
 800aed6:	d108      	bne.n	800aeea <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aed8:	f02c 0c01 	bic.w	ip, ip, #1
 800aedc:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aee0:	6a23      	ldr	r3, [r4, #32]
 800aee2:	4620      	mov	r0, r4
 800aee4:	4798      	blx	r3
}
 800aee6:	b002      	add	sp, #8
 800aee8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aeea:	69a1      	ldr	r1, [r4, #24]
 800aeec:	4633      	mov	r3, r6
 800aeee:	462a      	mov	r2, r5
 800aef0:	4431      	add	r1, r6
 800aef2:	4620      	mov	r0, r4
 800aef4:	f7ff fec8 	bl	800ac88 <prvInsertTimerInActiveList>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d0f1      	beq.n	800aee0 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aefc:	2100      	movs	r1, #0
 800aefe:	9100      	str	r1, [sp, #0]
 800af00:	460b      	mov	r3, r1
 800af02:	4632      	mov	r2, r6
 800af04:	4620      	mov	r0, r4
 800af06:	f7ff ff4d 	bl	800ada4 <xTimerGenericCommand>
			configASSERT( xResult );
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d1e8      	bne.n	800aee0 <prvProcessExpiredTimer+0x28>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	e7fe      	b.n	800af1e <prvProcessExpiredTimer+0x66>
 800af20:	20003290 	.word	0x20003290

0800af24 <prvProcessTimerOrBlockTask>:
{
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	4606      	mov	r6, r0
 800af2a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800af2c:	f7ff f9c4 	bl	800a2b8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af30:	a801      	add	r0, sp, #4
 800af32:	f7ff ffab 	bl	800ae8c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	bb33      	cbnz	r3, 800af88 <prvProcessTimerOrBlockTask+0x64>
 800af3a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af3c:	b90c      	cbnz	r4, 800af42 <prvProcessTimerOrBlockTask+0x1e>
 800af3e:	42b0      	cmp	r0, r6
 800af40:	d219      	bcs.n	800af76 <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
 800af42:	b124      	cbz	r4, 800af4e <prvProcessTimerOrBlockTask+0x2a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af44:	4a12      	ldr	r2, [pc, #72]	; (800af90 <prvProcessTimerOrBlockTask+0x6c>)
 800af46:	6812      	ldr	r2, [r2, #0]
 800af48:	6812      	ldr	r2, [r2, #0]
 800af4a:	b9da      	cbnz	r2, 800af84 <prvProcessTimerOrBlockTask+0x60>
 800af4c:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af4e:	4622      	mov	r2, r4
 800af50:	1b71      	subs	r1, r6, r5
 800af52:	4b10      	ldr	r3, [pc, #64]	; (800af94 <prvProcessTimerOrBlockTask+0x70>)
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	f7fe ff33 	bl	8009dc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af5a:	f7ff fa61 	bl	800a420 <xTaskResumeAll>
 800af5e:	b9a8      	cbnz	r0, 800af8c <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800af60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800af64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af68:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	e00a      	b.n	800af8c <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800af76:	f7ff fa53 	bl	800a420 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af7a:	4629      	mov	r1, r5
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff ff9b 	bl	800aeb8 <prvProcessExpiredTimer>
 800af82:	e003      	b.n	800af8c <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af84:	461c      	mov	r4, r3
 800af86:	e7e2      	b.n	800af4e <prvProcessTimerOrBlockTask+0x2a>
			( void ) xTaskResumeAll();
 800af88:	f7ff fa4a 	bl	800a420 <xTaskResumeAll>
}
 800af8c:	b002      	add	sp, #8
 800af8e:	bd70      	pop	{r4, r5, r6, pc}
 800af90:	20003294 	.word	0x20003294
 800af94:	200033b4 	.word	0x200033b4

0800af98 <prvProcessReceivedCommands>:
{
 800af98:	b510      	push	{r4, lr}
 800af9a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af9c:	e002      	b.n	800afa4 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af9e:	9b04      	ldr	r3, [sp, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	da0f      	bge.n	800afc4 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800afa4:	2200      	movs	r2, #0
 800afa6:	a904      	add	r1, sp, #16
 800afa8:	4b3d      	ldr	r3, [pc, #244]	; (800b0a0 <prvProcessReceivedCommands+0x108>)
 800afaa:	6818      	ldr	r0, [r3, #0]
 800afac:	f7fe fe45 	bl	8009c3a <xQueueReceive>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d073      	beq.n	800b09c <prvProcessReceivedCommands+0x104>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800afb4:	9b04      	ldr	r3, [sp, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	daf1      	bge.n	800af9e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800afba:	9907      	ldr	r1, [sp, #28]
 800afbc:	9806      	ldr	r0, [sp, #24]
 800afbe:	9b05      	ldr	r3, [sp, #20]
 800afc0:	4798      	blx	r3
 800afc2:	e7ec      	b.n	800af9e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800afc4:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afc6:	6963      	ldr	r3, [r4, #20]
 800afc8:	b113      	cbz	r3, 800afd0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afca:	1d20      	adds	r0, r4, #4
 800afcc:	f7fe f9a2 	bl	8009314 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afd0:	a803      	add	r0, sp, #12
 800afd2:	f7ff ff5b 	bl	800ae8c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800afd6:	9b04      	ldr	r3, [sp, #16]
 800afd8:	2b09      	cmp	r3, #9
 800afda:	d8e3      	bhi.n	800afa4 <prvProcessReceivedCommands+0xc>
 800afdc:	e8df f003 	tbb	[pc, r3]
 800afe0:	30050505 	.word	0x30050505
 800afe4:	05055037 	.word	0x05055037
 800afe8:	3730      	.short	0x3730
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800afee:	f043 0301 	orr.w	r3, r3, #1
 800aff2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aff6:	9b05      	ldr	r3, [sp, #20]
 800aff8:	69a1      	ldr	r1, [r4, #24]
 800affa:	4602      	mov	r2, r0
 800affc:	4419      	add	r1, r3
 800affe:	4620      	mov	r0, r4
 800b000:	f7ff fe42 	bl	800ac88 <prvInsertTimerInActiveList>
 800b004:	2800      	cmp	r0, #0
 800b006:	d0cd      	beq.n	800afa4 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b008:	6a23      	ldr	r3, [r4, #32]
 800b00a:	4620      	mov	r0, r4
 800b00c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b00e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b012:	f013 0f04 	tst.w	r3, #4
 800b016:	d0c5      	beq.n	800afa4 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b018:	69a2      	ldr	r2, [r4, #24]
 800b01a:	2100      	movs	r1, #0
 800b01c:	9100      	str	r1, [sp, #0]
 800b01e:	460b      	mov	r3, r1
 800b020:	9805      	ldr	r0, [sp, #20]
 800b022:	4402      	add	r2, r0
 800b024:	4620      	mov	r0, r4
 800b026:	f7ff febd 	bl	800ada4 <xTimerGenericCommand>
							configASSERT( xResult );
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d1ba      	bne.n	800afa4 <prvProcessReceivedCommands+0xc>
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	e7fe      	b.n	800b03e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b040:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b044:	f023 0301 	bic.w	r3, r3, #1
 800b048:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800b04c:	e7aa      	b.n	800afa4 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b04e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b05a:	9905      	ldr	r1, [sp, #20]
 800b05c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b05e:	b131      	cbz	r1, 800b06e <prvProcessReceivedCommands+0xd6>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b060:	4603      	mov	r3, r0
 800b062:	4602      	mov	r2, r0
 800b064:	4401      	add	r1, r0
 800b066:	4620      	mov	r0, r4
 800b068:	f7ff fe0e 	bl	800ac88 <prvInsertTimerInActiveList>
					break;
 800b06c:	e79a      	b.n	800afa4 <prvProcessReceivedCommands+0xc>
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b07e:	e7fe      	b.n	800b07e <prvProcessReceivedCommands+0xe6>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b080:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b084:	f013 0f02 	tst.w	r3, #2
 800b088:	d004      	beq.n	800b094 <prvProcessReceivedCommands+0xfc>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b08a:	f023 0301 	bic.w	r3, r3, #1
 800b08e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b092:	e787      	b.n	800afa4 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800b094:	4620      	mov	r0, r4
 800b096:	f7fe f8d3 	bl	8009240 <vPortFree>
 800b09a:	e783      	b.n	800afa4 <prvProcessReceivedCommands+0xc>
}
 800b09c:	b008      	add	sp, #32
 800b09e:	bd10      	pop	{r4, pc}
 800b0a0:	200033b4 	.word	0x200033b4

0800b0a4 <prvTimerTask>:
{
 800b0a4:	b500      	push	{lr}
 800b0a6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b0a8:	a801      	add	r0, sp, #4
 800b0aa:	f7ff fddd 	bl	800ac68 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b0ae:	9901      	ldr	r1, [sp, #4]
 800b0b0:	f7ff ff38 	bl	800af24 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800b0b4:	f7ff ff70 	bl	800af98 <prvProcessReceivedCommands>
	for( ;; )
 800b0b8:	e7f6      	b.n	800b0a8 <prvTimerTask+0x4>
	...

0800b0bc <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800b0bc:	2804      	cmp	r0, #4
 800b0be:	d807      	bhi.n	800b0d0 <LmHandlerPackageIsInitialized+0x14>
{
 800b0c0:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800b0c2:	4b05      	ldr	r3, [pc, #20]	; (800b0d8 <LmHandlerPackageIsInitialized+0x1c>)
 800b0c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	b11b      	cbz	r3, 800b0d4 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800b0cc:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800b0ce:	bd08      	pop	{r3, pc}
        return false;
 800b0d0:	2000      	movs	r0, #0
}
 800b0d2:	4770      	bx	lr
        return false;
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	e7fa      	b.n	800b0ce <LmHandlerPackageIsInitialized+0x12>
 800b0d8:	200034bc 	.word	0x200034bc

0800b0dc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	4605      	mov	r5, r0
 800b0e0:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b0e2:	2400      	movs	r4, #0
 800b0e4:	e005      	b.n	800b0f2 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	b10b      	cbz	r3, 800b0ee <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b0ee:	3401      	adds	r4, #1
 800b0f0:	b264      	sxtb	r4, r4
 800b0f2:	2c04      	cmp	r4, #4
 800b0f4:	dc24      	bgt.n	800b140 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800b0f6:	4b13      	ldr	r3, [pc, #76]	; (800b144 <LmHandlerPackagesNotify+0x68>)
 800b0f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0f6      	beq.n	800b0ee <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800b100:	2d03      	cmp	r5, #3
 800b102:	d8f4      	bhi.n	800b0ee <LmHandlerPackagesNotify+0x12>
 800b104:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <LmHandlerPackagesNotify+0x30>)
 800b106:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800b0e7 	.word	0x0800b0e7
 800b110:	0800b11d 	.word	0x0800b11d
 800b114:	0800b129 	.word	0x0800b129
 800b118:	0800b135 	.word	0x0800b135
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d0e5      	beq.n	800b0ee <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800b122:	4630      	mov	r0, r6
 800b124:	4798      	blx	r3
 800b126:	e7e2      	b.n	800b0ee <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0df      	beq.n	800b0ee <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800b12e:	4630      	mov	r0, r6
 800b130:	4798      	blx	r3
 800b132:	e7dc      	b.n	800b0ee <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800b134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0d9      	beq.n	800b0ee <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800b13a:	4630      	mov	r0, r6
 800b13c:	4798      	blx	r3
 800b13e:	e7d6      	b.n	800b0ee <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 800b140:	bd70      	pop	{r4, r5, r6, pc}
 800b142:	bf00      	nop
 800b144:	200034bc 	.word	0x200034bc

0800b148 <MlmeIndication>:
{
 800b148:	b510      	push	{r4, lr}
 800b14a:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800b14c:	4b14      	ldr	r3, [pc, #80]	; (800b1a0 <MlmeIndication+0x58>)
 800b14e:	2200      	movs	r2, #0
 800b150:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800b152:	7842      	ldrb	r2, [r0, #1]
 800b154:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800b156:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800b15a:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b15c:	f9b1 2000 	ldrsh.w	r2, [r1]
 800b160:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800b162:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800b166:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b168:	78ca      	ldrb	r2, [r1, #3]
 800b16a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800b16c:	6842      	ldr	r2, [r0, #4]
 800b16e:	60da      	str	r2, [r3, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800b170:	7803      	ldrb	r3, [r0, #0]
 800b172:	2b0a      	cmp	r3, #10
 800b174:	d007      	beq.n	800b186 <MlmeIndication+0x3e>
 800b176:	2b0e      	cmp	r3, #14
 800b178:	d005      	beq.n	800b186 <MlmeIndication+0x3e>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800b17a:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <MlmeIndication+0x5c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	4907      	ldr	r1, [pc, #28]	; (800b1a0 <MlmeIndication+0x58>)
 800b182:	2000      	movs	r0, #0
 800b184:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800b186:	4621      	mov	r1, r4
 800b188:	2003      	movs	r0, #3
 800b18a:	f7ff ffa7 	bl	800b0dc <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 800b18e:	7823      	ldrb	r3, [r4, #0]
 800b190:	2b06      	cmp	r3, #6
 800b192:	d000      	beq.n	800b196 <MlmeIndication+0x4e>
}
 800b194:	bd10      	pop	{r4, pc}
            IsUplinkTxPending = true;
 800b196:	4b04      	ldr	r3, [pc, #16]	; (800b1a8 <MlmeIndication+0x60>)
 800b198:	2201      	movs	r2, #1
 800b19a:	701a      	strb	r2, [r3, #0]
}
 800b19c:	e7fa      	b.n	800b194 <MlmeIndication+0x4c>
 800b19e:	bf00      	nop
 800b1a0:	2000009c 	.word	0x2000009c
 800b1a4:	200034b8 	.word	0x200034b8
 800b1a8:	200034b4 	.word	0x200034b4

0800b1ac <McpsConfirm>:
{
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800b1b0:	480c      	ldr	r0, [pc, #48]	; (800b1e4 <McpsConfirm+0x38>)
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 800b1b6:	7863      	ldrb	r3, [r4, #1]
 800b1b8:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800b1ba:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800b1be:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800b1c0:	68e3      	ldr	r3, [r4, #12]
 800b1c2:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800b1c4:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800b1c8:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800b1ce:	7923      	ldrb	r3, [r4, #4]
 800b1d0:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800b1d2:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <McpsConfirm+0x3c>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1d8:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800b1da:	4621      	mov	r1, r4
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f7ff ff7d 	bl	800b0dc <LmHandlerPackagesNotify>
}
 800b1e2:	bd10      	pop	{r4, pc}
 800b1e4:	200000b0 	.word	0x200000b0
 800b1e8:	200034b8 	.word	0x200034b8

0800b1ec <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800b1ec:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b1ee:	2400      	movs	r4, #0
 800b1f0:	e001      	b.n	800b1f6 <LmHandlerPackageIsTxPending+0xa>
 800b1f2:	3401      	adds	r4, #1
 800b1f4:	b264      	sxtb	r4, r4
 800b1f6:	2c04      	cmp	r4, #4
 800b1f8:	dc0a      	bgt.n	800b210 <LmHandlerPackageIsTxPending+0x24>
    {
        if( LmHandlerPackages[i] != NULL )
 800b1fa:	4b07      	ldr	r3, [pc, #28]	; (800b218 <LmHandlerPackageIsTxPending+0x2c>)
 800b1fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d0f6      	beq.n	800b1f2 <LmHandlerPackageIsTxPending+0x6>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	4798      	blx	r3
 800b208:	4603      	mov	r3, r0
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d0f1      	beq.n	800b1f2 <LmHandlerPackageIsTxPending+0x6>
 800b20e:	e000      	b.n	800b212 <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	bd10      	pop	{r4, pc}
 800b216:	bf00      	nop
 800b218:	200034bc 	.word	0x200034bc

0800b21c <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800b21c:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800b21e:	2400      	movs	r4, #0
 800b220:	e001      	b.n	800b226 <LmHandlerPackagesProcess+0xa>
 800b222:	3401      	adds	r4, #1
 800b224:	b264      	sxtb	r4, r4
 800b226:	2c04      	cmp	r4, #4
 800b228:	dc12      	bgt.n	800b250 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800b22a:	4b0a      	ldr	r3, [pc, #40]	; (800b254 <LmHandlerPackagesProcess+0x38>)
 800b22c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d0f6      	beq.n	800b222 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800b234:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800b236:	2b00      	cmp	r3, #0
 800b238:	d0f3      	beq.n	800b222 <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800b23a:	b2e0      	uxtb	r0, r4
 800b23c:	f7ff ff3e 	bl	800b0bc <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800b240:	2800      	cmp	r0, #0
 800b242:	d0ee      	beq.n	800b222 <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800b244:	4b03      	ldr	r3, [pc, #12]	; (800b254 <LmHandlerPackagesProcess+0x38>)
 800b246:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	4798      	blx	r3
 800b24e:	e7e8      	b.n	800b222 <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800b250:	bd38      	pop	{r3, r4, r5, pc}
 800b252:	bf00      	nop
 800b254:	200034bc 	.word	0x200034bc

0800b258 <LmHandlerJoin>:
{
 800b258:	b510      	push	{r4, lr}
 800b25a:	b08e      	sub	sp, #56	; 0x38
 800b25c:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800b25e:	2301      	movs	r3, #1
 800b260:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800b264:	4b26      	ldr	r3, [pc, #152]	; (800b300 <LmHandlerJoin+0xa8>)
 800b266:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800b26a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
    if ( mode == ACTIVATION_TYPE_OTAA )
 800b26e:	2802      	cmp	r0, #2
 800b270:	d021      	beq.n	800b2b6 <LmHandlerJoin+0x5e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b272:	2101      	movs	r1, #1
 800b274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800b278:	4b22      	ldr	r3, [pc, #136]	; (800b304 <LmHandlerJoin+0xac>)
 800b27a:	7199      	strb	r1, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800b27c:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b27e:	2100      	movs	r1, #0
 800b280:	7159      	strb	r1, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800b282:	71dc      	strb	r4, [r3, #7]
        if (CtxRestoreDone == false)
 800b284:	4b20      	ldr	r3, [pc, #128]	; (800b308 <LmHandlerJoin+0xb0>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	b1f3      	cbz	r3, 800b2c8 <LmHandlerJoin+0x70>
        LoRaMacStart();
 800b28a:	f003 fa4d 	bl	800e728 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b28e:	2301      	movs	r3, #1
 800b290:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800b294:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b298:	4668      	mov	r0, sp
 800b29a:	f003 fc4d 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800b29e:	4b1a      	ldr	r3, [pc, #104]	; (800b308 <LmHandlerJoin+0xb0>)
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b103      	cbz	r3, 800b2a6 <LmHandlerJoin+0x4e>
 800b2a4:	b114      	cbz	r4, 800b2ac <LmHandlerJoin+0x54>
        LoRaMacMlmeRequest( &mlmeReq );
 800b2a6:	a809      	add	r0, sp, #36	; 0x24
 800b2a8:	f003 fecc 	bl	800f044 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800b2ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2ae:	4b17      	ldr	r3, [pc, #92]	; (800b30c <LmHandlerJoin+0xb4>)
 800b2b0:	601a      	str	r2, [r3, #0]
}
 800b2b2:	b00e      	add	sp, #56	; 0x38
 800b2b4:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800b2bc:	4b11      	ldr	r3, [pc, #68]	; (800b304 <LmHandlerJoin+0xac>)
 800b2be:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800b2c0:	71d9      	strb	r1, [r3, #7]
        LoRaMacStart();
 800b2c2:	f003 fa31 	bl	800e728 <LoRaMacStart>
 800b2c6:	e7ea      	b.n	800b29e <LmHandlerJoin+0x46>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800b2c8:	231f      	movs	r3, #31
 800b2ca:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800b2ce:	f88d 2004 	strb.w	r2, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b2d2:	4668      	mov	r0, sp
 800b2d4:	f003 fc30 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800b2d8:	2320      	movs	r3, #32
 800b2da:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800b2de:	4b08      	ldr	r3, [pc, #32]	; (800b300 <LmHandlerJoin+0xa8>)
 800b2e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b2e4:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800b2e8:	4668      	mov	r0, sp
 800b2ea:	f003 fc25 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800b2ee:	2329      	movs	r3, #41	; 0x29
 800b2f0:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800b2f4:	4b06      	ldr	r3, [pc, #24]	; (800b310 <LmHandlerJoin+0xb8>)
 800b2f6:	9301      	str	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800b2f8:	4668      	mov	r0, sp
 800b2fa:	f003 fc1d 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
 800b2fe:	e7c4      	b.n	800b28a <LmHandlerJoin+0x32>
 800b300:	200034d0 	.word	0x200034d0
 800b304:	20000094 	.word	0x20000094
 800b308:	200034ae 	.word	0x200034ae
 800b30c:	200034b0 	.word	0x200034b0
 800b310:	01000400 	.word	0x01000400

0800b314 <LmHandlerDeviceTimeReq>:
{
 800b314:	b500      	push	{lr}
 800b316:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800b318:	2309      	movs	r3, #9
 800b31a:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800b31e:	a801      	add	r0, sp, #4
 800b320:	f003 fe90 	bl	800f044 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800b324:	9a05      	ldr	r2, [sp, #20]
 800b326:	4b04      	ldr	r3, [pc, #16]	; (800b338 <LmHandlerDeviceTimeReq+0x24>)
 800b328:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800b32a:	b910      	cbnz	r0, 800b332 <LmHandlerDeviceTimeReq+0x1e>
}
 800b32c:	b007      	add	sp, #28
 800b32e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800b332:	f04f 30ff 	mov.w	r0, #4294967295
 800b336:	e7f9      	b.n	800b32c <LmHandlerDeviceTimeReq+0x18>
 800b338:	200034b0 	.word	0x200034b0

0800b33c <LmHandlerGetDutyCycleWaitTime>:
}
 800b33c:	4b01      	ldr	r3, [pc, #4]	; (800b344 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800b33e:	6818      	ldr	r0, [r3, #0]
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	200034b0 	.word	0x200034b0

0800b348 <LmHandlerJoinStatus>:
{
 800b348:	b500      	push	{lr}
 800b34a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800b352:	a801      	add	r0, sp, #4
 800b354:	f003 faa2 	bl	800e89c <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800b358:	b920      	cbnz	r0, 800b364 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b35a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800b35e:	b110      	cbz	r0, 800b366 <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800b360:	2001      	movs	r0, #1
 800b362:	e000      	b.n	800b366 <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800b364:	2000      	movs	r0, #0
}
 800b366:	b00b      	add	sp, #44	; 0x2c
 800b368:	f85d fb04 	ldr.w	pc, [sp], #4

0800b36c <LmHandlerSend>:
{
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
 800b374:	4616      	mov	r6, r2
    if (LoRaMacIsBusy() == true)
 800b376:	f002 ff91 	bl	800e29c <LoRaMacIsBusy>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d164      	bne.n	800b448 <LmHandlerSend+0xdc>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800b37e:	f7ff ffe3 	bl	800b348 <LmHandlerJoinStatus>
 800b382:	2801      	cmp	r0, #1
 800b384:	d137      	bne.n	800b3f6 <LmHandlerSend+0x8a>
    TxParams.MsgType = isTxConfirmed;
 800b386:	4b33      	ldr	r3, [pc, #204]	; (800b454 <LmHandlerSend+0xe8>)
 800b388:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800b38a:	3d00      	subs	r5, #0
 800b38c:	bf18      	it	ne
 800b38e:	2501      	movne	r5, #1
 800b390:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800b394:	4b30      	ldr	r3, [pc, #192]	; (800b458 <LmHandlerSend+0xec>)
 800b396:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b39a:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800b39e:	4669      	mov	r1, sp
 800b3a0:	7860      	ldrb	r0, [r4, #1]
 800b3a2:	f003 fa0f 	bl	800e7c4 <LoRaMacQueryTxPossible>
 800b3a6:	b370      	cbz	r0, 800b406 <LmHandlerSend+0x9a>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800b3ae:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800b3b0:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800b3b4:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800b3b8:	4b26      	ldr	r3, [pc, #152]	; (800b454 <LmHandlerSend+0xe8>)
 800b3ba:	f103 0c10 	add.w	ip, r3, #16
 800b3be:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b3c2:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800b3c6:	4a24      	ldr	r2, [pc, #144]	; (800b458 <LmHandlerSend+0xec>)
 800b3c8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800b3cc:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	a801      	add	r0, sp, #4
 800b3d2:	f003 ff31 	bl	800f238 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800b3d6:	9a05      	ldr	r2, [sp, #20]
 800b3d8:	4b20      	ldr	r3, [pc, #128]	; (800b45c <LmHandlerSend+0xf0>)
 800b3da:	601a      	str	r2, [r3, #0]
    switch (status)
 800b3dc:	2811      	cmp	r0, #17
 800b3de:	d830      	bhi.n	800b442 <LmHandlerSend+0xd6>
 800b3e0:	e8df f000 	tbb	[pc, r0]
 800b3e4:	2f2f1c21 	.word	0x2f2f1c21
 800b3e8:	352f2f2f 	.word	0x352f2f2f
 800b3ec:	2c2f2f2f 	.word	0x2c2f2f2f
 800b3f0:	1c1c2f2f 	.word	0x1c1c2f2f
 800b3f4:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800b3f6:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <LmHandlerSend+0xf4>)
 800b3f8:	79d9      	ldrb	r1, [r3, #7]
 800b3fa:	7998      	ldrb	r0, [r3, #6]
 800b3fc:	f7ff ff2c 	bl	800b258 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b400:	f06f 0502 	mvn.w	r5, #2
 800b404:	e00c      	b.n	800b420 <LmHandlerSend+0xb4>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800b406:	7823      	ldrb	r3, [r4, #0]
 800b408:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800b40c:	7863      	ldrb	r3, [r4, #1]
 800b40e:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800b412:	6863      	ldr	r3, [r4, #4]
 800b414:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800b416:	f04f 35ff 	mov.w	r5, #4294967295
 800b41a:	e7cd      	b.n	800b3b8 <LmHandlerSend+0x4c>
    switch (status)
 800b41c:	f06f 0501 	mvn.w	r5, #1
}
 800b420:	4628      	mov	r0, r5
 800b422:	b006      	add	sp, #24
 800b424:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800b426:	4b0f      	ldr	r3, [pc, #60]	; (800b464 <LmHandlerSend+0xf8>)
 800b428:	2200      	movs	r2, #0
 800b42a:	701a      	strb	r2, [r3, #0]
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800b42c:	f115 0f07 	cmn.w	r5, #7
 800b430:	d0f6      	beq.n	800b420 <LmHandlerSend+0xb4>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800b432:	2500      	movs	r5, #0
 800b434:	e7f4      	b.n	800b420 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800b436:	f06f 0504 	mvn.w	r5, #4
            break;
 800b43a:	e7f1      	b.n	800b420 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800b43c:	f06f 0505 	mvn.w	r5, #5
            break;
 800b440:	e7ee      	b.n	800b420 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800b442:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800b446:	e7eb      	b.n	800b420 <LmHandlerSend+0xb4>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b448:	f06f 0501 	mvn.w	r5, #1
 800b44c:	e7e8      	b.n	800b420 <LmHandlerSend+0xb4>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b44e:	f06f 0502 	mvn.w	r5, #2
 800b452:	e7e5      	b.n	800b420 <LmHandlerSend+0xb4>
 800b454:	200000b0 	.word	0x200000b0
 800b458:	200034d0 	.word	0x200034d0
 800b45c:	200034b0 	.word	0x200034b0
 800b460:	20000094 	.word	0x20000094
 800b464:	200034b4 	.word	0x200034b4

0800b468 <LmHandlerProcess>:
{
 800b468:	b500      	push	{lr}
 800b46a:	b083      	sub	sp, #12
    LoRaMacProcess( );
 800b46c:	f002 ff30 	bl	800e2d0 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800b470:	f7ff fed4 	bl	800b21c <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800b474:	f7ff feba 	bl	800b1ec <LmHandlerPackageIsTxPending>
 800b478:	b910      	cbnz	r0, 800b480 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800b47a:	4b0b      	ldr	r3, [pc, #44]	; (800b4a8 <LmHandlerProcess+0x40>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	b913      	cbnz	r3, 800b486 <LmHandlerProcess+0x1e>
}
 800b480:	b003      	add	sp, #12
 800b482:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800b486:	2200      	movs	r2, #0
 800b488:	f88d 2000 	strb.w	r2, [sp]
 800b48c:	f88d 2001 	strb.w	r2, [sp, #1]
 800b490:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800b492:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <LmHandlerProcess+0x44>)
 800b494:	78d9      	ldrb	r1, [r3, #3]
 800b496:	4668      	mov	r0, sp
 800b498:	f7ff ff68 	bl	800b36c <LmHandlerSend>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d1ef      	bne.n	800b480 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800b4a0:	4b01      	ldr	r3, [pc, #4]	; (800b4a8 <LmHandlerProcess+0x40>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
 800b4a6:	e7eb      	b.n	800b480 <LmHandlerProcess+0x18>
 800b4a8:	200034b4 	.word	0x200034b4
 800b4ac:	200034d0 	.word	0x200034d0

0800b4b0 <LmHandlerRequestClass>:
{
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	b08a      	sub	sp, #40	; 0x28
 800b4b4:	4604      	mov	r4, r0
    if (LoRaMacIsBusy() == true)
 800b4b6:	f002 fef1 	bl	800e29c <LoRaMacIsBusy>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d136      	bne.n	800b52c <LmHandlerRequestClass+0x7c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800b4be:	f7ff ff43 	bl	800b348 <LmHandlerJoinStatus>
 800b4c2:	2801      	cmp	r0, #1
 800b4c4:	d135      	bne.n	800b532 <LmHandlerRequestClass+0x82>
    mibReq.Type = MIB_DEVICE_CLASS;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	f88d 3004 	strb.w	r3, [sp, #4]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b4cc:	a801      	add	r0, sp, #4
 800b4ce:	f003 f9e5 	bl	800e89c <LoRaMacMibGetRequestConfirm>
 800b4d2:	bb88      	cbnz	r0, 800b538 <LmHandlerRequestClass+0x88>
    currentClass = mibReq.Param.Class;
 800b4d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 800b4d8:	42a3      	cmp	r3, r4
 800b4da:	d030      	beq.n	800b53e <LmHandlerRequestClass+0x8e>
        switch( newClass )
 800b4dc:	2c01      	cmp	r4, #1
 800b4de:	d030      	beq.n	800b542 <LmHandlerRequestClass+0x92>
 800b4e0:	2c02      	cmp	r4, #2
 800b4e2:	d014      	beq.n	800b50e <LmHandlerRequestClass+0x5e>
 800b4e4:	b114      	cbz	r4, 800b4ec <LmHandlerRequestClass+0x3c>
 800b4e6:	2000      	movs	r0, #0
}
 800b4e8:	b00a      	add	sp, #40	; 0x28
 800b4ea:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 800b4ec:	b90b      	cbnz	r3, 800b4f2 <LmHandlerRequestClass+0x42>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b4ee:	2000      	movs	r0, #0
 800b4f0:	e7fa      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
                    mibReq.Param.Class = newClass;
 800b4f2:	f88d 4008 	strb.w	r4, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b4f6:	a801      	add	r0, sp, #4
 800b4f8:	f003 fb1e 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
 800b4fc:	bb20      	cbnz	r0, 800b548 <LmHandlerRequestClass+0x98>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800b4fe:	4b19      	ldr	r3, [pc, #100]	; (800b564 <LmHandlerRequestClass+0xb4>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b504:	b31b      	cbz	r3, 800b54e <LmHandlerRequestClass+0x9e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800b506:	4620      	mov	r0, r4
 800b508:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b50a:	2000      	movs	r0, #0
 800b50c:	e7ec      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
                if( currentClass != CLASS_A )
 800b50e:	bb03      	cbnz	r3, 800b552 <LmHandlerRequestClass+0xa2>
                    mibReq.Param.Class = newClass;
 800b510:	f88d 4008 	strb.w	r4, [sp, #8]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800b514:	a801      	add	r0, sp, #4
 800b516:	f003 fb0f 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
 800b51a:	b9e8      	cbnz	r0, 800b558 <LmHandlerRequestClass+0xa8>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800b51c:	4b11      	ldr	r3, [pc, #68]	; (800b564 <LmHandlerRequestClass+0xb4>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b522:	b1e3      	cbz	r3, 800b55e <LmHandlerRequestClass+0xae>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800b524:	4620      	mov	r0, r4
 800b526:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b528:	2000      	movs	r0, #0
 800b52a:	e7dd      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800b52c:	f06f 0001 	mvn.w	r0, #1
 800b530:	e7da      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800b532:	f06f 0002 	mvn.w	r0, #2
 800b536:	e7d7      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
        return LORAMAC_HANDLER_ERROR;
 800b538:	f04f 30ff 	mov.w	r0, #4294967295
 800b53c:	e7d4      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b53e:	2000      	movs	r0, #0
 800b540:	e7d2      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800b542:	f04f 30ff 	mov.w	r0, #4294967295
 800b546:	e7cf      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800b548:	f04f 30ff 	mov.w	r0, #4294967295
 800b54c:	e7cc      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b54e:	2000      	movs	r0, #0
 800b550:	e7ca      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800b552:	f04f 30ff 	mov.w	r0, #4294967295
 800b556:	e7c7      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800b558:	f04f 30ff 	mov.w	r0, #4294967295
 800b55c:	e7c4      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800b55e:	2000      	movs	r0, #0
 800b560:	e7c2      	b.n	800b4e8 <LmHandlerRequestClass+0x38>
 800b562:	bf00      	nop
 800b564:	200034b8 	.word	0x200034b8

0800b568 <LmHandlerGetCurrentClass>:
    if (deviceClass == NULL)
 800b568:	b170      	cbz	r0, 800b588 <LmHandlerGetCurrentClass+0x20>
{
 800b56a:	b510      	push	{r4, lr}
 800b56c:	b08a      	sub	sp, #40	; 0x28
 800b56e:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800b570:	2300      	movs	r3, #0
 800b572:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800b576:	a801      	add	r0, sp, #4
 800b578:	f003 f990 	bl	800e89c <LoRaMacMibGetRequestConfirm>
 800b57c:	b938      	cbnz	r0, 800b58e <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800b57e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b582:	7023      	strb	r3, [r4, #0]
}
 800b584:	b00a      	add	sp, #40	; 0x28
 800b586:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800b588:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b58c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800b58e:	f04f 30ff 	mov.w	r0, #4294967295
 800b592:	e7f7      	b.n	800b584 <LmHandlerGetCurrentClass+0x1c>

0800b594 <McpsIndication>:
{
 800b594:	b530      	push	{r4, r5, lr}
 800b596:	b085      	sub	sp, #20
 800b598:	460b      	mov	r3, r1
    DeviceClass_t deviceClass = CLASS_A;
 800b59a:	2200      	movs	r2, #0
 800b59c:	f88d 2007 	strb.w	r2, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800b5a0:	491d      	ldr	r1, [pc, #116]	; (800b618 <McpsIndication+0x84>)
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	700a      	strb	r2, [r1, #0]
    RxParams.Status = mcpsIndication->Status;
 800b5a6:	7842      	ldrb	r2, [r0, #1]
 800b5a8:	704a      	strb	r2, [r1, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800b5aa:	bb5a      	cbnz	r2, 800b604 <McpsIndication+0x70>
 800b5ac:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800b5ae:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800b5b2:	720a      	strb	r2, [r1, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800b5b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b5b8:	724a      	strb	r2, [r1, #9]
    RxParams.Snr = rxStatus->Snr;
 800b5ba:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800b5be:	728a      	strb	r2, [r1, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800b5c0:	78db      	ldrb	r3, [r3, #3]
 800b5c2:	740b      	strb	r3, [r1, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800b5c4:	6903      	ldr	r3, [r0, #16]
 800b5c6:	60cb      	str	r3, [r1, #12]
    appData.Port = mcpsIndication->Port;
 800b5c8:	78c3      	ldrb	r3, [r0, #3]
 800b5ca:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800b5ce:	7b03      	ldrb	r3, [r0, #12]
 800b5d0:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800b5d4:	6883      	ldr	r3, [r0, #8]
 800b5d6:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800b5d8:	4d10      	ldr	r5, [pc, #64]	; (800b61c <McpsIndication+0x88>)
 800b5da:	682b      	ldr	r3, [r5, #0]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	a802      	add	r0, sp, #8
 800b5e0:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800b5e2:	682b      	ldr	r3, [r5, #0]
 800b5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e6:	b113      	cbz	r3, 800b5ee <McpsIndication+0x5a>
 800b5e8:	7e22      	ldrb	r2, [r4, #24]
 800b5ea:	b102      	cbz	r2, 800b5ee <McpsIndication+0x5a>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800b5ec:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	f7ff fd73 	bl	800b0dc <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800b5f6:	f10d 0007 	add.w	r0, sp, #7
 800b5fa:	f7ff ffb5 	bl	800b568 <LmHandlerGetCurrentClass>
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800b5fe:	7963      	ldrb	r3, [r4, #5]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d001      	beq.n	800b608 <McpsIndication+0x74>
}
 800b604:	b005      	add	sp, #20
 800b606:	bd30      	pop	{r4, r5, pc}
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800b608:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1f9      	bne.n	800b604 <McpsIndication+0x70>
        IsUplinkTxPending = true;
 800b610:	4b03      	ldr	r3, [pc, #12]	; (800b620 <McpsIndication+0x8c>)
 800b612:	2201      	movs	r2, #1
 800b614:	701a      	strb	r2, [r3, #0]
 800b616:	e7f5      	b.n	800b604 <McpsIndication+0x70>
 800b618:	2000009c 	.word	0x2000009c
 800b61c:	200034b8 	.word	0x200034b8
 800b620:	200034b4 	.word	0x200034b4

0800b624 <LmHandlerGetTxDatarate>:
    if (txDatarate == NULL)
 800b624:	b180      	cbz	r0, 800b648 <LmHandlerGetTxDatarate+0x24>
{
 800b626:	b510      	push	{r4, lr}
 800b628:	b08a      	sub	sp, #40	; 0x28
 800b62a:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800b62c:	2320      	movs	r3, #32
 800b62e:	f88d 3004 	strb.w	r3, [sp, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800b632:	a801      	add	r0, sp, #4
 800b634:	f003 f932 	bl	800e89c <LoRaMacMibGetRequestConfirm>
 800b638:	b948      	cbnz	r0, 800b64e <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800b63a:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 800b63e:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800b640:	4a04      	ldr	r2, [pc, #16]	; (800b654 <LmHandlerGetTxDatarate+0x30>)
 800b642:	7113      	strb	r3, [r2, #4]
}
 800b644:	b00a      	add	sp, #40	; 0x28
 800b646:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b64c:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800b64e:	f04f 30ff 	mov.w	r0, #4294967295
 800b652:	e7f7      	b.n	800b644 <LmHandlerGetTxDatarate+0x20>
 800b654:	200034d0 	.word	0x200034d0

0800b658 <MlmeConfirm>:
{
 800b658:	b510      	push	{r4, lr}
 800b65a:	b08a      	sub	sp, #40	; 0x28
 800b65c:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800b65e:	4824      	ldr	r0, [pc, #144]	; (800b6f0 <MlmeConfirm+0x98>)
 800b660:	2300      	movs	r3, #0
 800b662:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 800b664:	7863      	ldrb	r3, [r4, #1]
 800b666:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800b668:	4b22      	ldr	r3, [pc, #136]	; (800b6f4 <MlmeConfirm+0x9c>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66e:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800b670:	4621      	mov	r1, r4
 800b672:	2002      	movs	r0, #2
 800b674:	f7ff fd32 	bl	800b0dc <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800b678:	7823      	ldrb	r3, [r4, #0]
 800b67a:	2b04      	cmp	r3, #4
 800b67c:	d029      	beq.n	800b6d2 <MlmeConfirm+0x7a>
 800b67e:	2b0b      	cmp	r3, #11
 800b680:	d02f      	beq.n	800b6e2 <MlmeConfirm+0x8a>
 800b682:	2b01      	cmp	r3, #1
 800b684:	d001      	beq.n	800b68a <MlmeConfirm+0x32>
}
 800b686:	b00a      	add	sp, #40	; 0x28
 800b688:	bd10      	pop	{r4, pc}
            mibReq.Type = MIB_DEV_ADDR;
 800b68a:	2306      	movs	r3, #6
 800b68c:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b690:	a801      	add	r0, sp, #4
 800b692:	f003 f903 	bl	800e89c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b696:	9a02      	ldr	r2, [sp, #8]
 800b698:	4b17      	ldr	r3, [pc, #92]	; (800b6f8 <MlmeConfirm+0xa0>)
 800b69a:	615a      	str	r2, [r3, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800b69c:	4817      	ldr	r0, [pc, #92]	; (800b6fc <MlmeConfirm+0xa4>)
 800b69e:	f7ff ffc1 	bl	800b624 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b6a2:	7863      	ldrb	r3, [r4, #1]
 800b6a4:	b16b      	cbz	r3, 800b6c2 <MlmeConfirm+0x6a>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800b6a6:	4b16      	ldr	r3, [pc, #88]	; (800b700 <MlmeConfirm+0xa8>)
 800b6a8:	22ff      	movs	r2, #255	; 0xff
 800b6aa:	715a      	strb	r2, [r3, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800b6ac:	4b11      	ldr	r3, [pc, #68]	; (800b6f4 <MlmeConfirm+0x9c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b2:	4813      	ldr	r0, [pc, #76]	; (800b700 <MlmeConfirm+0xa8>)
 800b6b4:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b6b6:	7863      	ldrb	r3, [r4, #1]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e4      	bne.n	800b686 <MlmeConfirm+0x2e>
                SecureElementPrintSessionKeys();
 800b6bc:	f007 fe72 	bl	80133a4 <SecureElementPrintSessionKeys>
        break;
 800b6c0:	e7e1      	b.n	800b686 <MlmeConfirm+0x2e>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800b6c2:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <MlmeConfirm+0xa8>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800b6c8:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <MlmeConfirm+0xac>)
 800b6ca:	7858      	ldrb	r0, [r3, #1]
 800b6cc:	f7ff fef0 	bl	800b4b0 <LmHandlerRequestClass>
 800b6d0:	e7ec      	b.n	800b6ac <MlmeConfirm+0x54>
            RxParams.LinkCheck = true;
 800b6d2:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <MlmeConfirm+0xb0>)
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800b6d8:	7a22      	ldrb	r2, [r4, #8]
 800b6da:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800b6dc:	7a62      	ldrb	r2, [r4, #9]
 800b6de:	74da      	strb	r2, [r3, #19]
        break;
 800b6e0:	e7d1      	b.n	800b686 <MlmeConfirm+0x2e>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800b6e2:	7863      	ldrb	r3, [r4, #1]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d0ce      	beq.n	800b686 <MlmeConfirm+0x2e>
                LmHandlerDeviceTimeReq( );
 800b6e8:	f7ff fe14 	bl	800b314 <LmHandlerDeviceTimeReq>
}
 800b6ec:	e7cb      	b.n	800b686 <MlmeConfirm+0x2e>
 800b6ee:	bf00      	nop
 800b6f0:	200000b0 	.word	0x200000b0
 800b6f4:	200034b8 	.word	0x200034b8
 800b6f8:	2000007c 	.word	0x2000007c
 800b6fc:	20000098 	.word	0x20000098
 800b700:	20000094 	.word	0x20000094
 800b704:	200034d0 	.word	0x200034d0
 800b708:	2000009c 	.word	0x2000009c

0800b70c <LmHandlerSetSystemMaxRxError>:
{
 800b70c:	b500      	push	{lr}
 800b70e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800b710:	2323      	movs	r3, #35	; 0x23
 800b712:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800b716:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800b718:	a801      	add	r0, sp, #4
 800b71a:	f003 fa0d 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
 800b71e:	b910      	cbnz	r0, 800b726 <LmHandlerSetSystemMaxRxError+0x1a>
}
 800b720:	b00b      	add	sp, #44	; 0x2c
 800b722:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800b726:	f04f 30ff 	mov.w	r0, #4294967295
 800b72a:	e7f9      	b.n	800b720 <LmHandlerSetSystemMaxRxError+0x14>

0800b72c <LmHandlerConfigure>:
{
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	b090      	sub	sp, #64	; 0x40
 800b730:	4601      	mov	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800b732:	4c78      	ldr	r4, [pc, #480]	; (800b914 <LmHandlerConfigure+0x1e8>)
 800b734:	2214      	movs	r2, #20
 800b736:	4620      	mov	r0, r4
 800b738:	f009 ff5a 	bl	80155f0 <UTIL_MEM_cpy_8>
    IsUplinkTxPending = false;
 800b73c:	4b76      	ldr	r3, [pc, #472]	; (800b918 <LmHandlerConfigure+0x1ec>)
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800b742:	f7f7 fd43 	bl	80031cc <LoraInfo_GetPtr>
    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800b746:	7822      	ldrb	r2, [r4, #0]
 800b748:	2301      	movs	r3, #1
 800b74a:	4093      	lsls	r3, r2
 800b74c:	6841      	ldr	r1, [r0, #4]
 800b74e:	420b      	tst	r3, r1
 800b750:	d106      	bne.n	800b760 <LmHandlerConfigure+0x34>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800b752:	4b72      	ldr	r3, [pc, #456]	; (800b91c <LmHandlerConfigure+0x1f0>)
 800b754:	2201      	movs	r2, #1
 800b756:	2100      	movs	r1, #0
 800b758:	4608      	mov	r0, r1
 800b75a:	f009 fe33 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800b75e:	e7fe      	b.n	800b75e <LmHandlerConfigure+0x32>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800b760:	496f      	ldr	r1, [pc, #444]	; (800b920 <LmHandlerConfigure+0x1f4>)
 800b762:	4870      	ldr	r0, [pc, #448]	; (800b924 <LmHandlerConfigure+0x1f8>)
 800b764:	f002 fdfe 	bl	800e364 <LoRaMacInitialization>
 800b768:	2800      	cmp	r0, #0
 800b76a:	f040 80cf 	bne.w	800b90c <LmHandlerConfigure+0x1e0>
    mibReq.Type = MIB_NVM_CTXS;
 800b76e:	2327      	movs	r3, #39	; 0x27
 800b770:	f88d 301c 	strb.w	r3, [sp, #28]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800b774:	a807      	add	r0, sp, #28
 800b776:	f003 f9df 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f040 8087 	bne.w	800b88e <LmHandlerConfigure+0x162>
        CtxRestoreDone = true;
 800b780:	4b69      	ldr	r3, [pc, #420]	; (800b928 <LmHandlerConfigure+0x1fc>)
 800b782:	2201      	movs	r2, #1
 800b784:	701a      	strb	r2, [r3, #0]
    if (CtxRestoreDone == true)
 800b786:	4b68      	ldr	r3, [pc, #416]	; (800b928 <LmHandlerConfigure+0x1fc>)
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 80a8 	beq.w	800b8e0 <LmHandlerConfigure+0x1b4>
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800b790:	4b66      	ldr	r3, [pc, #408]	; (800b92c <LmHandlerConfigure+0x200>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	b10b      	cbz	r3, 800b79c <LmHandlerConfigure+0x70>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800b798:	2000      	movs	r0, #0
 800b79a:	4798      	blx	r3
        mibReq.Type = MIB_DEV_ADDR;
 800b79c:	2306      	movs	r3, #6
 800b79e:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800b7a2:	a807      	add	r0, sp, #28
 800b7a4:	f003 f87a 	bl	800e89c <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b7a8:	9a08      	ldr	r2, [sp, #32]
 800b7aa:	4b61      	ldr	r3, [pc, #388]	; (800b930 <LmHandlerConfigure+0x204>)
 800b7ac:	615a      	str	r2, [r3, #20]
        mibReq.Type = MIB_NVM_CTXS;
 800b7ae:	2327      	movs	r3, #39	; 0x27
 800b7b0:	f88d 301c 	strb.w	r3, [sp, #28]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800b7b4:	a807      	add	r0, sp, #28
 800b7b6:	f003 f871 	bl	800e89c <LoRaMacMibGetRequestConfirm>
        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800b7ba:	9a08      	ldr	r2, [sp, #32]
 800b7bc:	f892 1040 	ldrb.w	r1, [r2, #64]	; 0x40
 800b7c0:	4b54      	ldr	r3, [pc, #336]	; (800b914 <LmHandlerConfigure+0x1e8>)
 800b7c2:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800b7c4:	f892 1104 	ldrb.w	r1, [r2, #260]	; 0x104
 800b7c8:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800b7ca:	f892 2106 	ldrb.w	r2, [r2, #262]	; 0x106
 800b7ce:	709a      	strb	r2, [r3, #2]
    mibReq.Type = MIB_DEV_EUI;
 800b7d0:	2502      	movs	r5, #2
 800b7d2:	f88d 501c 	strb.w	r5, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b7d6:	a807      	add	r0, sp, #28
 800b7d8:	f003 f860 	bl	800e89c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800b7dc:	4c54      	ldr	r4, [pc, #336]	; (800b930 <LmHandlerConfigure+0x204>)
 800b7de:	2208      	movs	r2, #8
 800b7e0:	9908      	ldr	r1, [sp, #32]
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f007 ff45 	bl	8013672 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	f88d 301c 	strb.w	r3, [sp, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b7ee:	a807      	add	r0, sp, #28
 800b7f0:	f003 f854 	bl	800e89c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800b7f4:	2208      	movs	r2, #8
 800b7f6:	9908      	ldr	r1, [sp, #32]
 800b7f8:	18a0      	adds	r0, r4, r2
 800b7fa:	f007 ff3a 	bl	8013672 <memcpy1>
    SecureElementPrintKeys();
 800b7fe:	f007 fd71 	bl	80132e4 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800b802:	7de3      	ldrb	r3, [r4, #23]
 800b804:	7da2      	ldrb	r2, [r4, #22]
 800b806:	7d61      	ldrb	r1, [r4, #21]
 800b808:	7d20      	ldrb	r0, [r4, #20]
 800b80a:	9003      	str	r0, [sp, #12]
 800b80c:	9102      	str	r1, [sp, #8]
 800b80e:	9201      	str	r2, [sp, #4]
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	4b48      	ldr	r3, [pc, #288]	; (800b934 <LmHandlerConfigure+0x208>)
 800b814:	2200      	movs	r2, #0
 800b816:	4611      	mov	r1, r2
 800b818:	4628      	mov	r0, r5
 800b81a:	f009 fdd3 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800b81e:	260f      	movs	r6, #15
 800b820:	f88d 601c 	strb.w	r6, [sp, #28]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800b824:	2301      	movs	r3, #1
 800b826:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800b82a:	a807      	add	r0, sp, #28
 800b82c:	f003 f984 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800b830:	2310      	movs	r3, #16
 800b832:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800b836:	2500      	movs	r5, #0
 800b838:	f88d 5020 	strb.w	r5, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b83c:	a807      	add	r0, sp, #28
 800b83e:	f003 f97b 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800b842:	2304      	movs	r3, #4
 800b844:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800b848:	4c32      	ldr	r4, [pc, #200]	; (800b914 <LmHandlerConfigure+0x1e8>)
 800b84a:	78a3      	ldrb	r3, [r4, #2]
 800b84c:	f88d 3020 	strb.w	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b850:	a807      	add	r0, sp, #28
 800b852:	f003 f971 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800b856:	2338      	movs	r3, #56	; 0x38
 800b858:	f88d 301c 	strb.w	r3, [sp, #28]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800b85c:	6923      	ldr	r3, [r4, #16]
 800b85e:	9308      	str	r3, [sp, #32]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b860:	a807      	add	r0, sp, #28
 800b862:	f003 f969 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b866:	f88d 6014 	strb.w	r6, [sp, #20]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800b86a:	a905      	add	r1, sp, #20
 800b86c:	7820      	ldrb	r0, [r4, #0]
 800b86e:	f004 fe6d 	bl	801054c <RegionGetPhyParam>
 800b872:	9004      	str	r0, [sp, #16]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800b874:	1b43      	subs	r3, r0, r5
 800b876:	bf18      	it	ne
 800b878:	2301      	movne	r3, #1
 800b87a:	71a3      	strb	r3, [r4, #6]
    LmHandlerSetSystemMaxRxError( 20 );
 800b87c:	2014      	movs	r0, #20
 800b87e:	f7ff ff45 	bl	800b70c <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800b882:	79a0      	ldrb	r0, [r4, #6]
 800b884:	f003 fdc6 	bl	800f414 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800b888:	4628      	mov	r0, r5
}
 800b88a:	b010      	add	sp, #64	; 0x40
 800b88c:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800b88e:	2328      	movs	r3, #40	; 0x28
 800b890:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800b894:	4b25      	ldr	r3, [pc, #148]	; (800b92c <LmHandlerConfigure+0x200>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	b14b      	cbz	r3, 800b8b0 <LmHandlerConfigure+0x184>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b89c:	a807      	add	r0, sp, #28
 800b89e:	f002 fffd 	bl	800e89c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800b8a2:	4b22      	ldr	r3, [pc, #136]	; (800b92c <LmHandlerConfigure+0x200>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	f240 518c 	movw	r1, #1420	; 0x58c
 800b8ac:	9808      	ldr	r0, [sp, #32]
 800b8ae:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800b8b0:	2327      	movs	r3, #39	; 0x27
 800b8b2:	f88d 301c 	strb.w	r3, [sp, #28]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800b8b6:	a807      	add	r0, sp, #28
 800b8b8:	f003 f93e 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	f47f af62 	bne.w	800b786 <LmHandlerConfigure+0x5a>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b8c2:	2301      	movs	r3, #1
 800b8c4:	f88d 301c 	strb.w	r3, [sp, #28]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b8c8:	a807      	add	r0, sp, #28
 800b8ca:	f002 ffe7 	bl	800e89c <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800b8ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f43f af57 	beq.w	800b786 <LmHandlerConfigure+0x5a>
                CtxRestoreDone = true;
 800b8d8:	4b13      	ldr	r3, [pc, #76]	; (800b928 <LmHandlerConfigure+0x1fc>)
 800b8da:	2201      	movs	r2, #1
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	e752      	b.n	800b786 <LmHandlerConfigure+0x5a>
        mibReq.Type = MIB_NET_ID;
 800b8e0:	2305      	movs	r3, #5
 800b8e2:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	9308      	str	r3, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800b8ea:	a807      	add	r0, sp, #28
 800b8ec:	f003 f924 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800b8f0:	4b0e      	ldr	r3, [pc, #56]	; (800b92c <LmHandlerConfigure+0x200>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	4798      	blx	r3
 800b8f8:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <LmHandlerConfigure+0x204>)
 800b8fa:	6158      	str	r0, [r3, #20]
        mibReq.Type = MIB_DEV_ADDR;
 800b8fc:	2306      	movs	r3, #6
 800b8fe:	f88d 301c 	strb.w	r3, [sp, #28]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800b902:	9008      	str	r0, [sp, #32]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800b904:	a807      	add	r0, sp, #28
 800b906:	f003 f917 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
 800b90a:	e761      	b.n	800b7d0 <LmHandlerConfigure+0xa4>
        return LORAMAC_HANDLER_ERROR;
 800b90c:	f04f 30ff 	mov.w	r0, #4294967295
 800b910:	e7bb      	b.n	800b88a <LmHandlerConfigure+0x15e>
 800b912:	bf00      	nop
 800b914:	200034d0 	.word	0x200034d0
 800b918:	200034b4 	.word	0x200034b4
 800b91c:	08016660 	.word	0x08016660
 800b920:	200034f4 	.word	0x200034f4
 800b924:	20003508 	.word	0x20003508
 800b928:	200034ae 	.word	0x200034ae
 800b92c:	200034b8 	.word	0x200034b8
 800b930:	2000007c 	.word	0x2000007c
 800b934:	080166ac 	.word	0x080166ac

0800b938 <LmHandlerPackageRegister>:
    switch( id )
 800b938:	b9f0      	cbnz	r0, 800b978 <LmHandlerPackageRegister+0x40>
{
 800b93a:	b538      	push	{r3, r4, r5, lr}
 800b93c:	460c      	mov	r4, r1
 800b93e:	4605      	mov	r5, r0
            package = LmhpCompliancePackageFactory( );
 800b940:	f000 fb76 	bl	800c030 <LmhpCompliancePackageFactory>
    if( package != NULL )
 800b944:	b1a8      	cbz	r0, 800b972 <LmHandlerPackageRegister+0x3a>
        LmHandlerPackages[id] = package;
 800b946:	4a0e      	ldr	r2, [pc, #56]	; (800b980 <LmHandlerPackageRegister+0x48>)
 800b948:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800b94c:	4a0d      	ldr	r2, [pc, #52]	; (800b984 <LmHandlerPackageRegister+0x4c>)
 800b94e:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800b950:	4a0d      	ldr	r2, [pc, #52]	; (800b988 <LmHandlerPackageRegister+0x50>)
 800b952:	6812      	ldr	r2, [r2, #0]
 800b954:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800b956:	6301      	str	r1, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800b958:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800b95a:	6341      	str	r1, [r0, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800b95c:	490b      	ldr	r1, [pc, #44]	; (800b98c <LmHandlerPackageRegister+0x54>)
 800b95e:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800b960:	6992      	ldr	r2, [r2, #24]
 800b962:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800b964:	6843      	ldr	r3, [r0, #4]
 800b966:	22f2      	movs	r2, #242	; 0xf2
 800b968:	4909      	ldr	r1, [pc, #36]	; (800b990 <LmHandlerPackageRegister+0x58>)
 800b96a:	4620      	mov	r0, r4
 800b96c:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800b96e:	2000      	movs	r0, #0
}
 800b970:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_HANDLER_ERROR;
 800b972:	f04f 30ff 	mov.w	r0, #4294967295
 800b976:	e7fb      	b.n	800b970 <LmHandlerPackageRegister+0x38>
 800b978:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	200034bc 	.word	0x200034bc
 800b984:	0800b259 	.word	0x0800b259
 800b988:	200034b8 	.word	0x200034b8
 800b98c:	0800b315 	.word	0x0800b315
 800b990:	200033bc 	.word	0x200033bc

0800b994 <LmHandlerInit>:
{
 800b994:	b508      	push	{r3, lr}
    LmHandlerCallbacks = handlerCallbacks;
 800b996:	4b13      	ldr	r3, [pc, #76]	; (800b9e4 <LmHandlerInit+0x50>)
 800b998:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b99a:	4b13      	ldr	r3, [pc, #76]	; (800b9e8 <LmHandlerInit+0x54>)
 800b99c:	4a13      	ldr	r2, [pc, #76]	; (800b9ec <LmHandlerInit+0x58>)
 800b99e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b9a0:	4a13      	ldr	r2, [pc, #76]	; (800b9f0 <LmHandlerInit+0x5c>)
 800b9a2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b9a4:	4a13      	ldr	r2, [pc, #76]	; (800b9f4 <LmHandlerInit+0x60>)
 800b9a6:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b9a8:	4a13      	ldr	r2, [pc, #76]	; (800b9f8 <LmHandlerInit+0x64>)
 800b9aa:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b9ac:	6802      	ldr	r2, [r0, #0]
 800b9ae:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <LmHandlerInit+0x68>)
 800b9b0:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b9b2:	6842      	ldr	r2, [r0, #4]
 800b9b4:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b9b6:	6882      	ldr	r2, [r0, #8]
 800b9b8:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b9ba:	4a11      	ldr	r2, [pc, #68]	; (800ba00 <LmHandlerInit+0x6c>)
 800b9bc:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b9be:	6982      	ldr	r2, [r0, #24]
 800b9c0:	611a      	str	r2, [r3, #16]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800b9c2:	4b10      	ldr	r3, [pc, #64]	; (800ba04 <LmHandlerInit+0x70>)
 800b9c4:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800b9c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b9c8:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800b9ca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800b9cc:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800b9ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9d0:	60da      	str	r2, [r3, #12]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	f7ff ffaf 	bl	800b938 <LmHandlerPackageRegister>
 800b9da:	b900      	cbnz	r0, 800b9de <LmHandlerInit+0x4a>
}
 800b9dc:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_ERROR;
 800b9de:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e2:	e7fb      	b.n	800b9dc <LmHandlerInit+0x48>
 800b9e4:	200034b8 	.word	0x200034b8
 800b9e8:	20003508 	.word	0x20003508
 800b9ec:	0800b1ad 	.word	0x0800b1ad
 800b9f0:	0800b595 	.word	0x0800b595
 800b9f4:	0800b659 	.word	0x0800b659
 800b9f8:	0800b149 	.word	0x0800b149
 800b9fc:	200034f4 	.word	0x200034f4
 800ba00:	080104f5 	.word	0x080104f5
 800ba04:	200034e4 	.word	0x200034e4

0800ba08 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
    if (featureVersion == NULL)
 800ba08:	b161      	cbz	r1, 800ba24 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch(lmhType)
 800ba0a:	b118      	cbz	r0, 800ba14 <LmHandlerGetVersion+0xc>
 800ba0c:	2801      	cmp	r0, #1
 800ba0e:	d005      	beq.n	800ba1c <LmHandlerGetVersion+0x14>
 800ba10:	2000      	movs	r0, #0
 800ba12:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800ba14:	4a05      	ldr	r2, [pc, #20]	; (800ba2c <LmHandlerGetVersion+0x24>)
 800ba16:	600a      	str	r2, [r1, #0]
            break;
        default:
          break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ba18:	2000      	movs	r0, #0
            break;
 800ba1a:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800ba1c:	4a04      	ldr	r2, [pc, #16]	; (800ba30 <LmHandlerGetVersion+0x28>)
 800ba1e:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ba20:	2000      	movs	r0, #0
            break;
 800ba22:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800ba24:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	01000400 	.word	0x01000400
 800ba30:	02010001 	.word	0x02010001

0800ba34 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800ba34:	b508      	push	{r3, lr}
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800ba36:	f003 fd01 	bl	800f43c <LoRaMacDeInitialization>
 800ba3a:	b900      	cbnz	r0, 800ba3e <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800ba3c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ba3e:	f06f 0001 	mvn.w	r0, #1
 800ba42:	e7fb      	b.n	800ba3c <LmHandlerStop+0x8>

0800ba44 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800ba44:	b508      	push	{r3, lr}
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800ba46:	f002 fe8b 	bl	800e760 <LoRaMacHalt>
 800ba4a:	b900      	cbnz	r0, 800ba4e <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800ba4c:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ba4e:	f06f 0001 	mvn.w	r0, #1
 800ba52:	e7fb      	b.n	800ba4c <LmHandlerHalt+0x8>

0800ba54 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800ba54:	b510      	push	{r4, lr}
 800ba56:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800ba58:	f7ff fff4 	bl	800ba44 <LmHandlerHalt>

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	b148      	cbz	r0, 800ba74 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800ba60:	b92c      	cbnz	r4, 800ba6e <LmHandlerNvmDataStore+0x1a>
 800ba62:	4b18      	ldr	r3, [pc, #96]	; (800bac4 <LmHandlerNvmDataStore+0x70>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	69db      	ldr	r3, [r3, #28]
 800ba68:	b10b      	cbz	r3, 800ba6e <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	4798      	blx	r3
    }

    return lmhStatus;
}
 800ba6e:	4620      	mov	r0, r4
 800ba70:	b00a      	add	sp, #40	; 0x28
 800ba72:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800ba74:	f004 fd46 	bl	8010504 <NvmDataMgmtStoreBegin>
        if (status == NVM_DATA_NO_UPDATED_DATA)
 800ba78:	f110 0f02 	cmn.w	r0, #2
 800ba7c:	d012      	beq.n	800baa4 <LmHandlerNvmDataStore+0x50>
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800ba7e:	b9d0      	cbnz	r0, 800bab6 <LmHandlerNvmDataStore+0x62>
 800ba80:	4b10      	ldr	r3, [pc, #64]	; (800bac4 <LmHandlerNvmDataStore+0x70>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	b1cb      	cbz	r3, 800babc <LmHandlerNvmDataStore+0x68>
          mibReq.Type = MIB_NVM_CTXS;
 800ba88:	2327      	movs	r3, #39	; 0x27
 800ba8a:	f88d 3004 	strb.w	r3, [sp, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800ba8e:	a801      	add	r0, sp, #4
 800ba90:	f002 ff04 	bl	800e89c <LoRaMacMibGetRequestConfirm>
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800ba94:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <LmHandlerNvmDataStore+0x70>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	f44f 61b2 	mov.w	r1, #1424	; 0x590
 800ba9e:	9802      	ldr	r0, [sp, #8]
 800baa0:	4798      	blx	r3
 800baa2:	e001      	b.n	800baa8 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800baa4:	f06f 0407 	mvn.w	r4, #7
        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800baa8:	f004 fd3c 	bl	8010524 <NvmDataMgmtStoreEnd>
 800baac:	2800      	cmp	r0, #0
 800baae:	d0d7      	beq.n	800ba60 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bab0:	f04f 34ff 	mov.w	r4, #4294967295
 800bab4:	e7db      	b.n	800ba6e <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bab6:	f04f 34ff 	mov.w	r4, #4294967295
 800baba:	e7f5      	b.n	800baa8 <LmHandlerNvmDataStore+0x54>
 800babc:	f04f 34ff 	mov.w	r4, #4294967295
 800bac0:	e7f2      	b.n	800baa8 <LmHandlerNvmDataStore+0x54>
 800bac2:	bf00      	nop
 800bac4:	200034b8 	.word	0x200034b8

0800bac8 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800bac8:	4b01      	ldr	r3, [pc, #4]	; (800bad0 <LmhpComplianceIsInitialized+0x8>)
 800baca:	7818      	ldrb	r0, [r3, #0]
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	2000351c 	.word	0x2000351c

0800bad4 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800bad4:	4b01      	ldr	r3, [pc, #4]	; (800badc <LmhpComplianceIsTxPending+0x8>)
 800bad6:	7858      	ldrb	r0, [r3, #1]
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	2000351c 	.word	0x2000351c

0800bae0 <LmhpComplianceOnMlmeConfirm>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800bae0:	4770      	bx	lr

0800bae2 <LmhpComplianceOnMlmeIndication>:
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800bae2:	4770      	bx	lr

0800bae4 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800bae4:	b508      	push	{r3, lr}
    ComplianceTestState.IsTxPending = true;
 800bae6:	4b03      	ldr	r3, [pc, #12]	; (800baf4 <OnProcessTimer+0x10>)
 800bae8:	2201      	movs	r2, #1
 800baea:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800baec:	4b02      	ldr	r3, [pc, #8]	; (800baf8 <OnProcessTimer+0x14>)
 800baee:	695b      	ldr	r3, [r3, #20]
 800baf0:	4798      	blx	r3
}
 800baf2:	bd08      	pop	{r3, pc}
 800baf4:	2000351c 	.word	0x2000351c
 800baf8:	200000cc 	.word	0x200000cc

0800bafc <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800bafc:	4b8d      	ldr	r3, [pc, #564]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f000 81fd 	beq.w	800bf00 <LmhpComplianceOnMcpsIndication+0x404>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800bb06:	78c3      	ldrb	r3, [r0, #3]
 800bb08:	b90b      	cbnz	r3, 800bb0e <LmhpComplianceOnMcpsIndication+0x12>
 800bb0a:	7b83      	ldrb	r3, [r0, #14]
 800bb0c:	b11b      	cbz	r3, 800bb16 <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800bb0e:	4a89      	ldr	r2, [pc, #548]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bb10:	8a13      	ldrh	r3, [r2, #16]
 800bb12:	3301      	adds	r3, #1
 800bb14:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800bb16:	7b43      	ldrb	r3, [r0, #13]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f000 81f1 	beq.w	800bf00 <LmhpComplianceOnMcpsIndication+0x404>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800bb1e:	78c3      	ldrb	r3, [r0, #3]
 800bb20:	2be0      	cmp	r3, #224	; 0xe0
 800bb22:	f040 81ed 	bne.w	800bf00 <LmhpComplianceOnMcpsIndication+0x404>
{
 800bb26:	b570      	push	{r4, r5, r6, lr}
 800bb28:	b094      	sub	sp, #80	; 0x50
    ComplianceTestState.DataBufferSize = 0;
 800bb2a:	4b82      	ldr	r3, [pc, #520]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800bb30:	6884      	ldr	r4, [r0, #8]
 800bb32:	7823      	ldrb	r3, [r4, #0]
 800bb34:	2b7f      	cmp	r3, #127	; 0x7f
 800bb36:	f200 8093 	bhi.w	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
 800bb3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bb3e:	0080      	.short	0x0080
 800bb40:	00a600a1 	.word	0x00a600a1
 800bb44:	00b400ac 	.word	0x00b400ac
 800bb48:	00c800c1 	.word	0x00c800c1
 800bb4c:	00f200e1 	.word	0x00f200e1
 800bb50:	0133011f 	.word	0x0133011f
 800bb54:	00910091 	.word	0x00910091
 800bb58:	00910091 	.word	0x00910091
 800bb5c:	00910091 	.word	0x00910091
 800bb60:	00910091 	.word	0x00910091
 800bb64:	00910091 	.word	0x00910091
 800bb68:	00910091 	.word	0x00910091
 800bb6c:	00910091 	.word	0x00910091
 800bb70:	00910091 	.word	0x00910091
 800bb74:	00910091 	.word	0x00910091
 800bb78:	00910091 	.word	0x00910091
 800bb7c:	01370091 	.word	0x01370091
 800bb80:	0142013e 	.word	0x0142013e
 800bb84:	00910091 	.word	0x00910091
 800bb88:	00910091 	.word	0x00910091
 800bb8c:	00910091 	.word	0x00910091
 800bb90:	00910091 	.word	0x00910091
 800bb94:	00910091 	.word	0x00910091
 800bb98:	00910091 	.word	0x00910091
 800bb9c:	00910091 	.word	0x00910091
 800bba0:	00910091 	.word	0x00910091
 800bba4:	00910091 	.word	0x00910091
 800bba8:	00910091 	.word	0x00910091
 800bbac:	00910091 	.word	0x00910091
 800bbb0:	00910091 	.word	0x00910091
 800bbb4:	00910091 	.word	0x00910091
 800bbb8:	00910091 	.word	0x00910091
 800bbbc:	00910091 	.word	0x00910091
 800bbc0:	00910091 	.word	0x00910091
 800bbc4:	00910091 	.word	0x00910091
 800bbc8:	00910091 	.word	0x00910091
 800bbcc:	00910091 	.word	0x00910091
 800bbd0:	00910091 	.word	0x00910091
 800bbd4:	00910091 	.word	0x00910091
 800bbd8:	00910091 	.word	0x00910091
 800bbdc:	00910091 	.word	0x00910091
 800bbe0:	00910091 	.word	0x00910091
 800bbe4:	00910091 	.word	0x00910091
 800bbe8:	00910091 	.word	0x00910091
 800bbec:	00910091 	.word	0x00910091
 800bbf0:	00910091 	.word	0x00910091
 800bbf4:	00910091 	.word	0x00910091
 800bbf8:	00910091 	.word	0x00910091
 800bbfc:	00910091 	.word	0x00910091
 800bc00:	00910091 	.word	0x00910091
 800bc04:	00910091 	.word	0x00910091
 800bc08:	00910091 	.word	0x00910091
 800bc0c:	00910091 	.word	0x00910091
 800bc10:	00910091 	.word	0x00910091
 800bc14:	00910091 	.word	0x00910091
 800bc18:	00910091 	.word	0x00910091
 800bc1c:	00910091 	.word	0x00910091
 800bc20:	00910091 	.word	0x00910091
 800bc24:	00910091 	.word	0x00910091
 800bc28:	00910091 	.word	0x00910091
 800bc2c:	00910091 	.word	0x00910091
 800bc30:	00910091 	.word	0x00910091
 800bc34:	00910091 	.word	0x00910091
 800bc38:	016e014d 	.word	0x016e014d
 800bc3c:	017c      	.short	0x017c
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800bc3e:	4b3d      	ldr	r3, [pc, #244]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	2101      	movs	r1, #1
 800bc44:	7299      	strb	r1, [r3, #10]
 800bc46:	2000      	movs	r0, #0
 800bc48:	7010      	strb	r0, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800bc4a:	68d8      	ldr	r0, [r3, #12]
 800bc4c:	7a9a      	ldrb	r2, [r3, #10]
 800bc4e:	1854      	adds	r4, r2, r1
 800bc50:	729c      	strb	r4, [r3, #10]
 800bc52:	2406      	movs	r4, #6
 800bc54:	5484      	strb	r4, [r0, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800bc56:	68d8      	ldr	r0, [r3, #12]
 800bc58:	7a9a      	ldrb	r2, [r3, #10]
 800bc5a:	1854      	adds	r4, r2, r1
 800bc5c:	729c      	strb	r4, [r3, #10]
 800bc5e:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800bc60:	4b34      	ldr	r3, [pc, #208]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bc62:	7a9b      	ldrb	r3, [r3, #10]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	f000 8144 	beq.w	800bef2 <LmhpComplianceOnMcpsIndication+0x3f6>
        TimerSetValue( &ProcessTimer, 1000 );
 800bc6a:	4c33      	ldr	r4, [pc, #204]	; (800bd38 <LmhpComplianceOnMcpsIndication+0x23c>)
 800bc6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bc70:	4620      	mov	r0, r4
 800bc72:	f009 febf 	bl	80159f4 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800bc76:	4620      	mov	r0, r4
 800bc78:	f009 fe76 	bl	8015968 <UTIL_TIMER_Start>
}
 800bc7c:	b014      	add	sp, #80	; 0x50
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
        ComplianceTestState.IsResetCmdPending = true;
 800bc80:	4b2c      	ldr	r3, [pc, #176]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800bc88:	e7ea      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800bc8a:	4b2c      	ldr	r3, [pc, #176]	; (800bd3c <LmhpComplianceOnMcpsIndication+0x240>)
 800bc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8e:	2101      	movs	r1, #1
 800bc90:	2002      	movs	r0, #2
 800bc92:	4798      	blx	r3
        break;
 800bc94:	e7e4      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800bc96:	7862      	ldrb	r2, [r4, #1]
 800bc98:	4b26      	ldr	r3, [pc, #152]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bc9a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800bca4:	e7dc      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type            = MIB_ADR;
 800bca6:	2304      	movs	r3, #4
 800bca8:	f88d 3000 	strb.w	r3, [sp]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800bcac:	7863      	ldrb	r3, [r4, #1]
 800bcae:	3b00      	subs	r3, #0
 800bcb0:	bf18      	it	ne
 800bcb2:	2301      	movne	r3, #1
 800bcb4:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800bcb8:	4668      	mov	r0, sp
 800bcba:	f002 ff3d 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
        break;
 800bcbe:	e7cf      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800bcc0:	7860      	ldrb	r0, [r4, #1]
 800bcc2:	3800      	subs	r0, #0
 800bcc4:	bf18      	it	ne
 800bcc6:	2001      	movne	r0, #1
 800bcc8:	f003 fba4 	bl	800f414 <LoRaMacTestSetDutyCycleOn>
        break;
 800bccc:	e7c8      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800bcce:	466d      	mov	r5, sp
 800bcd0:	4e1b      	ldr	r6, [pc, #108]	; (800bd40 <LmhpComplianceOnMcpsIndication+0x244>)
 800bcd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bcd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bcd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bcd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bcda:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800bcde:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800bce2:	7863      	ldrb	r3, [r4, #1]
        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800bce4:	2b0a      	cmp	r3, #10
 800bce6:	d8bb      	bhi.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800bce8:	4a16      	ldr	r2, [pc, #88]	; (800bd44 <LmhpComplianceOnMcpsIndication+0x248>)
 800bcea:	6812      	ldr	r2, [r2, #0]
 800bcec:	6852      	ldr	r2, [r2, #4]
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	d0b6      	beq.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800bcf2:	a914      	add	r1, sp, #80	; 0x50
 800bcf4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bcf8:	f853 0c50 	ldr.w	r0, [r3, #-80]
 800bcfc:	4790      	blx	r2
        break;
 800bcfe:	e7af      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800bd00:	7862      	ldrb	r2, [r4, #1]
        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800bd02:	1e53      	subs	r3, r2, #1
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d8aa      	bhi.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800bd0a:	1e50      	subs	r0, r2, #1
 800bd0c:	bf18      	it	ne
 800bd0e:	2001      	movne	r0, #1
 800bd10:	4b08      	ldr	r3, [pc, #32]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bd12:	7218      	strb	r0, [r3, #8]
            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800bd14:	4b0b      	ldr	r3, [pc, #44]	; (800bd44 <LmhpComplianceOnMcpsIndication+0x248>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d0a0      	beq.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800bd1e:	4798      	blx	r3
 800bd20:	e79e      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800bd22:	4b04      	ldr	r3, [pc, #16]	; (800bd34 <LmhpComplianceOnMcpsIndication+0x238>)
 800bd24:	68da      	ldr	r2, [r3, #12]
 800bd26:	2101      	movs	r1, #1
 800bd28:	7299      	strb	r1, [r3, #10]
 800bd2a:	2308      	movs	r3, #8
 800bd2c:	7013      	strb	r3, [r2, #0]
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800bd2e:	460b      	mov	r3, r1
 800bd30:	e01b      	b.n	800bd6a <LmhpComplianceOnMcpsIndication+0x26e>
 800bd32:	bf00      	nop
 800bd34:	2000351c 	.word	0x2000351c
 800bd38:	20003554 	.word	0x20003554
 800bd3c:	200000cc 	.word	0x200000cc
 800bd40:	08015f1c 	.word	0x08015f1c
 800bd44:	20003518 	.word	0x20003518
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800bd48:	6882      	ldr	r2, [r0, #8]
 800bd4a:	f101 0c01 	add.w	ip, r1, #1
 800bd4e:	5c52      	ldrb	r2, [r2, r1]
 800bd50:	496c      	ldr	r1, [pc, #432]	; (800bf04 <LmhpComplianceOnMcpsIndication+0x408>)
 800bd52:	68cd      	ldr	r5, [r1, #12]
 800bd54:	7a8c      	ldrb	r4, [r1, #10]
 800bd56:	f104 0e01 	add.w	lr, r4, #1
 800bd5a:	f881 e00a 	strb.w	lr, [r1, #10]
 800bd5e:	3201      	adds	r2, #1
 800bd60:	552a      	strb	r2, [r5, r4]
             i++ )
 800bd62:	3301      	adds	r3, #1
 800bd64:	b2db      	uxtb	r3, r3
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800bd66:	fa5f f18c 	uxtb.w	r1, ip
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800bd6a:	4a66      	ldr	r2, [pc, #408]	; (800bf04 <LmhpComplianceOnMcpsIndication+0x408>)
 800bd6c:	7a52      	ldrb	r2, [r2, #9]
 800bd6e:	7b04      	ldrb	r4, [r0, #12]
 800bd70:	42a2      	cmp	r2, r4
 800bd72:	bf28      	it	cs
 800bd74:	4622      	movcs	r2, r4
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d8e6      	bhi.n	800bd48 <LmhpComplianceOnMcpsIndication+0x24c>
 800bd7a:	e771      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800bd7c:	4b61      	ldr	r3, [pc, #388]	; (800bf04 <LmhpComplianceOnMcpsIndication+0x408>)
 800bd7e:	68da      	ldr	r2, [r3, #12]
 800bd80:	2101      	movs	r1, #1
 800bd82:	7299      	strb	r1, [r3, #10]
 800bd84:	2109      	movs	r1, #9
 800bd86:	7011      	strb	r1, [r2, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800bd88:	8a18      	ldrh	r0, [r3, #16]
 800bd8a:	68d9      	ldr	r1, [r3, #12]
 800bd8c:	7a9a      	ldrb	r2, [r3, #10]
 800bd8e:	1c54      	adds	r4, r2, #1
 800bd90:	729c      	strb	r4, [r3, #10]
 800bd92:	5488      	strb	r0, [r1, r2]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800bd94:	8a1a      	ldrh	r2, [r3, #16]
 800bd96:	68d8      	ldr	r0, [r3, #12]
 800bd98:	7a99      	ldrb	r1, [r3, #10]
 800bd9a:	1c4c      	adds	r4, r1, #1
 800bd9c:	729c      	strb	r4, [r3, #10]
 800bd9e:	0a13      	lsrs	r3, r2, #8
 800bda0:	5443      	strb	r3, [r0, r1]
        break;
 800bda2:	e75d      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.RxAppCnt = 0;
 800bda4:	4b57      	ldr	r3, [pc, #348]	; (800bf04 <LmhpComplianceOnMcpsIndication+0x408>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	821a      	strh	r2, [r3, #16]
        break;
 800bdaa:	e759      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        mlmeReq.Type = MLME_LINK_CHECK;
 800bdac:	2304      	movs	r3, #4
 800bdae:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMlmeRequest( &mlmeReq );
 800bdb2:	4668      	mov	r0, sp
 800bdb4:	f003 f946 	bl	800f044 <LoRaMacMlmeRequest>
        break;
 800bdb8:	e752      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        CompliancePackage.OnDeviceTimeRequest( );
 800bdba:	4b53      	ldr	r3, [pc, #332]	; (800bf08 <LmhpComplianceOnMcpsIndication+0x40c>)
 800bdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbe:	4798      	blx	r3
        break;
 800bdc0:	e74e      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800bdc2:	7860      	ldrb	r0, [r4, #1]
 800bdc4:	4b4f      	ldr	r3, [pc, #316]	; (800bf04 <LmhpComplianceOnMcpsIndication+0x408>)
 800bdc6:	7558      	strb	r0, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800bdc8:	4b50      	ldr	r3, [pc, #320]	; (800bf0c <LmhpComplianceOnMcpsIndication+0x410>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f43f af46 	beq.w	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800bdd4:	4798      	blx	r3
 800bdd6:	e743      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        if( mcpsIndication->BufferSize == 7 )
 800bdd8:	7b03      	ldrb	r3, [r0, #12]
 800bdda:	2b07      	cmp	r3, #7
 800bddc:	f47f af40 	bne.w	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_TXCW;
 800bde0:	2305      	movs	r3, #5
 800bde2:	f88d 3000 	strb.w	r3, [sp]
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800bde6:	7863      	ldrb	r3, [r4, #1]
 800bde8:	78a2      	ldrb	r2, [r4, #2]
 800bdea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            mlmeReq.Req.TxCw.Timeout =
 800bdee:	f8ad 3004 	strh.w	r3, [sp, #4]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800bdf2:	78e3      	ldrb	r3, [r4, #3]
 800bdf4:	7922      	ldrb	r2, [r4, #4]
 800bdf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800bdfa:	7962      	ldrb	r2, [r4, #5]
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800bdfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800be00:	2264      	movs	r2, #100	; 0x64
 800be02:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800be06:	9302      	str	r3, [sp, #8]
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800be08:	6883      	ldr	r3, [r0, #8]
 800be0a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800be0e:	f88d 300c 	strb.w	r3, [sp, #12]
            LoRaMacMlmeRequest( &mlmeReq );
 800be12:	4668      	mov	r0, sp
 800be14:	f003 f916 	bl	800f044 <LoRaMacMlmeRequest>
        break;
 800be18:	e722      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800be1a:	2339      	movs	r3, #57	; 0x39
 800be1c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        mibReq.Param.IsCertPortOn = false;
 800be20:	2300      	movs	r3, #0
 800be22:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        LoRaMacMibSetRequestConfirm( &mibReq );
 800be26:	a80b      	add	r0, sp, #44	; 0x2c
 800be28:	f002 fe86 	bl	800eb38 <LoRaMacMibSetRequestConfirm>
        ComplianceTestState.IsResetCmdPending = true;
 800be2c:	4b35      	ldr	r3, [pc, #212]	; (800bf04 <LmhpComplianceOnMcpsIndication+0x408>)
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800be34:	e714      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        mibReq.Type = MIB_LORAWAN_VERSION;
 800be36:	232a      	movs	r3, #42	; 0x2a
 800be38:	f88d 3000 	strb.w	r3, [sp]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800be3c:	4668      	mov	r0, sp
 800be3e:	f002 fd2d 	bl	800e89c <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800be42:	9901      	ldr	r1, [sp, #4]
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800be44:	9a02      	ldr	r2, [sp, #8]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800be46:	4b2f      	ldr	r3, [pc, #188]	; (800bf04 <LmhpComplianceOnMcpsIndication+0x408>)
 800be48:	68dc      	ldr	r4, [r3, #12]
 800be4a:	7a98      	ldrb	r0, [r3, #10]
 800be4c:	1c45      	adds	r5, r0, #1
 800be4e:	729d      	strb	r5, [r3, #10]
 800be50:	257f      	movs	r5, #127	; 0x7f
 800be52:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800be54:	482d      	ldr	r0, [pc, #180]	; (800bf0c <LmhpComplianceOnMcpsIndication+0x410>)
 800be56:	6800      	ldr	r0, [r0, #0]
 800be58:	68dd      	ldr	r5, [r3, #12]
 800be5a:	7a9c      	ldrb	r4, [r3, #10]
 800be5c:	1c66      	adds	r6, r4, #1
 800be5e:	729e      	strb	r6, [r3, #10]
 800be60:	78c6      	ldrb	r6, [r0, #3]
 800be62:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800be64:	68dd      	ldr	r5, [r3, #12]
 800be66:	7a9c      	ldrb	r4, [r3, #10]
 800be68:	1c66      	adds	r6, r4, #1
 800be6a:	729e      	strb	r6, [r3, #10]
 800be6c:	7886      	ldrb	r6, [r0, #2]
 800be6e:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800be70:	68dd      	ldr	r5, [r3, #12]
 800be72:	7a9c      	ldrb	r4, [r3, #10]
 800be74:	1c66      	adds	r6, r4, #1
 800be76:	729e      	strb	r6, [r3, #10]
 800be78:	7846      	ldrb	r6, [r0, #1]
 800be7a:	552e      	strb	r6, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800be7c:	68dd      	ldr	r5, [r3, #12]
 800be7e:	7a9c      	ldrb	r4, [r3, #10]
 800be80:	1c66      	adds	r6, r4, #1
 800be82:	729e      	strb	r6, [r3, #10]
 800be84:	7800      	ldrb	r0, [r0, #0]
 800be86:	5528      	strb	r0, [r5, r4]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800be88:	68dc      	ldr	r4, [r3, #12]
 800be8a:	7a98      	ldrb	r0, [r3, #10]
 800be8c:	1c45      	adds	r5, r0, #1
 800be8e:	729d      	strb	r5, [r3, #10]
 800be90:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800be94:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800be96:	68dc      	ldr	r4, [r3, #12]
 800be98:	7a98      	ldrb	r0, [r3, #10]
 800be9a:	1c45      	adds	r5, r0, #1
 800be9c:	729d      	strb	r5, [r3, #10]
 800be9e:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800bea2:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800bea4:	68dc      	ldr	r4, [r3, #12]
 800bea6:	7a98      	ldrb	r0, [r3, #10]
 800bea8:	1c45      	adds	r5, r0, #1
 800beaa:	729d      	strb	r5, [r3, #10]
 800beac:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800beb0:	5425      	strb	r5, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800beb2:	68dc      	ldr	r4, [r3, #12]
 800beb4:	7a98      	ldrb	r0, [r3, #10]
 800beb6:	1c45      	adds	r5, r0, #1
 800beb8:	729d      	strb	r5, [r3, #10]
 800beba:	5421      	strb	r1, [r4, r0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800bebc:	68d8      	ldr	r0, [r3, #12]
 800bebe:	7a99      	ldrb	r1, [r3, #10]
 800bec0:	1c4c      	adds	r4, r1, #1
 800bec2:	729c      	strb	r4, [r3, #10]
 800bec4:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800bec8:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800beca:	68d8      	ldr	r0, [r3, #12]
 800becc:	7a99      	ldrb	r1, [r3, #10]
 800bece:	1c4c      	adds	r4, r1, #1
 800bed0:	729c      	strb	r4, [r3, #10]
 800bed2:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800bed6:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800bed8:	68d8      	ldr	r0, [r3, #12]
 800beda:	7a99      	ldrb	r1, [r3, #10]
 800bedc:	1c4c      	adds	r4, r1, #1
 800bede:	729c      	strb	r4, [r3, #10]
 800bee0:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800bee4:	5444      	strb	r4, [r0, r1]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800bee6:	68d8      	ldr	r0, [r3, #12]
 800bee8:	7a99      	ldrb	r1, [r3, #10]
 800beea:	1c4c      	adds	r4, r1, #1
 800beec:	729c      	strb	r4, [r3, #10]
 800beee:	5442      	strb	r2, [r0, r1]
        break;
 800bef0:	e6b6      	b.n	800bc60 <LmhpComplianceOnMcpsIndication+0x164>
        TimerStop(&ProcessTimer);
 800bef2:	4807      	ldr	r0, [pc, #28]	; (800bf10 <LmhpComplianceOnMcpsIndication+0x414>)
 800bef4:	f009 fcde 	bl	80158b4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800bef8:	4b02      	ldr	r3, [pc, #8]	; (800bf04 <LmhpComplianceOnMcpsIndication+0x408>)
 800befa:	2200      	movs	r2, #0
 800befc:	705a      	strb	r2, [r3, #1]
 800befe:	e6bd      	b.n	800bc7c <LmhpComplianceOnMcpsIndication+0x180>
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	2000351c 	.word	0x2000351c
 800bf08:	200000cc 	.word	0x200000cc
 800bf0c:	20003518 	.word	0x20003518
 800bf10:	20003554 	.word	0x20003554

0800bf14 <LmhpComplianceProcess>:
{
 800bf14:	b530      	push	{r4, r5, lr}
 800bf16:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800bf18:	4b28      	ldr	r3, [pc, #160]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf1a:	785b      	ldrb	r3, [r3, #1]
 800bf1c:	b993      	cbnz	r3, 800bf44 <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800bf1e:	4b27      	ldr	r3, [pc, #156]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d13f      	bne.n	800bfa8 <LmhpComplianceProcess+0x94>
    if( ComplianceTestState.IsResetCmdPending == true )
 800bf28:	4b24      	ldr	r3, [pc, #144]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bf2e:	b13b      	cbz	r3, 800bf40 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800bf30:	4b22      	ldr	r3, [pc, #136]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if (CompliancePackage.OnSystemReset != NULL)
 800bf38:	4b21      	ldr	r3, [pc, #132]	; (800bfc0 <LmhpComplianceProcess+0xac>)
 800bf3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf3c:	b103      	cbz	r3, 800bf40 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800bf3e:	4798      	blx	r3
}
 800bf40:	b003      	add	sp, #12
 800bf42:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800bf44:	f009 fc76 	bl	8015834 <UTIL_TIMER_GetCurrentTime>
 800bf48:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800bf4a:	4b1c      	ldr	r3, [pc, #112]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf4c:	685d      	ldr	r5, [r3, #4]
 800bf4e:	f7ff f9f5 	bl	800b33c <LmHandlerGetDutyCycleWaitTime>
 800bf52:	4405      	add	r5, r0
 800bf54:	42a5      	cmp	r5, r4
 800bf56:	d2e7      	bcs.n	800bf28 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 800bf58:	4b18      	ldr	r3, [pc, #96]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf5a:	7a9b      	ldrb	r3, [r3, #10]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d0e3      	beq.n	800bf28 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData = {
 800bf60:	22e0      	movs	r2, #224	; 0xe0
 800bf62:	f88d 2000 	strb.w	r2, [sp]
 800bf66:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800bf6a:	4b14      	ldr	r3, [pc, #80]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf6c:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData = {
 800bf6e:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800bf70:	2201      	movs	r2, #1
 800bf72:	7a19      	ldrb	r1, [r3, #8]
 800bf74:	4668      	mov	r0, sp
 800bf76:	f7ff f9f9 	bl	800b36c <LmHandlerSend>
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800bf7a:	f110 0f02 	cmn.w	r0, #2
 800bf7e:	d009      	beq.n	800bf94 <LmhpComplianceProcess+0x80>
 800bf80:	f110 0f06 	cmn.w	r0, #6
 800bf84:	d006      	beq.n	800bf94 <LmhpComplianceProcess+0x80>
                    ComplianceTestState.IsTxPending = false;
 800bf86:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800bf8c:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800bf8e:	4b0b      	ldr	r3, [pc, #44]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bf90:	605c      	str	r4, [r3, #4]
 800bf92:	e7c9      	b.n	800bf28 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1000 );
 800bf94:	4d0b      	ldr	r5, [pc, #44]	; (800bfc4 <LmhpComplianceProcess+0xb0>)
 800bf96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f009 fd2a 	bl	80159f4 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f009 fce1 	bl	8015968 <UTIL_TIMER_Start>
 800bfa6:	e7f2      	b.n	800bf8e <LmhpComplianceProcess+0x7a>
            ComplianceTestState.IsClassReqCmdPending = false;
 800bfa8:	4b04      	ldr	r3, [pc, #16]	; (800bfbc <LmhpComplianceProcess+0xa8>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800bfb0:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800bfb4:	f7ff fa7c 	bl	800b4b0 <LmHandlerRequestClass>
 800bfb8:	e7b6      	b.n	800bf28 <LmhpComplianceProcess+0x14>
 800bfba:	bf00      	nop
 800bfbc:	2000351c 	.word	0x2000351c
 800bfc0:	200000cc 	.word	0x200000cc
 800bfc4:	20003554 	.word	0x20003554

0800bfc8 <LmhpComplianceInit>:
{
 800bfc8:	b530      	push	{r4, r5, lr}
 800bfca:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800bfcc:	b188      	cbz	r0, 800bff2 <LmhpComplianceInit+0x2a>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	b179      	cbz	r1, 800bff2 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800bfd2:	4813      	ldr	r0, [pc, #76]	; (800c020 <LmhpComplianceInit+0x58>)
 800bfd4:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800bfd6:	4b13      	ldr	r3, [pc, #76]	; (800c024 <LmhpComplianceInit+0x5c>)
 800bfd8:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800bfda:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800bfdc:	2201      	movs	r2, #1
 800bfde:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	9200      	str	r2, [sp, #0]
 800bfe4:	4b10      	ldr	r3, [pc, #64]	; (800c028 <LmhpComplianceInit+0x60>)
 800bfe6:	f04f 31ff 	mov.w	r1, #4294967295
 800bfea:	4810      	ldr	r0, [pc, #64]	; (800c02c <LmhpComplianceInit+0x64>)
 800bfec:	f009 fc04 	bl	80157f8 <UTIL_TIMER_Create>
 800bff0:	e004      	b.n	800bffc <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800bff2:	2300      	movs	r3, #0
 800bff4:	4a0a      	ldr	r2, [pc, #40]	; (800c020 <LmhpComplianceInit+0x58>)
 800bff6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800bff8:	4a0a      	ldr	r2, [pc, #40]	; (800c024 <LmhpComplianceInit+0x5c>)
 800bffa:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800bffc:	4c09      	ldr	r4, [pc, #36]	; (800c024 <LmhpComplianceInit+0x5c>)
 800bffe:	2500      	movs	r5, #0
 800c000:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800c002:	2220      	movs	r2, #32
 800c004:	4629      	mov	r1, r5
 800c006:	f104 0014 	add.w	r0, r4, #20
 800c00a:	f007 fb4a 	bl	80136a2 <memset1>
    ComplianceTestState.IsTxPending = false;
 800c00e:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800c010:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800c012:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800c016:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800c01a:	b003      	add	sp, #12
 800c01c:	bd30      	pop	{r4, r5, pc}
 800c01e:	bf00      	nop
 800c020:	20003518 	.word	0x20003518
 800c024:	2000351c 	.word	0x2000351c
 800c028:	0800bae5 	.word	0x0800bae5
 800c02c:	20003554 	.word	0x20003554

0800c030 <LmhpCompliancePackageFactory>:
}
 800c030:	4800      	ldr	r0, [pc, #0]	; (800c034 <LmhpCompliancePackageFactory+0x4>)
 800c032:	4770      	bx	lr
 800c034:	200000cc 	.word	0x200000cc

0800c038 <OnRadioRxError>:
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
 800c038:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800c03a:	4a06      	ldr	r2, [pc, #24]	; (800c054 <OnRadioRxError+0x1c>)
 800c03c:	7813      	ldrb	r3, [r2, #0]
 800c03e:	f043 0304 	orr.w	r3, r3, #4
 800c042:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c044:	4b04      	ldr	r3, [pc, #16]	; (800c058 <OnRadioRxError+0x20>)
 800c046:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c04a:	b113      	cbz	r3, 800c052 <OnRadioRxError+0x1a>
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	b103      	cbz	r3, 800c052 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c050:	4798      	blx	r3
    }
}
 800c052:	bd08      	pop	{r3, pc}
 800c054:	2000356c 	.word	0x2000356c
 800c058:	20003570 	.word	0x20003570

0800c05c <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c05c:	4b07      	ldr	r3, [pc, #28]	; (800c07c <UpdateRxSlotIdleState+0x20>)
 800c05e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c062:	2b02      	cmp	r3, #2
 800c064:	d004      	beq.n	800c070 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800c066:	4b06      	ldr	r3, [pc, #24]	; (800c080 <UpdateRxSlotIdleState+0x24>)
 800c068:	2206      	movs	r2, #6
 800c06a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
 800c06e:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c070:	4b03      	ldr	r3, [pc, #12]	; (800c080 <UpdateRxSlotIdleState+0x24>)
 800c072:	2202      	movs	r2, #2
 800c074:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 800c078:	4770      	bx	lr
 800c07a:	bf00      	nop
 800c07c:	20008000 	.word	0x20008000
 800c080:	20003570 	.word	0x20003570

0800c084 <LoRaMacEnableRequests>:
    return true;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800c084:	4b01      	ldr	r3, [pc, #4]	; (800c08c <LoRaMacEnableRequests+0x8>)
 800c086:	f883 0496 	strb.w	r0, [r3, #1174]	; 0x496
}
 800c08a:	4770      	bx	lr
 800c08c:	20003570 	.word	0x20003570

0800c090 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800c090:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800c092:	4b15      	ldr	r3, [pc, #84]	; (800c0e8 <LoRaMacHandleIndicationEvents+0x58>)
 800c094:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c098:	f013 0f08 	tst.w	r3, #8
 800c09c:	d00e      	beq.n	800c0bc <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800c09e:	4812      	ldr	r0, [pc, #72]	; (800c0e8 <LoRaMacHandleIndicationEvents+0x58>)
 800c0a0:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800c0a4:	f36f 03c3 	bfc	r3, #3, #1
 800c0a8:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800c0ac:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800c0b6:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 800c0ba:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <LoRaMacHandleIndicationEvents+0x58>)
 800c0be:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c0c2:	f013 0f02 	tst.w	r3, #2
 800c0c6:	d00e      	beq.n	800c0e6 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800c0c8:	4807      	ldr	r0, [pc, #28]	; (800c0e8 <LoRaMacHandleIndicationEvents+0x58>)
 800c0ca:	f890 3495 	ldrb.w	r3, [r0, #1173]	; 0x495
 800c0ce:	f36f 0341 	bfc	r3, #1, #1
 800c0d2:	f880 3495 	strb.w	r3, [r0, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800c0d6:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f500 6192 	add.w	r1, r0, #1168	; 0x490
 800c0e0:	f200 4024 	addw	r0, r0, #1060	; 0x424
 800c0e4:	4798      	blx	r3
    }
}
 800c0e6:	bd08      	pop	{r3, pc}
 800c0e8:	20003570 	.word	0x20003570

0800c0ec <CheckForMinimumAbpDatarate>:
}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800c0ec:	b110      	cbz	r0, 800c0f4 <CheckForMinimumAbpDatarate+0x8>
 800c0ee:	2901      	cmp	r1, #1
 800c0f0:	d001      	beq.n	800c0f6 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800c0f2:	2000      	movs	r0, #0
}
 800c0f4:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	d0fc      	beq.n	800c0f4 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	4770      	bx	lr
	...

0800c100 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800c100:	4b07      	ldr	r3, [pc, #28]	; (800c120 <LoRaMacCheckForRxAbort+0x20>)
 800c102:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c106:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c10a:	d008      	beq.n	800c11e <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800c10c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c110:	4a03      	ldr	r2, [pc, #12]	; (800c120 <LoRaMacCheckForRxAbort+0x20>)
 800c112:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c116:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800c11a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800c11e:	4770      	bx	lr
 800c120:	20003570 	.word	0x20003570

0800c124 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800c124:	4b06      	ldr	r3, [pc, #24]	; (800c140 <CalculateBackOff+0x1c>)
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	b94b      	cbnz	r3, 800c13e <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800c12a:	4a05      	ldr	r2, [pc, #20]	; (800c140 <CalculateBackOff+0x1c>)
 800c12c:	f8b2 310c 	ldrh.w	r3, [r2, #268]	; 0x10c
 800c130:	4904      	ldr	r1, [pc, #16]	; (800c144 <CalculateBackOff+0x20>)
 800c132:	f8d1 1420 	ldr.w	r1, [r1, #1056]	; 0x420
 800c136:	3b01      	subs	r3, #1
 800c138:	fb01 f303 	mul.w	r3, r1, r3
 800c13c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800c13e:	4770      	bx	lr
 800c140:	20008000 	.word	0x20008000
 800c144:	20003570 	.word	0x20003570

0800c148 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800c148:	b508      	push	{r3, lr}
 800c14a:	4684      	mov	ip, r0
 800c14c:	4608      	mov	r0, r1
 800c14e:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800c150:	4b06      	ldr	r3, [pc, #24]	; (800c16c <SetTxContinuousWave+0x24>)
 800c152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c154:	4662      	mov	r2, ip
 800c156:	b249      	sxtb	r1, r1
 800c158:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800c15a:	4a05      	ldr	r2, [pc, #20]	; (800c170 <SetTxContinuousWave+0x28>)
 800c15c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800c160:	f043 0302 	orr.w	r3, r3, #2
 800c164:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800c168:	2000      	movs	r0, #0
 800c16a:	bd08      	pop	{r3, pc}
 800c16c:	08016dc8 	.word	0x08016dc8
 800c170:	20003570 	.word	0x20003570

0800c174 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800c174:	4602      	mov	r2, r0
 800c176:	b1f8      	cbz	r0, 800c1b8 <DetermineFrameType+0x44>
 800c178:	b301      	cbz	r1, 800c1bc <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800c17a:	7b03      	ldrb	r3, [r0, #12]
 800c17c:	f013 030f 	ands.w	r3, r3, #15
 800c180:	d005      	beq.n	800c18e <DetermineFrameType+0x1a>
 800c182:	f890 0020 	ldrb.w	r0, [r0, #32]
 800c186:	b110      	cbz	r0, 800c18e <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800c188:	2000      	movs	r0, #0
 800c18a:	7008      	strb	r0, [r1, #0]
 800c18c:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800c18e:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800c192:	b910      	cbnz	r0, 800c19a <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800c194:	2301      	movs	r3, #1
 800c196:	700b      	strb	r3, [r1, #0]
 800c198:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800c19a:	b92b      	cbnz	r3, 800c1a8 <DetermineFrameType+0x34>
 800c19c:	f892 0020 	ldrb.w	r0, [r2, #32]
 800c1a0:	b910      	cbnz	r0, 800c1a8 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	700b      	strb	r3, [r1, #0]
 800c1a6:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800c1a8:	b953      	cbnz	r3, 800c1c0 <DetermineFrameType+0x4c>
 800c1aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c1ae:	b14a      	cbz	r2, 800c1c4 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800c1b0:	2203      	movs	r2, #3
 800c1b2:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800c1b4:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800c1b6:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c1b8:	2003      	movs	r0, #3
 800c1ba:	4770      	bx	lr
 800c1bc:	2003      	movs	r0, #3
 800c1be:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800c1c0:	2018      	movs	r0, #24
 800c1c2:	4770      	bx	lr
 800c1c4:	2018      	movs	r0, #24
}
 800c1c6:	4770      	bx	lr

0800c1c8 <CheckRetrans>:
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800c1c8:	4288      	cmp	r0, r1
 800c1ca:	d201      	bcs.n	800c1d0 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800c1cc:	2000      	movs	r0, #0
 800c1ce:	4770      	bx	lr
        return true;
 800c1d0:	2001      	movs	r0, #1
}
 800c1d2:	4770      	bx	lr

0800c1d4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800c1d4:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800c1d6:	4b0b      	ldr	r3, [pc, #44]	; (800c204 <CheckRetransUnconfirmedUplink+0x30>)
 800c1d8:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800c1dc:	4b0a      	ldr	r3, [pc, #40]	; (800c208 <CheckRetransUnconfirmedUplink+0x34>)
 800c1de:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800c1e2:	f7ff fff1 	bl	800c1c8 <CheckRetrans>
 800c1e6:	b950      	cbnz	r0, 800c1fe <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c1e8:	4b07      	ldr	r3, [pc, #28]	; (800c208 <CheckRetransUnconfirmedUplink+0x34>)
 800c1ea:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c1ee:	f013 0f02 	tst.w	r3, #2
 800c1f2:	d004      	beq.n	800c1fe <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800c1f4:	4b04      	ldr	r3, [pc, #16]	; (800c208 <CheckRetransUnconfirmedUplink+0x34>)
 800c1f6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d900      	bls.n	800c200 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800c1fe:	bd08      	pop	{r3, pc}
            return true;
 800c200:	2001      	movs	r0, #1
 800c202:	e7fc      	b.n	800c1fe <CheckRetransUnconfirmedUplink+0x2a>
 800c204:	20008000 	.word	0x20008000
 800c208:	20003570 	.word	0x20003570

0800c20c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800c20c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800c20e:	4b09      	ldr	r3, [pc, #36]	; (800c234 <CheckRetransConfirmedUplink+0x28>)
 800c210:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800c214:	4b08      	ldr	r3, [pc, #32]	; (800c238 <CheckRetransConfirmedUplink+0x2c>)
 800c216:	f893 041c 	ldrb.w	r0, [r3, #1052]	; 0x41c
 800c21a:	f7ff ffd5 	bl	800c1c8 <CheckRetrans>
 800c21e:	b940      	cbnz	r0, 800c232 <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800c220:	4b05      	ldr	r3, [pc, #20]	; (800c238 <CheckRetransConfirmedUplink+0x2c>)
 800c222:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c226:	f013 0f02 	tst.w	r3, #2
 800c22a:	d002      	beq.n	800c232 <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800c22c:	4b02      	ldr	r3, [pc, #8]	; (800c238 <CheckRetransConfirmedUplink+0x2c>)
 800c22e:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 800c232:	bd08      	pop	{r3, pc}
 800c234:	20008000 	.word	0x20008000
 800c238:	20003570 	.word	0x20003570

0800c23c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800c23c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c240:	d000      	beq.n	800c244 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800c242:	3001      	adds	r0, #1
    }
    return counter;
}
 800c244:	4770      	bx	lr
	...

0800c248 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800c248:	b510      	push	{r4, lr}
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800c24a:	4b12      	ldr	r3, [pc, #72]	; (800c294 <StopRetransmission+0x4c>)
 800c24c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800c250:	f013 0f02 	tst.w	r3, #2
 800c254:	d004      	beq.n	800c260 <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800c256:	4b0f      	ldr	r3, [pc, #60]	; (800c294 <StopRetransmission+0x4c>)
 800c258:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d908      	bls.n	800c272 <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800c260:	4b0d      	ldr	r3, [pc, #52]	; (800c298 <StopRetransmission+0x50>)
 800c262:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800c266:	b123      	cbz	r3, 800c272 <StopRetransmission+0x2a>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800c268:	4c0b      	ldr	r4, [pc, #44]	; (800c298 <StopRetransmission+0x50>)
 800c26a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800c26c:	f7ff ffe6 	bl	800c23c <IncreaseAdrAckCounter>
 800c270:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800c272:	4b08      	ldr	r3, [pc, #32]	; (800c294 <StopRetransmission+0x4c>)
 800c274:	2200      	movs	r2, #0
 800c276:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 800c27a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 800c27e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c282:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800c286:	f022 0202 	bic.w	r2, r2, #2
 800c28a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800c28e:	2001      	movs	r0, #1
 800c290:	bd10      	pop	{r4, pc}
 800c292:	bf00      	nop
 800c294:	20003570 	.word	0x20003570
 800c298:	20008000 	.word	0x20008000

0800c29c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800c29c:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800c29e:	4b04      	ldr	r3, [pc, #16]	; (800c2b0 <CallNvmDataChangeCallback+0x14>)
 800c2a0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c2a4:	b113      	cbz	r3, 800c2ac <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800c2a6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 800c2a8:	b103      	cbz	r3, 800c2ac <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800c2aa:	4798      	blx	r3
    }
}
 800c2ac:	bd08      	pop	{r3, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20003570 	.word	0x20003570

0800c2b4 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800c2b4:	4b04      	ldr	r3, [pc, #16]	; (800c2c8 <IsRequestPending+0x14>)
 800c2b6:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
 800c2ba:	f010 0005 	ands.w	r0, r0, #5
 800c2be:	d100      	bne.n	800c2c2 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800c2c0:	4770      	bx	lr
        return 1;
 800c2c2:	2001      	movs	r0, #1
 800c2c4:	e7fc      	b.n	800c2c0 <IsRequestPending+0xc>
 800c2c6:	bf00      	nop
 800c2c8:	20003570 	.word	0x20003570

0800c2cc <GetMaxAppPayloadWithoutFOptsLength>:
{
 800c2cc:	b500      	push	{lr}
 800c2ce:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c2d0:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800c2d2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c2d6:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800c2da:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c2de:	220d      	movs	r2, #13
 800c2e0:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c2e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2e8:	b113      	cbz	r3, 800c2f0 <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c2ea:	230e      	movs	r3, #14
 800c2ec:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c2f0:	a902      	add	r1, sp, #8
 800c2f2:	4b05      	ldr	r3, [pc, #20]	; (800c308 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800c2f4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c2f8:	f004 f928 	bl	801054c <RegionGetPhyParam>
 800c2fc:	9001      	str	r0, [sp, #4]
}
 800c2fe:	b2c0      	uxtb	r0, r0
 800c300:	b005      	add	sp, #20
 800c302:	f85d fb04 	ldr.w	pc, [sp], #4
 800c306:	bf00      	nop
 800c308:	20008000 	.word	0x20008000

0800c30c <ValidatePayloadLength>:
{
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4605      	mov	r5, r0
 800c310:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c312:	4608      	mov	r0, r1
 800c314:	f7ff ffda 	bl	800c2cc <GetMaxAppPayloadWithoutFOptsLength>
 800c318:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800c31a:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d303      	bcc.n	800c328 <ValidatePayloadLength+0x1c>
 800c320:	2aff      	cmp	r2, #255	; 0xff
 800c322:	d903      	bls.n	800c32c <ValidatePayloadLength+0x20>
    return false;
 800c324:	2000      	movs	r0, #0
 800c326:	e000      	b.n	800c32a <ValidatePayloadLength+0x1e>
 800c328:	2000      	movs	r0, #0
}
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800c32c:	2001      	movs	r0, #1
 800c32e:	e7fc      	b.n	800c32a <ValidatePayloadLength+0x1e>

0800c330 <ProcessRadioTxDone>:
{
 800c330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c332:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800c334:	4b35      	ldr	r3, [pc, #212]	; (800c40c <ProcessRadioTxDone+0xdc>)
 800c336:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d002      	beq.n	800c344 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800c33e:	4b34      	ldr	r3, [pc, #208]	; (800c410 <ProcessRadioTxDone+0xe0>)
 800c340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c342:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800c344:	4c33      	ldr	r4, [pc, #204]	; (800c414 <ProcessRadioTxDone+0xe4>)
 800c346:	f504 7560 	add.w	r5, r4, #896	; 0x380
 800c34a:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800c34e:	4628      	mov	r0, r5
 800c350:	f009 fb50 	bl	80159f4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800c354:	4628      	mov	r0, r5
 800c356:	f009 fb07 	bl	8015968 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800c35a:	f504 7566 	add.w	r5, r4, #920	; 0x398
 800c35e:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800c362:	4628      	mov	r0, r5
 800c364:	f009 fb46 	bl	80159f4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800c368:	4628      	mov	r0, r5
 800c36a:	f009 fafd 	bl	8015968 <UTIL_TIMER_Start>
    if( MacCtx.NodeAckRequested == true )
 800c36e:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800c372:	2b00      	cmp	r3, #0
 800c374:	d134      	bne.n	800c3e0 <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c376:	4b27      	ldr	r3, [pc, #156]	; (800c414 <ProcessRadioTxDone+0xe4>)
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800c37e:	4b26      	ldr	r3, [pc, #152]	; (800c418 <ProcessRadioTxDone+0xe8>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4c22      	ldr	r4, [pc, #136]	; (800c40c <ProcessRadioTxDone+0xdc>)
 800c384:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800c386:	4f23      	ldr	r7, [pc, #140]	; (800c414 <ProcessRadioTxDone+0xe4>)
 800c388:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 800c38c:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800c390:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800c392:	ae0c      	add	r6, sp, #48	; 0x30
 800c394:	4630      	mov	r0, r6
 800c396:	f009 f9c1 	bl	801571c <SysTimeGetMcuTime>
 800c39a:	ad02      	add	r5, sp, #8
 800c39c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800c3a0:	9300      	str	r3, [sp, #0]
 800c3a2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800c3a6:	e896 0006 	ldmia.w	r6, {r1, r2}
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f009 f953 	bl	8015656 <SysTimeSub>
 800c3b0:	ab07      	add	r3, sp, #28
 800c3b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c3b6:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800c3ba:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800c3be:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c3c6:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800c3ca:	b90b      	cbnz	r3, 800c3d0 <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 800c3cc:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800c3d0:	a904      	add	r1, sp, #16
 800c3d2:	4b0e      	ldr	r3, [pc, #56]	; (800c40c <ProcessRadioTxDone+0xdc>)
 800c3d4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c3d8:	f004 f8d0 	bl	801057c <RegionSetBandTxDone>
}
 800c3dc:	b00f      	add	sp, #60	; 0x3c
 800c3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800c3e0:	2315      	movs	r3, #21
 800c3e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c3e6:	a90a      	add	r1, sp, #40	; 0x28
 800c3e8:	4b08      	ldr	r3, [pc, #32]	; (800c40c <ProcessRadioTxDone+0xdc>)
 800c3ea:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c3ee:	f004 f8ad 	bl	801054c <RegionGetPhyParam>
 800c3f2:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800c3f4:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800c3f8:	f204 4404 	addw	r4, r4, #1028	; 0x404
 800c3fc:	4401      	add	r1, r0
 800c3fe:	4620      	mov	r0, r4
 800c400:	f009 faf8 	bl	80159f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800c404:	4620      	mov	r0, r4
 800c406:	f009 faaf 	bl	8015968 <UTIL_TIMER_Start>
 800c40a:	e7b8      	b.n	800c37e <ProcessRadioTxDone+0x4e>
 800c40c:	20008000 	.word	0x20008000
 800c410:	08016dc8 	.word	0x08016dc8
 800c414:	20003570 	.word	0x20003570
 800c418:	20003b30 	.word	0x20003b30

0800c41c <OnRetransmitTimeoutTimerEvent>:
{
 800c41c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800c41e:	4c09      	ldr	r4, [pc, #36]	; (800c444 <OnRetransmitTimeoutTimerEvent+0x28>)
 800c420:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800c424:	f009 fa46 	bl	80158b4 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800c428:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800c42c:	b113      	cbz	r3, 800c434 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800c42e:	2201      	movs	r2, #1
 800c430:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800c434:	4b03      	ldr	r3, [pc, #12]	; (800c444 <OnRetransmitTimeoutTimerEvent+0x28>)
 800c436:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c43a:	b113      	cbz	r3, 800c442 <OnRetransmitTimeoutTimerEvent+0x26>
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	b103      	cbz	r3, 800c442 <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800c440:	4798      	blx	r3
}
 800c442:	bd10      	pop	{r4, pc}
 800c444:	20003570 	.word	0x20003570

0800c448 <PrepareRxDoneAbort>:
{
 800c448:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800c44a:	4b0e      	ldr	r3, [pc, #56]	; (800c484 <PrepareRxDoneAbort+0x3c>)
 800c44c:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800c450:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c454:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800c458:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800c45c:	b973      	cbnz	r3, 800c47c <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800c45e:	4b09      	ldr	r3, [pc, #36]	; (800c484 <PrepareRxDoneAbort+0x3c>)
 800c460:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800c464:	f042 0202 	orr.w	r2, r2, #2
 800c468:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800c46c:	b2d2      	uxtb	r2, r2
 800c46e:	f042 0220 	orr.w	r2, r2, #32
 800c472:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800c476:	f7ff fdf1 	bl	800c05c <UpdateRxSlotIdleState>
}
 800c47a:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800c47c:	2000      	movs	r0, #0
 800c47e:	f7ff ffcd 	bl	800c41c <OnRetransmitTimeoutTimerEvent>
 800c482:	e7ec      	b.n	800c45e <PrepareRxDoneAbort+0x16>
 800c484:	20003570 	.word	0x20003570

0800c488 <LoRaMacCheckForBeaconAcquisition>:
{
 800c488:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c48a:	200b      	movs	r0, #11
 800c48c:	f003 faf2 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800c490:	b188      	cbz	r0, 800c4b6 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800c492:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <LoRaMacCheckForBeaconAcquisition+0x38>)
 800c494:	f893 0495 	ldrb.w	r0, [r3, #1173]	; 0x495
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800c498:	f010 0f01 	tst.w	r0, #1
 800c49c:	d10d      	bne.n	800c4ba <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800c49e:	f010 0004 	ands.w	r0, r0, #4
 800c4a2:	d009      	beq.n	800c4b8 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c4aa:	f023 0302 	bic.w	r3, r3, #2
 800c4ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800c4b2:	2001      	movs	r0, #1
 800c4b4:	e000      	b.n	800c4b8 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800c4b6:	2000      	movs	r0, #0
}
 800c4b8:	bd08      	pop	{r3, pc}
    return 0x00;
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	e7fc      	b.n	800c4b8 <LoRaMacCheckForBeaconAcquisition+0x30>
 800c4be:	bf00      	nop
 800c4c0:	20003570 	.word	0x20003570

0800c4c4 <GetFCntDown>:
{
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	9c04      	ldr	r4, [sp, #16]
 800c4c8:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800c4ca:	b1f2      	cbz	r2, 800c50a <GetFCntDown+0x46>
 800c4cc:	4694      	mov	ip, r2
 800c4ce:	b1f4      	cbz	r4, 800c50e <GetFCntDown+0x4a>
 800c4d0:	b1fd      	cbz	r5, 800c512 <GetFCntDown+0x4e>
    switch( addrID )
 800c4d2:	b188      	cbz	r0, 800c4f8 <GetFCntDown+0x34>
 800c4d4:	2801      	cmp	r0, #1
 800c4d6:	d11e      	bne.n	800c516 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800c4d8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d002      	beq.n	800c4e6 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800c4e0:	2303      	movs	r3, #3
 800c4e2:	7023      	strb	r3, [r4, #0]
 800c4e4:	e00a      	b.n	800c4fc <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800c4e6:	b121      	cbz	r1, 800c4f2 <GetFCntDown+0x2e>
 800c4e8:	2903      	cmp	r1, #3
 800c4ea:	d002      	beq.n	800c4f2 <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	7023      	strb	r3, [r4, #0]
 800c4f0:	e004      	b.n	800c4fc <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800c4f2:	2302      	movs	r3, #2
 800c4f4:	7023      	strb	r3, [r4, #0]
 800c4f6:	e001      	b.n	800c4fc <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800c4f8:	2304      	movs	r3, #4
 800c4fa:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800c4fc:	462a      	mov	r2, r5
 800c4fe:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800c502:	7820      	ldrb	r0, [r4, #0]
 800c504:	f003 fcd8 	bl	800feb8 <LoRaMacCryptoGetFCntDown>
}
 800c508:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c50a:	2009      	movs	r0, #9
 800c50c:	e7fc      	b.n	800c508 <GetFCntDown+0x44>
 800c50e:	2009      	movs	r0, #9
 800c510:	e7fa      	b.n	800c508 <GetFCntDown+0x44>
 800c512:	2009      	movs	r0, #9
 800c514:	e7f8      	b.n	800c508 <GetFCntDown+0x44>
    switch( addrID )
 800c516:	2005      	movs	r0, #5
 800c518:	e7f6      	b.n	800c508 <GetFCntDown+0x44>

0800c51a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800c51a:	2801      	cmp	r0, #1
 800c51c:	d900      	bls.n	800c520 <RemoveMacCommands+0x6>
 800c51e:	4770      	bx	lr
{
 800c520:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800c522:	2a01      	cmp	r2, #1
 800c524:	d105      	bne.n	800c532 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800c526:	f011 0f20 	tst.w	r1, #32
 800c52a:	d004      	beq.n	800c536 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800c52c:	f003 f93e 	bl	800f7ac <LoRaMacCommandsRemoveStickyAnsCmds>
 800c530:	e001      	b.n	800c536 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800c532:	f003 f93b 	bl	800f7ac <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800c536:	bd08      	pop	{r3, pc}

0800c538 <ProcessMacCommands>:
{
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	b08f      	sub	sp, #60	; 0x3c
 800c53e:	4698      	mov	r8, r3
    uint8_t status = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c546:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800c54a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800c54e:	2b01      	cmp	r3, #1
 800c550:	f200 82d9 	bhi.w	800cb06 <ProcessMacCommands+0x5ce>
 800c554:	4605      	mov	r5, r0
 800c556:	460c      	mov	r4, r1
 800c558:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800c55a:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800c55e:	42bc      	cmp	r4, r7
 800c560:	f080 82d1 	bcs.w	800cb06 <ProcessMacCommands+0x5ce>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800c564:	5d28      	ldrb	r0, [r5, r4]
 800c566:	f003 f989 	bl	800f87c <LoRaMacCommandsGetCmdSize>
 800c56a:	4420      	add	r0, r4
 800c56c:	42b8      	cmp	r0, r7
 800c56e:	f300 82ca 	bgt.w	800cb06 <ProcessMacCommands+0x5ce>
        switch( payload[macIndex++] )
 800c572:	1c66      	adds	r6, r4, #1
 800c574:	b2f6      	uxtb	r6, r6
 800c576:	5d2b      	ldrb	r3, [r5, r4]
 800c578:	3b02      	subs	r3, #2
 800c57a:	2b11      	cmp	r3, #17
 800c57c:	f200 82c3 	bhi.w	800cb06 <ProcessMacCommands+0x5ce>
 800c580:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c584:	00280012 	.word	0x00280012
 800c588:	00c000ad 	.word	0x00c000ad
 800c58c:	011e0106 	.word	0x011e0106
 800c590:	01740157 	.word	0x01740157
 800c594:	02c101bf 	.word	0x02c101bf
 800c598:	01ef02c1 	.word	0x01ef02c1
 800c59c:	02c102c1 	.word	0x02c102c1
 800c5a0:	02680251 	.word	0x02680251
 800c5a4:	02a10287 	.word	0x02a10287
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800c5a8:	2004      	movs	r0, #4
 800c5aa:	f003 fa63 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800c5ae:	b908      	cbnz	r0, 800c5b4 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800c5b0:	4634      	mov	r4, r6
 800c5b2:	e7d4      	b.n	800c55e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800c5b4:	2104      	movs	r1, #4
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	f003 fa10 	bl	800f9dc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800c5bc:	1ca3      	adds	r3, r4, #2
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	5da9      	ldrb	r1, [r5, r6]
 800c5c2:	4aa7      	ldr	r2, [pc, #668]	; (800c860 <ProcessMacCommands+0x328>)
 800c5c4:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800c5c8:	3403      	adds	r4, #3
 800c5ca:	b2e4      	uxtb	r4, r4
 800c5cc:	5ceb      	ldrb	r3, [r5, r3]
 800c5ce:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 800c5d2:	e7c4      	b.n	800c55e <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800c5da:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800c5de:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800c5e2:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800c5e6:	f1b9 0f00 	cmp.w	r9, #0
 800c5ea:	d036      	beq.n	800c65a <ProcessMacCommands+0x122>
                    macIndex += 4;
 800c5ec:	3405      	adds	r4, #5
 800c5ee:	b2e4      	uxtb	r4, r4
 800c5f0:	e7b5      	b.n	800c55e <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800c5f2:	2305      	movs	r3, #5
 800c5f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c5f8:	e050      	b.n	800c69c <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800c5fa:	4b9a      	ldr	r3, [pc, #616]	; (800c864 <ProcessMacCommands+0x32c>)
 800c5fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800c600:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800c604:	4293      	cmp	r3, r2
 800c606:	da03      	bge.n	800c610 <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800c608:	4b96      	ldr	r3, [pc, #600]	; (800c864 <ProcessMacCommands+0x32c>)
 800c60a:	2101      	movs	r1, #1
 800c60c:	f883 1109 	strb.w	r1, [r3, #265]	; 0x109
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800c610:	4b94      	ldr	r3, [pc, #592]	; (800c864 <ProcessMacCommands+0x32c>)
 800c612:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800c616:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800c61a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800c61e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c622:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800c626:	e04d      	b.n	800c6c4 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800c628:	2201      	movs	r2, #1
 800c62a:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800c62e:	2003      	movs	r0, #3
 800c630:	f003 f85c 	bl	800f6ec <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c634:	3401      	adds	r4, #1
 800c636:	b2e4      	uxtb	r4, r4
 800c638:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800c63c:	498a      	ldr	r1, [pc, #552]	; (800c868 <ProcessMacCommands+0x330>)
 800c63e:	fba1 2103 	umull	r2, r1, r1, r3
 800c642:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800c646:	d3ef      	bcc.n	800c628 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 800c648:	441e      	add	r6, r3
 800c64a:	b2f6      	uxtb	r6, r6
 800c64c:	1e74      	subs	r4, r6, #1
 800c64e:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800c650:	42a7      	cmp	r7, r4
 800c652:	d93a      	bls.n	800c6ca <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800c654:	5d2b      	ldrb	r3, [r5, r4]
 800c656:	2b03      	cmp	r3, #3
 800c658:	d136      	bne.n	800c6c8 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800c65a:	1e73      	subs	r3, r6, #1
 800c65c:	442b      	add	r3, r5
 800c65e:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c660:	4b80      	ldr	r3, [pc, #512]	; (800c864 <ProcessMacCommands+0x32c>)
 800c662:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800c666:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c66a:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
 800c66e:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c672:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800c676:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c67a:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800c67e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c682:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
 800c686:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800c68a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800c68e:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800c690:	2a00      	cmp	r2, #0
 800c692:	d0ae      	beq.n	800c5f2 <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800c694:	1bbb      	subs	r3, r7, r6
 800c696:	3301      	adds	r3, #1
 800c698:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800c69c:	ab05      	add	r3, sp, #20
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	f10d 030b 	add.w	r3, sp, #11
 800c6a8:	f10d 020a 	add.w	r2, sp, #10
 800c6ac:	a907      	add	r1, sp, #28
 800c6ae:	486d      	ldr	r0, [pc, #436]	; (800c864 <ProcessMacCommands+0x32c>)
 800c6b0:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800c6b4:	f003 ffe2 	bl	801067c <RegionLinkAdrReq>
 800c6b8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800c6bc:	f000 0007 	and.w	r0, r0, #7
 800c6c0:	2807      	cmp	r0, #7
 800c6c2:	d09a      	beq.n	800c5fa <ProcessMacCommands+0xc2>
{
 800c6c4:	2400      	movs	r4, #0
 800c6c6:	e7b7      	b.n	800c638 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800c6c8:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800c6ca:	42bc      	cmp	r4, r7
 800c6cc:	d204      	bcs.n	800c6d8 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800c6ce:	3c01      	subs	r4, #1
 800c6d0:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800c6d2:	f04f 0901 	mov.w	r9, #1
 800c6d6:	e742      	b.n	800c55e <ProcessMacCommands+0x26>
 800c6d8:	f04f 0901 	mov.w	r9, #1
                break;
 800c6dc:	e73f      	b.n	800c55e <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800c6de:	3402      	adds	r4, #2
 800c6e0:	b2e4      	uxtb	r4, r4
 800c6e2:	5dab      	ldrb	r3, [r5, r6]
 800c6e4:	f003 030f 	and.w	r3, r3, #15
 800c6e8:	495e      	ldr	r1, [pc, #376]	; (800c864 <ProcessMacCommands+0x32c>)
 800c6ea:	f881 3107 	strb.w	r3, [r1, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f4:	f8a1 310c 	strh.w	r3, [r1, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	a90b      	add	r1, sp, #44	; 0x2c
 800c6fc:	2004      	movs	r0, #4
 800c6fe:	f002 fff5 	bl	800f6ec <LoRaMacCommandsAddCmd>
                break;
 800c702:	e72c      	b.n	800c55e <ProcessMacCommands+0x26>
                status = 0x07;
 800c704:	2307      	movs	r3, #7
 800c706:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800c70a:	5dab      	ldrb	r3, [r5, r6]
 800c70c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c710:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800c714:	57ab      	ldrsb	r3, [r5, r6]
 800c716:	f003 030f 	and.w	r3, r3, #15
 800c71a:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800c71e:	1ca3      	adds	r3, r4, #2
 800c720:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800c722:	1ce1      	adds	r1, r4, #3
 800c724:	b2c9      	uxtb	r1, r1
 800c726:	5ceb      	ldrb	r3, [r5, r3]
 800c728:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c72a:	1d22      	adds	r2, r4, #4
 800c72c:	b2d2      	uxtb	r2, r2
 800c72e:	5c69      	ldrb	r1, [r5, r1]
 800c730:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c734:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c736:	3405      	adds	r4, #5
 800c738:	b2e4      	uxtb	r4, r4
 800c73a:	5caa      	ldrb	r2, [r5, r2]
 800c73c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c740:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800c742:	2264      	movs	r2, #100	; 0x64
 800c744:	fb02 f303 	mul.w	r3, r2, r3
 800c748:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800c74a:	a907      	add	r1, sp, #28
 800c74c:	4b45      	ldr	r3, [pc, #276]	; (800c864 <ProcessMacCommands+0x32c>)
 800c74e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c752:	f003 ffaf 	bl	80106b4 <RegionRxParamSetupReq>
 800c756:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800c75a:	f000 0307 	and.w	r3, r0, #7
 800c75e:	2b07      	cmp	r3, #7
 800c760:	d007      	beq.n	800c772 <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 800c762:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800c766:	2201      	movs	r2, #1
 800c768:	a90b      	add	r1, sp, #44	; 0x2c
 800c76a:	2005      	movs	r0, #5
 800c76c:	f002 ffbe 	bl	800f6ec <LoRaMacCommandsAddCmd>
                break;
 800c770:	e6f5      	b.n	800c55e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800c772:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800c776:	4b3b      	ldr	r3, [pc, #236]	; (800c864 <ProcessMacCommands+0x32c>)
 800c778:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800c77c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800c780:	9a08      	ldr	r2, [sp, #32]
 800c782:	665a      	str	r2, [r3, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800c784:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800c786:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800c78a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800c78e:	e7e8      	b.n	800c762 <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800c790:	4b33      	ldr	r3, [pc, #204]	; (800c860 <ProcessMacCommands+0x328>)
 800c792:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800c796:	b17b      	cbz	r3, 800c7b8 <ProcessMacCommands+0x280>
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	b17b      	cbz	r3, 800c7bc <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800c79c:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800c79e:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800c7a2:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800c7a6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800c7aa:	2202      	movs	r2, #2
 800c7ac:	a90b      	add	r1, sp, #44	; 0x2c
 800c7ae:	2006      	movs	r0, #6
 800c7b0:	f002 ff9c 	bl	800f6ec <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800c7b4:	4634      	mov	r4, r6
                break;
 800c7b6:	e6d2      	b.n	800c55e <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800c7b8:	20ff      	movs	r0, #255	; 0xff
 800c7ba:	e7f0      	b.n	800c79e <ProcessMacCommands+0x266>
 800c7bc:	20ff      	movs	r0, #255	; 0xff
 800c7be:	e7ee      	b.n	800c79e <ProcessMacCommands+0x266>
                status = 0x03;
 800c7c0:	2303      	movs	r3, #3
 800c7c2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800c7c6:	1ca3      	adds	r3, r4, #2
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	57aa      	ldrsb	r2, [r5, r6]
 800c7cc:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800c7d0:	aa07      	add	r2, sp, #28
 800c7d2:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800c7d4:	1ce2      	adds	r2, r4, #3
 800c7d6:	b2d2      	uxtb	r2, r2
 800c7d8:	5ceb      	ldrb	r3, [r5, r3]
 800c7da:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c7dc:	1d21      	adds	r1, r4, #4
 800c7de:	b2c9      	uxtb	r1, r1
 800c7e0:	5caa      	ldrb	r2, [r5, r2]
 800c7e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c7e6:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c7e8:	1d62      	adds	r2, r4, #5
 800c7ea:	b2d2      	uxtb	r2, r2
 800c7ec:	5c69      	ldrb	r1, [r5, r1]
 800c7ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c7f2:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800c7f4:	2164      	movs	r1, #100	; 0x64
 800c7f6:	fb01 f303 	mul.w	r3, r1, r3
 800c7fa:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800c800:	3406      	adds	r4, #6
 800c802:	b2e4      	uxtb	r4, r4
 800c804:	56ab      	ldrsb	r3, [r5, r2]
 800c806:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800c80a:	a905      	add	r1, sp, #20
 800c80c:	4b15      	ldr	r3, [pc, #84]	; (800c864 <ProcessMacCommands+0x32c>)
 800c80e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c812:	f003 ff5e 	bl	80106d2 <RegionNewChannelReq>
 800c816:	b2c3      	uxtb	r3, r0
 800c818:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800c81c:	2800      	cmp	r0, #0
 800c81e:	f6ff ae9e 	blt.w	800c55e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800c822:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c826:	2201      	movs	r2, #1
 800c828:	a90b      	add	r1, sp, #44	; 0x2c
 800c82a:	2007      	movs	r0, #7
 800c82c:	f002 ff5e 	bl	800f6ec <LoRaMacCommandsAddCmd>
                break;
 800c830:	e695      	b.n	800c55e <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c832:	3402      	adds	r4, #2
 800c834:	b2e4      	uxtb	r4, r4
 800c836:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800c838:	f013 030f 	ands.w	r3, r3, #15
 800c83c:	d100      	bne.n	800c840 <ProcessMacCommands+0x308>
                    delay++;
 800c83e:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800c840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c844:	fb02 f303 	mul.w	r3, r2, r3
 800c848:	4a06      	ldr	r2, [pc, #24]	; (800c864 <ProcessMacCommands+0x32c>)
 800c84a:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c84c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800c850:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c852:	2200      	movs	r2, #0
 800c854:	a90b      	add	r1, sp, #44	; 0x2c
 800c856:	2008      	movs	r0, #8
 800c858:	f002 ff48 	bl	800f6ec <LoRaMacCommandsAddCmd>
                break;
 800c85c:	e67f      	b.n	800c55e <ProcessMacCommands+0x26>
 800c85e:	bf00      	nop
 800c860:	20003570 	.word	0x20003570
 800c864:	20008000 	.word	0x20008000
 800c868:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800c86c:	3402      	adds	r4, #2
 800c86e:	b2e4      	uxtb	r4, r4
 800c870:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800c872:	2200      	movs	r2, #0
 800c874:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800c878:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c87c:	f013 0f20 	tst.w	r3, #32
 800c880:	d002      	beq.n	800c888 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c882:	2201      	movs	r2, #1
 800c884:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c888:	f013 0f10 	tst.w	r3, #16
 800c88c:	d002      	beq.n	800c894 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800c88e:	2201      	movs	r2, #1
 800c890:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c894:	f003 030f 	and.w	r3, r3, #15
 800c898:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800c89c:	a903      	add	r1, sp, #12
 800c89e:	4b9b      	ldr	r3, [pc, #620]	; (800cb0c <ProcessMacCommands+0x5d4>)
 800c8a0:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c8a4:	f003 ff24 	bl	80106f0 <RegionTxParamSetupReq>
 800c8a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c8ac:	f43f ae57 	beq.w	800c55e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c8b0:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800c8b4:	4e95      	ldr	r6, [pc, #596]	; (800cb0c <ProcessMacCommands+0x5d4>)
 800c8b6:	f886 a074 	strb.w	sl, [r6, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c8ba:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800c8be:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c8c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800c8c6:	4a92      	ldr	r2, [pc, #584]	; (800cb10 <ProcessMacCommands+0x5d8>)
 800c8c8:	5cd0      	ldrb	r0, [r2, r3]
 800c8ca:	f7f3 ff83 	bl	80007d4 <__aeabi_ui2f>
 800c8ce:	67b0      	str	r0, [r6, #120]	; 0x78
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c8d6:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c8da:	a907      	add	r1, sp, #28
 800c8dc:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800c8e0:	f003 fe34 	bl	801054c <RegionGetPhyParam>
 800c8e4:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c8e6:	b240      	sxtb	r0, r0
 800c8e8:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800c8ec:	4298      	cmp	r0, r3
 800c8ee:	bfb8      	it	lt
 800c8f0:	4618      	movlt	r0, r3
 800c8f2:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	a90b      	add	r1, sp, #44	; 0x2c
 800c8fa:	2009      	movs	r0, #9
 800c8fc:	f002 fef6 	bl	800f6ec <LoRaMacCommandsAddCmd>
                break;
 800c900:	e62d      	b.n	800c55e <ProcessMacCommands+0x26>
                status = 0x03;
 800c902:	2303      	movs	r3, #3
 800c904:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800c908:	1ca3      	adds	r3, r4, #2
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	5daa      	ldrb	r2, [r5, r6]
 800c90e:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c912:	1ce1      	adds	r1, r4, #3
 800c914:	b2c9      	uxtb	r1, r1
 800c916:	5ceb      	ldrb	r3, [r5, r3]
 800c918:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c91a:	1d22      	adds	r2, r4, #4
 800c91c:	b2d2      	uxtb	r2, r2
 800c91e:	5c69      	ldrb	r1, [r5, r1]
 800c920:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c924:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c926:	3405      	adds	r4, #5
 800c928:	b2e4      	uxtb	r4, r4
 800c92a:	5caa      	ldrb	r2, [r5, r2]
 800c92c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c930:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800c932:	2264      	movs	r2, #100	; 0x64
 800c934:	fb02 f303 	mul.w	r3, r2, r3
 800c938:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800c93a:	a907      	add	r1, sp, #28
 800c93c:	4b73      	ldr	r3, [pc, #460]	; (800cb0c <ProcessMacCommands+0x5d4>)
 800c93e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800c942:	f003 fee4 	bl	801070e <RegionDlChannelReq>
 800c946:	b2c3      	uxtb	r3, r0
 800c948:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f6ff ae06 	blt.w	800c55e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800c952:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c956:	2201      	movs	r2, #1
 800c958:	a90b      	add	r1, sp, #44	; 0x2c
 800c95a:	200a      	movs	r0, #10
 800c95c:	f002 fec6 	bl	800f6ec <LoRaMacCommandsAddCmd>
                break;
 800c960:	e5fd      	b.n	800c55e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c962:	2009      	movs	r0, #9
 800c964:	f003 f886 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800c968:	b928      	cbnz	r0, 800c976 <ProcessMacCommands+0x43e>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c96a:	4b6a      	ldr	r3, [pc, #424]	; (800cb14 <ProcessMacCommands+0x5dc>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 800c972:	4634      	mov	r4, r6
 800c974:	e5f3      	b.n	800c55e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c976:	2109      	movs	r1, #9
 800c978:	2000      	movs	r0, #0
 800c97a:	f003 f82f 	bl	800f9dc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800c97e:	a803      	add	r0, sp, #12
 800c980:	2300      	movs	r3, #0
 800c982:	9303      	str	r3, [sp, #12]
 800c984:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800c986:	f10d 0a14 	add.w	sl, sp, #20
 800c98a:	9305      	str	r3, [sp, #20]
 800c98c:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800c98e:	f10d 0b1c 	add.w	fp, sp, #28
 800c992:	9307      	str	r3, [sp, #28]
 800c994:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c996:	1ca1      	adds	r1, r4, #2
 800c998:	b2c9      	uxtb	r1, r1
 800c99a:	5dab      	ldrb	r3, [r5, r6]
 800c99c:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c99e:	1ce2      	adds	r2, r4, #3
 800c9a0:	b2d2      	uxtb	r2, r2
 800c9a2:	5c69      	ldrb	r1, [r5, r1]
 800c9a4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c9a8:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c9aa:	1d21      	adds	r1, r4, #4
 800c9ac:	b2c9      	uxtb	r1, r1
 800c9ae:	5caa      	ldrb	r2, [r5, r2]
 800c9b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9b4:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c9b6:	1d62      	adds	r2, r4, #5
 800c9b8:	b2d2      	uxtb	r2, r2
 800c9ba:	5c69      	ldrb	r1, [r5, r1]
 800c9bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c9c0:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800c9c2:	3406      	adds	r4, #6
 800c9c4:	b2e4      	uxtb	r4, r4
 800c9c6:	5caa      	ldrb	r2, [r5, r2]
 800c9c8:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c9cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c9d0:	fb01 f202 	mul.w	r2, r1, r2
 800c9d4:	0a12      	lsrs	r2, r2, #8
 800c9d6:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800c9da:	c803      	ldmia	r0, {r0, r1}
 800c9dc:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c9e0:	4a4d      	ldr	r2, [pc, #308]	; (800cb18 <ProcessMacCommands+0x5e0>)
 800c9e2:	441a      	add	r2, r3
 800c9e4:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800c9e6:	4658      	mov	r0, fp
 800c9e8:	f008 fe76 	bl	80156d8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c9ec:	4e49      	ldr	r6, [pc, #292]	; (800cb14 <ProcessMacCommands+0x5dc>)
 800c9ee:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800c9f8:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800c9fc:	a80c      	add	r0, sp, #48	; 0x30
 800c9fe:	f008 fe2a 	bl	8015656 <SysTimeSub>
 800ca02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca04:	9300      	str	r3, [sp, #0]
 800ca06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca08:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800ca0c:	4650      	mov	r0, sl
 800ca0e:	f008 fe03 	bl	8015618 <SysTimeAdd>
                    SysTimeSet( sysTime );
 800ca12:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ca16:	f008 fe3d 	bl	8015694 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800ca1a:	f002 fdcb 	bl	800f5b4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	f886 343c 	strb.w	r3, [r6, #1084]	; 0x43c
 800ca24:	e59b      	b.n	800c55e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800ca26:	200c      	movs	r0, #12
 800ca28:	f003 f824 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800ca2c:	b908      	cbnz	r0, 800ca32 <ProcessMacCommands+0x4fa>
        switch( payload[macIndex++] )
 800ca2e:	4634      	mov	r4, r6
 800ca30:	e595      	b.n	800c55e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ca32:	210c      	movs	r1, #12
 800ca34:	2000      	movs	r0, #0
 800ca36:	f002 ffd1 	bl	800f9dc <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ca3a:	4b36      	ldr	r3, [pc, #216]	; (800cb14 <ProcessMacCommands+0x5dc>)
 800ca3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ca40:	3b04      	subs	r3, #4
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d801      	bhi.n	800ca4c <ProcessMacCommands+0x514>
        switch( payload[macIndex++] )
 800ca48:	4634      	mov	r4, r6
 800ca4a:	e588      	b.n	800c55e <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800ca4c:	f002 fdae 	bl	800f5ac <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800ca50:	4634      	mov	r4, r6
 800ca52:	e584      	b.n	800c55e <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800ca54:	1ca2      	adds	r2, r4, #2
 800ca56:	b2d2      	uxtb	r2, r2
 800ca58:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ca5a:	1ce1      	adds	r1, r4, #3
 800ca5c:	b2c9      	uxtb	r1, r1
 800ca5e:	5caa      	ldrb	r2, [r5, r2]
 800ca60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ca64:	1d22      	adds	r2, r4, #4
 800ca66:	b2d2      	uxtb	r2, r2
 800ca68:	5c69      	ldrb	r1, [r5, r1]
 800ca6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800ca6e:	3405      	adds	r4, #5
 800ca70:	b2e4      	uxtb	r4, r4
 800ca72:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800ca74:	2164      	movs	r1, #100	; 0x64
 800ca76:	fb03 f101 	mul.w	r1, r3, r1
 800ca7a:	f000 000f 	and.w	r0, r0, #15
 800ca7e:	f002 fd96 	bl	800f5ae <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800ca82:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800ca86:	2201      	movs	r2, #1
 800ca88:	a90b      	add	r1, sp, #44	; 0x2c
 800ca8a:	2011      	movs	r0, #17
 800ca8c:	f002 fe2e 	bl	800f6ec <LoRaMacCommandsAddCmd>
                break;
 800ca90:	e565      	b.n	800c55e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800ca92:	200d      	movs	r0, #13
 800ca94:	f002 ffee 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800ca98:	b908      	cbnz	r0, 800ca9e <ProcessMacCommands+0x566>
        switch( payload[macIndex++] )
 800ca9a:	4634      	mov	r4, r6
 800ca9c:	e55f      	b.n	800c55e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ca9e:	210d      	movs	r1, #13
 800caa0:	2000      	movs	r0, #0
 800caa2:	f002 ff9b 	bl	800f9dc <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800caa6:	1ca2      	adds	r2, r4, #2
 800caa8:	b2d2      	uxtb	r2, r2
 800caaa:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800caac:	1ce3      	adds	r3, r4, #3
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800cab2:	3404      	adds	r4, #4
 800cab4:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800cab6:	4a19      	ldr	r2, [pc, #100]	; (800cb1c <ProcessMacCommands+0x5e4>)
 800cab8:	6812      	ldr	r2, [r2, #0]
 800caba:	5ce9      	ldrb	r1, [r5, r3]
 800cabc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800cac0:	f002 fd77 	bl	800f5b2 <LoRaMacClassBBeaconTimingAns>
 800cac4:	e54b      	b.n	800c55e <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800cac6:	1ca1      	adds	r1, r4, #2
 800cac8:	b2c9      	uxtb	r1, r1
 800caca:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800cacc:	1ce2      	adds	r2, r4, #3
 800cace:	b2d2      	uxtb	r2, r2
 800cad0:	5c68      	ldrb	r0, [r5, r1]
 800cad2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800cad6:	3404      	adds	r4, #4
 800cad8:	b2e4      	uxtb	r4, r4
 800cada:	5ca8      	ldrb	r0, [r5, r2]
 800cadc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800cae0:	2064      	movs	r0, #100	; 0x64
 800cae2:	fb03 f000 	mul.w	r0, r3, r0
 800cae6:	f002 fd66 	bl	800f5b6 <LoRaMacClassBBeaconFreqReq>
 800caea:	b140      	cbz	r0, 800cafe <ProcessMacCommands+0x5c6>
                        macCmdPayload[0] = 1;
 800caec:	2301      	movs	r3, #1
 800caee:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800caf2:	2201      	movs	r2, #1
 800caf4:	a90b      	add	r1, sp, #44	; 0x2c
 800caf6:	2013      	movs	r0, #19
 800caf8:	f002 fdf8 	bl	800f6ec <LoRaMacCommandsAddCmd>
                break;
 800cafc:	e52f      	b.n	800c55e <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800cafe:	2300      	movs	r3, #0
 800cb00:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800cb04:	e7f5      	b.n	800caf2 <ProcessMacCommands+0x5ba>
}
 800cb06:	b00f      	add	sp, #60	; 0x3c
 800cb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0c:	20008000 	.word	0x20008000
 800cb10:	08016718 	.word	0x08016718
 800cb14:	20003570 	.word	0x20003570
 800cb18:	12d53d80 	.word	0x12d53d80
 800cb1c:	20003b20 	.word	0x20003b20

0800cb20 <ProcessRadioRxDone>:
{
 800cb20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb24:	b0a1      	sub	sp, #132	; 0x84
    uint8_t *payload = RxDoneParams.Payload;
 800cb26:	4b96      	ldr	r3, [pc, #600]	; (800cd80 <ProcessRadioRxDone+0x260>)
 800cb28:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800cb2a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800cb2c:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800cb30:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	9303      	str	r3, [sp, #12]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800cb38:	4a92      	ldr	r2, [pc, #584]	; (800cd84 <ProcessRadioRxDone+0x264>)
 800cb3a:	f8d2 80d4 	ldr.w	r8, [r2, #212]	; 0xd4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800cb3e:	4a92      	ldr	r2, [pc, #584]	; (800cd88 <ProcessRadioRxDone+0x268>)
 800cb40:	7811      	ldrb	r1, [r2, #0]
 800cb42:	f363 0100 	bfi	r1, r3, #0, #1
 800cb46:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800cb48:	4c90      	ldr	r4, [pc, #576]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800cb4a:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800cb4e:	f8a4 9490 	strh.w	r9, [r4, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800cb52:	f884 7492 	strb.w	r7, [r4, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800cb56:	f894 2494 	ldrb.w	r2, [r4, #1172]	; 0x494
 800cb5a:	f884 2493 	strb.w	r2, [r4, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800cb5e:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800cb62:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800cb66:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800cb6a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800cb6e:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800cb72:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800cb76:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800cb7a:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800cb7e:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800cb82:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800cb86:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800cb8a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 800cb8e:	4b80      	ldr	r3, [pc, #512]	; (800cd90 <ProcessRadioRxDone+0x270>)
 800cb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb92:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800cb94:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800cb98:	b1c3      	cbz	r3, 800cbcc <ProcessRadioRxDone+0xac>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	4630      	mov	r0, r6
 800cb9e:	f002 fcf2 	bl	800f586 <LoRaMacClassBRxBeacon>
 800cba2:	b9c0      	cbnz	r0, 800cbd6 <ProcessRadioRxDone+0xb6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800cba4:	4b77      	ldr	r3, [pc, #476]	; (800cd84 <ProcessRadioRxDone+0x264>)
 800cba6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d019      	beq.n	800cbe2 <ProcessRadioRxDone+0xc2>
    macHdr.Value = payload[pktHeaderLen++];
 800cbae:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800cbb0:	0963      	lsrs	r3, r4, #5
 800cbb2:	3b01      	subs	r3, #1
 800cbb4:	2b06      	cmp	r3, #6
 800cbb6:	f200 82d4 	bhi.w	800d162 <ProcessRadioRxDone+0x642>
 800cbba:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cbbe:	002f      	.short	0x002f
 800cbc0:	00b502d2 	.word	0x00b502d2
 800cbc4:	00b102d2 	.word	0x00b102d2
 800cbc8:	02a202d2 	.word	0x02a202d2
        TimerStop( &MacCtx.RxWindowTimer2 );
 800cbcc:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800cbd0:	f008 fe70 	bl	80158b4 <UTIL_TIMER_Stop>
 800cbd4:	e7e1      	b.n	800cb9a <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800cbd6:	4b6d      	ldr	r3, [pc, #436]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800cbd8:	f8a3 9482 	strh.w	r9, [r3, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800cbdc:	f883 7484 	strb.w	r7, [r3, #1156]	; 0x484
        return;
 800cbe0:	e2bc      	b.n	800d15c <ProcessRadioRxDone+0x63c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800cbe2:	f002 fcd4 	bl	800f58e <LoRaMacClassBIsPingExpected>
 800cbe6:	b150      	cbz	r0, 800cbfe <ProcessRadioRxDone+0xde>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cbe8:	2000      	movs	r0, #0
 800cbea:	f002 fcc5 	bl	800f578 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800cbee:	2000      	movs	r0, #0
 800cbf0:	f002 fcc7 	bl	800f582 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800cbf4:	4b65      	ldr	r3, [pc, #404]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800cbf6:	2204      	movs	r2, #4
 800cbf8:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800cbfc:	e7d7      	b.n	800cbae <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800cbfe:	f002 fcc8 	bl	800f592 <LoRaMacClassBIsMulticastExpected>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0d3      	beq.n	800cbae <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800cc06:	2000      	movs	r0, #0
 800cc08:	f002 fcb7 	bl	800f57a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	f002 fcb9 	bl	800f584 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800cc12:	4b5e      	ldr	r3, [pc, #376]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800cc14:	2205      	movs	r2, #5
 800cc16:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800cc1a:	e7c8      	b.n	800cbae <ProcessRadioRxDone+0x8e>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800cc1c:	2d10      	cmp	r5, #16
 800cc1e:	d962      	bls.n	800cce6 <ProcessRadioRxDone+0x1c6>
            macMsgJoinAccept.Buffer = payload;
 800cc20:	9604      	str	r6, [sp, #16]
            macMsgJoinAccept.BufSize = size;
 800cc22:	b2ed      	uxtb	r5, r5
 800cc24:	f88d 5014 	strb.w	r5, [sp, #20]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800cc28:	4b56      	ldr	r3, [pc, #344]	; (800cd84 <ProcessRadioRxDone+0x264>)
 800cc2a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d160      	bne.n	800ccf4 <ProcessRadioRxDone+0x1d4>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800cc32:	f006 fced 	bl	8013610 <SecureElementGetJoinEui>
 800cc36:	4601      	mov	r1, r0
 800cc38:	aa04      	add	r2, sp, #16
 800cc3a:	20ff      	movs	r0, #255	; 0xff
 800cc3c:	f003 fa90 	bl	8010160 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d163      	bne.n	800cd0c <ProcessRadioRxDone+0x1ec>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800cc44:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800cc48:	4b4e      	ldr	r3, [pc, #312]	; (800cd84 <ProcessRadioRxDone+0x264>)
 800cc4a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800cc4e:	f89d 101a 	ldrb.w	r1, [sp, #26]
 800cc52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cc56:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800cc5a:	f89d 101b 	ldrb.w	r1, [sp, #27]
 800cc5e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cc62:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800cc66:	9a07      	ldr	r2, [sp, #28]
 800cc68:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800cc6c:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800cc70:	f3c2 1102 	ubfx	r1, r2, #4, #3
 800cc74:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cc78:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800cc7c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800cc80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800cc84:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 800cc88:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800cc8a:	b90a      	cbnz	r2, 800cc90 <ProcessRadioRxDone+0x170>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800cc90:	4c3c      	ldr	r4, [pc, #240]	; (800cd84 <ProcessRadioRxDone+0x264>)
 800cc92:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cc94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc98:	fb02 f303 	mul.w	r3, r2, r3
 800cc9c:	6523      	str	r3, [r4, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800cc9e:	4413      	add	r3, r2
 800cca0:	6563      	str	r3, [r4, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800cca2:	2300      	movs	r3, #0
 800cca4:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800cca8:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 800ccac:	931e      	str	r3, [sp, #120]	; 0x78
                applyCFList.Size = size - 17;
 800ccae:	3d11      	subs	r5, #17
 800ccb0:	f88d 507c 	strb.w	r5, [sp, #124]	; 0x7c
                applyCFList.JoinChannel = MacCtx.Channel;
 800ccb4:	4b35      	ldr	r3, [pc, #212]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800ccb6:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800ccba:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ccbe:	a91d      	add	r1, sp, #116	; 0x74
 800ccc0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ccc4:	f003 fc86 	bl	80105d4 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ccc8:	2302      	movs	r3, #2
 800ccca:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ccce:	2001      	movs	r0, #1
 800ccd0:	f002 fed0 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800ccd4:	b9a8      	cbnz	r0, 800cd02 <ProcessRadioRxDone+0x1e2>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800ccd6:	4a2d      	ldr	r2, [pc, #180]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800ccd8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ccdc:	f043 0308 	orr.w	r3, r3, #8
 800cce0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800cce4:	e227      	b.n	800d136 <ProcessRadioRxDone+0x616>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cce6:	4b29      	ldr	r3, [pc, #164]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800cce8:	2201      	movs	r2, #1
 800ccea:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ccee:	f7ff fbab 	bl	800c448 <PrepareRxDoneAbort>
                return;
 800ccf2:	e233      	b.n	800d15c <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ccf4:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ccfc:	f7ff fba4 	bl	800c448 <PrepareRxDoneAbort>
                return;
 800cd00:	e22c      	b.n	800d15c <ProcessRadioRxDone+0x63c>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800cd02:	2101      	movs	r1, #1
 800cd04:	2000      	movs	r0, #0
 800cd06:	f002 fe69 	bl	800f9dc <LoRaMacConfirmQueueSetStatus>
 800cd0a:	e7e4      	b.n	800ccd6 <ProcessRadioRxDone+0x1b6>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800cd0c:	2001      	movs	r0, #1
 800cd0e:	f002 feb1 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d0df      	beq.n	800ccd6 <ProcessRadioRxDone+0x1b6>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800cd16:	2101      	movs	r1, #1
 800cd18:	2007      	movs	r0, #7
 800cd1a:	f002 fe5f 	bl	800f9dc <LoRaMacConfirmQueueSetStatus>
 800cd1e:	e7da      	b.n	800ccd6 <ProcessRadioRxDone+0x1b6>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800cd20:	4b1a      	ldr	r3, [pc, #104]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800cd28:	4b16      	ldr	r3, [pc, #88]	; (800cd84 <ProcessRadioRxDone+0x264>)
 800cd2a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800cd2e:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800cd32:	4a16      	ldr	r2, [pc, #88]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800cd34:	f992 2428 	ldrsb.w	r2, [r2, #1064]	; 0x428
 800cd38:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800cd3c:	220d      	movs	r2, #13
 800cd3e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800cd42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd46:	b113      	cbz	r3, 800cd4e <ProcessRadioRxDone+0x22e>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800cd48:	230e      	movs	r3, #14
 800cd4a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cd4e:	a91b      	add	r1, sp, #108	; 0x6c
 800cd50:	4b0c      	ldr	r3, [pc, #48]	; (800cd84 <ProcessRadioRxDone+0x264>)
 800cd52:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800cd56:	f003 fbf9 	bl	801054c <RegionGetPhyParam>
 800cd5a:	901a      	str	r0, [sp, #104]	; 0x68
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800cd5c:	f1a5 030d 	sub.w	r3, r5, #13
 800cd60:	b21b      	sxth	r3, r3
 800cd62:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd66:	b200      	sxth	r0, r0
 800cd68:	4283      	cmp	r3, r0
 800cd6a:	dc01      	bgt.n	800cd70 <ProcessRadioRxDone+0x250>
 800cd6c:	2d0b      	cmp	r5, #11
 800cd6e:	d811      	bhi.n	800cd94 <ProcessRadioRxDone+0x274>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cd70:	4b06      	ldr	r3, [pc, #24]	; (800cd8c <ProcessRadioRxDone+0x26c>)
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800cd78:	f7ff fb66 	bl	800c448 <PrepareRxDoneAbort>
                return;
 800cd7c:	e1ee      	b.n	800d15c <ProcessRadioRxDone+0x63c>
 800cd7e:	bf00      	nop
 800cd80:	20003b20 	.word	0x20003b20
 800cd84:	20008000 	.word	0x20008000
 800cd88:	2000356c 	.word	0x2000356c
 800cd8c:	20003570 	.word	0x20003570
 800cd90:	08016dc8 	.word	0x08016dc8
            macMsgData.Buffer = payload;
 800cd94:	960e      	str	r6, [sp, #56]	; 0x38
            macMsgData.BufSize = size;
 800cd96:	f88d 503c 	strb.w	r5, [sp, #60]	; 0x3c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800cd9a:	4bba      	ldr	r3, [pc, #744]	; (800d084 <ProcessRadioRxDone+0x564>)
 800cd9c:	9317      	str	r3, [sp, #92]	; 0x5c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800cd9e:	23ff      	movs	r3, #255	; 0xff
 800cda0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800cda4:	a80e      	add	r0, sp, #56	; 0x38
 800cda6:	f003 faa1 	bl	80102ec <LoRaMacParserData>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d142      	bne.n	800ce34 <ProcessRadioRxDone+0x314>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800cdae:	4bb6      	ldr	r3, [pc, #728]	; (800d088 <ProcessRadioRxDone+0x568>)
 800cdb0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d044      	beq.n	800ce42 <ProcessRadioRxDone+0x322>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800cdb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cdba:	4bb4      	ldr	r3, [pc, #720]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cdbc:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800cdc0:	f10d 010a 	add.w	r1, sp, #10
 800cdc4:	a80e      	add	r0, sp, #56	; 0x38
 800cdc6:	f7ff f9d5 	bl	800c174 <DetermineFrameType>
 800cdca:	4605      	mov	r5, r0
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d163      	bne.n	800ce98 <ProcessRadioRxDone+0x378>
            downLinkCounter = 0;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	9303      	str	r3, [sp, #12]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d065      	beq.n	800cea6 <ProcessRadioRxDone+0x386>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800cdda:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800cddc:	2d01      	cmp	r5, #1
 800cdde:	d10a      	bne.n	800cdf6 <ProcessRadioRxDone+0x2d6>
 800cde0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	f040 808a 	bne.w	800cefe <ProcessRadioRxDone+0x3de>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800cdea:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800cdee:	f013 0f60 	tst.w	r3, #96	; 0x60
 800cdf2:	f040 8084 	bne.w	800cefe <ProcessRadioRxDone+0x3de>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800cdf6:	ab03      	add	r3, sp, #12
 800cdf8:	9301      	str	r3, [sp, #4]
 800cdfa:	f10d 030b 	add.w	r3, sp, #11
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	4ba1      	ldr	r3, [pc, #644]	; (800d088 <ProcessRadioRxDone+0x568>)
 800ce02:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ce06:	aa0e      	add	r2, sp, #56	; 0x38
 800ce08:	f89d 100a 	ldrb.w	r1, [sp, #10]
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	f7ff fb59 	bl	800c4c4 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d07f      	beq.n	800cf16 <ProcessRadioRxDone+0x3f6>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800ce16:	2807      	cmp	r0, #7
 800ce18:	d078      	beq.n	800cf0c <ProcessRadioRxDone+0x3ec>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce1a:	4b9c      	ldr	r3, [pc, #624]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ce22:	9a03      	ldr	r2, [sp, #12]
 800ce24:	4b99      	ldr	r3, [pc, #612]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800ce26:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ce2a:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800ce2e:	f7ff fb0b 	bl	800c448 <PrepareRxDoneAbort>
                return;
 800ce32:	e193      	b.n	800d15c <ProcessRadioRxDone+0x63c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce34:	4b95      	ldr	r3, [pc, #596]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ce3c:	f7ff fb04 	bl	800c448 <PrepareRxDoneAbort>
                return;
 800ce40:	e18c      	b.n	800d15c <ProcessRadioRxDone+0x63c>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800ce42:	f002 fba4 	bl	800f58e <LoRaMacClassBIsPingExpected>
 800ce46:	b188      	cbz	r0, 800ce6c <ProcessRadioRxDone+0x34c>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ce48:	2000      	movs	r0, #0
 800ce4a:	f002 fb95 	bl	800f578 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800ce4e:	2000      	movs	r0, #0
 800ce50:	f002 fb97 	bl	800f582 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ce54:	4b8d      	ldr	r3, [pc, #564]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800ce56:	2204      	movs	r2, #4
 800ce58:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ce5c:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800ce60:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800ce64:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce66:	f002 fbab 	bl	800f5c0 <LoRaMacClassBSetFPendingBit>
 800ce6a:	e7a5      	b.n	800cdb8 <ProcessRadioRxDone+0x298>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ce6c:	f002 fb91 	bl	800f592 <LoRaMacClassBIsMulticastExpected>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d0a1      	beq.n	800cdb8 <ProcessRadioRxDone+0x298>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ce74:	2000      	movs	r0, #0
 800ce76:	f002 fb80 	bl	800f57a <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ce7a:	2000      	movs	r0, #0
 800ce7c:	f002 fb82 	bl	800f584 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ce80:	4b82      	ldr	r3, [pc, #520]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800ce82:	2205      	movs	r2, #5
 800ce84:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ce88:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800ce8c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800ce90:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce92:	f002 fb95 	bl	800f5c0 <LoRaMacClassBSetFPendingBit>
 800ce96:	e78f      	b.n	800cdb8 <ProcessRadioRxDone+0x298>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ce98:	4b7c      	ldr	r3, [pc, #496]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800ce9a:	2201      	movs	r2, #1
 800ce9c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800cea0:	f7ff fad2 	bl	800c448 <PrepareRxDoneAbort>
                return;
 800cea4:	e15a      	b.n	800d15c <ProcessRadioRxDone+0x63c>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800cea6:	4618      	mov	r0, r3
 800cea8:	4a77      	ldr	r2, [pc, #476]	; (800d088 <ProcessRadioRxDone+0x568>)
 800ceaa:	212c      	movs	r1, #44	; 0x2c
 800ceac:	fb01 2203 	mla	r2, r1, r3, r2
 800ceb0:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 800ceb4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ceb6:	428a      	cmp	r2, r1
 800ceb8:	d002      	beq.n	800cec0 <ProcessRadioRxDone+0x3a0>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ceba:	3301      	adds	r3, #1
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	e78a      	b.n	800cdd6 <ProcessRadioRxDone+0x2b6>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800cec0:	4971      	ldr	r1, [pc, #452]	; (800d088 <ProcessRadioRxDone+0x568>)
 800cec2:	262c      	movs	r6, #44	; 0x2c
 800cec4:	fb06 1103 	mla	r1, r6, r3, r1
 800cec8:	f891 10da 	ldrb.w	r1, [r1, #218]	; 0xda
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800cecc:	2900      	cmp	r1, #0
 800cece:	d0f4      	beq.n	800ceba <ProcessRadioRxDone+0x39a>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ced0:	4b6d      	ldr	r3, [pc, #436]	; (800d088 <ProcessRadioRxDone+0x568>)
 800ced2:	fb06 3000 	mla	r0, r6, r0, r3
 800ced6:	f890 60db 	ldrb.w	r6, [r0, #219]	; 0xdb
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ceda:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 800cede:	6809      	ldr	r1, [r1, #0]
 800cee0:	9103      	str	r1, [sp, #12]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800cee2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800cee6:	2b02      	cmp	r3, #2
 800cee8:	d002      	beq.n	800cef0 <ProcessRadioRxDone+0x3d0>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ceea:	4690      	mov	r8, r2
                    multicast = 1;
 800ceec:	2501      	movs	r5, #1
 800ceee:	e775      	b.n	800cddc <ProcessRadioRxDone+0x2bc>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800cef0:	4b66      	ldr	r3, [pc, #408]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cef2:	2103      	movs	r1, #3
 800cef4:	f883 1493 	strb.w	r1, [r3, #1171]	; 0x493
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800cef8:	4690      	mov	r8, r2
                    multicast = 1;
 800cefa:	2501      	movs	r5, #1
 800cefc:	e76e      	b.n	800cddc <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cefe:	4b63      	ldr	r3, [pc, #396]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cf00:	2201      	movs	r2, #1
 800cf02:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800cf06:	f7ff fa9f 	bl	800c448 <PrepareRxDoneAbort>
                return;
 800cf0a:	e127      	b.n	800d15c <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800cf0c:	4b5f      	ldr	r3, [pc, #380]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cf0e:	2208      	movs	r2, #8
 800cf10:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800cf14:	e785      	b.n	800ce22 <ProcessRadioRxDone+0x302>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800cf16:	ab0e      	add	r3, sp, #56	; 0x38
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	9b03      	ldr	r3, [sp, #12]
 800cf1c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800cf20:	4641      	mov	r1, r8
 800cf22:	4630      	mov	r0, r6
 800cf24:	f003 f870 	bl	8010008 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800cf28:	2800      	cmp	r0, #0
 800cf2a:	d13d      	bne.n	800cfa8 <ProcessRadioRxDone+0x488>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cf2c:	4b57      	ldr	r3, [pc, #348]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cf2e:	2100      	movs	r1, #0
 800cf30:	f883 1425 	strb.w	r1, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800cf34:	f883 5426 	strb.w	r5, [r3, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800cf38:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800cf3c:	f3c2 1000 	ubfx	r0, r2, #4, #1
 800cf40:	f883 0429 	strb.w	r0, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800cf44:	f8c3 142c 	str.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800cf48:	f883 1430 	strb.w	r1, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800cf4c:	9803      	ldr	r0, [sp, #12]
 800cf4e:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800cf52:	f8c3 0470 	str.w	r0, [r3, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cf56:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800cf5a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cf5e:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800cf62:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800cf66:	f893 0493 	ldrb.w	r0, [r3, #1171]	; 0x493
 800cf6a:	2801      	cmp	r0, #1
 800cf6c:	d92a      	bls.n	800cfc4 <ProcessRadioRxDone+0x4a4>
            if( multicast == 1 )
 800cf6e:	2d01      	cmp	r5, #1
 800cf70:	d02e      	beq.n	800cfd0 <ProcessRadioRxDone+0x4b0>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800cf72:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800cf76:	2ca0      	cmp	r4, #160	; 0xa0
 800cf78:	d02f      	beq.n	800cfda <ProcessRadioRxDone+0x4ba>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	4a42      	ldr	r2, [pc, #264]	; (800d088 <ProcessRadioRxDone+0x568>)
 800cf7e:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800cf82:	4a42      	ldr	r2, [pc, #264]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cf84:	f882 3424 	strb.w	r3, [r2, #1060]	; 0x424
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800cf88:	4b40      	ldr	r3, [pc, #256]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cf8a:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 800cf8e:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 800cf92:	f7ff fac2 	bl	800c51a <RemoveMacCommands>
            switch( fType )
 800cf96:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	f200 809a 	bhi.w	800d0d4 <ProcessRadioRxDone+0x5b4>
 800cfa0:	e8df f003 	tbb	[pc, r3]
 800cfa4:	88785d36 	.word	0x88785d36
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800cfa8:	2802      	cmp	r0, #2
 800cfaa:	d006      	beq.n	800cfba <ProcessRadioRxDone+0x49a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800cfac:	4b37      	ldr	r3, [pc, #220]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cfae:	220b      	movs	r2, #11
 800cfb0:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800cfb4:	f7ff fa48 	bl	800c448 <PrepareRxDoneAbort>
                return;
 800cfb8:	e0d0      	b.n	800d15c <ProcessRadioRxDone+0x63c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800cfba:	4b34      	ldr	r3, [pc, #208]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cfbc:	220a      	movs	r2, #10
 800cfbe:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800cfc2:	e7f7      	b.n	800cfb4 <ProcessRadioRxDone+0x494>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800cfc4:	4b30      	ldr	r3, [pc, #192]	; (800d088 <ProcessRadioRxDone+0x568>)
 800cfc6:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800cfc8:	2201      	movs	r2, #1
 800cfca:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800cfce:	e7ce      	b.n	800cf6e <ProcessRadioRxDone+0x44e>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800cfd0:	4b2e      	ldr	r3, [pc, #184]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800cfd8:	e7d6      	b.n	800cf88 <ProcessRadioRxDone+0x468>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800cfda:	4b2b      	ldr	r3, [pc, #172]	; (800d088 <ProcessRadioRxDone+0x568>)
 800cfdc:	2201      	movs	r2, #1
 800cfde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800cfe2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800cfe6:	b913      	cbnz	r3, 800cfee <ProcessRadioRxDone+0x4ce>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800cfe8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cfea:	4b27      	ldr	r3, [pc, #156]	; (800d088 <ProcessRadioRxDone+0x568>)
 800cfec:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800cfee:	4b27      	ldr	r3, [pc, #156]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800cff6:	4290      	cmp	r0, r2
 800cff8:	d9c6      	bls.n	800cf88 <ProcessRadioRxDone+0x468>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800cffa:	4b23      	ldr	r3, [pc, #140]	; (800d088 <ProcessRadioRxDone+0x568>)
 800cffc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800d000:	4b22      	ldr	r3, [pc, #136]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800d002:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800d006:	4a22      	ldr	r2, [pc, #136]	; (800d090 <ProcessRadioRxDone+0x570>)
 800d008:	6812      	ldr	r2, [r2, #0]
 800d00a:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
 800d00e:	e7bb      	b.n	800cf88 <ProcessRadioRxDone+0x468>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d010:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800d014:	4c1d      	ldr	r4, [pc, #116]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800d016:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	463b      	mov	r3, r7
 800d01e:	f002 020f 	and.w	r2, r2, #15
 800d022:	2100      	movs	r1, #0
 800d024:	a812      	add	r0, sp, #72	; 0x48
 800d026:	f7ff fa87 	bl	800c538 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d02a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d02e:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d034:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d038:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800d03c:	f884 3430 	strb.w	r3, [r4, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800d040:	2301      	movs	r3, #1
 800d042:	f884 3431 	strb.w	r3, [r4, #1073]	; 0x431
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800d046:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d04a:	2be0      	cmp	r3, #224	; 0xe0
 800d04c:	d049      	beq.n	800d0e2 <ProcessRadioRxDone+0x5c2>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d04e:	4a0f      	ldr	r2, [pc, #60]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800d050:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800d054:	f043 0302 	orr.w	r3, r3, #2
 800d058:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800d05c:	e06b      	b.n	800d136 <ProcessRadioRxDone+0x616>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d05e:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 800d062:	4c0a      	ldr	r4, [pc, #40]	; (800d08c <ProcessRadioRxDone+0x56c>)
 800d064:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	463b      	mov	r3, r7
 800d06c:	f002 020f 	and.w	r2, r2, #15
 800d070:	2100      	movs	r1, #0
 800d072:	a812      	add	r0, sp, #72	; 0x48
 800d074:	f7ff fa60 	bl	800c538 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d078:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d07c:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800d080:	e7e1      	b.n	800d046 <ProcessRadioRxDone+0x526>
 800d082:	bf00      	nop
 800d084:	200037a8 	.word	0x200037a8
 800d088:	20008000 	.word	0x20008000
 800d08c:	20003570 	.word	0x20003570
 800d090:	20003b20 	.word	0x20003b20
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d094:	4c3d      	ldr	r4, [pc, #244]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d096:	f894 3493 	ldrb.w	r3, [r4, #1171]	; 0x493
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	463b      	mov	r3, r7
 800d09e:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d0a6:	f7ff fa47 	bl	800c538 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d0aa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d0ae:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
                    break;
 800d0b2:	e7c8      	b.n	800d046 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d0b4:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 800d0b8:	4b34      	ldr	r3, [pc, #208]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d0ba:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d0be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0c0:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d0c4:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 800d0c8:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800d0d2:	e7b8      	b.n	800d046 <ProcessRadioRxDone+0x526>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d0d4:	4b2d      	ldr	r3, [pc, #180]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800d0dc:	f7ff f9b4 	bl	800c448 <PrepareRxDoneAbort>
                    break;
 800d0e0:	e7b1      	b.n	800d046 <ProcessRadioRxDone+0x526>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800d0e2:	4a2b      	ldr	r2, [pc, #172]	; (800d190 <ProcessRadioRxDone+0x670>)
 800d0e4:	f892 210b 	ldrb.w	r2, [r2, #267]	; 0x10b
 800d0e8:	2a00      	cmp	r2, #0
 800d0ea:	d1b0      	bne.n	800d04e <ProcessRadioRxDone+0x52e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d0ec:	4a27      	ldr	r2, [pc, #156]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d0ee:	f882 3427 	strb.w	r3, [r2, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800d0f8:	f882 3430 	strb.w	r3, [r2, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800d0fc:	f882 3431 	strb.w	r3, [r2, #1073]	; 0x431
 800d100:	e7a5      	b.n	800d04e <ProcessRadioRxDone+0x52e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d102:	1e6a      	subs	r2, r5, #1
 800d104:	4c21      	ldr	r4, [pc, #132]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d106:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800d10a:	b292      	uxth	r2, r2
 800d10c:	1c71      	adds	r1, r6, #1
 800d10e:	4638      	mov	r0, r7
 800d110:	f006 faaf 	bl	8013672 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d114:	2303      	movs	r3, #3
 800d116:	f884 3424 	strb.w	r3, [r4, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d120:	f8c4 742c 	str.w	r7, [r4, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d124:	3d01      	subs	r5, #1
 800d126:	f884 5430 	strb.w	r5, [r4, #1072]	; 0x430
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d12a:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800d12e:	f043 0302 	orr.w	r3, r3, #2
 800d132:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d136:	4b15      	ldr	r3, [pc, #84]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d138:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	d917      	bls.n	800d170 <ProcessRadioRxDone+0x650>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800d140:	4b12      	ldr	r3, [pc, #72]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d142:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800d146:	2b02      	cmp	r3, #2
 800d148:	d006      	beq.n	800d158 <ProcessRadioRxDone+0x638>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800d14a:	4a10      	ldr	r2, [pc, #64]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d14c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800d150:	f043 0320 	orr.w	r3, r3, #32
 800d154:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800d158:	f7fe ff80 	bl	800c05c <UpdateRxSlotIdleState>
}
 800d15c:	b021      	add	sp, #132	; 0x84
 800d15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d162:	4b0a      	ldr	r3, [pc, #40]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d164:	2201      	movs	r2, #1
 800d166:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800d16a:	f7ff f96d 	bl	800c448 <PrepareRxDoneAbort>
            break;
 800d16e:	e7e2      	b.n	800d136 <ProcessRadioRxDone+0x616>
        if( MacCtx.NodeAckRequested == true )
 800d170:	4b06      	ldr	r3, [pc, #24]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d172:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0e2      	beq.n	800d140 <ProcessRadioRxDone+0x620>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800d17a:	4b04      	ldr	r3, [pc, #16]	; (800d18c <ProcessRadioRxDone+0x66c>)
 800d17c:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800d180:	2b00      	cmp	r3, #0
 800d182:	d0dd      	beq.n	800d140 <ProcessRadioRxDone+0x620>
                OnRetransmitTimeoutTimerEvent( NULL );
 800d184:	2000      	movs	r0, #0
 800d186:	f7ff f949 	bl	800c41c <OnRetransmitTimeoutTimerEvent>
 800d18a:	e7d9      	b.n	800d140 <ProcessRadioRxDone+0x620>
 800d18c:	20003570 	.word	0x20003570
 800d190:	20008000 	.word	0x20008000

0800d194 <ProcessRadioTxTimeout>:
{
 800d194:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d196:	4b0f      	ldr	r3, [pc, #60]	; (800d1d4 <ProcessRadioTxTimeout+0x40>)
 800d198:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d002      	beq.n	800d1a6 <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800d1a0:	4b0d      	ldr	r3, [pc, #52]	; (800d1d8 <ProcessRadioTxTimeout+0x44>)
 800d1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a4:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800d1a6:	f7fe ff59 	bl	800c05c <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d1aa:	4c0c      	ldr	r4, [pc, #48]	; (800d1dc <ProcessRadioTxTimeout+0x48>)
 800d1ac:	2002      	movs	r0, #2
 800d1ae:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d1b2:	f002 fc41 	bl	800fa38 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d1b6:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800d1ba:	b113      	cbz	r3, 800d1c2 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800d1bc:	2201      	movs	r2, #1
 800d1be:	f884 241d 	strb.w	r2, [r4, #1053]	; 0x41d
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d1c2:	4a06      	ldr	r2, [pc, #24]	; (800d1dc <ProcessRadioTxTimeout+0x48>)
 800d1c4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800d1c8:	f043 0320 	orr.w	r3, r3, #32
 800d1cc:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800d1d0:	bd10      	pop	{r4, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20008000 	.word	0x20008000
 800d1d8:	08016dc8 	.word	0x08016dc8
 800d1dc:	20003570 	.word	0x20003570

0800d1e0 <CheckForClassBCollision>:
{
 800d1e0:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d1e2:	f002 f9d2 	bl	800f58a <LoRaMacClassBIsBeaconExpected>
 800d1e6:	b978      	cbnz	r0, 800d208 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d1e8:	4b09      	ldr	r3, [pc, #36]	; (800d210 <CheckForClassBCollision+0x30>)
 800d1ea:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d001      	beq.n	800d1f6 <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800d1f2:	2000      	movs	r0, #0
}
 800d1f4:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d1f6:	f002 f9ca 	bl	800f58e <LoRaMacClassBIsPingExpected>
 800d1fa:	b938      	cbnz	r0, 800d20c <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d1fc:	f002 f9c9 	bl	800f592 <LoRaMacClassBIsMulticastExpected>
 800d200:	2800      	cmp	r0, #0
 800d202:	d0f7      	beq.n	800d1f4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d204:	200f      	movs	r0, #15
 800d206:	e7f5      	b.n	800d1f4 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d208:	200e      	movs	r0, #14
 800d20a:	e7f3      	b.n	800d1f4 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d20c:	200f      	movs	r0, #15
 800d20e:	e7f1      	b.n	800d1f4 <CheckForClassBCollision+0x14>
 800d210:	20008000 	.word	0x20008000

0800d214 <HandleRadioRxErrorTimeout>:
{
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	4605      	mov	r5, r0
 800d218:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d21a:	4b34      	ldr	r3, [pc, #208]	; (800d2ec <HandleRadioRxErrorTimeout+0xd8>)
 800d21c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d220:	2b02      	cmp	r3, #2
 800d222:	d002      	beq.n	800d22a <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800d224:	4b32      	ldr	r3, [pc, #200]	; (800d2f0 <HandleRadioRxErrorTimeout+0xdc>)
 800d226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d228:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d22a:	f002 f9ae 	bl	800f58a <LoRaMacClassBIsBeaconExpected>
 800d22e:	4606      	mov	r6, r0
 800d230:	bb50      	cbnz	r0, 800d288 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d232:	4b2e      	ldr	r3, [pc, #184]	; (800d2ec <HandleRadioRxErrorTimeout+0xd8>)
 800d234:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d02c      	beq.n	800d296 <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800d23c:	2e00      	cmp	r6, #0
 800d23e:	d152      	bne.n	800d2e6 <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d240:	4b2c      	ldr	r3, [pc, #176]	; (800d2f4 <HandleRadioRxErrorTimeout+0xe0>)
 800d242:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800d246:	2b00      	cmp	r3, #0
 800d248:	d13c      	bne.n	800d2c4 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800d24a:	4b2a      	ldr	r3, [pc, #168]	; (800d2f4 <HandleRadioRxErrorTimeout+0xe0>)
 800d24c:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800d250:	b113      	cbz	r3, 800d258 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800d252:	4b28      	ldr	r3, [pc, #160]	; (800d2f4 <HandleRadioRxErrorTimeout+0xe0>)
 800d254:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800d258:	4628      	mov	r0, r5
 800d25a:	f002 fbed 	bl	800fa38 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800d25e:	4b23      	ldr	r3, [pc, #140]	; (800d2ec <HandleRadioRxErrorTimeout+0xd8>)
 800d260:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800d262:	f008 faf1 	bl	8015848 <UTIL_TIMER_GetElapsedTime>
 800d266:	4b23      	ldr	r3, [pc, #140]	; (800d2f4 <HandleRadioRxErrorTimeout+0xe0>)
 800d268:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800d26c:	4298      	cmp	r0, r3
 800d26e:	d33a      	bcc.n	800d2e6 <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800d270:	4c20      	ldr	r4, [pc, #128]	; (800d2f4 <HandleRadioRxErrorTimeout+0xe0>)
 800d272:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800d276:	f008 fb1d 	bl	80158b4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800d27a:	f894 3495 	ldrb.w	r3, [r4, #1173]	; 0x495
 800d27e:	f043 0320 	orr.w	r3, r3, #32
 800d282:	f884 3495 	strb.w	r3, [r4, #1173]	; 0x495
 800d286:	e02e      	b.n	800d2e6 <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800d288:	2002      	movs	r0, #2
 800d28a:	f002 f974 	bl	800f576 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800d28e:	2000      	movs	r0, #0
 800d290:	f002 f976 	bl	800f580 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800d294:	e7cd      	b.n	800d232 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d296:	f002 f97a 	bl	800f58e <LoRaMacClassBIsPingExpected>
 800d29a:	4607      	mov	r7, r0
 800d29c:	b950      	cbnz	r0, 800d2b4 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d29e:	f002 f978 	bl	800f592 <LoRaMacClassBIsMulticastExpected>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d0ca      	beq.n	800d23c <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	f002 f967 	bl	800f57a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	f002 f969 	bl	800f584 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800d2b2:	e018      	b.n	800d2e6 <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d2b4:	2000      	movs	r0, #0
 800d2b6:	f002 f95f 	bl	800f578 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	f002 f961 	bl	800f582 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800d2c0:	463e      	mov	r6, r7
 800d2c2:	e7ec      	b.n	800d29e <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800d2c4:	4b0b      	ldr	r3, [pc, #44]	; (800d2f4 <HandleRadioRxErrorTimeout+0xe0>)
 800d2c6:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800d2ca:	b113      	cbz	r3, 800d2d2 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800d2cc:	4b09      	ldr	r3, [pc, #36]	; (800d2f4 <HandleRadioRxErrorTimeout+0xe0>)
 800d2ce:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f002 fbb0 	bl	800fa38 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800d2d8:	4a06      	ldr	r2, [pc, #24]	; (800d2f4 <HandleRadioRxErrorTimeout+0xe0>)
 800d2da:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800d2de:	f043 0320 	orr.w	r3, r3, #32
 800d2e2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    UpdateRxSlotIdleState( );
 800d2e6:	f7fe feb9 	bl	800c05c <UpdateRxSlotIdleState>
}
 800d2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2ec:	20008000 	.word	0x20008000
 800d2f0:	08016dc8 	.word	0x08016dc8
 800d2f4:	20003570 	.word	0x20003570

0800d2f8 <ProcessRadioRxError>:
{
 800d2f8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800d2fa:	2106      	movs	r1, #6
 800d2fc:	2005      	movs	r0, #5
 800d2fe:	f7ff ff89 	bl	800d214 <HandleRadioRxErrorTimeout>
}
 800d302:	bd08      	pop	{r3, pc}

0800d304 <ProcessRadioRxTimeout>:
{
 800d304:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800d306:	2104      	movs	r1, #4
 800d308:	2003      	movs	r0, #3
 800d30a:	f7ff ff83 	bl	800d214 <HandleRadioRxErrorTimeout>
}
 800d30e:	bd08      	pop	{r3, pc}

0800d310 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d310:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d314:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800d316:	4a14      	ldr	r2, [pc, #80]	; (800d368 <LoRaMacHandleIrqEvents+0x58>)
 800d318:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800d31a:	2000      	movs	r0, #0
 800d31c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d31e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800d322:	b303      	cbz	r3, 800d366 <LoRaMacHandleIrqEvents+0x56>
{
 800d324:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800d326:	b2dc      	uxtb	r4, r3
 800d328:	f013 0f20 	tst.w	r3, #32
 800d32c:	d10c      	bne.n	800d348 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800d32e:	f014 0f10 	tst.w	r4, #16
 800d332:	d10c      	bne.n	800d34e <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800d334:	f014 0f08 	tst.w	r4, #8
 800d338:	d10c      	bne.n	800d354 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800d33a:	f014 0f04 	tst.w	r4, #4
 800d33e:	d10c      	bne.n	800d35a <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800d340:	f014 0f02 	tst.w	r4, #2
 800d344:	d10c      	bne.n	800d360 <LoRaMacHandleIrqEvents+0x50>
}
 800d346:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800d348:	f7fe fff2 	bl	800c330 <ProcessRadioTxDone>
 800d34c:	e7ef      	b.n	800d32e <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800d34e:	f7ff fbe7 	bl	800cb20 <ProcessRadioRxDone>
 800d352:	e7ef      	b.n	800d334 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800d354:	f7ff ff1e 	bl	800d194 <ProcessRadioTxTimeout>
 800d358:	e7ef      	b.n	800d33a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800d35a:	f7ff ffcd 	bl	800d2f8 <ProcessRadioRxError>
 800d35e:	e7ef      	b.n	800d340 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800d360:	f7ff ffd0 	bl	800d304 <ProcessRadioRxTimeout>
}
 800d364:	e7ef      	b.n	800d346 <LoRaMacHandleIrqEvents+0x36>
 800d366:	4770      	bx	lr
 800d368:	2000356c 	.word	0x2000356c

0800d36c <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800d36c:	b909      	cbnz	r1, 800d372 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800d36e:	2000      	movs	r0, #0
}
 800d370:	4770      	bx	lr
{
 800d372:	b510      	push	{r4, lr}
 800d374:	4604      	mov	r4, r0
 800d376:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800d378:	f008 fa66 	bl	8015848 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800d37c:	42a0      	cmp	r0, r4
 800d37e:	d801      	bhi.n	800d384 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800d380:	2000      	movs	r0, #0
}
 800d382:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800d384:	4b02      	ldr	r3, [pc, #8]	; (800d390 <LoRaMacHandleResponseTimeout+0x24>)
 800d386:	2200      	movs	r2, #0
 800d388:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800d38c:	2001      	movs	r0, #1
 800d38e:	e7f8      	b.n	800d382 <LoRaMacHandleResponseTimeout+0x16>
 800d390:	20008000 	.word	0x20008000

0800d394 <LoRaMacHandleMlmeRequest>:
{
 800d394:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d396:	4b14      	ldr	r3, [pc, #80]	; (800d3e8 <LoRaMacHandleMlmeRequest+0x54>)
 800d398:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800d39c:	f013 0f04 	tst.w	r3, #4
 800d3a0:	d100      	bne.n	800d3a4 <LoRaMacHandleMlmeRequest+0x10>
}
 800d3a2:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	f002 fb65 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800d3aa:	b178      	cbz	r0, 800d3cc <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800d3ac:	2001      	movs	r0, #1
 800d3ae:	f002 fb2b 	bl	800fa08 <LoRaMacConfirmQueueGetStatus>
 800d3b2:	b918      	cbnz	r0, 800d3bc <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800d3b4:	4b0c      	ldr	r3, [pc, #48]	; (800d3e8 <LoRaMacHandleMlmeRequest+0x54>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d3bc:	4a0a      	ldr	r2, [pc, #40]	; (800d3e8 <LoRaMacHandleMlmeRequest+0x54>)
 800d3be:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800d3c2:	f023 0302 	bic.w	r3, r3, #2
 800d3c6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800d3ca:	e7ea      	b.n	800d3a2 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800d3cc:	2005      	movs	r0, #5
 800d3ce:	f002 fb51 	bl	800fa74 <LoRaMacConfirmQueueIsCmdActive>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d0e5      	beq.n	800d3a2 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800d3d6:	4a04      	ldr	r2, [pc, #16]	; (800d3e8 <LoRaMacHandleMlmeRequest+0x54>)
 800d3d8:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800d3dc:	f023 0302 	bic.w	r3, r3, #2
 800d3e0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800d3e4:	e7dd      	b.n	800d3a2 <LoRaMacHandleMlmeRequest+0xe>
 800d3e6:	bf00      	nop
 800d3e8:	20003570 	.word	0x20003570

0800d3ec <SerializeTxFrame>:
{
 800d3ec:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800d3ee:	4b0f      	ldr	r3, [pc, #60]	; (800d42c <SerializeTxFrame+0x40>)
 800d3f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d3f4:	b11b      	cbz	r3, 800d3fe <SerializeTxFrame+0x12>
 800d3f6:	2b04      	cmp	r3, #4
 800d3f8:	d00a      	beq.n	800d410 <SerializeTxFrame+0x24>
 800d3fa:	2003      	movs	r0, #3
}
 800d3fc:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d3fe:	480c      	ldr	r0, [pc, #48]	; (800d430 <SerializeTxFrame+0x44>)
 800d400:	f002 ffd3 	bl	80103aa <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d404:	b968      	cbnz	r0, 800d422 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d406:	4b09      	ldr	r3, [pc, #36]	; (800d42c <SerializeTxFrame+0x40>)
 800d408:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d40c:	801a      	strh	r2, [r3, #0]
            break;
 800d40e:	e7f5      	b.n	800d3fc <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800d410:	4807      	ldr	r0, [pc, #28]	; (800d430 <SerializeTxFrame+0x44>)
 800d412:	f003 f800 	bl	8010416 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d416:	b930      	cbnz	r0, 800d426 <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d418:	4b04      	ldr	r3, [pc, #16]	; (800d42c <SerializeTxFrame+0x40>)
 800d41a:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d41e:	801a      	strh	r2, [r3, #0]
            break;
 800d420:	e7ec      	b.n	800d3fc <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d422:	2011      	movs	r0, #17
 800d424:	e7ea      	b.n	800d3fc <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d426:	2011      	movs	r0, #17
 800d428:	e7e8      	b.n	800d3fc <SerializeTxFrame+0x10>
 800d42a:	bf00      	nop
 800d42c:	20003570 	.word	0x20003570
 800d430:	20003678 	.word	0x20003678

0800d434 <ComputeRxWindowParameters>:
{
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d438:	4c1d      	ldr	r4, [pc, #116]	; (800d4b0 <ComputeRxWindowParameters+0x7c>)
 800d43a:	f894 6040 	ldrb.w	r6, [r4, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800d43e:	f994 3061 	ldrsb.w	r3, [r4, #97]	; 0x61
 800d442:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800d446:	f894 1075 	ldrb.w	r1, [r4, #117]	; 0x75
 800d44a:	4630      	mov	r0, r6
 800d44c:	f003 f993 	bl	8010776 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d450:	4d18      	ldr	r5, [pc, #96]	; (800d4b4 <ComputeRxWindowParameters+0x80>)
 800d452:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d45a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800d45e:	b241      	sxtb	r1, r0
 800d460:	4630      	mov	r0, r6
 800d462:	f003 f8d4 	bl	801060e <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d466:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800d46a:	9300      	str	r3, [sp, #0]
 800d46c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d46e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800d472:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800d476:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d47a:	f003 f8c8 	bl	801060e <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d47e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d480:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800d484:	440b      	add	r3, r1
 800d486:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d48a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d48c:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800d490:	4413      	add	r3, r2
 800d492:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d496:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800d49a:	b93b      	cbnz	r3, 800d4ac <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d49c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d49e:	4419      	add	r1, r3
 800d4a0:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d4a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d4a6:	440a      	add	r2, r1
 800d4a8:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800d4ac:	b002      	add	sp, #8
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	20008000 	.word	0x20008000
 800d4b4:	20003570 	.word	0x20003570

0800d4b8 <VerifyTxFrame>:
{
 800d4b8:	b510      	push	{r4, lr}
 800d4ba:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d4c0:	4b0d      	ldr	r3, [pc, #52]	; (800d4f8 <VerifyTxFrame+0x40>)
 800d4c2:	f893 411c 	ldrb.w	r4, [r3, #284]	; 0x11c
 800d4c6:	b914      	cbnz	r4, 800d4ce <VerifyTxFrame+0x16>
}
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	b002      	add	sp, #8
 800d4cc:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d4ce:	a801      	add	r0, sp, #4
 800d4d0:	f002 f980 	bl	800f7d4 <LoRaMacCommandsGetSizeSerializedCmds>
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	b968      	cbnz	r0, 800d4f4 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800d4d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d4dc:	4b06      	ldr	r3, [pc, #24]	; (800d4f8 <VerifyTxFrame+0x40>)
 800d4de:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800d4e2:	4b06      	ldr	r3, [pc, #24]	; (800d4fc <VerifyTxFrame+0x44>)
 800d4e4:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800d4e8:	f7fe ff10 	bl	800c30c <ValidatePayloadLength>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d1eb      	bne.n	800d4c8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800d4f0:	2408      	movs	r4, #8
 800d4f2:	e7e9      	b.n	800d4c8 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d4f4:	2413      	movs	r4, #19
 800d4f6:	e7e7      	b.n	800d4c8 <VerifyTxFrame+0x10>
 800d4f8:	20008000 	.word	0x20008000
 800d4fc:	20003570 	.word	0x20003570

0800d500 <SecureFrame>:
{
 800d500:	b530      	push	{r4, r5, lr}
 800d502:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800d504:	2300      	movs	r3, #0
 800d506:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800d508:	4b18      	ldr	r3, [pc, #96]	; (800d56c <SecureFrame+0x6c>)
 800d50a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d50e:	b133      	cbz	r3, 800d51e <SecureFrame+0x1e>
 800d510:	4605      	mov	r5, r0
 800d512:	460c      	mov	r4, r1
 800d514:	2b04      	cmp	r3, #4
 800d516:	d00b      	beq.n	800d530 <SecureFrame+0x30>
 800d518:	2003      	movs	r0, #3
}
 800d51a:	b003      	add	sp, #12
 800d51c:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d51e:	4814      	ldr	r0, [pc, #80]	; (800d570 <SecureFrame+0x70>)
 800d520:	f002 fd08 	bl	800ff34 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d524:	b9d8      	cbnz	r0, 800d55e <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d526:	4b11      	ldr	r3, [pc, #68]	; (800d56c <SecureFrame+0x6c>)
 800d528:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d52c:	801a      	strh	r2, [r3, #0]
            break;
 800d52e:	e7f4      	b.n	800d51a <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d530:	a801      	add	r0, sp, #4
 800d532:	f002 fcb5 	bl	800fea0 <LoRaMacCryptoGetFCntUp>
 800d536:	b9a0      	cbnz	r0, 800d562 <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800d538:	4b0c      	ldr	r3, [pc, #48]	; (800d56c <SecureFrame+0x6c>)
 800d53a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 800d53e:	b113      	cbz	r3, 800d546 <SecureFrame+0x46>
                fCntUp -= 1;
 800d540:	9b01      	ldr	r3, [sp, #4]
 800d542:	3b01      	subs	r3, #1
 800d544:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800d546:	4b0a      	ldr	r3, [pc, #40]	; (800d570 <SecureFrame+0x70>)
 800d548:	4622      	mov	r2, r4
 800d54a:	4629      	mov	r1, r5
 800d54c:	9801      	ldr	r0, [sp, #4]
 800d54e:	f002 fd17 	bl	800ff80 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d552:	b940      	cbnz	r0, 800d566 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d554:	4b05      	ldr	r3, [pc, #20]	; (800d56c <SecureFrame+0x6c>)
 800d556:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800d55a:	801a      	strh	r2, [r3, #0]
            break;
 800d55c:	e7dd      	b.n	800d51a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d55e:	2011      	movs	r0, #17
 800d560:	e7db      	b.n	800d51a <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d562:	2012      	movs	r0, #18
 800d564:	e7d9      	b.n	800d51a <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d566:	2011      	movs	r0, #17
 800d568:	e7d7      	b.n	800d51a <SecureFrame+0x1a>
 800d56a:	bf00      	nop
 800d56c:	20003570 	.word	0x20003570
 800d570:	20003678 	.word	0x20003678

0800d574 <SendFrameOnChannel>:
{
 800d574:	b570      	push	{r4, r5, r6, lr}
 800d576:	b086      	sub	sp, #24
 800d578:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800d580:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d584:	4d35      	ldr	r5, [pc, #212]	; (800d65c <SendFrameOnChannel+0xe8>)
 800d586:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800d58a:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d58e:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800d592:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800d596:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800d598:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d59a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800d59c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d59e:	4c30      	ldr	r4, [pc, #192]	; (800d660 <SendFrameOnChannel+0xec>)
 800d5a0:	8823      	ldrh	r3, [r4, #0]
 800d5a2:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d5a6:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
 800d5aa:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d5ae:	f504 6384 	add.w	r3, r4, #1056	; 0x420
 800d5b2:	f10d 0207 	add.w	r2, sp, #7
 800d5b6:	a902      	add	r1, sp, #8
 800d5b8:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 800d5bc:	f003 f84b 	bl	8010656 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d5c6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800d5ca:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 800d5ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5d2:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 800d5d6:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d5da:	f8d4 3420 	ldr.w	r3, [r4, #1056]	; 0x420
 800d5de:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d5e2:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d5e6:	f001 ffd6 	bl	800f596 <LoRaMacClassBIsBeaconModeActive>
 800d5ea:	bb60      	cbnz	r0, 800d646 <SendFrameOnChannel+0xd2>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d5ec:	4b1b      	ldr	r3, [pc, #108]	; (800d65c <SendFrameOnChannel+0xe8>)
 800d5ee:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d02f      	beq.n	800d656 <SendFrameOnChannel+0xe2>
    LoRaMacClassBHaltBeaconing( );
 800d5f6:	f001 ffd1 	bl	800f59c <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800d5fa:	4b18      	ldr	r3, [pc, #96]	; (800d65c <SendFrameOnChannel+0xe8>)
 800d5fc:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800d600:	4b17      	ldr	r3, [pc, #92]	; (800d660 <SendFrameOnChannel+0xec>)
 800d602:	f893 141f 	ldrb.w	r1, [r3, #1055]	; 0x41f
 800d606:	b2c0      	uxtb	r0, r0
 800d608:	f7ff ff7a 	bl	800d500 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800d60c:	4604      	mov	r4, r0
 800d60e:	b9b8      	cbnz	r0, 800d640 <SendFrameOnChannel+0xcc>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d610:	4813      	ldr	r0, [pc, #76]	; (800d660 <SendFrameOnChannel+0xec>)
 800d612:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800d616:	f043 0302 	orr.w	r3, r3, #2
 800d61a:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800d61e:	f890 341c 	ldrb.w	r3, [r0, #1052]	; 0x41c
 800d622:	3301      	adds	r3, #1
 800d624:	b2db      	uxtb	r3, r3
 800d626:	f880 341c 	strb.w	r3, [r0, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800d62a:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	f8c0 349c 	str.w	r3, [r0, #1180]	; 0x49c
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800d634:	4b0b      	ldr	r3, [pc, #44]	; (800d664 <SendFrameOnChannel+0xf0>)
 800d636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d638:	f830 1b02 	ldrh.w	r1, [r0], #2
 800d63c:	b2c9      	uxtb	r1, r1
 800d63e:	4798      	blx	r3
}
 800d640:	4620      	mov	r0, r4
 800d642:	b006      	add	sp, #24
 800d644:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d646:	f8d4 0420 	ldr.w	r0, [r4, #1056]	; 0x420
 800d64a:	f001 ffb6 	bl	800f5ba <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800d64e:	2800      	cmp	r0, #0
 800d650:	d0cc      	beq.n	800d5ec <SendFrameOnChannel+0x78>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800d652:	2410      	movs	r4, #16
 800d654:	e7f4      	b.n	800d640 <SendFrameOnChannel+0xcc>
        LoRaMacClassBStopRxSlots( );
 800d656:	f001 ffb2 	bl	800f5be <LoRaMacClassBStopRxSlots>
 800d65a:	e7cc      	b.n	800d5f6 <SendFrameOnChannel+0x82>
 800d65c:	20008000 	.word	0x20008000
 800d660:	20003570 	.word	0x20003570
 800d664:	08016dc8 	.word	0x08016dc8

0800d668 <ScheduleTx>:
{
 800d668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66c:	b08c      	sub	sp, #48	; 0x30
 800d66e:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800d670:	f7ff fdb6 	bl	800d1e0 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800d674:	4604      	mov	r4, r0
 800d676:	b118      	cbz	r0, 800d680 <ScheduleTx+0x18>
}
 800d678:	4620      	mov	r0, r4
 800d67a:	b00c      	add	sp, #48	; 0x30
 800d67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800d680:	f7fe fd50 	bl	800c124 <CalculateBackOff>
    status = SerializeTxFrame( );
 800d684:	f7ff feb2 	bl	800d3ec <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800d688:	4604      	mov	r4, r0
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d1f4      	bne.n	800d678 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800d68e:	4e36      	ldr	r6, [pc, #216]	; (800d768 <ScheduleTx+0x100>)
 800d690:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800d692:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d694:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800d698:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800d69c:	f896 3108 	ldrb.w	r3, [r6, #264]	; 0x108
 800d6a0:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d6a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	f008 f837 	bl	801571c <SysTimeGetMcuTime>
 800d6ae:	af02      	add	r7, sp, #8
 800d6b0:	f8d6 3114 	ldr.w	r3, [r6, #276]	; 0x114
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
 800d6ba:	e898 0006 	ldmia.w	r8, {r1, r2}
 800d6be:	4638      	mov	r0, r7
 800d6c0:	f007 ffc9 	bl	8015656 <SysTimeSub>
 800d6c4:	ab07      	add	r3, sp, #28
 800d6c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d6ca:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800d6ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800d6d0:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800d6de:	4b23      	ldr	r3, [pc, #140]	; (800d76c <ScheduleTx+0x104>)
 800d6e0:	881b      	ldrh	r3, [r3, #0]
 800d6e2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d6e6:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800d6ea:	b92b      	cbnz	r3, 800d6f8 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800d6f8:	4a1c      	ldr	r2, [pc, #112]	; (800d76c <ScheduleTx+0x104>)
 800d6fa:	481b      	ldr	r0, [pc, #108]	; (800d768 <ScheduleTx+0x100>)
 800d6fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	f502 6393 	add.w	r3, r2, #1176	; 0x498
 800d706:	f202 421f 	addw	r2, r2, #1055	; 0x41f
 800d70a:	a904      	add	r1, sp, #16
 800d70c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
 800d710:	f003 f81c 	bl	801074c <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800d714:	b1b0      	cbz	r0, 800d744 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 800d716:	280b      	cmp	r0, #11
 800d718:	d122      	bne.n	800d760 <ScheduleTx+0xf8>
 800d71a:	b31d      	cbz	r5, 800d764 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800d71c:	4b13      	ldr	r3, [pc, #76]	; (800d76c <ScheduleTx+0x104>)
 800d71e:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800d722:	2900      	cmp	r1, #0
 800d724:	d0a8      	beq.n	800d678 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800d726:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800d72a:	f042 0220 	orr.w	r2, r2, #32
 800d72e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800d732:	f503 755a 	add.w	r5, r3, #872	; 0x368
 800d736:	4628      	mov	r0, r5
 800d738:	f008 f95c 	bl	80159f4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 800d73c:	4628      	mov	r0, r5
 800d73e:	f008 f913 	bl	8015968 <UTIL_TIMER_Start>
            return LORAMAC_STATUS_OK;
 800d742:	e799      	b.n	800d678 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800d744:	f7ff fe76 	bl	800d434 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800d748:	f7ff feb6 	bl	800d4b8 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800d74c:	4604      	mov	r4, r0
 800d74e:	2800      	cmp	r0, #0
 800d750:	d192      	bne.n	800d678 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800d752:	4b06      	ldr	r3, [pc, #24]	; (800d76c <ScheduleTx+0x104>)
 800d754:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800d758:	f7ff ff0c 	bl	800d574 <SendFrameOnChannel>
 800d75c:	4604      	mov	r4, r0
 800d75e:	e78b      	b.n	800d678 <ScheduleTx+0x10>
            return status;
 800d760:	4604      	mov	r4, r0
 800d762:	e789      	b.n	800d678 <ScheduleTx+0x10>
 800d764:	4604      	mov	r4, r0
 800d766:	e787      	b.n	800d678 <ScheduleTx+0x10>
 800d768:	20008000 	.word	0x20008000
 800d76c:	20003570 	.word	0x20003570

0800d770 <OnTxDelayedTimerEvent>:
{
 800d770:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800d772:	4c16      	ldr	r4, [pc, #88]	; (800d7cc <OnTxDelayedTimerEvent+0x5c>)
 800d774:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800d778:	f008 f89c 	bl	80158b4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d77c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800d780:	f023 0320 	bic.w	r3, r3, #32
 800d784:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800d788:	f8d4 149c 	ldr.w	r1, [r4, #1180]	; 0x49c
 800d78c:	4b10      	ldr	r3, [pc, #64]	; (800d7d0 <OnTxDelayedTimerEvent+0x60>)
 800d78e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800d792:	f7ff fdeb 	bl	800d36c <LoRaMacHandleResponseTimeout>
 800d796:	b100      	cbz	r0, 800d79a <OnTxDelayedTimerEvent+0x2a>
}
 800d798:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800d79a:	2001      	movs	r0, #1
 800d79c:	f7ff ff64 	bl	800d668 <ScheduleTx>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d0f9      	beq.n	800d798 <OnTxDelayedTimerEvent+0x28>
 800d7a4:	280b      	cmp	r0, #11
 800d7a6:	d0f7      	beq.n	800d798 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d7a8:	4b09      	ldr	r3, [pc, #36]	; (800d7d0 <OnTxDelayedTimerEvent+0x60>)
 800d7aa:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800d7ae:	f884 2446 	strb.w	r2, [r4, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800d7b2:	f894 241c 	ldrb.w	r2, [r4, #1052]	; 0x41c
 800d7b6:	f884 2449 	strb.w	r2, [r4, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800d7ba:	2009      	movs	r0, #9
 800d7bc:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800d7c0:	f002 f93a 	bl	800fa38 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800d7c4:	f7fe fd40 	bl	800c248 <StopRetransmission>
            break;
 800d7c8:	e7e6      	b.n	800d798 <OnTxDelayedTimerEvent+0x28>
 800d7ca:	bf00      	nop
 800d7cc:	20003570 	.word	0x20003570
 800d7d0:	20008000 	.word	0x20008000

0800d7d4 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d7d4:	4b1c      	ldr	r3, [pc, #112]	; (800d848 <LoRaMacHandleMcpsRequest+0x74>)
 800d7d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800d7da:	f013 0f01 	tst.w	r3, #1
 800d7de:	d032      	beq.n	800d846 <LoRaMacHandleMcpsRequest+0x72>
{
 800d7e0:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800d7e2:	4b19      	ldr	r3, [pc, #100]	; (800d848 <LoRaMacHandleMcpsRequest+0x74>)
 800d7e4:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800d7e8:	b12b      	cbz	r3, 800d7f6 <LoRaMacHandleMcpsRequest+0x22>
 800d7ea:	2b03      	cmp	r3, #3
 800d7ec:	d003      	beq.n	800d7f6 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d006      	beq.n	800d800 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800d7f2:	2000      	movs	r0, #0
 800d7f4:	e002      	b.n	800d7fc <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800d7f6:	f7fe fced 	bl	800c1d4 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800d7fa:	b940      	cbnz	r0, 800d80e <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800d7fc:	b1b8      	cbz	r0, 800d82e <LoRaMacHandleMcpsRequest+0x5a>
}
 800d7fe:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800d800:	4b11      	ldr	r3, [pc, #68]	; (800d848 <LoRaMacHandleMcpsRequest+0x74>)
 800d802:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800d806:	b183      	cbz	r3, 800d82a <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800d808:	f7fe fd00 	bl	800c20c <CheckRetransConfirmedUplink>
 800d80c:	e7f5      	b.n	800d7fa <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800d80e:	4c0e      	ldr	r4, [pc, #56]	; (800d848 <LoRaMacHandleMcpsRequest+0x74>)
 800d810:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800d814:	f008 f84e 	bl	80158b4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800d818:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800d81c:	f023 0320 	bic.w	r3, r3, #32
 800d820:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800d824:	f7fe fd10 	bl	800c248 <StopRetransmission>
 800d828:	e7e9      	b.n	800d7fe <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800d82a:	2001      	movs	r0, #1
 800d82c:	e7e6      	b.n	800d7fc <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800d82e:	4b06      	ldr	r3, [pc, #24]	; (800d848 <LoRaMacHandleMcpsRequest+0x74>)
 800d830:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800d834:	f36f 1245 	bfc	r2, #5, #1
 800d838:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800d83c:	f883 041d 	strb.w	r0, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800d840:	f7ff ff96 	bl	800d770 <OnTxDelayedTimerEvent>
}
 800d844:	e7db      	b.n	800d7fe <LoRaMacHandleMcpsRequest+0x2a>
 800d846:	4770      	bx	lr
 800d848:	20003570 	.word	0x20003570

0800d84c <LoRaMacHandleRequestEvents>:
{
 800d84c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d84e:	4b22      	ldr	r3, [pc, #136]	; (800d8d8 <LoRaMacHandleRequestEvents+0x8c>)
 800d850:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d854:	bb7b      	cbnz	r3, 800d8b6 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800d856:	4b20      	ldr	r3, [pc, #128]	; (800d8d8 <LoRaMacHandleRequestEvents+0x8c>)
 800d858:	f893 4495 	ldrb.w	r4, [r3, #1173]	; 0x495
 800d85c:	f014 0501 	ands.w	r5, r4, #1
 800d860:	d005      	beq.n	800d86e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800d862:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800d866:	f36f 0200 	bfc	r2, #0, #1
 800d86a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800d86e:	4b1a      	ldr	r3, [pc, #104]	; (800d8d8 <LoRaMacHandleRequestEvents+0x8c>)
 800d870:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800d874:	f013 0f04 	tst.w	r3, #4
 800d878:	d006      	beq.n	800d888 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800d87a:	4b17      	ldr	r3, [pc, #92]	; (800d8d8 <LoRaMacHandleRequestEvents+0x8c>)
 800d87c:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800d880:	f36f 0282 	bfc	r2, #2, #1
 800d884:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800d888:	2001      	movs	r0, #1
 800d88a:	f7fe fbfb 	bl	800c084 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800d88e:	b135      	cbz	r5, 800d89e <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800d890:	4811      	ldr	r0, [pc, #68]	; (800d8d8 <LoRaMacHandleRequestEvents+0x8c>)
 800d892:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f200 4044 	addw	r0, r0, #1092	; 0x444
 800d89c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800d89e:	f014 0f04 	tst.w	r4, #4
 800d8a2:	d109      	bne.n	800d8b8 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800d8a4:	f001 fe7b 	bl	800f59e <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800d8a8:	4b0b      	ldr	r3, [pc, #44]	; (800d8d8 <LoRaMacHandleRequestEvents+0x8c>)
 800d8aa:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800d8ae:	f36f 1245 	bfc	r2, #5, #1
 800d8b2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
}
 800d8b6:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800d8b8:	4808      	ldr	r0, [pc, #32]	; (800d8dc <LoRaMacHandleRequestEvents+0x90>)
 800d8ba:	f002 f8e7 	bl	800fa8c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800d8be:	f002 f917 	bl	800faf0 <LoRaMacConfirmQueueGetCnt>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	d0ee      	beq.n	800d8a4 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800d8c6:	4a04      	ldr	r2, [pc, #16]	; (800d8d8 <LoRaMacHandleRequestEvents+0x8c>)
 800d8c8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800d8cc:	f043 0304 	orr.w	r3, r3, #4
 800d8d0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800d8d4:	e7e6      	b.n	800d8a4 <LoRaMacHandleRequestEvents+0x58>
 800d8d6:	bf00      	nop
 800d8d8:	20003570 	.word	0x20003570
 800d8dc:	200039c8 	.word	0x200039c8

0800d8e0 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 800d8e0:	4b07      	ldr	r3, [pc, #28]	; (800d900 <LoRaMacHandleScheduleUplinkEvent+0x20>)
 800d8e2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800d8e6:	b103      	cbz	r3, 800d8ea <LoRaMacHandleScheduleUplinkEvent+0xa>
 800d8e8:	4770      	bx	lr
{
 800d8ea:	b500      	push	{lr}
 800d8ec:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 800d8ee:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800d8f2:	f10d 0007 	add.w	r0, sp, #7
 800d8f6:	f001 ffab 	bl	800f850 <LoRaMacCommandsStickyCmdsPending>
}
 800d8fa:	b003      	add	sp, #12
 800d8fc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d900:	20003570 	.word	0x20003570

0800d904 <OpenContinuousRxCWindow>:
{
 800d904:	b570      	push	{r4, r5, r6, lr}
 800d906:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800d908:	4c16      	ldr	r4, [pc, #88]	; (800d964 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d90a:	4d17      	ldr	r5, [pc, #92]	; (800d968 <OpenContinuousRxCWindow+0x64>)
 800d90c:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800d910:	9600      	str	r6, [sp, #0]
 800d912:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d914:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800d918:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800d91c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d920:	f002 fe75 	bl	801060e <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d924:	2302      	movs	r3, #2
 800d926:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d92a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800d92e:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d932:	2301      	movs	r3, #1
 800d934:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d938:	f505 6285 	add.w	r2, r5, #1064	; 0x428
 800d93c:	4631      	mov	r1, r6
 800d93e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800d942:	f002 fe78 	bl	8010636 <RegionRxConfig>
 800d946:	b158      	cbz	r0, 800d960 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d948:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800d94c:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 800d950:	4b06      	ldr	r3, [pc, #24]	; (800d96c <OpenContinuousRxCWindow+0x68>)
 800d952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d954:	2000      	movs	r0, #0
 800d956:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800d958:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800d95c:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800d960:	b002      	add	sp, #8
 800d962:	bd70      	pop	{r4, r5, r6, pc}
 800d964:	20008000 	.word	0x20008000
 800d968:	20003570 	.word	0x20003570
 800d96c:	08016dc8 	.word	0x08016dc8

0800d970 <RxWindowSetup>:
{
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800d974:	f007 ff9e 	bl	80158b4 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800d978:	4b0c      	ldr	r3, [pc, #48]	; (800d9ac <RxWindowSetup+0x3c>)
 800d97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d97c:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d97e:	4a0c      	ldr	r2, [pc, #48]	; (800d9b0 <RxWindowSetup+0x40>)
 800d980:	4621      	mov	r1, r4
 800d982:	4b0c      	ldr	r3, [pc, #48]	; (800d9b4 <RxWindowSetup+0x44>)
 800d984:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800d988:	f002 fe55 	bl	8010636 <RegionRxConfig>
 800d98c:	b160      	cbz	r0, 800d9a8 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d98e:	4d0a      	ldr	r5, [pc, #40]	; (800d9b8 <RxWindowSetup+0x48>)
 800d990:	f895 3428 	ldrb.w	r3, [r5, #1064]	; 0x428
 800d994:	f885 346e 	strb.w	r3, [r5, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800d998:	4b04      	ldr	r3, [pc, #16]	; (800d9ac <RxWindowSetup+0x3c>)
 800d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99c:	4a05      	ldr	r2, [pc, #20]	; (800d9b4 <RxWindowSetup+0x44>)
 800d99e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800d9a0:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800d9a2:	7ce3      	ldrb	r3, [r4, #19]
 800d9a4:	f885 3494 	strb.w	r3, [r5, #1172]	; 0x494
}
 800d9a8:	bd38      	pop	{r3, r4, r5, pc}
 800d9aa:	bf00      	nop
 800d9ac:	08016dc8 	.word	0x08016dc8
 800d9b0:	20003998 	.word	0x20003998
 800d9b4:	20008000 	.word	0x20008000
 800d9b8:	20003570 	.word	0x20003570

0800d9bc <OnRxWindow2TimerEvent>:
{
 800d9bc:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800d9be:	4b13      	ldr	r3, [pc, #76]	; (800da0c <OnRxWindow2TimerEvent+0x50>)
 800d9c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800d9c4:	b903      	cbnz	r3, 800d9c8 <OnRxWindow2TimerEvent+0xc>
}
 800d9c6:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800d9c8:	4810      	ldr	r0, [pc, #64]	; (800da0c <OnRxWindow2TimerEvent+0x50>)
 800d9ca:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800d9ce:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800d9d2:	4b0f      	ldr	r3, [pc, #60]	; (800da10 <OnRxWindow2TimerEvent+0x54>)
 800d9d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d9d6:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d9da:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800d9de:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800d9e2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800d9e6:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d9f6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800d9fa:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800d9fe:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800da02:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800da06:	f7ff ffb3 	bl	800d970 <RxWindowSetup>
 800da0a:	e7dc      	b.n	800d9c6 <OnRxWindow2TimerEvent+0xa>
 800da0c:	20003570 	.word	0x20003570
 800da10:	20008000 	.word	0x20008000

0800da14 <OnRxWindow1TimerEvent>:
{
 800da14:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800da16:	4811      	ldr	r0, [pc, #68]	; (800da5c <OnRxWindow1TimerEvent+0x48>)
 800da18:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 800da1c:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800da20:	4b0f      	ldr	r3, [pc, #60]	; (800da60 <OnRxWindow1TimerEvent+0x4c>)
 800da22:	f993 2061 	ldrsb.w	r2, [r3, #97]	; 0x61
 800da26:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800da2a:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800da2e:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800da32:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800da36:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800da3a:	2200      	movs	r2, #0
 800da3c:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800da40:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800da44:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800da48:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800da4c:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800da50:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800da54:	f7ff ff8c 	bl	800d970 <RxWindowSetup>
}
 800da58:	bd08      	pop	{r3, pc}
 800da5a:	bf00      	nop
 800da5c:	20003570 	.word	0x20003570
 800da60:	20008000 	.word	0x20008000

0800da64 <LoRaMacHandleNvm>:
{
 800da64:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800da66:	4b30      	ldr	r3, [pc, #192]	; (800db28 <LoRaMacHandleNvm+0xc4>)
 800da68:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800da6c:	b103      	cbz	r3, 800da70 <LoRaMacHandleNvm+0xc>
}
 800da6e:	bd38      	pop	{r3, r4, r5, pc}
 800da70:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800da72:	2124      	movs	r1, #36	; 0x24
 800da74:	f005 fe1e 	bl	80136b4 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800da78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da7a:	4283      	cmp	r3, r0
 800da7c:	d052      	beq.n	800db24 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 800da7e:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800da80:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800da82:	2114      	movs	r1, #20
 800da84:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800da88:	f005 fe14 	bl	80136b4 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800da8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800da8e:	4283      	cmp	r3, r0
 800da90:	d002      	beq.n	800da98 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800da92:	63e0      	str	r0, [r4, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800da94:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800da98:	21e0      	movs	r1, #224	; 0xe0
 800da9a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800da9e:	f005 fe09 	bl	80136b4 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800daa2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800daa6:	4283      	cmp	r3, r0
 800daa8:	d003      	beq.n	800dab2 <LoRaMacHandleNvm+0x4e>
        nvmData->MacGroup2.Crc32 = crc;
 800daaa:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800daae:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800dab2:	21bc      	movs	r1, #188	; 0xbc
 800dab4:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800dab8:	f005 fdfc 	bl	80136b4 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800dabc:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800dac0:	4283      	cmp	r3, r0
 800dac2:	d003      	beq.n	800dacc <LoRaMacHandleNvm+0x68>
        nvmData->SecureElement.Crc32 = crc;
 800dac4:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800dac8:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800dacc:	2110      	movs	r1, #16
 800dace:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800dad2:	f005 fdef 	bl	80136b4 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800dad6:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800dada:	4283      	cmp	r3, r0
 800dadc:	d003      	beq.n	800dae6 <LoRaMacHandleNvm+0x82>
        nvmData->RegionGroup1.Crc32 = crc;
 800dade:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800dae2:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800dae6:	f44f 715e 	mov.w	r1, #888	; 0x378
 800daea:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 800daee:	f005 fde1 	bl	80136b4 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800daf2:	f8d4 3570 	ldr.w	r3, [r4, #1392]	; 0x570
 800daf6:	4283      	cmp	r3, r0
 800daf8:	d003      	beq.n	800db02 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 800dafa:	f8c4 0570 	str.w	r0, [r4, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800dafe:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800db02:	2114      	movs	r1, #20
 800db04:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800db08:	f005 fdd4 	bl	80136b4 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800db0c:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800db10:	4283      	cmp	r3, r0
 800db12:	d003      	beq.n	800db1c <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 800db14:	f8c4 0588 	str.w	r0, [r4, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800db18:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800db1c:	4628      	mov	r0, r5
 800db1e:	f7fe fbbd 	bl	800c29c <CallNvmDataChangeCallback>
 800db22:	e7a4      	b.n	800da6e <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800db24:	2500      	movs	r5, #0
 800db26:	e7ac      	b.n	800da82 <LoRaMacHandleNvm+0x1e>
 800db28:	20003570 	.word	0x20003570

0800db2c <RestoreNvmData>:
{
 800db2c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800db2e:	4b34      	ldr	r3, [pc, #208]	; (800dc00 <RestoreNvmData+0xd4>)
 800db30:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800db34:	2b01      	cmp	r3, #1
 800db36:	d001      	beq.n	800db3c <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800db38:	2001      	movs	r0, #1
}
 800db3a:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800db3c:	4c31      	ldr	r4, [pc, #196]	; (800dc04 <RestoreNvmData+0xd8>)
 800db3e:	2124      	movs	r1, #36	; 0x24
 800db40:	4620      	mov	r0, r4
 800db42:	f005 fdb7 	bl	80136b4 <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800db46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db48:	4283      	cmp	r3, r0
 800db4a:	d001      	beq.n	800db50 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800db4c:	2017      	movs	r0, #23
 800db4e:	e7f4      	b.n	800db3a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800db50:	2114      	movs	r1, #20
 800db52:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800db56:	f005 fdad 	bl	80136b4 <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800db5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800db5c:	4283      	cmp	r3, r0
 800db5e:	d001      	beq.n	800db64 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800db60:	2017      	movs	r0, #23
 800db62:	e7ea      	b.n	800db3a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800db64:	21e0      	movs	r1, #224	; 0xe0
 800db66:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800db6a:	f005 fda3 	bl	80136b4 <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800db6e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800db72:	4283      	cmp	r3, r0
 800db74:	d001      	beq.n	800db7a <RestoreNvmData+0x4e>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800db76:	2017      	movs	r0, #23
 800db78:	e7df      	b.n	800db3a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800db7a:	21bc      	movs	r1, #188	; 0xbc
 800db7c:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800db80:	f005 fd98 	bl	80136b4 <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800db84:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800db88:	4283      	cmp	r3, r0
 800db8a:	d001      	beq.n	800db90 <RestoreNvmData+0x64>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800db8c:	2017      	movs	r0, #23
 800db8e:	e7d4      	b.n	800db3a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800db90:	2110      	movs	r1, #16
 800db92:	f504 70f2 	add.w	r0, r4, #484	; 0x1e4
 800db96:	f005 fd8d 	bl	80136b4 <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800db9a:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 800db9e:	4283      	cmp	r3, r0
 800dba0:	d001      	beq.n	800dba6 <RestoreNvmData+0x7a>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dba2:	2017      	movs	r0, #23
 800dba4:	e7c9      	b.n	800db3a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800dba6:	2114      	movs	r1, #20
 800dba8:	f204 5074 	addw	r0, r4, #1396	; 0x574
 800dbac:	f005 fd82 	bl	80136b4 <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800dbb0:	f8d4 3588 	ldr.w	r3, [r4, #1416]	; 0x588
 800dbb4:	4283      	cmp	r3, r0
 800dbb6:	d001      	beq.n	800dbbc <RestoreNvmData+0x90>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dbb8:	2017      	movs	r0, #23
 800dbba:	e7be      	b.n	800db3a <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800dbbc:	4625      	mov	r5, r4
 800dbbe:	4c12      	ldr	r4, [pc, #72]	; (800dc08 <RestoreNvmData+0xdc>)
 800dbc0:	f240 528c 	movw	r2, #1420	; 0x58c
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f005 fd53 	bl	8013672 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800dbcc:	f240 528c 	movw	r2, #1420	; 0x58c
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	f005 fd65 	bl	80136a2 <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800dbd8:	4b09      	ldr	r3, [pc, #36]	; (800dc00 <RestoreNvmData+0xd4>)
 800dbda:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800dbde:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800dbe2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800dbe4:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dbe8:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 800dbec:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    return LORAMAC_STATUS_OK;
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	e79c      	b.n	800db3a <RestoreNvmData+0xe>
 800dc00:	20003570 	.word	0x20003570
 800dc04:	2000858c 	.word	0x2000858c
 800dc08:	20008000 	.word	0x20008000

0800dc0c <OnRadioRxTimeout>:
{
 800dc0c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800dc0e:	4a09      	ldr	r2, [pc, #36]	; (800dc34 <OnRadioRxTimeout+0x28>)
 800dc10:	7813      	ldrb	r3, [r2, #0]
 800dc12:	f043 0302 	orr.w	r3, r3, #2
 800dc16:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dc18:	4b07      	ldr	r3, [pc, #28]	; (800dc38 <OnRadioRxTimeout+0x2c>)
 800dc1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dc1e:	b113      	cbz	r3, 800dc26 <OnRadioRxTimeout+0x1a>
 800dc20:	691b      	ldr	r3, [r3, #16]
 800dc22:	b103      	cbz	r3, 800dc26 <OnRadioRxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dc24:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800dc26:	4b05      	ldr	r3, [pc, #20]	; (800dc3c <OnRadioRxTimeout+0x30>)
 800dc28:	2201      	movs	r2, #1
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	2002      	movs	r0, #2
 800dc2e:	f007 fbc9 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800dc32:	bd08      	pop	{r3, pc}
 800dc34:	2000356c 	.word	0x2000356c
 800dc38:	20003570 	.word	0x20003570
 800dc3c:	080166d8 	.word	0x080166d8

0800dc40 <OnRadioTxTimeout>:
{
 800dc40:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800dc42:	4a09      	ldr	r2, [pc, #36]	; (800dc68 <OnRadioTxTimeout+0x28>)
 800dc44:	7813      	ldrb	r3, [r2, #0]
 800dc46:	f043 0308 	orr.w	r3, r3, #8
 800dc4a:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dc4c:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <OnRadioTxTimeout+0x2c>)
 800dc4e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dc52:	b113      	cbz	r3, 800dc5a <OnRadioTxTimeout+0x1a>
 800dc54:	691b      	ldr	r3, [r3, #16]
 800dc56:	b103      	cbz	r3, 800dc5a <OnRadioTxTimeout+0x1a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dc58:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800dc5a:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <OnRadioTxTimeout+0x30>)
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	2100      	movs	r1, #0
 800dc60:	2002      	movs	r0, #2
 800dc62:	f007 fbaf 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800dc66:	bd08      	pop	{r3, pc}
 800dc68:	2000356c 	.word	0x2000356c
 800dc6c:	20003570 	.word	0x20003570
 800dc70:	080166e8 	.word	0x080166e8

0800dc74 <OnRadioRxDone>:
{
 800dc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc78:	4680      	mov	r8, r0
 800dc7a:	460f      	mov	r7, r1
 800dc7c:	4616      	mov	r6, r2
 800dc7e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800dc80:	f007 fdd8 	bl	8015834 <UTIL_TIMER_GetCurrentTime>
 800dc84:	4c0f      	ldr	r4, [pc, #60]	; (800dcc4 <OnRadioRxDone+0x50>)
 800dc86:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800dc88:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800dc8c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800dc8e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800dc90:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800dc92:	4b0d      	ldr	r3, [pc, #52]	; (800dcc8 <OnRadioRxDone+0x54>)
 800dc94:	781a      	ldrb	r2, [r3, #0]
 800dc96:	f042 0210 	orr.w	r2, r2, #16
 800dc9a:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800dc9c:	b2d2      	uxtb	r2, r2
 800dc9e:	f042 0201 	orr.w	r2, r2, #1
 800dca2:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dca4:	4b09      	ldr	r3, [pc, #36]	; (800dccc <OnRadioRxDone+0x58>)
 800dca6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dcaa:	b113      	cbz	r3, 800dcb2 <OnRadioRxDone+0x3e>
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	b103      	cbz	r3, 800dcb2 <OnRadioRxDone+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dcb0:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800dcb2:	4b07      	ldr	r3, [pc, #28]	; (800dcd0 <OnRadioRxDone+0x5c>)
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	2002      	movs	r0, #2
 800dcba:	f007 fb83 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800dcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc2:	bf00      	nop
 800dcc4:	20003b20 	.word	0x20003b20
 800dcc8:	2000356c 	.word	0x2000356c
 800dccc:	20003570 	.word	0x20003570
 800dcd0:	080166f8 	.word	0x080166f8

0800dcd4 <OnRadioTxDone>:
{
 800dcd4:	b530      	push	{r4, r5, lr}
 800dcd6:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800dcd8:	f007 fdac 	bl	8015834 <UTIL_TIMER_GetCurrentTime>
 800dcdc:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <OnRadioTxDone+0x48>)
 800dcde:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800dce0:	4d0f      	ldr	r5, [pc, #60]	; (800dd20 <OnRadioTxDone+0x4c>)
 800dce2:	466c      	mov	r4, sp
 800dce4:	4620      	mov	r0, r4
 800dce6:	f007 fcf7 	bl	80156d8 <SysTimeGet>
 800dcea:	f505 734e 	add.w	r3, r5, #824	; 0x338
 800dcee:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dcf2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800dcf6:	4a0b      	ldr	r2, [pc, #44]	; (800dd24 <OnRadioTxDone+0x50>)
 800dcf8:	7813      	ldrb	r3, [r2, #0]
 800dcfa:	f043 0320 	orr.w	r3, r3, #32
 800dcfe:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dd00:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800dd04:	b113      	cbz	r3, 800dd0c <OnRadioTxDone+0x38>
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	b103      	cbz	r3, 800dd0c <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dd0a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800dd0c:	4b06      	ldr	r3, [pc, #24]	; (800dd28 <OnRadioTxDone+0x54>)
 800dd0e:	2201      	movs	r2, #1
 800dd10:	2100      	movs	r1, #0
 800dd12:	2002      	movs	r0, #2
 800dd14:	f007 fb56 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800dd18:	b003      	add	sp, #12
 800dd1a:	bd30      	pop	{r4, r5, pc}
 800dd1c:	20003b30 	.word	0x20003b30
 800dd20:	20003570 	.word	0x20003570
 800dd24:	2000356c 	.word	0x2000356c
 800dd28:	08016708 	.word	0x08016708

0800dd2c <ResetMacParameters>:
{
 800dd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd2e:	b091      	sub	sp, #68	; 0x44
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800dd30:	4c53      	ldr	r4, [pc, #332]	; (800de80 <ResetMacParameters+0x154>)
 800dd32:	2600      	movs	r6, #0
 800dd34:	f884 611c 	strb.w	r6, [r4, #284]	; 0x11c
    Nvm.MacGroup1.AdrAckCounter = 0;
 800dd38:	62a6      	str	r6, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800dd3a:	4d52      	ldr	r5, [pc, #328]	; (800de84 <ResetMacParameters+0x158>)
 800dd3c:	f885 641c 	strb.w	r6, [r5, #1052]	; 0x41c
    MacCtx.RetransmitTimeoutRetry = false;
 800dd40:	f885 641d 	strb.w	r6, [r5, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 800dd44:	f8c5 649c 	str.w	r6, [r5, #1180]	; 0x49c
    Nvm.MacGroup2.MaxDCycle = 0;
 800dd48:	f884 6107 	strb.w	r6, [r4, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800dd4c:	2701      	movs	r7, #1
 800dd4e:	f8a4 710c 	strh.w	r7, [r4, #268]	; 0x10c
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800dd52:	f994 30cc 	ldrsb.w	r3, [r4, #204]	; 0xcc
 800dd56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800dd5a:	f994 30cd 	ldrsb.w	r3, [r4, #205]	; 0xcd
 800dd5e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800dd62:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800dd66:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800dd6a:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800dd6e:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 800dd72:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd76:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800dd7a:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800dd7e:	f104 02b0 	add.w	r2, r4, #176	; 0xb0
 800dd82:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dd86:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800dd8a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
 800dd8e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800dd92:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 800dd96:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800dd9a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800dd9e:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800dda0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800dda4:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.NodeAckRequested = false;
 800dda6:	f885 641e 	strb.w	r6, [r5, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 800ddaa:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ddae:	f884 6109 	strb.w	r6, [r4, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 800ddb2:	f884 610a 	strb.w	r6, [r4, #266]	; 0x10a
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800ddb6:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800ddba:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800ddbe:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800ddc0:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800ddc4:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800ddc6:	4b30      	ldr	r3, [pc, #192]	; (800de88 <ResetMacParameters+0x15c>)
 800ddc8:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ddca:	a901      	add	r1, sp, #4
 800ddcc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800ddd0:	f002 fbe2 	bl	8010598 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800ddd4:	f885 641f 	strb.w	r6, [r5, #1055]	; 0x41f
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ddd8:	f885 63d0 	strb.w	r6, [r5, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800dddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddde:	f8c5 33d4 	str.w	r3, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dde2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800dde6:	f885 33e0 	strb.w	r3, [r5, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ddea:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 800ddee:	f885 33e1 	strb.w	r3, [r5, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ddf2:	f885 63e2 	strb.w	r6, [r5, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ddf6:	f885 73e3 	strb.w	r7, [r5, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ddfa:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800ddfe:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800de02:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 800de06:	f505 7c74 	add.w	ip, r5, #976	; 0x3d0
 800de0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de10:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800de14:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800de18:	f885 73fa 	strb.w	r7, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800de1c:	2302      	movs	r3, #2
 800de1e:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800de22:	960e      	str	r6, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800de24:	960f      	str	r6, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800de26:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 800de2a:	b11b      	cbz	r3, 800de34 <ResetMacParameters+0x108>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800de2c:	685a      	ldr	r2, [r3, #4]
 800de2e:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800de30:	691b      	ldr	r3, [r3, #16]
 800de32:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800de34:	4b13      	ldr	r3, [pc, #76]	; (800de84 <ResetMacParameters+0x158>)
 800de36:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 800de3a:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800de3c:	f203 4224 	addw	r2, r3, #1060	; 0x424
 800de40:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800de42:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 800de46:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800de48:	f203 4395 	addw	r3, r3, #1173	; 0x495
 800de4c:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800de4e:	4a0c      	ldr	r2, [pc, #48]	; (800de80 <ResetMacParameters+0x154>)
 800de50:	f102 03d4 	add.w	r3, r2, #212	; 0xd4
 800de54:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800de56:	f102 0340 	add.w	r3, r2, #64	; 0x40
 800de5a:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800de5c:	f102 0344 	add.w	r3, r2, #68	; 0x44
 800de60:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800de62:	f102 03d8 	add.w	r3, r2, #216	; 0xd8
 800de66:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800de68:	f502 738e 	add.w	r3, r2, #284	; 0x11c
 800de6c:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800de6e:	f202 5274 	addw	r2, r2, #1396	; 0x574
 800de72:	a90e      	add	r1, sp, #56	; 0x38
 800de74:	a805      	add	r0, sp, #20
 800de76:	f001 fb7d 	bl	800f574 <LoRaMacClassBInit>
}
 800de7a:	b011      	add	sp, #68	; 0x44
 800de7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de7e:	bf00      	nop
 800de80:	20008000 	.word	0x20008000
 800de84:	20003570 	.word	0x20003570
 800de88:	20003a90 	.word	0x20003a90

0800de8c <SwitchClass>:
{
 800de8c:	b570      	push	{r4, r5, r6, lr}
 800de8e:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800de90:	4b3e      	ldr	r3, [pc, #248]	; (800df8c <SwitchClass+0x100>)
 800de92:	f893 5104 	ldrb.w	r5, [r3, #260]	; 0x104
 800de96:	2d01      	cmp	r5, #1
 800de98:	d065      	beq.n	800df66 <SwitchClass+0xda>
 800de9a:	2d02      	cmp	r5, #2
 800de9c:	d06b      	beq.n	800df76 <SwitchClass+0xea>
 800de9e:	b10d      	cbz	r5, 800dea4 <SwitchClass+0x18>
 800dea0:	2003      	movs	r0, #3
}
 800dea2:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800dea4:	b930      	cbnz	r0, 800deb4 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800dea6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800deaa:	3364      	adds	r3, #100	; 0x64
 800deac:	e893 0003 	ldmia.w	r3, {r0, r1}
 800deb0:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 800deb4:	2c01      	cmp	r4, #1
 800deb6:	d022      	beq.n	800defe <SwitchClass+0x72>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800deb8:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 800deba:	2c02      	cmp	r4, #2
 800debc:	d1f1      	bne.n	800dea2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800debe:	4b33      	ldr	r3, [pc, #204]	; (800df8c <SwitchClass+0x100>)
 800dec0:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800dec4:	4e32      	ldr	r6, [pc, #200]	; (800df90 <SwitchClass+0x104>)
 800dec6:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800deca:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800dece:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ded2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ded4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ded8:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dedc:	2302      	movs	r3, #2
 800dede:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800dee2:	2300      	movs	r3, #0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	dd13      	ble.n	800df10 <SwitchClass+0x84>
                MacCtx.NodeAckRequested = false;
 800dee8:	4b29      	ldr	r3, [pc, #164]	; (800df90 <SwitchClass+0x104>)
 800deea:	2200      	movs	r2, #0
 800deec:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                Radio.Sleep( );
 800def0:	4b28      	ldr	r3, [pc, #160]	; (800df94 <SwitchClass+0x108>)
 800def2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def4:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800def6:	f7ff fd05 	bl	800d904 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800defa:	4628      	mov	r0, r5
 800defc:	e7d1      	b.n	800dea2 <SwitchClass+0x16>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800defe:	4620      	mov	r0, r4
 800df00:	f001 fb4e 	bl	800f5a0 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800df04:	2800      	cmp	r0, #0
 800df06:	d1d8      	bne.n	800deba <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800df08:	4b20      	ldr	r3, [pc, #128]	; (800df8c <SwitchClass+0x100>)
 800df0a:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800df0e:	e7d4      	b.n	800deba <SwitchClass+0x2e>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800df10:	4618      	mov	r0, r3
 800df12:	4a1e      	ldr	r2, [pc, #120]	; (800df8c <SwitchClass+0x100>)
 800df14:	212c      	movs	r1, #44	; 0x2c
 800df16:	fb01 2203 	mla	r2, r1, r3, r2
 800df1a:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 800df1e:	b912      	cbnz	r2, 800df26 <SwitchClass+0x9a>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800df20:	3301      	adds	r3, #1
 800df22:	b25b      	sxtb	r3, r3
 800df24:	e7de      	b.n	800dee4 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800df26:	4a19      	ldr	r2, [pc, #100]	; (800df8c <SwitchClass+0x100>)
 800df28:	fb01 2000 	mla	r0, r1, r0, r2
 800df2c:	f8d0 10f0 	ldr.w	r1, [r0, #240]	; 0xf0
 800df30:	66d1      	str	r1, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800df32:	f890 30f4 	ldrb.w	r3, [r0, #244]	; 0xf4
 800df36:	f882 3070 	strb.w	r3, [r2, #112]	; 0x70
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800df3a:	4b15      	ldr	r3, [pc, #84]	; (800df90 <SwitchClass+0x104>)
 800df3c:	f893 041f 	ldrb.w	r0, [r3, #1055]	; 0x41f
 800df40:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800df44:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800df48:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
 800df4c:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800df50:	f892 2080 	ldrb.w	r2, [r2, #128]	; 0x80
 800df54:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800df58:	2203      	movs	r2, #3
 800df5a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800df5e:	2201      	movs	r2, #1
 800df60:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800df64:	e7c0      	b.n	800dee8 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800df66:	f001 fb1b 	bl	800f5a0 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800df6a:	2800      	cmp	r0, #0
 800df6c:	d199      	bne.n	800dea2 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800df6e:	4b07      	ldr	r3, [pc, #28]	; (800df8c <SwitchClass+0x100>)
 800df70:	f883 4104 	strb.w	r4, [r3, #260]	; 0x104
 800df74:	e795      	b.n	800dea2 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800df76:	b938      	cbnz	r0, 800df88 <SwitchClass+0xfc>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800df78:	4b04      	ldr	r3, [pc, #16]	; (800df8c <SwitchClass+0x100>)
 800df7a:	f883 0104 	strb.w	r0, [r3, #260]	; 0x104
                Radio.Sleep( );
 800df7e:	4b05      	ldr	r3, [pc, #20]	; (800df94 <SwitchClass+0x108>)
 800df80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df82:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800df84:	4620      	mov	r0, r4
 800df86:	e78c      	b.n	800dea2 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800df88:	2003      	movs	r0, #3
 800df8a:	e78a      	b.n	800dea2 <SwitchClass+0x16>
 800df8c:	20008000 	.word	0x20008000
 800df90:	20003570 	.word	0x20003570
 800df94:	08016dc8 	.word	0x08016dc8

0800df98 <SendReJoinReq>:
{
 800df98:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800df9a:	28ff      	cmp	r0, #255	; 0xff
 800df9c:	d003      	beq.n	800dfa6 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800df9e:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800dfa0:	f7ff fb62 	bl	800d668 <ScheduleTx>
}
 800dfa4:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	f7ff ff70 	bl	800de8c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800dfac:	4d0e      	ldr	r5, [pc, #56]	; (800dfe8 <SendReJoinReq+0x50>)
 800dfae:	2400      	movs	r4, #0
 800dfb0:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800dfb4:	1cab      	adds	r3, r5, #2
 800dfb6:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800dfba:	23ff      	movs	r3, #255	; 0xff
 800dfbc:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800dfc0:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800dfc4:	f005 fb24 	bl	8013610 <SecureElementGetJoinEui>
 800dfc8:	4601      	mov	r1, r0
 800dfca:	2208      	movs	r2, #8
 800dfcc:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800dfd0:	f005 fb4f 	bl	8013672 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800dfd4:	f005 fb06 	bl	80135e4 <SecureElementGetDevEui>
 800dfd8:	4601      	mov	r1, r0
 800dfda:	2208      	movs	r2, #8
 800dfdc:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800dfe0:	f005 fb47 	bl	8013672 <memcpy1>
            allowDelayedTx = false;
 800dfe4:	4620      	mov	r0, r4
            break;
 800dfe6:	e7db      	b.n	800dfa0 <SendReJoinReq+0x8>
 800dfe8:	20003570 	.word	0x20003570

0800dfec <PrepareFrame>:
{
 800dfec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dff0:	b083      	sub	sp, #12
 800dff2:	4605      	mov	r5, r0
 800dff4:	460e      	mov	r6, r1
 800dff6:	4617      	mov	r7, r2
 800dff8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800dffc:	4959      	ldr	r1, [pc, #356]	; (800e164 <PrepareFrame+0x178>)
 800dffe:	2200      	movs	r2, #0
 800e000:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800e002:	f881 241e 	strb.w	r2, [r1, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 800e006:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800e008:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800e00a:	4698      	mov	r8, r3
 800e00c:	b1cb      	cbz	r3, 800e042 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800e00e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800e164 <PrepareFrame+0x178>
 800e012:	4622      	mov	r2, r4
 800e014:	4641      	mov	r1, r8
 800e016:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800e01a:	f005 fb2a 	bl	8013672 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800e01e:	b2e0      	uxtb	r0, r4
 800e020:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800e024:	782b      	ldrb	r3, [r5, #0]
 800e026:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800e02a:	782b      	ldrb	r3, [r5, #0]
 800e02c:	095b      	lsrs	r3, r3, #5
 800e02e:	2b04      	cmp	r3, #4
 800e030:	d009      	beq.n	800e046 <PrepareFrame+0x5a>
 800e032:	2b07      	cmp	r3, #7
 800e034:	d079      	beq.n	800e12a <PrepareFrame+0x13e>
 800e036:	2b02      	cmp	r3, #2
 800e038:	d009      	beq.n	800e04e <PrepareFrame+0x62>
 800e03a:	2002      	movs	r0, #2
}
 800e03c:	b003      	add	sp, #12
 800e03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800e042:	4614      	mov	r4, r2
 800e044:	e7e3      	b.n	800e00e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800e046:	4b47      	ldr	r3, [pc, #284]	; (800e164 <PrepareFrame+0x178>)
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800e04e:	4b45      	ldr	r3, [pc, #276]	; (800e164 <PrepareFrame+0x178>)
 800e050:	2204      	movs	r2, #4
 800e052:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800e056:	1c9a      	adds	r2, r3, #2
 800e058:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800e05c:	22ff      	movs	r2, #255	; 0xff
 800e05e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800e062:	782a      	ldrb	r2, [r5, #0]
 800e064:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800e068:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800e06c:	4a3e      	ldr	r2, [pc, #248]	; (800e168 <PrepareFrame+0x17c>)
 800e06e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800e072:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e076:	7832      	ldrb	r2, [r6, #0]
 800e078:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800e07c:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800e080:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800e084:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800e088:	a801      	add	r0, sp, #4
 800e08a:	f001 ff09 	bl	800fea0 <LoRaMacCryptoGetFCntUp>
 800e08e:	2800      	cmp	r0, #0
 800e090:	d15c      	bne.n	800e14c <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800e092:	9a01      	ldr	r2, [sp, #4]
 800e094:	4b33      	ldr	r3, [pc, #204]	; (800e164 <PrepareFrame+0x178>)
 800e096:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800e09a:	2100      	movs	r1, #0
 800e09c:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 800e0a0:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800e0a4:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e0a8:	4668      	mov	r0, sp
 800e0aa:	f001 fb93 	bl	800f7d4 <LoRaMacCommandsGetSizeSerializedCmds>
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	d14e      	bne.n	800e150 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800e0b2:	9b00      	ldr	r3, [sp, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d0c1      	beq.n	800e03c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800e0b8:	4b2b      	ldr	r3, [pc, #172]	; (800e168 <PrepareFrame+0x17c>)
 800e0ba:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800e0be:	f7fe f905 	bl	800c2cc <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e0c2:	4b28      	ldr	r3, [pc, #160]	; (800e164 <PrepareFrame+0x178>)
 800e0c4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800e0c8:	b113      	cbz	r3, 800e0d0 <PrepareFrame+0xe4>
 800e0ca:	9a00      	ldr	r2, [sp, #0]
 800e0cc:	2a0f      	cmp	r2, #15
 800e0ce:	d915      	bls.n	800e0fc <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800e0d0:	b113      	cbz	r3, 800e0d8 <PrepareFrame+0xec>
 800e0d2:	9b00      	ldr	r3, [sp, #0]
 800e0d4:	2b0f      	cmp	r3, #15
 800e0d6:	d821      	bhi.n	800e11c <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e0d8:	4a24      	ldr	r2, [pc, #144]	; (800e16c <PrepareFrame+0x180>)
 800e0da:	4669      	mov	r1, sp
 800e0dc:	f001 fb86 	bl	800f7ec <LoRaMacCommandsSerializeCmds>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d13b      	bne.n	800e15c <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800e0e4:	4b1f      	ldr	r3, [pc, #124]	; (800e164 <PrepareFrame+0x178>)
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800e0ec:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 800e0f0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800e0f4:	9a00      	ldr	r2, [sp, #0]
 800e0f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800e0fa:	e79f      	b.n	800e03c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800e0fc:	4a1c      	ldr	r2, [pc, #112]	; (800e170 <PrepareFrame+0x184>)
 800e0fe:	4669      	mov	r1, sp
 800e100:	200f      	movs	r0, #15
 800e102:	f001 fb73 	bl	800f7ec <LoRaMacCommandsSerializeCmds>
 800e106:	bb28      	cbnz	r0, 800e154 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800e108:	7833      	ldrb	r3, [r6, #0]
 800e10a:	9a00      	ldr	r2, [sp, #0]
 800e10c:	f362 0303 	bfi	r3, r2, #0, #4
 800e110:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800e112:	b2da      	uxtb	r2, r3
 800e114:	4b13      	ldr	r3, [pc, #76]	; (800e164 <PrepareFrame+0x178>)
 800e116:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800e11a:	e78f      	b.n	800e03c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800e11c:	4a13      	ldr	r2, [pc, #76]	; (800e16c <PrepareFrame+0x180>)
 800e11e:	4669      	mov	r1, sp
 800e120:	f001 fb64 	bl	800f7ec <LoRaMacCommandsSerializeCmds>
 800e124:	b1c0      	cbz	r0, 800e158 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e126:	2013      	movs	r0, #19
 800e128:	e788      	b.n	800e03c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800e12a:	f1b8 0f00 	cmp.w	r8, #0
 800e12e:	d017      	beq.n	800e160 <PrepareFrame+0x174>
 800e130:	2800      	cmp	r0, #0
 800e132:	d083      	beq.n	800e03c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800e134:	4c0b      	ldr	r4, [pc, #44]	; (800e164 <PrepareFrame+0x178>)
 800e136:	b282      	uxth	r2, r0
 800e138:	4641      	mov	r1, r8
 800e13a:	1ce0      	adds	r0, r4, #3
 800e13c:	f005 fa99 	bl	8013672 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800e140:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800e144:	3301      	adds	r3, #1
 800e146:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800e148:	2000      	movs	r0, #0
 800e14a:	e777      	b.n	800e03c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800e14c:	2012      	movs	r0, #18
 800e14e:	e775      	b.n	800e03c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e150:	2013      	movs	r0, #19
 800e152:	e773      	b.n	800e03c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e154:	2013      	movs	r0, #19
 800e156:	e771      	b.n	800e03c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800e158:	200a      	movs	r0, #10
 800e15a:	e76f      	b.n	800e03c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e15c:	2013      	movs	r0, #19
 800e15e:	e76d      	b.n	800e03c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800e160:	2000      	movs	r0, #0
 800e162:	e76b      	b.n	800e03c <PrepareFrame+0x50>
 800e164:	20003570 	.word	0x20003570
 800e168:	20008000 	.word	0x20008000
 800e16c:	20003a10 	.word	0x20003a10
 800e170:	20003688 	.word	0x20003688

0800e174 <Send>:
{
 800e174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e178:	b08a      	sub	sp, #40	; 0x28
 800e17a:	4617      	mov	r7, r2
 800e17c:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e17e:	4c45      	ldr	r4, [pc, #276]	; (800e294 <Send+0x120>)
 800e180:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800e184:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e188:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e18a:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e18c:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 800e190:	2b00      	cmp	r3, #0
 800e192:	d07c      	beq.n	800e28e <Send+0x11a>
 800e194:	4605      	mov	r5, r0
 800e196:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800e198:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800e19c:	b90b      	cbnz	r3, 800e1a2 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e19e:	2100      	movs	r1, #0
 800e1a0:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800e1a8:	483a      	ldr	r0, [pc, #232]	; (800e294 <Send+0x120>)
 800e1aa:	f890 1106 	ldrb.w	r1, [r0, #262]	; 0x106
 800e1ae:	f361 13c7 	bfi	r3, r1, #7, #1
 800e1b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e1b6:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d054      	beq.n	800e268 <Send+0xf4>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800e1be:	4b35      	ldr	r3, [pc, #212]	; (800e294 <Send+0x120>)
 800e1c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e1c4:	b12b      	cbz	r3, 800e1d2 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800e1c6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e1ca:	f043 0320 	orr.w	r3, r3, #32
 800e1ce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800e1d8:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e1dc:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800e1de:	4b2e      	ldr	r3, [pc, #184]	; (800e298 <Send+0x124>)
 800e1e0:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 800e1e4:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800e1e8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800e1ec:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e1f0:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e1f4:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e1f8:	4926      	ldr	r1, [pc, #152]	; (800e294 <Send+0x120>)
 800e1fa:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
 800e1fe:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e202:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800e206:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800e20a:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800e20e:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800e212:	ab08      	add	r3, sp, #32
 800e214:	9300      	str	r3, [sp, #0]
 800e216:	f101 0360 	add.w	r3, r1, #96	; 0x60
 800e21a:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800e21e:	3139      	adds	r1, #57	; 0x39
 800e220:	a803      	add	r0, sp, #12
 800e222:	f001 f92d 	bl	800f480 <LoRaMacAdrCalcNext>
 800e226:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e22a:	f360 1386 	bfi	r3, r0, #6, #1
 800e22e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800e232:	f8cd 8000 	str.w	r8, [sp]
 800e236:	463b      	mov	r3, r7
 800e238:	4632      	mov	r2, r6
 800e23a:	a909      	add	r1, sp, #36	; 0x24
 800e23c:	4628      	mov	r0, r5
 800e23e:	f7ff fed5 	bl	800dfec <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800e242:	4604      	mov	r4, r0
 800e244:	b108      	cbz	r0, 800e24a <Send+0xd6>
 800e246:	280a      	cmp	r0, #10
 800e248:	d104      	bne.n	800e254 <Send+0xe0>
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800e24a:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800e24e:	f7ff fa0b 	bl	800d668 <ScheduleTx>
 800e252:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800e254:	b17c      	cbz	r4, 800e276 <Send+0x102>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800e256:	4b0f      	ldr	r3, [pc, #60]	; (800e294 <Send+0x120>)
 800e258:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800e25c:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800e260:	4620      	mov	r0, r4
 800e262:	b00a      	add	sp, #40	; 0x28
 800e264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800e268:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800e26c:	f043 0310 	orr.w	r3, r3, #16
 800e270:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e274:	e7a3      	b.n	800e1be <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800e276:	4b07      	ldr	r3, [pc, #28]	; (800e294 <Send+0x120>)
 800e278:	2200      	movs	r2, #0
 800e27a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800e27e:	9a08      	ldr	r2, [sp, #32]
 800e280:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800e282:	f001 fa7b 	bl	800f77c <LoRaMacCommandsRemoveNoneStickyCmds>
 800e286:	2800      	cmp	r0, #0
 800e288:	d0ea      	beq.n	800e260 <Send+0xec>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e28a:	2413      	movs	r4, #19
 800e28c:	e7e8      	b.n	800e260 <Send+0xec>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800e28e:	2407      	movs	r4, #7
 800e290:	e7e6      	b.n	800e260 <Send+0xec>
 800e292:	bf00      	nop
 800e294:	20008000 	.word	0x20008000
 800e298:	20003570 	.word	0x20003570

0800e29c <LoRaMacIsBusy>:
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e29c:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <LoRaMacIsBusy+0x2c>)
 800e29e:	781b      	ldrb	r3, [r3, #0]
 800e2a0:	f013 0f01 	tst.w	r3, #1
 800e2a4:	d10a      	bne.n	800e2bc <LoRaMacIsBusy+0x20>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e2a6:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <LoRaMacIsBusy+0x30>)
 800e2a8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e2ac:	b943      	cbnz	r3, 800e2c0 <LoRaMacIsBusy+0x24>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e2ae:	4b07      	ldr	r3, [pc, #28]	; (800e2cc <LoRaMacIsBusy+0x30>)
 800e2b0:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d005      	beq.n	800e2c4 <LoRaMacIsBusy+0x28>
    return true;
 800e2b8:	2001      	movs	r0, #1
 800e2ba:	4770      	bx	lr
        return true;
 800e2bc:	2001      	movs	r0, #1
 800e2be:	4770      	bx	lr
    return true;
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	4770      	bx	lr
        return false;
 800e2c4:	2000      	movs	r0, #0
}
 800e2c6:	4770      	bx	lr
 800e2c8:	2000356c 	.word	0x2000356c
 800e2cc:	20003570 	.word	0x20003570

0800e2d0 <LoRaMacProcess>:
{
 800e2d0:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800e2d2:	f7ff f81d 	bl	800d310 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e2d6:	f001 f974 	bl	800f5c2 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e2da:	4b20      	ldr	r3, [pc, #128]	; (800e35c <LoRaMacProcess+0x8c>)
 800e2dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e2e0:	f013 0f20 	tst.w	r3, #32
 800e2e4:	d10d      	bne.n	800e302 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800e2e6:	f7fd fed3 	bl	800c090 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e2ea:	4b1c      	ldr	r3, [pc, #112]	; (800e35c <LoRaMacProcess+0x8c>)
 800e2ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d024      	beq.n	800e33e <LoRaMacProcess+0x6e>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e2f4:	4b19      	ldr	r3, [pc, #100]	; (800e35c <LoRaMacProcess+0x8c>)
 800e2f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e2fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e2fe:	d121      	bne.n	800e344 <LoRaMacProcess+0x74>
}
 800e300:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e302:	2000      	movs	r0, #0
 800e304:	f7fd febe 	bl	800c084 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e308:	f7fd fefa 	bl	800c100 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800e30c:	f7fd ffd2 	bl	800c2b4 <IsRequestPending>
 800e310:	b110      	cbz	r0, 800e318 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e312:	f7fe f8b9 	bl	800c488 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800e316:	b918      	cbnz	r0, 800e320 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800e318:	f7ff f83c 	bl	800d394 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e31c:	f7ff fa5a 	bl	800d7d4 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800e320:	f7ff fa94 	bl	800d84c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800e324:	f7ff fadc 	bl	800d8e0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e328:	2001      	movs	r0, #1
 800e32a:	f7fd feab 	bl	800c084 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e32e:	4a0b      	ldr	r2, [pc, #44]	; (800e35c <LoRaMacProcess+0x8c>)
 800e330:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e338:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800e33c:	e7d3      	b.n	800e2e6 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800e33e:	f7ff fae1 	bl	800d904 <OpenContinuousRxCWindow>
 800e342:	e7d7      	b.n	800e2f4 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <LoRaMacProcess+0x8c>)
 800e346:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800e34a:	f36f 1286 	bfc	r2, #6, #1
 800e34e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800e352:	4803      	ldr	r0, [pc, #12]	; (800e360 <LoRaMacProcess+0x90>)
 800e354:	f7ff fb86 	bl	800da64 <LoRaMacHandleNvm>
}
 800e358:	e7d2      	b.n	800e300 <LoRaMacProcess+0x30>
 800e35a:	bf00      	nop
 800e35c:	20003570 	.word	0x20003570
 800e360:	20008000 	.word	0x20008000

0800e364 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800e364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e368:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800e36a:	2800      	cmp	r0, #0
 800e36c:	f000 81a4 	beq.w	800e6b8 <LoRaMacInitialization+0x354>
 800e370:	460f      	mov	r7, r1
 800e372:	4691      	mov	r9, r2
 800e374:	4680      	mov	r8, r0
 800e376:	2900      	cmp	r1, #0
 800e378:	f000 81a0 	beq.w	800e6bc <LoRaMacInitialization+0x358>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e37c:	6803      	ldr	r3, [r0, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 819e 	beq.w	800e6c0 <LoRaMacInitialization+0x35c>
        ( primitives->MacMcpsIndication == NULL ) ||
 800e384:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e386:	2b00      	cmp	r3, #0
 800e388:	f000 819c 	beq.w	800e6c4 <LoRaMacInitialization+0x360>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e38c:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 819a 	beq.w	800e6c8 <LoRaMacInitialization+0x364>
        ( primitives->MacMlmeIndication == NULL ) )
 800e394:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e396:	2b00      	cmp	r3, #0
 800e398:	f000 8198 	beq.w	800e6cc <LoRaMacInitialization+0x368>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800e39c:	4610      	mov	r0, r2
 800e39e:	f002 f8cb 	bl	8010538 <RegionIsActive>
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	f000 8194 	beq.w	800e6d0 <LoRaMacInitialization+0x36c>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800e3a8:	4640      	mov	r0, r8
 800e3aa:	f001 fac9 	bl	800f940 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800e3ae:	4ccc      	ldr	r4, [pc, #816]	; (800e6e0 <LoRaMacInitialization+0x37c>)
 800e3b0:	f240 528c 	movw	r2, #1420	; 0x58c
 800e3b4:	2100      	movs	r1, #0
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	f005 f973 	bl	80136a2 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800e3bc:	4dc9      	ldr	r5, [pc, #804]	; (800e6e4 <LoRaMacInitialization+0x380>)
 800e3be:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f005 f96c 	bl	80136a2 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800e3ca:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800e3ce:	2600      	movs	r6, #0
 800e3d0:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 800e3d4:	f884 6080 	strb.w	r6, [r4, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800e3d8:	4bc3      	ldr	r3, [pc, #780]	; (800e6e8 <LoRaMacInitialization+0x384>)
 800e3da:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800e3de:	f88d 6020 	strb.w	r6, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e3e2:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 800e3e6:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e3e8:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 800e3ec:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800e3ee:	4bbf      	ldr	r3, [pc, #764]	; (800e6ec <LoRaMacInitialization+0x388>)
 800e3f0:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e3f2:	a905      	add	r1, sp, #20
 800e3f4:	4648      	mov	r0, r9
 800e3f6:	f002 f8cf 	bl	8010598 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e3fa:	230f      	movs	r3, #15
 800e3fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e400:	a90a      	add	r1, sp, #40	; 0x28
 800e402:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e406:	f002 f8a1 	bl	801054c <RegionGetPhyParam>
 800e40a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800e40c:	1b80      	subs	r0, r0, r6
 800e40e:	bf18      	it	ne
 800e410:	2001      	movne	r0, #1
 800e412:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800e416:	f04f 0a0a 	mov.w	sl, #10
 800e41a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e41e:	a90a      	add	r1, sp, #40	; 0x28
 800e420:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e424:	f002 f892 	bl	801054c <RegionGetPhyParam>
 800e428:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800e42a:	f884 00cc 	strb.w	r0, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800e42e:	f04f 0906 	mov.w	r9, #6
 800e432:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e436:	a90a      	add	r1, sp, #40	; 0x28
 800e438:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e43c:	f002 f886 	bl	801054c <RegionGetPhyParam>
 800e440:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800e442:	f884 00cd 	strb.w	r0, [r4, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800e446:	2310      	movs	r3, #16
 800e448:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e44c:	a90a      	add	r1, sp, #40	; 0x28
 800e44e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e452:	f002 f87b 	bl	801054c <RegionGetPhyParam>
 800e456:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800e458:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800e45c:	2311      	movs	r3, #17
 800e45e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e462:	a90a      	add	r1, sp, #40	; 0x28
 800e464:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e468:	f002 f870 	bl	801054c <RegionGetPhyParam>
 800e46c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800e46e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800e472:	2312      	movs	r3, #18
 800e474:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e478:	a90a      	add	r1, sp, #40	; 0x28
 800e47a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e47e:	f002 f865 	bl	801054c <RegionGetPhyParam>
 800e482:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800e484:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800e488:	2313      	movs	r3, #19
 800e48a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e48e:	a90a      	add	r1, sp, #40	; 0x28
 800e490:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e494:	f002 f85a 	bl	801054c <RegionGetPhyParam>
 800e498:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800e49a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800e49e:	2314      	movs	r3, #20
 800e4a0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4a4:	a90a      	add	r1, sp, #40	; 0x28
 800e4a6:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e4aa:	f002 f84f 	bl	801054c <RegionGetPhyParam>
 800e4ae:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800e4b0:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800e4b4:	2316      	movs	r3, #22
 800e4b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4ba:	a90a      	add	r1, sp, #40	; 0x28
 800e4bc:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e4c0:	f002 f844 	bl	801054c <RegionGetPhyParam>
 800e4c4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800e4c6:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800e4ca:	2317      	movs	r3, #23
 800e4cc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4d0:	a90a      	add	r1, sp, #40	; 0x28
 800e4d2:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e4d6:	f002 f839 	bl	801054c <RegionGetPhyParam>
 800e4da:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800e4dc:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800e4e0:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800e4e4:	2318      	movs	r3, #24
 800e4e6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4ea:	a90a      	add	r1, sp, #40	; 0x28
 800e4ec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e4f0:	f002 f82c 	bl	801054c <RegionGetPhyParam>
 800e4f4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800e4f6:	b2c0      	uxtb	r0, r0
 800e4f8:	f884 00ac 	strb.w	r0, [r4, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800e4fc:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800e500:	231d      	movs	r3, #29
 800e502:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e506:	a90a      	add	r1, sp, #40	; 0x28
 800e508:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e50c:	f002 f81e 	bl	801054c <RegionGetPhyParam>
 800e510:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800e512:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800e516:	231e      	movs	r3, #30
 800e518:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e51c:	a90a      	add	r1, sp, #40	; 0x28
 800e51e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e522:	f002 f813 	bl	801054c <RegionGetPhyParam>
 800e526:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800e528:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800e52c:	231f      	movs	r3, #31
 800e52e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e532:	a90a      	add	r1, sp, #40	; 0x28
 800e534:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e538:	f002 f808 	bl	801054c <RegionGetPhyParam>
 800e53c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800e53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e540:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800e544:	2320      	movs	r3, #32
 800e546:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e54a:	a90a      	add	r1, sp, #40	; 0x28
 800e54c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e550:	f001 fffc 	bl	801054c <RegionGetPhyParam>
 800e554:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800e556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e558:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800e55c:	230b      	movs	r3, #11
 800e55e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e562:	a90a      	add	r1, sp, #40	; 0x28
 800e564:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e568:	f001 fff0 	bl	801054c <RegionGetPhyParam>
 800e56c:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 800e56e:	f8a5 0400 	strh.w	r0, [r5, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800e572:	230c      	movs	r3, #12
 800e574:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e578:	a90a      	add	r1, sp, #40	; 0x28
 800e57a:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800e57e:	f001 ffe5 	bl	801054c <RegionGetPhyParam>
 800e582:	9009      	str	r0, [sp, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 800e584:	f8a5 0402 	strh.w	r0, [r5, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800e588:	f04f 0b01 	mov.w	fp, #1
 800e58c:	f884 b0a4 	strb.w	fp, [r4, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800e590:	f8c4 a088 	str.w	sl, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800e594:	f884 908c 	strb.w	r9, [r4, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800e598:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800e59c:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800e5a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e5a4:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800e5a6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800e5aa:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800e5ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800e5b0:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800e5b2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800e5b6:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800e5b8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800e5bc:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800e5be:	f884 b060 	strb.w	fp, [r4, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800e5c2:	f884 b10b 	strb.w	fp, [r4, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800e5c6:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    ResetMacParameters( );
 800e5ca:	f7ff fbaf 	bl	800dd2c <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800e5ce:	f884 b105 	strb.w	fp, [r4, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 800e5d2:	f8c5 8344 	str.w	r8, [r5, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800e5d6:	f885 6495 	strb.w	r6, [r5, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 800e5da:	f8c5 b340 	str.w	fp, [r5, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800e5de:	62e6      	str	r6, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e5e0:	6326      	str	r6, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e5e2:	9600      	str	r6, [sp, #0]
 800e5e4:	4b42      	ldr	r3, [pc, #264]	; (800e6f0 <LoRaMacInitialization+0x38c>)
 800e5e6:	4632      	mov	r2, r6
 800e5e8:	f04f 31ff 	mov.w	r1, #4294967295
 800e5ec:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800e5f0:	f007 f902 	bl	80157f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e5f4:	9600      	str	r6, [sp, #0]
 800e5f6:	4b3f      	ldr	r3, [pc, #252]	; (800e6f4 <LoRaMacInitialization+0x390>)
 800e5f8:	4632      	mov	r2, r6
 800e5fa:	f04f 31ff 	mov.w	r1, #4294967295
 800e5fe:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800e602:	f007 f8f9 	bl	80157f8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e606:	9600      	str	r6, [sp, #0]
 800e608:	4b3b      	ldr	r3, [pc, #236]	; (800e6f8 <LoRaMacInitialization+0x394>)
 800e60a:	4632      	mov	r2, r6
 800e60c:	f04f 31ff 	mov.w	r1, #4294967295
 800e610:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800e614:	f007 f8f0 	bl	80157f8 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800e618:	9600      	str	r6, [sp, #0]
 800e61a:	4b38      	ldr	r3, [pc, #224]	; (800e6fc <LoRaMacInitialization+0x398>)
 800e61c:	4632      	mov	r2, r6
 800e61e:	f04f 31ff 	mov.w	r1, #4294967295
 800e622:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800e626:	f007 f8e7 	bl	80157f8 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800e62a:	f10d 0808 	add.w	r8, sp, #8
 800e62e:	4640      	mov	r0, r8
 800e630:	f007 f874 	bl	801571c <SysTimeGetMcuTime>
 800e634:	f504 7388 	add.w	r3, r4, #272	; 0x110
 800e638:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e63c:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800e640:	4b2f      	ldr	r3, [pc, #188]	; (800e700 <LoRaMacInitialization+0x39c>)
 800e642:	601e      	str	r6, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e644:	4b2f      	ldr	r3, [pc, #188]	; (800e704 <LoRaMacInitialization+0x3a0>)
 800e646:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e64a:	4b2f      	ldr	r3, [pc, #188]	; (800e708 <LoRaMacInitialization+0x3a4>)
 800e64c:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e650:	4b2e      	ldr	r3, [pc, #184]	; (800e70c <LoRaMacInitialization+0x3a8>)
 800e652:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e656:	4b2e      	ldr	r3, [pc, #184]	; (800e710 <LoRaMacInitialization+0x3ac>)
 800e658:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e65c:	4b2d      	ldr	r3, [pc, #180]	; (800e714 <LoRaMacInitialization+0x3b0>)
 800e65e:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800e662:	4b2d      	ldr	r3, [pc, #180]	; (800e718 <LoRaMacInitialization+0x3b4>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 800e66a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 800e66c:	68b9      	ldr	r1, [r7, #8]
 800e66e:	f504 7092 	add.w	r0, r4, #292	; 0x124
 800e672:	f004 fd59 	bl	8013128 <SecureElementInit>
 800e676:	bb80      	cbnz	r0, 800e6da <LoRaMacInitialization+0x376>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800e678:	4620      	mov	r0, r4
 800e67a:	f001 fbf1 	bl	800fe60 <LoRaMacCryptoInit>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d14c      	bne.n	800e71c <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800e682:	f001 f823 	bl	800f6cc <LoRaMacCommandsInit>
 800e686:	2800      	cmp	r0, #0
 800e688:	d14a      	bne.n	800e720 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800e68a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
 800e68e:	f001 fc39 	bl	800ff04 <LoRaMacCryptoSetMulticastReference>
 800e692:	4604      	mov	r4, r0
 800e694:	2800      	cmp	r0, #0
 800e696:	d145      	bne.n	800e724 <LoRaMacInitialization+0x3c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e698:	4d1f      	ldr	r5, [pc, #124]	; (800e718 <LoRaMacInitialization+0x3b4>)
 800e69a:	696b      	ldr	r3, [r5, #20]
 800e69c:	4798      	blx	r3
 800e69e:	f004 ffd5 	bl	801364c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e6a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800e6a4:	4a0e      	ldr	r2, [pc, #56]	; (800e6e0 <LoRaMacInitialization+0x37c>)
 800e6a6:	f892 0105 	ldrb.w	r0, [r2, #261]	; 0x105
 800e6aa:	4798      	blx	r3
    Radio.Sleep( );
 800e6ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e6ae:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e6b0:	4658      	mov	r0, fp
 800e6b2:	f7fd fce7 	bl	800c084 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e6b6:	e00c      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e6b8:	2403      	movs	r4, #3
 800e6ba:	e00a      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
 800e6bc:	2403      	movs	r4, #3
 800e6be:	e008      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e6c0:	2403      	movs	r4, #3
 800e6c2:	e006      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
 800e6c4:	2403      	movs	r4, #3
 800e6c6:	e004      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
 800e6c8:	2403      	movs	r4, #3
 800e6ca:	e002      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
 800e6cc:	2403      	movs	r4, #3
 800e6ce:	e000      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800e6d0:	2409      	movs	r4, #9
}
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	b00d      	add	sp, #52	; 0x34
 800e6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e6da:	2411      	movs	r4, #17
 800e6dc:	e7f9      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
 800e6de:	bf00      	nop
 800e6e0:	20008000 	.word	0x20008000
 800e6e4:	20003570 	.word	0x20003570
 800e6e8:	01000400 	.word	0x01000400
 800e6ec:	20003a90 	.word	0x20003a90
 800e6f0:	0800d771 	.word	0x0800d771
 800e6f4:	0800da15 	.word	0x0800da15
 800e6f8:	0800d9bd 	.word	0x0800d9bd
 800e6fc:	0800c41d 	.word	0x0800c41d
 800e700:	2000356c 	.word	0x2000356c
 800e704:	0800dcd5 	.word	0x0800dcd5
 800e708:	0800dc75 	.word	0x0800dc75
 800e70c:	0800c039 	.word	0x0800c039
 800e710:	0800dc41 	.word	0x0800dc41
 800e714:	0800dc0d 	.word	0x0800dc0d
 800e718:	08016dc8 	.word	0x08016dc8
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e71c:	2411      	movs	r4, #17
 800e71e:	e7d8      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e720:	2413      	movs	r4, #19
 800e722:	e7d6      	b.n	800e6d2 <LoRaMacInitialization+0x36e>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e724:	2411      	movs	r4, #17
 800e726:	e7d4      	b.n	800e6d2 <LoRaMacInitialization+0x36e>

0800e728 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800e728:	2000      	movs	r0, #0
 800e72a:	4b02      	ldr	r3, [pc, #8]	; (800e734 <LoRaMacStart+0xc>)
 800e72c:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
}
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	20003570 	.word	0x20003570

0800e738 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800e738:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800e73a:	f7ff fdaf 	bl	800e29c <LoRaMacIsBusy>
 800e73e:	b130      	cbz	r0, 800e74e <LoRaMacStop+0x16>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800e740:	4b06      	ldr	r3, [pc, #24]	; (800e75c <LoRaMacStop+0x24>)
 800e742:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e746:	2b01      	cmp	r3, #1
 800e748:	d006      	beq.n	800e758 <LoRaMacStop+0x20>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800e74a:	2001      	movs	r0, #1
}
 800e74c:	bd08      	pop	{r3, pc}
        MacCtx.MacState = LORAMAC_STOPPED;
 800e74e:	4b03      	ldr	r3, [pc, #12]	; (800e75c <LoRaMacStop+0x24>)
 800e750:	2201      	movs	r2, #1
 800e752:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800e756:	e7f9      	b.n	800e74c <LoRaMacStop+0x14>
        return LORAMAC_STATUS_OK;
 800e758:	2000      	movs	r0, #0
 800e75a:	e7f7      	b.n	800e74c <LoRaMacStop+0x14>
 800e75c:	20003570 	.word	0x20003570

0800e760 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800e760:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800e762:	4c14      	ldr	r4, [pc, #80]	; (800e7b4 <LoRaMacHalt+0x54>)
 800e764:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800e768:	f007 f8a4 	bl	80158b4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800e76c:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800e770:	f007 f8a0 	bl	80158b4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800e774:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800e778:	f007 f89c 	bl	80158b4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800e77c:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800e780:	f007 f898 	bl	80158b4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800e784:	f000 ff0a 	bl	800f59c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800e788:	4b0b      	ldr	r3, [pc, #44]	; (800e7b8 <LoRaMacHalt+0x58>)
 800e78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e78c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800e78e:	2500      	movs	r5, #0
 800e790:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 800e794:	4e09      	ldr	r6, [pc, #36]	; (800e7bc <LoRaMacHalt+0x5c>)
 800e796:	4630      	mov	r0, r6
 800e798:	f7ff f964 	bl	800da64 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800e79c:	f240 528c 	movw	r2, #1420	; 0x58c
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	4807      	ldr	r0, [pc, #28]	; (800e7c0 <LoRaMacHalt+0x60>)
 800e7a4:	f004 ff65 	bl	8013672 <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	bd70      	pop	{r4, r5, r6, pc}
 800e7b2:	bf00      	nop
 800e7b4:	20003570 	.word	0x20003570
 800e7b8:	08016dc8 	.word	0x08016dc8
 800e7bc:	20008000 	.word	0x20008000
 800e7c0:	2000858c 	.word	0x2000858c

0800e7c4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e7c4:	b530      	push	{r4, r5, lr}
 800e7c6:	b08b      	sub	sp, #44	; 0x2c
 800e7c8:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e7ca:	4b32      	ldr	r3, [pc, #200]	; (800e894 <LoRaMacQueryTxPossible+0xd0>)
 800e7cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e7ce:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e7d0:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 800e7d4:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e7d8:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800e7dc:	f88d 300e 	strb.w	r3, [sp, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800e7e0:	4b2d      	ldr	r3, [pc, #180]	; (800e898 <LoRaMacQueryTxPossible+0xd4>)
 800e7e2:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800e7e6:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800e7ee:	2900      	cmp	r1, #0
 800e7f0:	d049      	beq.n	800e886 <LoRaMacQueryTxPossible+0xc2>
 800e7f2:	460d      	mov	r5, r1

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800e7f4:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e7f8:	4b26      	ldr	r3, [pc, #152]	; (800e894 <LoRaMacQueryTxPossible+0xd0>)
 800e7fa:	f893 1106 	ldrb.w	r1, [r3, #262]	; 0x106
 800e7fe:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e802:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800e804:	4924      	ldr	r1, [pc, #144]	; (800e898 <LoRaMacQueryTxPossible+0xd4>)
 800e806:	f8b1 0400 	ldrh.w	r0, [r1, #1024]	; 0x400
 800e80a:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800e80e:	f8b1 1402 	ldrh.w	r1, [r1, #1026]	; 0x402
 800e812:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e816:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800e81a:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e81e:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800e822:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800e826:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e82a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800e82e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800e832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e836:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800e83a:	ab04      	add	r3, sp, #16
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	f10d 030d 	add.w	r3, sp, #13
 800e842:	f10d 020e 	add.w	r2, sp, #14
 800e846:	f10d 010f 	add.w	r1, sp, #15
 800e84a:	a805      	add	r0, sp, #20
 800e84c:	f000 fe18 	bl	800f480 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e850:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800e854:	f7fd fd3a 	bl	800c2cc <GetMaxAppPayloadWithoutFOptsLength>
 800e858:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e85a:	a802      	add	r0, sp, #8
 800e85c:	f000 ffba 	bl	800f7d4 <LoRaMacCommandsGetSizeSerializedCmds>
 800e860:	b998      	cbnz	r0, 800e88a <LoRaMacQueryTxPossible+0xc6>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800e862:	9b02      	ldr	r3, [sp, #8]
 800e864:	2b0f      	cmp	r3, #15
 800e866:	d80a      	bhi.n	800e87e <LoRaMacQueryTxPossible+0xba>
 800e868:	786a      	ldrb	r2, [r5, #1]
 800e86a:	4293      	cmp	r3, r2
 800e86c:	d807      	bhi.n	800e87e <LoRaMacQueryTxPossible+0xba>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800e86e:	1ad3      	subs	r3, r2, r3
 800e870:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800e872:	9b02      	ldr	r3, [sp, #8]
 800e874:	441c      	add	r4, r3
 800e876:	42a2      	cmp	r2, r4
 800e878:	d309      	bcc.n	800e88e <LoRaMacQueryTxPossible+0xca>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800e87a:	b00b      	add	sp, #44	; 0x2c
 800e87c:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800e882:	2008      	movs	r0, #8
 800e884:	e7f9      	b.n	800e87a <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e886:	2003      	movs	r0, #3
 800e888:	e7f7      	b.n	800e87a <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e88a:	2013      	movs	r0, #19
 800e88c:	e7f5      	b.n	800e87a <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800e88e:	2008      	movs	r0, #8
 800e890:	e7f3      	b.n	800e87a <LoRaMacQueryTxPossible+0xb6>
 800e892:	bf00      	nop
 800e894:	20008000 	.word	0x20008000
 800e898:	20003570 	.word	0x20003570

0800e89c <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800e89c:	2800      	cmp	r0, #0
 800e89e:	f000 813d 	beq.w	800eb1c <LoRaMacMibGetRequestConfirm+0x280>
{
 800e8a2:	b510      	push	{r4, lr}
 800e8a4:	b084      	sub	sp, #16
 800e8a6:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800e8a8:	7800      	ldrb	r0, [r0, #0]
 800e8aa:	2839      	cmp	r0, #57	; 0x39
 800e8ac:	f200 8132 	bhi.w	800eb14 <LoRaMacMibGetRequestConfirm+0x278>
 800e8b0:	e8df f010 	tbh	[pc, r0, lsl #1]
 800e8b4:	0040003a 	.word	0x0040003a
 800e8b8:	004b0046 	.word	0x004b0046
 800e8bc:	00560050 	.word	0x00560050
 800e8c0:	0130005c 	.word	0x0130005c
 800e8c4:	01300130 	.word	0x01300130
 800e8c8:	01300130 	.word	0x01300130
 800e8cc:	01300130 	.word	0x01300130
 800e8d0:	00620130 	.word	0x00620130
 800e8d4:	006e0068 	.word	0x006e0068
 800e8d8:	0083007b 	.word	0x0083007b
 800e8dc:	0093008b 	.word	0x0093008b
 800e8e0:	009b00a8 	.word	0x009b00a8
 800e8e4:	00bb00b5 	.word	0x00bb00b5
 800e8e8:	00c500c0 	.word	0x00c500c0
 800e8ec:	00cf00ca 	.word	0x00cf00ca
 800e8f0:	00e500d4 	.word	0x00e500d4
 800e8f4:	00f700eb 	.word	0x00f700eb
 800e8f8:	00fd00f1 	.word	0x00fd00f1
 800e8fc:	01080102 	.word	0x01080102
 800e900:	010d0115 	.word	0x010d0115
 800e904:	01300111 	.word	0x01300111
 800e908:	0130011b 	.word	0x0130011b
 800e90c:	01300130 	.word	0x01300130
 800e910:	01300130 	.word	0x01300130
 800e914:	01300130 	.word	0x01300130
 800e918:	01300130 	.word	0x01300130
 800e91c:	01300130 	.word	0x01300130
 800e920:	01300130 	.word	0x01300130
 800e924:	012a0124 	.word	0x012a0124
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800e928:	4b7d      	ldr	r3, [pc, #500]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e92a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e92e:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800e930:	b004      	add	sp, #16
 800e932:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e934:	4b7a      	ldr	r3, [pc, #488]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e936:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800e93a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e93c:	2000      	movs	r0, #0
            break;
 800e93e:	e7f7      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800e940:	f004 fe50 	bl	80135e4 <SecureElementGetDevEui>
 800e944:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e946:	2000      	movs	r0, #0
            break;
 800e948:	e7f2      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800e94a:	f004 fe61 	bl	8013610 <SecureElementGetJoinEui>
 800e94e:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e950:	2000      	movs	r0, #0
            break;
 800e952:	e7ed      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800e954:	4b72      	ldr	r3, [pc, #456]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e956:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800e95a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e95c:	2000      	movs	r0, #0
            break;
 800e95e:	e7e7      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800e960:	4b6f      	ldr	r3, [pc, #444]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e962:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e966:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e968:	2000      	movs	r0, #0
            break;
 800e96a:	e7e1      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800e96c:	4b6c      	ldr	r3, [pc, #432]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e96e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e972:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e974:	2000      	movs	r0, #0
            break;
 800e976:	e7db      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800e978:	4b69      	ldr	r3, [pc, #420]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e97a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800e97e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e980:	2000      	movs	r0, #0
            break;
 800e982:	e7d5      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e984:	4b66      	ldr	r3, [pc, #408]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e98a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e98c:	2000      	movs	r0, #0
            break;
 800e98e:	e7cf      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS;
 800e990:	231c      	movs	r3, #28
 800e992:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e996:	a902      	add	r1, sp, #8
 800e998:	4b61      	ldr	r3, [pc, #388]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e99a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e99e:	f001 fdd5 	bl	801054c <RegionGetPhyParam>
 800e9a2:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 800e9a4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9a6:	2000      	movs	r0, #0
            break;
 800e9a8:	e7c2      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e9aa:	3404      	adds	r4, #4
 800e9ac:	4b5d      	ldr	r3, [pc, #372]	; (800eb24 <LoRaMacMibGetRequestConfirm+0x288>)
 800e9ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e9b2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9b6:	2000      	movs	r0, #0
            break;
 800e9b8:	e7ba      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800e9ba:	3404      	adds	r4, #4
 800e9bc:	4b5a      	ldr	r3, [pc, #360]	; (800eb28 <LoRaMacMibGetRequestConfirm+0x28c>)
 800e9be:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e9c2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9c6:	2000      	movs	r0, #0
            break;
 800e9c8:	e7b2      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800e9ca:	3404      	adds	r4, #4
 800e9cc:	4b57      	ldr	r3, [pc, #348]	; (800eb2c <LoRaMacMibGetRequestConfirm+0x290>)
 800e9ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e9d2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9d6:	2000      	movs	r0, #0
            break;
 800e9d8:	e7aa      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800e9da:	3404      	adds	r4, #4
 800e9dc:	4b54      	ldr	r3, [pc, #336]	; (800eb30 <LoRaMacMibGetRequestConfirm+0x294>)
 800e9de:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e9e2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e9e6:	2000      	movs	r0, #0
            break;
 800e9e8:	e7a2      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e9ea:	231a      	movs	r3, #26
 800e9ec:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e9f0:	a902      	add	r1, sp, #8
 800e9f2:	4b4b      	ldr	r3, [pc, #300]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800e9f4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800e9f8:	f001 fda8 	bl	801054c <RegionGetPhyParam>
 800e9fc:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e9fe:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea00:	2000      	movs	r0, #0
            break;
 800ea02:	e795      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ea04:	2319      	movs	r3, #25
 800ea06:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea0a:	a902      	add	r1, sp, #8
 800ea0c:	4b44      	ldr	r3, [pc, #272]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea0e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ea12:	f001 fd9b 	bl	801054c <RegionGetPhyParam>
 800ea16:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800ea18:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea1a:	2000      	movs	r0, #0
            break;
 800ea1c:	e788      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ea1e:	4b40      	ldr	r3, [pc, #256]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea20:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ea24:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea26:	2000      	movs	r0, #0
            break;
 800ea28:	e782      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800ea2a:	4b3d      	ldr	r3, [pc, #244]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea2e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea30:	2000      	movs	r0, #0
            break;
 800ea32:	e77d      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800ea34:	4b3a      	ldr	r3, [pc, #232]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea38:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea3a:	2000      	movs	r0, #0
            break;
 800ea3c:	e778      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800ea3e:	4b38      	ldr	r3, [pc, #224]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea42:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea44:	2000      	movs	r0, #0
            break;
 800ea46:	e773      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800ea48:	4b35      	ldr	r3, [pc, #212]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea4c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea4e:	2000      	movs	r0, #0
            break;
 800ea50:	e76e      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800ea52:	4b33      	ldr	r3, [pc, #204]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ea56:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea58:	2000      	movs	r0, #0
            break;
 800ea5a:	e769      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            getPhy.Attribute = PHY_MIN_TX_DR;
 800ea5c:	2302      	movs	r3, #2
 800ea5e:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ea62:	4b2f      	ldr	r3, [pc, #188]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea64:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ea68:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ea6c:	a902      	add	r1, sp, #8
 800ea6e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ea72:	f001 fd6b 	bl	801054c <RegionGetPhyParam>
 800ea76:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800ea78:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea7a:	2000      	movs	r0, #0
            break;
 800ea7c:	e758      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800ea7e:	4b28      	ldr	r3, [pc, #160]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea80:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 800ea84:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea86:	2000      	movs	r0, #0
            break;
 800ea88:	e752      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ea8a:	4b25      	ldr	r3, [pc, #148]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea8c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ea90:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea92:	2000      	movs	r0, #0
            break;
 800ea94:	e74c      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ea96:	4b22      	ldr	r3, [pc, #136]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ea98:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 800ea9c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea9e:	2000      	movs	r0, #0
            break;
 800eaa0:	e746      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800eaa2:	4b1f      	ldr	r3, [pc, #124]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800eaa4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800eaa8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eaaa:	2000      	movs	r0, #0
            break;
 800eaac:	e740      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800eaae:	4b1c      	ldr	r3, [pc, #112]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800eab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eab4:	2000      	movs	r0, #0
            break;
 800eab6:	e73b      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800eab8:	4b19      	ldr	r3, [pc, #100]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800eaba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800eabe:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eac0:	2000      	movs	r0, #0
            break;
 800eac2:	e735      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800eac4:	4b16      	ldr	r3, [pc, #88]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800eac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eac8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eaca:	2000      	movs	r0, #0
            break;
 800eacc:	e730      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.Contexts = &Nvm;
 800eace:	4b14      	ldr	r3, [pc, #80]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800ead0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ead2:	2000      	movs	r0, #0
            break;
 800ead4:	e72c      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.BackupContexts = &NvmBackup;
 800ead6:	4b17      	ldr	r3, [pc, #92]	; (800eb34 <LoRaMacMibGetRequestConfirm+0x298>)
 800ead8:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eada:	2000      	movs	r0, #0
            break;
 800eadc:	e728      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800eade:	4b10      	ldr	r3, [pc, #64]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800eae0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800eae4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eae6:	2000      	movs	r0, #0
            break;
 800eae8:	e722      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800eaea:	4b0d      	ldr	r3, [pc, #52]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800eaec:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800eaf0:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800eaf2:	f001 fe53 	bl	801079c <RegionGetVersion>
 800eaf6:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eaf8:	2000      	movs	r0, #0
            break;
 800eafa:	e719      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800eafc:	4b08      	ldr	r3, [pc, #32]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800eafe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb02:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb04:	2000      	movs	r0, #0
            break;
 800eb06:	e713      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800eb08:	4b05      	ldr	r3, [pc, #20]	; (800eb20 <LoRaMacMibGetRequestConfirm+0x284>)
 800eb0a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800eb0e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eb10:	2000      	movs	r0, #0
            break;
 800eb12:	e70d      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 fd45 	bl	800f5a4 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800eb1a:	e709      	b.n	800e930 <LoRaMacMibGetRequestConfirm+0x94>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800eb1c:	2003      	movs	r0, #3
}
 800eb1e:	4770      	bx	lr
 800eb20:	20008000 	.word	0x20008000
 800eb24:	20008064 	.word	0x20008064
 800eb28:	200080a8 	.word	0x200080a8
 800eb2c:	2000806c 	.word	0x2000806c
 800eb30:	200080b0 	.word	0x200080b0
 800eb34:	2000858c 	.word	0x2000858c

0800eb38 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	f000 8254 	beq.w	800efe6 <LoRaMacMibSetRequestConfirm+0x4ae>
{
 800eb3e:	b530      	push	{r4, r5, lr}
 800eb40:	b085      	sub	sp, #20
 800eb42:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800eb44:	4ba3      	ldr	r3, [pc, #652]	; (800edd4 <LoRaMacMibSetRequestConfirm+0x29c>)
 800eb46:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb4a:	f013 0f02 	tst.w	r3, #2
 800eb4e:	f040 824c 	bne.w	800efea <LoRaMacMibSetRequestConfirm+0x4b2>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800eb52:	7805      	ldrb	r5, [r0, #0]
 800eb54:	2d39      	cmp	r5, #57	; 0x39
 800eb56:	f200 8243 	bhi.w	800efe0 <LoRaMacMibSetRequestConfirm+0x4a8>
 800eb5a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800eb5e:	003a      	.short	0x003a
 800eb60:	00500047 	.word	0x00500047
 800eb64:	005e0057 	.word	0x005e0057
 800eb68:	006a0064 	.word	0x006a0064
 800eb6c:	007b0070 	.word	0x007b0070
 800eb70:	00910086 	.word	0x00910086
 800eb74:	00a7009c 	.word	0x00a7009c
 800eb78:	00bd00b2 	.word	0x00bd00b2
 800eb7c:	00d400c9 	.word	0x00d400c9
 800eb80:	00da0241 	.word	0x00da0241
 800eb84:	011a0100 	.word	0x011a0100
 800eb88:	017d0153 	.word	0x017d0153
 800eb8c:	018d016d 	.word	0x018d016d
 800eb90:	019d0198 	.word	0x019d0198
 800eb94:	01a701a2 	.word	0x01a701a2
 800eb98:	024101ac 	.word	0x024101ac
 800eb9c:	01c601b1 	.word	0x01c601b1
 800eba0:	01df01f3 	.word	0x01df01f3
 800eba4:	020e0207 	.word	0x020e0207
 800eba8:	021b0216 	.word	0x021b0216
 800ebac:	02410221 	.word	0x02410221
 800ebb0:	02410224 	.word	0x02410224
 800ebb4:	02410241 	.word	0x02410241
 800ebb8:	02410241 	.word	0x02410241
 800ebbc:	02410241 	.word	0x02410241
 800ebc0:	02410241 	.word	0x02410241
 800ebc4:	02410241 	.word	0x02410241
 800ebc8:	02410241 	.word	0x02410241
 800ebcc:	02350241 	.word	0x02350241
 800ebd0:	023b      	.short	0x023b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ebd2:	7900      	ldrb	r0, [r0, #4]
 800ebd4:	f7ff f95a 	bl	800de8c <SwitchClass>
            break;
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 800ebd8:	b930      	cbnz	r0, 800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ebda:	4a7e      	ldr	r2, [pc, #504]	; (800edd4 <LoRaMacMibSetRequestConfirm+0x29c>)
 800ebdc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ebe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800ebe8:	b005      	add	sp, #20
 800ebea:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ebec:	7903      	ldrb	r3, [r0, #4]
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	f000 81fd 	beq.w	800efee <LoRaMacMibSetRequestConfirm+0x4b6>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800ebf4:	4a78      	ldr	r2, [pc, #480]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ebf6:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ebfa:	2000      	movs	r0, #0
 800ebfc:	e7ed      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ebfe:	6840      	ldr	r0, [r0, #4]
 800ec00:	f004 fce2 	bl	80135c8 <SecureElementSetDevEui>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	d0e8      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec08:	2003      	movs	r0, #3
 800ec0a:	e7ed      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ec0c:	6840      	ldr	r0, [r0, #4]
 800ec0e:	f004 fcef 	bl	80135f0 <SecureElementSetJoinEui>
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d0e1      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec16:	4628      	mov	r0, r5
 800ec18:	e7e6      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800ec1a:	7902      	ldrb	r2, [r0, #4]
 800ec1c:	4b6e      	ldr	r3, [pc, #440]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ec1e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ec22:	2000      	movs	r0, #0
 800ec24:	e7d9      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800ec26:	6842      	ldr	r2, [r0, #4]
 800ec28:	4b6b      	ldr	r3, [pc, #428]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ec2a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ec2e:	2000      	movs	r0, #0
 800ec30:	e7d3      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ec32:	6842      	ldr	r2, [r0, #4]
 800ec34:	4b68      	ldr	r3, [pc, #416]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ec36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ec3a:	2000      	movs	r0, #0
 800ec3c:	e7cd      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            if( mibSet->Param.AppKey != NULL )
 800ec3e:	6841      	ldr	r1, [r0, #4]
 800ec40:	2900      	cmp	r1, #0
 800ec42:	f000 81d6 	beq.w	800eff2 <LoRaMacMibSetRequestConfirm+0x4ba>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ec46:	2000      	movs	r0, #0
 800ec48:	f001 fa6e 	bl	8010128 <LoRaMacCryptoSetKey>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d0c4      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec50:	2011      	movs	r0, #17
 800ec52:	e7c9      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkKey != NULL )
 800ec54:	6841      	ldr	r1, [r0, #4]
 800ec56:	2900      	cmp	r1, #0
 800ec58:	f000 81cd 	beq.w	800eff6 <LoRaMacMibSetRequestConfirm+0x4be>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800ec5c:	2001      	movs	r0, #1
 800ec5e:	f001 fa63 	bl	8010128 <LoRaMacCryptoSetKey>
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d0b9      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec66:	2011      	movs	r0, #17
 800ec68:	e7be      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.NwkSKey != NULL )
 800ec6a:	6841      	ldr	r1, [r0, #4]
 800ec6c:	2900      	cmp	r1, #0
 800ec6e:	f000 81c4 	beq.w	800effa <LoRaMacMibSetRequestConfirm+0x4c2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800ec72:	2002      	movs	r0, #2
 800ec74:	f001 fa58 	bl	8010128 <LoRaMacCryptoSetKey>
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	d0ae      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec7c:	2011      	movs	r0, #17
 800ec7e:	e7b3      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AppSKey != NULL )
 800ec80:	6841      	ldr	r1, [r0, #4]
 800ec82:	2900      	cmp	r1, #0
 800ec84:	f000 81bb 	beq.w	800effe <LoRaMacMibSetRequestConfirm+0x4c6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ec88:	2003      	movs	r0, #3
 800ec8a:	f001 fa4d 	bl	8010128 <LoRaMacCryptoSetKey>
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	d0a3      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec92:	2011      	movs	r0, #17
 800ec94:	e7a8      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKEKey != NULL )
 800ec96:	6841      	ldr	r1, [r0, #4]
 800ec98:	2900      	cmp	r1, #0
 800ec9a:	f000 81b2 	beq.w	800f002 <LoRaMacMibSetRequestConfirm+0x4ca>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ec9e:	207f      	movs	r0, #127	; 0x7f
 800eca0:	f001 fa42 	bl	8010128 <LoRaMacCryptoSetKey>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d098      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800eca8:	2011      	movs	r0, #17
 800ecaa:	e79d      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McKey0 != NULL )
 800ecac:	6841      	ldr	r1, [r0, #4]
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	f000 81a9 	beq.w	800f006 <LoRaMacMibSetRequestConfirm+0x4ce>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ecb4:	2080      	movs	r0, #128	; 0x80
 800ecb6:	f001 fa37 	bl	8010128 <LoRaMacCryptoSetKey>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d08d      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecbe:	2011      	movs	r0, #17
 800ecc0:	e792      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800ecc2:	6841      	ldr	r1, [r0, #4]
 800ecc4:	2900      	cmp	r1, #0
 800ecc6:	f000 81a0 	beq.w	800f00a <LoRaMacMibSetRequestConfirm+0x4d2>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ecca:	2081      	movs	r0, #129	; 0x81
 800eccc:	f001 fa2c 	bl	8010128 <LoRaMacCryptoSetKey>
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	d082      	beq.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecd4:	2011      	movs	r0, #17
 800ecd6:	e787      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ecd8:	6841      	ldr	r1, [r0, #4]
 800ecda:	2900      	cmp	r1, #0
 800ecdc:	f000 8197 	beq.w	800f00e <LoRaMacMibSetRequestConfirm+0x4d6>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ece0:	2082      	movs	r0, #130	; 0x82
 800ece2:	f001 fa21 	bl	8010128 <LoRaMacCryptoSetKey>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	f43f af77 	beq.w	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecec:	2011      	movs	r0, #17
 800ecee:	e77b      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ecf0:	7900      	ldrb	r0, [r0, #4]
 800ecf2:	4b39      	ldr	r3, [pc, #228]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ecf4:	f883 0105 	strb.w	r0, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ecf8:	4c38      	ldr	r4, [pc, #224]	; (800eddc <LoRaMacMibSetRequestConfirm+0x2a4>)
 800ecfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ecfc:	4798      	blx	r3
            Radio.Sleep( );
 800ecfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ed00:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed02:	2000      	movs	r0, #0
 800ed04:	e769      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ed06:	7902      	ldrb	r2, [r0, #4]
 800ed08:	4b33      	ldr	r3, [pc, #204]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ed0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed0e:	2000      	movs	r0, #0
 800ed10:	e763      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ed12:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ed16:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ed1a:	4b2f      	ldr	r3, [pc, #188]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ed1c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ed20:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ed24:	2207      	movs	r2, #7
 800ed26:	a901      	add	r1, sp, #4
 800ed28:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ed2c:	f001 fc42 	bl	80105b4 <RegionVerify>
 800ed30:	b908      	cbnz	r0, 800ed36 <LoRaMacMibSetRequestConfirm+0x1fe>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed32:	2003      	movs	r0, #3
 800ed34:	e750      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ed36:	6863      	ldr	r3, [r4, #4]
 800ed38:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	a901      	add	r1, sp, #4
 800ed3e:	4b26      	ldr	r3, [pc, #152]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ed40:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ed44:	f001 fc36 	bl	80105b4 <RegionVerify>
 800ed48:	2800      	cmp	r0, #0
 800ed4a:	f000 8162 	beq.w	800f012 <LoRaMacMibSetRequestConfirm+0x4da>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ed4e:	4b24      	ldr	r3, [pc, #144]	; (800ede0 <LoRaMacMibSetRequestConfirm+0x2a8>)
 800ed50:	3404      	adds	r4, #4
 800ed52:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ed56:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	e73c      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ed5e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ed62:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ed66:	4b1c      	ldr	r3, [pc, #112]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ed68:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ed6c:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ed70:	2207      	movs	r2, #7
 800ed72:	a901      	add	r1, sp, #4
 800ed74:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ed78:	f001 fc1c 	bl	80105b4 <RegionVerify>
 800ed7c:	2800      	cmp	r0, #0
 800ed7e:	f000 814a 	beq.w	800f016 <LoRaMacMibSetRequestConfirm+0x4de>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ed82:	4b18      	ldr	r3, [pc, #96]	; (800ede4 <LoRaMacMibSetRequestConfirm+0x2ac>)
 800ed84:	3404      	adds	r4, #4
 800ed86:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ed8a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ed8e:	2000      	movs	r0, #0
 800ed90:	e722      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ed92:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ed96:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ed9a:	4b0f      	ldr	r3, [pc, #60]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800ed9c:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800eda0:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800eda4:	2207      	movs	r2, #7
 800eda6:	a901      	add	r1, sp, #4
 800eda8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800edac:	f001 fc02 	bl	80105b4 <RegionVerify>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	f000 8132 	beq.w	800f01a <LoRaMacMibSetRequestConfirm+0x4e2>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800edb6:	4b08      	ldr	r3, [pc, #32]	; (800edd8 <LoRaMacMibSetRequestConfirm+0x2a0>)
 800edb8:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800edbc:	3404      	adds	r4, #4
 800edbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800edc2:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800edc6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800edca:	2b02      	cmp	r3, #2
 800edcc:	d00c      	beq.n	800ede8 <LoRaMacMibSetRequestConfirm+0x2b0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800edce:	2000      	movs	r0, #0
 800edd0:	e702      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
 800edd2:	bf00      	nop
 800edd4:	20003570 	.word	0x20003570
 800edd8:	20008000 	.word	0x20008000
 800eddc:	08016dc8 	.word	0x08016dc8
 800ede0:	20008064 	.word	0x20008064
 800ede4:	200080a8 	.word	0x200080a8
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ede8:	f1a2 036c 	sub.w	r3, r2, #108	; 0x6c
 800edec:	f893 011c 	ldrb.w	r0, [r3, #284]	; 0x11c
 800edf0:	2800      	cmp	r0, #0
 800edf2:	f43f aef1 	beq.w	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
                    Radio.Sleep( );
 800edf6:	4b90      	ldr	r3, [pc, #576]	; (800f038 <LoRaMacMibSetRequestConfirm+0x500>)
 800edf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edfa:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800edfc:	f7fe fd82 	bl	800d904 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee00:	2000      	movs	r0, #0
 800ee02:	e6e9      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ee04:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800ee08:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee0c:	4b8b      	ldr	r3, [pc, #556]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ee0e:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ee12:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ee16:	2207      	movs	r2, #7
 800ee18:	a901      	add	r1, sp, #4
 800ee1a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ee1e:	f001 fbc9 	bl	80105b4 <RegionVerify>
 800ee22:	2800      	cmp	r0, #0
 800ee24:	f000 80fb 	beq.w	800f01e <LoRaMacMibSetRequestConfirm+0x4e6>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800ee28:	4b85      	ldr	r3, [pc, #532]	; (800f040 <LoRaMacMibSetRequestConfirm+0x508>)
 800ee2a:	3404      	adds	r4, #4
 800ee2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ee30:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee34:	2000      	movs	r0, #0
 800ee36:	e6cf      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800ee38:	6843      	ldr	r3, [r0, #4]
 800ee3a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ee42:	a902      	add	r1, sp, #8
 800ee44:	4b7d      	ldr	r3, [pc, #500]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ee46:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ee4a:	f001 fbd1 	bl	80105f0 <RegionChanMaskSet>
 800ee4e:	b108      	cbz	r0, 800ee54 <LoRaMacMibSetRequestConfirm+0x31c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee50:	2000      	movs	r0, #0
 800ee52:	e6c1      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee54:	2003      	movs	r0, #3
 800ee56:	e6c7      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ee58:	6843      	ldr	r3, [r0, #4]
 800ee5a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ee62:	a902      	add	r1, sp, #8
 800ee64:	4b75      	ldr	r3, [pc, #468]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ee66:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ee6a:	f001 fbc1 	bl	80105f0 <RegionChanMaskSet>
 800ee6e:	b108      	cbz	r0, 800ee74 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee70:	2000      	movs	r0, #0
 800ee72:	e6b1      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee74:	2003      	movs	r0, #3
 800ee76:	e6b7      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ee78:	7902      	ldrb	r2, [r0, #4]
 800ee7a:	1e53      	subs	r3, r2, #1
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	2b0e      	cmp	r3, #14
 800ee80:	f200 80cf 	bhi.w	800f022 <LoRaMacMibSetRequestConfirm+0x4ea>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ee84:	4b6d      	ldr	r3, [pc, #436]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ee86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	e6a4      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ee8e:	6842      	ldr	r2, [r0, #4]
 800ee90:	4b6a      	ldr	r3, [pc, #424]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ee92:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee94:	2000      	movs	r0, #0
 800ee96:	e6a0      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ee98:	6842      	ldr	r2, [r0, #4]
 800ee9a:	4b68      	ldr	r3, [pc, #416]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ee9c:	651a      	str	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ee9e:	2000      	movs	r0, #0
 800eea0:	e69b      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800eea2:	6842      	ldr	r2, [r0, #4]
 800eea4:	4b65      	ldr	r3, [pc, #404]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800eea6:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eea8:	2000      	movs	r0, #0
 800eeaa:	e696      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800eeac:	6842      	ldr	r2, [r0, #4]
 800eeae:	4b63      	ldr	r3, [pc, #396]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800eeb0:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eeb2:	2000      	movs	r0, #0
 800eeb4:	e691      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800eeb6:	6842      	ldr	r2, [r0, #4]
 800eeb8:	4b60      	ldr	r3, [pc, #384]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800eeba:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eebc:	2000      	movs	r0, #0
 800eebe:	e68c      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800eec0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800eec4:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800eec8:	2206      	movs	r2, #6
 800eeca:	a901      	add	r1, sp, #4
 800eecc:	4b5b      	ldr	r3, [pc, #364]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800eece:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800eed2:	f001 fb6f 	bl	80105b4 <RegionVerify>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	f000 80a5 	beq.w	800f026 <LoRaMacMibSetRequestConfirm+0x4ee>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800eedc:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800eee0:	4b56      	ldr	r3, [pc, #344]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800eee2:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800eee6:	2000      	movs	r0, #0
 800eee8:	e676      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800eeea:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800eeee:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eef2:	4b52      	ldr	r3, [pc, #328]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800eef4:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800eef8:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800eefc:	2205      	movs	r2, #5
 800eefe:	a901      	add	r1, sp, #4
 800ef00:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ef04:	f001 fb56 	bl	80105b4 <RegionVerify>
 800ef08:	2800      	cmp	r0, #0
 800ef0a:	f000 808e 	beq.w	800f02a <LoRaMacMibSetRequestConfirm+0x4f2>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ef0e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ef12:	4b4a      	ldr	r3, [pc, #296]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef18:	2000      	movs	r0, #0
 800ef1a:	e65d      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ef1c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ef20:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ef24:	220a      	movs	r2, #10
 800ef26:	a901      	add	r1, sp, #4
 800ef28:	4b44      	ldr	r3, [pc, #272]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef2a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ef2e:	f001 fb41 	bl	80105b4 <RegionVerify>
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d07b      	beq.n	800f02e <LoRaMacMibSetRequestConfirm+0x4f6>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800ef36:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ef3a:	4b40      	ldr	r3, [pc, #256]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef3c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef40:	2000      	movs	r0, #0
 800ef42:	e649      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800ef44:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800ef48:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800ef4c:	2209      	movs	r2, #9
 800ef4e:	a901      	add	r1, sp, #4
 800ef50:	4b3a      	ldr	r3, [pc, #232]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef52:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ef56:	f001 fb2d 	bl	80105b4 <RegionVerify>
 800ef5a:	2800      	cmp	r0, #0
 800ef5c:	d069      	beq.n	800f032 <LoRaMacMibSetRequestConfirm+0x4fa>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800ef5e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800ef62:	4b36      	ldr	r3, [pc, #216]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef68:	2000      	movs	r0, #0
 800ef6a:	e635      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ef6c:	6842      	ldr	r2, [r0, #4]
 800ef6e:	4b33      	ldr	r3, [pc, #204]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800ef74:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef76:	2000      	movs	r0, #0
 800ef78:	e62f      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ef7a:	7902      	ldrb	r2, [r0, #4]
 800ef7c:	4b2f      	ldr	r3, [pc, #188]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef7e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800ef82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef86:	2000      	movs	r0, #0
 800ef88:	e627      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800ef8a:	6842      	ldr	r2, [r0, #4]
 800ef8c:	4b2b      	ldr	r3, [pc, #172]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef8e:	67da      	str	r2, [r3, #124]	; 0x7c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef90:	2000      	movs	r0, #0
 800ef92:	e622      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ef94:	6842      	ldr	r2, [r0, #4]
 800ef96:	4b29      	ldr	r3, [pc, #164]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800ef98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	e61c      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            status = RestoreNvmData( );
 800efa0:	f7fe fdc4 	bl	800db2c <RestoreNvmData>
            break;
 800efa4:	e618      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800efa6:	7983      	ldrb	r3, [r0, #6]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d901      	bls.n	800efb0 <LoRaMacMibSetRequestConfirm+0x478>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efac:	2003      	movs	r0, #3
 800efae:	e61b      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800efb0:	6842      	ldr	r2, [r0, #4]
 800efb2:	4b22      	ldr	r3, [pc, #136]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800efb4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800efb8:	6840      	ldr	r0, [r0, #4]
 800efba:	f000 ff69 	bl	800fe90 <LoRaMacCryptoSetLrWanVersion>
 800efbe:	2800      	cmp	r0, #0
 800efc0:	f43f ae0a 	beq.w	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800efc4:	2011      	movs	r0, #17
 800efc6:	e60f      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800efc8:	6842      	ldr	r2, [r0, #4]
 800efca:	4b1c      	ldr	r3, [pc, #112]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800efcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800efd0:	2000      	movs	r0, #0
 800efd2:	e602      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800efd4:	7902      	ldrb	r2, [r0, #4]
 800efd6:	4b19      	ldr	r3, [pc, #100]	; (800f03c <LoRaMacMibSetRequestConfirm+0x504>)
 800efd8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800efdc:	2000      	movs	r0, #0
 800efde:	e5fc      	b.n	800ebda <LoRaMacMibSetRequestConfirm+0xa2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800efe0:	f000 fae2 	bl	800f5a8 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800efe4:	e5f8      	b.n	800ebd8 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800efe6:	2003      	movs	r0, #3
}
 800efe8:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800efea:	2001      	movs	r0, #1
 800efec:	e5fc      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efee:	2003      	movs	r0, #3
 800eff0:	e5fa      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eff2:	2003      	movs	r0, #3
 800eff4:	e5f8      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eff6:	2003      	movs	r0, #3
 800eff8:	e5f6      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800effa:	2003      	movs	r0, #3
 800effc:	e5f4      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800effe:	2003      	movs	r0, #3
 800f000:	e5f2      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f002:	2003      	movs	r0, #3
 800f004:	e5f0      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f006:	2003      	movs	r0, #3
 800f008:	e5ee      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f00a:	2003      	movs	r0, #3
 800f00c:	e5ec      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f00e:	2003      	movs	r0, #3
 800f010:	e5ea      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f012:	2003      	movs	r0, #3
 800f014:	e5e8      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f016:	2003      	movs	r0, #3
 800f018:	e5e6      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f01a:	2003      	movs	r0, #3
 800f01c:	e5e4      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f01e:	2003      	movs	r0, #3
 800f020:	e5e2      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f022:	2003      	movs	r0, #3
 800f024:	e5e0      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f026:	2003      	movs	r0, #3
 800f028:	e5de      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f02a:	2003      	movs	r0, #3
 800f02c:	e5dc      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f02e:	2003      	movs	r0, #3
 800f030:	e5da      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f032:	2003      	movs	r0, #3
 800f034:	e5d8      	b.n	800ebe8 <LoRaMacMibSetRequestConfirm+0xb0>
 800f036:	bf00      	nop
 800f038:	08016dc8 	.word	0x08016dc8
 800f03c:	20008000 	.word	0x20008000
 800f040:	200080b0 	.word	0x200080b0

0800f044 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f044:	b570      	push	{r4, r5, r6, lr}
 800f046:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f048:	2300      	movs	r3, #0
 800f04a:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800f04e:	2800      	cmp	r0, #0
 800f050:	f000 80ea 	beq.w	800f228 <LoRaMacMlmeRequest+0x1e4>
 800f054:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f056:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800f058:	f7ff f920 	bl	800e29c <LoRaMacIsBusy>
 800f05c:	b118      	cbz	r0, 800f066 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800f05e:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800f060:	4620      	mov	r0, r4
 800f062:	b006      	add	sp, #24
 800f064:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f066:	f000 fd49 	bl	800fafc <LoRaMacConfirmQueueIsFull>
 800f06a:	b108      	cbz	r0, 800f070 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800f06c:	2401      	movs	r4, #1
 800f06e:	e7f7      	b.n	800f060 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f070:	f000 fd3e 	bl	800faf0 <LoRaMacConfirmQueueGetCnt>
 800f074:	b308      	cbz	r0, 800f0ba <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f076:	4b6d      	ldr	r3, [pc, #436]	; (800f22c <LoRaMacMlmeRequest+0x1e8>)
 800f078:	2101      	movs	r1, #1
 800f07a:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f07e:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800f082:	f042 0204 	orr.w	r2, r2, #4
 800f086:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 800f08a:	782b      	ldrb	r3, [r5, #0]
 800f08c:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f090:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800f094:	2200      	movs	r2, #0
 800f096:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800f09a:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800f09e:	461c      	mov	r4, r3
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	2b0c      	cmp	r3, #12
 800f0a4:	f200 80a6 	bhi.w	800f1f4 <LoRaMacMlmeRequest+0x1b0>
 800f0a8:	e8df f003 	tbb	[pc, r3]
 800f0ac:	5aa4a40d 	.word	0x5aa4a40d
 800f0b0:	a4a4a464 	.word	0xa4a4a464
 800f0b4:	7695a46d 	.word	0x7695a46d
 800f0b8:	8c          	.byte	0x8c
 800f0b9:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f0ba:	2214      	movs	r2, #20
 800f0bc:	2100      	movs	r1, #0
 800f0be:	485c      	ldr	r0, [pc, #368]	; (800f230 <LoRaMacMlmeRequest+0x1ec>)
 800f0c0:	f004 faef 	bl	80136a2 <memset1>
 800f0c4:	e7d7      	b.n	800f076 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f0c6:	4b59      	ldr	r3, [pc, #356]	; (800f22c <LoRaMacMlmeRequest+0x1e8>)
 800f0c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f0cc:	f013 0f20 	tst.w	r3, #32
 800f0d0:	d1c6      	bne.n	800f060 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800f0d2:	792b      	ldrb	r3, [r5, #4]
 800f0d4:	2b02      	cmp	r3, #2
 800f0d6:	d003      	beq.n	800f0e0 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	d021      	beq.n	800f120 <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f0dc:	2402      	movs	r4, #2
 800f0de:	e08a      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
                ResetMacParameters( );
 800f0e0:	f7fe fe24 	bl	800dd2c <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f0e4:	4c53      	ldr	r4, [pc, #332]	; (800f234 <LoRaMacMlmeRequest+0x1f0>)
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800f0ec:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800f0f0:	f001 fb1c 	bl	801072c <RegionAlternateDr>
 800f0f4:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f0f8:	2307      	movs	r3, #7
 800f0fa:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800f0fe:	20ff      	movs	r0, #255	; 0xff
 800f100:	f7fe ff4a 	bl	800df98 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800f104:	4604      	mov	r4, r0
 800f106:	2800      	cmp	r0, #0
 800f108:	d075      	beq.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f10a:	4e4a      	ldr	r6, [pc, #296]	; (800f234 <LoRaMacMlmeRequest+0x1f0>)
 800f10c:	2201      	movs	r2, #1
 800f10e:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800f112:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800f116:	f001 fb09 	bl	801072c <RegionAlternateDr>
 800f11a:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800f11e:	e06a      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800f120:	4e44      	ldr	r6, [pc, #272]	; (800f234 <LoRaMacMlmeRequest+0x1f0>)
 800f122:	2400      	movs	r4, #0
 800f124:	f886 4109 	strb.w	r4, [r6, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f128:	2302      	movs	r3, #2
 800f12a:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f12e:	4669      	mov	r1, sp
 800f130:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800f134:	f001 fa30 	bl	8010598 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800f138:	792b      	ldrb	r3, [r5, #4]
 800f13a:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f13e:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800f142:	2301      	movs	r3, #1
 800f144:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 800f148:	4e38      	ldr	r6, [pc, #224]	; (800f22c <LoRaMacMlmeRequest+0x1e8>)
 800f14a:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f152:	f896 3495 	ldrb.w	r3, [r6, #1173]	; 0x495
 800f156:	f043 0320 	orr.w	r3, r3, #32
 800f15a:	f886 3495 	strb.w	r3, [r6, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 800f15e:	e04a      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f160:	2200      	movs	r2, #0
 800f162:	a904      	add	r1, sp, #16
 800f164:	2002      	movs	r0, #2
 800f166:	f000 fac1 	bl	800f6ec <LoRaMacCommandsAddCmd>
 800f16a:	4604      	mov	r4, r0
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d042      	beq.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f170:	2413      	movs	r4, #19
 800f172:	e040      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f174:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800f178:	b2d2      	uxtb	r2, r2
 800f17a:	68a9      	ldr	r1, [r5, #8]
 800f17c:	88a8      	ldrh	r0, [r5, #4]
 800f17e:	f7fc ffe3 	bl	800c148 <SetTxContinuousWave>
 800f182:	4604      	mov	r4, r0
            break;
 800f184:	e037      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f186:	2200      	movs	r2, #0
 800f188:	a904      	add	r1, sp, #16
 800f18a:	200d      	movs	r0, #13
 800f18c:	f000 faae 	bl	800f6ec <LoRaMacCommandsAddCmd>
 800f190:	4604      	mov	r4, r0
 800f192:	b380      	cbz	r0, 800f1f6 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f194:	2413      	movs	r4, #19
 800f196:	e02e      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800f198:	4b26      	ldr	r3, [pc, #152]	; (800f234 <LoRaMacMlmeRequest+0x1f0>)
 800f19a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f19e:	b10b      	cbz	r3, 800f1a4 <LoRaMacMlmeRequest+0x160>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f1a0:	2402      	movs	r4, #2
 800f1a2:	e028      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f1a4:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f1a6:	f004 0007 	and.w	r0, r4, #7
 800f1aa:	f000 f9f6 	bl	800f59a <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800f1ae:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	a904      	add	r1, sp, #16
 800f1b6:	2010      	movs	r0, #16
 800f1b8:	f000 fa98 	bl	800f6ec <LoRaMacCommandsAddCmd>
 800f1bc:	4604      	mov	r4, r0
 800f1be:	b1d0      	cbz	r0, 800f1f6 <LoRaMacMlmeRequest+0x1b2>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f1c0:	2413      	movs	r4, #19
 800f1c2:	e018      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	a904      	add	r1, sp, #16
 800f1c8:	2012      	movs	r0, #18
 800f1ca:	f000 fa8f 	bl	800f6ec <LoRaMacCommandsAddCmd>
 800f1ce:	4604      	mov	r4, r0
 800f1d0:	b188      	cbz	r0, 800f1f6 <LoRaMacMlmeRequest+0x1b2>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f1d2:	2413      	movs	r4, #19
 800f1d4:	e00f      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
            queueElement.RestrictCommonReadyToHandle = true;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f1dc:	f000 f9ce 	bl	800f57c <LoRaMacClassBIsAcquisitionInProgress>
 800f1e0:	b108      	cbz	r0, 800f1e6 <LoRaMacMlmeRequest+0x1a2>
                status = LORAMAC_STATUS_BUSY;
 800f1e2:	2401      	movs	r4, #1
 800f1e4:	e007      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f1e6:	f000 f9c6 	bl	800f576 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f1ea:	2000      	movs	r0, #0
 800f1ec:	f000 f9c8 	bl	800f580 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800f1f0:	2400      	movs	r4, #0
 800f1f2:	e000      	b.n	800f1f6 <LoRaMacMlmeRequest+0x1b2>
    switch( mlmeRequest->Type )
 800f1f4:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f1f6:	4b0d      	ldr	r3, [pc, #52]	; (800f22c <LoRaMacMlmeRequest+0x1e8>)
 800f1f8:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800f1fc:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800f1fe:	b17c      	cbz	r4, 800f220 <LoRaMacMlmeRequest+0x1dc>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f200:	f000 fc76 	bl	800faf0 <LoRaMacConfirmQueueGetCnt>
 800f204:	2800      	cmp	r0, #0
 800f206:	f47f af2b 	bne.w	800f060 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800f20a:	4b08      	ldr	r3, [pc, #32]	; (800f22c <LoRaMacMlmeRequest+0x1e8>)
 800f20c:	2100      	movs	r1, #0
 800f20e:	f883 141e 	strb.w	r1, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f212:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800f216:	f361 0282 	bfi	r2, r1, #2, #1
 800f21a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800f21e:	e71f      	b.n	800f060 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800f220:	a805      	add	r0, sp, #20
 800f222:	f000 fba1 	bl	800f968 <LoRaMacConfirmQueueAdd>
 800f226:	e71b      	b.n	800f060 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f228:	2403      	movs	r4, #3
 800f22a:	e719      	b.n	800f060 <LoRaMacMlmeRequest+0x1c>
 800f22c:	20003570 	.word	0x20003570
 800f230:	200039c8 	.word	0x200039c8
 800f234:	20008000 	.word	0x20008000

0800f238 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800f238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23c:	b091      	sub	sp, #68	; 0x44
 800f23e:	9103      	str	r1, [sp, #12]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800f240:	2800      	cmp	r0, #0
 800f242:	f000 80de 	beq.w	800f402 <LoRaMacMcpsRequest+0x1ca>
 800f246:	f04f 0a00 	mov.w	sl, #0
 800f24a:	4605      	mov	r5, r0
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f24c:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800f250:	f7ff f824 	bl	800e29c <LoRaMacIsBusy>
 800f254:	4680      	mov	r8, r0
 800f256:	b118      	cbz	r0, 800f260 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800f258:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800f25a:	b011      	add	sp, #68	; 0x44
 800f25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800f260:	ac06      	add	r4, sp, #24
 800f262:	462e      	mov	r6, r5
 800f264:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f268:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800f26c:	4651      	mov	r1, sl
 800f26e:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f272:	4c66      	ldr	r4, [pc, #408]	; (800f40c <LoRaMacMcpsRequest+0x1d4>)
 800f274:	2214      	movs	r2, #20
 800f276:	f204 4044 	addw	r0, r4, #1092	; 0x444
 800f27a:	f004 fa12 	bl	80136a2 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f27e:	2301      	movs	r3, #1
 800f280:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f284:	4b62      	ldr	r3, [pc, #392]	; (800f410 <LoRaMacMcpsRequest+0x1d8>)
 800f286:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800f28a:	2b02      	cmp	r3, #2
 800f28c:	d065      	beq.n	800f35a <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800f28e:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800f292:	2f01      	cmp	r7, #1
 800f294:	f000 8086 	beq.w	800f3a4 <LoRaMacMcpsRequest+0x16c>
 800f298:	2f03      	cmp	r7, #3
 800f29a:	f000 8096 	beq.w	800f3ca <LoRaMacMcpsRequest+0x192>
 800f29e:	2f00      	cmp	r7, #0
 800f2a0:	d06d      	beq.n	800f37e <LoRaMacMcpsRequest+0x146>
 800f2a2:	f04f 0b00 	mov.w	fp, #0
 800f2a6:	f8cd b014 	str.w	fp, [sp, #20]
 800f2aa:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f2ae:	2302      	movs	r3, #2
 800f2b0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f2b4:	4e56      	ldr	r6, [pc, #344]	; (800f410 <LoRaMacMcpsRequest+0x1d8>)
 800f2b6:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
 800f2ba:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f2be:	a90e      	add	r1, sp, #56	; 0x38
 800f2c0:	f896 0040 	ldrb.w	r0, [r6, #64]	; 0x40
 800f2c4:	f001 f942 	bl	801054c <RegionGetPhyParam>
 800f2c8:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f2ca:	b244      	sxtb	r4, r0
 800f2cc:	45a3      	cmp	fp, r4
 800f2ce:	bfb8      	it	lt
 800f2d0:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800f2d2:	f896 9106 	ldrb.w	r9, [r6, #262]	; 0x106
 800f2d6:	f896 2109 	ldrb.w	r2, [r6, #265]	; 0x109
 800f2da:	f896 111c 	ldrb.w	r1, [r6, #284]	; 0x11c
 800f2de:	4648      	mov	r0, r9
 800f2e0:	f7fc ff04 	bl	800c0ec <CheckForMinimumAbpDatarate>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	b900      	cbnz	r0, 800f2ea <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f2e8:	465c      	mov	r4, fp
    if( readyToSend == true )
 800f2ea:	f1b8 0f00 	cmp.w	r8, #0
 800f2ee:	f000 8082 	beq.w	800f3f6 <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800f2f2:	f1b9 0f00 	cmp.w	r9, #0
 800f2f6:	d000      	beq.n	800f2fa <LoRaMacMcpsRequest+0xc2>
 800f2f8:	b19b      	cbz	r3, 800f322 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800f2fa:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f2fe:	4b44      	ldr	r3, [pc, #272]	; (800f410 <LoRaMacMcpsRequest+0x1d8>)
 800f300:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800f304:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800f308:	2205      	movs	r2, #5
 800f30a:	a90b      	add	r1, sp, #44	; 0x2c
 800f30c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f310:	f001 f950 	bl	80105b4 <RegionVerify>
 800f314:	2800      	cmp	r0, #0
 800f316:	d076      	beq.n	800f406 <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f318:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800f31c:	4b3c      	ldr	r3, [pc, #240]	; (800f410 <LoRaMacMcpsRequest+0x1d8>)
 800f31e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f322:	4b3a      	ldr	r3, [pc, #232]	; (800f40c <LoRaMacMcpsRequest+0x1d4>)
 800f324:	f8d3 149c 	ldr.w	r1, [r3, #1180]	; 0x49c
 800f328:	4b39      	ldr	r3, [pc, #228]	; (800f410 <LoRaMacMcpsRequest+0x1d8>)
 800f32a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800f32e:	f7fe f81d 	bl	800d36c <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	9300      	str	r3, [sp, #0]
 800f336:	4653      	mov	r3, sl
 800f338:	9a05      	ldr	r2, [sp, #20]
 800f33a:	9904      	ldr	r1, [sp, #16]
 800f33c:	a80c      	add	r0, sp, #48	; 0x30
 800f33e:	f7fe ff19 	bl	800e174 <Send>
        if( status == LORAMAC_STATUS_OK )
 800f342:	2800      	cmp	r0, #0
 800f344:	d152      	bne.n	800f3ec <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800f346:	4b31      	ldr	r3, [pc, #196]	; (800f40c <LoRaMacMcpsRequest+0x1d4>)
 800f348:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800f34c:	f893 2495 	ldrb.w	r2, [r3, #1173]	; 0x495
 800f350:	f042 0201 	orr.w	r2, r2, #1
 800f354:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
 800f358:	e04e      	b.n	800f3f8 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800f35a:	4b2d      	ldr	r3, [pc, #180]	; (800f410 <LoRaMacMcpsRequest+0x1d8>)
 800f35c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f360:	2b02      	cmp	r3, #2
 800f362:	d194      	bne.n	800f28e <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800f364:	4b2a      	ldr	r3, [pc, #168]	; (800f410 <LoRaMacMcpsRequest+0x1d8>)
 800f366:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d18f      	bne.n	800f28e <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800f36e:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800f372:	2b00      	cmp	r3, #0
 800f374:	d18b      	bne.n	800f28e <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800f376:	2301      	movs	r3, #1
 800f378:	f88d 3018 	strb.w	r3, [sp, #24]
 800f37c:	e787      	b.n	800f28e <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800f37e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f382:	2202      	movs	r2, #2
 800f384:	f362 1347 	bfi	r3, r2, #5, #3
 800f388:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800f38c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f390:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800f392:	9b08      	ldr	r3, [sp, #32]
 800f394:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800f396:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800f39a:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800f39e:	f04f 0801 	mov.w	r8, #1
            break;
 800f3a2:	e784      	b.n	800f2ae <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800f3a4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f3a8:	2204      	movs	r2, #4
 800f3aa:	f362 1347 	bfi	r3, r2, #5, #3
 800f3ae:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800f3b2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800f3b6:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800f3b8:	9b08      	ldr	r3, [sp, #32]
 800f3ba:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800f3bc:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800f3c0:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800f3c4:	f04f 0801 	mov.w	r8, #1
            break;
 800f3c8:	e771      	b.n	800f2ae <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800f3ca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f3ce:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800f3d2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800f3d6:	9b07      	ldr	r3, [sp, #28]
 800f3d8:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800f3da:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800f3de:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800f3e2:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	9304      	str	r3, [sp, #16]
            break;
 800f3ea:	e760      	b.n	800f2ae <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800f3ec:	4b07      	ldr	r3, [pc, #28]	; (800f40c <LoRaMacMcpsRequest+0x1d4>)
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
 800f3f4:	e000      	b.n	800f3f8 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f3f6:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f3f8:	4b04      	ldr	r3, [pc, #16]	; (800f40c <LoRaMacMcpsRequest+0x1d4>)
 800f3fa:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 800f3fe:	612b      	str	r3, [r5, #16]
    return status;
 800f400:	e72b      	b.n	800f25a <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f402:	2003      	movs	r0, #3
 800f404:	e729      	b.n	800f25a <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f406:	2003      	movs	r0, #3
 800f408:	e727      	b.n	800f25a <LoRaMacMcpsRequest+0x22>
 800f40a:	bf00      	nop
 800f40c:	20003570 	.word	0x20003570
 800f410:	20008000 	.word	0x20008000

0800f414 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800f414:	b510      	push	{r4, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800f41a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800f41e:	220f      	movs	r2, #15
 800f420:	a901      	add	r1, sp, #4
 800f422:	4b05      	ldr	r3, [pc, #20]	; (800f438 <LoRaMacTestSetDutyCycleOn+0x24>)
 800f424:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f428:	f001 f8c4 	bl	80105b4 <RegionVerify>
 800f42c:	b110      	cbz	r0, 800f434 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800f42e:	4b02      	ldr	r3, [pc, #8]	; (800f438 <LoRaMacTestSetDutyCycleOn+0x24>)
 800f430:	f883 4108 	strb.w	r4, [r3, #264]	; 0x108
    }
}
 800f434:	b002      	add	sp, #8
 800f436:	bd10      	pop	{r4, pc}
 800f438:	20008000 	.word	0x20008000

0800f43c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800f43c:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800f43e:	f7ff f97b 	bl	800e738 <LoRaMacStop>
 800f442:	b110      	cbz	r0, 800f44a <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800f444:	2401      	movs	r4, #1
    }
}
 800f446:	4620      	mov	r0, r4
 800f448:	bd38      	pop	{r3, r4, r5, pc}
 800f44a:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800f44c:	4d0a      	ldr	r5, [pc, #40]	; (800f478 <LoRaMacDeInitialization+0x3c>)
 800f44e:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800f452:	f006 fa2f 	bl	80158b4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800f456:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800f45a:	f006 fa2b 	bl	80158b4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800f45e:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800f462:	f006 fa27 	bl	80158b4 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800f466:	f000 f899 	bl	800f59c <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( );
 800f46a:	f7fe fc5f 	bl	800dd2c <ResetMacParameters>
        Radio.Sleep( );
 800f46e:	4b03      	ldr	r3, [pc, #12]	; (800f47c <LoRaMacDeInitialization+0x40>)
 800f470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f472:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800f474:	e7e7      	b.n	800f446 <LoRaMacDeInitialization+0xa>
 800f476:	bf00      	nop
 800f478:	20003570 	.word	0x20003570
 800f47c:	08016dc8 	.word	0x08016dc8

0800f480 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	b08b      	sub	sp, #44	; 0x2c
 800f486:	460f      	mov	r7, r1
 800f488:	4616      	mov	r6, r2
 800f48a:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800f48c:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800f490:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800f494:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800f498:	6842      	ldr	r2, [r0, #4]
 800f49a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f49c:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800f49e:	f890 8001 	ldrb.w	r8, [r0, #1]
 800f4a2:	f1b8 0f00 	cmp.w	r8, #0
 800f4a6:	d109      	bne.n	800f4bc <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800f4a8:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800f4ac:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800f4b0:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800f4b4:	4640      	mov	r0, r8
 800f4b6:	b00b      	add	sp, #44	; 0x2c
 800f4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4bc:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800f4be:	2302      	movs	r3, #2
 800f4c0:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f4c4:	7bc3      	ldrb	r3, [r0, #15]
 800f4c6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f4ca:	a908      	add	r1, sp, #32
 800f4cc:	7c00      	ldrb	r0, [r0, #16]
 800f4ce:	f001 f83d 	bl	801054c <RegionGetPhyParam>
 800f4d2:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800f4d4:	b243      	sxtb	r3, r0
 800f4d6:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800f4d8:	454b      	cmp	r3, r9
 800f4da:	bfb8      	it	lt
 800f4dc:	464b      	movlt	r3, r9
 800f4de:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800f4e0:	6862      	ldr	r2, [r4, #4]
 800f4e2:	8923      	ldrh	r3, [r4, #8]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d201      	bcs.n	800f4ec <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800f4e8:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800f4ec:	8961      	ldrh	r1, [r4, #10]
 800f4ee:	440b      	add	r3, r1
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d224      	bcs.n	800f53e <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800f4f4:	6863      	ldr	r3, [r4, #4]
 800f4f6:	8921      	ldrh	r1, [r4, #8]
 800f4f8:	8962      	ldrh	r2, [r4, #10]
 800f4fa:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800f4fe:	4283      	cmp	r3, r0
 800f500:	d332      	bcc.n	800f568 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800f502:	1a5b      	subs	r3, r3, r1
 800f504:	fbb3 f1f2 	udiv	r1, r3, r2
 800f508:	fb02 3311 	mls	r3, r2, r1, r3
 800f50c:	bb7b      	cbnz	r3, 800f56e <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800f50e:	9b01      	ldr	r3, [sp, #4]
 800f510:	4599      	cmp	r9, r3
 800f512:	dc03      	bgt.n	800f51c <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800f514:	7823      	ldrb	r3, [r4, #0]
 800f516:	b9eb      	cbnz	r3, 800f554 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800f518:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f51c:	2321      	movs	r3, #33	; 0x21
 800f51e:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800f522:	9b00      	ldr	r3, [sp, #0]
 800f524:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f528:	7be3      	ldrb	r3, [r4, #15]
 800f52a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f52e:	a908      	add	r1, sp, #32
 800f530:	7c20      	ldrb	r0, [r4, #16]
 800f532:	f001 f80b 	bl	801054c <RegionGetPhyParam>
 800f536:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800f538:	fa4f f980 	sxtb.w	r9, r0
 800f53c:	e7b4      	b.n	800f4a8 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800f53e:	230a      	movs	r3, #10
 800f540:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f544:	a908      	add	r1, sp, #32
 800f546:	7c20      	ldrb	r0, [r4, #16]
 800f548:	f001 f800 	bl	801054c <RegionGetPhyParam>
 800f54c:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800f54e:	fa4f fa80 	sxtb.w	sl, r0
 800f552:	e7cf      	b.n	800f4f4 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f554:	2302      	movs	r3, #2
 800f556:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800f55a:	a903      	add	r1, sp, #12
 800f55c:	7c20      	ldrb	r0, [r4, #16]
 800f55e:	f001 f81b 	bl	8010598 <RegionInitDefaults>
                    nbTrans = 1;
 800f562:	f04f 0b01 	mov.w	fp, #1
 800f566:	e7d9      	b.n	800f51c <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800f568:	f8dd 9000 	ldr.w	r9, [sp]
 800f56c:	e79c      	b.n	800f4a8 <LoRaMacAdrCalcNext+0x28>
 800f56e:	f8dd 9000 	ldr.w	r9, [sp]
 800f572:	e799      	b.n	800f4a8 <LoRaMacAdrCalcNext+0x28>

0800f574 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f574:	4770      	bx	lr

0800f576 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f576:	4770      	bx	lr

0800f578 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f578:	4770      	bx	lr

0800f57a <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f57a:	4770      	bx	lr

0800f57c <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f57c:	2000      	movs	r0, #0
 800f57e:	4770      	bx	lr

0800f580 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f580:	4770      	bx	lr

0800f582 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f582:	4770      	bx	lr

0800f584 <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f584:	4770      	bx	lr

0800f586 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f586:	2000      	movs	r0, #0
 800f588:	4770      	bx	lr

0800f58a <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f58a:	2000      	movs	r0, #0
 800f58c:	4770      	bx	lr

0800f58e <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f58e:	2000      	movs	r0, #0
 800f590:	4770      	bx	lr

0800f592 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f592:	2000      	movs	r0, #0
 800f594:	4770      	bx	lr

0800f596 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f596:	2000      	movs	r0, #0
 800f598:	4770      	bx	lr

0800f59a <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f59a:	4770      	bx	lr

0800f59c <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f59c:	4770      	bx	lr

0800f59e <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f59e:	4770      	bx	lr

0800f5a0 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5a0:	2002      	movs	r0, #2
 800f5a2:	4770      	bx	lr

0800f5a4 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5a4:	2002      	movs	r0, #2
 800f5a6:	4770      	bx	lr

0800f5a8 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5a8:	2002      	movs	r0, #2
 800f5aa:	4770      	bx	lr

0800f5ac <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5ac:	4770      	bx	lr

0800f5ae <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5ae:	2000      	movs	r0, #0
 800f5b0:	4770      	bx	lr

0800f5b2 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5b2:	4770      	bx	lr

0800f5b4 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5b4:	4770      	bx	lr

0800f5b6 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	4770      	bx	lr

0800f5ba <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	4770      	bx	lr

0800f5be <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5be:	4770      	bx	lr

0800f5c0 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5c0:	4770      	bx	lr

0800f5c2 <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5c2:	4770      	bx	lr

0800f5c4 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	2b0f      	cmp	r3, #15
 800f5c8:	d804      	bhi.n	800f5d4 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800f5ca:	5cc2      	ldrb	r2, [r0, r3]
 800f5cc:	b922      	cbnz	r2, 800f5d8 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	e7f8      	b.n	800f5c6 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800f5d4:	2001      	movs	r0, #1
 800f5d6:	4770      	bx	lr
            return false;
 800f5d8:	2000      	movs	r0, #0
}
 800f5da:	4770      	bx	lr

0800f5dc <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800f5dc:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800f5de:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800f5e0:	0125      	lsls	r5, r4, #4
 800f5e2:	f105 0308 	add.w	r3, r5, #8
 800f5e6:	4d06      	ldr	r5, [pc, #24]	; (800f600 <MallocNewMacCommandSlot+0x24>)
 800f5e8:	441d      	add	r5, r3
 800f5ea:	4628      	mov	r0, r5
 800f5ec:	f7ff ffea 	bl	800f5c4 <IsSlotFree>
 800f5f0:	b920      	cbnz	r0, 800f5fc <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800f5f2:	3401      	adds	r4, #1
 800f5f4:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800f5f6:	2c20      	cmp	r4, #32
 800f5f8:	d1f2      	bne.n	800f5e0 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800f5fa:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800f5fc:	4628      	mov	r0, r5
 800f5fe:	bd38      	pop	{r3, r4, r5, pc}
 800f600:	20003b34 	.word	0x20003b34

0800f604 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800f604:	b120      	cbz	r0, 800f610 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800f606:	2200      	movs	r2, #0
 800f608:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800f60a:	6042      	str	r2, [r0, #4]

    return true;
 800f60c:	2001      	movs	r0, #1
 800f60e:	4770      	bx	lr
        return false;
 800f610:	2000      	movs	r0, #0
}
 800f612:	4770      	bx	lr

0800f614 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f614:	4603      	mov	r3, r0
 800f616:	b160      	cbz	r0, 800f632 <LinkedListAdd+0x1e>
 800f618:	b169      	cbz	r1, 800f636 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800f61a:	6802      	ldr	r2, [r0, #0]
 800f61c:	b13a      	cbz	r2, 800f62e <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800f61e:	685a      	ldr	r2, [r3, #4]
 800f620:	b102      	cbz	r2, 800f624 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800f622:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800f624:	2200      	movs	r2, #0
 800f626:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800f628:	6059      	str	r1, [r3, #4]

    return true;
 800f62a:	2001      	movs	r0, #1
 800f62c:	4770      	bx	lr
        list->First = element;
 800f62e:	6001      	str	r1, [r0, #0]
 800f630:	e7f5      	b.n	800f61e <LinkedListAdd+0xa>
        return false;
 800f632:	2000      	movs	r0, #0
 800f634:	4770      	bx	lr
 800f636:	2000      	movs	r0, #0
}
 800f638:	4770      	bx	lr

0800f63a <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f63a:	b160      	cbz	r0, 800f656 <LinkedListGetPrevious+0x1c>
 800f63c:	b161      	cbz	r1, 800f658 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800f63e:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800f640:	4281      	cmp	r1, r0
 800f642:	d102      	bne.n	800f64a <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800f644:	2000      	movs	r0, #0
    }

    return curElement;
}
 800f646:	4770      	bx	lr
            curElement = curElement->Next;
 800f648:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f64a:	2800      	cmp	r0, #0
 800f64c:	d0fb      	beq.n	800f646 <LinkedListGetPrevious+0xc>
 800f64e:	6803      	ldr	r3, [r0, #0]
 800f650:	428b      	cmp	r3, r1
 800f652:	d1f9      	bne.n	800f648 <LinkedListGetPrevious+0xe>
 800f654:	4770      	bx	lr
 800f656:	4770      	bx	lr
        return NULL;
 800f658:	4608      	mov	r0, r1
 800f65a:	4770      	bx	lr

0800f65c <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800f65c:	b1b8      	cbz	r0, 800f68e <LinkedListRemove+0x32>
{
 800f65e:	b538      	push	{r3, r4, r5, lr}
 800f660:	460c      	mov	r4, r1
 800f662:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800f664:	b1a9      	cbz	r1, 800f692 <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800f666:	f7ff ffe8 	bl	800f63a <LinkedListGetPrevious>

    if( list->First == element )
 800f66a:	682b      	ldr	r3, [r5, #0]
 800f66c:	42a3      	cmp	r3, r4
 800f66e:	d009      	beq.n	800f684 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800f670:	686b      	ldr	r3, [r5, #4]
 800f672:	42a3      	cmp	r3, r4
 800f674:	d009      	beq.n	800f68a <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800f676:	b108      	cbz	r0, 800f67c <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800f678:	6823      	ldr	r3, [r4, #0]
 800f67a:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800f67c:	2300      	movs	r3, #0
 800f67e:	6023      	str	r3, [r4, #0]

    return true;
 800f680:	2001      	movs	r0, #1
}
 800f682:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800f684:	6823      	ldr	r3, [r4, #0]
 800f686:	602b      	str	r3, [r5, #0]
 800f688:	e7f2      	b.n	800f670 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800f68a:	6068      	str	r0, [r5, #4]
 800f68c:	e7f3      	b.n	800f676 <LinkedListRemove+0x1a>
        return false;
 800f68e:	2000      	movs	r0, #0
}
 800f690:	4770      	bx	lr
        return false;
 800f692:	2000      	movs	r0, #0
 800f694:	e7f5      	b.n	800f682 <LinkedListRemove+0x26>
	...

0800f698 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800f698:	2811      	cmp	r0, #17
 800f69a:	d808      	bhi.n	800f6ae <IsSticky+0x16>
 800f69c:	2301      	movs	r3, #1
 800f69e:	fa03 f000 	lsl.w	r0, r3, r0
 800f6a2:	4b04      	ldr	r3, [pc, #16]	; (800f6b4 <IsSticky+0x1c>)
 800f6a4:	4218      	tst	r0, r3
 800f6a6:	bf14      	ite	ne
 800f6a8:	2001      	movne	r0, #1
 800f6aa:	2000      	moveq	r0, #0
 800f6ac:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800f6ae:	2000      	movs	r0, #0
    }
}
 800f6b0:	4770      	bx	lr
 800f6b2:	bf00      	nop
 800f6b4:	00020720 	.word	0x00020720

0800f6b8 <FreeMacCommandSlot>:
    if( slot == NULL )
 800f6b8:	b130      	cbz	r0, 800f6c8 <FreeMacCommandSlot+0x10>
{
 800f6ba:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800f6bc:	2210      	movs	r2, #16
 800f6be:	2100      	movs	r1, #0
 800f6c0:	f003 ffef 	bl	80136a2 <memset1>
    return true;
 800f6c4:	2001      	movs	r0, #1
}
 800f6c6:	bd08      	pop	{r3, pc}
        return false;
 800f6c8:	2000      	movs	r0, #0
}
 800f6ca:	4770      	bx	lr

0800f6cc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800f6cc:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800f6ce:	4c06      	ldr	r4, [pc, #24]	; (800f6e8 <LoRaMacCommandsInit+0x1c>)
 800f6d0:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	f003 ffe3 	bl	80136a2 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f7ff ff91 	bl	800f604 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f6e2:	2000      	movs	r0, #0
 800f6e4:	bd10      	pop	{r4, pc}
 800f6e6:	bf00      	nop
 800f6e8:	20003b34 	.word	0x20003b34

0800f6ec <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800f6ec:	b301      	cbz	r1, 800f730 <LoRaMacCommandsAddCmd+0x44>
{
 800f6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f0:	4605      	mov	r5, r0
 800f6f2:	4614      	mov	r4, r2
 800f6f4:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800f6f6:	f7ff ff71 	bl	800f5dc <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800f6fa:	4606      	mov	r6, r0
 800f6fc:	b1d0      	cbz	r0, 800f734 <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800f6fe:	4601      	mov	r1, r0
 800f700:	480e      	ldr	r0, [pc, #56]	; (800f73c <LoRaMacCommandsAddCmd+0x50>)
 800f702:	f7ff ff87 	bl	800f614 <LinkedListAdd>
 800f706:	b1b8      	cbz	r0, 800f738 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800f708:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800f70a:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800f70c:	b2a2      	uxth	r2, r4
 800f70e:	4639      	mov	r1, r7
 800f710:	1d70      	adds	r0, r6, #5
 800f712:	f003 ffae 	bl	8013672 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800f716:	4628      	mov	r0, r5
 800f718:	f7ff ffbe 	bl	800f698 <IsSticky>
 800f71c:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800f71e:	4b07      	ldr	r3, [pc, #28]	; (800f73c <LoRaMacCommandsAddCmd+0x50>)
 800f720:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f724:	4414      	add	r4, r2
 800f726:	3401      	adds	r4, #1
 800f728:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800f72c:	2000      	movs	r0, #0
}
 800f72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f730:	2001      	movs	r0, #1
}
 800f732:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800f734:	2002      	movs	r0, #2
 800f736:	e7fa      	b.n	800f72e <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 800f738:	2005      	movs	r0, #5
 800f73a:	e7f8      	b.n	800f72e <LoRaMacCommandsAddCmd+0x42>
 800f73c:	20003b34 	.word	0x20003b34

0800f740 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800f740:	b1a0      	cbz	r0, 800f76c <LoRaMacCommandsRemoveCmd+0x2c>
{
 800f742:	b510      	push	{r4, lr}
 800f744:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800f746:	4601      	mov	r1, r0
 800f748:	480b      	ldr	r0, [pc, #44]	; (800f778 <LoRaMacCommandsRemoveCmd+0x38>)
 800f74a:	f7ff ff87 	bl	800f65c <LinkedListRemove>
 800f74e:	b178      	cbz	r0, 800f770 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800f750:	68a1      	ldr	r1, [r4, #8]
 800f752:	4a09      	ldr	r2, [pc, #36]	; (800f778 <LoRaMacCommandsRemoveCmd+0x38>)
 800f754:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800f758:	1a5b      	subs	r3, r3, r1
 800f75a:	3b01      	subs	r3, #1
 800f75c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800f760:	4620      	mov	r0, r4
 800f762:	f7ff ffa9 	bl	800f6b8 <FreeMacCommandSlot>
 800f766:	b128      	cbz	r0, 800f774 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f768:	2000      	movs	r0, #0
}
 800f76a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f76c:	2001      	movs	r0, #1
}
 800f76e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800f770:	2003      	movs	r0, #3
 800f772:	e7fa      	b.n	800f76a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800f774:	2005      	movs	r0, #5
 800f776:	e7f8      	b.n	800f76a <LoRaMacCommandsRemoveCmd+0x2a>
 800f778:	20003b34 	.word	0x20003b34

0800f77c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f77c:	4b0a      	ldr	r3, [pc, #40]	; (800f7a8 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800f77e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f780:	b120      	cbz	r0, 800f78c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800f782:	7b03      	ldrb	r3, [r0, #12]
 800f784:	b11b      	cbz	r3, 800f78e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800f786:	6800      	ldr	r0, [r0, #0]
 800f788:	e7fa      	b.n	800f780 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f78a:	bd10      	pop	{r4, pc}
 800f78c:	4770      	bx	lr
{
 800f78e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800f790:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800f792:	f7ff ffd5 	bl	800f740 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800f796:	4620      	mov	r0, r4
    while( curElement != NULL )
 800f798:	2800      	cmp	r0, #0
 800f79a:	d0f6      	beq.n	800f78a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800f79c:	7b03      	ldrb	r3, [r0, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d0f6      	beq.n	800f790 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800f7a2:	6800      	ldr	r0, [r0, #0]
 800f7a4:	e7f8      	b.n	800f798 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800f7a6:	bf00      	nop
 800f7a8:	20003b34 	.word	0x20003b34

0800f7ac <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800f7ac:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800f7ae:	4b08      	ldr	r3, [pc, #32]	; (800f7d0 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800f7b0:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f7b2:	e000      	b.n	800f7b6 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800f7b4:	462c      	mov	r4, r5
    while( curElement != NULL )
 800f7b6:	b14c      	cbz	r4, 800f7cc <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
    {
        nexElement = curElement->Next;
 800f7b8:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 800f7ba:	7920      	ldrb	r0, [r4, #4]
 800f7bc:	f7ff ff6c 	bl	800f698 <IsSticky>
 800f7c0:	2800      	cmp	r0, #0
 800f7c2:	d0f7      	beq.n	800f7b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	f7ff ffbb 	bl	800f740 <LoRaMacCommandsRemoveCmd>
 800f7ca:	e7f3      	b.n	800f7b4 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	bd38      	pop	{r3, r4, r5, pc}
 800f7d0:	20003b34 	.word	0x20003b34

0800f7d4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800f7d4:	b128      	cbz	r0, 800f7e2 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800f7d6:	4a04      	ldr	r2, [pc, #16]	; (800f7e8 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800f7d8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800f7dc:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800f7de:	2000      	movs	r0, #0
 800f7e0:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f7e2:	2001      	movs	r0, #1
}
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	20003b34 	.word	0x20003b34

0800f7ec <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800f7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800f7f0:	4b16      	ldr	r3, [pc, #88]	; (800f84c <LoRaMacCommandsSerializeCmds+0x60>)
 800f7f2:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800f7f4:	b32a      	cbz	r2, 800f842 <LoRaMacCommandsSerializeCmds+0x56>
 800f7f6:	4607      	mov	r7, r0
 800f7f8:	4688      	mov	r8, r1
 800f7fa:	4616      	mov	r6, r2
 800f7fc:	b319      	cbz	r1, 800f846 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800f7fe:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800f800:	b194      	cbz	r4, 800f828 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800f802:	1a7a      	subs	r2, r7, r1
 800f804:	68a3      	ldr	r3, [r4, #8]
 800f806:	3301      	adds	r3, #1
 800f808:	429a      	cmp	r2, r3
 800f80a:	d30d      	bcc.n	800f828 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800f80c:	1c4d      	adds	r5, r1, #1
 800f80e:	b2ed      	uxtb	r5, r5
 800f810:	7923      	ldrb	r3, [r4, #4]
 800f812:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800f814:	8922      	ldrh	r2, [r4, #8]
 800f816:	1d61      	adds	r1, r4, #5
 800f818:	1970      	adds	r0, r6, r5
 800f81a:	f003 ff2a 	bl	8013672 <memcpy1>
            itr += curElement->PayloadSize;
 800f81e:	68a3      	ldr	r3, [r4, #8]
 800f820:	441d      	add	r5, r3
 800f822:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800f824:	6824      	ldr	r4, [r4, #0]
 800f826:	e7eb      	b.n	800f800 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800f828:	b12c      	cbz	r4, 800f836 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800f82a:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800f82c:	4620      	mov	r0, r4
 800f82e:	f7ff ff87 	bl	800f740 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800f832:	462c      	mov	r4, r5
 800f834:	e7f8      	b.n	800f828 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800f836:	4640      	mov	r0, r8
 800f838:	f7ff ffcc 	bl	800f7d4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800f83c:	2000      	movs	r0, #0
}
 800f83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f842:	2001      	movs	r0, #1
 800f844:	e7fb      	b.n	800f83e <LoRaMacCommandsSerializeCmds+0x52>
 800f846:	2001      	movs	r0, #1
 800f848:	e7f9      	b.n	800f83e <LoRaMacCommandsSerializeCmds+0x52>
 800f84a:	bf00      	nop
 800f84c:	20003b34 	.word	0x20003b34

0800f850 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 800f850:	4601      	mov	r1, r0
 800f852:	b170      	cbz	r0, 800f872 <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 800f854:	4b08      	ldr	r3, [pc, #32]	; (800f878 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800f856:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 800f858:	2200      	movs	r2, #0
 800f85a:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 800f85c:	b13b      	cbz	r3, 800f86e <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 800f85e:	7b1a      	ldrb	r2, [r3, #12]
 800f860:	b90a      	cbnz	r2, 800f866 <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	e7fa      	b.n	800f85c <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 800f866:	2301      	movs	r3, #1
 800f868:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 800f86a:	2000      	movs	r0, #0
 800f86c:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800f86e:	2000      	movs	r0, #0
 800f870:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f872:	2001      	movs	r0, #1
}
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop
 800f878:	20003b34 	.word	0x20003b34

0800f87c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800f87c:	1e83      	subs	r3, r0, #2
 800f87e:	2b11      	cmp	r3, #17
 800f880:	d80a      	bhi.n	800f898 <LoRaMacCommandsGetCmdSize+0x1c>
 800f882:	e8df f003 	tbb	[pc, r3]
 800f886:	0b23      	.short	0x0b23
 800f888:	110f240d 	.word	0x110f240d
 800f88c:	09171513 	.word	0x09171513
 800f890:	09091909 	.word	0x09091909
 800f894:	211f1d1b 	.word	0x211f1d1b
 800f898:	2000      	movs	r0, #0
 800f89a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800f89c:	2005      	movs	r0, #5
            break;
 800f89e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800f8a0:	2002      	movs	r0, #2
            break;
 800f8a2:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800f8a4:	2001      	movs	r0, #1
            break;
 800f8a6:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800f8a8:	2006      	movs	r0, #6
            break;
 800f8aa:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800f8ac:	2002      	movs	r0, #2
            break;
 800f8ae:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800f8b0:	2002      	movs	r0, #2
            break;
 800f8b2:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800f8b4:	2005      	movs	r0, #5
            break;
 800f8b6:	4770      	bx	lr
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800f8b8:	2006      	movs	r0, #6
            break;
 800f8ba:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800f8bc:	2001      	movs	r0, #1
            break;
 800f8be:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800f8c0:	2005      	movs	r0, #5
            break;
 800f8c2:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800f8c4:	2004      	movs	r0, #4
            break;
 800f8c6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800f8c8:	2004      	movs	r0, #4
            break;
 800f8ca:	4770      	bx	lr
            cidSize = 3;
 800f8cc:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800f8ce:	4770      	bx	lr

0800f8d0 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800f8d0:	4b03      	ldr	r3, [pc, #12]	; (800f8e0 <IncreaseBufferPointer+0x10>)
 800f8d2:	4298      	cmp	r0, r3
 800f8d4:	d001      	beq.n	800f8da <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800f8d6:	3004      	adds	r0, #4
 800f8d8:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f8da:	4802      	ldr	r0, [pc, #8]	; (800f8e4 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	20003d5c 	.word	0x20003d5c
 800f8e4:	20003d4c 	.word	0x20003d4c

0800f8e8 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800f8e8:	b108      	cbz	r0, 800f8ee <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800f8ea:	2000      	movs	r0, #0
 800f8ec:	4770      	bx	lr
        return true;
 800f8ee:	2001      	movs	r0, #1
}
 800f8f0:	4770      	bx	lr

0800f8f2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800f8f2:	2804      	cmp	r0, #4
 800f8f4:	d801      	bhi.n	800f8fa <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	4770      	bx	lr
        return true;
 800f8fa:	2001      	movs	r0, #1
}
 800f8fc:	4770      	bx	lr
	...

0800f900 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800f900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f902:	4606      	mov	r6, r0
 800f904:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f906:	4b0d      	ldr	r3, [pc, #52]	; (800f93c <GetElement+0x3c>)
 800f908:	f893 7020 	ldrb.w	r7, [r3, #32]
 800f90c:	4638      	mov	r0, r7
 800f90e:	f7ff ffeb 	bl	800f8e8 <IsListEmpty>
 800f912:	b970      	cbnz	r0, 800f932 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f914:	2500      	movs	r5, #0
 800f916:	42af      	cmp	r7, r5
 800f918:	d909      	bls.n	800f92e <GetElement+0x2e>
    {
        if( element->Request == request )
 800f91a:	7823      	ldrb	r3, [r4, #0]
 800f91c:	42b3      	cmp	r3, r6
 800f91e:	d00a      	beq.n	800f936 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800f920:	4620      	mov	r0, r4
 800f922:	f7ff ffd5 	bl	800f8d0 <IncreaseBufferPointer>
 800f926:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800f928:	3501      	adds	r5, #1
 800f92a:	b2ed      	uxtb	r5, r5
 800f92c:	e7f3      	b.n	800f916 <GetElement+0x16>
    }

    return NULL;
 800f92e:	2000      	movs	r0, #0
}
 800f930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800f932:	2000      	movs	r0, #0
 800f934:	e7fc      	b.n	800f930 <GetElement+0x30>
            return element;
 800f936:	4620      	mov	r0, r4
 800f938:	e7fa      	b.n	800f930 <GetElement+0x30>
 800f93a:	bf00      	nop
 800f93c:	20003d40 	.word	0x20003d40

0800f940 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800f940:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800f942:	4c08      	ldr	r4, [pc, #32]	; (800f964 <LoRaMacConfirmQueueInit+0x24>)
 800f944:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800f946:	2300      	movs	r3, #0
 800f948:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f94c:	f104 000c 	add.w	r0, r4, #12
 800f950:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800f952:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800f954:	2214      	movs	r2, #20
 800f956:	21ff      	movs	r1, #255	; 0xff
 800f958:	f003 fea3 	bl	80136a2 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f95c:	2301      	movs	r3, #1
 800f95e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800f962:	bd10      	pop	{r4, pc}
 800f964:	20003d40 	.word	0x20003d40

0800f968 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800f968:	b538      	push	{r3, r4, r5, lr}
 800f96a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f96c:	4b0f      	ldr	r3, [pc, #60]	; (800f9ac <LoRaMacConfirmQueueAdd+0x44>)
 800f96e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f972:	f7ff ffbe 	bl	800f8f2 <IsListFull>
 800f976:	b9b8      	cbnz	r0, 800f9a8 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800f978:	4c0c      	ldr	r4, [pc, #48]	; (800f9ac <LoRaMacConfirmQueueAdd+0x44>)
 800f97a:	68a3      	ldr	r3, [r4, #8]
 800f97c:	782a      	ldrb	r2, [r5, #0]
 800f97e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800f980:	68a3      	ldr	r3, [r4, #8]
 800f982:	786a      	ldrb	r2, [r5, #1]
 800f984:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800f986:	68a3      	ldr	r3, [r4, #8]
 800f988:	78ea      	ldrb	r2, [r5, #3]
 800f98a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800f98c:	68a3      	ldr	r3, [r4, #8]
 800f98e:	78aa      	ldrb	r2, [r5, #2]
 800f990:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800f992:	f894 3020 	ldrb.w	r3, [r4, #32]
 800f996:	3301      	adds	r3, #1
 800f998:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800f99c:	68a0      	ldr	r0, [r4, #8]
 800f99e:	f7ff ff97 	bl	800f8d0 <IncreaseBufferPointer>
 800f9a2:	60a0      	str	r0, [r4, #8]

    return true;
 800f9a4:	2001      	movs	r0, #1
}
 800f9a6:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	e7fc      	b.n	800f9a6 <LoRaMacConfirmQueueAdd+0x3e>
 800f9ac:	20003d40 	.word	0x20003d40

0800f9b0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800f9b0:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800f9b2:	4b09      	ldr	r3, [pc, #36]	; (800f9d8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800f9b4:	f893 4020 	ldrb.w	r4, [r3, #32]
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f7ff ff95 	bl	800f8e8 <IsListEmpty>
 800f9be:	b948      	cbnz	r0, 800f9d4 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800f9c0:	4d05      	ldr	r5, [pc, #20]	; (800f9d8 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800f9c2:	3c01      	subs	r4, #1
 800f9c4:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800f9c8:	6868      	ldr	r0, [r5, #4]
 800f9ca:	f7ff ff81 	bl	800f8d0 <IncreaseBufferPointer>
 800f9ce:	6068      	str	r0, [r5, #4]

    return true;
 800f9d0:	2001      	movs	r0, #1
}
 800f9d2:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	e7fc      	b.n	800f9d2 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800f9d8:	20003d40 	.word	0x20003d40

0800f9dc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	4605      	mov	r5, r0
 800f9e0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800f9e2:	4b08      	ldr	r3, [pc, #32]	; (800fa04 <LoRaMacConfirmQueueSetStatus+0x28>)
 800f9e4:	f893 0020 	ldrb.w	r0, [r3, #32]
 800f9e8:	f7ff ff7e 	bl	800f8e8 <IsListEmpty>
 800f9ec:	b948      	cbnz	r0, 800fa02 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800f9ee:	4b05      	ldr	r3, [pc, #20]	; (800fa04 <LoRaMacConfirmQueueSetStatus+0x28>)
 800f9f0:	689a      	ldr	r2, [r3, #8]
 800f9f2:	6859      	ldr	r1, [r3, #4]
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f7ff ff83 	bl	800f900 <GetElement>
        if( element != NULL )
 800f9fa:	b110      	cbz	r0, 800fa02 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800f9fc:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800f9fe:	2201      	movs	r2, #1
 800fa00:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800fa02:	bd38      	pop	{r3, r4, r5, pc}
 800fa04:	20003d40 	.word	0x20003d40

0800fa08 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800fa08:	b510      	push	{r4, lr}
 800fa0a:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fa0c:	4b09      	ldr	r3, [pc, #36]	; (800fa34 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800fa0e:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fa12:	f7ff ff69 	bl	800f8e8 <IsListEmpty>
 800fa16:	b940      	cbnz	r0, 800fa2a <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800fa18:	4b06      	ldr	r3, [pc, #24]	; (800fa34 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800fa1a:	689a      	ldr	r2, [r3, #8]
 800fa1c:	6859      	ldr	r1, [r3, #4]
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f7ff ff6e 	bl	800f900 <GetElement>
        if( element != NULL )
 800fa24:	b118      	cbz	r0, 800fa2e <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800fa26:	7840      	ldrb	r0, [r0, #1]
 800fa28:	e000      	b.n	800fa2c <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa2a:	2001      	movs	r0, #1
}
 800fa2c:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fa2e:	2001      	movs	r0, #1
 800fa30:	e7fc      	b.n	800fa2c <LoRaMacConfirmQueueGetStatus+0x24>
 800fa32:	bf00      	nop
 800fa34:	20003d40 	.word	0x20003d40

0800fa38 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800fa3c:	4b0c      	ldr	r3, [pc, #48]	; (800fa70 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800fa3e:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800fa40:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800fa44:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fa48:	f7ff ff4e 	bl	800f8e8 <IsListEmpty>
 800fa4c:	b150      	cbz	r0, 800fa64 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800fa4e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800fa50:	2301      	movs	r3, #1
 800fa52:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800fa54:	4620      	mov	r0, r4
 800fa56:	f7ff ff3b 	bl	800f8d0 <IncreaseBufferPointer>
 800fa5a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800fa5c:	4b04      	ldr	r3, [pc, #16]	; (800fa70 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	4283      	cmp	r3, r0
 800fa62:	d0f4      	beq.n	800fa4e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800fa64:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800fa66:	78e3      	ldrb	r3, [r4, #3]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1f3      	bne.n	800fa54 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800fa6c:	e7f0      	b.n	800fa50 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800fa6e:	bf00      	nop
 800fa70:	20003d40 	.word	0x20003d40

0800fa74 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800fa74:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800fa76:	4b04      	ldr	r3, [pc, #16]	; (800fa88 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800fa78:	689a      	ldr	r2, [r3, #8]
 800fa7a:	6859      	ldr	r1, [r3, #4]
 800fa7c:	f7ff ff40 	bl	800f900 <GetElement>
 800fa80:	b100      	cbz	r0, 800fa84 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800fa82:	2001      	movs	r0, #1
    }
    return false;
}
 800fa84:	bd08      	pop	{r3, pc}
 800fa86:	bf00      	nop
 800fa88:	20003d40 	.word	0x20003d40

0800fa8c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800fa8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800fa92:	4b16      	ldr	r3, [pc, #88]	; (800faec <LoRaMacConfirmQueueHandleCb+0x60>)
 800fa94:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800fa98:	2400      	movs	r4, #0
 800fa9a:	e00d      	b.n	800fab8 <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800fa9c:	781a      	ldrb	r2, [r3, #0]
 800fa9e:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800faa2:	785a      	ldrb	r2, [r3, #1]
 800faa4:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800faa8:	78db      	ldrb	r3, [r3, #3]
 800faaa:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800faae:	f7ff ff7f 	bl	800f9b0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800fab2:	b1a5      	cbz	r5, 800fade <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 800fab4:	3401      	adds	r4, #1
 800fab6:	b2e4      	uxtb	r4, r4
 800fab8:	42bc      	cmp	r4, r7
 800faba:	d214      	bcs.n	800fae6 <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800fabc:	4b0b      	ldr	r3, [pc, #44]	; (800faec <LoRaMacConfirmQueueHandleCb+0x60>)
 800fabe:	685a      	ldr	r2, [r3, #4]
 800fac0:	7812      	ldrb	r2, [r2, #0]
 800fac2:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800fac4:	685a      	ldr	r2, [r3, #4]
 800fac6:	7852      	ldrb	r2, [r2, #1]
 800fac8:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800face:	2d00      	cmp	r5, #0
 800fad0:	d0e4      	beq.n	800fa9c <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800fad2:	4b06      	ldr	r3, [pc, #24]	; (800faec <LoRaMacConfirmQueueHandleCb+0x60>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	689b      	ldr	r3, [r3, #8]
 800fad8:	4630      	mov	r0, r6
 800fada:	4798      	blx	r3
 800fadc:	e7e7      	b.n	800faae <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800fade:	a801      	add	r0, sp, #4
 800fae0:	f7ff ff42 	bl	800f968 <LoRaMacConfirmQueueAdd>
 800fae4:	e7e6      	b.n	800fab4 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 800fae6:	b003      	add	sp, #12
 800fae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800faea:	bf00      	nop
 800faec:	20003d40 	.word	0x20003d40

0800faf0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800faf0:	4b01      	ldr	r3, [pc, #4]	; (800faf8 <LoRaMacConfirmQueueGetCnt+0x8>)
 800faf2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800faf6:	4770      	bx	lr
 800faf8:	20003d40 	.word	0x20003d40

0800fafc <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800fafc:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fafe:	4b03      	ldr	r3, [pc, #12]	; (800fb0c <LoRaMacConfirmQueueIsFull+0x10>)
 800fb00:	f893 0020 	ldrb.w	r0, [r3, #32]
 800fb04:	f7ff fef5 	bl	800f8f2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800fb08:	bd08      	pop	{r3, pc}
 800fb0a:	bf00      	nop
 800fb0c:	20003d40 	.word	0x20003d40

0800fb10 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800fb10:	b410      	push	{r4}
 800fb12:	9c01      	ldr	r4, [sp, #4]
 800fb14:	9902      	ldr	r1, [sp, #8]
 800fb16:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800fb18:	b1da      	cbz	r2, 800fb52 <PrepareB0+0x42>
 800fb1a:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800fb1c:	2049      	movs	r0, #73	; 0x49
 800fb1e:	7010      	strb	r0, [r2, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 800fb20:	2000      	movs	r0, #0
 800fb22:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800fb24:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800fb26:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800fb28:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800fb2a:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800fb2c:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800fb2e:	0a23      	lsrs	r3, r4, #8
 800fb30:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800fb32:	0c23      	lsrs	r3, r4, #16
 800fb34:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800fb36:	0e24      	lsrs	r4, r4, #24
 800fb38:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800fb3a:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800fb3c:	0a0b      	lsrs	r3, r1, #8
 800fb3e:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800fb40:	0c0b      	lsrs	r3, r1, #16
 800fb42:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800fb44:	0e09      	lsrs	r1, r1, #24
 800fb46:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800fb48:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800fb4a:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800fb4e:	bc10      	pop	{r4}
 800fb50:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fb52:	2009      	movs	r0, #9
 800fb54:	e7fb      	b.n	800fb4e <PrepareB0+0x3e>
	...

0800fb58 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800fb58:	2300      	movs	r3, #0
 800fb5a:	2b01      	cmp	r3, #1
 800fb5c:	d80e      	bhi.n	800fb7c <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800fb5e:	469c      	mov	ip, r3
 800fb60:	4a07      	ldr	r2, [pc, #28]	; (800fb80 <GetKeyAddrItem+0x28>)
 800fb62:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800fb66:	4282      	cmp	r2, r0
 800fb68:	d002      	beq.n	800fb70 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	e7f4      	b.n	800fb5a <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800fb70:	4b03      	ldr	r3, [pc, #12]	; (800fb80 <GetKeyAddrItem+0x28>)
 800fb72:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800fb76:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800fb78:	2000      	movs	r0, #0
 800fb7a:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800fb7c:	200b      	movs	r0, #11
}
 800fb7e:	4770      	bx	lr
 800fb80:	20000104 	.word	0x20000104

0800fb84 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800fb84:	460b      	mov	r3, r1
 800fb86:	2900      	cmp	r1, #0
 800fb88:	d024      	beq.n	800fbd4 <GetLastFcntDown+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800fb8a:	3801      	subs	r0, #1
 800fb8c:	2803      	cmp	r0, #3
 800fb8e:	d823      	bhi.n	800fbd8 <GetLastFcntDown+0x54>
 800fb90:	e8df f000 	tbb	[pc, r0]
 800fb94:	1a120a02 	.word	0x1a120a02
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800fb98:	4a10      	ldr	r2, [pc, #64]	; (800fbdc <GetLastFcntDown+0x58>)
 800fb9a:	6812      	ldr	r2, [r2, #0]
 800fb9c:	6911      	ldr	r1, [r2, #16]
 800fb9e:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 800fba0:	6913      	ldr	r3, [r2, #16]
 800fba2:	6213      	str	r3, [r2, #32]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800fba4:	2000      	movs	r0, #0
            break;
 800fba6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800fba8:	4a0c      	ldr	r2, [pc, #48]	; (800fbdc <GetLastFcntDown+0x58>)
 800fbaa:	6812      	ldr	r2, [r2, #0]
 800fbac:	6951      	ldr	r1, [r2, #20]
 800fbae:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 800fbb0:	6953      	ldr	r3, [r2, #20]
 800fbb2:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800fbb4:	2000      	movs	r0, #0
            break;
 800fbb6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800fbb8:	4a08      	ldr	r2, [pc, #32]	; (800fbdc <GetLastFcntDown+0x58>)
 800fbba:	6812      	ldr	r2, [r2, #0]
 800fbbc:	6991      	ldr	r1, [r2, #24]
 800fbbe:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800fbc0:	6993      	ldr	r3, [r2, #24]
 800fbc2:	6213      	str	r3, [r2, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800fbc4:	2000      	movs	r0, #0
            break;
 800fbc6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800fbc8:	4a04      	ldr	r2, [pc, #16]	; (800fbdc <GetLastFcntDown+0x58>)
 800fbca:	6812      	ldr	r2, [r2, #0]
 800fbcc:	69d2      	ldr	r2, [r2, #28]
 800fbce:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800fbd0:	2000      	movs	r0, #0
            break;
 800fbd2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fbd4:	2009      	movs	r0, #9
 800fbd6:	4770      	bx	lr
    switch( fCntID )
 800fbd8:	2005      	movs	r0, #5
}
 800fbda:	4770      	bx	lr
 800fbdc:	20003d64 	.word	0x20003d64

0800fbe0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800fbe0:	b510      	push	{r4, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800fbea:	a901      	add	r1, sp, #4
 800fbec:	f7ff ffca 	bl	800fb84 <GetLastFcntDown>
 800fbf0:	b948      	cbnz	r0, 800fc06 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800fbf2:	9b01      	ldr	r3, [sp, #4]
 800fbf4:	42a3      	cmp	r3, r4
 800fbf6:	d309      	bcc.n	800fc0c <CheckFCntDown+0x2c>
 800fbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbfc:	d001      	beq.n	800fc02 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800fbfe:	2000      	movs	r0, #0
 800fc00:	e002      	b.n	800fc08 <CheckFCntDown+0x28>
        return true;
 800fc02:	2001      	movs	r0, #1
 800fc04:	e000      	b.n	800fc08 <CheckFCntDown+0x28>
        return false;
 800fc06:	2000      	movs	r0, #0
    }
}
 800fc08:	b002      	add	sp, #8
 800fc0a:	bd10      	pop	{r4, pc}
        return true;
 800fc0c:	2001      	movs	r0, #1
 800fc0e:	e7fb      	b.n	800fc08 <CheckFCntDown+0x28>

0800fc10 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800fc10:	3801      	subs	r0, #1
 800fc12:	2803      	cmp	r0, #3
 800fc14:	d812      	bhi.n	800fc3c <UpdateFCntDown+0x2c>
 800fc16:	e8df f000 	tbb	[pc, r0]
 800fc1a:	0602      	.short	0x0602
 800fc1c:	0e0a      	.short	0x0e0a
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800fc1e:	4b08      	ldr	r3, [pc, #32]	; (800fc40 <UpdateFCntDown+0x30>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	6119      	str	r1, [r3, #16]
            break;
 800fc24:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800fc26:	4b06      	ldr	r3, [pc, #24]	; (800fc40 <UpdateFCntDown+0x30>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	6159      	str	r1, [r3, #20]
            break;
 800fc2c:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800fc2e:	4b04      	ldr	r3, [pc, #16]	; (800fc40 <UpdateFCntDown+0x30>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	6199      	str	r1, [r3, #24]
            break;
 800fc34:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800fc36:	4b02      	ldr	r3, [pc, #8]	; (800fc40 <UpdateFCntDown+0x30>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	20003d64 	.word	0x20003d64

0800fc44 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800fc44:	4b0a      	ldr	r3, [pc, #40]	; (800fc70 <ResetFCnts+0x2c>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	2300      	movs	r3, #0
 800fc4a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800fc4c:	f04f 31ff 	mov.w	r1, #4294967295
 800fc50:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800fc52:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800fc54:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800fc56:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	dd00      	ble.n	800fc5e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
    }
}
 800fc5c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800fc5e:	1d99      	adds	r1, r3, #6
 800fc60:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800fc64:	f04f 30ff 	mov.w	r0, #4294967295
 800fc68:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	e7f4      	b.n	800fc58 <ResetFCnts+0x14>
 800fc6e:	bf00      	nop
 800fc70:	20003d64 	.word	0x20003d64

0800fc74 <ComputeCmacB0>:
{
 800fc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc78:	b088      	sub	sp, #32
 800fc7a:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800fc7c:	b1f0      	cbz	r0, 800fcbc <ComputeCmacB0+0x48>
 800fc7e:	460c      	mov	r4, r1
 800fc80:	4615      	mov	r5, r2
 800fc82:	461a      	mov	r2, r3
 800fc84:	4680      	mov	r8, r0
 800fc86:	b1de      	cbz	r6, 800fcc0 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800fc88:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fc8c:	d81a      	bhi.n	800fcc4 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800fc8e:	af04      	add	r7, sp, #16
 800fc90:	9702      	str	r7, [sp, #8]
 800fc92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc94:	9301      	str	r3, [sp, #4]
 800fc96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800fc9e:	4629      	mov	r1, r5
 800fca0:	4620      	mov	r0, r4
 800fca2:	f7ff ff35 	bl	800fb10 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800fca6:	9600      	str	r6, [sp, #0]
 800fca8:	462b      	mov	r3, r5
 800fcaa:	4622      	mov	r2, r4
 800fcac:	4641      	mov	r1, r8
 800fcae:	4638      	mov	r0, r7
 800fcb0:	f003 fb87 	bl	80133c2 <SecureElementComputeAesCmac>
 800fcb4:	b940      	cbnz	r0, 800fcc8 <ComputeCmacB0+0x54>
}
 800fcb6:	b008      	add	sp, #32
 800fcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fcbc:	2009      	movs	r0, #9
 800fcbe:	e7fa      	b.n	800fcb6 <ComputeCmacB0+0x42>
 800fcc0:	2009      	movs	r0, #9
 800fcc2:	e7f8      	b.n	800fcb6 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800fcc4:	200d      	movs	r0, #13
 800fcc6:	e7f6      	b.n	800fcb6 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fcc8:	200e      	movs	r0, #14
 800fcca:	e7f4      	b.n	800fcb6 <ComputeCmacB0+0x42>

0800fccc <DeriveSessionKey10x>:
{
 800fccc:	b510      	push	{r4, lr}
 800fcce:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800fcd0:	2400      	movs	r4, #0
 800fcd2:	9400      	str	r4, [sp, #0]
 800fcd4:	9401      	str	r4, [sp, #4]
 800fcd6:	9402      	str	r4, [sp, #8]
 800fcd8:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800fcda:	2802      	cmp	r0, #2
 800fcdc:	d003      	beq.n	800fce6 <DeriveSessionKey10x+0x1a>
 800fcde:	2803      	cmp	r0, #3
 800fce0:	d025      	beq.n	800fd2e <DeriveSessionKey10x+0x62>
 800fce2:	200a      	movs	r0, #10
 800fce4:	e021      	b.n	800fd2a <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800fce6:	2401      	movs	r4, #1
 800fce8:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800fcec:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800fcf0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800fcf4:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800fcf8:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800fcfc:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800fd00:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800fd04:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800fd08:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800fd0c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800fd10:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800fd14:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800fd18:	0a1b      	lsrs	r3, r3, #8
 800fd1a:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800fd1e:	4602      	mov	r2, r0
 800fd20:	2101      	movs	r1, #1
 800fd22:	4668      	mov	r0, sp
 800fd24:	f003 fbec 	bl	8013500 <SecureElementDeriveAndStoreKey>
 800fd28:	b928      	cbnz	r0, 800fd36 <DeriveSessionKey10x+0x6a>
}
 800fd2a:	b004      	add	sp, #16
 800fd2c:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800fd2e:	2402      	movs	r4, #2
 800fd30:	f88d 4000 	strb.w	r4, [sp]
            break;
 800fd34:	e7da      	b.n	800fcec <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fd36:	200e      	movs	r0, #14
 800fd38:	e7f7      	b.n	800fd2a <DeriveSessionKey10x+0x5e>

0800fd3a <PayloadEncrypt>:
{
 800fd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd3e:	b088      	sub	sp, #32
 800fd40:	4690      	mov	r8, r2
 800fd42:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d052      	beq.n	800fdee <PayloadEncrypt+0xb4>
 800fd48:	460d      	mov	r5, r1
 800fd4a:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800fd4c:	2600      	movs	r6, #0
 800fd4e:	9604      	str	r6, [sp, #16]
 800fd50:	9605      	str	r6, [sp, #20]
 800fd52:	9606      	str	r6, [sp, #24]
 800fd54:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800fd56:	9600      	str	r6, [sp, #0]
 800fd58:	9601      	str	r6, [sp, #4]
 800fd5a:	9602      	str	r6, [sp, #8]
 800fd5c:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800fd5e:	2701      	movs	r7, #1
 800fd60:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800fd64:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800fd68:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800fd6c:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800fd70:	0a19      	lsrs	r1, r3, #8
 800fd72:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800fd76:	0c19      	lsrs	r1, r3, #16
 800fd78:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800fd7c:	0e1b      	lsrs	r3, r3, #24
 800fd7e:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800fd82:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800fd86:	0a13      	lsrs	r3, r2, #8
 800fd88:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800fd8c:	0c13      	lsrs	r3, r2, #16
 800fd8e:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800fd92:	0e12      	lsrs	r2, r2, #24
 800fd94:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800fd98:	e014      	b.n	800fdc4 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800fd9a:	18f2      	adds	r2, r6, r3
 800fd9c:	5ca0      	ldrb	r0, [r4, r2]
 800fd9e:	f103 0120 	add.w	r1, r3, #32
 800fda2:	4469      	add	r1, sp
 800fda4:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800fda8:	4048      	eors	r0, r1
 800fdaa:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800fdac:	3301      	adds	r3, #1
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	462a      	mov	r2, r5
 800fdb2:	2d10      	cmp	r5, #16
 800fdb4:	bfa8      	it	ge
 800fdb6:	2210      	movge	r2, #16
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	dbee      	blt.n	800fd9a <PayloadEncrypt+0x60>
        size -= 16;
 800fdbc:	3d10      	subs	r5, #16
 800fdbe:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800fdc0:	3610      	adds	r6, #16
 800fdc2:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800fdc4:	2d00      	cmp	r5, #0
 800fdc6:	dd0e      	ble.n	800fde6 <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800fdc8:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800fdcc:	3701      	adds	r7, #1
 800fdce:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800fdd0:	ab04      	add	r3, sp, #16
 800fdd2:	4642      	mov	r2, r8
 800fdd4:	2110      	movs	r1, #16
 800fdd6:	4668      	mov	r0, sp
 800fdd8:	f003 fb18 	bl	801340c <SecureElementAesEncrypt>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d0e6      	beq.n	800fdb0 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fde2:	200e      	movs	r0, #14
 800fde4:	e000      	b.n	800fde8 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800fde6:	2000      	movs	r0, #0
}
 800fde8:	b008      	add	sp, #32
 800fdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fdee:	2009      	movs	r0, #9
 800fdf0:	e7fa      	b.n	800fde8 <PayloadEncrypt+0xae>

0800fdf2 <VerifyCmacB0>:
    if( msg == 0 )
 800fdf2:	b370      	cbz	r0, 800fe52 <VerifyCmacB0+0x60>
{
 800fdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf8:	b0c8      	sub	sp, #288	; 0x120
 800fdfa:	460c      	mov	r4, r1
 800fdfc:	4615      	mov	r5, r2
 800fdfe:	461e      	mov	r6, r3
 800fe00:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800fe02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800fe06:	d826      	bhi.n	800fe56 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800fe08:	af04      	add	r7, sp, #16
 800fe0a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800fe0e:	2100      	movs	r1, #0
 800fe10:	4638      	mov	r0, r7
 800fe12:	f003 fc46 	bl	80136a2 <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800fe16:	9702      	str	r7, [sp, #8]
 800fe18:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800fe1a:	9301      	str	r3, [sp, #4]
 800fe1c:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800fe24:	4632      	mov	r2, r6
 800fe26:	4629      	mov	r1, r5
 800fe28:	4620      	mov	r0, r4
 800fe2a:	f7ff fe71 	bl	800fb10 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800fe2e:	4622      	mov	r2, r4
 800fe30:	4641      	mov	r1, r8
 800fe32:	a808      	add	r0, sp, #32
 800fe34:	f003 fc1d 	bl	8013672 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800fe38:	f104 0110 	add.w	r1, r4, #16
 800fe3c:	462b      	mov	r3, r5
 800fe3e:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800fe40:	b289      	uxth	r1, r1
 800fe42:	4638      	mov	r0, r7
 800fe44:	f003 facc 	bl	80133e0 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800fe48:	b130      	cbz	r0, 800fe58 <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800fe4a:	2801      	cmp	r0, #1
 800fe4c:	d004      	beq.n	800fe58 <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800fe4e:	200e      	movs	r0, #14
 800fe50:	e002      	b.n	800fe58 <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fe52:	2009      	movs	r0, #9
}
 800fe54:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800fe56:	200d      	movs	r0, #13
}
 800fe58:	b048      	add	sp, #288	; 0x120
 800fe5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800fe60 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800fe60:	b188      	cbz	r0, 800fe86 <LoRaMacCryptoInit+0x26>
{
 800fe62:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800fe64:	4c09      	ldr	r4, [pc, #36]	; (800fe8c <LoRaMacCryptoInit+0x2c>)
 800fe66:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800fe68:	2228      	movs	r2, #40	; 0x28
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	f003 fc19 	bl	80136a2 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	2201      	movs	r2, #1
 800fe74:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800fe76:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800fe78:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800fe7a:	2400      	movs	r4, #0
 800fe7c:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800fe7e:	f7ff fee1 	bl	800fc44 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800fe82:	4620      	mov	r0, r4
}
 800fe84:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800fe86:	2008      	movs	r0, #8
}
 800fe88:	4770      	bx	lr
 800fe8a:	bf00      	nop
 800fe8c:	20003d64 	.word	0x20003d64

0800fe90 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800fe90:	4b02      	ldr	r3, [pc, #8]	; (800fe9c <LoRaMacCryptoSetLrWanVersion+0xc>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800fe96:	2000      	movs	r0, #0
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop
 800fe9c:	20003d64 	.word	0x20003d64

0800fea0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800fea0:	b130      	cbz	r0, 800feb0 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800fea2:	4b04      	ldr	r3, [pc, #16]	; (800feb4 <LoRaMacCryptoGetFCntUp+0x14>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	3301      	adds	r3, #1
 800feaa:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800feac:	2000      	movs	r0, #0
 800feae:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800feb0:	2009      	movs	r0, #9
}
 800feb2:	4770      	bx	lr
 800feb4:	20003d64 	.word	0x20003d64

0800feb8 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800feb8:	b530      	push	{r4, r5, lr}
 800feba:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800febc:	2300      	movs	r3, #0
 800febe:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800fec0:	b1f2      	cbz	r2, 800ff00 <LoRaMacCryptoGetFCntDown+0x48>
 800fec2:	460c      	mov	r4, r1
 800fec4:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800fec6:	a901      	add	r1, sp, #4
 800fec8:	f7ff fe5c 	bl	800fb84 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800fecc:	b948      	cbnz	r0, 800fee2 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800fece:	9b01      	ldr	r3, [sp, #4]
 800fed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fed4:	d007      	beq.n	800fee6 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800feda:	2a00      	cmp	r2, #0
 800fedc:	dd05      	ble.n	800feea <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800fede:	4413      	add	r3, r2
 800fee0:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800fee2:	b003      	add	sp, #12
 800fee4:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800fee6:	602c      	str	r4, [r5, #0]
 800fee8:	e7fb      	b.n	800fee2 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800feea:	b132      	cbz	r2, 800fefa <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800feec:	0c1b      	lsrs	r3, r3, #16
 800feee:	041b      	lsls	r3, r3, #16
 800fef0:	4423      	add	r3, r4
 800fef2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800fef6:	602b      	str	r3, [r5, #0]
 800fef8:	e7f3      	b.n	800fee2 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800fefa:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800fefc:	2007      	movs	r0, #7
 800fefe:	e7f0      	b.n	800fee2 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff00:	2009      	movs	r0, #9
 800ff02:	e7ee      	b.n	800fee2 <LoRaMacCryptoGetFCntDown+0x2a>

0800ff04 <LoRaMacCryptoSetMulticastReference>:
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800ff04:	4601      	mov	r1, r0
 800ff06:	b908      	cbnz	r0, 800ff0c <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff08:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ff0a:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	dd01      	ble.n	800ff16 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800ff12:	2000      	movs	r0, #0
 800ff14:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800ff16:	4a06      	ldr	r2, [pc, #24]	; (800ff30 <LoRaMacCryptoSetMulticastReference+0x2c>)
 800ff18:	6812      	ldr	r2, [r2, #0]
 800ff1a:	202c      	movs	r0, #44	; 0x2c
 800ff1c:	fb00 1003 	mla	r0, r0, r3, r1
 800ff20:	f103 0c06 	add.w	ip, r3, #6
 800ff24:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800ff28:	3204      	adds	r2, #4
 800ff2a:	6202      	str	r2, [r0, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	e7ee      	b.n	800ff0e <LoRaMacCryptoSetMulticastReference+0xa>
 800ff30:	20003d64 	.word	0x20003d64

0800ff34 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800ff34:	b1d8      	cbz	r0, 800ff6e <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800ff36:	b510      	push	{r4, lr}
 800ff38:	b082      	sub	sp, #8
 800ff3a:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800ff3c:	4b0f      	ldr	r3, [pc, #60]	; (800ff7c <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	8893      	ldrh	r3, [r2, #4]
 800ff42:	3301      	adds	r3, #1
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800ff48:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ff4a:	f000 fa2e 	bl	80103aa <LoRaMacSerializerJoinRequest>
 800ff4e:	b980      	cbnz	r0, 800ff72 <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800ff50:	4623      	mov	r3, r4
 800ff52:	f853 1b18 	ldr.w	r1, [r3], #24
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	2301      	movs	r3, #1
 800ff5a:	2213      	movs	r2, #19
 800ff5c:	f003 fa31 	bl	80133c2 <SecureElementComputeAesCmac>
 800ff60:	b950      	cbnz	r0, 800ff78 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ff62:	4620      	mov	r0, r4
 800ff64:	f000 fa21 	bl	80103aa <LoRaMacSerializerJoinRequest>
 800ff68:	b120      	cbz	r0, 800ff74 <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ff6a:	2010      	movs	r0, #16
 800ff6c:	e002      	b.n	800ff74 <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ff6e:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800ff70:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ff72:	2010      	movs	r0, #16
}
 800ff74:	b002      	add	sp, #8
 800ff76:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ff78:	200e      	movs	r0, #14
 800ff7a:	e7fb      	b.n	800ff74 <LoRaMacCryptoPrepareJoinRequest+0x40>
 800ff7c:	20003d64 	.word	0x20003d64

0800ff80 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d036      	beq.n	800fff2 <LoRaMacCryptoSecureMessage+0x72>
{
 800ff84:	b530      	push	{r4, r5, lr}
 800ff86:	b085      	sub	sp, #20
 800ff88:	4604      	mov	r4, r0
 800ff8a:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800ff8c:	4b1d      	ldr	r3, [pc, #116]	; (8010004 <LoRaMacCryptoSecureMessage+0x84>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	4283      	cmp	r3, r0
 800ff94:	d82f      	bhi.n	800fff6 <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800ff96:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ff9a:	b342      	cbz	r2, 800ffee <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800ff9c:	2203      	movs	r2, #3
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800ff9e:	42a3      	cmp	r3, r4
 800ffa0:	d209      	bcs.n	800ffb6 <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800ffa2:	9401      	str	r4, [sp, #4]
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	68ab      	ldr	r3, [r5, #8]
 800ffaa:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800ffae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ffb0:	f7ff fec3 	bl	800fd3a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ffb4:	bb10      	cbnz	r0, 800fffc <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	f000 fa2d 	bl	8010416 <LoRaMacSerializerData>
 800ffbc:	b9e8      	cbnz	r0, 800fffa <LoRaMacCryptoSecureMessage+0x7a>
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ffbe:	7929      	ldrb	r1, [r5, #4]
 800ffc0:	3904      	subs	r1, #4
 800ffc2:	462b      	mov	r3, r5
 800ffc4:	f853 0b2c 	ldr.w	r0, [r3], #44
 800ffc8:	9303      	str	r3, [sp, #12]
 800ffca:	9402      	str	r4, [sp, #8]
 800ffcc:	68ab      	ldr	r3, [r5, #8]
 800ffce:	9301      	str	r3, [sp, #4]
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	2202      	movs	r2, #2
 800ffd6:	b289      	uxth	r1, r1
 800ffd8:	f7ff fe4c 	bl	800fc74 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ffdc:	b970      	cbnz	r0, 800fffc <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ffde:	4628      	mov	r0, r5
 800ffe0:	f000 fa19 	bl	8010416 <LoRaMacSerializerData>
 800ffe4:	b960      	cbnz	r0, 8010000 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ffe6:	4b07      	ldr	r3, [pc, #28]	; (8010004 <LoRaMacCryptoSecureMessage+0x84>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800ffec:	e006      	b.n	800fffc <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800ffee:	2202      	movs	r2, #2
 800fff0:	e7d5      	b.n	800ff9e <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fff2:	2009      	movs	r0, #9
}
 800fff4:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800fff6:	2006      	movs	r0, #6
 800fff8:	e000      	b.n	800fffc <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800fffa:	2010      	movs	r0, #16
}
 800fffc:	b005      	add	sp, #20
 800fffe:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010000:	2010      	movs	r0, #16
 8010002:	e7fb      	b.n	800fffc <LoRaMacCryptoSecureMessage+0x7c>
 8010004:	20003d64 	.word	0x20003d64

08010008 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8010008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801000c:	b087      	sub	sp, #28
 801000e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 8010010:	2e00      	cmp	r6, #0
 8010012:	d049      	beq.n	80100a8 <LoRaMacCryptoUnsecureMessage+0xa0>
 8010014:	4605      	mov	r5, r0
 8010016:	4688      	mov	r8, r1
 8010018:	4617      	mov	r7, r2
 801001a:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801001c:	4619      	mov	r1, r3
 801001e:	4610      	mov	r0, r2
 8010020:	f7ff fdde 	bl	800fbe0 <CheckFCntDown>
 8010024:	2800      	cmp	r0, #0
 8010026:	d041      	beq.n	80100ac <LoRaMacCryptoUnsecureMessage+0xa4>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010028:	4630      	mov	r0, r6
 801002a:	f000 f95f 	bl	80102ec <LoRaMacParserData>
 801002e:	2800      	cmp	r0, #0
 8010030:	d141      	bne.n	80100b6 <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8010032:	a905      	add	r1, sp, #20
 8010034:	4628      	mov	r0, r5
 8010036:	f7ff fd8f 	bl	800fb58 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801003a:	4605      	mov	r5, r0
 801003c:	2800      	cmp	r0, #0
 801003e:	d136      	bne.n	80100ae <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8010040:	9b05      	ldr	r3, [sp, #20]
 8010042:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 8010046:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8010048:	68b3      	ldr	r3, [r6, #8]
 801004a:	4543      	cmp	r3, r8
 801004c:	d135      	bne.n	80100ba <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801004e:	7b33      	ldrb	r3, [r6, #12]
 8010050:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8010054:	491a      	ldr	r1, [pc, #104]	; (80100c0 <LoRaMacCryptoUnsecureMessage+0xb8>)
 8010056:	6809      	ldr	r1, [r1, #0]
 8010058:	7889      	ldrb	r1, [r1, #2]
 801005a:	b901      	cbnz	r1, 801005e <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801005c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801005e:	7931      	ldrb	r1, [r6, #4]
 8010060:	3904      	subs	r1, #4
 8010062:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8010064:	9003      	str	r0, [sp, #12]
 8010066:	9402      	str	r4, [sp, #8]
 8010068:	f8cd 8004 	str.w	r8, [sp, #4]
 801006c:	2001      	movs	r0, #1
 801006e:	9000      	str	r0, [sp, #0]
 8010070:	b289      	uxth	r1, r1
 8010072:	6830      	ldr	r0, [r6, #0]
 8010074:	f7ff febd 	bl	800fdf2 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010078:	4605      	mov	r5, r0
 801007a:	b9c0      	cbnz	r0, 80100ae <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801007c:	f896 3020 	ldrb.w	r3, [r6, #32]
 8010080:	b90b      	cbnz	r3, 8010086 <LoRaMacCryptoUnsecureMessage+0x7e>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8010082:	f04f 0902 	mov.w	r9, #2
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8010086:	9401      	str	r4, [sp, #4]
 8010088:	2301      	movs	r3, #1
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	4643      	mov	r3, r8
 801008e:	464a      	mov	r2, r9
 8010090:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8010094:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8010096:	f7ff fe50 	bl	800fd3a <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801009a:	4605      	mov	r5, r0
 801009c:	b938      	cbnz	r0, 80100ae <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 801009e:	4621      	mov	r1, r4
 80100a0:	4638      	mov	r0, r7
 80100a2:	f7ff fdb5 	bl	800fc10 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80100a6:	e002      	b.n	80100ae <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80100a8:	2509      	movs	r5, #9
 80100aa:	e000      	b.n	80100ae <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80100ac:	2506      	movs	r5, #6
}
 80100ae:	4628      	mov	r0, r5
 80100b0:	b007      	add	sp, #28
 80100b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80100b6:	250f      	movs	r5, #15
 80100b8:	e7f9      	b.n	80100ae <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80100ba:	2502      	movs	r5, #2
 80100bc:	e7f7      	b.n	80100ae <LoRaMacCryptoUnsecureMessage+0xa6>
 80100be:	bf00      	nop
 80100c0:	20003d64 	.word	0x20003d64

080100c4 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80100c4:	b9b1      	cbnz	r1, 80100f4 <LoRaMacCryptoDeriveMcRootKey+0x30>
{
 80100c6:	b500      	push	{lr}
 80100c8:	b085      	sub	sp, #20
 80100ca:	468c      	mov	ip, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 80100cc:	2300      	movs	r3, #0
 80100ce:	9300      	str	r3, [sp, #0]
 80100d0:	9301      	str	r3, [sp, #4]
 80100d2:	9302      	str	r3, [sp, #8]
 80100d4:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 80100d6:	2801      	cmp	r0, #1
 80100d8:	d008      	beq.n	80100ec <LoRaMacCryptoDeriveMcRootKey+0x28>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 80100da:	2204      	movs	r2, #4
 80100dc:	4661      	mov	r1, ip
 80100de:	4668      	mov	r0, sp
 80100e0:	f003 fa0e 	bl	8013500 <SecureElementDeriveAndStoreKey>
 80100e4:	b940      	cbnz	r0, 80100f8 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 80100e6:	b005      	add	sp, #20
 80100e8:	f85d fb04 	ldr.w	pc, [sp], #4
        compBase[0] = 0x20;
 80100ec:	2320      	movs	r3, #32
 80100ee:	f88d 3000 	strb.w	r3, [sp]
 80100f2:	e7f2      	b.n	80100da <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80100f4:	200a      	movs	r0, #10
}
 80100f6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80100f8:	200e      	movs	r0, #14
 80100fa:	e7f4      	b.n	80100e6 <LoRaMacCryptoDeriveMcRootKey+0x22>

080100fc <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 80100fc:	2804      	cmp	r0, #4
 80100fe:	d001      	beq.n	8010104 <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010100:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8010102:	4770      	bx	lr
{
 8010104:	b500      	push	{lr}
 8010106:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 8010108:	2300      	movs	r3, #0
 801010a:	9300      	str	r3, [sp, #0]
 801010c:	9301      	str	r3, [sp, #4]
 801010e:	9302      	str	r3, [sp, #8]
 8010110:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8010112:	227f      	movs	r2, #127	; 0x7f
 8010114:	4601      	mov	r1, r0
 8010116:	4668      	mov	r0, sp
 8010118:	f003 f9f2 	bl	8013500 <SecureElementDeriveAndStoreKey>
 801011c:	b910      	cbnz	r0, 8010124 <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 801011e:	b005      	add	sp, #20
 8010120:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010124:	200e      	movs	r0, #14
 8010126:	e7fa      	b.n	801011e <LoRaMacCryptoDeriveMcKEKey+0x22>

08010128 <LoRaMacCryptoSetKey>:
{
 8010128:	b510      	push	{r4, lr}
 801012a:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801012c:	f003 f9a6 	bl	801347c <SecureElementSetKey>
 8010130:	b978      	cbnz	r0, 8010152 <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 8010132:	b104      	cbz	r4, 8010136 <LoRaMacCryptoSetKey+0xe>
}
 8010134:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8010136:	4b09      	ldr	r3, [pc, #36]	; (801015c <LoRaMacCryptoSetKey+0x34>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	4621      	mov	r1, r4
 801013c:	7898      	ldrb	r0, [r3, #2]
 801013e:	f7ff ffc1 	bl	80100c4 <LoRaMacCryptoDeriveMcRootKey>
 8010142:	b940      	cbnz	r0, 8010156 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010144:	2004      	movs	r0, #4
 8010146:	f7ff ffd9 	bl	80100fc <LoRaMacCryptoDeriveMcKEKey>
 801014a:	2800      	cmp	r0, #0
 801014c:	d0f2      	beq.n	8010134 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801014e:	200e      	movs	r0, #14
 8010150:	e7f0      	b.n	8010134 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010152:	200e      	movs	r0, #14
 8010154:	e7ee      	b.n	8010134 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010156:	200e      	movs	r0, #14
 8010158:	e7ec      	b.n	8010134 <LoRaMacCryptoSetKey+0xc>
 801015a:	bf00      	nop
 801015c:	20003d64 	.word	0x20003d64

08010160 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010160:	2a00      	cmp	r2, #0
 8010162:	d064      	beq.n	801022e <LoRaMacCryptoHandleJoinAccept+0xce>
{
 8010164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010166:	b08f      	sub	sp, #60	; 0x3c
 8010168:	4607      	mov	r7, r0
 801016a:	460d      	mov	r5, r1
 801016c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801016e:	2900      	cmp	r1, #0
 8010170:	d05f      	beq.n	8010232 <LoRaMacCryptoHandleJoinAccept+0xd2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8010172:	2600      	movs	r6, #0
 8010174:	9605      	str	r6, [sp, #20]
 8010176:	221d      	movs	r2, #29
 8010178:	4631      	mov	r1, r6
 801017a:	a806      	add	r0, sp, #24
 801017c:	f005 fe2c 	bl	8015dd8 <memset>
    uint8_t versionMinor         = 0;
 8010180:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8010184:	4b2f      	ldr	r3, [pc, #188]	; (8010244 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 801018a:	f10d 0313 	add.w	r3, sp, #19
 801018e:	9302      	str	r3, [sp, #8]
 8010190:	ab05      	add	r3, sp, #20
 8010192:	9301      	str	r3, [sp, #4]
 8010194:	7923      	ldrb	r3, [r4, #4]
 8010196:	9300      	str	r3, [sp, #0]
 8010198:	6823      	ldr	r3, [r4, #0]
 801019a:	4632      	mov	r2, r6
 801019c:	4629      	mov	r1, r5
 801019e:	4638      	mov	r0, r7
 80101a0:	f003 f9ce 	bl	8013540 <SecureElementProcessJoinAccept>
 80101a4:	2800      	cmp	r0, #0
 80101a6:	d146      	bne.n	8010236 <LoRaMacCryptoHandleJoinAccept+0xd6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80101a8:	7922      	ldrb	r2, [r4, #4]
 80101aa:	a905      	add	r1, sp, #20
 80101ac:	6820      	ldr	r0, [r4, #0]
 80101ae:	f003 fa60 	bl	8013672 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80101b2:	4620      	mov	r0, r4
 80101b4:	f000 f848 	bl	8010248 <LoRaMacParserJoinAccept>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d13f      	bne.n	801023c <LoRaMacCryptoHandleJoinAccept+0xdc>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80101bc:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80101be:	79e3      	ldrb	r3, [r4, #7]
 80101c0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80101c4:	7a23      	ldrb	r3, [r4, #8]
 80101c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 80101ca:	4b1e      	ldr	r3, [pc, #120]	; (8010244 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	689a      	ldr	r2, [r3, #8]
 80101d0:	42aa      	cmp	r2, r5
 80101d2:	d035      	beq.n	8010240 <LoRaMacCryptoHandleJoinAccept+0xe0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 80101d4:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 80101d6:	2100      	movs	r1, #0
 80101d8:	f89d 0013 	ldrb.w	r0, [sp, #19]
 80101dc:	f7ff ff72 	bl	80100c4 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80101e0:	bb50      	cbnz	r0, 8010238 <LoRaMacCryptoHandleJoinAccept+0xd8>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 80101e2:	2004      	movs	r0, #4
 80101e4:	f7ff ff8a 	bl	80100fc <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80101e8:	bb30      	cbnz	r0, 8010238 <LoRaMacCryptoHandleJoinAccept+0xd8>
        netID = ( uint32_t )macMsg->NetID[0];
 80101ea:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80101ec:	7aa2      	ldrb	r2, [r4, #10]
 80101ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80101f2:	7ae4      	ldrb	r4, [r4, #11]
 80101f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80101f8:	4633      	mov	r3, r6
 80101fa:	4622      	mov	r2, r4
 80101fc:	4629      	mov	r1, r5
 80101fe:	2003      	movs	r0, #3
 8010200:	f7ff fd64 	bl	800fccc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010204:	b9c0      	cbnz	r0, 8010238 <LoRaMacCryptoHandleJoinAccept+0xd8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8010206:	4633      	mov	r3, r6
 8010208:	4622      	mov	r2, r4
 801020a:	4629      	mov	r1, r5
 801020c:	2002      	movs	r0, #2
 801020e:	f7ff fd5d 	bl	800fccc <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010212:	b988      	cbnz	r0, 8010238 <LoRaMacCryptoHandleJoinAccept+0xd8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8010214:	4b0b      	ldr	r3, [pc, #44]	; (8010244 <LoRaMacCryptoHandleJoinAccept+0xe4>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f89d 2013 	ldrb.w	r2, [sp, #19]
 801021c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 801021e:	2200      	movs	r2, #0
 8010220:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8010222:	f04f 32ff 	mov.w	r2, #4294967295
 8010226:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8010228:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801022a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 801022c:	e004      	b.n	8010238 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 801022e:	2009      	movs	r0, #9
}
 8010230:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010232:	2009      	movs	r0, #9
 8010234:	e000      	b.n	8010238 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010236:	200e      	movs	r0, #14
}
 8010238:	b00f      	add	sp, #60	; 0x3c
 801023a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801023c:	200f      	movs	r0, #15
 801023e:	e7fb      	b.n	8010238 <LoRaMacCryptoHandleJoinAccept+0xd8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8010240:	2003      	movs	r0, #3
 8010242:	e7f9      	b.n	8010238 <LoRaMacCryptoHandleJoinAccept+0xd8>
 8010244:	20003d64 	.word	0x20003d64

08010248 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010248:	2800      	cmp	r0, #0
 801024a:	d049      	beq.n	80102e0 <LoRaMacParserJoinAccept+0x98>
{
 801024c:	b510      	push	{r4, lr}
 801024e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010250:	6801      	ldr	r1, [r0, #0]
 8010252:	2900      	cmp	r1, #0
 8010254:	d046      	beq.n	80102e4 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010256:	f811 3b01 	ldrb.w	r3, [r1], #1
 801025a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801025c:	2203      	movs	r2, #3
 801025e:	3006      	adds	r0, #6
 8010260:	f003 fa07 	bl	8013672 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8010264:	4620      	mov	r0, r4
 8010266:	f850 1b09 	ldr.w	r1, [r0], #9
 801026a:	2203      	movs	r2, #3
 801026c:	3104      	adds	r1, #4
 801026e:	f003 fa00 	bl	8013672 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010272:	6821      	ldr	r1, [r4, #0]
 8010274:	79cb      	ldrb	r3, [r1, #7]
 8010276:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010278:	7a0a      	ldrb	r2, [r1, #8]
 801027a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801027e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010280:	7a4a      	ldrb	r2, [r1, #9]
 8010282:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010286:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010288:	7a8a      	ldrb	r2, [r1, #10]
 801028a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801028e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8010290:	7acb      	ldrb	r3, [r1, #11]
 8010292:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8010294:	7b0b      	ldrb	r3, [r1, #12]
 8010296:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8010298:	7923      	ldrb	r3, [r4, #4]
 801029a:	2b21      	cmp	r3, #33	; 0x21
 801029c:	d018      	beq.n	80102d0 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801029e:	2b11      	cmp	r3, #17
 80102a0:	dc22      	bgt.n	80102e8 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80102a2:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80102a4:	6821      	ldr	r1, [r4, #0]
 80102a6:	f102 0c01 	add.w	ip, r2, #1
 80102aa:	5c8b      	ldrb	r3, [r1, r2]
 80102ac:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80102ae:	1c90      	adds	r0, r2, #2
 80102b0:	f811 c00c 	ldrb.w	ip, [r1, ip]
 80102b4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80102b8:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80102ba:	3203      	adds	r2, #3
 80102bc:	5c08      	ldrb	r0, [r1, r0]
 80102be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80102c2:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80102c4:	5c8a      	ldrb	r2, [r1, r2]
 80102c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80102ca:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80102cc:	2000      	movs	r0, #0
}
 80102ce:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80102d0:	2210      	movs	r2, #16
 80102d2:	310d      	adds	r1, #13
 80102d4:	f104 0012 	add.w	r0, r4, #18
 80102d8:	f003 f9cb 	bl	8013672 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80102dc:	221d      	movs	r2, #29
 80102de:	e7e1      	b.n	80102a4 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 80102e0:	2002      	movs	r0, #2
}
 80102e2:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 80102e4:	2002      	movs	r0, #2
 80102e6:	e7f2      	b.n	80102ce <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 80102e8:	2001      	movs	r0, #1
 80102ea:	e7f0      	b.n	80102ce <LoRaMacParserJoinAccept+0x86>

080102ec <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80102ec:	2800      	cmp	r0, #0
 80102ee:	d058      	beq.n	80103a2 <LoRaMacParserData+0xb6>
{
 80102f0:	b510      	push	{r4, lr}
 80102f2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80102f4:	6801      	ldr	r1, [r0, #0]
 80102f6:	2900      	cmp	r1, #0
 80102f8:	d055      	beq.n	80103a6 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80102fa:	780b      	ldrb	r3, [r1, #0]
 80102fc:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80102fe:	784b      	ldrb	r3, [r1, #1]
 8010300:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010302:	788a      	ldrb	r2, [r1, #2]
 8010304:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010308:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801030a:	78ca      	ldrb	r2, [r1, #3]
 801030c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010310:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010312:	790a      	ldrb	r2, [r1, #4]
 8010314:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010318:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801031a:	794b      	ldrb	r3, [r1, #5]
 801031c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801031e:	798b      	ldrb	r3, [r1, #6]
 8010320:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8010322:	79ca      	ldrb	r2, [r1, #7]
 8010324:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010328:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801032a:	7b02      	ldrb	r2, [r0, #12]
 801032c:	f002 020f 	and.w	r2, r2, #15
 8010330:	3108      	adds	r1, #8
 8010332:	3010      	adds	r0, #16
 8010334:	f003 f99d 	bl	8013672 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010338:	7b23      	ldrb	r3, [r4, #12]
 801033a:	f003 030f 	and.w	r3, r3, #15
 801033e:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8010342:	2200      	movs	r2, #0
 8010344:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 8010348:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801034c:	7922      	ldrb	r2, [r4, #4]
 801034e:	1a11      	subs	r1, r2, r0
 8010350:	2904      	cmp	r1, #4
 8010352:	dc16      	bgt.n	8010382 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8010354:	6822      	ldr	r2, [r4, #0]
 8010356:	7923      	ldrb	r3, [r4, #4]
 8010358:	441a      	add	r2, r3
 801035a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 801035e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8010360:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8010364:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8010368:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801036a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801036e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010372:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8010374:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8010378:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801037c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801037e:	2000      	movs	r0, #0
}
 8010380:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8010382:	6821      	ldr	r1, [r4, #0]
 8010384:	3309      	adds	r3, #9
 8010386:	5c08      	ldrb	r0, [r1, r0]
 8010388:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801038c:	1ad2      	subs	r2, r2, r3
 801038e:	b2d2      	uxtb	r2, r2
 8010390:	3a04      	subs	r2, #4
 8010392:	b2d2      	uxtb	r2, r2
 8010394:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8010398:	4419      	add	r1, r3
 801039a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801039c:	f003 f969 	bl	8013672 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80103a0:	e7d8      	b.n	8010354 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 80103a2:	2002      	movs	r0, #2
}
 80103a4:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 80103a6:	2002      	movs	r0, #2
 80103a8:	e7ea      	b.n	8010380 <LoRaMacParserData+0x94>

080103aa <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80103aa:	b370      	cbz	r0, 801040a <LoRaMacSerializerJoinRequest+0x60>
{
 80103ac:	b510      	push	{r4, lr}
 80103ae:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80103b0:	6803      	ldr	r3, [r0, #0]
 80103b2:	b363      	cbz	r3, 801040e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80103b4:	7902      	ldrb	r2, [r0, #4]
 80103b6:	2a16      	cmp	r2, #22
 80103b8:	d92b      	bls.n	8010412 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80103ba:	7942      	ldrb	r2, [r0, #5]
 80103bc:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80103be:	4601      	mov	r1, r0
 80103c0:	f851 0b06 	ldr.w	r0, [r1], #6
 80103c4:	2208      	movs	r2, #8
 80103c6:	3001      	adds	r0, #1
 80103c8:	f003 f95e 	bl	8013688 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80103cc:	4621      	mov	r1, r4
 80103ce:	f851 0b0e 	ldr.w	r0, [r1], #14
 80103d2:	2208      	movs	r2, #8
 80103d4:	3009      	adds	r0, #9
 80103d6:	f003 f957 	bl	8013688 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80103da:	8ae2      	ldrh	r2, [r4, #22]
 80103dc:	6823      	ldr	r3, [r4, #0]
 80103de:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80103e0:	8ae3      	ldrh	r3, [r4, #22]
 80103e2:	6822      	ldr	r2, [r4, #0]
 80103e4:	0a1b      	lsrs	r3, r3, #8
 80103e6:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80103e8:	69a2      	ldr	r2, [r4, #24]
 80103ea:	6823      	ldr	r3, [r4, #0]
 80103ec:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80103ee:	69a3      	ldr	r3, [r4, #24]
 80103f0:	0a1b      	lsrs	r3, r3, #8
 80103f2:	6822      	ldr	r2, [r4, #0]
 80103f4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80103f6:	8b62      	ldrh	r2, [r4, #26]
 80103f8:	6823      	ldr	r3, [r4, #0]
 80103fa:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80103fc:	7ee2      	ldrb	r2, [r4, #27]
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8010402:	2317      	movs	r3, #23
 8010404:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8010406:	2000      	movs	r0, #0
}
 8010408:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801040a:	2001      	movs	r0, #1
}
 801040c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801040e:	2001      	movs	r0, #1
 8010410:	e7fa      	b.n	8010408 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8010412:	2002      	movs	r0, #2
 8010414:	e7f8      	b.n	8010408 <LoRaMacSerializerJoinRequest+0x5e>

08010416 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010416:	2800      	cmp	r0, #0
 8010418:	d066      	beq.n	80104e8 <LoRaMacSerializerData+0xd2>
{
 801041a:	b538      	push	{r3, r4, r5, lr}
 801041c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801041e:	6801      	ldr	r1, [r0, #0]
 8010420:	2900      	cmp	r1, #0
 8010422:	d063      	beq.n	80104ec <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010424:	7b02      	ldrb	r2, [r0, #12]
 8010426:	f002 020f 	and.w	r2, r2, #15
 801042a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 801042e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010432:	b10b      	cbz	r3, 8010438 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8010434:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8010438:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801043a:	3304      	adds	r3, #4
 801043c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 801043e:	7922      	ldrb	r2, [r4, #4]
 8010440:	429a      	cmp	r2, r3
 8010442:	d355      	bcc.n	80104f0 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8010444:	7963      	ldrb	r3, [r4, #5]
 8010446:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8010448:	68a2      	ldr	r2, [r4, #8]
 801044a:	6823      	ldr	r3, [r4, #0]
 801044c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801044e:	68a3      	ldr	r3, [r4, #8]
 8010450:	0a1b      	lsrs	r3, r3, #8
 8010452:	6822      	ldr	r2, [r4, #0]
 8010454:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8010456:	8962      	ldrh	r2, [r4, #10]
 8010458:	6823      	ldr	r3, [r4, #0]
 801045a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801045c:	7ae2      	ldrb	r2, [r4, #11]
 801045e:	6823      	ldr	r3, [r4, #0]
 8010460:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8010462:	6823      	ldr	r3, [r4, #0]
 8010464:	7b22      	ldrb	r2, [r4, #12]
 8010466:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8010468:	89e2      	ldrh	r2, [r4, #14]
 801046a:	6823      	ldr	r3, [r4, #0]
 801046c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801046e:	89e3      	ldrh	r3, [r4, #14]
 8010470:	6822      	ldr	r2, [r4, #0]
 8010472:	0a1b      	lsrs	r3, r3, #8
 8010474:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8010476:	4621      	mov	r1, r4
 8010478:	f851 0b10 	ldr.w	r0, [r1], #16
 801047c:	7b22      	ldrb	r2, [r4, #12]
 801047e:	f002 020f 	and.w	r2, r2, #15
 8010482:	3008      	adds	r0, #8
 8010484:	f003 f8f5 	bl	8013672 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8010488:	7b23      	ldrb	r3, [r4, #12]
 801048a:	f003 030f 	and.w	r3, r3, #15
 801048e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 8010492:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8010496:	b12a      	cbz	r2, 80104a4 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8010498:	6822      	ldr	r2, [r4, #0]
 801049a:	f894 1020 	ldrb.w	r1, [r4, #32]
 801049e:	5551      	strb	r1, [r2, r5]
 80104a0:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80104a4:	6820      	ldr	r0, [r4, #0]
 80104a6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80104aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80104ac:	4428      	add	r0, r5
 80104ae:	f003 f8e0 	bl	8013672 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80104b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80104b6:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80104b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80104ba:	6821      	ldr	r1, [r4, #0]
 80104bc:	1c5a      	adds	r2, r3, #1
 80104be:	b292      	uxth	r2, r2
 80104c0:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80104c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80104c4:	0a08      	lsrs	r0, r1, #8
 80104c6:	6825      	ldr	r5, [r4, #0]
 80104c8:	1c99      	adds	r1, r3, #2
 80104ca:	b289      	uxth	r1, r1
 80104cc:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80104ce:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 80104d0:	6820      	ldr	r0, [r4, #0]
 80104d2:	1cda      	adds	r2, r3, #3
 80104d4:	b292      	uxth	r2, r2
 80104d6:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80104d8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80104dc:	6821      	ldr	r1, [r4, #0]
 80104de:	3304      	adds	r3, #4
 80104e0:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 80104e2:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80104e4:	2000      	movs	r0, #0
}
 80104e6:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80104e8:	2001      	movs	r0, #1
}
 80104ea:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80104ec:	2001      	movs	r0, #1
 80104ee:	e7fa      	b.n	80104e6 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80104f0:	2002      	movs	r0, #2
 80104f2:	e7f8      	b.n	80104e6 <LoRaMacSerializerData+0xd0>

080104f4 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80104f4:	4b02      	ldr	r3, [pc, #8]	; (8010500 <NvmDataMgmtEvent+0xc>)
 80104f6:	881a      	ldrh	r2, [r3, #0]
 80104f8:	4310      	orrs	r0, r2
 80104fa:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80104fc:	4770      	bx	lr
 80104fe:	bf00      	nop
 8010500:	20003d68 	.word	0x20003d68

08010504 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 8010504:	b508      	push	{r3, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 8010506:	4b06      	ldr	r3, [pc, #24]	; (8010520 <NvmDataMgmtStoreBegin+0x1c>)
 8010508:	881b      	ldrh	r3, [r3, #0]
 801050a:	b11b      	cbz	r3, 8010514 <NvmDataMgmtStoreBegin+0x10>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 801050c:	f7fe f914 	bl	800e738 <LoRaMacStop>
 8010510:	b918      	cbnz	r0, 801051a <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010512:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 8010514:	f06f 0001 	mvn.w	r0, #1
 8010518:	e7fb      	b.n	8010512 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 801051a:	f06f 0002 	mvn.w	r0, #2
 801051e:	e7f8      	b.n	8010512 <NvmDataMgmtStoreBegin+0xe>
 8010520:	20003d68 	.word	0x20003d68

08010524 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010524:	b510      	push	{r4, lr}
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010526:	2400      	movs	r4, #0
 8010528:	4b02      	ldr	r3, [pc, #8]	; (8010534 <NvmDataMgmtStoreEnd+0x10>)
 801052a:	801c      	strh	r4, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 801052c:	f7fe f8fc 	bl	800e728 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010530:	4620      	mov	r0, r4
 8010532:	bd10      	pop	{r4, pc}
 8010534:	20003d68 	.word	0x20003d68

08010538 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 8010538:	2805      	cmp	r0, #5
 801053a:	d005      	beq.n	8010548 <RegionIsActive+0x10>
 801053c:	2808      	cmp	r0, #8
 801053e:	d001      	beq.n	8010544 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8010540:	2000      	movs	r0, #0
        }
    }
}
 8010542:	4770      	bx	lr
    switch( region )
 8010544:	2001      	movs	r0, #1
 8010546:	4770      	bx	lr
 8010548:	2001      	movs	r0, #1
 801054a:	4770      	bx	lr

0801054c <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801054c:	b500      	push	{lr}
 801054e:	b083      	sub	sp, #12
 8010550:	4603      	mov	r3, r0
 8010552:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 8010554:	2200      	movs	r2, #0
 8010556:	9200      	str	r2, [sp, #0]
    switch( region )
 8010558:	2b05      	cmp	r3, #5
 801055a:	d004      	beq.n	8010566 <RegionGetPhyParam+0x1a>
 801055c:	2b08      	cmp	r3, #8
 801055e:	d009      	beq.n	8010574 <RegionGetPhyParam+0x28>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8010560:	9b00      	ldr	r3, [sp, #0]
 8010562:	9301      	str	r3, [sp, #4]
 8010564:	e002      	b.n	801056c <RegionGetPhyParam+0x20>
        EU868_GET_PHY_PARAM( );
 8010566:	f000 fdeb 	bl	8011140 <RegionEU868GetPhyParam>
 801056a:	9001      	str	r0, [sp, #4]
        }
    }
}
 801056c:	9801      	ldr	r0, [sp, #4]
 801056e:	b003      	add	sp, #12
 8010570:	f85d fb04 	ldr.w	pc, [sp], #4
        US915_GET_PHY_PARAM( );
 8010574:	f001 fbd6 	bl	8011d24 <RegionUS915GetPhyParam>
 8010578:	9001      	str	r0, [sp, #4]
 801057a:	e7f7      	b.n	801056c <RegionGetPhyParam+0x20>

0801057c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 801057c:	b508      	push	{r3, lr}
 801057e:	4603      	mov	r3, r0
 8010580:	4608      	mov	r0, r1
    switch( region )
 8010582:	2b05      	cmp	r3, #5
 8010584:	d002      	beq.n	801058c <RegionSetBandTxDone+0x10>
 8010586:	2b08      	cmp	r3, #8
 8010588:	d003      	beq.n	8010592 <RegionSetBandTxDone+0x16>
        default:
        {
            return;
        }
    }
}
 801058a:	bd08      	pop	{r3, pc}
        EU868_SET_BAND_TX_DONE( );
 801058c:	f000 fe94 	bl	80112b8 <RegionEU868SetBandTxDone>
 8010590:	e7fb      	b.n	801058a <RegionSetBandTxDone+0xe>
        US915_SET_BAND_TX_DONE( );
 8010592:	f001 fc9d 	bl	8011ed0 <RegionUS915SetBandTxDone>
 8010596:	e7f8      	b.n	801058a <RegionSetBandTxDone+0xe>

08010598 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8010598:	b508      	push	{r3, lr}
 801059a:	4603      	mov	r3, r0
 801059c:	4608      	mov	r0, r1
    switch( region )
 801059e:	2b05      	cmp	r3, #5
 80105a0:	d002      	beq.n	80105a8 <RegionInitDefaults+0x10>
 80105a2:	2b08      	cmp	r3, #8
 80105a4:	d003      	beq.n	80105ae <RegionInitDefaults+0x16>
        default:
        {
            break;
        }
    }
}
 80105a6:	bd08      	pop	{r3, pc}
        EU868_INIT_DEFAULTS( );
 80105a8:	f000 fea4 	bl	80112f4 <RegionEU868InitDefaults>
 80105ac:	e7fb      	b.n	80105a6 <RegionInitDefaults+0xe>
        US915_INIT_DEFAULTS( );
 80105ae:	f001 fcad 	bl	8011f0c <RegionUS915InitDefaults>
}
 80105b2:	e7f8      	b.n	80105a6 <RegionInitDefaults+0xe>

080105b4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80105b4:	b508      	push	{r3, lr}
 80105b6:	4603      	mov	r3, r0
 80105b8:	4608      	mov	r0, r1
 80105ba:	4611      	mov	r1, r2
    switch( region )
 80105bc:	2b05      	cmp	r3, #5
 80105be:	d003      	beq.n	80105c8 <RegionVerify+0x14>
 80105c0:	2b08      	cmp	r3, #8
 80105c2:	d004      	beq.n	80105ce <RegionVerify+0x1a>
 80105c4:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 80105c6:	bd08      	pop	{r3, pc}
        EU868_VERIFY( );
 80105c8:	f000 ff00 	bl	80113cc <RegionEU868Verify>
 80105cc:	e7fb      	b.n	80105c6 <RegionVerify+0x12>
        US915_VERIFY( );
 80105ce:	f001 fd41 	bl	8012054 <RegionUS915Verify>
 80105d2:	e7f8      	b.n	80105c6 <RegionVerify+0x12>

080105d4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80105d4:	b508      	push	{r3, lr}
 80105d6:	4603      	mov	r3, r0
 80105d8:	4608      	mov	r0, r1
    switch( region )
 80105da:	2b05      	cmp	r3, #5
 80105dc:	d002      	beq.n	80105e4 <RegionApplyCFList+0x10>
 80105de:	2b08      	cmp	r3, #8
 80105e0:	d003      	beq.n	80105ea <RegionApplyCFList+0x16>
        default:
        {
            break;
        }
    }
}
 80105e2:	bd08      	pop	{r3, pc}
        EU868_APPLY_CF_LIST( );
 80105e4:	f001 fac0 	bl	8011b68 <RegionEU868ApplyCFList>
 80105e8:	e7fb      	b.n	80105e2 <RegionApplyCFList+0xe>
        US915_APPLY_CF_LIST( );
 80105ea:	f001 fd6d 	bl	80120c8 <RegionUS915ApplyCFList>
}
 80105ee:	e7f8      	b.n	80105e2 <RegionApplyCFList+0xe>

080105f0 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80105f0:	b508      	push	{r3, lr}
 80105f2:	4603      	mov	r3, r0
 80105f4:	4608      	mov	r0, r1
    switch( region )
 80105f6:	2b05      	cmp	r3, #5
 80105f8:	d003      	beq.n	8010602 <RegionChanMaskSet+0x12>
 80105fa:	2b08      	cmp	r3, #8
 80105fc:	d004      	beq.n	8010608 <RegionChanMaskSet+0x18>
 80105fe:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8010600:	bd08      	pop	{r3, pc}
        EU868_CHAN_MASK_SET( );
 8010602:	f000 ff29 	bl	8011458 <RegionEU868ChanMaskSet>
 8010606:	e7fb      	b.n	8010600 <RegionChanMaskSet+0x10>
        US915_CHAN_MASK_SET( );
 8010608:	f001 fd9c 	bl	8012144 <RegionUS915ChanMaskSet>
 801060c:	e7f8      	b.n	8010600 <RegionChanMaskSet+0x10>

0801060e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801060e:	b508      	push	{r3, lr}
 8010610:	4684      	mov	ip, r0
 8010612:	4608      	mov	r0, r1
 8010614:	4611      	mov	r1, r2
 8010616:	461a      	mov	r2, r3
    switch( region )
 8010618:	f1bc 0f05 	cmp.w	ip, #5
 801061c:	d003      	beq.n	8010626 <RegionComputeRxWindowParameters+0x18>
 801061e:	f1bc 0f08 	cmp.w	ip, #8
 8010622:	d004      	beq.n	801062e <RegionComputeRxWindowParameters+0x20>
        default:
        {
            break;
        }
    }
}
 8010624:	bd08      	pop	{r3, pc}
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8010626:	9b02      	ldr	r3, [sp, #8]
 8010628:	f000 ff34 	bl	8011494 <RegionEU868ComputeRxWindowParameters>
 801062c:	e7fa      	b.n	8010624 <RegionComputeRxWindowParameters+0x16>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801062e:	9b02      	ldr	r3, [sp, #8]
 8010630:	f001 fdca 	bl	80121c8 <RegionUS915ComputeRxWindowParameters>
}
 8010634:	e7f6      	b.n	8010624 <RegionComputeRxWindowParameters+0x16>

08010636 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8010636:	b508      	push	{r3, lr}
 8010638:	4603      	mov	r3, r0
 801063a:	4608      	mov	r0, r1
 801063c:	4611      	mov	r1, r2
    switch( region )
 801063e:	2b05      	cmp	r3, #5
 8010640:	d003      	beq.n	801064a <RegionRxConfig+0x14>
 8010642:	2b08      	cmp	r3, #8
 8010644:	d004      	beq.n	8010650 <RegionRxConfig+0x1a>
 8010646:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 8010648:	bd08      	pop	{r3, pc}
        EU868_RX_CONFIG( );
 801064a:	f000 ff59 	bl	8011500 <RegionEU868RxConfig>
 801064e:	e7fb      	b.n	8010648 <RegionRxConfig+0x12>
        US915_RX_CONFIG( );
 8010650:	f001 fde8 	bl	8012224 <RegionUS915RxConfig>
 8010654:	e7f8      	b.n	8010648 <RegionRxConfig+0x12>

08010656 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010656:	b508      	push	{r3, lr}
 8010658:	4684      	mov	ip, r0
 801065a:	4608      	mov	r0, r1
 801065c:	4611      	mov	r1, r2
 801065e:	461a      	mov	r2, r3
    switch( region )
 8010660:	f1bc 0f05 	cmp.w	ip, #5
 8010664:	d004      	beq.n	8010670 <RegionTxConfig+0x1a>
 8010666:	f1bc 0f08 	cmp.w	ip, #8
 801066a:	d004      	beq.n	8010676 <RegionTxConfig+0x20>
 801066c:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 801066e:	bd08      	pop	{r3, pc}
        EU868_TX_CONFIG( );
 8010670:	f000 ffca 	bl	8011608 <RegionEU868TxConfig>
 8010674:	e7fb      	b.n	801066e <RegionTxConfig+0x18>
        US915_TX_CONFIG( );
 8010676:	f001 fe2f 	bl	80122d8 <RegionUS915TxConfig>
 801067a:	e7f8      	b.n	801066e <RegionTxConfig+0x18>

0801067c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801067c:	b500      	push	{lr}
 801067e:	b083      	sub	sp, #12
 8010680:	4684      	mov	ip, r0
 8010682:	4608      	mov	r0, r1
 8010684:	4611      	mov	r1, r2
 8010686:	461a      	mov	r2, r3
    switch( region )
 8010688:	f1bc 0f05 	cmp.w	ip, #5
 801068c:	d006      	beq.n	801069c <RegionLinkAdrReq+0x20>
 801068e:	f1bc 0f08 	cmp.w	ip, #8
 8010692:	d009      	beq.n	80106a8 <RegionLinkAdrReq+0x2c>
 8010694:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010696:	b003      	add	sp, #12
 8010698:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_LINK_ADR_REQ( );
 801069c:	9b05      	ldr	r3, [sp, #20]
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	9b04      	ldr	r3, [sp, #16]
 80106a2:	f001 f849 	bl	8011738 <RegionEU868LinkAdrReq>
 80106a6:	e7f6      	b.n	8010696 <RegionLinkAdrReq+0x1a>
        US915_LINK_ADR_REQ( );
 80106a8:	9b05      	ldr	r3, [sp, #20]
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	9b04      	ldr	r3, [sp, #16]
 80106ae:	f001 fe8d 	bl	80123cc <RegionUS915LinkAdrReq>
 80106b2:	e7f0      	b.n	8010696 <RegionLinkAdrReq+0x1a>

080106b4 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80106b4:	b508      	push	{r3, lr}
 80106b6:	4603      	mov	r3, r0
 80106b8:	4608      	mov	r0, r1
    switch( region )
 80106ba:	2b05      	cmp	r3, #5
 80106bc:	d003      	beq.n	80106c6 <RegionRxParamSetupReq+0x12>
 80106be:	2b08      	cmp	r3, #8
 80106c0:	d004      	beq.n	80106cc <RegionRxParamSetupReq+0x18>
 80106c2:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 80106c4:	bd08      	pop	{r3, pc}
        EU868_RX_PARAM_SETUP_REQ( );
 80106c6:	f001 f8fb 	bl	80118c0 <RegionEU868RxParamSetupReq>
 80106ca:	e7fb      	b.n	80106c4 <RegionRxParamSetupReq+0x10>
        US915_RX_PARAM_SETUP_REQ( );
 80106cc:	f001 ffc0 	bl	8012650 <RegionUS915RxParamSetupReq>
 80106d0:	e7f8      	b.n	80106c4 <RegionRxParamSetupReq+0x10>

080106d2 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80106d2:	b508      	push	{r3, lr}
 80106d4:	4603      	mov	r3, r0
 80106d6:	4608      	mov	r0, r1
    switch( region )
 80106d8:	2b05      	cmp	r3, #5
 80106da:	d003      	beq.n	80106e4 <RegionNewChannelReq+0x12>
 80106dc:	2b08      	cmp	r3, #8
 80106de:	d004      	beq.n	80106ea <RegionNewChannelReq+0x18>
 80106e0:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 80106e2:	bd08      	pop	{r3, pc}
        EU868_NEW_CHANNEL_REQ( );
 80106e4:	f001 fa81 	bl	8011bea <RegionEU868NewChannelReq>
 80106e8:	e7fb      	b.n	80106e2 <RegionNewChannelReq+0x10>
        US915_NEW_CHANNEL_REQ( );
 80106ea:	f001 ffdc 	bl	80126a6 <RegionUS915NewChannelReq>
 80106ee:	e7f8      	b.n	80106e2 <RegionNewChannelReq+0x10>

080106f0 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80106f0:	b508      	push	{r3, lr}
 80106f2:	4603      	mov	r3, r0
 80106f4:	4608      	mov	r0, r1
    switch( region )
 80106f6:	2b05      	cmp	r3, #5
 80106f8:	d003      	beq.n	8010702 <RegionTxParamSetupReq+0x12>
 80106fa:	2b08      	cmp	r3, #8
 80106fc:	d004      	beq.n	8010708 <RegionTxParamSetupReq+0x18>
 80106fe:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 8010700:	bd08      	pop	{r3, pc}
        EU868_TX_PARAM_SETUP_REQ( );
 8010702:	f001 f901 	bl	8011908 <RegionEU868TxParamSetupReq>
 8010706:	e7fb      	b.n	8010700 <RegionTxParamSetupReq+0x10>
        US915_TX_PARAM_SETUP_REQ( );
 8010708:	f001 ffd0 	bl	80126ac <RegionUS915TxParamSetupReq>
 801070c:	e7f8      	b.n	8010700 <RegionTxParamSetupReq+0x10>

0801070e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801070e:	b508      	push	{r3, lr}
 8010710:	4603      	mov	r3, r0
 8010712:	4608      	mov	r0, r1
    switch( region )
 8010714:	2b05      	cmp	r3, #5
 8010716:	d003      	beq.n	8010720 <RegionDlChannelReq+0x12>
 8010718:	2b08      	cmp	r3, #8
 801071a:	d004      	beq.n	8010726 <RegionDlChannelReq+0x18>
 801071c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801071e:	bd08      	pop	{r3, pc}
        EU868_DL_CHANNEL_REQ( );
 8010720:	f001 f8f6 	bl	8011910 <RegionEU868DlChannelReq>
 8010724:	e7fb      	b.n	801071e <RegionDlChannelReq+0x10>
        US915_DL_CHANNEL_REQ( );
 8010726:	f001 ffc4 	bl	80126b2 <RegionUS915DlChannelReq>
 801072a:	e7f8      	b.n	801071e <RegionDlChannelReq+0x10>

0801072c <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801072c:	b508      	push	{r3, lr}
 801072e:	4603      	mov	r3, r0
 8010730:	4608      	mov	r0, r1
 8010732:	4611      	mov	r1, r2
    switch( region )
 8010734:	2b05      	cmp	r3, #5
 8010736:	d003      	beq.n	8010740 <RegionAlternateDr+0x14>
 8010738:	2b08      	cmp	r3, #8
 801073a:	d004      	beq.n	8010746 <RegionAlternateDr+0x1a>
 801073c:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 801073e:	bd08      	pop	{r3, pc}
        EU868_ALTERNATE_DR( );
 8010740:	f001 f90e 	bl	8011960 <RegionEU868AlternateDr>
 8010744:	e7fb      	b.n	801073e <RegionAlternateDr+0x12>
        US915_ALTERNATE_DR( );
 8010746:	f001 ffb7 	bl	80126b8 <RegionUS915AlternateDr>
 801074a:	e7f8      	b.n	801073e <RegionAlternateDr+0x12>

0801074c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801074c:	b508      	push	{r3, lr}
 801074e:	4684      	mov	ip, r0
 8010750:	4608      	mov	r0, r1
 8010752:	4611      	mov	r1, r2
 8010754:	461a      	mov	r2, r3
    switch( region )
 8010756:	f1bc 0f05 	cmp.w	ip, #5
 801075a:	d004      	beq.n	8010766 <RegionNextChannel+0x1a>
 801075c:	f1bc 0f08 	cmp.w	ip, #8
 8010760:	d005      	beq.n	801076e <RegionNextChannel+0x22>
 8010762:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 8010764:	bd08      	pop	{r3, pc}
        EU868_NEXT_CHANNEL( );
 8010766:	9b02      	ldr	r3, [sp, #8]
 8010768:	f001 f8fc 	bl	8011964 <RegionEU868NextChannel>
 801076c:	e7fa      	b.n	8010764 <RegionNextChannel+0x18>
        US915_NEXT_CHANNEL( );
 801076e:	9b02      	ldr	r3, [sp, #8]
 8010770:	f001 ffc4 	bl	80126fc <RegionUS915NextChannel>
 8010774:	e7f6      	b.n	8010764 <RegionNextChannel+0x18>

08010776 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8010776:	b508      	push	{r3, lr}
 8010778:	4684      	mov	ip, r0
 801077a:	4608      	mov	r0, r1
 801077c:	4611      	mov	r1, r2
 801077e:	461a      	mov	r2, r3
    switch( region )
 8010780:	f1bc 0f05 	cmp.w	ip, #5
 8010784:	d004      	beq.n	8010790 <RegionApplyDrOffset+0x1a>
 8010786:	f1bc 0f08 	cmp.w	ip, #8
 801078a:	d004      	beq.n	8010796 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 801078c:	b2c8      	uxtb	r0, r1
 801078e:	e001      	b.n	8010794 <RegionApplyDrOffset+0x1e>
        EU868_APPLY_DR_OFFSET( );
 8010790:	f001 fa56 	bl	8011c40 <RegionEU868ApplyDrOffset>
        }
    }
}
 8010794:	bd08      	pop	{r3, pc}
        US915_APPLY_DR_OFFSET( );
 8010796:	f002 f85f 	bl	8012858 <RegionUS915ApplyDrOffset>
 801079a:	e7fb      	b.n	8010794 <RegionApplyDrOffset+0x1e>

0801079c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 801079c:	4800      	ldr	r0, [pc, #0]	; (80107a0 <RegionGetVersion+0x4>)
 801079e:	4770      	bx	lr
 80107a0:	02010001 	.word	0x02010001

080107a4 <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80107a4:	468c      	mov	ip, r1
 80107a6:	b1a9      	cbz	r1, 80107d4 <FindAvailable125kHzChannels+0x30>
 80107a8:	b1b2      	cbz	r2, 80107d8 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 80107aa:	2300      	movs	r3, #0
 80107ac:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80107ae:	e001      	b.n	80107b4 <FindAvailable125kHzChannels+0x10>
 80107b0:	3301      	adds	r3, #1
 80107b2:	b2db      	uxtb	r3, r3
 80107b4:	2b07      	cmp	r3, #7
 80107b6:	d80b      	bhi.n	80107d0 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80107b8:	fa40 f103 	asr.w	r1, r0, r3
 80107bc:	f011 0f01 	tst.w	r1, #1
 80107c0:	d0f6      	beq.n	80107b0 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80107c2:	7811      	ldrb	r1, [r2, #0]
 80107c4:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80107c8:	7811      	ldrb	r1, [r2, #0]
 80107ca:	3101      	adds	r1, #1
 80107cc:	7011      	strb	r1, [r2, #0]
 80107ce:	e7ef      	b.n	80107b0 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 80107d0:	2000      	movs	r0, #0
 80107d2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80107d4:	2003      	movs	r0, #3
 80107d6:	4770      	bx	lr
 80107d8:	2003      	movs	r0, #3
}
 80107da:	4770      	bx	lr

080107dc <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80107dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107de:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 80107e0:	2300      	movs	r3, #0
 80107e2:	9302      	str	r3, [sp, #8]
 80107e4:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 80107e6:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 80107ea:	2800      	cmp	r0, #0
 80107ec:	d03e      	beq.n	801086c <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 80107ee:	460d      	mov	r5, r1
 80107f0:	4617      	mov	r7, r2
 80107f2:	4606      	mov	r6, r0
 80107f4:	2900      	cmp	r1, #0
 80107f6:	d03b      	beq.n	8010870 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 80107f8:	2a00      	cmp	r2, #0
 80107fa:	d03b      	beq.n	8010874 <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80107fc:	780c      	ldrb	r4, [r1, #0]
 80107fe:	e017      	b.n	8010830 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8010800:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 8010804:	0a00      	lsrs	r0, r0, #8
 8010806:	e019      	b.n	801083c <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8010808:	3901      	subs	r1, #1
 801080a:	2000      	movs	r0, #0
 801080c:	f002 ff24 	bl	8013658 <randr>
 8010810:	f100 0310 	add.w	r3, r0, #16
 8010814:	eb0d 0003 	add.w	r0, sp, r3
 8010818:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 801081c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010820:	703b      	strb	r3, [r7, #0]
 8010822:	e016      	b.n	8010852 <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8010824:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010828:	b9cb      	cbnz	r3, 801085e <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 801082a:	782a      	ldrb	r2, [r5, #0]
 801082c:	42a2      	cmp	r2, r4
 801082e:	d016      	beq.n	801085e <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8010830:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 8010832:	f014 0f01 	tst.w	r4, #1
 8010836:	d1e3      	bne.n	8010800 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8010838:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801083c:	f10d 0207 	add.w	r2, sp, #7
 8010840:	a902      	add	r1, sp, #8
 8010842:	f7ff ffaf 	bl	80107a4 <FindAvailable125kHzChannels>
 8010846:	2803      	cmp	r0, #3
 8010848:	d00b      	beq.n	8010862 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 801084a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801084e:	2900      	cmp	r1, #0
 8010850:	d1da      	bne.n	8010808 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 8010852:	3401      	adds	r4, #1
 8010854:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 8010856:	2c07      	cmp	r4, #7
 8010858:	d9e4      	bls.n	8010824 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 801085a:	2400      	movs	r4, #0
 801085c:	e7e2      	b.n	8010824 <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 801085e:	b913      	cbnz	r3, 8010866 <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8010860:	2003      	movs	r0, #3
}
 8010862:	b005      	add	sp, #20
 8010864:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 8010866:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 8010868:	2000      	movs	r0, #0
 801086a:	e7fa      	b.n	8010862 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801086c:	2003      	movs	r0, #3
 801086e:	e7f8      	b.n	8010862 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 8010870:	2003      	movs	r0, #3
 8010872:	e7f6      	b.n	8010862 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 8010874:	2003      	movs	r0, #3
 8010876:	e7f4      	b.n	8010862 <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

08010878 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 8010878:	fb02 1000 	mla	r0, r2, r0, r1
 801087c:	4770      	bx	lr

0801087e <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801087e:	b082      	sub	sp, #8
 8010880:	f10d 0c08 	add.w	ip, sp, #8
 8010884:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 8010888:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 801088a:	b971      	cbnz	r1, 80108aa <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801088c:	4613      	mov	r3, r2
 801088e:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 8010892:	d306      	bcc.n	80108a2 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8010894:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8010898:	4293      	cmp	r3, r2
 801089a:	d80a      	bhi.n	80108b2 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 801089c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108a0:	e000      	b.n	80108a4 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80108a2:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80108a4:	4298      	cmp	r0, r3
 80108a6:	bf38      	it	cc
 80108a8:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80108aa:	b900      	cbnz	r0, 80108ae <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 80108ac:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 80108ae:	b002      	add	sp, #8
 80108b0:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80108b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80108b6:	e7f5      	b.n	80108a4 <GetDutyCycle+0x26>

080108b8 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80108b8:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 80108ba:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 80108bc:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 80108be:	e001      	b.n	80108c4 <CountChannels+0xc>
 80108c0:	3301      	adds	r3, #1
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	428b      	cmp	r3, r1
 80108c6:	d207      	bcs.n	80108d8 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80108c8:	2201      	movs	r2, #1
 80108ca:	409a      	lsls	r2, r3
 80108cc:	ea32 020c 	bics.w	r2, r2, ip
 80108d0:	d1f6      	bne.n	80108c0 <CountChannels+0x8>
        {
            nbActiveBits++;
 80108d2:	3001      	adds	r0, #1
 80108d4:	b2c0      	uxtb	r0, r0
 80108d6:	e7f3      	b.n	80108c0 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 80108d8:	4770      	bx	lr
	...

080108dc <SetMaxTimeCredits>:
{
 80108dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80108e0:	b089      	sub	sp, #36	; 0x24
 80108e2:	4604      	mov	r4, r0
 80108e4:	460e      	mov	r6, r1
 80108e6:	ad02      	add	r5, sp, #8
 80108e8:	e885 000c 	stmia.w	r5, {r2, r3}
 80108ec:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 80108f0:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80108f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80108f8:	f004 ff26 	bl	8015748 <SysTimeToMs>
 80108fc:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 80108fe:	2300      	movs	r3, #0
 8010900:	9304      	str	r3, [sp, #16]
 8010902:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8010904:	e895 000c 	ldmia.w	r5, {r2, r3}
 8010908:	4631      	mov	r1, r6
 801090a:	4620      	mov	r0, r4
 801090c:	f7ff ffb7 	bl	801087e <GetDutyCycle>
 8010910:	4605      	mov	r5, r0
    if( joined == false )
 8010912:	2e00      	cmp	r6, #0
 8010914:	d14c      	bne.n	80109b0 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8010916:	2864      	cmp	r0, #100	; 0x64
 8010918:	d025      	beq.n	8010966 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801091a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801091e:	d025      	beq.n	801096c <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8010920:	4e27      	ldr	r6, [pc, #156]	; (80109c0 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8010922:	68a1      	ldr	r1, [r4, #8]
 8010924:	a806      	add	r0, sp, #24
 8010926:	f004 ff2f 	bl	8015788 <SysTimeFromMs>
 801092a:	9b07      	ldr	r3, [sp, #28]
 801092c:	9300      	str	r3, [sp, #0]
 801092e:	9b06      	ldr	r3, [sp, #24]
 8010930:	aa02      	add	r2, sp, #8
 8010932:	ca06      	ldmia	r2, {r1, r2}
 8010934:	a804      	add	r0, sp, #16
 8010936:	f004 fe8e 	bl	8015656 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801093a:	f1b8 0f00 	cmp.w	r8, #0
 801093e:	d102      	bne.n	8010946 <SetMaxTimeCredits+0x6a>
 8010940:	f1b9 0f00 	cmp.w	r9, #0
 8010944:	d002      	beq.n	801094c <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 8010946:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8010948:	42b3      	cmp	r3, r6
 801094a:	d012      	beq.n	8010972 <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 801094c:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801094e:	9b02      	ldr	r3, [sp, #8]
 8010950:	4a1c      	ldr	r2, [pc, #112]	; (80109c4 <SetMaxTimeCredits+0xe8>)
 8010952:	4293      	cmp	r3, r2
 8010954:	d812      	bhi.n	801097c <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 8010956:	6863      	ldr	r3, [r4, #4]
 8010958:	b903      	cbnz	r3, 801095c <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 801095a:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 801095c:	6126      	str	r6, [r4, #16]
}
 801095e:	4628      	mov	r0, r5
 8010960:	b009      	add	sp, #36	; 0x24
 8010962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 8010966:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8010968:	4e17      	ldr	r6, [pc, #92]	; (80109c8 <SetMaxTimeCredits+0xec>)
 801096a:	e7da      	b.n	8010922 <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 801096c:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801096e:	4e17      	ldr	r6, [pc, #92]	; (80109cc <SetMaxTimeCredits+0xf0>)
 8010970:	e7d7      	b.n	8010922 <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 8010972:	9a04      	ldr	r2, [sp, #16]
 8010974:	4b16      	ldr	r3, [pc, #88]	; (80109d0 <SetMaxTimeCredits+0xf4>)
 8010976:	429a      	cmp	r2, r3
 8010978:	d9ed      	bls.n	8010956 <SetMaxTimeCredits+0x7a>
 801097a:	e7e7      	b.n	801094c <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801097c:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8010980:	3b30      	subs	r3, #48	; 0x30
 8010982:	4a14      	ldr	r2, [pc, #80]	; (80109d4 <SetMaxTimeCredits+0xf8>)
 8010984:	fba2 2303 	umull	r2, r3, r2, r3
 8010988:	0c1b      	lsrs	r3, r3, #16
 801098a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801098c:	4a12      	ldr	r2, [pc, #72]	; (80109d8 <SetMaxTimeCredits+0xfc>)
 801098e:	fb02 f303 	mul.w	r3, r2, r3
 8010992:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8010994:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8010998:	3330      	adds	r3, #48	; 0x30
 801099a:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 801099c:	2300      	movs	r3, #0
 801099e:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80109a2:	ab04      	add	r3, sp, #16
 80109a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80109a8:	f004 fece 	bl	8015748 <SysTimeToMs>
 80109ac:	60a0      	str	r0, [r4, #8]
 80109ae:	e7d2      	b.n	8010956 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 80109b0:	f1b8 0f00 	cmp.w	r8, #0
 80109b4:	d102      	bne.n	80109bc <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 80109b6:	4e04      	ldr	r6, [pc, #16]	; (80109c8 <SetMaxTimeCredits+0xec>)
 80109b8:	60e6      	str	r6, [r4, #12]
 80109ba:	e7cc      	b.n	8010956 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80109bc:	4e02      	ldr	r6, [pc, #8]	; (80109c8 <SetMaxTimeCredits+0xec>)
 80109be:	e7ca      	b.n	8010956 <SetMaxTimeCredits+0x7a>
 80109c0:	02932e00 	.word	0x02932e00
 80109c4:	0001ec2f 	.word	0x0001ec2f
 80109c8:	001b7740 	.word	0x001b7740
 80109cc:	0112a880 	.word	0x0112a880
 80109d0:	0001517f 	.word	0x0001517f
 80109d4:	c22e4507 	.word	0xc22e4507
 80109d8:	00015180 	.word	0x00015180

080109dc <UpdateTimeCredits>:
{
 80109dc:	b570      	push	{r4, r5, r6, lr}
 80109de:	b082      	sub	sp, #8
 80109e0:	4604      	mov	r4, r0
 80109e2:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80109e4:	9301      	str	r3, [sp, #4]
 80109e6:	9200      	str	r2, [sp, #0]
 80109e8:	ab06      	add	r3, sp, #24
 80109ea:	cb0c      	ldmia	r3, {r2, r3}
 80109ec:	f7ff ff76 	bl	80108dc <SetMaxTimeCredits>
 80109f0:	4605      	mov	r5, r0
    if( joined == true )
 80109f2:	b94e      	cbnz	r6, 8010a08 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 80109f4:	68e2      	ldr	r2, [r4, #12]
 80109f6:	6923      	ldr	r3, [r4, #16]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d900      	bls.n	80109fe <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 80109fc:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 80109fe:	9b08      	ldr	r3, [sp, #32]
 8010a00:	6063      	str	r3, [r4, #4]
}
 8010a02:	4628      	mov	r0, r5
 8010a04:	b002      	add	sp, #8
 8010a06:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8010a08:	6860      	ldr	r0, [r4, #4]
 8010a0a:	f004 ff1d 	bl	8015848 <UTIL_TIMER_GetElapsedTime>
 8010a0e:	68e3      	ldr	r3, [r4, #12]
 8010a10:	4403      	add	r3, r0
 8010a12:	60e3      	str	r3, [r4, #12]
 8010a14:	e7ee      	b.n	80109f4 <UpdateTimeCredits+0x18>

08010a16 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8010a16:	4288      	cmp	r0, r1
 8010a18:	db03      	blt.n	8010a22 <RegionCommonValueInRange+0xc>
 8010a1a:	4290      	cmp	r0, r2
 8010a1c:	dd03      	ble.n	8010a26 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 8010a1e:	2000      	movs	r0, #0
 8010a20:	4770      	bx	lr
 8010a22:	2000      	movs	r0, #0
 8010a24:	4770      	bx	lr
        return 1;
 8010a26:	2001      	movs	r0, #1
}
 8010a28:	4770      	bx	lr

08010a2a <RegionCommonChanVerifyDr>:
{
 8010a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a2e:	4682      	mov	sl, r0
 8010a30:	460e      	mov	r6, r1
 8010a32:	4690      	mov	r8, r2
 8010a34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8010a38:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	4640      	mov	r0, r8
 8010a40:	f7ff ffe9 	bl	8010a16 <RegionCommonValueInRange>
 8010a44:	b338      	cbz	r0, 8010a96 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8010a46:	2500      	movs	r5, #0
 8010a48:	462f      	mov	r7, r5
 8010a4a:	e01e      	b.n	8010a8a <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8010a4c:	3401      	adds	r4, #1
 8010a4e:	b2e4      	uxtb	r4, r4
 8010a50:	2c0f      	cmp	r4, #15
 8010a52:	d816      	bhi.n	8010a82 <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8010a54:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8010a58:	4123      	asrs	r3, r4
 8010a5a:	f013 0f01 	tst.w	r3, #1
 8010a5e:	d0f5      	beq.n	8010a4c <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8010a60:	193b      	adds	r3, r7, r4
 8010a62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010a66:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8010a6a:	7a19      	ldrb	r1, [r3, #8]
 8010a6c:	090a      	lsrs	r2, r1, #4
 8010a6e:	f001 010f 	and.w	r1, r1, #15
 8010a72:	4640      	mov	r0, r8
 8010a74:	f7ff ffcf 	bl	8010a16 <RegionCommonValueInRange>
 8010a78:	2801      	cmp	r0, #1
 8010a7a:	d1e7      	bne.n	8010a4c <RegionCommonChanVerifyDr+0x22>
                    return true;
 8010a7c:	2001      	movs	r0, #1
}
 8010a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8010a82:	3710      	adds	r7, #16
 8010a84:	b2ff      	uxtb	r7, r7
 8010a86:	3501      	adds	r5, #1
 8010a88:	b2ed      	uxtb	r5, r5
 8010a8a:	4557      	cmp	r7, sl
 8010a8c:	d201      	bcs.n	8010a92 <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 8010a8e:	2400      	movs	r4, #0
 8010a90:	e7de      	b.n	8010a50 <RegionCommonChanVerifyDr+0x26>
    return false;
 8010a92:	2000      	movs	r0, #0
 8010a94:	e7f3      	b.n	8010a7e <RegionCommonChanVerifyDr+0x54>
        return false;
 8010a96:	2000      	movs	r0, #0
 8010a98:	e7f1      	b.n	8010a7e <RegionCommonChanVerifyDr+0x54>

08010a9a <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 8010a9a:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8010a9e:	0913      	lsrs	r3, r2, #4
 8010aa0:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 8010aa4:	d30e      	bcc.n	8010ac4 <RegionCommonChanDisable+0x2a>
 8010aa6:	4291      	cmp	r1, r2
 8010aa8:	d20e      	bcs.n	8010ac8 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8010aaa:	f001 010f 	and.w	r1, r1, #15
 8010aae:	2301      	movs	r3, #1
 8010ab0:	fa03 f101 	lsl.w	r1, r3, r1
 8010ab4:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8010ab8:	ea22 0101 	bic.w	r1, r2, r1
 8010abc:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	4770      	bx	lr
        return false;
 8010ac4:	2000      	movs	r0, #0
 8010ac6:	4770      	bx	lr
 8010ac8:	2000      	movs	r0, #0
}
 8010aca:	4770      	bx	lr

08010acc <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8010acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8010ace:	b188      	cbz	r0, 8010af4 <RegionCommonCountChannels+0x28>
 8010ad0:	460c      	mov	r4, r1
 8010ad2:	4616      	mov	r6, r2
 8010ad4:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 8010ad6:	2500      	movs	r5, #0
 8010ad8:	e008      	b.n	8010aec <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8010ada:	2110      	movs	r1, #16
 8010adc:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8010ae0:	f7ff feea 	bl	80108b8 <CountChannels>
 8010ae4:	4405      	add	r5, r0
 8010ae6:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8010ae8:	3401      	adds	r4, #1
 8010aea:	b2e4      	uxtb	r4, r4
 8010aec:	42b4      	cmp	r4, r6
 8010aee:	d3f4      	bcc.n	8010ada <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 8010af0:	4628      	mov	r0, r5
 8010af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8010af4:	2500      	movs	r5, #0
 8010af6:	e7fb      	b.n	8010af0 <RegionCommonCountChannels+0x24>

08010af8 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8010af8:	4684      	mov	ip, r0
 8010afa:	b158      	cbz	r0, 8010b14 <RegionCommonChanMaskCopy+0x1c>
 8010afc:	b109      	cbz	r1, 8010b02 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 8010afe:	2300      	movs	r3, #0
 8010b00:	e006      	b.n	8010b10 <RegionCommonChanMaskCopy+0x18>
 8010b02:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8010b04:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8010b08:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	b2db      	uxtb	r3, r3
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d3f7      	bcc.n	8010b04 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 8010b14:	4770      	bx	lr

08010b16 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8010b16:	b082      	sub	sp, #8
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	460d      	mov	r5, r1
 8010b1e:	4611      	mov	r1, r2
 8010b20:	aa04      	add	r2, sp, #16
 8010b22:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8010b26:	ca0c      	ldmia	r2, {r2, r3}
 8010b28:	f7ff fea9 	bl	801087e <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8010b2c:	68e3      	ldr	r3, [r4, #12]
 8010b2e:	fb05 f000 	mul.w	r0, r5, r0
 8010b32:	4283      	cmp	r3, r0
 8010b34:	d905      	bls.n	8010b42 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8010b36:	1a18      	subs	r0, r3, r0
 8010b38:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8010b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b3e:	b002      	add	sp, #8
 8010b40:	4770      	bx	lr
        band->TimeCredits = 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	60e3      	str	r3, [r4, #12]
}
 8010b46:	e7f8      	b.n	8010b3a <RegionCommonSetBandTxDone+0x24>

08010b48 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8010b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b4c:	b089      	sub	sp, #36	; 0x24
 8010b4e:	4607      	mov	r7, r0
 8010b50:	468b      	mov	fp, r1
 8010b52:	4691      	mov	r9, r2
 8010b54:	4698      	mov	r8, r3
 8010b56:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8010b5a:	f004 fe6b 	bl	8015834 <UTIL_TIMER_GetCurrentTime>
 8010b5e:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8010b60:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 8010b62:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8010b64:	f04f 33ff 	mov.w	r3, #4294967295
 8010b68:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 8010b6a:	e005      	b.n	8010b78 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8010b70:	441e      	add	r6, r3
 8010b72:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 8010b74:	3401      	adds	r4, #1
 8010b76:	b2e4      	uxtb	r4, r4
 8010b78:	454c      	cmp	r4, r9
 8010b7a:	d25d      	bcs.n	8010c38 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8010b7c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8010b80:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8010b84:	9b04      	ldr	r3, [sp, #16]
 8010b86:	9302      	str	r3, [sp, #8]
 8010b88:	ab13      	add	r3, sp, #76	; 0x4c
 8010b8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b8e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010b92:	4653      	mov	r3, sl
 8010b94:	4642      	mov	r2, r8
 8010b96:	4639      	mov	r1, r7
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f7ff ff1f 	bl	80109dc <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 8010b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ba0:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8010ba4:	68ea      	ldr	r2, [r5, #12]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d8e0      	bhi.n	8010b6c <RegionCommonUpdateBandTimeOff+0x24>
 8010baa:	f1b8 0f00 	cmp.w	r8, #0
 8010bae:	d101      	bne.n	8010bb4 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8010bb0:	2f00      	cmp	r7, #0
 8010bb2:	d1db      	bne.n	8010b6c <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8010bb4:	2100      	movs	r1, #0
 8010bb6:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8010bb8:	6929      	ldr	r1, [r5, #16]
 8010bba:	4299      	cmp	r1, r3
 8010bbc:	d907      	bls.n	8010bce <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8010bbe:	1a9b      	subs	r3, r3, r2
 8010bc0:	9a05      	ldr	r2, [sp, #20]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	bf28      	it	cs
 8010bc6:	461a      	movcs	r2, r3
 8010bc8:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8010bca:	3601      	adds	r6, #1
 8010bcc:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8010bce:	2f00      	cmp	r7, #0
 8010bd0:	d1d0      	bne.n	8010b74 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	9306      	str	r3, [sp, #24]
 8010bd6:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8010bda:	2864      	cmp	r0, #100	; 0x64
 8010bdc:	d024      	beq.n	8010c28 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8010bde:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8010be2:	d025      	beq.n	8010c30 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8010be4:	4b19      	ldr	r3, [pc, #100]	; (8010c4c <RegionCommonUpdateBandTimeOff+0x104>)
 8010be6:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8010be8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010bea:	4a18      	ldr	r2, [pc, #96]	; (8010c4c <RegionCommonUpdateBandTimeOff+0x104>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d90c      	bls.n	8010c0a <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8010bf0:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8010bf4:	3b30      	subs	r3, #48	; 0x30
 8010bf6:	4a16      	ldr	r2, [pc, #88]	; (8010c50 <RegionCommonUpdateBandTimeOff+0x108>)
 8010bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8010bfc:	0c1b      	lsrs	r3, r3, #16
 8010bfe:	4a15      	ldr	r2, [pc, #84]	; (8010c54 <RegionCommonUpdateBandTimeOff+0x10c>)
 8010c00:	fb03 2202 	mla	r2, r3, r2, r2
 8010c04:	9b06      	ldr	r3, [sp, #24]
 8010c06:	4413      	add	r3, r2
 8010c08:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8010c0a:	ad06      	add	r5, sp, #24
 8010c0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010c12:	e895 0006 	ldmia.w	r5, {r1, r2}
 8010c16:	4628      	mov	r0, r5
 8010c18:	f004 fd1d 	bl	8015656 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8010c1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010c20:	f004 fd92 	bl	8015748 <SysTimeToMs>
 8010c24:	9005      	str	r0, [sp, #20]
 8010c26:	e7a5      	b.n	8010b74 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8010c28:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8010c2c:	9306      	str	r3, [sp, #24]
 8010c2e:	e7db      	b.n	8010be8 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8010c30:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8010c34:	9306      	str	r3, [sp, #24]
 8010c36:	e7d7      	b.n	8010be8 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 8010c38:	b11e      	cbz	r6, 8010c42 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 8010c3a:	9805      	ldr	r0, [sp, #20]
 8010c3c:	b009      	add	sp, #36	; 0x24
 8010c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8010c42:	f04f 33ff 	mov.w	r3, #4294967295
 8010c46:	9305      	str	r3, [sp, #20]
 8010c48:	e7f7      	b.n	8010c3a <RegionCommonUpdateBandTimeOff+0xf2>
 8010c4a:	bf00      	nop
 8010c4c:	0001ec30 	.word	0x0001ec30
 8010c50:	c22e4507 	.word	0xc22e4507
 8010c54:	00015180 	.word	0x00015180

08010c58 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8010c58:	7803      	ldrb	r3, [r0, #0]
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d001      	beq.n	8010c62 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8010c5e:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8010c60:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8010c62:	7842      	ldrb	r2, [r0, #1]
 8010c64:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8010c68:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8010c6a:	f003 030f 	and.w	r3, r3, #15
 8010c6e:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8010c70:	0913      	lsrs	r3, r2, #4
 8010c72:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8010c74:	7883      	ldrb	r3, [r0, #2]
 8010c76:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8010c78:	78c2      	ldrb	r2, [r0, #3]
 8010c7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010c7e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8010c80:	7903      	ldrb	r3, [r0, #4]
 8010c82:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8010c84:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8010c88:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8010c8a:	f003 030f 	and.w	r3, r3, #15
 8010c8e:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8010c90:	2005      	movs	r0, #5
 8010c92:	4770      	bx	lr

08010c94 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8010c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	b085      	sub	sp, #20
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	4688      	mov	r8, r1
 8010c9e:	4617      	mov	r7, r2
 8010ca0:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 8010ca2:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8010ca4:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 8010ca8:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8010cac:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8010cb0:	7943      	ldrb	r3, [r0, #5]
 8010cb2:	b92b      	cbnz	r3, 8010cc0 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8010cb4:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8010cb8:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8010cbc:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 8010cc0:	b355      	cbz	r5, 8010d18 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8010cc2:	f1ba 0f0f 	cmp.w	sl, #15
 8010cc6:	d114      	bne.n	8010cf2 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8010cc8:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8010ccc:	f1b9 0f0f 	cmp.w	r9, #15
 8010cd0:	d020      	beq.n	8010d14 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8010cd2:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8010cd6:	9303      	str	r3, [sp, #12]
 8010cd8:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8010cdc:	461c      	mov	r4, r3
 8010cde:	4619      	mov	r1, r3
 8010ce0:	4648      	mov	r0, r9
 8010ce2:	f7ff fe98 	bl	8010a16 <RegionCommonValueInRange>
 8010ce6:	b9b8      	cbnz	r0, 8010d18 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8010ce8:	454c      	cmp	r4, r9
 8010cea:	dc21      	bgt.n	8010d30 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8010cec:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 8010cf0:	e012      	b.n	8010d18 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8010cf2:	69a3      	ldr	r3, [r4, #24]
 8010cf4:	9301      	str	r3, [sp, #4]
 8010cf6:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8010d00:	4652      	mov	r2, sl
 8010d02:	6921      	ldr	r1, [r4, #16]
 8010d04:	7b20      	ldrb	r0, [r4, #12]
 8010d06:	f7ff fe90 	bl	8010a2a <RegionCommonChanVerifyDr>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	d1de      	bne.n	8010ccc <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 8010d0e:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8010d12:	e7db      	b.n	8010ccc <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 8010d14:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8010d18:	2d07      	cmp	r5, #7
 8010d1a:	d00c      	beq.n	8010d36 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 8010d1c:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 8010d20:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 8010d24:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 8010d28:	4628      	mov	r0, r5
 8010d2a:	b005      	add	sp, #20
 8010d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 8010d30:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010d34:	e7f0      	b.n	8010d18 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 8010d36:	f1bb 0f00 	cmp.w	fp, #0
 8010d3a:	d1ef      	bne.n	8010d1c <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8010d3c:	f04f 0b01 	mov.w	fp, #1
 8010d40:	e7ec      	b.n	8010d1c <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08010d44 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8010d44:	4b02      	ldr	r3, [pc, #8]	; (8010d50 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8010d46:	fa03 f000 	lsl.w	r0, r3, r0
}
 8010d4a:	fbb0 f0f1 	udiv	r0, r0, r1
 8010d4e:	4770      	bx	lr
 8010d50:	000f4240 	.word	0x000f4240

08010d54 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 8010d54:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8010d58:	fbb3 f0f0 	udiv	r0, r3, r0
 8010d5c:	4770      	bx	lr
	...

08010d60 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8010d60:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8010d62:	f1a1 0c04 	sub.w	ip, r1, #4
 8010d66:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 8010d6a:	fb0e f202 	mul.w	r2, lr, r2
 8010d6e:	fb00 220c 	mla	r2, r0, ip, r2
 8010d72:	0052      	lsls	r2, r2, #1
 8010d74:	d021      	beq.n	8010dba <RegionCommonComputeRxWindowParameters+0x5a>
 8010d76:	4402      	add	r2, r0
 8010d78:	3a01      	subs	r2, #1
 8010d7a:	fbb2 f2f0 	udiv	r2, r2, r0
 8010d7e:	4291      	cmp	r1, r2
 8010d80:	bf38      	it	cc
 8010d82:	4611      	movcc	r1, r2
 8010d84:	9a01      	ldr	r2, [sp, #4]
 8010d86:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8010d88:	0082      	lsls	r2, r0, #2
 8010d8a:	fb00 f101 	mul.w	r1, r0, r1
 8010d8e:	b1b9      	cbz	r1, 8010dc0 <RegionCommonComputeRxWindowParameters+0x60>
 8010d90:	3101      	adds	r1, #1
 8010d92:	0849      	lsrs	r1, r1, #1
 8010d94:	1a51      	subs	r1, r2, r1
 8010d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010d9a:	fb02 1313 	mls	r3, r2, r3, r1
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	dd10      	ble.n	8010dc4 <RegionCommonComputeRxWindowParameters+0x64>
 8010da2:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8010da6:	4a0b      	ldr	r2, [pc, #44]	; (8010dd4 <RegionCommonComputeRxWindowParameters+0x74>)
 8010da8:	fb82 1203 	smull	r1, r2, r2, r3
 8010dac:	17db      	asrs	r3, r3, #31
 8010dae:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8010db2:	9a02      	ldr	r2, [sp, #8]
 8010db4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8010db6:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8010dba:	fbb2 f2f0 	udiv	r2, r2, r0
 8010dbe:	e7de      	b.n	8010d7e <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8010dc0:	0849      	lsrs	r1, r1, #1
 8010dc2:	e7e7      	b.n	8010d94 <RegionCommonComputeRxWindowParameters+0x34>
 8010dc4:	4a03      	ldr	r2, [pc, #12]	; (8010dd4 <RegionCommonComputeRxWindowParameters+0x74>)
 8010dc6:	fb82 1203 	smull	r1, r2, r2, r3
 8010dca:	17db      	asrs	r3, r3, #31
 8010dcc:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8010dd0:	e7ef      	b.n	8010db2 <RegionCommonComputeRxWindowParameters+0x52>
 8010dd2:	bf00      	nop
 8010dd4:	10624dd3 	.word	0x10624dd3

08010dd8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8010dd8:	b538      	push	{r3, r4, r5, lr}
 8010dda:	460d      	mov	r5, r1
 8010ddc:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8010dde:	0040      	lsls	r0, r0, #1
 8010de0:	f7ef fcf8 	bl	80007d4 <__aeabi_ui2f>
 8010de4:	4601      	mov	r1, r0
 8010de6:	4628      	mov	r0, r5
 8010de8:	f7ef fc42 	bl	8000670 <__aeabi_fsub>
 8010dec:	4621      	mov	r1, r4
 8010dee:	f7ef fc3f 	bl	8000670 <__aeabi_fsub>
 8010df2:	f7ef fb31 	bl	8000458 <__aeabi_f2d>
 8010df6:	f004 fff7 	bl	8015de8 <floor>
 8010dfa:	f7ef fc0d 	bl	8000618 <__aeabi_d2iz>

    return phyTxPower;
}
 8010dfe:	b240      	sxtb	r0, r0
 8010e00:	bd38      	pop	{r3, r4, r5, pc}

08010e02 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8010e02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e06:	b083      	sub	sp, #12
 8010e08:	4605      	mov	r5, r0
 8010e0a:	468b      	mov	fp, r1
 8010e0c:	9200      	str	r2, [sp, #0]
 8010e0e:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010e10:	2600      	movs	r6, #0
 8010e12:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 8010e14:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 8010e16:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010e18:	e04a      	b.n	8010eb0 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8010e1a:	7a3a      	ldrb	r2, [r7, #8]
 8010e1c:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8010e20:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8010e24:	b252      	sxtb	r2, r2
 8010e26:	b249      	sxtb	r1, r1
 8010e28:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8010e2c:	f7ff fdf3 	bl	8010a16 <RegionCommonValueInRange>
 8010e30:	b178      	cbz	r0, 8010e52 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8010e32:	68ea      	ldr	r2, [r5, #12]
 8010e34:	7a7b      	ldrb	r3, [r7, #9]
 8010e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e3a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010e3e:	7d1b      	ldrb	r3, [r3, #20]
 8010e40:	b35b      	cbz	r3, 8010e9a <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 8010e42:	f109 0301 	add.w	r3, r9, #1
 8010e46:	eb08 0204 	add.w	r2, r8, r4
 8010e4a:	f80b 2009 	strb.w	r2, [fp, r9]
 8010e4e:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 8010e52:	3401      	adds	r4, #1
 8010e54:	b2e4      	uxtb	r4, r4
 8010e56:	2c0f      	cmp	r4, #15
 8010e58:	d824      	bhi.n	8010ea4 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8010e5a:	686b      	ldr	r3, [r5, #4]
 8010e5c:	0072      	lsls	r2, r6, #1
 8010e5e:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8010e62:	4123      	asrs	r3, r4
 8010e64:	f013 0f01 	tst.w	r3, #1
 8010e68:	d0f3      	beq.n	8010e52 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8010e6a:	68a8      	ldr	r0, [r5, #8]
 8010e6c:	eb08 0304 	add.w	r3, r8, r4
 8010e70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010e74:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8010e78:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d0e8      	beq.n	8010e52 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010e80:	782b      	ldrb	r3, [r5, #0]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1c9      	bne.n	8010e1a <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8010e86:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d0c6      	beq.n	8010e1a <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8010e8c:	5a9b      	ldrh	r3, [r3, r2]
 8010e8e:	fa43 f104 	asr.w	r1, r3, r4
 8010e92:	f011 0f01 	tst.w	r1, #1
 8010e96:	d1c0      	bne.n	8010e1a <RegionCommonCountNbOfEnabledChannels+0x18>
 8010e98:	e7db      	b.n	8010e52 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 8010e9a:	f10a 0a01 	add.w	sl, sl, #1
 8010e9e:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 8010ea2:	e7d6      	b.n	8010e52 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8010ea4:	f108 0810 	add.w	r8, r8, #16
 8010ea8:	fa5f f888 	uxtb.w	r8, r8
 8010eac:	3601      	adds	r6, #1
 8010eae:	b2f6      	uxtb	r6, r6
 8010eb0:	fa1f f388 	uxth.w	r3, r8
 8010eb4:	8a2a      	ldrh	r2, [r5, #16]
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d201      	bcs.n	8010ebe <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 8010eba:	2400      	movs	r4, #0
 8010ebc:	e7cb      	b.n	8010e56 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8010ebe:	9b00      	ldr	r3, [sp, #0]
 8010ec0:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8010ec4:	9b01      	ldr	r3, [sp, #4]
 8010ec6:	f883 a000 	strb.w	sl, [r3]
}
 8010eca:	b003      	add	sp, #12
 8010ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ed0 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8010ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ed4:	b085      	sub	sp, #20
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	460f      	mov	r7, r1
 8010eda:	4616      	mov	r6, r2
 8010edc:	461d      	mov	r5, r3
 8010ede:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8010ee2:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8010ee6:	6840      	ldr	r0, [r0, #4]
 8010ee8:	f004 fcae 	bl	8015848 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8010eec:	6823      	ldr	r3, [r4, #0]
 8010eee:	1a1b      	subs	r3, r3, r0
 8010ef0:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 8010efa:	2300      	movs	r3, #0
 8010efc:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8010efe:	6863      	ldr	r3, [r4, #4]
 8010f00:	b113      	cbz	r3, 8010f08 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8010f02:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8010f04:	4283      	cmp	r3, r0
 8010f06:	d81e      	bhi.n	8010f46 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8010f0c:	69e3      	ldr	r3, [r4, #28]
 8010f0e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8010f12:	781f      	ldrb	r7, [r3, #0]
 8010f14:	69a3      	ldr	r3, [r4, #24]
 8010f16:	9303      	str	r3, [sp, #12]
 8010f18:	ab01      	add	r3, sp, #4
 8010f1a:	f104 020c 	add.w	r2, r4, #12
 8010f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f22:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f26:	7d23      	ldrb	r3, [r4, #20]
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	7a23      	ldrb	r3, [r4, #8]
 8010f2c:	7a62      	ldrb	r2, [r4, #9]
 8010f2e:	4661      	mov	r1, ip
 8010f30:	4638      	mov	r0, r7
 8010f32:	f7ff fe09 	bl	8010b48 <RegionCommonUpdateBandTimeOff>
 8010f36:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8010f3a:	4643      	mov	r3, r8
 8010f3c:	462a      	mov	r2, r5
 8010f3e:	4631      	mov	r1, r6
 8010f40:	69e0      	ldr	r0, [r4, #28]
 8010f42:	f7ff ff5e 	bl	8010e02 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8010f46:	782b      	ldrb	r3, [r5, #0]
 8010f48:	b923      	cbnz	r3, 8010f54 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 8010f4a:	f898 3000 	ldrb.w	r3, [r8]
 8010f4e:	b13b      	cbz	r3, 8010f60 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8010f50:	200b      	movs	r0, #11
 8010f52:	e002      	b.n	8010f5a <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 8010f54:	2000      	movs	r0, #0
 8010f56:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8010f5a:	b005      	add	sp, #20
 8010f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8010f60:	200c      	movs	r0, #12
 8010f62:	e7fa      	b.n	8010f5a <RegionCommonIdentifyChannels+0x8a>

08010f64 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8010f64:	b570      	push	{r4, r5, r6, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 8010f6a:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 8010f6e:	f990 6002 	ldrsb.w	r6, [r0, #2]
 8010f72:	42a6      	cmp	r6, r4
 8010f74:	d011      	beq.n	8010f9a <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8010f76:	3c01      	subs	r4, #1
 8010f78:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8010f7a:	42a6      	cmp	r6, r4
 8010f7c:	d00e      	beq.n	8010f9c <RegionCommonGetNextLowerTxDr+0x38>
 8010f7e:	68ab      	ldr	r3, [r5, #8]
 8010f80:	9301      	str	r3, [sp, #4]
 8010f82:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8010f86:	9300      	str	r3, [sp, #0]
 8010f88:	4633      	mov	r3, r6
 8010f8a:	4622      	mov	r2, r4
 8010f8c:	6869      	ldr	r1, [r5, #4]
 8010f8e:	78e8      	ldrb	r0, [r5, #3]
 8010f90:	f7ff fd4b 	bl	8010a2a <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8010f94:	2800      	cmp	r0, #0
 8010f96:	d0ee      	beq.n	8010f76 <RegionCommonGetNextLowerTxDr+0x12>
 8010f98:	e000      	b.n	8010f9c <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 8010f9a:	4634      	mov	r4, r6

        return drLocal;
    }
}
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	b002      	add	sp, #8
 8010fa0:	bd70      	pop	{r4, r5, r6, pc}

08010fa2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8010fa2:	4288      	cmp	r0, r1
 8010fa4:	bfb8      	it	lt
 8010fa6:	4608      	movlt	r0, r1
 8010fa8:	4770      	bx	lr
	...

08010fac <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8010fac:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8010fb0:	4a05      	ldr	r2, [pc, #20]	; (8010fc8 <RegionCommonGetBandwidth+0x1c>)
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	d004      	beq.n	8010fc0 <RegionCommonGetBandwidth+0x14>
 8010fb6:	4a05      	ldr	r2, [pc, #20]	; (8010fcc <RegionCommonGetBandwidth+0x20>)
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d103      	bne.n	8010fc4 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8010fbc:	2002      	movs	r0, #2
 8010fbe:	4770      	bx	lr
            return 1;
 8010fc0:	2001      	movs	r0, #1
 8010fc2:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 8010fc4:	2000      	movs	r0, #0
    }
}
 8010fc6:	4770      	bx	lr
 8010fc8:	0003d090 	.word	0x0003d090
 8010fcc:	0007a120 	.word	0x0007a120

08010fd0 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8010fd0:	b500      	push	{lr}
 8010fd2:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 8010fd4:	2805      	cmp	r0, #5
 8010fd6:	d80e      	bhi.n	8010ff6 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8010fd8:	9202      	str	r2, [sp, #8]
 8010fda:	9101      	str	r1, [sp, #4]
 8010fdc:	4b0a      	ldr	r3, [pc, #40]	; (8011008 <RegionCommonRxConfigPrint+0x38>)
 8010fde:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010fe2:	9300      	str	r3, [sp, #0]
 8010fe4:	4b09      	ldr	r3, [pc, #36]	; (801100c <RegionCommonRxConfigPrint+0x3c>)
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	2100      	movs	r1, #0
 8010fea:	2002      	movs	r0, #2
 8010fec:	f004 f9ea 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8010ff0:	b005      	add	sp, #20
 8010ff2:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8010ff6:	9201      	str	r2, [sp, #4]
 8010ff8:	9100      	str	r1, [sp, #0]
 8010ffa:	4b05      	ldr	r3, [pc, #20]	; (8011010 <RegionCommonRxConfigPrint+0x40>)
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	2100      	movs	r1, #0
 8011000:	2002      	movs	r0, #2
 8011002:	f004 f9df 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8011006:	e7f3      	b.n	8010ff0 <RegionCommonRxConfigPrint+0x20>
 8011008:	08016790 	.word	0x08016790
 801100c:	08016728 	.word	0x08016728
 8011010:	08016748 	.word	0x08016748

08011014 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8011014:	b500      	push	{lr}
 8011016:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8011018:	9101      	str	r1, [sp, #4]
 801101a:	9000      	str	r0, [sp, #0]
 801101c:	4b04      	ldr	r3, [pc, #16]	; (8011030 <RegionCommonTxConfigPrint+0x1c>)
 801101e:	2201      	movs	r2, #1
 8011020:	2100      	movs	r1, #0
 8011022:	2002      	movs	r0, #2
 8011024:	f004 f9ce 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8011028:	b003      	add	sp, #12
 801102a:	f85d fb04 	ldr.w	pc, [sp], #4
 801102e:	bf00      	nop
 8011030:	08016764 	.word	0x08016764

08011034 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8011034:	b538      	push	{r3, r4, r5, lr}
 8011036:	4604      	mov	r4, r0
 8011038:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801103a:	4b1b      	ldr	r3, [pc, #108]	; (80110a8 <VerifyRfFreq+0x74>)
 801103c:	6a1b      	ldr	r3, [r3, #32]
 801103e:	4798      	blx	r3
 8011040:	b130      	cbz	r0, 8011050 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8011042:	4b1a      	ldr	r3, [pc, #104]	; (80110ac <VerifyRfFreq+0x78>)
 8011044:	4423      	add	r3, r4
 8011046:	4a1a      	ldr	r2, [pc, #104]	; (80110b0 <VerifyRfFreq+0x7c>)
 8011048:	4293      	cmp	r3, r2
 801104a:	d802      	bhi.n	8011052 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 801104c:	2302      	movs	r3, #2
 801104e:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 8011050:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8011052:	4b18      	ldr	r3, [pc, #96]	; (80110b4 <VerifyRfFreq+0x80>)
 8011054:	4423      	add	r3, r4
 8011056:	4a18      	ldr	r2, [pc, #96]	; (80110b8 <VerifyRfFreq+0x84>)
 8011058:	4293      	cmp	r3, r2
 801105a:	d802      	bhi.n	8011062 <VerifyRfFreq+0x2e>
        *band = 0;
 801105c:	2300      	movs	r3, #0
 801105e:	702b      	strb	r3, [r5, #0]
 8011060:	e7f6      	b.n	8011050 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8011062:	4b16      	ldr	r3, [pc, #88]	; (80110bc <VerifyRfFreq+0x88>)
 8011064:	4423      	add	r3, r4
 8011066:	4a16      	ldr	r2, [pc, #88]	; (80110c0 <VerifyRfFreq+0x8c>)
 8011068:	4293      	cmp	r3, r2
 801106a:	d802      	bhi.n	8011072 <VerifyRfFreq+0x3e>
        *band = 1;
 801106c:	2301      	movs	r3, #1
 801106e:	702b      	strb	r3, [r5, #0]
 8011070:	e7ee      	b.n	8011050 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8011072:	4b14      	ldr	r3, [pc, #80]	; (80110c4 <VerifyRfFreq+0x90>)
 8011074:	4423      	add	r3, r4
 8011076:	4a14      	ldr	r2, [pc, #80]	; (80110c8 <VerifyRfFreq+0x94>)
 8011078:	4293      	cmp	r3, r2
 801107a:	d802      	bhi.n	8011082 <VerifyRfFreq+0x4e>
        *band = 5;
 801107c:	2305      	movs	r3, #5
 801107e:	702b      	strb	r3, [r5, #0]
 8011080:	e7e6      	b.n	8011050 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8011082:	4b12      	ldr	r3, [pc, #72]	; (80110cc <VerifyRfFreq+0x98>)
 8011084:	4423      	add	r3, r4
 8011086:	4a12      	ldr	r2, [pc, #72]	; (80110d0 <VerifyRfFreq+0x9c>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d802      	bhi.n	8011092 <VerifyRfFreq+0x5e>
        *band = 3;
 801108c:	2303      	movs	r3, #3
 801108e:	702b      	strb	r3, [r5, #0]
 8011090:	e7de      	b.n	8011050 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8011092:	4b10      	ldr	r3, [pc, #64]	; (80110d4 <VerifyRfFreq+0xa0>)
 8011094:	4423      	add	r3, r4
 8011096:	4a10      	ldr	r2, [pc, #64]	; (80110d8 <VerifyRfFreq+0xa4>)
 8011098:	4293      	cmp	r3, r2
 801109a:	d802      	bhi.n	80110a2 <VerifyRfFreq+0x6e>
        *band = 4;
 801109c:	2304      	movs	r3, #4
 801109e:	702b      	strb	r3, [r5, #0]
 80110a0:	e7d6      	b.n	8011050 <VerifyRfFreq+0x1c>
        return false;
 80110a2:	2000      	movs	r0, #0
 80110a4:	e7d4      	b.n	8011050 <VerifyRfFreq+0x1c>
 80110a6:	bf00      	nop
 80110a8:	08016dc8 	.word	0x08016dc8
 80110ac:	cc8faa40 	.word	0xcc8faa40
 80110b0:	001e847f 	.word	0x001e847f
 80110b4:	cc7125c0 	.word	0xcc7125c0
 80110b8:	002dc6c0 	.word	0x002dc6c0
 80110bc:	cc435eff 	.word	0xcc435eff
 80110c0:	000927bf 	.word	0x000927bf
 80110c4:	cc38b0a0 	.word	0xcc38b0a0
 80110c8:	0007a120 	.word	0x0007a120
 80110cc:	cc2e0240 	.word	0xcc2e0240
 80110d0:	0003d090 	.word	0x0003d090
 80110d4:	cc296e60 	.word	0xcc296e60
 80110d8:	000493e0 	.word	0x000493e0

080110dc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80110dc:	b570      	push	{r4, r5, r6, lr}
 80110de:	b084      	sub	sp, #16
 80110e0:	4605      	mov	r5, r0
 80110e2:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 80110e4:	4b13      	ldr	r3, [pc, #76]	; (8011134 <GetTimeOnAir+0x58>)
 80110e6:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80110e8:	4913      	ldr	r1, [pc, #76]	; (8011138 <GetTimeOnAir+0x5c>)
 80110ea:	f7ff ff5f 	bl	8010fac <RegionCommonGetBandwidth>
 80110ee:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 80110f0:	2d07      	cmp	r5, #7
 80110f2:	d00e      	beq.n	8011112 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80110f4:	4b11      	ldr	r3, [pc, #68]	; (801113c <GetTimeOnAir+0x60>)
 80110f6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80110f8:	2001      	movs	r0, #1
 80110fa:	9003      	str	r0, [sp, #12]
 80110fc:	b2e4      	uxtb	r4, r4
 80110fe:	9402      	str	r4, [sp, #8]
 8011100:	2300      	movs	r3, #0
 8011102:	9301      	str	r3, [sp, #4]
 8011104:	2308      	movs	r3, #8
 8011106:	9300      	str	r3, [sp, #0]
 8011108:	4603      	mov	r3, r0
 801110a:	4632      	mov	r2, r6
 801110c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 801110e:	b004      	add	sp, #16
 8011110:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8011112:	4b0a      	ldr	r3, [pc, #40]	; (801113c <GetTimeOnAir+0x60>)
 8011114:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011116:	2301      	movs	r3, #1
 8011118:	9303      	str	r3, [sp, #12]
 801111a:	b2e4      	uxtb	r4, r4
 801111c:	9402      	str	r4, [sp, #8]
 801111e:	2000      	movs	r0, #0
 8011120:	9001      	str	r0, [sp, #4]
 8011122:	2305      	movs	r3, #5
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	4603      	mov	r3, r0
 8011128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801112c:	fb06 f202 	mul.w	r2, r6, r2
 8011130:	47a8      	blx	r5
 8011132:	e7ec      	b.n	801110e <GetTimeOnAir+0x32>
 8011134:	080167c8 	.word	0x080167c8
 8011138:	080167a8 	.word	0x080167a8
 801113c:	08016dc8 	.word	0x08016dc8

08011140 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8011140:	b500      	push	{lr}
 8011142:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8011144:	2300      	movs	r3, #0
 8011146:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8011148:	7803      	ldrb	r3, [r0, #0]
 801114a:	3b0b      	subs	r3, #11
 801114c:	2b2d      	cmp	r3, #45	; 0x2d
 801114e:	d82f      	bhi.n	80111b0 <RegionEU868GetPhyParam+0x70>
 8011150:	e8df f003 	tbb	[pc, r3]
 8011154:	3f393633 	.word	0x3f393633
 8011158:	504c4845 	.word	0x504c4845
 801115c:	2e5c5854 	.word	0x2e5c5854
 8011160:	6e682e65 	.word	0x6e682e65
 8011164:	2e2e7774 	.word	0x2e2e7774
 8011168:	2e177f7b 	.word	0x2e177f7b
 801116c:	2e2e2e2e 	.word	0x2e2e2e2e
 8011170:	2e2e2e2e 	.word	0x2e2e2e2e
 8011174:	2e2e2e2e 	.word	0x2e2e2e2e
 8011178:	2e8c8582 	.word	0x2e8c8582
 801117c:	2e928f2e 	.word	0x2e928f2e
 8011180:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8011182:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011186:	f88d 3004 	strb.w	r3, [sp, #4]
 801118a:	2307      	movs	r3, #7
 801118c:	f88d 3005 	strb.w	r3, [sp, #5]
 8011190:	2300      	movs	r3, #0
 8011192:	f88d 3006 	strb.w	r3, [sp, #6]
 8011196:	2310      	movs	r3, #16
 8011198:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801119c:	4b3e      	ldr	r3, [pc, #248]	; (8011298 <RegionEU868GetPhyParam+0x158>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80111a4:	9202      	str	r2, [sp, #8]
 80111a6:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80111a8:	a801      	add	r0, sp, #4
 80111aa:	f7ff fedb 	bl	8010f64 <RegionCommonGetNextLowerTxDr>
 80111ae:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80111b0:	9804      	ldr	r0, [sp, #16]
 80111b2:	9005      	str	r0, [sp, #20]
}
 80111b4:	b007      	add	sp, #28
 80111b6:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80111ba:	2340      	movs	r3, #64	; 0x40
 80111bc:	9304      	str	r3, [sp, #16]
            break;
 80111be:	e7f7      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80111c0:	2320      	movs	r3, #32
 80111c2:	9304      	str	r3, [sp, #16]
            break;
 80111c4:	e7f4      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80111c6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80111ca:	4a34      	ldr	r2, [pc, #208]	; (801129c <RegionEU868GetPhyParam+0x15c>)
 80111cc:	5cd3      	ldrb	r3, [r2, r3]
 80111ce:	9304      	str	r3, [sp, #16]
            break;
 80111d0:	e7ee      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80111d2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80111d6:	4a32      	ldr	r2, [pc, #200]	; (80112a0 <RegionEU868GetPhyParam+0x160>)
 80111d8:	5cd3      	ldrb	r3, [r2, r3]
 80111da:	9304      	str	r3, [sp, #16]
            break;
 80111dc:	e7e8      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80111de:	2301      	movs	r3, #1
 80111e0:	9304      	str	r3, [sp, #16]
            break;
 80111e2:	e7e5      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80111e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80111e8:	9304      	str	r3, [sp, #16]
            break;
 80111ea:	e7e1      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80111ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80111f0:	9304      	str	r3, [sp, #16]
            break;
 80111f2:	e7dd      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80111f4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80111f8:	9304      	str	r3, [sp, #16]
            break;
 80111fa:	e7d9      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80111fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8011200:	9304      	str	r3, [sp, #16]
            break;
 8011202:	e7d5      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8011204:	f241 7370 	movw	r3, #6000	; 0x1770
 8011208:	9304      	str	r3, [sp, #16]
            break;
 801120a:	e7d1      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801120c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011210:	4824      	ldr	r0, [pc, #144]	; (80112a4 <RegionEU868GetPhyParam+0x164>)
 8011212:	f002 fa21 	bl	8013658 <randr>
 8011216:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801121a:	9004      	str	r0, [sp, #16]
            break;
 801121c:	e7c8      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801121e:	4b22      	ldr	r3, [pc, #136]	; (80112a8 <RegionEU868GetPhyParam+0x168>)
 8011220:	9304      	str	r3, [sp, #16]
            break;
 8011222:	e7c5      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011224:	4b1c      	ldr	r3, [pc, #112]	; (8011298 <RegionEU868GetPhyParam+0x158>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801122c:	9304      	str	r3, [sp, #16]
            break;
 801122e:	e7bf      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8011230:	4b19      	ldr	r3, [pc, #100]	; (8011298 <RegionEU868GetPhyParam+0x158>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8011238:	9304      	str	r3, [sp, #16]
            break;
 801123a:	e7b9      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801123c:	2310      	movs	r3, #16
 801123e:	9304      	str	r3, [sp, #16]
            break;
 8011240:	e7b6      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8011242:	4b15      	ldr	r3, [pc, #84]	; (8011298 <RegionEU868GetPhyParam+0x158>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	9304      	str	r3, [sp, #16]
            break;
 8011248:	e7b2      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801124a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801124e:	9304      	str	r3, [sp, #16]
            break;
 8011250:	e7ae      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8011252:	4b16      	ldr	r3, [pc, #88]	; (80112ac <RegionEU868GetPhyParam+0x16c>)
 8011254:	9304      	str	r3, [sp, #16]
            break;
 8011256:	e7ab      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8011258:	4b13      	ldr	r3, [pc, #76]	; (80112a8 <RegionEU868GetPhyParam+0x168>)
 801125a:	9304      	str	r3, [sp, #16]
            break;
 801125c:	e7a8      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801125e:	2311      	movs	r3, #17
 8011260:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8011264:	2301      	movs	r3, #1
 8011266:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 801126a:	e7a1      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801126c:	2303      	movs	r3, #3
 801126e:	9304      	str	r3, [sp, #16]
            break;
 8011270:	e79e      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8011272:	4b0d      	ldr	r3, [pc, #52]	; (80112a8 <RegionEU868GetPhyParam+0x168>)
 8011274:	9304      	str	r3, [sp, #16]
            break;
 8011276:	e79b      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8011278:	2303      	movs	r3, #3
 801127a:	9304      	str	r3, [sp, #16]
            break;
 801127c:	e798      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801127e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011282:	4a0b      	ldr	r2, [pc, #44]	; (80112b0 <RegionEU868GetPhyParam+0x170>)
 8011284:	5cd3      	ldrb	r3, [r2, r3]
 8011286:	9304      	str	r3, [sp, #16]
            break;
 8011288:	e792      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801128a:	490a      	ldr	r1, [pc, #40]	; (80112b4 <RegionEU868GetPhyParam+0x174>)
 801128c:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8011290:	f7ff fe8c 	bl	8010fac <RegionCommonGetBandwidth>
 8011294:	9004      	str	r0, [sp, #16]
            break;
 8011296:	e78b      	b.n	80111b0 <RegionEU868GetPhyParam+0x70>
 8011298:	20003d70 	.word	0x20003d70
 801129c:	080167d0 	.word	0x080167d0
 80112a0:	080167d8 	.word	0x080167d8
 80112a4:	fffffc18 	.word	0xfffffc18
 80112a8:	33d3e608 	.word	0x33d3e608
 80112ac:	4009999a 	.word	0x4009999a
 80112b0:	080167c8 	.word	0x080167c8
 80112b4:	080167a8 	.word	0x080167a8

080112b8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80112b8:	b510      	push	{r4, lr}
 80112ba:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80112bc:	4b0b      	ldr	r3, [pc, #44]	; (80112ec <RegionEU868SetBandTxDone+0x34>)
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	7803      	ldrb	r3, [r0, #0]
 80112c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80112c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80112ca:	7a5b      	ldrb	r3, [r3, #9]
 80112cc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80112d0:	4b07      	ldr	r3, [pc, #28]	; (80112f0 <RegionEU868SetBandTxDone+0x38>)
 80112d2:	681c      	ldr	r4, [r3, #0]
 80112d4:	6903      	ldr	r3, [r0, #16]
 80112d6:	9300      	str	r3, [sp, #0]
 80112d8:	68c3      	ldr	r3, [r0, #12]
 80112da:	7842      	ldrb	r2, [r0, #1]
 80112dc:	6881      	ldr	r1, [r0, #8]
 80112de:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 80112e2:	f7ff fc18 	bl	8010b16 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80112e6:	b002      	add	sp, #8
 80112e8:	bd10      	pop	{r4, pc}
 80112ea:	bf00      	nop
 80112ec:	20003d70 	.word	0x20003d70
 80112f0:	20003d6c 	.word	0x20003d6c

080112f4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80112f4:	b530      	push	{r4, r5, lr}
 80112f6:	b0a5      	sub	sp, #148	; 0x94
 80112f8:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80112fa:	2290      	movs	r2, #144	; 0x90
 80112fc:	2100      	movs	r1, #0
 80112fe:	4668      	mov	r0, sp
 8011300:	f004 fd6a 	bl	8015dd8 <memset>
 8011304:	2364      	movs	r3, #100	; 0x64
 8011306:	f8ad 3000 	strh.w	r3, [sp]
 801130a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801130e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011312:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8011316:	210a      	movs	r1, #10
 8011318:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 801131c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8011320:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8011324:	7b23      	ldrb	r3, [r4, #12]
 8011326:	2b01      	cmp	r3, #1
 8011328:	d032      	beq.n	8011390 <RegionEU868InitDefaults+0x9c>
 801132a:	2b02      	cmp	r3, #2
 801132c:	d03e      	beq.n	80113ac <RegionEU868InitDefaults+0xb8>
 801132e:	b10b      	cbz	r3, 8011334 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 8011330:	b025      	add	sp, #148	; 0x94
 8011332:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8011334:	6823      	ldr	r3, [r4, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0fa      	beq.n	8011330 <RegionEU868InitDefaults+0x3c>
 801133a:	6863      	ldr	r3, [r4, #4]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d0f7      	beq.n	8011330 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8011340:	4d1f      	ldr	r5, [pc, #124]	; (80113c0 <RegionEU868InitDefaults+0xcc>)
 8011342:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 8011344:	68a0      	ldr	r0, [r4, #8]
 8011346:	4b1f      	ldr	r3, [pc, #124]	; (80113c4 <RegionEU868InitDefaults+0xd0>)
 8011348:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801134a:	2290      	movs	r2, #144	; 0x90
 801134c:	4669      	mov	r1, sp
 801134e:	f002 f990 	bl	8013672 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8011352:	682c      	ldr	r4, [r5, #0]
 8011354:	4b1c      	ldr	r3, [pc, #112]	; (80113c8 <RegionEU868InitDefaults+0xd4>)
 8011356:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801135a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801135e:	f104 0c0c 	add.w	ip, r4, #12
 8011362:	f103 020c 	add.w	r2, r3, #12
 8011366:	ca07      	ldmia	r2, {r0, r1, r2}
 8011368:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 801136c:	f104 0c18 	add.w	ip, r4, #24
 8011370:	3318      	adds	r3, #24
 8011372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011376:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801137a:	2307      	movs	r3, #7
 801137c:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8011380:	2201      	movs	r2, #1
 8011382:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 8011386:	f504 7058 	add.w	r0, r4, #864	; 0x360
 801138a:	f7ff fbb5 	bl	8010af8 <RegionCommonChanMaskCopy>
            break;
 801138e:	e7cf      	b.n	8011330 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8011390:	4b0b      	ldr	r3, [pc, #44]	; (80113c0 <RegionEU868InitDefaults+0xcc>)
 8011392:	6818      	ldr	r0, [r3, #0]
 8011394:	2300      	movs	r3, #0
 8011396:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8011398:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801139a:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801139c:	2201      	movs	r2, #1
 801139e:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 80113a2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80113a6:	f7ff fba7 	bl	8010af8 <RegionCommonChanMaskCopy>
            break;
 80113aa:	e7c1      	b.n	8011330 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80113ac:	4b04      	ldr	r3, [pc, #16]	; (80113c0 <RegionEU868InitDefaults+0xcc>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 80113b4:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 80113b8:	430a      	orrs	r2, r1
 80113ba:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 80113be:	e7b7      	b.n	8011330 <RegionEU868InitDefaults+0x3c>
 80113c0:	20003d70 	.word	0x20003d70
 80113c4:	20003d6c 	.word	0x20003d6c
 80113c8:	08015f48 	.word	0x08015f48

080113cc <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80113cc:	b500      	push	{lr}
 80113ce:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80113d0:	290f      	cmp	r1, #15
 80113d2:	d83c      	bhi.n	801144e <RegionEU868Verify+0x82>
 80113d4:	e8df f001 	tbb	[pc, r1]
 80113d8:	3b3b3b0a 	.word	0x3b3b3b0a
 80113dc:	271d133b 	.word	0x271d133b
 80113e0:	3b31313b 	.word	0x3b31313b
 80113e4:	083b3b3b 	.word	0x083b3b3b
 80113e8:	2001      	movs	r0, #1
 80113ea:	e031      	b.n	8011450 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80113ec:	2300      	movs	r3, #0
 80113ee:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 80113f2:	f10d 0107 	add.w	r1, sp, #7
 80113f6:	6800      	ldr	r0, [r0, #0]
 80113f8:	f7ff fe1c 	bl	8011034 <VerifyRfFreq>
 80113fc:	e028      	b.n	8011450 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80113fe:	2207      	movs	r2, #7
 8011400:	2100      	movs	r1, #0
 8011402:	f990 0000 	ldrsb.w	r0, [r0]
 8011406:	f7ff fb06 	bl	8010a16 <RegionCommonValueInRange>
 801140a:	3800      	subs	r0, #0
 801140c:	bf18      	it	ne
 801140e:	2001      	movne	r0, #1
 8011410:	e01e      	b.n	8011450 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8011412:	2205      	movs	r2, #5
 8011414:	2100      	movs	r1, #0
 8011416:	f990 0000 	ldrsb.w	r0, [r0]
 801141a:	f7ff fafc 	bl	8010a16 <RegionCommonValueInRange>
 801141e:	3800      	subs	r0, #0
 8011420:	bf18      	it	ne
 8011422:	2001      	movne	r0, #1
 8011424:	e014      	b.n	8011450 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8011426:	2207      	movs	r2, #7
 8011428:	2100      	movs	r1, #0
 801142a:	f990 0000 	ldrsb.w	r0, [r0]
 801142e:	f7ff faf2 	bl	8010a16 <RegionCommonValueInRange>
 8011432:	3800      	subs	r0, #0
 8011434:	bf18      	it	ne
 8011436:	2001      	movne	r0, #1
 8011438:	e00a      	b.n	8011450 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801143a:	2207      	movs	r2, #7
 801143c:	2100      	movs	r1, #0
 801143e:	f990 0000 	ldrsb.w	r0, [r0]
 8011442:	f7ff fae8 	bl	8010a16 <RegionCommonValueInRange>
 8011446:	3800      	subs	r0, #0
 8011448:	bf18      	it	ne
 801144a:	2001      	movne	r0, #1
 801144c:	e000      	b.n	8011450 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 801144e:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8011450:	b003      	add	sp, #12
 8011452:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011458 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8011458:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801145a:	7903      	ldrb	r3, [r0, #4]
 801145c:	b11b      	cbz	r3, 8011466 <RegionEU868ChanMaskSet+0xe>
 801145e:	2b01      	cmp	r3, #1
 8011460:	d00b      	beq.n	801147a <RegionEU868ChanMaskSet+0x22>
 8011462:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 8011464:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8011466:	4b0a      	ldr	r3, [pc, #40]	; (8011490 <RegionEU868ChanMaskSet+0x38>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2201      	movs	r2, #1
 801146c:	6801      	ldr	r1, [r0, #0]
 801146e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8011472:	f7ff fb41 	bl	8010af8 <RegionCommonChanMaskCopy>
    return true;
 8011476:	2001      	movs	r0, #1
            break;
 8011478:	e7f4      	b.n	8011464 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801147a:	4b05      	ldr	r3, [pc, #20]	; (8011490 <RegionEU868ChanMaskSet+0x38>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2201      	movs	r2, #1
 8011480:	6801      	ldr	r1, [r0, #0]
 8011482:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8011486:	f7ff fb37 	bl	8010af8 <RegionCommonChanMaskCopy>
    return true;
 801148a:	2001      	movs	r0, #1
            break;
 801148c:	e7ea      	b.n	8011464 <RegionEU868ChanMaskSet+0xc>
 801148e:	bf00      	nop
 8011490:	20003d70 	.word	0x20003d70

08011494 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011496:	b083      	sub	sp, #12
 8011498:	460e      	mov	r6, r1
 801149a:	4617      	mov	r7, r2
 801149c:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801149e:	2807      	cmp	r0, #7
 80114a0:	bfa8      	it	ge
 80114a2:	2007      	movge	r0, #7
 80114a4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80114a6:	4913      	ldr	r1, [pc, #76]	; (80114f4 <RegionEU868ComputeRxWindowParameters+0x60>)
 80114a8:	f7ff fd80 	bl	8010fac <RegionCommonGetBandwidth>
 80114ac:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80114ae:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80114b2:	2b07      	cmp	r3, #7
 80114b4:	d017      	beq.n	80114e6 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80114b6:	4a0f      	ldr	r2, [pc, #60]	; (80114f4 <RegionEU868ComputeRxWindowParameters+0x60>)
 80114b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80114bc:	4a0e      	ldr	r2, [pc, #56]	; (80114f8 <RegionEU868ComputeRxWindowParameters+0x64>)
 80114be:	5cd0      	ldrb	r0, [r2, r3]
 80114c0:	f7ff fc40 	bl	8010d44 <RegionCommonComputeSymbolTimeLoRa>
 80114c4:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80114c6:	4b0d      	ldr	r3, [pc, #52]	; (80114fc <RegionEU868ComputeRxWindowParameters+0x68>)
 80114c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80114ca:	4798      	blx	r3
 80114cc:	4603      	mov	r3, r0
 80114ce:	f104 020c 	add.w	r2, r4, #12
 80114d2:	9201      	str	r2, [sp, #4]
 80114d4:	3408      	adds	r4, #8
 80114d6:	9400      	str	r4, [sp, #0]
 80114d8:	463a      	mov	r2, r7
 80114da:	4631      	mov	r1, r6
 80114dc:	4628      	mov	r0, r5
 80114de:	f7ff fc3f 	bl	8010d60 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80114e2:	b003      	add	sp, #12
 80114e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80114e6:	4a04      	ldr	r2, [pc, #16]	; (80114f8 <RegionEU868ComputeRxWindowParameters+0x64>)
 80114e8:	5cd0      	ldrb	r0, [r2, r3]
 80114ea:	f7ff fc33 	bl	8010d54 <RegionCommonComputeSymbolTimeFsk>
 80114ee:	4605      	mov	r5, r0
 80114f0:	e7e9      	b.n	80114c6 <RegionEU868ComputeRxWindowParameters+0x32>
 80114f2:	bf00      	nop
 80114f4:	080167a8 	.word	0x080167a8
 80114f8:	080167c8 	.word	0x080167c8
 80114fc:	08016dc8 	.word	0x08016dc8

08011500 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011504:	b08a      	sub	sp, #40	; 0x28
 8011506:	4604      	mov	r4, r0
 8011508:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801150a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801150e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8011512:	4b37      	ldr	r3, [pc, #220]	; (80115f0 <RegionEU868RxConfig+0xf0>)
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	4798      	blx	r3
 8011518:	2800      	cmp	r0, #0
 801151a:	d167      	bne.n	80115ec <RegionEU868RxConfig+0xec>
 801151c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801151e:	7ce3      	ldrb	r3, [r4, #19]
 8011520:	b983      	cbnz	r3, 8011544 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8011522:	4b34      	ldr	r3, [pc, #208]	; (80115f4 <RegionEU868RxConfig+0xf4>)
 8011524:	681a      	ldr	r2, [r3, #0]
 8011526:	7823      	ldrb	r3, [r4, #0]
 8011528:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801152c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8011530:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011534:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011538:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801153c:	f1b8 0f00 	cmp.w	r8, #0
 8011540:	d100      	bne.n	8011544 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8011542:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8011544:	4b2c      	ldr	r3, [pc, #176]	; (80115f8 <RegionEU868RxConfig+0xf8>)
 8011546:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 801154a:	4b29      	ldr	r3, [pc, #164]	; (80115f0 <RegionEU868RxConfig+0xf0>)
 801154c:	68db      	ldr	r3, [r3, #12]
 801154e:	4640      	mov	r0, r8
 8011550:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8011552:	2d07      	cmp	r5, #7
 8011554:	d02b      	beq.n	80115ae <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8011556:	4b26      	ldr	r3, [pc, #152]	; (80115f0 <RegionEU868RxConfig+0xf0>)
 8011558:	f8d3 a018 	ldr.w	sl, [r3, #24]
 801155c:	7ca3      	ldrb	r3, [r4, #18]
 801155e:	9309      	str	r3, [sp, #36]	; 0x24
 8011560:	2601      	movs	r6, #1
 8011562:	9608      	str	r6, [sp, #32]
 8011564:	2300      	movs	r3, #0
 8011566:	9307      	str	r3, [sp, #28]
 8011568:	9306      	str	r3, [sp, #24]
 801156a:	9305      	str	r3, [sp, #20]
 801156c:	9304      	str	r3, [sp, #16]
 801156e:	9303      	str	r3, [sp, #12]
 8011570:	8922      	ldrh	r2, [r4, #8]
 8011572:	9202      	str	r2, [sp, #8]
 8011574:	2208      	movs	r2, #8
 8011576:	9201      	str	r2, [sp, #4]
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	4633      	mov	r3, r6
 801157c:	464a      	mov	r2, r9
 801157e:	78a1      	ldrb	r1, [r4, #2]
 8011580:	4630      	mov	r0, r6
 8011582:	47d0      	blx	sl
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8011584:	7c63      	ldrb	r3, [r4, #17]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d02d      	beq.n	80115e6 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801158a:	4b1c      	ldr	r3, [pc, #112]	; (80115fc <RegionEU868RxConfig+0xfc>)
 801158c:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801158e:	4b18      	ldr	r3, [pc, #96]	; (80115f0 <RegionEU868RxConfig+0xf0>)
 8011590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011592:	310d      	adds	r1, #13
 8011594:	b2c9      	uxtb	r1, r1
 8011596:	4630      	mov	r0, r6
 8011598:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801159a:	462a      	mov	r2, r5
 801159c:	4641      	mov	r1, r8
 801159e:	7ce0      	ldrb	r0, [r4, #19]
 80115a0:	f7ff fd16 	bl	8010fd0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80115a4:	703d      	strb	r5, [r7, #0]
    return true;
 80115a6:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80115a8:	b00a      	add	sp, #40	; 0x28
 80115aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80115ae:	4b10      	ldr	r3, [pc, #64]	; (80115f0 <RegionEU868RxConfig+0xf0>)
 80115b0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80115b4:	7ca3      	ldrb	r3, [r4, #18]
 80115b6:	9309      	str	r3, [sp, #36]	; 0x24
 80115b8:	2000      	movs	r0, #0
 80115ba:	9008      	str	r0, [sp, #32]
 80115bc:	9007      	str	r0, [sp, #28]
 80115be:	9006      	str	r0, [sp, #24]
 80115c0:	2301      	movs	r3, #1
 80115c2:	9305      	str	r3, [sp, #20]
 80115c4:	9004      	str	r0, [sp, #16]
 80115c6:	9003      	str	r0, [sp, #12]
 80115c8:	8923      	ldrh	r3, [r4, #8]
 80115ca:	9302      	str	r3, [sp, #8]
 80115cc:	2305      	movs	r3, #5
 80115ce:	9301      	str	r3, [sp, #4]
 80115d0:	4b0b      	ldr	r3, [pc, #44]	; (8011600 <RegionEU868RxConfig+0x100>)
 80115d2:	9300      	str	r3, [sp, #0]
 80115d4:	4603      	mov	r3, r0
 80115d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80115da:	fb02 f209 	mul.w	r2, r2, r9
 80115de:	f24c 3150 	movw	r1, #50000	; 0xc350
 80115e2:	47d0      	blx	sl
 80115e4:	e7ce      	b.n	8011584 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80115e6:	4b07      	ldr	r3, [pc, #28]	; (8011604 <RegionEU868RxConfig+0x104>)
 80115e8:	5d59      	ldrb	r1, [r3, r5]
 80115ea:	e7d0      	b.n	801158e <RegionEU868RxConfig+0x8e>
        return false;
 80115ec:	2000      	movs	r0, #0
 80115ee:	e7db      	b.n	80115a8 <RegionEU868RxConfig+0xa8>
 80115f0:	08016dc8 	.word	0x08016dc8
 80115f4:	20003d70 	.word	0x20003d70
 80115f8:	080167c8 	.word	0x080167c8
 80115fc:	080167d8 	.word	0x080167d8
 8011600:	00014585 	.word	0x00014585
 8011604:	080167d0 	.word	0x080167d0

08011608 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801160c:	b08d      	sub	sp, #52	; 0x34
 801160e:	4604      	mov	r4, r0
 8011610:	460f      	mov	r7, r1
 8011612:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8011614:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011618:	4a42      	ldr	r2, [pc, #264]	; (8011724 <RegionEU868TxConfig+0x11c>)
 801161a:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801161e:	4d42      	ldr	r5, [pc, #264]	; (8011728 <RegionEU868TxConfig+0x120>)
 8011620:	682a      	ldr	r2, [r5, #0]
 8011622:	7803      	ldrb	r3, [r0, #0]
 8011624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801162c:	7a5b      	ldrb	r3, [r3, #9]
 801162e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011632:	4a3e      	ldr	r2, [pc, #248]	; (801172c <RegionEU868TxConfig+0x124>)
 8011634:	6812      	ldr	r2, [r2, #0]
 8011636:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801163a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801163e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8011642:	f7ff fcae 	bl	8010fa2 <RegionCommonLimitTxPower>
 8011646:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8011648:	4939      	ldr	r1, [pc, #228]	; (8011730 <RegionEU868TxConfig+0x128>)
 801164a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801164e:	f7ff fcad 	bl	8010fac <RegionCommonGetBandwidth>
 8011652:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8011654:	68a2      	ldr	r2, [r4, #8]
 8011656:	6861      	ldr	r1, [r4, #4]
 8011658:	4630      	mov	r0, r6
 801165a:	f7ff fbbd 	bl	8010dd8 <RegionCommonComputeTxPower>
 801165e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8011660:	4b34      	ldr	r3, [pc, #208]	; (8011734 <RegionEU868TxConfig+0x12c>)
 8011662:	68da      	ldr	r2, [r3, #12]
 8011664:	6829      	ldr	r1, [r5, #0]
 8011666:	7823      	ldrb	r3, [r4, #0]
 8011668:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801166c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8011670:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8011672:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8011676:	2b07      	cmp	r3, #7
 8011678:	d031      	beq.n	80116de <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801167a:	4b2e      	ldr	r3, [pc, #184]	; (8011734 <RegionEU868TxConfig+0x12c>)
 801167c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8011680:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8011684:	9308      	str	r3, [sp, #32]
 8011686:	2200      	movs	r2, #0
 8011688:	9207      	str	r2, [sp, #28]
 801168a:	9206      	str	r2, [sp, #24]
 801168c:	9205      	str	r2, [sp, #20]
 801168e:	2501      	movs	r5, #1
 8011690:	9504      	str	r5, [sp, #16]
 8011692:	9203      	str	r2, [sp, #12]
 8011694:	2308      	movs	r3, #8
 8011696:	9302      	str	r3, [sp, #8]
 8011698:	9501      	str	r5, [sp, #4]
 801169a:	f8cd a000 	str.w	sl, [sp]
 801169e:	464b      	mov	r3, r9
 80116a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80116a2:	4628      	mov	r0, r5
 80116a4:	47d8      	blx	fp
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80116a6:	4b20      	ldr	r3, [pc, #128]	; (8011728 <RegionEU868TxConfig+0x120>)
 80116a8:	681a      	ldr	r2, [r3, #0]
 80116aa:	7823      	ldrb	r3, [r4, #0]
 80116ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80116b0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80116b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80116b8:	f7ff fcac 	bl	8011014 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80116bc:	89a1      	ldrh	r1, [r4, #12]
 80116be:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80116c2:	f7ff fd0b 	bl	80110dc <GetTimeOnAir>
 80116c6:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80116ca:	4b1a      	ldr	r3, [pc, #104]	; (8011734 <RegionEU868TxConfig+0x12c>)
 80116cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116ce:	7b21      	ldrb	r1, [r4, #12]
 80116d0:	4628      	mov	r0, r5
 80116d2:	4798      	blx	r3

    *txPower = txPowerLimited;
 80116d4:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 80116d6:	2001      	movs	r0, #1
 80116d8:	b00d      	add	sp, #52	; 0x34
 80116da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80116de:	4b15      	ldr	r3, [pc, #84]	; (8011734 <RegionEU868TxConfig+0x12c>)
 80116e0:	69dd      	ldr	r5, [r3, #28]
 80116e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80116e6:	fb03 f30a 	mul.w	r3, r3, sl
 80116ea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80116ee:	9208      	str	r2, [sp, #32]
 80116f0:	f04f 0b00 	mov.w	fp, #0
 80116f4:	f8cd b01c 	str.w	fp, [sp, #28]
 80116f8:	f8cd b018 	str.w	fp, [sp, #24]
 80116fc:	f8cd b014 	str.w	fp, [sp, #20]
 8011700:	2201      	movs	r2, #1
 8011702:	9204      	str	r2, [sp, #16]
 8011704:	f8cd b00c 	str.w	fp, [sp, #12]
 8011708:	2205      	movs	r2, #5
 801170a:	9202      	str	r2, [sp, #8]
 801170c:	f8cd b004 	str.w	fp, [sp, #4]
 8011710:	9300      	str	r3, [sp, #0]
 8011712:	464b      	mov	r3, r9
 8011714:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8011718:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801171a:	4658      	mov	r0, fp
 801171c:	47a8      	blx	r5
        modem = MODEM_FSK;
 801171e:	465d      	mov	r5, fp
 8011720:	e7c1      	b.n	80116a6 <RegionEU868TxConfig+0x9e>
 8011722:	bf00      	nop
 8011724:	080167c8 	.word	0x080167c8
 8011728:	20003d70 	.word	0x20003d70
 801172c:	20003d6c 	.word	0x20003d6c
 8011730:	080167a8 	.word	0x080167a8
 8011734:	08016dc8 	.word	0x08016dc8

08011738 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801173c:	b08f      	sub	sp, #60	; 0x3c
 801173e:	4605      	mov	r5, r0
 8011740:	4689      	mov	r9, r1
 8011742:	4690      	mov	r8, r2
 8011744:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8011746:	2400      	movs	r4, #0
 8011748:	940c      	str	r4, [sp, #48]	; 0x30
 801174a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 801174e:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8011752:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8011754:	e030      	b.n	80117b8 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8011756:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 801175a:	2607      	movs	r6, #7
 801175c:	e012      	b.n	8011784 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801175e:	4a57      	ldr	r2, [pc, #348]	; (80118bc <RegionEU868LinkAdrReq+0x184>)
 8011760:	6812      	ldr	r2, [r2, #0]
 8011762:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8011766:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801176a:	b13a      	cbz	r2, 801177c <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 801176c:	2201      	movs	r2, #1
 801176e:	fa02 f20c 	lsl.w	r2, r2, ip
 8011772:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011776:	430a      	orrs	r2, r1
 8011778:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801177c:	f10c 0c01 	add.w	ip, ip, #1
 8011780:	fa5f fc8c 	uxtb.w	ip, ip
 8011784:	f1bc 0f0f 	cmp.w	ip, #15
 8011788:	d816      	bhi.n	80117b8 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 801178a:	2b06      	cmp	r3, #6
 801178c:	d0e7      	beq.n	801175e <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801178e:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 8011792:	fa4e fe0c 	asr.w	lr, lr, ip
 8011796:	f01e 0f01 	tst.w	lr, #1
 801179a:	d0ef      	beq.n	801177c <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801179c:	4a47      	ldr	r2, [pc, #284]	; (80118bc <RegionEU868LinkAdrReq+0x184>)
 801179e:	6812      	ldr	r2, [r2, #0]
 80117a0:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 80117a4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80117a8:	2a00      	cmp	r2, #0
 80117aa:	d1e7      	bne.n	801177c <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80117ac:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80117b0:	e7e4      	b.n	801177c <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 80117b2:	2606      	movs	r6, #6
 80117b4:	e000      	b.n	80117b8 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 80117b6:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80117b8:	7a2b      	ldrb	r3, [r5, #8]
 80117ba:	42a3      	cmp	r3, r4
 80117bc:	d918      	bls.n	80117f0 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80117be:	6868      	ldr	r0, [r5, #4]
 80117c0:	a90c      	add	r1, sp, #48	; 0x30
 80117c2:	4420      	add	r0, r4
 80117c4:	f7ff fa48 	bl	8010c58 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80117c8:	b190      	cbz	r0, 80117f0 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 80117ca:	4404      	add	r4, r0
 80117cc:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 80117ce:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80117d2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80117d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80117da:	b90b      	cbnz	r3, 80117e0 <RegionEU868LinkAdrReq+0xa8>
 80117dc:	2a00      	cmp	r2, #0
 80117de:	d0e8      	beq.n	80117b2 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80117e0:	1e5a      	subs	r2, r3, #1
 80117e2:	b2d2      	uxtb	r2, r2
 80117e4:	2a04      	cmp	r2, #4
 80117e6:	d9e6      	bls.n	80117b6 <RegionEU868LinkAdrReq+0x7e>
 80117e8:	2b06      	cmp	r3, #6
 80117ea:	d9b4      	bls.n	8011756 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 80117ec:	2606      	movs	r6, #6
 80117ee:	e7e3      	b.n	80117b8 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80117f0:	2302      	movs	r3, #2
 80117f2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80117f6:	7a6b      	ldrb	r3, [r5, #9]
 80117f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80117fc:	a80a      	add	r0, sp, #40	; 0x28
 80117fe:	f7ff fc9f 	bl	8011140 <RegionEU868GetPhyParam>
 8011802:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 8011804:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8011808:	7aab      	ldrb	r3, [r5, #10]
 801180a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801180e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011812:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8011816:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801181a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801181e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011822:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8011826:	f995 300b 	ldrsb.w	r3, [r5, #11]
 801182a:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801182e:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8011832:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8011836:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801183a:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801183e:	2310      	movs	r3, #16
 8011840:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8011844:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8011848:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801184a:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801184e:	2307      	movs	r3, #7
 8011850:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8011854:	4a19      	ldr	r2, [pc, #100]	; (80118bc <RegionEU868LinkAdrReq+0x184>)
 8011856:	6812      	ldr	r2, [r2, #0]
 8011858:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801185a:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801185e:	2300      	movs	r3, #0
 8011860:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8011864:	682b      	ldr	r3, [r5, #0]
 8011866:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8011868:	ab0c      	add	r3, sp, #48	; 0x30
 801186a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801186e:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8011872:	a801      	add	r0, sp, #4
 8011874:	f7ff fa0e 	bl	8010c94 <RegionCommonLinkAdrReqVerifyParams>
 8011878:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801187a:	2807      	cmp	r0, #7
 801187c:	d010      	beq.n	80118a0 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801187e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8011882:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 8011886:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 801188a:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 801188e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8011892:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 8011894:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011896:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 8011898:	4628      	mov	r0, r5
 801189a:	b00f      	add	sp, #60	; 0x3c
 801189c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80118a0:	4e06      	ldr	r6, [pc, #24]	; (80118bc <RegionEU868LinkAdrReq+0x184>)
 80118a2:	6830      	ldr	r0, [r6, #0]
 80118a4:	220c      	movs	r2, #12
 80118a6:	2100      	movs	r1, #0
 80118a8:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80118ac:	f001 fef9 	bl	80136a2 <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80118b0:	6833      	ldr	r3, [r6, #0]
 80118b2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80118b6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 80118ba:	e7e0      	b.n	801187e <RegionEU868LinkAdrReq+0x146>
 80118bc:	20003d70 	.word	0x20003d70

080118c0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80118c0:	b530      	push	{r4, r5, lr}
 80118c2:	b083      	sub	sp, #12
 80118c4:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80118c6:	2300      	movs	r3, #0
 80118c8:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80118cc:	f10d 0107 	add.w	r1, sp, #7
 80118d0:	6840      	ldr	r0, [r0, #4]
 80118d2:	f7ff fbaf 	bl	8011034 <VerifyRfFreq>
 80118d6:	b1a8      	cbz	r0, 8011904 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 80118d8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80118da:	2207      	movs	r2, #7
 80118dc:	2100      	movs	r1, #0
 80118de:	f994 0000 	ldrsb.w	r0, [r4]
 80118e2:	f7ff f898 	bl	8010a16 <RegionCommonValueInRange>
 80118e6:	b908      	cbnz	r0, 80118ec <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 80118e8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80118ec:	2205      	movs	r2, #5
 80118ee:	2100      	movs	r1, #0
 80118f0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80118f4:	f7ff f88f 	bl	8010a16 <RegionCommonValueInRange>
 80118f8:	b908      	cbnz	r0, 80118fe <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80118fa:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 80118fe:	4628      	mov	r0, r5
 8011900:	b003      	add	sp, #12
 8011902:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8011904:	2506      	movs	r5, #6
 8011906:	e7e8      	b.n	80118da <RegionEU868RxParamSetupReq+0x1a>

08011908 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 8011908:	f04f 30ff 	mov.w	r0, #4294967295
 801190c:	4770      	bx	lr
	...

08011910 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8011910:	b510      	push	{r4, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	4604      	mov	r4, r0
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8011916:	2300      	movs	r3, #0
 8011918:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801191c:	f10d 0107 	add.w	r1, sp, #7
 8011920:	6840      	ldr	r0, [r0, #4]
 8011922:	f7ff fb87 	bl	8011034 <VerifyRfFreq>
 8011926:	b178      	cbz	r0, 8011948 <RegionEU868DlChannelReq+0x38>
    uint8_t status = 0x03;
 8011928:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 801192a:	4b0c      	ldr	r3, [pc, #48]	; (801195c <RegionEU868DlChannelReq+0x4c>)
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	7823      	ldrb	r3, [r4, #0]
 8011930:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8011934:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8011938:	b909      	cbnz	r1, 801193e <RegionEU868DlChannelReq+0x2e>
    {
        status &= 0xFD;
 801193a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801193e:	2803      	cmp	r0, #3
 8011940:	d004      	beq.n	801194c <RegionEU868DlChannelReq+0x3c>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 8011942:	b240      	sxtb	r0, r0
 8011944:	b002      	add	sp, #8
 8011946:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8011948:	2002      	movs	r0, #2
 801194a:	e7ee      	b.n	801192a <RegionEU868DlChannelReq+0x1a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801194c:	6861      	ldr	r1, [r4, #4]
 801194e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011952:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011956:	6059      	str	r1, [r3, #4]
 8011958:	e7f3      	b.n	8011942 <RegionEU868DlChannelReq+0x32>
 801195a:	bf00      	nop
 801195c:	20003d70 	.word	0x20003d70

08011960 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 8011960:	4770      	bx	lr
	...

08011964 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011966:	b097      	sub	sp, #92	; 0x5c
 8011968:	4604      	mov	r4, r0
 801196a:	460f      	mov	r7, r1
 801196c:	4616      	mov	r6, r2
 801196e:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8011970:	2100      	movs	r1, #0
 8011972:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8011976:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801197a:	9111      	str	r1, [sp, #68]	; 0x44
 801197c:	9112      	str	r1, [sp, #72]	; 0x48
 801197e:	9113      	str	r1, [sp, #76]	; 0x4c
 8011980:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8011982:	2307      	movs	r3, #7
 8011984:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8011988:	4b34      	ldr	r3, [pc, #208]	; (8011a5c <RegionEU868NextChannel+0xf8>)
 801198a:	6818      	ldr	r0, [r3, #0]
 801198c:	2201      	movs	r2, #1
 801198e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011992:	f7ff f89b 	bl	8010acc <RegionCommonCountChannels>
 8011996:	b938      	cbnz	r0, 80119a8 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011998:	4b30      	ldr	r3, [pc, #192]	; (8011a5c <RegionEU868NextChannel+0xf8>)
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 80119a0:	f043 0307 	orr.w	r3, r3, #7
 80119a4:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80119a8:	7a63      	ldrb	r3, [r4, #9]
 80119aa:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80119ae:	7a23      	ldrb	r3, [r4, #8]
 80119b0:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80119b4:	4b29      	ldr	r3, [pc, #164]	; (8011a5c <RegionEU868NextChannel+0xf8>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	f503 7258 	add.w	r2, r3, #864	; 0x360
 80119bc:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80119be:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80119c0:	4b27      	ldr	r3, [pc, #156]	; (8011a60 <RegionEU868NextChannel+0xfc>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80119c6:	2310      	movs	r3, #16
 80119c8:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 80119cc:	f10d 030a 	add.w	r3, sp, #10
 80119d0:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80119d2:	6823      	ldr	r3, [r4, #0]
 80119d4:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80119d6:	6863      	ldr	r3, [r4, #4]
 80119d8:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80119da:	7aa3      	ldrb	r3, [r4, #10]
 80119dc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80119e0:	2306      	movs	r3, #6
 80119e2:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80119e6:	ab0c      	add	r3, sp, #48	; 0x30
 80119e8:	f104 020c 	add.w	r2, r4, #12
 80119ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119f0:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80119f4:	7d23      	ldrb	r3, [r4, #20]
 80119f6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80119fa:	8ae1      	ldrh	r1, [r4, #22]
 80119fc:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8011a00:	f7ff fb6c 	bl	80110dc <GetTimeOnAir>
 8011a04:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8011a06:	ab03      	add	r3, sp, #12
 8011a08:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8011a0a:	9601      	str	r6, [sp, #4]
 8011a0c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8011a10:	9300      	str	r3, [sp, #0]
 8011a12:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8011a16:	aa11      	add	r2, sp, #68	; 0x44
 8011a18:	4629      	mov	r1, r5
 8011a1a:	a809      	add	r0, sp, #36	; 0x24
 8011a1c:	f7ff fa58 	bl	8010ed0 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8011a20:	4604      	mov	r4, r0
 8011a22:	b120      	cbz	r0, 8011a2e <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8011a24:	280c      	cmp	r0, #12
 8011a26:	d00f      	beq.n	8011a48 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8011a28:	4620      	mov	r0, r4
 8011a2a:	b017      	add	sp, #92	; 0x5c
 8011a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8011a2e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8011a32:	3901      	subs	r1, #1
 8011a34:	f001 fe10 	bl	8013658 <randr>
 8011a38:	f100 0358 	add.w	r3, r0, #88	; 0x58
 8011a3c:	eb0d 0003 	add.w	r0, sp, r3
 8011a40:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8011a44:	703b      	strb	r3, [r7, #0]
 8011a46:	e7ef      	b.n	8011a28 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8011a48:	4b04      	ldr	r3, [pc, #16]	; (8011a5c <RegionEU868NextChannel+0xf8>)
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8011a50:	f043 0307 	orr.w	r3, r3, #7
 8011a54:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 8011a58:	e7e6      	b.n	8011a28 <RegionEU868NextChannel+0xc4>
 8011a5a:	bf00      	nop
 8011a5c:	20003d70 	.word	0x20003d70
 8011a60:	20003d6c 	.word	0x20003d6c

08011a64 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8011a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011a66:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8011a6e:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011a70:	2d02      	cmp	r5, #2
 8011a72:	d94f      	bls.n	8011b14 <RegionEU868ChannelAdd+0xb0>
 8011a74:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8011a76:	2d0f      	cmp	r5, #15
 8011a78:	d84e      	bhi.n	8011b18 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011a7a:	6803      	ldr	r3, [r0, #0]
 8011a7c:	7a18      	ldrb	r0, [r3, #8]
 8011a7e:	f340 0003 	sbfx	r0, r0, #0, #4
 8011a82:	2207      	movs	r2, #7
 8011a84:	2100      	movs	r1, #0
 8011a86:	b240      	sxtb	r0, r0
 8011a88:	f7fe ffc5 	bl	8010a16 <RegionCommonValueInRange>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	d03d      	beq.n	8011b0c <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 8011a90:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8011a92:	6823      	ldr	r3, [r4, #0]
 8011a94:	7a18      	ldrb	r0, [r3, #8]
 8011a96:	f340 1003 	sbfx	r0, r0, #4, #4
 8011a9a:	2207      	movs	r2, #7
 8011a9c:	2100      	movs	r1, #0
 8011a9e:	b240      	sxtb	r0, r0
 8011aa0:	f7fe ffb9 	bl	8010a16 <RegionCommonValueInRange>
 8011aa4:	b900      	cbnz	r0, 8011aa8 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 8011aa6:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8011aa8:	6820      	ldr	r0, [r4, #0]
 8011aaa:	7a03      	ldrb	r3, [r0, #8]
 8011aac:	f343 0203 	sbfx	r2, r3, #0, #4
 8011ab0:	b252      	sxtb	r2, r2
 8011ab2:	f343 1303 	sbfx	r3, r3, #4, #4
 8011ab6:	b25b      	sxtb	r3, r3
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	dd00      	ble.n	8011abe <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 8011abc:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8011abe:	f10d 0107 	add.w	r1, sp, #7
 8011ac2:	6800      	ldr	r0, [r0, #0]
 8011ac4:	f7ff fab6 	bl	8011034 <VerifyRfFreq>
 8011ac8:	b310      	cbz	r0, 8011b10 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 8011aca:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8011acc:	b106      	cbz	r6, 8011ad0 <RegionEU868ChannelAdd+0x6c>
 8011ace:	bb33      	cbnz	r3, 8011b1e <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8011ad0:	bb3e      	cbnz	r6, 8011b22 <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8011ad2:	bb43      	cbnz	r3, 8011b26 <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8011ad4:	4f15      	ldr	r7, [pc, #84]	; (8011b2c <RegionEU868ChannelAdd+0xc8>)
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	006e      	lsls	r6, r5, #1
 8011ada:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8011ade:	220c      	movs	r2, #12
 8011ae0:	6821      	ldr	r1, [r4, #0]
 8011ae2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011ae6:	f001 fdc4 	bl	8013672 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8011aea:	683a      	ldr	r2, [r7, #0]
 8011aec:	442e      	add	r6, r5
 8011aee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011af2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011af6:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8011af8:	2301      	movs	r3, #1
 8011afa:	fa03 f505 	lsl.w	r5, r3, r5
 8011afe:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8011b02:	431d      	orrs	r5, r3
 8011b04:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8011b08:	2000      	movs	r0, #0
 8011b0a:	e006      	b.n	8011b1a <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 8011b0c:	2601      	movs	r6, #1
 8011b0e:	e7c0      	b.n	8011a92 <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 8011b10:	2301      	movs	r3, #1
 8011b12:	e7db      	b.n	8011acc <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011b14:	2006      	movs	r0, #6
 8011b16:	e000      	b.n	8011b1a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011b18:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8011b1a:	b003      	add	sp, #12
 8011b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8011b1e:	2006      	movs	r0, #6
 8011b20:	e7fb      	b.n	8011b1a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8011b22:	2005      	movs	r0, #5
 8011b24:	e7f9      	b.n	8011b1a <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8011b26:	2004      	movs	r0, #4
 8011b28:	e7f7      	b.n	8011b1a <RegionEU868ChannelAdd+0xb6>
 8011b2a:	bf00      	nop
 8011b2c:	20003d70 	.word	0x20003d70

08011b30 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8011b30:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8011b32:	2902      	cmp	r1, #2
 8011b34:	d801      	bhi.n	8011b3a <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 8011b36:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 8011b38:	4770      	bx	lr
{
 8011b3a:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8011b3c:	4b09      	ldr	r3, [pc, #36]	; (8011b64 <RegionEU868ChannelsRemove+0x34>)
 8011b3e:	6818      	ldr	r0, [r3, #0]
 8011b40:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8011b44:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8011b48:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	f840 200c 	str.w	r2, [r0, ip]
 8011b52:	605a      	str	r2, [r3, #4]
 8011b54:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8011b56:	2210      	movs	r2, #16
 8011b58:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011b5c:	f7fe ff9d 	bl	8010a9a <RegionCommonChanDisable>
}
 8011b60:	bd08      	pop	{r3, pc}
 8011b62:	bf00      	nop
 8011b64:	20003d70 	.word	0x20003d70

08011b68 <RegionEU868ApplyCFList>:
{
 8011b68:	b570      	push	{r4, r5, r6, lr}
 8011b6a:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8011b6c:	2350      	movs	r3, #80	; 0x50
 8011b6e:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8011b72:	7a03      	ldrb	r3, [r0, #8]
 8011b74:	2b10      	cmp	r3, #16
 8011b76:	d136      	bne.n	8011be6 <RegionEU868ApplyCFList+0x7e>
 8011b78:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8011b7a:	6843      	ldr	r3, [r0, #4]
 8011b7c:	7bdd      	ldrb	r5, [r3, #15]
 8011b7e:	2d00      	cmp	r5, #0
 8011b80:	d131      	bne.n	8011be6 <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011b82:	2403      	movs	r4, #3
 8011b84:	e01b      	b.n	8011bbe <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8011b86:	6872      	ldr	r2, [r6, #4]
 8011b88:	5d53      	ldrb	r3, [r2, r5]
 8011b8a:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8011b8c:	442a      	add	r2, r5
 8011b8e:	7851      	ldrb	r1, [r2, #1]
 8011b90:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8011b94:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8011b96:	7892      	ldrb	r2, [r2, #2]
 8011b98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b9c:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 8011b9e:	2264      	movs	r2, #100	; 0x64
 8011ba0:	fb02 f303 	mul.w	r3, r2, r3
 8011ba4:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	9304      	str	r3, [sp, #16]
 8011baa:	e011      	b.n	8011bd0 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 8011bac:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 8011bb0:	4668      	mov	r0, sp
 8011bb2:	f7ff ffbd 	bl	8011b30 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8011bb6:	3503      	adds	r5, #3
 8011bb8:	b2ed      	uxtb	r5, r5
 8011bba:	3401      	adds	r4, #1
 8011bbc:	b2e4      	uxtb	r4, r4
 8011bbe:	2c0f      	cmp	r4, #15
 8011bc0:	d811      	bhi.n	8011be6 <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8011bc2:	2c07      	cmp	r4, #7
 8011bc4:	d9df      	bls.n	8011b86 <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8011bca:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8011bce:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8011bd0:	9b03      	ldr	r3, [sp, #12]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d0ea      	beq.n	8011bac <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 8011bd6:	ab03      	add	r3, sp, #12
 8011bd8:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8011bda:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 8011bde:	a801      	add	r0, sp, #4
 8011be0:	f7ff ff40 	bl	8011a64 <RegionEU868ChannelAdd>
 8011be4:	e7e7      	b.n	8011bb6 <RegionEU868ApplyCFList+0x4e>
}
 8011be6:	b006      	add	sp, #24
 8011be8:	bd70      	pop	{r4, r5, r6, pc}

08011bea <RegionEU868NewChannelReq>:
{
 8011bea:	b500      	push	{lr}
 8011bec:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8011bee:	6803      	ldr	r3, [r0, #0]
 8011bf0:	681a      	ldr	r2, [r3, #0]
 8011bf2:	b952      	cbnz	r2, 8011c0a <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8011bf4:	7903      	ldrb	r3, [r0, #4]
 8011bf6:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8011bfa:	a801      	add	r0, sp, #4
 8011bfc:	f7ff ff98 	bl	8011b30 <RegionEU868ChannelsRemove>
 8011c00:	b1d0      	cbz	r0, 8011c38 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8011c02:	2003      	movs	r0, #3
}
 8011c04:	b005      	add	sp, #20
 8011c06:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8011c0a:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8011c0c:	7903      	ldrb	r3, [r0, #4]
 8011c0e:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8011c12:	a802      	add	r0, sp, #8
 8011c14:	f7ff ff26 	bl	8011a64 <RegionEU868ChannelAdd>
 8011c18:	2806      	cmp	r0, #6
 8011c1a:	d80b      	bhi.n	8011c34 <RegionEU868NewChannelReq+0x4a>
 8011c1c:	e8df f000 	tbb	[pc, r0]
 8011c20:	0a0a0a04 	.word	0x0a0a0a04
 8011c24:	060e      	.short	0x060e
 8011c26:	08          	.byte	0x08
 8011c27:	00          	.byte	0x00
 8011c28:	2003      	movs	r0, #3
 8011c2a:	e7eb      	b.n	8011c04 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 8011c2c:	2001      	movs	r0, #1
                break;
 8011c2e:	e7e9      	b.n	8011c04 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8011c30:	2000      	movs	r0, #0
                break;
 8011c32:	e7e7      	b.n	8011c04 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 8011c34:	2000      	movs	r0, #0
                break;
 8011c36:	e7e5      	b.n	8011c04 <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 8011c38:	2000      	movs	r0, #0
 8011c3a:	e7e3      	b.n	8011c04 <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 8011c3c:	2002      	movs	r0, #2
 8011c3e:	e7e1      	b.n	8011c04 <RegionEU868NewChannelReq+0x1a>

08011c40 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8011c40:	1a88      	subs	r0, r1, r2
 8011c42:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 8011c44:	2800      	cmp	r0, #0
 8011c46:	db01      	blt.n	8011c4c <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 8011c48:	b2c0      	uxtb	r0, r0
 8011c4a:	4770      	bx	lr
        datarate = DR_0;
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	e7fb      	b.n	8011c48 <RegionEU868ApplyDrOffset+0x8>

08011c50 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 8011c50:	b510      	push	{r4, lr}
 8011c52:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8011c54:	4b10      	ldr	r3, [pc, #64]	; (8011c98 <VerifyRfFreq+0x48>)
 8011c56:	6a1b      	ldr	r3, [r3, #32]
 8011c58:	4798      	blx	r3
 8011c5a:	b1c8      	cbz	r0, 8011c90 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8011c5c:	4b0f      	ldr	r3, [pc, #60]	; (8011c9c <VerifyRfFreq+0x4c>)
 8011c5e:	4423      	add	r3, r4
 8011c60:	4a0f      	ldr	r2, [pc, #60]	; (8011ca0 <VerifyRfFreq+0x50>)
 8011c62:	4293      	cmp	r3, r2
 8011c64:	d813      	bhi.n	8011c8e <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8011c66:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 8011c6a:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 8011c6e:	f202 7245 	addw	r2, r2, #1861	; 0x745
 8011c72:	fba2 1203 	umull	r1, r2, r2, r3
 8011c76:	0c92      	lsrs	r2, r2, #18
 8011c78:	490a      	ldr	r1, [pc, #40]	; (8011ca4 <VerifyRfFreq+0x54>)
 8011c7a:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8011c7e:	b942      	cbnz	r2, 8011c92 <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8011c80:	4b09      	ldr	r3, [pc, #36]	; (8011ca8 <VerifyRfFreq+0x58>)
 8011c82:	4423      	add	r3, r4
 8011c84:	4a09      	ldr	r2, [pc, #36]	; (8011cac <VerifyRfFreq+0x5c>)
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d902      	bls.n	8011c90 <VerifyRfFreq+0x40>
    {
        return false;
 8011c8a:	2000      	movs	r0, #0
 8011c8c:	e000      	b.n	8011c90 <VerifyRfFreq+0x40>
        return false;
 8011c8e:	2000      	movs	r0, #0
    }
    return true;
}
 8011c90:	bd10      	pop	{r4, pc}
        return false;
 8011c92:	2000      	movs	r0, #0
 8011c94:	e7fc      	b.n	8011c90 <VerifyRfFreq+0x40>
 8011c96:	bf00      	nop
 8011c98:	08016dc8 	.word	0x08016dc8
 8011c9c:	c8f78f60 	.word	0xc8f78f60
 8011ca0:	00401640 	.word	0x00401640
 8011ca4:	000927c0 	.word	0x000927c0
 8011ca8:	ca37fea0 	.word	0xca37fea0
 8011cac:	01808580 	.word	0x01808580

08011cb0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8011cb0:	b570      	push	{r4, r5, r6, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 8011cb6:	4b0a      	ldr	r3, [pc, #40]	; (8011ce0 <GetTimeOnAir+0x30>)
 8011cb8:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8011cba:	490a      	ldr	r1, [pc, #40]	; (8011ce4 <GetTimeOnAir+0x34>)
 8011cbc:	f7ff f976 	bl	8010fac <RegionCommonGetBandwidth>
 8011cc0:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8011cc2:	4b09      	ldr	r3, [pc, #36]	; (8011ce8 <GetTimeOnAir+0x38>)
 8011cc4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011cc6:	2001      	movs	r0, #1
 8011cc8:	9003      	str	r0, [sp, #12]
 8011cca:	b2e4      	uxtb	r4, r4
 8011ccc:	9402      	str	r4, [sp, #8]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	9201      	str	r2, [sp, #4]
 8011cd2:	2208      	movs	r2, #8
 8011cd4:	9200      	str	r2, [sp, #0]
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	4632      	mov	r2, r6
 8011cda:	47a8      	blx	r5
}
 8011cdc:	b004      	add	sp, #16
 8011cde:	bd70      	pop	{r4, r5, r6, pc}
 8011ce0:	08016834 	.word	0x08016834
 8011ce4:	080167e0 	.word	0x080167e0
 8011ce8:	08016dc8 	.word	0x08016dc8

08011cec <LimitTxPower>:
{
 8011cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cee:	4606      	mov	r6, r0
 8011cf0:	4615      	mov	r5, r2
 8011cf2:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8011cf4:	f7ff f955 	bl	8010fa2 <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 8011cf8:	2d04      	cmp	r5, #4
 8011cfa:	d105      	bne.n	8011d08 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8011cfc:	4634      	mov	r4, r6
 8011cfe:	2e02      	cmp	r6, #2
 8011d00:	bfb8      	it	lt
 8011d02:	2402      	movlt	r4, #2
}
 8011d04:	4620      	mov	r0, r4
 8011d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d08:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8011d0a:	2204      	movs	r2, #4
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	4638      	mov	r0, r7
 8011d10:	f7fe fedc 	bl	8010acc <RegionCommonCountChannels>
 8011d14:	2831      	cmp	r0, #49	; 0x31
 8011d16:	d8f5      	bhi.n	8011d04 <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8011d18:	4634      	mov	r4, r6
 8011d1a:	2e05      	cmp	r6, #5
 8011d1c:	bfb8      	it	lt
 8011d1e:	2405      	movlt	r4, #5
 8011d20:	e7f0      	b.n	8011d04 <LimitTxPower+0x18>
	...

08011d24 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8011d24:	b500      	push	{lr}
 8011d26:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8011d28:	2300      	movs	r3, #0
 8011d2a:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8011d2c:	7803      	ldrb	r3, [r0, #0]
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	2b37      	cmp	r3, #55	; 0x37
 8011d32:	d81f      	bhi.n	8011d74 <RegionUS915GetPhyParam+0x50>
 8011d34:	e8df f003 	tbb	[pc, r3]
 8011d38:	1e1e1e1c 	.word	0x1e1e1e1c
 8011d3c:	1e1e1e1e 	.word	0x1e1e1e1e
 8011d40:	3e3b1e1e 	.word	0x3e3b1e1e
 8011d44:	4d1e4741 	.word	0x4d1e4741
 8011d48:	5d595551 	.word	0x5d595551
 8011d4c:	6d6a1e61 	.word	0x6d6a1e61
 8011d50:	7f7c7670 	.word	0x7f7c7670
 8011d54:	86831e1e 	.word	0x86831e1e
 8011d58:	1e1e1e23 	.word	0x1e1e1e23
 8011d5c:	1e1e1e1e 	.word	0x1e1e1e1e
 8011d60:	1e1e1e1e 	.word	0x1e1e1e1e
 8011d64:	90891e1e 	.word	0x90891e1e
 8011d68:	a01e9d9a 	.word	0xa01e9d9a
 8011d6c:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8011d70:	2308      	movs	r3, #8
 8011d72:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8011d74:	9804      	ldr	r0, [sp, #16]
 8011d76:	9005      	str	r0, [sp, #20]
}
 8011d78:	b007      	add	sp, #28
 8011d7a:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8011d7e:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011d82:	f88d 3004 	strb.w	r3, [sp, #4]
 8011d86:	2304      	movs	r3, #4
 8011d88:	f88d 3005 	strb.w	r3, [sp, #5]
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	f88d 3006 	strb.w	r3, [sp, #6]
 8011d92:	2348      	movs	r3, #72	; 0x48
 8011d94:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8011d98:	4b44      	ldr	r3, [pc, #272]	; (8011eac <RegionUS915GetPhyParam+0x188>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8011da0:	9202      	str	r2, [sp, #8]
 8011da2:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8011da4:	a801      	add	r0, sp, #4
 8011da6:	f7ff f8dd 	bl	8010f64 <RegionCommonGetNextLowerTxDr>
 8011daa:	9004      	str	r0, [sp, #16]
            break;
 8011dac:	e7e2      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8011dae:	2340      	movs	r3, #64	; 0x40
 8011db0:	9304      	str	r3, [sp, #16]
            break;
 8011db2:	e7df      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8011db4:	2320      	movs	r3, #32
 8011db6:	9304      	str	r3, [sp, #16]
            break;
 8011db8:	e7dc      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8011dba:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011dbe:	4a3c      	ldr	r2, [pc, #240]	; (8011eb0 <RegionUS915GetPhyParam+0x18c>)
 8011dc0:	5cd3      	ldrb	r3, [r2, r3]
 8011dc2:	9304      	str	r3, [sp, #16]
            break;
 8011dc4:	e7d6      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8011dc6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011dca:	4a3a      	ldr	r2, [pc, #232]	; (8011eb4 <RegionUS915GetPhyParam+0x190>)
 8011dcc:	5cd3      	ldrb	r3, [r2, r3]
 8011dce:	9304      	str	r3, [sp, #16]
            break;
 8011dd0:	e7d0      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 8011dd2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8011dd6:	9304      	str	r3, [sp, #16]
            break;
 8011dd8:	e7cc      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8011dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011dde:	9304      	str	r3, [sp, #16]
            break;
 8011de0:	e7c8      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8011de2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8011de6:	9304      	str	r3, [sp, #16]
            break;
 8011de8:	e7c4      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8011dea:	f241 3388 	movw	r3, #5000	; 0x1388
 8011dee:	9304      	str	r3, [sp, #16]
            break;
 8011df0:	e7c0      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8011df2:	f241 7370 	movw	r3, #6000	; 0x1770
 8011df6:	9304      	str	r3, [sp, #16]
            break;
 8011df8:	e7bc      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8011dfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011dfe:	482e      	ldr	r0, [pc, #184]	; (8011eb8 <RegionUS915GetPhyParam+0x194>)
 8011e00:	f001 fc2a 	bl	8013658 <randr>
 8011e04:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8011e08:	9004      	str	r0, [sp, #16]
            break;
 8011e0a:	e7b3      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 8011e0c:	4b2b      	ldr	r3, [pc, #172]	; (8011ebc <RegionUS915GetPhyParam+0x198>)
 8011e0e:	9304      	str	r3, [sp, #16]
            break;
 8011e10:	e7b0      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 8011e12:	2308      	movs	r3, #8
 8011e14:	9304      	str	r3, [sp, #16]
            break;
 8011e16:	e7ad      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8011e18:	4b24      	ldr	r3, [pc, #144]	; (8011eac <RegionUS915GetPhyParam+0x188>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8011e20:	9304      	str	r3, [sp, #16]
            break;
 8011e22:	e7a7      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8011e24:	4b21      	ldr	r3, [pc, #132]	; (8011eac <RegionUS915GetPhyParam+0x188>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8011e2c:	9304      	str	r3, [sp, #16]
            break;
 8011e2e:	e7a1      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8011e30:	2348      	movs	r3, #72	; 0x48
 8011e32:	9304      	str	r3, [sp, #16]
            break;
 8011e34:	e79e      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8011e36:	4b1d      	ldr	r3, [pc, #116]	; (8011eac <RegionUS915GetPhyParam+0x188>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	9304      	str	r3, [sp, #16]
            break;
 8011e3c:	e79a      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8011e3e:	4b20      	ldr	r3, [pc, #128]	; (8011ec0 <RegionUS915GetPhyParam+0x19c>)
 8011e40:	9304      	str	r3, [sp, #16]
            break;
 8011e42:	e797      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	9304      	str	r3, [sp, #16]
            break;
 8011e48:	e794      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8011e4a:	4a1e      	ldr	r2, [pc, #120]	; (8011ec4 <RegionUS915GetPhyParam+0x1a0>)
 8011e4c:	491b      	ldr	r1, [pc, #108]	; (8011ebc <RegionUS915GetPhyParam+0x198>)
 8011e4e:	7900      	ldrb	r0, [r0, #4]
 8011e50:	f7fe fd12 	bl	8010878 <RegionBaseUSCalcDownlinkFrequency>
 8011e54:	9004      	str	r0, [sp, #16]
            break;
 8011e56:	e78d      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8011e58:	2317      	movs	r3, #23
 8011e5a:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8011e5e:	2304      	movs	r3, #4
 8011e60:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8011e64:	2303      	movs	r3, #3
 8011e66:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8011e6a:	e783      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8011e6c:	2308      	movs	r3, #8
 8011e6e:	9304      	str	r3, [sp, #16]
            break;
 8011e70:	e780      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8011e72:	2308      	movs	r3, #8
 8011e74:	9304      	str	r3, [sp, #16]
            break;
 8011e76:	e77d      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8011e78:	4a12      	ldr	r2, [pc, #72]	; (8011ec4 <RegionUS915GetPhyParam+0x1a0>)
 8011e7a:	4910      	ldr	r1, [pc, #64]	; (8011ebc <RegionUS915GetPhyParam+0x198>)
 8011e7c:	7900      	ldrb	r0, [r0, #4]
 8011e7e:	f7fe fcfb 	bl	8010878 <RegionBaseUSCalcDownlinkFrequency>
 8011e82:	9004      	str	r0, [sp, #16]
            break;
 8011e84:	e776      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8011e86:	2308      	movs	r3, #8
 8011e88:	9304      	str	r3, [sp, #16]
            break;
 8011e8a:	e773      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8011e8c:	2308      	movs	r3, #8
 8011e8e:	9304      	str	r3, [sp, #16]
            break;
 8011e90:	e770      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8011e92:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8011e96:	4a0c      	ldr	r2, [pc, #48]	; (8011ec8 <RegionUS915GetPhyParam+0x1a4>)
 8011e98:	5cd3      	ldrb	r3, [r2, r3]
 8011e9a:	9304      	str	r3, [sp, #16]
            break;
 8011e9c:	e76a      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8011e9e:	490b      	ldr	r1, [pc, #44]	; (8011ecc <RegionUS915GetPhyParam+0x1a8>)
 8011ea0:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8011ea4:	f7ff f882 	bl	8010fac <RegionCommonGetBandwidth>
 8011ea8:	9004      	str	r0, [sp, #16]
            break;
 8011eaa:	e763      	b.n	8011d74 <RegionUS915GetPhyParam+0x50>
 8011eac:	20003d7c 	.word	0x20003d7c
 8011eb0:	08016854 	.word	0x08016854
 8011eb4:	08016844 	.word	0x08016844
 8011eb8:	fffffc18 	.word	0xfffffc18
 8011ebc:	370870a0 	.word	0x370870a0
 8011ec0:	4200999a 	.word	0x4200999a
 8011ec4:	000927c0 	.word	0x000927c0
 8011ec8:	08016834 	.word	0x08016834
 8011ecc:	080167e0 	.word	0x080167e0

08011ed0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8011ed0:	b510      	push	{r4, lr}
 8011ed2:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8011ed4:	4b0b      	ldr	r3, [pc, #44]	; (8011f04 <RegionUS915SetBandTxDone+0x34>)
 8011ed6:	681a      	ldr	r2, [r3, #0]
 8011ed8:	7803      	ldrb	r3, [r0, #0]
 8011eda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011ede:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ee2:	7a5b      	ldrb	r3, [r3, #9]
 8011ee4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8011ee8:	4b07      	ldr	r3, [pc, #28]	; (8011f08 <RegionUS915SetBandTxDone+0x38>)
 8011eea:	681c      	ldr	r4, [r3, #0]
 8011eec:	6903      	ldr	r3, [r0, #16]
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	68c3      	ldr	r3, [r0, #12]
 8011ef2:	7842      	ldrb	r2, [r0, #1]
 8011ef4:	6881      	ldr	r1, [r0, #8]
 8011ef6:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 8011efa:	f7fe fe0c 	bl	8010b16 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8011efe:	b002      	add	sp, #8
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	bf00      	nop
 8011f04:	20003d7c 	.word	0x20003d7c
 8011f08:	20003d74 	.word	0x20003d74

08011f0c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8011f0c:	b510      	push	{r4, lr}
 8011f0e:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8011f10:	2301      	movs	r3, #1
 8011f12:	f8ad 3000 	strh.w	r3, [sp]
 8011f16:	2300      	movs	r3, #0
 8011f18:	f88d 3002 	strb.w	r3, [sp, #2]
 8011f1c:	9301      	str	r3, [sp, #4]
 8011f1e:	9302      	str	r3, [sp, #8]
 8011f20:	9303      	str	r3, [sp, #12]
 8011f22:	9304      	str	r3, [sp, #16]
 8011f24:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 8011f28:	7b04      	ldrb	r4, [r0, #12]
 8011f2a:	b174      	cbz	r4, 8011f4a <RegionUS915InitDefaults+0x3e>
 8011f2c:	3c01      	subs	r4, #1
 8011f2e:	b2e4      	uxtb	r4, r4
 8011f30:	2c01      	cmp	r4, #1
 8011f32:	d87e      	bhi.n	8012032 <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8011f34:	4b40      	ldr	r3, [pc, #256]	; (8012038 <RegionUS915InitDefaults+0x12c>)
 8011f36:	6818      	ldr	r0, [r3, #0]
 8011f38:	2206      	movs	r2, #6
 8011f3a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8011f3e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011f42:	f7fe fdd9 	bl	8010af8 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8011f46:	2300      	movs	r3, #0
 8011f48:	e071      	b.n	801202e <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8011f4a:	6803      	ldr	r3, [r0, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d070      	beq.n	8012032 <RegionUS915InitDefaults+0x126>
 8011f50:	6842      	ldr	r2, [r0, #4]
 8011f52:	2a00      	cmp	r2, #0
 8011f54:	d06d      	beq.n	8012032 <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8011f56:	4939      	ldr	r1, [pc, #228]	; (801203c <RegionUS915InitDefaults+0x130>)
 8011f58:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8011f5a:	4937      	ldr	r1, [pc, #220]	; (8012038 <RegionUS915InitDefaults+0x12c>)
 8011f5c:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 8011f5e:	6880      	ldr	r0, [r0, #8]
 8011f60:	4a37      	ldr	r2, [pc, #220]	; (8012040 <RegionUS915InitDefaults+0x134>)
 8011f62:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8011f64:	2200      	movs	r2, #0
 8011f66:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8011f68:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8011f6a:	2218      	movs	r2, #24
 8011f6c:	4669      	mov	r1, sp
 8011f6e:	f001 fb80 	bl	8013672 <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8011f72:	e011      	b.n	8011f98 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8011f74:	4b30      	ldr	r3, [pc, #192]	; (8012038 <RegionUS915InitDefaults+0x12c>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4932      	ldr	r1, [pc, #200]	; (8012044 <RegionUS915InitDefaults+0x138>)
 8011f7a:	4a33      	ldr	r2, [pc, #204]	; (8012048 <RegionUS915InitDefaults+0x13c>)
 8011f7c:	fb01 2204 	mla	r2, r1, r4, r2
 8011f80:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8011f84:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8011f88:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8011f8c:	2230      	movs	r2, #48	; 0x30
 8011f8e:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8011f90:	2200      	movs	r2, #0
 8011f92:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8011f94:	3401      	adds	r4, #1
 8011f96:	b2e4      	uxtb	r4, r4
 8011f98:	2c3f      	cmp	r4, #63	; 0x3f
 8011f9a:	d9eb      	bls.n	8011f74 <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8011f9c:	2340      	movs	r3, #64	; 0x40
 8011f9e:	2b47      	cmp	r3, #71	; 0x47
 8011fa0:	d814      	bhi.n	8011fcc <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8011fa2:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 8011fa6:	4a24      	ldr	r2, [pc, #144]	; (8012038 <RegionUS915InitDefaults+0x12c>)
 8011fa8:	6812      	ldr	r2, [r2, #0]
 8011faa:	4c28      	ldr	r4, [pc, #160]	; (801204c <RegionUS915InitDefaults+0x140>)
 8011fac:	4928      	ldr	r1, [pc, #160]	; (8012050 <RegionUS915InitDefaults+0x144>)
 8011fae:	fb04 1100 	mla	r1, r4, r0, r1
 8011fb2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8011fb6:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8011fba:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8011fbe:	2144      	movs	r1, #68	; 0x44
 8011fc0:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	b2db      	uxtb	r3, r3
 8011fca:	e7e8      	b.n	8011f9e <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8011fcc:	4c1a      	ldr	r4, [pc, #104]	; (8012038 <RegionUS915InitDefaults+0x12c>)
 8011fce:	6820      	ldr	r0, [r4, #0]
 8011fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011fd4:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8011fd8:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8011fdc:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8011fe0:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8011fe4:	23ff      	movs	r3, #255	; 0xff
 8011fe6:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8011fea:	2300      	movs	r3, #0
 8011fec:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8011ff0:	2206      	movs	r2, #6
 8011ff2:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 8011ff6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8011ffa:	f7fe fd7d 	bl	8010af8 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8011ffe:	6821      	ldr	r1, [r4, #0]
 8012000:	2206      	movs	r2, #6
 8012002:	f501 7158 	add.w	r1, r1, #864	; 0x360
 8012006:	4b0d      	ldr	r3, [pc, #52]	; (801203c <RegionUS915InitDefaults+0x130>)
 8012008:	6818      	ldr	r0, [r3, #0]
 801200a:	f7fe fd75 	bl	8010af8 <RegionCommonChanMaskCopy>
            break;
 801200e:	e010      	b.n	8012032 <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8012010:	4a0a      	ldr	r2, [pc, #40]	; (801203c <RegionUS915InitDefaults+0x130>)
 8012012:	6811      	ldr	r1, [r2, #0]
 8012014:	4a08      	ldr	r2, [pc, #32]	; (8012038 <RegionUS915InitDefaults+0x12c>)
 8012016:	6812      	ldr	r2, [r2, #0]
 8012018:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 801201c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8012020:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8012024:	4002      	ands	r2, r0
 8012026:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801202a:	3301      	adds	r3, #1
 801202c:	b2db      	uxtb	r3, r3
 801202e:	2b05      	cmp	r3, #5
 8012030:	d9ee      	bls.n	8012010 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 8012032:	b006      	add	sp, #24
 8012034:	bd10      	pop	{r4, pc}
 8012036:	bf00      	nop
 8012038:	20003d7c 	.word	0x20003d7c
 801203c:	20003d78 	.word	0x20003d78
 8012040:	20003d74 	.word	0x20003d74
 8012044:	00030d40 	.word	0x00030d40
 8012048:	35c80160 	.word	0x35c80160
 801204c:	00186a00 	.word	0x00186a00
 8012050:	35d2afc0 	.word	0x35d2afc0

08012054 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012054:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 8012056:	290a      	cmp	r1, #10
 8012058:	d833      	bhi.n	80120c2 <RegionUS915Verify+0x6e>
 801205a:	e8df f001 	tbb	[pc, r1]
 801205e:	3206      	.short	0x3206
 8012060:	0a323232 	.word	0x0a323232
 8012064:	28321e14 	.word	0x28321e14
 8012068:	28          	.byte	0x28
 8012069:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801206a:	6800      	ldr	r0, [r0, #0]
 801206c:	f7ff fdf0 	bl	8011c50 <VerifyRfFreq>
 8012070:	e028      	b.n	80120c4 <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8012072:	2204      	movs	r2, #4
 8012074:	2100      	movs	r1, #0
 8012076:	f990 0000 	ldrsb.w	r0, [r0]
 801207a:	f7fe fccc 	bl	8010a16 <RegionCommonValueInRange>
 801207e:	3800      	subs	r0, #0
 8012080:	bf18      	it	ne
 8012082:	2001      	movne	r0, #1
 8012084:	e01e      	b.n	80120c4 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8012086:	2205      	movs	r2, #5
 8012088:	2100      	movs	r1, #0
 801208a:	f990 0000 	ldrsb.w	r0, [r0]
 801208e:	f7fe fcc2 	bl	8010a16 <RegionCommonValueInRange>
 8012092:	3800      	subs	r0, #0
 8012094:	bf18      	it	ne
 8012096:	2001      	movne	r0, #1
 8012098:	e014      	b.n	80120c4 <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801209a:	220d      	movs	r2, #13
 801209c:	2108      	movs	r1, #8
 801209e:	f990 0000 	ldrsb.w	r0, [r0]
 80120a2:	f7fe fcb8 	bl	8010a16 <RegionCommonValueInRange>
 80120a6:	3800      	subs	r0, #0
 80120a8:	bf18      	it	ne
 80120aa:	2001      	movne	r0, #1
 80120ac:	e00a      	b.n	80120c4 <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80120ae:	220e      	movs	r2, #14
 80120b0:	2100      	movs	r1, #0
 80120b2:	f990 0000 	ldrsb.w	r0, [r0]
 80120b6:	f7fe fcae 	bl	8010a16 <RegionCommonValueInRange>
 80120ba:	3800      	subs	r0, #0
 80120bc:	bf18      	it	ne
 80120be:	2001      	movne	r0, #1
 80120c0:	e000      	b.n	80120c4 <RegionUS915Verify+0x70>
    switch( phyAttribute )
 80120c2:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80120c4:	bd08      	pop	{r3, pc}
	...

080120c8 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80120c8:	7a03      	ldrb	r3, [r0, #8]
 80120ca:	2b10      	cmp	r3, #16
 80120cc:	d134      	bne.n	8012138 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80120ce:	6843      	ldr	r3, [r0, #4]
 80120d0:	7bdb      	ldrb	r3, [r3, #15]
 80120d2:	2b01      	cmp	r3, #1
 80120d4:	d130      	bne.n	8012138 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80120d6:	2200      	movs	r2, #0
 80120d8:	4613      	mov	r3, r2
 80120da:	2a04      	cmp	r2, #4
 80120dc:	d82b      	bhi.n	8012136 <RegionUS915ApplyCFList+0x6e>
{
 80120de:	b530      	push	{r4, r5, lr}
 80120e0:	e010      	b.n	8012104 <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80120e2:	4916      	ldr	r1, [pc, #88]	; (801213c <RegionUS915ApplyCFList+0x74>)
 80120e4:	680d      	ldr	r5, [r1, #0]
 80120e6:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 80120ea:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 80120ee:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 80120f2:	4021      	ands	r1, r4
 80120f4:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80120f8:	3301      	adds	r3, #1
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	3202      	adds	r2, #2
 80120fe:	b2d2      	uxtb	r2, r2
 8012100:	2b04      	cmp	r3, #4
 8012102:	d817      	bhi.n	8012134 <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8012104:	6841      	ldr	r1, [r0, #4]
 8012106:	4c0e      	ldr	r4, [pc, #56]	; (8012140 <RegionUS915ApplyCFList+0x78>)
 8012108:	6824      	ldr	r4, [r4, #0]
 801210a:	469c      	mov	ip, r3
 801210c:	5c89      	ldrb	r1, [r1, r2]
 801210e:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 8012112:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8012116:	f8d0 e004 	ldr.w	lr, [r0, #4]
 801211a:	4496      	add	lr, r2
 801211c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8012120:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 8012124:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 8012128:	2b04      	cmp	r3, #4
 801212a:	d1da      	bne.n	80120e2 <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801212c:	b2c9      	uxtb	r1, r1
 801212e:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 8012132:	e7d6      	b.n	80120e2 <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 8012134:	bd30      	pop	{r4, r5, pc}
 8012136:	4770      	bx	lr
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop
 801213c:	20003d78 	.word	0x20003d78
 8012140:	20003d7c 	.word	0x20003d7c

08012144 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8012144:	b570      	push	{r4, r5, r6, lr}
 8012146:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8012148:	2204      	movs	r2, #4
 801214a:	2100      	movs	r1, #0
 801214c:	6800      	ldr	r0, [r0, #0]
 801214e:	f7fe fcbd 	bl	8010acc <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8012152:	2801      	cmp	r0, #1
 8012154:	d031      	beq.n	80121ba <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 8012156:	792c      	ldrb	r4, [r5, #4]
 8012158:	b11c      	cbz	r4, 8012162 <RegionUS915ChanMaskSet+0x1e>
 801215a:	2c01      	cmp	r4, #1
 801215c:	d023      	beq.n	80121a6 <RegionUS915ChanMaskSet+0x62>
 801215e:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 8012160:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8012162:	4e17      	ldr	r6, [pc, #92]	; (80121c0 <RegionUS915ChanMaskSet+0x7c>)
 8012164:	6830      	ldr	r0, [r6, #0]
 8012166:	2206      	movs	r2, #6
 8012168:	6829      	ldr	r1, [r5, #0]
 801216a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801216e:	f7fe fcc3 	bl	8010af8 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8012172:	6830      	ldr	r0, [r6, #0]
 8012174:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 8012178:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801217c:	2300      	movs	r3, #0
 801217e:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8012182:	e00c      	b.n	801219e <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8012184:	4b0f      	ldr	r3, [pc, #60]	; (80121c4 <RegionUS915ChanMaskSet+0x80>)
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 801218c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012190:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 8012194:	400b      	ands	r3, r1
 8012196:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801219a:	3401      	adds	r4, #1
 801219c:	b2e4      	uxtb	r4, r4
 801219e:	2c05      	cmp	r4, #5
 80121a0:	d9f0      	bls.n	8012184 <RegionUS915ChanMaskSet+0x40>
    return true;
 80121a2:	2001      	movs	r0, #1
 80121a4:	e7dc      	b.n	8012160 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80121a6:	4b06      	ldr	r3, [pc, #24]	; (80121c0 <RegionUS915ChanMaskSet+0x7c>)
 80121a8:	6818      	ldr	r0, [r3, #0]
 80121aa:	2206      	movs	r2, #6
 80121ac:	6829      	ldr	r1, [r5, #0]
 80121ae:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 80121b2:	f7fe fca1 	bl	8010af8 <RegionCommonChanMaskCopy>
    return true;
 80121b6:	2001      	movs	r0, #1
            break;
 80121b8:	e7d2      	b.n	8012160 <RegionUS915ChanMaskSet+0x1c>
        return false;
 80121ba:	2000      	movs	r0, #0
 80121bc:	e7d0      	b.n	8012160 <RegionUS915ChanMaskSet+0x1c>
 80121be:	bf00      	nop
 80121c0:	20003d7c 	.word	0x20003d7c
 80121c4:	20003d78 	.word	0x20003d78

080121c8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80121c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ca:	b083      	sub	sp, #12
 80121cc:	460e      	mov	r6, r1
 80121ce:	4617      	mov	r7, r2
 80121d0:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80121d2:	280d      	cmp	r0, #13
 80121d4:	bfa8      	it	ge
 80121d6:	200d      	movge	r0, #13
 80121d8:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80121da:	4d0f      	ldr	r5, [pc, #60]	; (8012218 <RegionUS915ComputeRxWindowParameters+0x50>)
 80121dc:	4629      	mov	r1, r5
 80121de:	f7fe fee5 	bl	8010fac <RegionCommonGetBandwidth>
 80121e2:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80121e4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80121e8:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80121ec:	4a0b      	ldr	r2, [pc, #44]	; (801221c <RegionUS915ComputeRxWindowParameters+0x54>)
 80121ee:	5cd0      	ldrb	r0, [r2, r3]
 80121f0:	f7fe fda8 	bl	8010d44 <RegionCommonComputeSymbolTimeLoRa>
 80121f4:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80121f6:	4b0a      	ldr	r3, [pc, #40]	; (8012220 <RegionUS915ComputeRxWindowParameters+0x58>)
 80121f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121fa:	4798      	blx	r3
 80121fc:	4603      	mov	r3, r0
 80121fe:	f104 020c 	add.w	r2, r4, #12
 8012202:	9201      	str	r2, [sp, #4]
 8012204:	3408      	adds	r4, #8
 8012206:	9400      	str	r4, [sp, #0]
 8012208:	463a      	mov	r2, r7
 801220a:	4631      	mov	r1, r6
 801220c:	4628      	mov	r0, r5
 801220e:	f7fe fda7 	bl	8010d60 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8012212:	b003      	add	sp, #12
 8012214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012216:	bf00      	nop
 8012218:	080167e0 	.word	0x080167e0
 801221c:	08016834 	.word	0x08016834
 8012220:	08016dc8 	.word	0x08016dc8

08012224 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012228:	b08b      	sub	sp, #44	; 0x2c
 801222a:	4604      	mov	r4, r0
 801222c:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801222e:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 8012232:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8012234:	4b22      	ldr	r3, [pc, #136]	; (80122c0 <RegionUS915RxConfig+0x9c>)
 8012236:	685b      	ldr	r3, [r3, #4]
 8012238:	4798      	blx	r3
 801223a:	2800      	cmp	r0, #0
 801223c:	d13d      	bne.n	80122ba <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801223e:	7ce3      	ldrb	r3, [r4, #19]
 8012240:	b933      	cbnz	r3, 8012250 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8012242:	7827      	ldrb	r7, [r4, #0]
 8012244:	f007 0307 	and.w	r3, r7, #7
 8012248:	4a1e      	ldr	r2, [pc, #120]	; (80122c4 <RegionUS915RxConfig+0xa0>)
 801224a:	4f1f      	ldr	r7, [pc, #124]	; (80122c8 <RegionUS915RxConfig+0xa4>)
 801224c:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8012250:	4b1e      	ldr	r3, [pc, #120]	; (80122cc <RegionUS915RxConfig+0xa8>)
 8012252:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 8012256:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80122c0 <RegionUS915RxConfig+0x9c>
 801225a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801225e:	4638      	mov	r0, r7
 8012260:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8012262:	f8d8 8018 	ldr.w	r8, [r8, #24]
 8012266:	7ca3      	ldrb	r3, [r4, #18]
 8012268:	9309      	str	r3, [sp, #36]	; 0x24
 801226a:	2001      	movs	r0, #1
 801226c:	9008      	str	r0, [sp, #32]
 801226e:	2200      	movs	r2, #0
 8012270:	9207      	str	r2, [sp, #28]
 8012272:	9206      	str	r2, [sp, #24]
 8012274:	9205      	str	r2, [sp, #20]
 8012276:	9204      	str	r2, [sp, #16]
 8012278:	9203      	str	r2, [sp, #12]
 801227a:	8923      	ldrh	r3, [r4, #8]
 801227c:	9302      	str	r3, [sp, #8]
 801227e:	2308      	movs	r3, #8
 8012280:	9301      	str	r3, [sp, #4]
 8012282:	9200      	str	r2, [sp, #0]
 8012284:	4603      	mov	r3, r0
 8012286:	464a      	mov	r2, r9
 8012288:	78a1      	ldrb	r1, [r4, #2]
 801228a:	47c0      	blx	r8

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801228c:	7c63      	ldrb	r3, [r4, #17]
 801228e:	b18b      	cbz	r3, 80122b4 <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8012290:	4b0f      	ldr	r3, [pc, #60]	; (80122d0 <RegionUS915RxConfig+0xac>)
 8012292:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8012294:	4b0a      	ldr	r3, [pc, #40]	; (80122c0 <RegionUS915RxConfig+0x9c>)
 8012296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012298:	310d      	adds	r1, #13
 801229a:	b2c9      	uxtb	r1, r1
 801229c:	2001      	movs	r0, #1
 801229e:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80122a0:	4632      	mov	r2, r6
 80122a2:	4639      	mov	r1, r7
 80122a4:	7ce0      	ldrb	r0, [r4, #19]
 80122a6:	f7fe fe93 	bl	8010fd0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80122aa:	702e      	strb	r6, [r5, #0]
    return true;
 80122ac:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80122ae:	b00b      	add	sp, #44	; 0x2c
 80122b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80122b4:	4b07      	ldr	r3, [pc, #28]	; (80122d4 <RegionUS915RxConfig+0xb0>)
 80122b6:	5d99      	ldrb	r1, [r3, r6]
 80122b8:	e7ec      	b.n	8012294 <RegionUS915RxConfig+0x70>
        return false;
 80122ba:	2000      	movs	r0, #0
 80122bc:	e7f7      	b.n	80122ae <RegionUS915RxConfig+0x8a>
 80122be:	bf00      	nop
 80122c0:	08016dc8 	.word	0x08016dc8
 80122c4:	000927c0 	.word	0x000927c0
 80122c8:	370870a0 	.word	0x370870a0
 80122cc:	08016834 	.word	0x08016834
 80122d0:	08016844 	.word	0x08016844
 80122d4:	08016854 	.word	0x08016854

080122d8 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80122d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122dc:	b08d      	sub	sp, #52	; 0x34
 80122de:	4604      	mov	r4, r0
 80122e0:	468b      	mov	fp, r1
 80122e2:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80122e4:	f990 2001 	ldrsb.w	r2, [r0, #1]
 80122e8:	4b32      	ldr	r3, [pc, #200]	; (80123b4 <RegionUS915TxConfig+0xdc>)
 80122ea:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80122ee:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80123b8 <RegionUS915TxConfig+0xe0>
 80122f2:	f8d9 3000 	ldr.w	r3, [r9]
 80122f6:	7801      	ldrb	r1, [r0, #0]
 80122f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80122fc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8012300:	7a49      	ldrb	r1, [r1, #9]
 8012302:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012306:	482d      	ldr	r0, [pc, #180]	; (80123bc <RegionUS915TxConfig+0xe4>)
 8012308:	6800      	ldr	r0, [r0, #0]
 801230a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801230e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012312:	f991 1002 	ldrsb.w	r1, [r1, #2]
 8012316:	f994 0002 	ldrsb.w	r0, [r4, #2]
 801231a:	f7ff fce7 	bl	8011cec <LimitTxPower>
 801231e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8012320:	4927      	ldr	r1, [pc, #156]	; (80123c0 <RegionUS915TxConfig+0xe8>)
 8012322:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012326:	f7fe fe41 	bl	8010fac <RegionCommonGetBandwidth>
 801232a:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801232c:	2200      	movs	r2, #0
 801232e:	4925      	ldr	r1, [pc, #148]	; (80123c4 <RegionUS915TxConfig+0xec>)
 8012330:	4630      	mov	r0, r6
 8012332:	f7fe fd51 	bl	8010dd8 <RegionCommonComputeTxPower>
 8012336:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8012338:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80123c8 <RegionUS915TxConfig+0xf0>
 801233c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8012340:	f8d9 1000 	ldr.w	r1, [r9]
 8012344:	7823      	ldrb	r3, [r4, #0]
 8012346:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801234a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 801234e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8012350:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8012354:	9308      	str	r3, [sp, #32]
 8012356:	2200      	movs	r2, #0
 8012358:	9207      	str	r2, [sp, #28]
 801235a:	9206      	str	r2, [sp, #24]
 801235c:	9205      	str	r2, [sp, #20]
 801235e:	2501      	movs	r5, #1
 8012360:	9504      	str	r5, [sp, #16]
 8012362:	9203      	str	r2, [sp, #12]
 8012364:	2308      	movs	r3, #8
 8012366:	9302      	str	r3, [sp, #8]
 8012368:	9501      	str	r5, [sp, #4]
 801236a:	f8cd a000 	str.w	sl, [sp]
 801236e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012370:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012372:	4628      	mov	r0, r5
 8012374:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8012378:	47e0      	blx	ip
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801237a:	f8d9 2000 	ldr.w	r2, [r9]
 801237e:	7823      	ldrb	r3, [r4, #0]
 8012380:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012384:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8012388:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801238c:	f7fe fe42 	bl	8011014 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8012390:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8012394:	7b21      	ldrb	r1, [r4, #12]
 8012396:	4628      	mov	r0, r5
 8012398:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801239a:	89a1      	ldrh	r1, [r4, #12]
 801239c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80123a0:	f7ff fc86 	bl	8011cb0 <GetTimeOnAir>
 80123a4:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 80123a6:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80123aa:	4628      	mov	r0, r5
 80123ac:	b00d      	add	sp, #52	; 0x34
 80123ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b2:	bf00      	nop
 80123b4:	08016834 	.word	0x08016834
 80123b8:	20003d7c 	.word	0x20003d7c
 80123bc:	20003d74 	.word	0x20003d74
 80123c0:	080167e0 	.word	0x080167e0
 80123c4:	41f00000 	.word	0x41f00000
 80123c8:	08016dc8 	.word	0x08016dc8

080123cc <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80123cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123d0:	b091      	sub	sp, #68	; 0x44
 80123d2:	4605      	mov	r5, r0
 80123d4:	4688      	mov	r8, r1
 80123d6:	4617      	mov	r7, r2
 80123d8:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80123da:	2400      	movs	r4, #0
 80123dc:	940e      	str	r4, [sp, #56]	; 0x38
 80123de:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 80123e2:	940b      	str	r4, [sp, #44]	; 0x2c
 80123e4:	940c      	str	r4, [sp, #48]	; 0x30
 80123e6:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80123e8:	4b97      	ldr	r3, [pc, #604]	; (8012648 <RegionUS915LinkAdrReq+0x27c>)
 80123ea:	6819      	ldr	r1, [r3, #0]
 80123ec:	2206      	movs	r2, #6
 80123ee:	f501 7158 	add.w	r1, r1, #864	; 0x360
 80123f2:	a80b      	add	r0, sp, #44	; 0x2c
 80123f4:	f7fe fb80 	bl	8010af8 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80123f8:	e00d      	b.n	8012416 <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80123fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123fe:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 8012402:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 8012406:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 801240a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801240e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8012412:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012416:	7a2b      	ldrb	r3, [r5, #8]
 8012418:	42a3      	cmp	r3, r4
 801241a:	f240 8081 	bls.w	8012520 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801241e:	6868      	ldr	r0, [r5, #4]
 8012420:	a90e      	add	r1, sp, #56	; 0x38
 8012422:	4420      	add	r0, r4
 8012424:	f7fe fc18 	bl	8010c58 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8012428:	2800      	cmp	r0, #0
 801242a:	d079      	beq.n	8012520 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 801242c:	4404      	add	r4, r0
 801242e:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 8012430:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 8012434:	f1bc 0f06 	cmp.w	ip, #6
 8012438:	d0df      	beq.n	80123fa <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801243a:	f1bc 0f07 	cmp.w	ip, #7
 801243e:	d00a      	beq.n	8012456 <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8012440:	f1bc 0f05 	cmp.w	ip, #5
 8012444:	d068      	beq.n	8012518 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8012446:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801244a:	aa10      	add	r2, sp, #64	; 0x40
 801244c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8012450:	f82c 3c14 	strh.w	r3, [ip, #-20]
 8012454:	e7df      	b.n	8012416 <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 8012456:	2300      	movs	r3, #0
 8012458:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 801245c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8012460:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 8012464:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8012468:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 801246c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8012470:	e7d1      	b.n	8012416 <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 8012472:	aa10      	add	r2, sp, #64	; 0x40
 8012474:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8012478:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801247c:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8012480:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 8012484:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012488:	4313      	orrs	r3, r2
 801248a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 801248e:	3101      	adds	r1, #1
 8012490:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 8012492:	f10c 0c01 	add.w	ip, ip, #1
 8012496:	fa5f fc8c 	uxtb.w	ip, ip
 801249a:	f1bc 0f07 	cmp.w	ip, #7
 801249e:	d8ba      	bhi.n	8012416 <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80124a0:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80124a4:	2301      	movs	r3, #1
 80124a6:	fa03 f30c 	lsl.w	r3, r3, ip
 80124aa:	421a      	tst	r2, r3
 80124ac:	d011      	beq.n	80124d2 <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 80124ae:	f01c 0f01 	tst.w	ip, #1
 80124b2:	d1de      	bne.n	8012472 <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 80124b4:	aa10      	add	r2, sp, #64	; 0x40
 80124b6:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80124ba:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80124be:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80124c2:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80124c6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80124ca:	4313      	orrs	r3, r2
 80124cc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80124d0:	e7df      	b.n	8012492 <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 80124d2:	f01c 0f01 	tst.w	ip, #1
 80124d6:	d10f      	bne.n	80124f8 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 80124d8:	aa10      	add	r2, sp, #64	; 0x40
 80124da:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80124de:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80124e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80124e6:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 80124ea:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80124ee:	ea22 0303 	bic.w	r3, r2, r3
 80124f2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80124f6:	e7cc      	b.n	8012492 <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 80124f8:	aa10      	add	r2, sp, #64	; 0x40
 80124fa:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80124fe:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 8012502:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8012506:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801250a:	ea22 0303 	bic.w	r3, r2, r3
 801250e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 8012512:	3101      	adds	r1, #1
 8012514:	b2c9      	uxtb	r1, r1
 8012516:	e7bc      	b.n	8012492 <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 8012518:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 801251c:	4661      	mov	r1, ip
 801251e:	e7bc      	b.n	801249a <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8012520:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8012524:	2b03      	cmp	r3, #3
 8012526:	dd58      	ble.n	80125da <RegionUS915LinkAdrReq+0x20e>
 8012528:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801252c:	2302      	movs	r3, #2
 801252e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8012532:	7a6b      	ldrb	r3, [r5, #9]
 8012534:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8012538:	a809      	add	r0, sp, #36	; 0x24
 801253a:	f7ff fbf3 	bl	8011d24 <RegionUS915GetPhyParam>
 801253e:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8012540:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8012544:	7aab      	ldrb	r3, [r5, #10]
 8012546:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801254a:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801254e:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8012552:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 8012556:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801255a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 801255e:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8012562:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8012566:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801256a:	f995 300c 	ldrsb.w	r3, [r5, #12]
 801256e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8012572:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8012576:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801257a:	2348      	movs	r3, #72	; 0x48
 801257c:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8012580:	ab0b      	add	r3, sp, #44	; 0x2c
 8012582:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8012584:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8012588:	2304      	movs	r3, #4
 801258a:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801258e:	4b2e      	ldr	r3, [pc, #184]	; (8012648 <RegionUS915LinkAdrReq+0x27c>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8012594:	230e      	movs	r3, #14
 8012596:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801259a:	2300      	movs	r3, #0
 801259c:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80125a0:	682b      	ldr	r3, [r5, #0]
 80125a2:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80125a4:	ab0e      	add	r3, sp, #56	; 0x38
 80125a6:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80125aa:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 80125ae:	4668      	mov	r0, sp
 80125b0:	f7fe fb70 	bl	8010c94 <RegionCommonLinkAdrReqVerifyParams>
 80125b4:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80125b6:	2807      	cmp	r0, #7
 80125b8:	d01c      	beq.n	80125f4 <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80125ba:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80125be:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 80125c2:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 80125c6:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80125c8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80125cc:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 80125ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80125d0:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 80125d2:	4628      	mov	r0, r5
 80125d4:	b011      	add	sp, #68	; 0x44
 80125d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80125da:	2204      	movs	r2, #4
 80125dc:	2100      	movs	r1, #0
 80125de:	a80b      	add	r0, sp, #44	; 0x2c
 80125e0:	f7fe fa74 	bl	8010acc <RegionCommonCountChannels>
 80125e4:	2801      	cmp	r0, #1
 80125e6:	d902      	bls.n	80125ee <RegionUS915LinkAdrReq+0x222>
 80125e8:	f04f 0907 	mov.w	r9, #7
 80125ec:	e79e      	b.n	801252c <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 80125ee:	f04f 0906 	mov.w	r9, #6
 80125f2:	e79b      	b.n	801252c <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 80125f4:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8012648 <RegionUS915LinkAdrReq+0x27c>
 80125f8:	f8d9 0000 	ldr.w	r0, [r9]
 80125fc:	2206      	movs	r2, #6
 80125fe:	a90b      	add	r1, sp, #44	; 0x2c
 8012600:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8012604:	f7fe fa78 	bl	8010af8 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8012608:	4b10      	ldr	r3, [pc, #64]	; (801264c <RegionUS915LinkAdrReq+0x280>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f8d9 2000 	ldr.w	r2, [r9]
 8012610:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 8012614:	8818      	ldrh	r0, [r3, #0]
 8012616:	4001      	ands	r1, r0
 8012618:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801261a:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 801261e:	8858      	ldrh	r0, [r3, #2]
 8012620:	4001      	ands	r1, r0
 8012622:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8012624:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8012628:	8898      	ldrh	r0, [r3, #4]
 801262a:	4001      	ands	r1, r0
 801262c:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801262e:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 8012632:	88d8      	ldrh	r0, [r3, #6]
 8012634:	4001      	ands	r1, r0
 8012636:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8012638:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 801263c:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801263e:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8012642:	815a      	strh	r2, [r3, #10]
 8012644:	e7b9      	b.n	80125ba <RegionUS915LinkAdrReq+0x1ee>
 8012646:	bf00      	nop
 8012648:	20003d7c 	.word	0x20003d7c
 801264c:	20003d78 	.word	0x20003d78

08012650 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012650:	b538      	push	{r3, r4, r5, lr}
 8012652:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8012654:	6840      	ldr	r0, [r0, #4]
 8012656:	f7ff fafb 	bl	8011c50 <VerifyRfFreq>
 801265a:	b310      	cbz	r0, 80126a2 <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 801265c:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801265e:	220d      	movs	r2, #13
 8012660:	2108      	movs	r1, #8
 8012662:	f994 0000 	ldrsb.w	r0, [r4]
 8012666:	f7fe f9d6 	bl	8010a16 <RegionCommonValueInRange>
 801266a:	b908      	cbnz	r0, 8012670 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 801266c:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8012670:	2207      	movs	r2, #7
 8012672:	2105      	movs	r1, #5
 8012674:	f994 0000 	ldrsb.w	r0, [r4]
 8012678:	f7fe f9cd 	bl	8010a16 <RegionCommonValueInRange>
 801267c:	2801      	cmp	r0, #1
 801267e:	d003      	beq.n	8012688 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8012680:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8012684:	2b0d      	cmp	r3, #13
 8012686:	dd01      	ble.n	801268c <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 8012688:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801268c:	2203      	movs	r2, #3
 801268e:	2100      	movs	r1, #0
 8012690:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012694:	f7fe f9bf 	bl	8010a16 <RegionCommonValueInRange>
 8012698:	b908      	cbnz	r0, 801269e <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801269a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 801269e:	4628      	mov	r0, r5
 80126a0:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80126a2:	2506      	movs	r5, #6
 80126a4:	e7db      	b.n	801265e <RegionUS915RxParamSetupReq+0xe>

080126a6 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 80126a6:	f04f 30ff 	mov.w	r0, #4294967295
 80126aa:	4770      	bx	lr

080126ac <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80126ac:	f04f 30ff 	mov.w	r0, #4294967295
 80126b0:	4770      	bx	lr

080126b2 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80126b2:	f04f 30ff 	mov.w	r0, #4294967295
 80126b6:	4770      	bx	lr

080126b8 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80126b8:	b999      	cbnz	r1, 80126e2 <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80126ba:	4b0e      	ldr	r3, [pc, #56]	; (80126f4 <RegionUS915AlternateDr+0x3c>)
 80126bc:	681a      	ldr	r2, [r3, #0]
 80126be:	7b53      	ldrb	r3, [r2, #13]
 80126c0:	3301      	adds	r3, #1
 80126c2:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80126c4:	4b0b      	ldr	r3, [pc, #44]	; (80126f4 <RegionUS915AlternateDr+0x3c>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	7b5a      	ldrb	r2, [r3, #13]
 80126ca:	4b0b      	ldr	r3, [pc, #44]	; (80126f8 <RegionUS915AlternateDr+0x40>)
 80126cc:	fba3 1302 	umull	r1, r3, r3, r2
 80126d0:	085b      	lsrs	r3, r3, #1
 80126d2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80126dc:	d007      	beq.n	80126ee <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 80126de:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 80126e0:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 80126e2:	4b04      	ldr	r3, [pc, #16]	; (80126f4 <RegionUS915AlternateDr+0x3c>)
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	7b53      	ldrb	r3, [r2, #13]
 80126e8:	3b01      	subs	r3, #1
 80126ea:	7353      	strb	r3, [r2, #13]
 80126ec:	e7ea      	b.n	80126c4 <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 80126ee:	2004      	movs	r0, #4
 80126f0:	4770      	bx	lr
 80126f2:	bf00      	nop
 80126f4:	20003d78 	.word	0x20003d78
 80126f8:	38e38e39 	.word	0x38e38e39

080126fc <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80126fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012700:	b0a4      	sub	sp, #144	; 0x90
 8012702:	4604      	mov	r4, r0
 8012704:	460e      	mov	r6, r1
 8012706:	4690      	mov	r8, r2
 8012708:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801270a:	2500      	movs	r5, #0
 801270c:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8012710:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8012714:	9511      	str	r5, [sp, #68]	; 0x44
 8012716:	2244      	movs	r2, #68	; 0x44
 8012718:	4629      	mov	r1, r5
 801271a:	a812      	add	r0, sp, #72	; 0x48
 801271c:	f003 fb5c 	bl	8015dd8 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8012720:	2204      	movs	r2, #4
 8012722:	4629      	mov	r1, r5
 8012724:	4b49      	ldr	r3, [pc, #292]	; (801284c <RegionUS915NextChannel+0x150>)
 8012726:	6818      	ldr	r0, [r3, #0]
 8012728:	f7fe f9d0 	bl	8010acc <RegionCommonCountChannels>
 801272c:	2800      	cmp	r0, #0
 801272e:	d052      	beq.n	80127d6 <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8012730:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8012734:	2b03      	cmp	r3, #3
 8012736:	dd08      	ble.n	801274a <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8012738:	4b44      	ldr	r3, [pc, #272]	; (801284c <RegionUS915NextChannel+0x150>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	7a1a      	ldrb	r2, [r3, #8]
 801273e:	b922      	cbnz	r2, 801274a <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8012740:	4a43      	ldr	r2, [pc, #268]	; (8012850 <RegionUS915NextChannel+0x154>)
 8012742:	6812      	ldr	r2, [r2, #0]
 8012744:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8012748:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801274a:	7a63      	ldrb	r3, [r4, #9]
 801274c:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8012750:	7a23      	ldrb	r3, [r4, #8]
 8012752:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8012756:	4b3d      	ldr	r3, [pc, #244]	; (801284c <RegionUS915NextChannel+0x150>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801275c:	4b3c      	ldr	r3, [pc, #240]	; (8012850 <RegionUS915NextChannel+0x154>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8012762:	4b3c      	ldr	r3, [pc, #240]	; (8012854 <RegionUS915NextChannel+0x158>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8012768:	2348      	movs	r3, #72	; 0x48
 801276a:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 801276e:	2300      	movs	r3, #0
 8012770:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8012776:	6863      	ldr	r3, [r4, #4]
 8012778:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801277a:	7aa3      	ldrb	r3, [r4, #10]
 801277c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8012780:	2301      	movs	r3, #1
 8012782:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8012786:	ab03      	add	r3, sp, #12
 8012788:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801278a:	ab0c      	add	r3, sp, #48	; 0x30
 801278c:	f104 020c 	add.w	r2, r4, #12
 8012790:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012794:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8012798:	7d23      	ldrb	r3, [r4, #20]
 801279a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801279e:	8ae1      	ldrh	r1, [r4, #22]
 80127a0:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80127a4:	f7ff fa84 	bl	8011cb0 <GetTimeOnAir>
 80127a8:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80127aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80127ae:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80127b2:	9300      	str	r3, [sp, #0]
 80127b4:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 80127b8:	aa11      	add	r2, sp, #68	; 0x44
 80127ba:	4639      	mov	r1, r7
 80127bc:	a809      	add	r0, sp, #36	; 0x24
 80127be:	f7fe fb87 	bl	8010ed0 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80127c2:	4605      	mov	r5, r0
 80127c4:	2800      	cmp	r0, #0
 80127c6:	d13c      	bne.n	8012842 <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 80127c8:	7a63      	ldrb	r3, [r4, #9]
 80127ca:	b98b      	cbnz	r3, 80127f0 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80127cc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80127d0:	b1db      	cbz	r3, 801280a <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80127d2:	4603      	mov	r3, r0
 80127d4:	e026      	b.n	8012824 <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80127d6:	4d1d      	ldr	r5, [pc, #116]	; (801284c <RegionUS915NextChannel+0x150>)
 80127d8:	4b1d      	ldr	r3, [pc, #116]	; (8012850 <RegionUS915NextChannel+0x154>)
 80127da:	6819      	ldr	r1, [r3, #0]
 80127dc:	2204      	movs	r2, #4
 80127de:	f501 7158 	add.w	r1, r1, #864	; 0x360
 80127e2:	6828      	ldr	r0, [r5, #0]
 80127e4:	f7fe f988 	bl	8010af8 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80127e8:	682b      	ldr	r3, [r5, #0]
 80127ea:	2200      	movs	r2, #0
 80127ec:	731a      	strb	r2, [r3, #12]
 80127ee:	e79f      	b.n	8012730 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80127f0:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 80127f4:	3901      	subs	r1, #1
 80127f6:	f000 ff2f 	bl	8013658 <randr>
 80127fa:	f100 0390 	add.w	r3, r0, #144	; 0x90
 80127fe:	eb0d 0003 	add.w	r0, sp, r3
 8012802:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 8012806:	7033      	strb	r3, [r6, #0]
 8012808:	e015      	b.n	8012836 <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801280a:	4b10      	ldr	r3, [pc, #64]	; (801284c <RegionUS915NextChannel+0x150>)
 801280c:	6818      	ldr	r0, [r3, #0]
 801280e:	4632      	mov	r2, r6
 8012810:	f100 010c 	add.w	r1, r0, #12
 8012814:	f7fd ffe2 	bl	80107dc <RegionBaseUSComputeNext125kHzJoinChannel>
 8012818:	2803      	cmp	r0, #3
 801281a:	d10c      	bne.n	8012836 <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801281c:	4605      	mov	r5, r0
 801281e:	e010      	b.n	8012842 <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8012820:	3301      	adds	r3, #1
 8012822:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8012824:	4a09      	ldr	r2, [pc, #36]	; (801284c <RegionUS915NextChannel+0x150>)
 8012826:	6812      	ldr	r2, [r2, #0]
 8012828:	7a10      	ldrb	r0, [r2, #8]
 801282a:	4118      	asrs	r0, r3
 801282c:	f010 0f01 	tst.w	r0, #1
 8012830:	d0f6      	beq.n	8012820 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 8012832:	3340      	adds	r3, #64	; 0x40
 8012834:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8012836:	2248      	movs	r2, #72	; 0x48
 8012838:	7831      	ldrb	r1, [r6, #0]
 801283a:	4b04      	ldr	r3, [pc, #16]	; (801284c <RegionUS915NextChannel+0x150>)
 801283c:	6818      	ldr	r0, [r3, #0]
 801283e:	f7fe f92c 	bl	8010a9a <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8012842:	4628      	mov	r0, r5
 8012844:	b024      	add	sp, #144	; 0x90
 8012846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801284a:	bf00      	nop
 801284c:	20003d78 	.word	0x20003d78
 8012850:	20003d7c 	.word	0x20003d7c
 8012854:	20003d74 	.word	0x20003d74

08012858 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8012858:	4b04      	ldr	r3, [pc, #16]	; (801286c <RegionUS915ApplyDrOffset+0x14>)
 801285a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801285e:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 8012860:	2800      	cmp	r0, #0
 8012862:	db01      	blt.n	8012868 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 8012864:	b2c0      	uxtb	r0, r0
 8012866:	4770      	bx	lr
        datarate = DR_0;
 8012868:	2000      	movs	r0, #0
 801286a:	e7fb      	b.n	8012864 <RegionUS915ApplyDrOffset+0xc>
 801286c:	08016820 	.word	0x08016820

08012870 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8012870:	b510      	push	{r4, lr}
 8012872:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8012874:	2210      	movs	r2, #16
 8012876:	2100      	movs	r1, #0
 8012878:	30f1      	adds	r0, #241	; 0xf1
 801287a:	f000 ff12 	bl	80136a2 <memset1>
    ctx->M_n = 0;
 801287e:	2100      	movs	r1, #0
 8012880:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8012884:	22f0      	movs	r2, #240	; 0xf0
 8012886:	4620      	mov	r0, r4
 8012888:	f000 ff0b 	bl	80136a2 <memset1>
}
 801288c:	bd10      	pop	{r4, pc}

0801288e <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801288e:	b508      	push	{r3, lr}
 8012890:	4602      	mov	r2, r0
 8012892:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8012894:	2110      	movs	r1, #16
 8012896:	f000 fb3b 	bl	8012f10 <lorawan_aes_set_key>
}
 801289a:	bd08      	pop	{r3, pc}

0801289c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 801289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128a0:	b084      	sub	sp, #16
 80128a2:	4604      	mov	r4, r0
 80128a4:	460d      	mov	r5, r1
 80128a6:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80128a8:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d054      	beq.n	801295a <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80128b0:	f1c3 0810 	rsb	r8, r3, #16
 80128b4:	4647      	mov	r7, r8
 80128b6:	4590      	cmp	r8, r2
 80128b8:	bf28      	it	cs
 80128ba:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80128bc:	f200 1001 	addw	r0, r0, #257	; 0x101
 80128c0:	b2ba      	uxth	r2, r7
 80128c2:	4418      	add	r0, r3
 80128c4:	f000 fed5 	bl	8013672 <memcpy1>
        ctx->M_n += mlen;
 80128c8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80128cc:	443b      	add	r3, r7
 80128ce:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 80128d2:	2b0f      	cmp	r3, #15
 80128d4:	d94d      	bls.n	8012972 <AES_CMAC_Update+0xd6>
 80128d6:	45b0      	cmp	r8, r6
 80128d8:	d24b      	bcs.n	8012972 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 80128da:	2300      	movs	r3, #0
 80128dc:	e008      	b.n	80128f0 <AES_CMAC_Update+0x54>
 80128de:	18e2      	adds	r2, r4, r3
 80128e0:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 80128e4:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 80128e8:	4041      	eors	r1, r0
 80128ea:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 80128ee:	3301      	adds	r3, #1
 80128f0:	2b0f      	cmp	r3, #15
 80128f2:	ddf4      	ble.n	80128de <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80128f4:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 80128f8:	2210      	movs	r2, #16
 80128fa:	4641      	mov	r1, r8
 80128fc:	4668      	mov	r0, sp
 80128fe:	f000 feb8 	bl	8013672 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8012902:	4622      	mov	r2, r4
 8012904:	4669      	mov	r1, sp
 8012906:	4668      	mov	r0, sp
 8012908:	f000 fb84 	bl	8013014 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801290c:	2210      	movs	r2, #16
 801290e:	4669      	mov	r1, sp
 8012910:	4640      	mov	r0, r8
 8012912:	f000 feae 	bl	8013672 <memcpy1>

        data += mlen;
 8012916:	443d      	add	r5, r7
        len -= mlen;
 8012918:	1bf6      	subs	r6, r6, r7
 801291a:	e01e      	b.n	801295a <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 801291c:	eb04 0e03 	add.w	lr, r4, r3
 8012920:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8012924:	5cea      	ldrb	r2, [r5, r3]
 8012926:	ea8c 0c02 	eor.w	ip, ip, r2
 801292a:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 801292e:	3301      	adds	r3, #1
 8012930:	2b0f      	cmp	r3, #15
 8012932:	ddf3      	ble.n	801291c <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012934:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8012938:	2210      	movs	r2, #16
 801293a:	4639      	mov	r1, r7
 801293c:	4668      	mov	r0, sp
 801293e:	f000 fe98 	bl	8013672 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8012942:	4622      	mov	r2, r4
 8012944:	4669      	mov	r1, sp
 8012946:	4668      	mov	r0, sp
 8012948:	f000 fb64 	bl	8013014 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801294c:	2210      	movs	r2, #16
 801294e:	4669      	mov	r1, sp
 8012950:	4638      	mov	r0, r7
 8012952:	f000 fe8e 	bl	8013672 <memcpy1>

        data += 16;
 8012956:	3510      	adds	r5, #16
        len -= 16;
 8012958:	3e10      	subs	r6, #16
    while( len > 16 )
 801295a:	2e10      	cmp	r6, #16
 801295c:	d901      	bls.n	8012962 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 801295e:	2300      	movs	r3, #0
 8012960:	e7e6      	b.n	8012930 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8012962:	b2b2      	uxth	r2, r6
 8012964:	4629      	mov	r1, r5
 8012966:	f204 1001 	addw	r0, r4, #257	; 0x101
 801296a:	f000 fe82 	bl	8013672 <memcpy1>
    ctx->M_n = len;
 801296e:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 8012972:	b004      	add	sp, #16
 8012974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012978 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8012978:	b530      	push	{r4, r5, lr}
 801297a:	b089      	sub	sp, #36	; 0x24
 801297c:	4605      	mov	r5, r0
 801297e:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8012980:	2210      	movs	r2, #16
 8012982:	2100      	movs	r1, #0
 8012984:	eb0d 0002 	add.w	r0, sp, r2
 8012988:	f000 fe8b 	bl	80136a2 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 801298c:	4622      	mov	r2, r4
 801298e:	a904      	add	r1, sp, #16
 8012990:	4608      	mov	r0, r1
 8012992:	f000 fb3f 	bl	8013014 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8012996:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801299a:	2b00      	cmp	r3, #0
 801299c:	db01      	blt.n	80129a2 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 801299e:	2300      	movs	r3, #0
 80129a0:	e030      	b.n	8012a04 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 80129a2:	2300      	movs	r3, #0
 80129a4:	2b0e      	cmp	r3, #14
 80129a6:	dc11      	bgt.n	80129cc <AES_CMAC_Final+0x54>
 80129a8:	f103 0220 	add.w	r2, r3, #32
 80129ac:	eb0d 0102 	add.w	r1, sp, r2
 80129b0:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80129b4:	3301      	adds	r3, #1
 80129b6:	f103 0220 	add.w	r2, r3, #32
 80129ba:	446a      	add	r2, sp
 80129bc:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80129c0:	09d2      	lsrs	r2, r2, #7
 80129c2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80129c6:	f801 2c10 	strb.w	r2, [r1, #-16]
 80129ca:	e7eb      	b.n	80129a4 <AES_CMAC_Final+0x2c>
 80129cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80129d0:	005b      	lsls	r3, r3, #1
 80129d2:	b2db      	uxtb	r3, r3
 80129d4:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 80129d8:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80129dc:	f88d 301f 	strb.w	r3, [sp, #31]
 80129e0:	e017      	b.n	8012a12 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 80129e2:	f103 0220 	add.w	r2, r3, #32
 80129e6:	eb0d 0102 	add.w	r1, sp, r2
 80129ea:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80129ee:	3301      	adds	r3, #1
 80129f0:	f103 0220 	add.w	r2, r3, #32
 80129f4:	446a      	add	r2, sp
 80129f6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80129fa:	09d2      	lsrs	r2, r2, #7
 80129fc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8012a00:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012a04:	2b0e      	cmp	r3, #14
 8012a06:	ddec      	ble.n	80129e2 <AES_CMAC_Final+0x6a>
 8012a08:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8012a12:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8012a16:	2810      	cmp	r0, #16
 8012a18:	d014      	beq.n	8012a44 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8012a1a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	db30      	blt.n	8012a84 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8012a22:	2300      	movs	r3, #0
 8012a24:	e041      	b.n	8012aaa <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 8012a26:	18e1      	adds	r1, r4, r3
 8012a28:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8012a2c:	f103 0020 	add.w	r0, r3, #32
 8012a30:	4468      	add	r0, sp
 8012a32:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8012a36:	4042      	eors	r2, r0
 8012a38:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8012a3c:	3301      	adds	r3, #1
 8012a3e:	2b0f      	cmp	r3, #15
 8012a40:	ddf1      	ble.n	8012a26 <AES_CMAC_Final+0xae>
 8012a42:	e059      	b.n	8012af8 <AES_CMAC_Final+0x180>
 8012a44:	2300      	movs	r3, #0
 8012a46:	e7fa      	b.n	8012a3e <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8012a48:	f103 0220 	add.w	r2, r3, #32
 8012a4c:	eb0d 0102 	add.w	r1, sp, r2
 8012a50:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8012a54:	3301      	adds	r3, #1
 8012a56:	f103 0220 	add.w	r2, r3, #32
 8012a5a:	446a      	add	r2, sp
 8012a5c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012a60:	09d2      	lsrs	r2, r2, #7
 8012a62:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8012a66:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012a6a:	2b0e      	cmp	r3, #14
 8012a6c:	ddec      	ble.n	8012a48 <AES_CMAC_Final+0xd0>
 8012a6e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012a72:	005b      	lsls	r3, r3, #1
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 8012a7a:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8012a7e:	f88d 301f 	strb.w	r3, [sp, #31]
 8012a82:	e019      	b.n	8012ab8 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 8012a84:	2300      	movs	r3, #0
 8012a86:	e7f0      	b.n	8012a6a <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 8012a88:	f103 0220 	add.w	r2, r3, #32
 8012a8c:	eb0d 0102 	add.w	r1, sp, r2
 8012a90:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8012a94:	3301      	adds	r3, #1
 8012a96:	f103 0220 	add.w	r2, r3, #32
 8012a9a:	446a      	add	r2, sp
 8012a9c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8012aa0:	09d2      	lsrs	r2, r2, #7
 8012aa2:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 8012aa6:	f801 2c10 	strb.w	r2, [r1, #-16]
 8012aaa:	2b0e      	cmp	r3, #14
 8012aac:	ddec      	ble.n	8012a88 <AES_CMAC_Final+0x110>
 8012aae:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8012ab2:	005b      	lsls	r3, r3, #1
 8012ab4:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 8012ab8:	4420      	add	r0, r4
 8012aba:	2380      	movs	r3, #128	; 0x80
 8012abc:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8012ac0:	e003      	b.n	8012aca <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 8012ac2:	4423      	add	r3, r4
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 8012aca:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8012ace:	3301      	adds	r3, #1
 8012ad0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8012ad4:	2b0f      	cmp	r3, #15
 8012ad6:	d9f4      	bls.n	8012ac2 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8012ad8:	2300      	movs	r3, #0
 8012ada:	e00b      	b.n	8012af4 <AES_CMAC_Final+0x17c>
 8012adc:	18e1      	adds	r1, r4, r3
 8012ade:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8012ae2:	f103 0020 	add.w	r0, r3, #32
 8012ae6:	4468      	add	r0, sp
 8012ae8:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8012aec:	4042      	eors	r2, r0
 8012aee:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8012af2:	3301      	adds	r3, #1
 8012af4:	2b0f      	cmp	r3, #15
 8012af6:	ddf1      	ble.n	8012adc <AES_CMAC_Final+0x164>
 8012af8:	2300      	movs	r3, #0
 8012afa:	e009      	b.n	8012b10 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8012afc:	18e2      	adds	r2, r4, r3
 8012afe:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 8012b02:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 8012b06:	ea8c 0c01 	eor.w	ip, ip, r1
 8012b0a:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8012b0e:	3301      	adds	r3, #1
 8012b10:	2b0f      	cmp	r3, #15
 8012b12:	ddf3      	ble.n	8012afc <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8012b14:	2210      	movs	r2, #16
 8012b16:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8012b1a:	4668      	mov	r0, sp
 8012b1c:	f000 fda9 	bl	8013672 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8012b20:	4622      	mov	r2, r4
 8012b22:	4629      	mov	r1, r5
 8012b24:	4668      	mov	r0, sp
 8012b26:	f000 fa75 	bl	8013014 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8012b2a:	2210      	movs	r2, #16
 8012b2c:	2100      	movs	r1, #0
 8012b2e:	eb0d 0002 	add.w	r0, sp, r2
 8012b32:	f000 fdb6 	bl	80136a2 <memset1>
}
 8012b36:	b009      	add	sp, #36	; 0x24
 8012b38:	bd30      	pop	{r4, r5, pc}

08012b3a <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8012b3a:	780b      	ldrb	r3, [r1, #0]
 8012b3c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8012b3e:	784b      	ldrb	r3, [r1, #1]
 8012b40:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8012b42:	788b      	ldrb	r3, [r1, #2]
 8012b44:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8012b46:	78cb      	ldrb	r3, [r1, #3]
 8012b48:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8012b4a:	790b      	ldrb	r3, [r1, #4]
 8012b4c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8012b4e:	794b      	ldrb	r3, [r1, #5]
 8012b50:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8012b52:	798b      	ldrb	r3, [r1, #6]
 8012b54:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8012b56:	79cb      	ldrb	r3, [r1, #7]
 8012b58:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8012b5a:	7a0b      	ldrb	r3, [r1, #8]
 8012b5c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8012b5e:	7a4b      	ldrb	r3, [r1, #9]
 8012b60:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8012b62:	7a8b      	ldrb	r3, [r1, #10]
 8012b64:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8012b66:	7acb      	ldrb	r3, [r1, #11]
 8012b68:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8012b6a:	7b0b      	ldrb	r3, [r1, #12]
 8012b6c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8012b6e:	7b4b      	ldrb	r3, [r1, #13]
 8012b70:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8012b72:	7b8b      	ldrb	r3, [r1, #14]
 8012b74:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8012b76:	7bcb      	ldrb	r3, [r1, #15]
 8012b78:	73c3      	strb	r3, [r0, #15]
#endif
}
 8012b7a:	4770      	bx	lr

08012b7c <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8012b7c:	e004      	b.n	8012b88 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8012b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b82:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8012b86:	461a      	mov	r2, r3
 8012b88:	1e53      	subs	r3, r2, #1
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	2a00      	cmp	r2, #0
 8012b8e:	d1f6      	bne.n	8012b7e <copy_block_nn+0x2>
}
 8012b90:	4770      	bx	lr

08012b92 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8012b92:	780b      	ldrb	r3, [r1, #0]
 8012b94:	7802      	ldrb	r2, [r0, #0]
 8012b96:	4053      	eors	r3, r2
 8012b98:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8012b9a:	784b      	ldrb	r3, [r1, #1]
 8012b9c:	7842      	ldrb	r2, [r0, #1]
 8012b9e:	4053      	eors	r3, r2
 8012ba0:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8012ba2:	788b      	ldrb	r3, [r1, #2]
 8012ba4:	7882      	ldrb	r2, [r0, #2]
 8012ba6:	4053      	eors	r3, r2
 8012ba8:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8012baa:	78cb      	ldrb	r3, [r1, #3]
 8012bac:	78c2      	ldrb	r2, [r0, #3]
 8012bae:	4053      	eors	r3, r2
 8012bb0:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8012bb2:	790b      	ldrb	r3, [r1, #4]
 8012bb4:	7902      	ldrb	r2, [r0, #4]
 8012bb6:	4053      	eors	r3, r2
 8012bb8:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8012bba:	794b      	ldrb	r3, [r1, #5]
 8012bbc:	7942      	ldrb	r2, [r0, #5]
 8012bbe:	4053      	eors	r3, r2
 8012bc0:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8012bc2:	798b      	ldrb	r3, [r1, #6]
 8012bc4:	7982      	ldrb	r2, [r0, #6]
 8012bc6:	4053      	eors	r3, r2
 8012bc8:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8012bca:	79cb      	ldrb	r3, [r1, #7]
 8012bcc:	79c2      	ldrb	r2, [r0, #7]
 8012bce:	4053      	eors	r3, r2
 8012bd0:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8012bd2:	7a0b      	ldrb	r3, [r1, #8]
 8012bd4:	7a02      	ldrb	r2, [r0, #8]
 8012bd6:	4053      	eors	r3, r2
 8012bd8:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8012bda:	7a4b      	ldrb	r3, [r1, #9]
 8012bdc:	7a42      	ldrb	r2, [r0, #9]
 8012bde:	4053      	eors	r3, r2
 8012be0:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8012be2:	7a8b      	ldrb	r3, [r1, #10]
 8012be4:	7a82      	ldrb	r2, [r0, #10]
 8012be6:	4053      	eors	r3, r2
 8012be8:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8012bea:	7acb      	ldrb	r3, [r1, #11]
 8012bec:	7ac2      	ldrb	r2, [r0, #11]
 8012bee:	4053      	eors	r3, r2
 8012bf0:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8012bf2:	7b0b      	ldrb	r3, [r1, #12]
 8012bf4:	7b02      	ldrb	r2, [r0, #12]
 8012bf6:	4053      	eors	r3, r2
 8012bf8:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8012bfa:	7b4b      	ldrb	r3, [r1, #13]
 8012bfc:	7b42      	ldrb	r2, [r0, #13]
 8012bfe:	4053      	eors	r3, r2
 8012c00:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8012c02:	7b8b      	ldrb	r3, [r1, #14]
 8012c04:	7b82      	ldrb	r2, [r0, #14]
 8012c06:	4053      	eors	r3, r2
 8012c08:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8012c0a:	7bcb      	ldrb	r3, [r1, #15]
 8012c0c:	7bc2      	ldrb	r2, [r0, #15]
 8012c0e:	4053      	eors	r3, r2
 8012c10:	73c3      	strb	r3, [r0, #15]
#endif
}
 8012c12:	4770      	bx	lr

08012c14 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8012c14:	780b      	ldrb	r3, [r1, #0]
 8012c16:	f892 c000 	ldrb.w	ip, [r2]
 8012c1a:	ea83 030c 	eor.w	r3, r3, ip
 8012c1e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8012c20:	784b      	ldrb	r3, [r1, #1]
 8012c22:	f892 c001 	ldrb.w	ip, [r2, #1]
 8012c26:	ea83 030c 	eor.w	r3, r3, ip
 8012c2a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8012c2c:	788b      	ldrb	r3, [r1, #2]
 8012c2e:	f892 c002 	ldrb.w	ip, [r2, #2]
 8012c32:	ea83 030c 	eor.w	r3, r3, ip
 8012c36:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8012c38:	78cb      	ldrb	r3, [r1, #3]
 8012c3a:	f892 c003 	ldrb.w	ip, [r2, #3]
 8012c3e:	ea83 030c 	eor.w	r3, r3, ip
 8012c42:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8012c44:	790b      	ldrb	r3, [r1, #4]
 8012c46:	f892 c004 	ldrb.w	ip, [r2, #4]
 8012c4a:	ea83 030c 	eor.w	r3, r3, ip
 8012c4e:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8012c50:	794b      	ldrb	r3, [r1, #5]
 8012c52:	f892 c005 	ldrb.w	ip, [r2, #5]
 8012c56:	ea83 030c 	eor.w	r3, r3, ip
 8012c5a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8012c5c:	798b      	ldrb	r3, [r1, #6]
 8012c5e:	f892 c006 	ldrb.w	ip, [r2, #6]
 8012c62:	ea83 030c 	eor.w	r3, r3, ip
 8012c66:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8012c68:	79cb      	ldrb	r3, [r1, #7]
 8012c6a:	f892 c007 	ldrb.w	ip, [r2, #7]
 8012c6e:	ea83 030c 	eor.w	r3, r3, ip
 8012c72:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8012c74:	7a0b      	ldrb	r3, [r1, #8]
 8012c76:	f892 c008 	ldrb.w	ip, [r2, #8]
 8012c7a:	ea83 030c 	eor.w	r3, r3, ip
 8012c7e:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8012c80:	7a4b      	ldrb	r3, [r1, #9]
 8012c82:	f892 c009 	ldrb.w	ip, [r2, #9]
 8012c86:	ea83 030c 	eor.w	r3, r3, ip
 8012c8a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8012c8c:	7a8b      	ldrb	r3, [r1, #10]
 8012c8e:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8012c92:	ea83 030c 	eor.w	r3, r3, ip
 8012c96:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8012c98:	7acb      	ldrb	r3, [r1, #11]
 8012c9a:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8012c9e:	ea83 030c 	eor.w	r3, r3, ip
 8012ca2:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8012ca4:	7b0b      	ldrb	r3, [r1, #12]
 8012ca6:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8012caa:	ea83 030c 	eor.w	r3, r3, ip
 8012cae:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8012cb0:	7b4b      	ldrb	r3, [r1, #13]
 8012cb2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8012cb6:	ea83 030c 	eor.w	r3, r3, ip
 8012cba:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8012cbc:	7b8b      	ldrb	r3, [r1, #14]
 8012cbe:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8012cc2:	ea83 030c 	eor.w	r3, r3, ip
 8012cc6:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8012cc8:	7bcb      	ldrb	r3, [r1, #15]
 8012cca:	7bd2      	ldrb	r2, [r2, #15]
 8012ccc:	4053      	eors	r3, r2
 8012cce:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8012cd0:	4770      	bx	lr

08012cd2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8012cd2:	b508      	push	{r3, lr}
    xor_block(d, k);
 8012cd4:	f7ff ff5d 	bl	8012b92 <xor_block>
}
 8012cd8:	bd08      	pop	{r3, pc}
	...

08012cdc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8012cdc:	7802      	ldrb	r2, [r0, #0]
 8012cde:	4b18      	ldr	r3, [pc, #96]	; (8012d40 <shift_sub_rows+0x64>)
 8012ce0:	5c9a      	ldrb	r2, [r3, r2]
 8012ce2:	7002      	strb	r2, [r0, #0]
 8012ce4:	7902      	ldrb	r2, [r0, #4]
 8012ce6:	5c9a      	ldrb	r2, [r3, r2]
 8012ce8:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8012cea:	7a02      	ldrb	r2, [r0, #8]
 8012cec:	5c9a      	ldrb	r2, [r3, r2]
 8012cee:	7202      	strb	r2, [r0, #8]
 8012cf0:	7b02      	ldrb	r2, [r0, #12]
 8012cf2:	5c9a      	ldrb	r2, [r3, r2]
 8012cf4:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8012cf6:	7842      	ldrb	r2, [r0, #1]
 8012cf8:	7941      	ldrb	r1, [r0, #5]
 8012cfa:	5c59      	ldrb	r1, [r3, r1]
 8012cfc:	7041      	strb	r1, [r0, #1]
 8012cfe:	7a41      	ldrb	r1, [r0, #9]
 8012d00:	5c59      	ldrb	r1, [r3, r1]
 8012d02:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8012d04:	7b41      	ldrb	r1, [r0, #13]
 8012d06:	5c59      	ldrb	r1, [r3, r1]
 8012d08:	7241      	strb	r1, [r0, #9]
 8012d0a:	5c9a      	ldrb	r2, [r3, r2]
 8012d0c:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8012d0e:	7882      	ldrb	r2, [r0, #2]
 8012d10:	7a81      	ldrb	r1, [r0, #10]
 8012d12:	5c59      	ldrb	r1, [r3, r1]
 8012d14:	7081      	strb	r1, [r0, #2]
 8012d16:	5c9a      	ldrb	r2, [r3, r2]
 8012d18:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8012d1a:	7982      	ldrb	r2, [r0, #6]
 8012d1c:	7b81      	ldrb	r1, [r0, #14]
 8012d1e:	5c59      	ldrb	r1, [r3, r1]
 8012d20:	7181      	strb	r1, [r0, #6]
 8012d22:	5c9a      	ldrb	r2, [r3, r2]
 8012d24:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8012d26:	7bc2      	ldrb	r2, [r0, #15]
 8012d28:	7ac1      	ldrb	r1, [r0, #11]
 8012d2a:	5c59      	ldrb	r1, [r3, r1]
 8012d2c:	73c1      	strb	r1, [r0, #15]
 8012d2e:	79c1      	ldrb	r1, [r0, #7]
 8012d30:	5c59      	ldrb	r1, [r3, r1]
 8012d32:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8012d34:	78c1      	ldrb	r1, [r0, #3]
 8012d36:	5c59      	ldrb	r1, [r3, r1]
 8012d38:	71c1      	strb	r1, [r0, #7]
 8012d3a:	5c9b      	ldrb	r3, [r3, r2]
 8012d3c:	70c3      	strb	r3, [r0, #3]
}
 8012d3e:	4770      	bx	lr
 8012d40:	08016a64 	.word	0x08016a64

08012d44 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8012d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d48:	b084      	sub	sp, #16
 8012d4a:	4604      	mov	r4, r0
    block_copy(st, dt);
 8012d4c:	4601      	mov	r1, r0
 8012d4e:	4668      	mov	r0, sp
 8012d50:	f7ff fef3 	bl	8012b3a <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8012d54:	f89d c000 	ldrb.w	ip, [sp]
 8012d58:	4b6a      	ldr	r3, [pc, #424]	; (8012f04 <mix_sub_columns+0x1c0>)
 8012d5a:	f813 000c 	ldrb.w	r0, [r3, ip]
 8012d5e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8012d62:	4a69      	ldr	r2, [pc, #420]	; (8012f08 <mix_sub_columns+0x1c4>)
 8012d64:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012d68:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8012d6c:	4967      	ldr	r1, [pc, #412]	; (8012f0c <mix_sub_columns+0x1c8>)
 8012d6e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8012d72:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8012d76:	5dce      	ldrb	r6, [r1, r7]
 8012d78:	ea80 0009 	eor.w	r0, r0, r9
 8012d7c:	4068      	eors	r0, r5
 8012d7e:	4070      	eors	r0, r6
 8012d80:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8012d82:	f811 000c 	ldrb.w	r0, [r1, ip]
 8012d86:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012d8a:	f812 900e 	ldrb.w	r9, [r2, lr]
 8012d8e:	ea80 0a0a 	eor.w	sl, r0, sl
 8012d92:	ea89 090a 	eor.w	r9, r9, sl
 8012d96:	ea86 0609 	eor.w	r6, r6, r9
 8012d9a:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8012d9c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012da0:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8012da4:	5dd6      	ldrb	r6, [r2, r7]
 8012da6:	ea80 0008 	eor.w	r0, r0, r8
 8012daa:	ea8e 0000 	eor.w	r0, lr, r0
 8012dae:	4070      	eors	r0, r6
 8012db0:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8012db2:	f812 600c 	ldrb.w	r6, [r2, ip]
 8012db6:	5dd8      	ldrb	r0, [r3, r7]
 8012db8:	ea86 0608 	eor.w	r6, r6, r8
 8012dbc:	4075      	eors	r5, r6
 8012dbe:	4045      	eors	r5, r0
 8012dc0:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8012dc2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8012dc6:	f813 000c 	ldrb.w	r0, [r3, ip]
 8012dca:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8012dce:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012dd2:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8012dd6:	f811 500e 	ldrb.w	r5, [r1, lr]
 8012dda:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8012dde:	5dce      	ldrb	r6, [r1, r7]
 8012de0:	ea80 0009 	eor.w	r0, r0, r9
 8012de4:	4068      	eors	r0, r5
 8012de6:	4070      	eors	r0, r6
 8012de8:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8012dea:	f811 000c 	ldrb.w	r0, [r1, ip]
 8012dee:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012df2:	f812 900e 	ldrb.w	r9, [r2, lr]
 8012df6:	ea80 0a0a 	eor.w	sl, r0, sl
 8012dfa:	ea89 090a 	eor.w	r9, r9, sl
 8012dfe:	ea86 0609 	eor.w	r6, r6, r9
 8012e02:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8012e04:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012e08:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8012e0c:	5dd6      	ldrb	r6, [r2, r7]
 8012e0e:	ea80 0008 	eor.w	r0, r0, r8
 8012e12:	ea8e 0000 	eor.w	r0, lr, r0
 8012e16:	4070      	eors	r0, r6
 8012e18:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8012e1a:	f812 600c 	ldrb.w	r6, [r2, ip]
 8012e1e:	5dd8      	ldrb	r0, [r3, r7]
 8012e20:	ea86 0608 	eor.w	r6, r6, r8
 8012e24:	4075      	eors	r5, r6
 8012e26:	4045      	eors	r5, r0
 8012e28:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8012e2a:	f89d c008 	ldrb.w	ip, [sp, #8]
 8012e2e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8012e32:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8012e36:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012e3a:	f89d e002 	ldrb.w	lr, [sp, #2]
 8012e3e:	f811 500e 	ldrb.w	r5, [r1, lr]
 8012e42:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8012e46:	5dce      	ldrb	r6, [r1, r7]
 8012e48:	ea80 0009 	eor.w	r0, r0, r9
 8012e4c:	4068      	eors	r0, r5
 8012e4e:	4070      	eors	r0, r6
 8012e50:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8012e52:	f811 000c 	ldrb.w	r0, [r1, ip]
 8012e56:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012e5a:	f812 900e 	ldrb.w	r9, [r2, lr]
 8012e5e:	ea80 0a0a 	eor.w	sl, r0, sl
 8012e62:	ea89 090a 	eor.w	r9, r9, sl
 8012e66:	ea86 0609 	eor.w	r6, r6, r9
 8012e6a:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8012e6c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8012e70:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8012e74:	5dd6      	ldrb	r6, [r2, r7]
 8012e76:	ea80 0008 	eor.w	r0, r0, r8
 8012e7a:	ea8e 0000 	eor.w	r0, lr, r0
 8012e7e:	4070      	eors	r0, r6
 8012e80:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8012e82:	f812 600c 	ldrb.w	r6, [r2, ip]
 8012e86:	5dd8      	ldrb	r0, [r3, r7]
 8012e88:	ea86 0608 	eor.w	r6, r6, r8
 8012e8c:	4075      	eors	r5, r6
 8012e8e:	4045      	eors	r5, r0
 8012e90:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8012e92:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8012e96:	5d98      	ldrb	r0, [r3, r6]
 8012e98:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8012e9c:	f812 9008 	ldrb.w	r9, [r2, r8]
 8012ea0:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8012ea4:	f811 c007 	ldrb.w	ip, [r1, r7]
 8012ea8:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8012eac:	f811 e005 	ldrb.w	lr, [r1, r5]
 8012eb0:	ea80 0009 	eor.w	r0, r0, r9
 8012eb4:	ea8c 0000 	eor.w	r0, ip, r0
 8012eb8:	ea8e 0000 	eor.w	r0, lr, r0
 8012ebc:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8012ebe:	5d88      	ldrb	r0, [r1, r6]
 8012ec0:	f813 a008 	ldrb.w	sl, [r3, r8]
 8012ec4:	f812 9007 	ldrb.w	r9, [r2, r7]
 8012ec8:	ea80 0a0a 	eor.w	sl, r0, sl
 8012ecc:	ea89 090a 	eor.w	r9, r9, sl
 8012ed0:	ea8e 0e09 	eor.w	lr, lr, r9
 8012ed4:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8012ed8:	f811 1008 	ldrb.w	r1, [r1, r8]
 8012edc:	f813 e007 	ldrb.w	lr, [r3, r7]
 8012ee0:	5d57      	ldrb	r7, [r2, r5]
 8012ee2:	4048      	eors	r0, r1
 8012ee4:	ea8e 0000 	eor.w	r0, lr, r0
 8012ee8:	4078      	eors	r0, r7
 8012eea:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8012eec:	5d92      	ldrb	r2, [r2, r6]
 8012eee:	5d5b      	ldrb	r3, [r3, r5]
 8012ef0:	4051      	eors	r1, r2
 8012ef2:	ea8c 0c01 	eor.w	ip, ip, r1
 8012ef6:	ea83 0c0c 	eor.w	ip, r3, ip
 8012efa:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 8012efe:	b004      	add	sp, #16
 8012f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f04:	08016864 	.word	0x08016864
 8012f08:	08016964 	.word	0x08016964
 8012f0c:	08016a64 	.word	0x08016a64

08012f10 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8012f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f14:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8012f16:	f1a1 0310 	sub.w	r3, r1, #16
 8012f1a:	b2da      	uxtb	r2, r3
 8012f1c:	2a10      	cmp	r2, #16
 8012f1e:	d807      	bhi.n	8012f30 <lorawan_aes_set_key+0x20>
 8012f20:	460d      	mov	r5, r1
 8012f22:	2301      	movs	r3, #1
 8012f24:	4093      	lsls	r3, r2
 8012f26:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8012f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8012f2e:	b92b      	cbnz	r3, 8012f3c <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8012f30:	2300      	movs	r3, #0
 8012f32:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8012f36:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8012f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8012f3c:	460a      	mov	r2, r1
 8012f3e:	4601      	mov	r1, r0
 8012f40:	4620      	mov	r0, r4
 8012f42:	f7ff fe1b 	bl	8012b7c <copy_block_nn>
    hi = (keylen + 28) << 2;
 8012f46:	f105 031c 	add.w	r3, r5, #28
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	009b      	lsls	r3, r3, #2
 8012f4e:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8012f52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8012f56:	3b01      	subs	r3, #1
 8012f58:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8012f5c:	462b      	mov	r3, r5
 8012f5e:	f04f 0c01 	mov.w	ip, #1
 8012f62:	e023      	b.n	8012fac <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 8012f64:	2d18      	cmp	r5, #24
 8012f66:	d901      	bls.n	8012f6c <lorawan_aes_set_key+0x5c>
 8012f68:	2a10      	cmp	r2, #16
 8012f6a:	d047      	beq.n	8012ffc <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8012f6c:	1b5a      	subs	r2, r3, r5
 8012f6e:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8012f70:	f814 9002 	ldrb.w	r9, [r4, r2]
 8012f74:	ea89 0808 	eor.w	r8, r9, r8
 8012f78:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8012f7c:	f102 0801 	add.w	r8, r2, #1
 8012f80:	f814 8008 	ldrb.w	r8, [r4, r8]
 8012f84:	f100 0901 	add.w	r9, r0, #1
 8012f88:	ea88 0707 	eor.w	r7, r8, r7
 8012f8c:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8012f90:	1c97      	adds	r7, r2, #2
 8012f92:	5de7      	ldrb	r7, [r4, r7]
 8012f94:	f100 0802 	add.w	r8, r0, #2
 8012f98:	407e      	eors	r6, r7
 8012f9a:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8012f9e:	3203      	adds	r2, #3
 8012fa0:	5ca6      	ldrb	r6, [r4, r2]
 8012fa2:	1cc2      	adds	r2, r0, #3
 8012fa4:	4071      	eors	r1, r6
 8012fa6:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8012fa8:	3304      	adds	r3, #4
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	4573      	cmp	r3, lr
 8012fae:	d22c      	bcs.n	801300a <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	1f1a      	subs	r2, r3, #4
 8012fb4:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8012fb8:	1eda      	subs	r2, r3, #3
 8012fba:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8012fbc:	1e9a      	subs	r2, r3, #2
 8012fbe:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8012fc0:	1e5a      	subs	r2, r3, #1
 8012fc2:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8012fc4:	fbb3 f2f5 	udiv	r2, r3, r5
 8012fc8:	fb05 3212 	mls	r2, r5, r2, r3
 8012fcc:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8012fd0:	d1c8      	bne.n	8012f64 <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 8012fd2:	4a0f      	ldr	r2, [pc, #60]	; (8013010 <lorawan_aes_set_key+0x100>)
 8012fd4:	f812 9007 	ldrb.w	r9, [r2, r7]
 8012fd8:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8012fdc:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8012fde:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8012fe0:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8012fe4:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8012fe8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012fec:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8012ff0:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 8012ff4:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8012ff8:	46c8      	mov	r8, r9
 8012ffa:	e7b7      	b.n	8012f6c <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 8012ffc:	4a04      	ldr	r2, [pc, #16]	; (8013010 <lorawan_aes_set_key+0x100>)
 8012ffe:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8013002:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8013004:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8013006:	5c51      	ldrb	r1, [r2, r1]
 8013008:	e7b0      	b.n	8012f6c <lorawan_aes_set_key+0x5c>
    return 0;
 801300a:	2000      	movs	r0, #0
 801300c:	e794      	b.n	8012f38 <lorawan_aes_set_key+0x28>
 801300e:	bf00      	nop
 8013010:	08016a64 	.word	0x08016a64

08013014 <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8013014:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8013018:	b31b      	cbz	r3, 8013062 <lorawan_aes_encrypt+0x4e>
{
 801301a:	b570      	push	{r4, r5, r6, lr}
 801301c:	b084      	sub	sp, #16
 801301e:	460e      	mov	r6, r1
 8013020:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8013022:	4601      	mov	r1, r0
 8013024:	4668      	mov	r0, sp
 8013026:	f7ff fdf5 	bl	8012c14 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 801302a:	2401      	movs	r4, #1
 801302c:	e009      	b.n	8013042 <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 801302e:	4668      	mov	r0, sp
 8013030:	f7ff fe88 	bl	8012d44 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8013034:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8013038:	4668      	mov	r0, sp
 801303a:	f7ff fe4a 	bl	8012cd2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 801303e:	3401      	adds	r4, #1
 8013040:	b2e4      	uxtb	r4, r4
 8013042:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8013046:	42a3      	cmp	r3, r4
 8013048:	d8f1      	bhi.n	801302e <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 801304a:	4668      	mov	r0, sp
 801304c:	f7ff fe46 	bl	8012cdc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8013050:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8013054:	4669      	mov	r1, sp
 8013056:	4630      	mov	r0, r6
 8013058:	f7ff fddc 	bl	8012c14 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 801305c:	2000      	movs	r0, #0
}
 801305e:	b004      	add	sp, #16
 8013060:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8013062:	20ff      	movs	r0, #255	; 0xff
}
 8013064:	4770      	bx	lr
	...

08013068 <GetKeyByID>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013068:	2300      	movs	r3, #0
 801306a:	2b09      	cmp	r3, #9
 801306c:	d817      	bhi.n	801309e <GetKeyByID+0x36>
{
 801306e:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8013070:	4a0c      	ldr	r2, [pc, #48]	; (80130a4 <GetKeyByID+0x3c>)
 8013072:	6814      	ldr	r4, [r2, #0]
 8013074:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013078:	4422      	add	r2, r4
 801307a:	7c12      	ldrb	r2, [r2, #16]
 801307c:	4282      	cmp	r2, r0
 801307e:	d006      	beq.n	801308e <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013080:	3301      	adds	r3, #1
 8013082:	b2db      	uxtb	r3, r3
 8013084:	2b09      	cmp	r3, #9
 8013086:	d9f3      	bls.n	8013070 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013088:	2003      	movs	r0, #3
}
 801308a:	bc10      	pop	{r4}
 801308c:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 801308e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8013092:	f10c 0c10 	add.w	ip, ip, #16
 8013096:	4464      	add	r4, ip
 8013098:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 801309a:	2000      	movs	r0, #0
 801309c:	e7f5      	b.n	801308a <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801309e:	2003      	movs	r0, #3
}
 80130a0:	4770      	bx	lr
 80130a2:	bf00      	nop
 80130a4:	20003d80 	.word	0x20003d80

080130a8 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 80130a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130ac:	b0cc      	sub	sp, #304	; 0x130
 80130ae:	9e52      	ldr	r6, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 80130b0:	b3a9      	cbz	r1, 801311e <ComputeCmac+0x76>
 80130b2:	4605      	mov	r5, r0
 80130b4:	4617      	mov	r7, r2
 80130b6:	461c      	mov	r4, r3
 80130b8:	4688      	mov	r8, r1
 80130ba:	b396      	cbz	r6, 8013122 <ComputeCmac+0x7a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 80130bc:	a802      	add	r0, sp, #8
 80130be:	f7ff fbd7 	bl	8012870 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 80130c2:	a901      	add	r1, sp, #4
 80130c4:	4620      	mov	r0, r4
 80130c6:	f7ff ffcf 	bl	8013068 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80130ca:	4604      	mov	r4, r0
 80130cc:	b118      	cbz	r0, 80130d6 <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 80130ce:	4620      	mov	r0, r4
 80130d0:	b04c      	add	sp, #304	; 0x130
 80130d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80130d6:	9901      	ldr	r1, [sp, #4]
 80130d8:	3101      	adds	r1, #1
 80130da:	a802      	add	r0, sp, #8
 80130dc:	f7ff fbd7 	bl	801288e <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 80130e0:	b125      	cbz	r5, 80130ec <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 80130e2:	2210      	movs	r2, #16
 80130e4:	4629      	mov	r1, r5
 80130e6:	a802      	add	r0, sp, #8
 80130e8:	f7ff fbd8 	bl	801289c <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80130ec:	463a      	mov	r2, r7
 80130ee:	4641      	mov	r1, r8
 80130f0:	a802      	add	r0, sp, #8
 80130f2:	f7ff fbd3 	bl	801289c <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 80130f6:	a902      	add	r1, sp, #8
 80130f8:	a848      	add	r0, sp, #288	; 0x120
 80130fa:	f7ff fc3d 	bl	8012978 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 80130fe:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8013102:	f89d 3122 	ldrb.w	r3, [sp, #290]	; 0x122
 8013106:	041b      	lsls	r3, r3, #16
 8013108:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801310c:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8013110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              ( uint32_t ) Cmac[0] );
 8013114:	f89d 2120 	ldrb.w	r2, [sp, #288]	; 0x120
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8013118:	4313      	orrs	r3, r2
 801311a:	6033      	str	r3, [r6, #0]
 801311c:	e7d7      	b.n	80130ce <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 801311e:	2402      	movs	r4, #2
 8013120:	e7d5      	b.n	80130ce <ComputeCmac+0x26>
 8013122:	2402      	movs	r4, #2
 8013124:	e7d3      	b.n	80130ce <ComputeCmac+0x26>
	...

08013128 <SecureElementInit>:
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 8013128:	b168      	cbz	r0, 8013146 <SecureElementInit+0x1e>
{
 801312a:	b510      	push	{r4, lr}
 801312c:	460c      	mov	r4, r1
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 801312e:	4a08      	ldr	r2, [pc, #32]	; (8013150 <SecureElementInit+0x28>)
 8013130:	6010      	str	r0, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8013132:	22c0      	movs	r2, #192	; 0xc0
 8013134:	4907      	ldr	r1, [pc, #28]	; (8013154 <SecureElementInit+0x2c>)
 8013136:	f000 fa9c 	bl	8013672 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 801313a:	b134      	cbz	r4, 801314a <SecureElementInit+0x22>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 801313c:	4b04      	ldr	r3, [pc, #16]	; (8013150 <SecureElementInit+0x28>)
 801313e:	6818      	ldr	r0, [r3, #0]
 8013140:	47a0      	blx	r4
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 8013142:	2000      	movs	r0, #0
}
 8013144:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013146:	2002      	movs	r0, #2
}
 8013148:	4770      	bx	lr
    return SECURE_ELEMENT_SUCCESS;
 801314a:	2000      	movs	r0, #0
 801314c:	e7fa      	b.n	8013144 <SecureElementInit+0x1c>
 801314e:	bf00      	nop
 8013150:	20003d80 	.word	0x20003d80
 8013154:	0803e500 	.word	0x0803e500

08013158 <SecureElementGetKeyByID>:
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8013158:	2300      	movs	r3, #0
 801315a:	2b09      	cmp	r3, #9
 801315c:	d817      	bhi.n	801318e <SecureElementGetKeyByID+0x36>
{
 801315e:	b410      	push	{r4}
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8013160:	4a0c      	ldr	r2, [pc, #48]	; (8013194 <SecureElementGetKeyByID+0x3c>)
 8013162:	6814      	ldr	r4, [r2, #0]
 8013164:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013168:	4422      	add	r2, r4
 801316a:	7c12      	ldrb	r2, [r2, #16]
 801316c:	4282      	cmp	r2, r0
 801316e:	d006      	beq.n	801317e <SecureElementGetKeyByID+0x26>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8013170:	3301      	adds	r3, #1
 8013172:	b2db      	uxtb	r3, r3
 8013174:	2b09      	cmp	r3, #9
 8013176:	d9f3      	bls.n	8013160 <SecureElementGetKeyByID+0x8>
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013178:	2003      	movs	r0, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 801317a:	bc10      	pop	{r4}
 801317c:	4770      	bx	lr
            *keyItem = &(SeNvm->KeyList[i]);
 801317e:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8013182:	f10c 0c10 	add.w	ip, ip, #16
 8013186:	4464      	add	r4, ip
 8013188:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 801318a:	2000      	movs	r0, #0
 801318c:	e7f5      	b.n	801317a <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801318e:	2003      	movs	r0, #3
}
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	20003d80 	.word	0x20003d80

08013198 <PrintKey>:
{
 8013198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319c:	b095      	sub	sp, #84	; 0x54
 801319e:	4604      	mov	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 80131a0:	a913      	add	r1, sp, #76	; 0x4c
 80131a2:	f7ff ffd9 	bl	8013158 <SecureElementGetKeyByID>
    if (retval == SECURE_ELEMENT_SUCCESS)
 80131a6:	2800      	cmp	r0, #0
 80131a8:	d154      	bne.n	8013254 <PrintKey+0xbc>
        if (key == APP_KEY)
 80131aa:	b1b4      	cbz	r4, 80131da <PrintKey+0x42>
        else if (key == NWK_KEY)
 80131ac:	2c01      	cmp	r4, #1
 80131ae:	d054      	beq.n	801325a <PrintKey+0xc2>
        else if (key == APP_S_KEY)
 80131b0:	2c03      	cmp	r4, #3
 80131b2:	d059      	beq.n	8013268 <PrintKey+0xd0>
        else if (key == NWK_S_KEY)
 80131b4:	2c02      	cmp	r4, #2
 80131b6:	d05e      	beq.n	8013276 <PrintKey+0xde>
        else if (key == MC_ROOT_KEY)
 80131b8:	2c04      	cmp	r4, #4
 80131ba:	d063      	beq.n	8013284 <PrintKey+0xec>
        else if (key == MC_KE_KEY)
 80131bc:	2c7f      	cmp	r4, #127	; 0x7f
 80131be:	d068      	beq.n	8013292 <PrintKey+0xfa>
        else if (key == MC_KEY_0)
 80131c0:	2c80      	cmp	r4, #128	; 0x80
 80131c2:	d06d      	beq.n	80132a0 <PrintKey+0x108>
        else if (key == MC_APP_S_KEY_0)
 80131c4:	2c81      	cmp	r4, #129	; 0x81
 80131c6:	d072      	beq.n	80132ae <PrintKey+0x116>
        else if (key == MC_NWK_S_KEY_0)
 80131c8:	2c82      	cmp	r4, #130	; 0x82
 80131ca:	d10c      	bne.n	80131e6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 80131cc:	4b3b      	ldr	r3, [pc, #236]	; (80132bc <PrintKey+0x124>)
 80131ce:	2200      	movs	r2, #0
 80131d0:	4611      	mov	r1, r2
 80131d2:	2002      	movs	r0, #2
 80131d4:	f002 f8f6 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 80131d8:	e005      	b.n	80131e6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 80131da:	4b39      	ldr	r3, [pc, #228]	; (80132c0 <PrintKey+0x128>)
 80131dc:	2200      	movs	r2, #0
 80131de:	4611      	mov	r1, r2
 80131e0:	2002      	movs	r0, #2
 80131e2:	f002 f8ef 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80131e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80131e8:	785a      	ldrb	r2, [r3, #1]
 80131ea:	9210      	str	r2, [sp, #64]	; 0x40
 80131ec:	7899      	ldrb	r1, [r3, #2]
 80131ee:	9111      	str	r1, [sp, #68]	; 0x44
 80131f0:	78da      	ldrb	r2, [r3, #3]
 80131f2:	7919      	ldrb	r1, [r3, #4]
 80131f4:	7958      	ldrb	r0, [r3, #5]
 80131f6:	799c      	ldrb	r4, [r3, #6]
 80131f8:	79dd      	ldrb	r5, [r3, #7]
 80131fa:	7a1e      	ldrb	r6, [r3, #8]
 80131fc:	7a5f      	ldrb	r7, [r3, #9]
 80131fe:	f893 c00a 	ldrb.w	ip, [r3, #10]
 8013202:	f893 e00b 	ldrb.w	lr, [r3, #11]
 8013206:	f893 800c 	ldrb.w	r8, [r3, #12]
 801320a:	f893 900d 	ldrb.w	r9, [r3, #13]
 801320e:	f893 a00e 	ldrb.w	sl, [r3, #14]
 8013212:	f893 b00f 	ldrb.w	fp, [r3, #15]
 8013216:	7c1b      	ldrb	r3, [r3, #16]
 8013218:	930f      	str	r3, [sp, #60]	; 0x3c
 801321a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801321e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013222:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013226:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801322a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 801322e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8013232:	9708      	str	r7, [sp, #32]
 8013234:	9607      	str	r6, [sp, #28]
 8013236:	9506      	str	r5, [sp, #24]
 8013238:	9405      	str	r4, [sp, #20]
 801323a:	9004      	str	r0, [sp, #16]
 801323c:	9103      	str	r1, [sp, #12]
 801323e:	9202      	str	r2, [sp, #8]
 8013240:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013242:	9101      	str	r1, [sp, #4]
 8013244:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013246:	9200      	str	r2, [sp, #0]
 8013248:	4b1e      	ldr	r3, [pc, #120]	; (80132c4 <PrintKey+0x12c>)
 801324a:	2200      	movs	r2, #0
 801324c:	4611      	mov	r1, r2
 801324e:	2002      	movs	r0, #2
 8013250:	f002 f8b8 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8013254:	b015      	add	sp, #84	; 0x54
 8013256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 801325a:	4b1b      	ldr	r3, [pc, #108]	; (80132c8 <PrintKey+0x130>)
 801325c:	2200      	movs	r2, #0
 801325e:	4611      	mov	r1, r2
 8013260:	2002      	movs	r0, #2
 8013262:	f002 f8af 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8013266:	e7be      	b.n	80131e6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8013268:	4b18      	ldr	r3, [pc, #96]	; (80132cc <PrintKey+0x134>)
 801326a:	2200      	movs	r2, #0
 801326c:	4611      	mov	r1, r2
 801326e:	2002      	movs	r0, #2
 8013270:	f002 f8a8 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8013274:	e7b7      	b.n	80131e6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8013276:	4b16      	ldr	r3, [pc, #88]	; (80132d0 <PrintKey+0x138>)
 8013278:	2200      	movs	r2, #0
 801327a:	4611      	mov	r1, r2
 801327c:	2002      	movs	r0, #2
 801327e:	f002 f8a1 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8013282:	e7b0      	b.n	80131e6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 8013284:	4b13      	ldr	r3, [pc, #76]	; (80132d4 <PrintKey+0x13c>)
 8013286:	2200      	movs	r2, #0
 8013288:	4611      	mov	r1, r2
 801328a:	2002      	movs	r0, #2
 801328c:	f002 f89a 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8013290:	e7a9      	b.n	80131e6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 8013292:	4b11      	ldr	r3, [pc, #68]	; (80132d8 <PrintKey+0x140>)
 8013294:	2200      	movs	r2, #0
 8013296:	4611      	mov	r1, r2
 8013298:	2002      	movs	r0, #2
 801329a:	f002 f893 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 801329e:	e7a2      	b.n	80131e6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 80132a0:	4b0e      	ldr	r3, [pc, #56]	; (80132dc <PrintKey+0x144>)
 80132a2:	2200      	movs	r2, #0
 80132a4:	4611      	mov	r1, r2
 80132a6:	2002      	movs	r0, #2
 80132a8:	f002 f88c 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 80132ac:	e79b      	b.n	80131e6 <PrintKey+0x4e>
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 80132ae:	4b0c      	ldr	r3, [pc, #48]	; (80132e0 <PrintKey+0x148>)
 80132b0:	2200      	movs	r2, #0
 80132b2:	4611      	mov	r1, r2
 80132b4:	2002      	movs	r0, #2
 80132b6:	f002 f885 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 80132ba:	e794      	b.n	80131e6 <PrintKey+0x4e>
 80132bc:	08016c24 	.word	0x08016c24
 80132c0:	08016b64 	.word	0x08016b64
 80132c4:	08016c3c 	.word	0x08016c3c
 80132c8:	08016b7c 	.word	0x08016b7c
 80132cc:	08016b94 	.word	0x08016b94
 80132d0:	08016bac 	.word	0x08016bac
 80132d4:	08016bc4 	.word	0x08016bc4
 80132d8:	08016bdc 	.word	0x08016bdc
 80132dc:	08016bf4 	.word	0x08016bf4
 80132e0:	08016c0c 	.word	0x08016c0c

080132e4 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 80132e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132e6:	b089      	sub	sp, #36	; 0x24
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 80132e8:	4b28      	ldr	r3, [pc, #160]	; (801338c <SecureElementPrintKeys+0xa8>)
 80132ea:	2200      	movs	r2, #0
 80132ec:	4611      	mov	r1, r2
 80132ee:	2002      	movs	r0, #2
 80132f0:	f002 f868 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 80132f4:	2000      	movs	r0, #0
 80132f6:	f7ff ff4f 	bl	8013198 <PrintKey>
    PrintKey(NWK_KEY);
 80132fa:	2001      	movs	r0, #1
 80132fc:	f7ff ff4c 	bl	8013198 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8013300:	4b23      	ldr	r3, [pc, #140]	; (8013390 <SecureElementPrintKeys+0xac>)
 8013302:	2200      	movs	r2, #0
 8013304:	4611      	mov	r1, r2
 8013306:	2002      	movs	r0, #2
 8013308:	f002 f85c 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 801330c:	2003      	movs	r0, #3
 801330e:	f7ff ff43 	bl	8013198 <PrintKey>
    PrintKey(NWK_S_KEY);
 8013312:	2002      	movs	r0, #2
 8013314:	f7ff ff40 	bl	8013198 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 8013318:	4b1e      	ldr	r3, [pc, #120]	; (8013394 <SecureElementPrintKeys+0xb0>)
 801331a:	2200      	movs	r2, #0
 801331c:	4611      	mov	r1, r2
 801331e:	2002      	movs	r0, #2
 8013320:	f002 f850 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8013324:	4c1c      	ldr	r4, [pc, #112]	; (8013398 <SecureElementPrintKeys+0xb4>)
 8013326:	6823      	ldr	r3, [r4, #0]
 8013328:	781a      	ldrb	r2, [r3, #0]
 801332a:	7859      	ldrb	r1, [r3, #1]
 801332c:	7898      	ldrb	r0, [r3, #2]
 801332e:	78dd      	ldrb	r5, [r3, #3]
 8013330:	791e      	ldrb	r6, [r3, #4]
 8013332:	795f      	ldrb	r7, [r3, #5]
 8013334:	f893 c006 	ldrb.w	ip, [r3, #6]
 8013338:	79db      	ldrb	r3, [r3, #7]
 801333a:	9307      	str	r3, [sp, #28]
 801333c:	f8cd c018 	str.w	ip, [sp, #24]
 8013340:	9705      	str	r7, [sp, #20]
 8013342:	9604      	str	r6, [sp, #16]
 8013344:	9503      	str	r5, [sp, #12]
 8013346:	9002      	str	r0, [sp, #8]
 8013348:	9101      	str	r1, [sp, #4]
 801334a:	9200      	str	r2, [sp, #0]
 801334c:	4b13      	ldr	r3, [pc, #76]	; (801339c <SecureElementPrintKeys+0xb8>)
 801334e:	2200      	movs	r2, #0
 8013350:	4611      	mov	r1, r2
 8013352:	2002      	movs	r0, #2
 8013354:	f002 f836 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8013358:	6823      	ldr	r3, [r4, #0]
 801335a:	7a1a      	ldrb	r2, [r3, #8]
 801335c:	7a59      	ldrb	r1, [r3, #9]
 801335e:	7a98      	ldrb	r0, [r3, #10]
 8013360:	7adc      	ldrb	r4, [r3, #11]
 8013362:	7b1d      	ldrb	r5, [r3, #12]
 8013364:	7b5e      	ldrb	r6, [r3, #13]
 8013366:	7b9f      	ldrb	r7, [r3, #14]
 8013368:	7bdb      	ldrb	r3, [r3, #15]
 801336a:	9307      	str	r3, [sp, #28]
 801336c:	9706      	str	r7, [sp, #24]
 801336e:	9605      	str	r6, [sp, #20]
 8013370:	9504      	str	r5, [sp, #16]
 8013372:	9403      	str	r4, [sp, #12]
 8013374:	9002      	str	r0, [sp, #8]
 8013376:	9101      	str	r1, [sp, #4]
 8013378:	9200      	str	r2, [sp, #0]
 801337a:	4b09      	ldr	r3, [pc, #36]	; (80133a0 <SecureElementPrintKeys+0xbc>)
 801337c:	2200      	movs	r2, #0
 801337e:	4611      	mov	r1, r2
 8013380:	2002      	movs	r0, #2
 8013382:	f002 f81f 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
}
 8013386:	2000      	movs	r0, #0
 8013388:	b009      	add	sp, #36	; 0x24
 801338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801338c:	08016c90 	.word	0x08016c90
 8013390:	08016ca8 	.word	0x08016ca8
 8013394:	08016cc0 	.word	0x08016cc0
 8013398:	20003d80 	.word	0x20003d80
 801339c:	08016cd8 	.word	0x08016cd8
 80133a0:	08016d18 	.word	0x08016d18

080133a4 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 80133a4:	b508      	push	{r3, lr}
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 80133a6:	2004      	movs	r0, #4
 80133a8:	f7ff fef6 	bl	8013198 <PrintKey>
    PrintKey(MC_KE_KEY);
 80133ac:	207f      	movs	r0, #127	; 0x7f
 80133ae:	f7ff fef3 	bl	8013198 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 80133b2:	2002      	movs	r0, #2
 80133b4:	f7ff fef0 	bl	8013198 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 80133b8:	2003      	movs	r0, #3
 80133ba:	f7ff feed 	bl	8013198 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
}
 80133be:	2000      	movs	r0, #0
 80133c0:	bd08      	pop	{r3, pc}

080133c2 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 80133c2:	2b7e      	cmp	r3, #126	; 0x7e
 80133c4:	d80a      	bhi.n	80133dc <SecureElementComputeAesCmac+0x1a>
{
 80133c6:	b500      	push	{lr}
 80133c8:	b083      	sub	sp, #12
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80133ca:	f8dd c010 	ldr.w	ip, [sp, #16]
 80133ce:	f8cd c000 	str.w	ip, [sp]
 80133d2:	f7ff fe69 	bl	80130a8 <ComputeCmac>
}
 80133d6:	b003      	add	sp, #12
 80133d8:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80133dc:	2003      	movs	r0, #3
}
 80133de:	4770      	bx	lr

080133e0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 80133e0:	b190      	cbz	r0, 8013408 <SecureElementVerifyAesCmac+0x28>
{
 80133e2:	b510      	push	{r4, lr}
 80133e4:	b084      	sub	sp, #16
 80133e6:	468c      	mov	ip, r1
 80133e8:	4614      	mov	r4, r2
 80133ea:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 80133ec:	2000      	movs	r0, #0
 80133ee:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80133f0:	aa03      	add	r2, sp, #12
 80133f2:	9200      	str	r2, [sp, #0]
 80133f4:	4662      	mov	r2, ip
 80133f6:	f7ff fe57 	bl	80130a8 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80133fa:	b918      	cbnz	r0, 8013404 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 80133fc:	9b03      	ldr	r3, [sp, #12]
 80133fe:	42a3      	cmp	r3, r4
 8013400:	d000      	beq.n	8013404 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8013402:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8013404:	b004      	add	sp, #16
 8013406:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013408:	2002      	movs	r0, #2
}
 801340a:	4770      	bx	lr

0801340c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 801340c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013410:	b0be      	sub	sp, #248	; 0xf8
    if( buffer == NULL || encBuffer == NULL )
 8013412:	b350      	cbz	r0, 801346a <SecureElementAesEncrypt+0x5e>
 8013414:	460c      	mov	r4, r1
 8013416:	4615      	mov	r5, r2
 8013418:	461e      	mov	r6, r3
 801341a:	4607      	mov	r7, r0
 801341c:	b343      	cbz	r3, 8013470 <SecureElementAesEncrypt+0x64>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 801341e:	f011 0f0f 	tst.w	r1, #15
 8013422:	d128      	bne.n	8013476 <SecureElementAesEncrypt+0x6a>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8013424:	22f0      	movs	r2, #240	; 0xf0
 8013426:	2100      	movs	r1, #0
 8013428:	a801      	add	r0, sp, #4
 801342a:	f000 f93a 	bl	80136a2 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801342e:	4669      	mov	r1, sp
 8013430:	4628      	mov	r0, r5
 8013432:	f7ff fe19 	bl	8013068 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013436:	4680      	mov	r8, r0
 8013438:	b118      	cbz	r0, 8013442 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 801343a:	4640      	mov	r0, r8
 801343c:	b03e      	add	sp, #248	; 0xf8
 801343e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8013442:	aa01      	add	r2, sp, #4
 8013444:	2110      	movs	r1, #16
 8013446:	9800      	ldr	r0, [sp, #0]
 8013448:	3001      	adds	r0, #1
 801344a:	f7ff fd61 	bl	8012f10 <lorawan_aes_set_key>
        uint8_t block = 0;
 801344e:	4645      	mov	r5, r8
        while( size != 0 )
 8013450:	e008      	b.n	8013464 <SecureElementAesEncrypt+0x58>
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8013452:	aa01      	add	r2, sp, #4
 8013454:	1971      	adds	r1, r6, r5
 8013456:	1978      	adds	r0, r7, r5
 8013458:	f7ff fddc 	bl	8013014 <lorawan_aes_encrypt>
            block = block + 16;
 801345c:	3510      	adds	r5, #16
 801345e:	b2ed      	uxtb	r5, r5
            size  = size - 16;
 8013460:	3c10      	subs	r4, #16
 8013462:	b2a4      	uxth	r4, r4
        while( size != 0 )
 8013464:	2c00      	cmp	r4, #0
 8013466:	d1f4      	bne.n	8013452 <SecureElementAesEncrypt+0x46>
 8013468:	e7e7      	b.n	801343a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 801346a:	f04f 0802 	mov.w	r8, #2
 801346e:	e7e4      	b.n	801343a <SecureElementAesEncrypt+0x2e>
 8013470:	f04f 0802 	mov.w	r8, #2
 8013474:	e7e1      	b.n	801343a <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8013476:	f04f 0805 	mov.w	r8, #5
 801347a:	e7de      	b.n	801343a <SecureElementAesEncrypt+0x2e>

0801347c <SecureElementSetKey>:
{
 801347c:	b530      	push	{r4, r5, lr}
 801347e:	b085      	sub	sp, #20
    if( key == NULL )
 8013480:	2900      	cmp	r1, #0
 8013482:	d038      	beq.n	80134f6 <SecureElementSetKey+0x7a>
 8013484:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013486:	2300      	movs	r3, #0
 8013488:	2b09      	cmp	r3, #9
 801348a:	d830      	bhi.n	80134ee <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 801348c:	4a1b      	ldr	r2, [pc, #108]	; (80134fc <SecureElementSetKey+0x80>)
 801348e:	6811      	ldr	r1, [r2, #0]
 8013490:	461c      	mov	r4, r3
 8013492:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013496:	440a      	add	r2, r1
 8013498:	7c12      	ldrb	r2, [r2, #16]
 801349a:	4282      	cmp	r2, r0
 801349c:	d002      	beq.n	80134a4 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801349e:	3301      	adds	r3, #1
 80134a0:	b2db      	uxtb	r3, r3
 80134a2:	e7f1      	b.n	8013488 <SecureElementSetKey+0xc>
            if ( keyID == MC_KEY_0 )
 80134a4:	2880      	cmp	r0, #128	; 0x80
 80134a6:	d00a      	beq.n	80134be <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 80134a8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80134ac:	3310      	adds	r3, #16
 80134ae:	440b      	add	r3, r1
 80134b0:	2210      	movs	r2, #16
 80134b2:	4661      	mov	r1, ip
 80134b4:	1c58      	adds	r0, r3, #1
 80134b6:	f000 f8dc 	bl	8013672 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 80134ba:	2500      	movs	r5, #0
 80134bc:	e018      	b.n	80134f0 <SecureElementSetKey+0x74>
                uint8_t               decryptedKey[16] = { 0 };
 80134be:	2300      	movs	r3, #0
 80134c0:	9300      	str	r3, [sp, #0]
 80134c2:	9301      	str	r3, [sp, #4]
 80134c4:	9302      	str	r3, [sp, #8]
 80134c6:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 80134c8:	466b      	mov	r3, sp
 80134ca:	227f      	movs	r2, #127	; 0x7f
 80134cc:	2110      	movs	r1, #16
 80134ce:	4660      	mov	r0, ip
 80134d0:	f7ff ff9c 	bl	801340c <SecureElementAesEncrypt>
 80134d4:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80134d6:	4b09      	ldr	r3, [pc, #36]	; (80134fc <SecureElementSetKey+0x80>)
 80134d8:	6818      	ldr	r0, [r3, #0]
 80134da:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80134de:	3410      	adds	r4, #16
 80134e0:	4420      	add	r0, r4
 80134e2:	2210      	movs	r2, #16
 80134e4:	4669      	mov	r1, sp
 80134e6:	3001      	adds	r0, #1
 80134e8:	f000 f8c3 	bl	8013672 <memcpy1>
                return retval;
 80134ec:	e000      	b.n	80134f0 <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80134ee:	2503      	movs	r5, #3
}
 80134f0:	4628      	mov	r0, r5
 80134f2:	b005      	add	sp, #20
 80134f4:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80134f6:	2502      	movs	r5, #2
 80134f8:	e7fa      	b.n	80134f0 <SecureElementSetKey+0x74>
 80134fa:	bf00      	nop
 80134fc:	20003d80 	.word	0x20003d80

08013500 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 8013500:	b1d0      	cbz	r0, 8013538 <SecureElementDeriveAndStoreKey+0x38>
{
 8013502:	b510      	push	{r4, lr}
 8013504:	b084      	sub	sp, #16
 8013506:	4614      	mov	r4, r2
 8013508:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 801350a:	2a7f      	cmp	r2, #127	; 0x7f
 801350c:	d101      	bne.n	8013512 <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801350e:	2904      	cmp	r1, #4
 8013510:	d114      	bne.n	801353c <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8013512:	2300      	movs	r3, #0
 8013514:	9300      	str	r3, [sp, #0]
 8013516:	9301      	str	r3, [sp, #4]
 8013518:	9302      	str	r3, [sp, #8]
 801351a:	9303      	str	r3, [sp, #12]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 801351c:	466b      	mov	r3, sp
 801351e:	460a      	mov	r2, r1
 8013520:	2110      	movs	r1, #16
 8013522:	4660      	mov	r0, ip
 8013524:	f7ff ff72 	bl	801340c <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013528:	b108      	cbz	r0, 801352e <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801352a:	b004      	add	sp, #16
 801352c:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 801352e:	4669      	mov	r1, sp
 8013530:	4620      	mov	r0, r4
 8013532:	f7ff ffa3 	bl	801347c <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8013536:	e7f8      	b.n	801352a <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 8013538:	2002      	movs	r0, #2
}
 801353a:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801353c:	2003      	movs	r0, #3
 801353e:	e7f4      	b.n	801352a <SecureElementDeriveAndStoreKey+0x2a>

08013540 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8013540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013544:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8013548:	9d07      	ldr	r5, [sp, #28]
 801354a:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 801354c:	b37b      	cbz	r3, 80135ae <SecureElementProcessJoinAccept+0x6e>
 801354e:	4698      	mov	r8, r3
 8013550:	b37d      	cbz	r5, 80135b2 <SecureElementProcessJoinAccept+0x72>
 8013552:	b386      	cbz	r6, 80135b6 <SecureElementProcessJoinAccept+0x76>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8013554:	2c21      	cmp	r4, #33	; 0x21
 8013556:	d830      	bhi.n	80135ba <SecureElementProcessJoinAccept+0x7a>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8013558:	b2a7      	uxth	r7, r4
 801355a:	463a      	mov	r2, r7
 801355c:	4619      	mov	r1, r3
 801355e:	4628      	mov	r0, r5
 8013560:	f000 f887 	bl	8013672 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8013564:	1e79      	subs	r1, r7, #1
 8013566:	1c6b      	adds	r3, r5, #1
 8013568:	2201      	movs	r2, #1
 801356a:	b289      	uxth	r1, r1
 801356c:	eb08 0002 	add.w	r0, r8, r2
 8013570:	f7ff ff4c 	bl	801340c <SecureElementAesEncrypt>
 8013574:	bb20      	cbnz	r0, 80135c0 <SecureElementProcessJoinAccept+0x80>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8013576:	7aeb      	ldrb	r3, [r5, #11]
 8013578:	09db      	lsrs	r3, r3, #7
 801357a:	7033      	strb	r3, [r6, #0]

    uint32_t mic = 0;

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 801357c:	442c      	add	r4, r5
 801357e:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8013582:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8013586:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 801358a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801358e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8013592:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8013596:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 801359a:	b99b      	cbnz	r3, 80135c4 <SecureElementProcessJoinAccept+0x84>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 801359c:	1f39      	subs	r1, r7, #4
 801359e:	2301      	movs	r3, #1
 80135a0:	b289      	uxth	r1, r1
 80135a2:	4628      	mov	r0, r5
 80135a4:	f7ff ff1c 	bl	80133e0 <SecureElementVerifyAesCmac>
 80135a8:	b140      	cbz	r0, 80135bc <SecureElementProcessJoinAccept+0x7c>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 80135aa:	2001      	movs	r0, #1
 80135ac:	e006      	b.n	80135bc <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_NPE;
 80135ae:	2002      	movs	r0, #2
 80135b0:	e004      	b.n	80135bc <SecureElementProcessJoinAccept+0x7c>
 80135b2:	2002      	movs	r0, #2
 80135b4:	e002      	b.n	80135bc <SecureElementProcessJoinAccept+0x7c>
 80135b6:	2002      	movs	r0, #2
 80135b8:	e000      	b.n	80135bc <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80135ba:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 80135bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 80135c0:	2007      	movs	r0, #7
 80135c2:	e7fb      	b.n	80135bc <SecureElementProcessJoinAccept+0x7c>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80135c4:	2004      	movs	r0, #4
 80135c6:	e7f9      	b.n	80135bc <SecureElementProcessJoinAccept+0x7c>

080135c8 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
    if( devEui == NULL )
 80135c8:	b140      	cbz	r0, 80135dc <SecureElementSetDevEui+0x14>
{
 80135ca:	b508      	push	{r3, lr}
 80135cc:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 80135ce:	2208      	movs	r2, #8
 80135d0:	4b03      	ldr	r3, [pc, #12]	; (80135e0 <SecureElementSetDevEui+0x18>)
 80135d2:	6818      	ldr	r0, [r3, #0]
 80135d4:	f000 f84d 	bl	8013672 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80135d8:	2000      	movs	r0, #0
}
 80135da:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80135dc:	2002      	movs	r0, #2
}
 80135de:	4770      	bx	lr
 80135e0:	20003d80 	.word	0x20003d80

080135e4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
}
 80135e4:	4b01      	ldr	r3, [pc, #4]	; (80135ec <SecureElementGetDevEui+0x8>)
 80135e6:	6818      	ldr	r0, [r3, #0]
 80135e8:	4770      	bx	lr
 80135ea:	bf00      	nop
 80135ec:	20003d80 	.word	0x20003d80

080135f0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
    if( joinEui == NULL )
 80135f0:	b148      	cbz	r0, 8013606 <SecureElementSetJoinEui+0x16>
{
 80135f2:	b508      	push	{r3, lr}
 80135f4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 80135f6:	4b05      	ldr	r3, [pc, #20]	; (801360c <SecureElementSetJoinEui+0x1c>)
 80135f8:	6818      	ldr	r0, [r3, #0]
 80135fa:	2208      	movs	r2, #8
 80135fc:	4410      	add	r0, r2
 80135fe:	f000 f838 	bl	8013672 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8013602:	2000      	movs	r0, #0
}
 8013604:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8013606:	2002      	movs	r0, #2
}
 8013608:	4770      	bx	lr
 801360a:	bf00      	nop
 801360c:	20003d80 	.word	0x20003d80

08013610 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8013610:	4b01      	ldr	r3, [pc, #4]	; (8013618 <SecureElementGetJoinEui+0x8>)
 8013612:	6818      	ldr	r0, [r3, #0]
}
 8013614:	3008      	adds	r0, #8
 8013616:	4770      	bx	lr
 8013618:	20003d80 	.word	0x20003d80

0801361c <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801361c:	4b09      	ldr	r3, [pc, #36]	; (8013644 <rand1+0x28>)
 801361e:	681a      	ldr	r2, [r3, #0]
 8013620:	4909      	ldr	r1, [pc, #36]	; (8013648 <rand1+0x2c>)
 8013622:	f243 0039 	movw	r0, #12345	; 0x3039
 8013626:	fb01 0002 	mla	r0, r1, r2, r0
 801362a:	6018      	str	r0, [r3, #0]
 801362c:	2303      	movs	r3, #3
 801362e:	fba3 2300 	umull	r2, r3, r3, r0
 8013632:	1ac2      	subs	r2, r0, r3
 8013634:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8013638:	0f9b      	lsrs	r3, r3, #30
 801363a:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 801363e:	1ac0      	subs	r0, r0, r3
 8013640:	4770      	bx	lr
 8013642:	bf00      	nop
 8013644:	2000010c 	.word	0x2000010c
 8013648:	41c64e6d 	.word	0x41c64e6d

0801364c <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 801364c:	4b01      	ldr	r3, [pc, #4]	; (8013654 <srand1+0x8>)
 801364e:	6018      	str	r0, [r3, #0]
}
 8013650:	4770      	bx	lr
 8013652:	bf00      	nop
 8013654:	2000010c 	.word	0x2000010c

08013658 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8013658:	b538      	push	{r3, r4, r5, lr}
 801365a:	4605      	mov	r5, r0
 801365c:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801365e:	f7ff ffdd 	bl	801361c <rand1>
 8013662:	1b61      	subs	r1, r4, r5
 8013664:	3101      	adds	r1, #1
 8013666:	fb90 f3f1 	sdiv	r3, r0, r1
 801366a:	fb01 0013 	mls	r0, r1, r3, r0
}
 801366e:	4428      	add	r0, r5
 8013670:	bd38      	pop	{r3, r4, r5, pc}

08013672 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8013672:	e004      	b.n	801367e <memcpy1+0xc>
    {
        *dst++ = *src++;
 8013674:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013678:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 801367c:	461a      	mov	r2, r3
 801367e:	1e53      	subs	r3, r2, #1
 8013680:	b29b      	uxth	r3, r3
 8013682:	2a00      	cmp	r2, #0
 8013684:	d1f6      	bne.n	8013674 <memcpy1+0x2>
    }
}
 8013686:	4770      	bx	lr

08013688 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8013688:	1e53      	subs	r3, r2, #1
 801368a:	4418      	add	r0, r3
    while( size-- )
 801368c:	e004      	b.n	8013698 <memcpyr+0x10>
    {
        *dst-- = *src++;
 801368e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013692:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8013696:	461a      	mov	r2, r3
 8013698:	1e53      	subs	r3, r2, #1
 801369a:	b29b      	uxth	r3, r3
 801369c:	2a00      	cmp	r2, #0
 801369e:	d1f6      	bne.n	801368e <memcpyr+0x6>
    }
}
 80136a0:	4770      	bx	lr

080136a2 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80136a2:	e002      	b.n	80136aa <memset1+0x8>
    {
        *dst++ = value;
 80136a4:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 80136a8:	461a      	mov	r2, r3
 80136aa:	1e53      	subs	r3, r2, #1
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	2a00      	cmp	r2, #0
 80136b0:	d1f8      	bne.n	80136a4 <memset1+0x2>
    }
}
 80136b2:	4770      	bx	lr

080136b4 <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 80136b4:	b1f0      	cbz	r0, 80136f4 <Crc32+0x40>
{
 80136b6:	b510      	push	{r4, lr}
 80136b8:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 80136ba:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 80136be:	f04f 30ff 	mov.w	r0, #4294967295
 80136c2:	e00e      	b.n	80136e2 <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80136c4:	f340 0c00 	sbfx	ip, r0, #0, #1
 80136c8:	4a0b      	ldr	r2, [pc, #44]	; (80136f8 <Crc32+0x44>)
 80136ca:	ea0c 0202 	and.w	r2, ip, r2
 80136ce:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 80136d2:	3301      	adds	r3, #1
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	2b07      	cmp	r3, #7
 80136d8:	d9f4      	bls.n	80136c4 <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 80136da:	f10e 0e01 	add.w	lr, lr, #1
 80136de:	fa1f fe8e 	uxth.w	lr, lr
 80136e2:	458e      	cmp	lr, r1
 80136e4:	d204      	bcs.n	80136f0 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 80136e6:	f814 300e 	ldrb.w	r3, [r4, lr]
 80136ea:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 80136ec:	2300      	movs	r3, #0
 80136ee:	e7f2      	b.n	80136d6 <Crc32+0x22>
        }
    }

    return ~crc;
 80136f0:	43c0      	mvns	r0, r0
}
 80136f2:	bd10      	pop	{r4, pc}
        return 0;
 80136f4:	2000      	movs	r0, #0
}
 80136f6:	4770      	bx	lr
 80136f8:	edb88320 	.word	0xedb88320

080136fc <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 80136fc:	2001      	movs	r0, #1
 80136fe:	4770      	bx	lr

08013700 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8013700:	280a      	cmp	r0, #10
 8013702:	d807      	bhi.n	8013714 <RadioGetLoRaBandwidthInHz+0x14>
 8013704:	e8df f000 	tbb	[pc, r0]
 8013708:	17110b20 	.word	0x17110b20
 801370c:	061e1c1a 	.word	0x061e1c1a
 8013710:	0e08      	.short	0x0e08
 8013712:	14          	.byte	0x14
 8013713:	00          	.byte	0x00
 8013714:	2000      	movs	r0, #0
 8013716:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8013718:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 801371c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801371e:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8013722:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8013724:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8013728:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801372a:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 801372e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8013730:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8013734:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8013736:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 801373a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801373c:	4804      	ldr	r0, [pc, #16]	; (8013750 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 801373e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8013740:	4804      	ldr	r0, [pc, #16]	; (8013754 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8013742:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8013744:	4804      	ldr	r0, [pc, #16]	; (8013758 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8013746:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8013748:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 801374c:	4770      	bx	lr
 801374e:	bf00      	nop
 8013750:	0001e848 	.word	0x0001e848
 8013754:	0003d090 	.word	0x0003d090
 8013758:	0007a120 	.word	0x0007a120

0801375c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801375c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8013760:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013762:	b953      	cbnz	r3, 801377a <RadioGetGfskTimeOnAirNumerator+0x1e>
 8013764:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8013766:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8013768:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801376a:	b141      	cbz	r1, 801377e <RadioGetGfskTimeOnAirNumerator+0x22>
 801376c:	2302      	movs	r3, #2
 801376e:	f89d 0000 	ldrb.w	r0, [sp]
 8013772:	4418      	add	r0, r3
    /* ST_WORKAROUND_END */
}
 8013774:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8013778:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801377a:	2000      	movs	r0, #0
 801377c:	e7f3      	b.n	8013766 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801377e:	2300      	movs	r3, #0
 8013780:	e7f5      	b.n	801376e <RadioGetGfskTimeOnAirNumerator+0x12>

08013782 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8013782:	b570      	push	{r4, r5, r6, lr}
 8013784:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8013788:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 801378c:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801378e:	f1a1 0c05 	sub.w	ip, r1, #5
 8013792:	f1bc 0f01 	cmp.w	ip, #1
 8013796:	d932      	bls.n	80137fe <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8013798:	b918      	cbnz	r0, 80137a2 <RadioGetLoRaTimeOnAirNumerator+0x20>
 801379a:	f1a1 060b 	sub.w	r6, r1, #11
 801379e:	2e01      	cmp	r6, #1
 80137a0:	d935      	bls.n	801380e <RadioGetLoRaTimeOnAirNumerator+0x8c>
 80137a2:	2801      	cmp	r0, #1
 80137a4:	d02f      	beq.n	8013806 <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 80137a6:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80137a8:	f89d e014 	ldrb.w	lr, [sp, #20]
 80137ac:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 80137b0:	b38d      	cbz	r5, 8013816 <RadioGetLoRaTimeOnAirNumerator+0x94>
 80137b2:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80137b6:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 80137b8:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 80137ba:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 80137be:	b36c      	cbz	r4, 801381c <RadioGetLoRaTimeOnAirNumerator+0x9a>
 80137c0:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 80137c4:	44f4      	add	ip, lr

    if( datarate <= 6 )
 80137c6:	2906      	cmp	r1, #6
 80137c8:	d904      	bls.n	80137d4 <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 80137ca:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 80137ce:	b10e      	cbz	r6, 80137d4 <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80137d0:	1e88      	subs	r0, r1, #2
 80137d2:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 80137d4:	f1bc 0f00 	cmp.w	ip, #0
 80137d8:	db23      	blt.n	8013822 <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80137da:	4484      	add	ip, r0
 80137dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80137e0:	fb9c fcf0 	sdiv	ip, ip, r0
 80137e4:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 80137e8:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 80137ec:	2906      	cmp	r1, #6
 80137ee:	d801      	bhi.n	80137f4 <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 80137f0:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80137f4:	0080      	lsls	r0, r0, #2
 80137f6:	3001      	adds	r0, #1
 80137f8:	3902      	subs	r1, #2
}
 80137fa:	4088      	lsls	r0, r1
 80137fc:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 80137fe:	2b0b      	cmp	r3, #11
 8013800:	d8ca      	bhi.n	8013798 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8013802:	230c      	movs	r3, #12
 8013804:	e7c8      	b.n	8013798 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8013806:	290c      	cmp	r1, #12
 8013808:	d003      	beq.n	8013812 <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 801380a:	2600      	movs	r6, #0
 801380c:	e7cc      	b.n	80137a8 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 801380e:	2601      	movs	r6, #1
 8013810:	e7ca      	b.n	80137a8 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8013812:	2601      	movs	r6, #1
 8013814:	e7c8      	b.n	80137a8 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8013816:	f04f 0c00 	mov.w	ip, #0
 801381a:	e7cc      	b.n	80137b6 <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 801381c:	f04f 0c14 	mov.w	ip, #20
 8013820:	e7d0      	b.n	80137c4 <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 8013822:	f04f 0c00 	mov.w	ip, #0
 8013826:	e7d8      	b.n	80137da <RadioGetLoRaTimeOnAirNumerator+0x58>

08013828 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8013828:	b5f0      	push	{r4, r5, r6, r7, lr}
 801382a:	b085      	sub	sp, #20
 801382c:	460e      	mov	r6, r1
 801382e:	4615      	mov	r5, r2
 8013830:	4619      	mov	r1, r3
 8013832:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8013836:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801383a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801383e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8013842:	b148      	cbz	r0, 8013858 <RadioTimeOnAir+0x30>
 8013844:	2801      	cmp	r0, #1
 8013846:	d012      	beq.n	801386e <RadioTimeOnAir+0x46>
 8013848:	2501      	movs	r5, #1
 801384a:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 801384c:	442c      	add	r4, r5
 801384e:	1e60      	subs	r0, r4, #1
}
 8013850:	fbb0 f0f5 	udiv	r0, r0, r5
 8013854:	b005      	add	sp, #20
 8013856:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8013858:	f8cd c004 	str.w	ip, [sp, #4]
 801385c:	9700      	str	r7, [sp, #0]
 801385e:	4628      	mov	r0, r5
 8013860:	f7ff ff7c 	bl	801375c <RadioGetGfskTimeOnAirNumerator>
 8013864:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8013868:	fb00 f404 	mul.w	r4, r0, r4
        break;
 801386c:	e7ee      	b.n	801384c <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801386e:	f8cd c008 	str.w	ip, [sp, #8]
 8013872:	9701      	str	r7, [sp, #4]
 8013874:	9300      	str	r3, [sp, #0]
 8013876:	4613      	mov	r3, r2
 8013878:	460a      	mov	r2, r1
 801387a:	4629      	mov	r1, r5
 801387c:	4630      	mov	r0, r6
 801387e:	f7ff ff80 	bl	8013782 <RadioGetLoRaTimeOnAirNumerator>
 8013882:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8013886:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801388a:	4b03      	ldr	r3, [pc, #12]	; (8013898 <RadioTimeOnAir+0x70>)
 801388c:	5d98      	ldrb	r0, [r3, r6]
 801388e:	f7ff ff37 	bl	8013700 <RadioGetLoRaBandwidthInHz>
 8013892:	4605      	mov	r5, r0
        break;
 8013894:	e7da      	b.n	801384c <RadioTimeOnAir+0x24>
 8013896:	bf00      	nop
 8013898:	08016dc4 	.word	0x08016dc4

0801389c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 801389c:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 801389e:	4b05      	ldr	r3, [pc, #20]	; (80138b4 <RadioOnTxTimeoutProcess+0x18>)
 80138a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80138a4:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80138a6:	4b04      	ldr	r3, [pc, #16]	; (80138b8 <RadioOnTxTimeoutProcess+0x1c>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	b113      	cbz	r3, 80138b2 <RadioOnTxTimeoutProcess+0x16>
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	b103      	cbz	r3, 80138b2 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 80138b0:	4798      	blx	r3
    }
}
 80138b2:	bd08      	pop	{r3, pc}
 80138b4:	48000400 	.word	0x48000400
 80138b8:	20003e84 	.word	0x20003e84

080138bc <RadioOnTxTimeoutIrq>:
{
 80138bc:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 80138be:	f7ff ffed 	bl	801389c <RadioOnTxTimeoutProcess>
}
 80138c2:	bd08      	pop	{r3, pc}

080138c4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80138c4:	b508      	push	{r3, lr}
 80138c6:	4b05      	ldr	r3, [pc, #20]	; (80138dc <RadioOnRxTimeoutProcess+0x18>)
 80138c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80138cc:	629a      	str	r2, [r3, #40]	; 0x28
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80138ce:	4b04      	ldr	r3, [pc, #16]	; (80138e0 <RadioOnRxTimeoutProcess+0x1c>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	b113      	cbz	r3, 80138da <RadioOnRxTimeoutProcess+0x16>
 80138d4:	68db      	ldr	r3, [r3, #12]
 80138d6:	b103      	cbz	r3, 80138da <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 80138d8:	4798      	blx	r3
    }
}
 80138da:	bd08      	pop	{r3, pc}
 80138dc:	48000400 	.word	0x48000400
 80138e0:	20003e84 	.word	0x20003e84

080138e4 <RadioOnRxTimeoutIrq>:
{
 80138e4:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 80138e6:	f7ff ffed 	bl	80138c4 <RadioOnRxTimeoutProcess>
}
 80138ea:	bd08      	pop	{r3, pc}

080138ec <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80138ec:	f04f 30ff 	mov.w	r0, #4294967295
 80138f0:	4770      	bx	lr

080138f2 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80138f2:	f04f 30ff 	mov.w	r0, #4294967295
 80138f6:	4770      	bx	lr

080138f8 <RadioTxCw>:
{
 80138f8:	b508      	push	{r3, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80138fa:	f001 fbab 	bl	8015054 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80138fe:	2101      	movs	r1, #1
 8013900:	f001 fb94 	bl	801502c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8013904:	f000 feac 	bl	8014660 <SUBGRF_SetTxContinuousWave>
}
 8013908:	bd08      	pop	{r3, pc}
	...

0801390c <RadioSetRxDutyCycle>:
{
 801390c:	b570      	push	{r4, r5, r6, lr}
 801390e:	4604      	mov	r4, r0
 8013910:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8013912:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8013916:	4e09      	ldr	r6, [pc, #36]	; (801393c <RadioSetRxDutyCycle+0x30>)
 8013918:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801391a:	2300      	movs	r3, #0
 801391c:	461a      	mov	r2, r3
 801391e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013922:	4608      	mov	r0, r1
 8013924:	f000 ff47 	bl	80147b6 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013928:	2100      	movs	r1, #0
 801392a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801392e:	f001 fb7d 	bl	801502c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8013932:	4629      	mov	r1, r5
 8013934:	4620      	mov	r0, r4
 8013936:	f000 fe63 	bl	8014600 <SUBGRF_SetRxDutyCycle>
}
 801393a:	bd70      	pop	{r4, r5, r6, pc}
 801393c:	20003ea0 	.word	0x20003ea0

08013940 <RadioRxBoosted>:
{
 8013940:	b538      	push	{r3, r4, r5, lr}
 8013942:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8013944:	f001 fc57 	bl	80151f6 <RFW_Is_Init>
 8013948:	2801      	cmp	r0, #1
 801394a:	d019      	beq.n	8013980 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801394c:	2300      	movs	r3, #0
 801394e:	461a      	mov	r2, r3
 8013950:	f240 2162 	movw	r1, #610	; 0x262
 8013954:	4608      	mov	r0, r1
 8013956:	f000 ff2e 	bl	80147b6 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801395a:	b9a4      	cbnz	r4, 8013986 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801395c:	4c11      	ldr	r4, [pc, #68]	; (80139a4 <RadioRxBoosted+0x64>)
 801395e:	2100      	movs	r1, #0
 8013960:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8013962:	4b11      	ldr	r3, [pc, #68]	; (80139a8 <RadioRxBoosted+0x68>)
 8013964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013968:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801396a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801396e:	f001 fb5d 	bl	801502c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8013972:	7863      	ldrb	r3, [r4, #1]
 8013974:	b183      	cbz	r3, 8013998 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8013976:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801397a:	f000 ffef 	bl	801495c <SUBGRF_SetRxBoosted>
}
 801397e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8013980:	f001 fc41 	bl	8015206 <RFW_ReceiveInit>
 8013984:	e7e9      	b.n	801395a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8013986:	4d09      	ldr	r5, [pc, #36]	; (80139ac <RadioRxBoosted+0x6c>)
 8013988:	4621      	mov	r1, r4
 801398a:	4628      	mov	r0, r5
 801398c:	f002 f832 	bl	80159f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8013990:	4628      	mov	r0, r5
 8013992:	f001 ffe9 	bl	8015968 <UTIL_TIMER_Start>
 8013996:	e7e1      	b.n	801395c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8013998:	4b02      	ldr	r3, [pc, #8]	; (80139a4 <RadioRxBoosted+0x64>)
 801399a:	6898      	ldr	r0, [r3, #8]
 801399c:	0180      	lsls	r0, r0, #6
 801399e:	f000 ffdd 	bl	801495c <SUBGRF_SetRxBoosted>
}
 80139a2:	e7ec      	b.n	801397e <RadioRxBoosted+0x3e>
 80139a4:	20003ea0 	.word	0x20003ea0
 80139a8:	48000400 	.word	0x48000400
 80139ac:	20003e88 	.word	0x20003e88

080139b0 <RadioStandby>:
{
 80139b0:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 80139b2:	2000      	movs	r0, #0
 80139b4:	f000 fdd6 	bl	8014564 <SUBGRF_SetStandby>
}
 80139b8:	bd08      	pop	{r3, pc}

080139ba <RadioWrite>:
{
 80139ba:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 80139bc:	f000 ffbe 	bl	801493c <SUBGRF_WriteRegister>
}
 80139c0:	bd08      	pop	{r3, pc}
	...

080139c4 <RadioTxPrbs>:
{
 80139c4:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80139c6:	2101      	movs	r1, #1
 80139c8:	4b07      	ldr	r3, [pc, #28]	; (80139e8 <RadioTxPrbs+0x24>)
 80139ca:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80139ce:	f001 fb2d 	bl	801502c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80139d2:	212d      	movs	r1, #45	; 0x2d
 80139d4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80139d8:	f7ff ffef 	bl	80139ba <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80139dc:	f000 fe47 	bl	801466e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80139e0:	4802      	ldr	r0, [pc, #8]	; (80139ec <RadioTxPrbs+0x28>)
 80139e2:	f000 fdd9 	bl	8014598 <SUBGRF_SetTx>
}
 80139e6:	bd08      	pop	{r3, pc}
 80139e8:	20003ea0 	.word	0x20003ea0
 80139ec:	000fffff 	.word	0x000fffff

080139f0 <RadioRead>:
{
 80139f0:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 80139f2:	f001 f895 	bl	8014b20 <SUBGRF_ReadRegister>
}
 80139f6:	bd08      	pop	{r3, pc}

080139f8 <RadioGetStatus>:
{
 80139f8:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 80139fa:	f000 fdad 	bl	8014558 <SUBGRF_GetOperatingMode>
 80139fe:	2805      	cmp	r0, #5
 8013a00:	d007      	beq.n	8013a12 <RadioGetStatus+0x1a>
 8013a02:	2807      	cmp	r0, #7
 8013a04:	d007      	beq.n	8013a16 <RadioGetStatus+0x1e>
 8013a06:	2804      	cmp	r0, #4
 8013a08:	d001      	beq.n	8013a0e <RadioGetStatus+0x16>
            return RF_IDLE;
 8013a0a:	2000      	movs	r0, #0
}
 8013a0c:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8013a0e:	2002      	movs	r0, #2
 8013a10:	e7fc      	b.n	8013a0c <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8013a12:	2001      	movs	r0, #1
 8013a14:	e7fa      	b.n	8013a0c <RadioGetStatus+0x14>
            return RF_CAD;
 8013a16:	2003      	movs	r0, #3
 8013a18:	e7f8      	b.n	8013a0c <RadioGetStatus+0x14>
	...

08013a1c <RadioIrqProcess>:
{
 8013a1c:	b530      	push	{r4, r5, lr}
 8013a1e:	b083      	sub	sp, #12
    uint8_t size = 0;
 8013a20:	2300      	movs	r3, #0
 8013a22:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8013a26:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8013a28:	4ba5      	ldr	r3, [pc, #660]	; (8013cc0 <RadioIrqProcess+0x2a4>)
 8013a2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8013a2e:	2b20      	cmp	r3, #32
 8013a30:	d829      	bhi.n	8013a86 <RadioIrqProcess+0x6a>
 8013a32:	b21a      	sxth	r2, r3
 8013a34:	2a00      	cmp	r2, #0
 8013a36:	f000 8140 	beq.w	8013cba <RadioIrqProcess+0x29e>
 8013a3a:	3b01      	subs	r3, #1
 8013a3c:	2b1f      	cmp	r3, #31
 8013a3e:	f200 813c 	bhi.w	8013cba <RadioIrqProcess+0x29e>
 8013a42:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013a46:	0063      	.short	0x0063
 8013a48:	013a007f 	.word	0x013a007f
 8013a4c:	013a00f7 	.word	0x013a00f7
 8013a50:	013a013a 	.word	0x013a013a
 8013a54:	013a0127 	.word	0x013a0127
 8013a58:	013a013a 	.word	0x013a013a
 8013a5c:	013a013a 	.word	0x013a013a
 8013a60:	013a013a 	.word	0x013a013a
 8013a64:	013a0134 	.word	0x013a0134
 8013a68:	013a013a 	.word	0x013a013a
 8013a6c:	013a013a 	.word	0x013a013a
 8013a70:	013a013a 	.word	0x013a013a
 8013a74:	013a013a 	.word	0x013a013a
 8013a78:	013a013a 	.word	0x013a013a
 8013a7c:	013a013a 	.word	0x013a013a
 8013a80:	013a013a 	.word	0x013a013a
 8013a84:	0155      	.short	0x0155
 8013a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a8a:	f000 80b3 	beq.w	8013bf4 <RadioIrqProcess+0x1d8>
 8013a8e:	d928      	bls.n	8013ae2 <RadioIrqProcess+0xc6>
 8013a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a94:	f040 8111 	bne.w	8013cba <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8013a98:	4b8a      	ldr	r3, [pc, #552]	; (8013cc4 <RadioIrqProcess+0x2a8>)
 8013a9a:	2201      	movs	r2, #1
 8013a9c:	2100      	movs	r1, #0
 8013a9e:	2002      	movs	r0, #2
 8013aa0:	f001 fc90 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8013aa4:	f000 fd58 	bl	8014558 <SUBGRF_GetOperatingMode>
 8013aa8:	2804      	cmp	r0, #4
 8013aaa:	f000 80b0 	beq.w	8013c0e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8013aae:	f000 fd53 	bl	8014558 <SUBGRF_GetOperatingMode>
 8013ab2:	2805      	cmp	r0, #5
 8013ab4:	f040 8101 	bne.w	8013cba <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8013ab8:	4b83      	ldr	r3, [pc, #524]	; (8013cc8 <RadioIrqProcess+0x2ac>)
 8013aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013abe:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8013ac0:	4882      	ldr	r0, [pc, #520]	; (8013ccc <RadioIrqProcess+0x2b0>)
 8013ac2:	f001 fef7 	bl	80158b4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8013ac6:	2000      	movs	r0, #0
 8013ac8:	f000 fd4c 	bl	8014564 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8013acc:	4b80      	ldr	r3, [pc, #512]	; (8013cd0 <RadioIrqProcess+0x2b4>)
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	f000 80f2 	beq.w	8013cba <RadioIrqProcess+0x29e>
 8013ad6:	68db      	ldr	r3, [r3, #12]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	f000 80ee 	beq.w	8013cba <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8013ade:	4798      	blx	r3
 8013ae0:	e0eb      	b.n	8013cba <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8013ae2:	2b40      	cmp	r3, #64	; 0x40
 8013ae4:	f000 811d 	beq.w	8013d22 <RadioIrqProcess+0x306>
 8013ae8:	2b80      	cmp	r3, #128	; 0x80
 8013aea:	f040 80e6 	bne.w	8013cba <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8013aee:	2000      	movs	r0, #0
 8013af0:	f000 fd38 	bl	8014564 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8013af4:	4b76      	ldr	r3, [pc, #472]	; (8013cd0 <RadioIrqProcess+0x2b4>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	f000 80de 	beq.w	8013cba <RadioIrqProcess+0x29e>
 8013afe:	699b      	ldr	r3, [r3, #24]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f000 80da 	beq.w	8013cba <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8013b06:	2000      	movs	r0, #0
 8013b08:	4798      	blx	r3
 8013b0a:	e0d6      	b.n	8013cba <RadioIrqProcess+0x29e>
 8013b0c:	4b6e      	ldr	r3, [pc, #440]	; (8013cc8 <RadioIrqProcess+0x2ac>)
 8013b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013b12:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8013b14:	486f      	ldr	r0, [pc, #444]	; (8013cd4 <RadioIrqProcess+0x2b8>)
 8013b16:	f001 fecd 	bl	80158b4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8013b1a:	2000      	movs	r0, #0
 8013b1c:	f000 fd22 	bl	8014564 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8013b20:	f001 fb6b 	bl	80151fa <RFW_Is_LongPacketModeEnabled>
 8013b24:	2801      	cmp	r0, #1
 8013b26:	d00a      	beq.n	8013b3e <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8013b28:	4b69      	ldr	r3, [pc, #420]	; (8013cd0 <RadioIrqProcess+0x2b4>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	f000 80c4 	beq.w	8013cba <RadioIrqProcess+0x29e>
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	f000 80c0 	beq.w	8013cba <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8013b3a:	4798      	blx	r3
 8013b3c:	e0bd      	b.n	8013cba <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8013b3e:	f001 fb65 	bl	801520c <RFW_DeInit_TxLongPacket>
 8013b42:	e7f1      	b.n	8013b28 <RadioIrqProcess+0x10c>
 8013b44:	4b60      	ldr	r3, [pc, #384]	; (8013cc8 <RadioIrqProcess+0x2ac>)
 8013b46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013b4a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8013b4c:	485f      	ldr	r0, [pc, #380]	; (8013ccc <RadioIrqProcess+0x2b0>)
 8013b4e:	f001 feb1 	bl	80158b4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8013b52:	4b5b      	ldr	r3, [pc, #364]	; (8013cc0 <RadioIrqProcess+0x2a4>)
 8013b54:	785b      	ldrb	r3, [r3, #1]
 8013b56:	b303      	cbz	r3, 8013b9a <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8013b58:	22ff      	movs	r2, #255	; 0xff
 8013b5a:	f10d 0107 	add.w	r1, sp, #7
 8013b5e:	485e      	ldr	r0, [pc, #376]	; (8013cd8 <RadioIrqProcess+0x2bc>)
 8013b60:	f001 fa4a 	bl	8014ff8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8013b64:	485d      	ldr	r0, [pc, #372]	; (8013cdc <RadioIrqProcess+0x2c0>)
 8013b66:	f000 fead 	bl	80148c4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8013b6a:	4b59      	ldr	r3, [pc, #356]	; (8013cd0 <RadioIrqProcess+0x2b4>)
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	f000 80a3 	beq.w	8013cba <RadioIrqProcess+0x29e>
 8013b74:	689c      	ldr	r4, [r3, #8]
 8013b76:	2c00      	cmp	r4, #0
 8013b78:	f000 809f 	beq.w	8013cba <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8013b7c:	4b50      	ldr	r3, [pc, #320]	; (8013cc0 <RadioIrqProcess+0x2a4>)
 8013b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d11d      	bne.n	8013bc2 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8013b86:	4a4e      	ldr	r2, [pc, #312]	; (8013cc0 <RadioIrqProcess+0x2a4>)
 8013b88:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8013b8c:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8013b90:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013b94:	4850      	ldr	r0, [pc, #320]	; (8013cd8 <RadioIrqProcess+0x2bc>)
 8013b96:	47a0      	blx	r4
                break;
 8013b98:	e08f      	b.n	8013cba <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8013b9a:	2000      	movs	r0, #0
 8013b9c:	f000 fce2 	bl	8014564 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8013ba0:	2100      	movs	r1, #0
 8013ba2:	f640 1002 	movw	r0, #2306	; 0x902
 8013ba6:	f000 fec9 	bl	801493c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8013baa:	f640 1044 	movw	r0, #2372	; 0x944
 8013bae:	f000 ffb7 	bl	8014b20 <SUBGRF_ReadRegister>
 8013bb2:	f040 0102 	orr.w	r1, r0, #2
 8013bb6:	b2c9      	uxtb	r1, r1
 8013bb8:	f640 1044 	movw	r0, #2372	; 0x944
 8013bbc:	f000 febe 	bl	801493c <SUBGRF_WriteRegister>
 8013bc0:	e7ca      	b.n	8013b58 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8013bc2:	4c3f      	ldr	r4, [pc, #252]	; (8013cc0 <RadioIrqProcess+0x2a4>)
 8013bc4:	4669      	mov	r1, sp
 8013bc6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013bc8:	f001 faca 	bl	8015160 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8013bcc:	4b40      	ldr	r3, [pc, #256]	; (8013cd0 <RadioIrqProcess+0x2b4>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	689d      	ldr	r5, [r3, #8]
 8013bd2:	9b00      	ldr	r3, [sp, #0]
 8013bd4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8013bd8:	4a41      	ldr	r2, [pc, #260]	; (8013ce0 <RadioIrqProcess+0x2c4>)
 8013bda:	fb82 1203 	smull	r1, r2, r2, r3
 8013bde:	17db      	asrs	r3, r3, #31
 8013be0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8013be4:	b25b      	sxtb	r3, r3
 8013be6:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8013bea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013bee:	483a      	ldr	r0, [pc, #232]	; (8013cd8 <RadioIrqProcess+0x2bc>)
 8013bf0:	47a8      	blx	r5
                break;
 8013bf2:	e062      	b.n	8013cba <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8013bf4:	2000      	movs	r0, #0
 8013bf6:	f000 fcb5 	bl	8014564 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8013bfa:	4b35      	ldr	r3, [pc, #212]	; (8013cd0 <RadioIrqProcess+0x2b4>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d05b      	beq.n	8013cba <RadioIrqProcess+0x29e>
 8013c02:	699b      	ldr	r3, [r3, #24]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d058      	beq.n	8013cba <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8013c08:	2001      	movs	r0, #1
 8013c0a:	4798      	blx	r3
 8013c0c:	e055      	b.n	8013cba <RadioIrqProcess+0x29e>
 8013c0e:	4b2e      	ldr	r3, [pc, #184]	; (8013cc8 <RadioIrqProcess+0x2ac>)
 8013c10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013c14:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8013c16:	482f      	ldr	r0, [pc, #188]	; (8013cd4 <RadioIrqProcess+0x2b8>)
 8013c18:	f001 fe4c 	bl	80158b4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8013c1c:	2000      	movs	r0, #0
 8013c1e:	f000 fca1 	bl	8014564 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8013c22:	4b2b      	ldr	r3, [pc, #172]	; (8013cd0 <RadioIrqProcess+0x2b4>)
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d047      	beq.n	8013cba <RadioIrqProcess+0x29e>
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d044      	beq.n	8013cba <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8013c30:	4798      	blx	r3
 8013c32:	e042      	b.n	8013cba <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8013c34:	4b2b      	ldr	r3, [pc, #172]	; (8013ce4 <RadioIrqProcess+0x2c8>)
 8013c36:	2201      	movs	r2, #1
 8013c38:	2100      	movs	r1, #0
 8013c3a:	2002      	movs	r0, #2
 8013c3c:	f001 fbc2 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8013c40:	4b1f      	ldr	r3, [pc, #124]	; (8013cc0 <RadioIrqProcess+0x2a4>)
 8013c42:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013c44:	b3c9      	cbz	r1, 8013cba <RadioIrqProcess+0x29e>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8013c46:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8013c4a:	f640 1003 	movw	r0, #2307	; 0x903
 8013c4e:	f7ff feb4 	bl	80139ba <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8013c52:	4c1b      	ldr	r4, [pc, #108]	; (8013cc0 <RadioIrqProcess+0x2a4>)
 8013c54:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013c58:	f640 1004 	movw	r0, #2308	; 0x904
 8013c5c:	f7ff fead 	bl	80139ba <RadioWrite>
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8013c60:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8013c64:	f640 1005 	movw	r0, #2309	; 0x905
 8013c68:	f7ff fea7 	bl	80139ba <RadioWrite>
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 8013c6c:	f640 1002 	movw	r0, #2306	; 0x902
 8013c70:	f7ff febe 	bl	80139f0 <RadioRead>
 8013c74:	f040 0101 	orr.w	r1, r0, #1
 8013c78:	b2c9      	uxtb	r1, r1
 8013c7a:	f640 1002 	movw	r0, #2306	; 0x902
 8013c7e:	f7ff fe9c 	bl	80139ba <RadioWrite>
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8013c82:	2200      	movs	r2, #0
 8013c84:	65a2      	str	r2, [r4, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013c86:	4613      	mov	r3, r2
 8013c88:	f240 2162 	movw	r1, #610	; 0x262
 8013c8c:	4608      	mov	r0, r1
 8013c8e:	f000 fd92 	bl	80147b6 <SUBGRF_SetDioIrqParams>
 8013c92:	e012      	b.n	8013cba <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8013c94:	4b14      	ldr	r3, [pc, #80]	; (8013ce8 <RadioIrqProcess+0x2cc>)
 8013c96:	2201      	movs	r2, #1
 8013c98:	2100      	movs	r1, #0
 8013c9a:	2002      	movs	r0, #2
 8013c9c:	f001 fb92 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8013ca0:	f001 faa9 	bl	80151f6 <RFW_Is_Init>
 8013ca4:	2801      	cmp	r0, #1
 8013ca6:	d108      	bne.n	8013cba <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8013ca8:	f001 fab1 	bl	801520e <RFW_ReceivePayload>
 8013cac:	e005      	b.n	8013cba <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8013cae:	4b0f      	ldr	r3, [pc, #60]	; (8013cec <RadioIrqProcess+0x2d0>)
 8013cb0:	2201      	movs	r2, #1
 8013cb2:	2100      	movs	r1, #0
 8013cb4:	2002      	movs	r0, #2
 8013cb6:	f001 fb85 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8013cba:	b003      	add	sp, #12
 8013cbc:	bd30      	pop	{r4, r5, pc}
 8013cbe:	bf00      	nop
 8013cc0:	20003ea0 	.word	0x20003ea0
 8013cc4:	08016d58 	.word	0x08016d58
 8013cc8:	48000400 	.word	0x48000400
 8013ccc:	20003e88 	.word	0x20003e88
 8013cd0:	20003e84 	.word	0x20003e84
 8013cd4:	20003efc 	.word	0x20003efc
 8013cd8:	20003d84 	.word	0x20003d84
 8013cdc:	20003ec4 	.word	0x20003ec4
 8013ce0:	10624dd3 	.word	0x10624dd3
 8013ce4:	08016d6c 	.word	0x08016d6c
 8013ce8:	08016d78 	.word	0x08016d78
 8013cec:	08016d84 	.word	0x08016d84
        TimerStop( &RxTimeoutTimer );
 8013cf0:	4817      	ldr	r0, [pc, #92]	; (8013d50 <RadioIrqProcess+0x334>)
 8013cf2:	f001 fddf 	bl	80158b4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8013cf6:	4b17      	ldr	r3, [pc, #92]	; (8013d54 <RadioIrqProcess+0x338>)
 8013cf8:	785b      	ldrb	r3, [r3, #1]
 8013cfa:	b173      	cbz	r3, 8013d1a <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8013cfc:	4b16      	ldr	r3, [pc, #88]	; (8013d58 <RadioIrqProcess+0x33c>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d0da      	beq.n	8013cba <RadioIrqProcess+0x29e>
 8013d04:	68db      	ldr	r3, [r3, #12]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d0d7      	beq.n	8013cba <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8013d0a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8013d0c:	4b13      	ldr	r3, [pc, #76]	; (8013d5c <RadioIrqProcess+0x340>)
 8013d0e:	2201      	movs	r2, #1
 8013d10:	2100      	movs	r1, #0
 8013d12:	2002      	movs	r0, #2
 8013d14:	f001 fb56 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
 8013d18:	e7cf      	b.n	8013cba <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8013d1a:	2000      	movs	r0, #0
 8013d1c:	f000 fc22 	bl	8014564 <SUBGRF_SetStandby>
 8013d20:	e7ec      	b.n	8013cfc <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8013d22:	4b0f      	ldr	r3, [pc, #60]	; (8013d60 <RadioIrqProcess+0x344>)
 8013d24:	2201      	movs	r2, #1
 8013d26:	2100      	movs	r1, #0
 8013d28:	2002      	movs	r0, #2
 8013d2a:	f001 fb4b 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8013d2e:	4b09      	ldr	r3, [pc, #36]	; (8013d54 <RadioIrqProcess+0x338>)
 8013d30:	785b      	ldrb	r3, [r3, #1]
 8013d32:	b143      	cbz	r3, 8013d46 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8013d34:	4b08      	ldr	r3, [pc, #32]	; (8013d58 <RadioIrqProcess+0x33c>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d0be      	beq.n	8013cba <RadioIrqProcess+0x29e>
 8013d3c:	691b      	ldr	r3, [r3, #16]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d0bb      	beq.n	8013cba <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8013d42:	4798      	blx	r3
}
 8013d44:	e7b9      	b.n	8013cba <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8013d46:	2000      	movs	r0, #0
 8013d48:	f000 fc0c 	bl	8014564 <SUBGRF_SetStandby>
 8013d4c:	e7f2      	b.n	8013d34 <RadioIrqProcess+0x318>
 8013d4e:	bf00      	nop
 8013d50:	20003e88 	.word	0x20003e88
 8013d54:	20003ea0 	.word	0x20003ea0
 8013d58:	20003e84 	.word	0x20003e84
 8013d5c:	08016d90 	.word	0x08016d90
 8013d60:	08016d9c 	.word	0x08016d9c

08013d64 <RadioOnDioIrq>:
{
 8013d64:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8013d66:	4b03      	ldr	r3, [pc, #12]	; (8013d74 <RadioOnDioIrq+0x10>)
 8013d68:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8013d6c:	f7ff fe56 	bl	8013a1c <RadioIrqProcess>
}
 8013d70:	bd08      	pop	{r3, pc}
 8013d72:	bf00      	nop
 8013d74:	20003ea0 	.word	0x20003ea0

08013d78 <RadioGetWakeupTime>:
{
 8013d78:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8013d7a:	f001 f982 	bl	8015082 <SUBGRF_GetRadioWakeUpTime>
}
 8013d7e:	3003      	adds	r0, #3
 8013d80:	bd08      	pop	{r3, pc}
	...

08013d84 <RadioSetMaxPayloadLength>:
{
 8013d84:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8013d86:	2801      	cmp	r0, #1
 8013d88:	d004      	beq.n	8013d94 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8013d8a:	4b0a      	ldr	r3, [pc, #40]	; (8013db4 <RadioSetMaxPayloadLength+0x30>)
 8013d8c:	7d5b      	ldrb	r3, [r3, #21]
 8013d8e:	2b01      	cmp	r3, #1
 8013d90:	d008      	beq.n	8013da4 <RadioSetMaxPayloadLength+0x20>
}
 8013d92:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8013d94:	4b08      	ldr	r3, [pc, #32]	; (8013db8 <RadioSetMaxPayloadLength+0x34>)
 8013d96:	7019      	strb	r1, [r3, #0]
 8013d98:	4806      	ldr	r0, [pc, #24]	; (8013db4 <RadioSetMaxPayloadLength+0x30>)
 8013d9a:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013d9c:	300e      	adds	r0, #14
 8013d9e:	f001 f843 	bl	8014e28 <SUBGRF_SetPacketParams>
 8013da2:	e7f6      	b.n	8013d92 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8013da4:	4b04      	ldr	r3, [pc, #16]	; (8013db8 <RadioSetMaxPayloadLength+0x34>)
 8013da6:	7019      	strb	r1, [r3, #0]
 8013da8:	4802      	ldr	r0, [pc, #8]	; (8013db4 <RadioSetMaxPayloadLength+0x30>)
 8013daa:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013dac:	300e      	adds	r0, #14
 8013dae:	f001 f83b 	bl	8014e28 <SUBGRF_SetPacketParams>
}
 8013db2:	e7ee      	b.n	8013d92 <RadioSetMaxPayloadLength+0xe>
 8013db4:	20003ea0 	.word	0x20003ea0
 8013db8:	20000110 	.word	0x20000110

08013dbc <RadioReadRegisters>:
{
 8013dbc:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8013dbe:	f001 f8a5 	bl	8014f0c <SUBGRF_ReadRegisters>
}
 8013dc2:	bd08      	pop	{r3, pc}

08013dc4 <RadioWriteRegisters>:
{
 8013dc4:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8013dc6:	f000 ffed 	bl	8014da4 <SUBGRF_WriteRegisters>
}
 8013dca:	bd08      	pop	{r3, pc}

08013dcc <RadioRssi>:
{
 8013dcc:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8013dce:	f000 fd6b 	bl	80148a8 <SUBGRF_GetRssiInst>
}
 8013dd2:	b200      	sxth	r0, r0
 8013dd4:	bd08      	pop	{r3, pc}
	...

08013dd8 <RadioSetTxContinuousWave>:
{
 8013dd8:	b538      	push	{r3, r4, r5, lr}
 8013dda:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8013ddc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8013de0:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8013de4:	f000 fd20 	bl	8014828 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8013de8:	4628      	mov	r0, r5
 8013dea:	f001 f933 	bl	8015054 <SUBGRF_SetRfTxPower>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8013dee:	2101      	movs	r1, #1
 8013df0:	f001 f91c 	bl	801502c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8013df4:	f000 fc34 	bl	8014660 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8013df8:	4d04      	ldr	r5, [pc, #16]	; (8013e0c <RadioSetTxContinuousWave+0x34>)
 8013dfa:	4621      	mov	r1, r4
 8013dfc:	4628      	mov	r0, r5
 8013dfe:	f001 fdf9 	bl	80159f4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8013e02:	4628      	mov	r0, r5
 8013e04:	f001 fdb0 	bl	8015968 <UTIL_TIMER_Start>
}
 8013e08:	bd38      	pop	{r3, r4, r5, pc}
 8013e0a:	bf00      	nop
 8013e0c:	20003efc 	.word	0x20003efc

08013e10 <RadioSetChannel>:
{
 8013e10:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8013e12:	f000 fd09 	bl	8014828 <SUBGRF_SetRfFrequency>
}
 8013e16:	bd08      	pop	{r3, pc}

08013e18 <RadioStartCad>:
{
 8013e18:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	4b07      	ldr	r3, [pc, #28]	; (8013e3c <RadioStartCad+0x24>)
 8013e1e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8013e22:	f001 f903 	bl	801502c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8013e26:	2300      	movs	r3, #0
 8013e28:	461a      	mov	r2, r3
 8013e2a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8013e2e:	4608      	mov	r0, r1
 8013e30:	f000 fcc1 	bl	80147b6 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8013e34:	f000 fc08 	bl	8014648 <SUBGRF_SetCad>
}
 8013e38:	bd08      	pop	{r3, pc}
 8013e3a:	bf00      	nop
 8013e3c:	20003ea0 	.word	0x20003ea0

08013e40 <RadioRx>:
{
 8013e40:	b538      	push	{r3, r4, r5, lr}
 8013e42:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8013e44:	f001 f9d7 	bl	80151f6 <RFW_Is_Init>
 8013e48:	2801      	cmp	r0, #1
 8013e4a:	d019      	beq.n	8013e80 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	461a      	mov	r2, r3
 8013e50:	f240 2162 	movw	r1, #610	; 0x262
 8013e54:	4608      	mov	r0, r1
 8013e56:	f000 fcae 	bl	80147b6 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8013e5a:	b9a4      	cbnz	r4, 8013e86 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8013e5c:	4c11      	ldr	r4, [pc, #68]	; (8013ea4 <RadioRx+0x64>)
 8013e5e:	2100      	movs	r1, #0
 8013e60:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8013e62:	4b11      	ldr	r3, [pc, #68]	; (8013ea8 <RadioRx+0x68>)
 8013e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013e68:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8013e6a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8013e6e:	f001 f8dd 	bl	801502c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8013e72:	7863      	ldrb	r3, [r4, #1]
 8013e74:	b183      	cbz	r3, 8013e98 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8013e76:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8013e7a:	f000 fba7 	bl	80145cc <SUBGRF_SetRx>
}
 8013e7e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8013e80:	f001 f9c1 	bl	8015206 <RFW_ReceiveInit>
 8013e84:	e7e9      	b.n	8013e5a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8013e86:	4d09      	ldr	r5, [pc, #36]	; (8013eac <RadioRx+0x6c>)
 8013e88:	4621      	mov	r1, r4
 8013e8a:	4628      	mov	r0, r5
 8013e8c:	f001 fdb2 	bl	80159f4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8013e90:	4628      	mov	r0, r5
 8013e92:	f001 fd69 	bl	8015968 <UTIL_TIMER_Start>
 8013e96:	e7e1      	b.n	8013e5c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8013e98:	4b02      	ldr	r3, [pc, #8]	; (8013ea4 <RadioRx+0x64>)
 8013e9a:	6898      	ldr	r0, [r3, #8]
 8013e9c:	0180      	lsls	r0, r0, #6
 8013e9e:	f000 fb95 	bl	80145cc <SUBGRF_SetRx>
}
 8013ea2:	e7ec      	b.n	8013e7e <RadioRx+0x3e>
 8013ea4:	20003ea0 	.word	0x20003ea0
 8013ea8:	48000400 	.word	0x48000400
 8013eac:	20003e88 	.word	0x20003e88

08013eb0 <RadioSleep>:
{
 8013eb0:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8013eb2:	f04f 0004 	mov.w	r0, #4
 8013eb6:	f000 fe8d 	bl	8014bd4 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8013eba:	2002      	movs	r0, #2
 8013ebc:	f7ee f8e8 	bl	8002090 <HAL_Delay>
}
 8013ec0:	bd08      	pop	{r3, pc}
	...

08013ec4 <RadioSend>:
{
 8013ec4:	b570      	push	{r4, r5, r6, lr}
 8013ec6:	b082      	sub	sp, #8
 8013ec8:	4605      	mov	r5, r0
 8013eca:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8013ecc:	2300      	movs	r3, #0
 8013ece:	461a      	mov	r2, r3
 8013ed0:	f240 2101 	movw	r1, #513	; 0x201
 8013ed4:	4608      	mov	r0, r1
 8013ed6:	f000 fc6e 	bl	80147b6 <SUBGRF_SetDioIrqParams>
 8013eda:	4b3e      	ldr	r3, [pc, #248]	; (8013fd4 <RadioSend+0x110>)
 8013edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8013ee0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8013ee2:	4e3d      	ldr	r6, [pc, #244]	; (8013fd8 <RadioSend+0x114>)
 8013ee4:	2101      	movs	r1, #1
 8013ee6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8013eea:	f001 f89f 	bl	801502c <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8013eee:	7833      	ldrb	r3, [r6, #0]
 8013ef0:	2b01      	cmp	r3, #1
 8013ef2:	d103      	bne.n	8013efc <RadioSend+0x38>
 8013ef4:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8013ef8:	2b06      	cmp	r3, #6
 8013efa:	d012      	beq.n	8013f22 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8013efc:	f640 0089 	movw	r0, #2185	; 0x889
 8013f00:	f000 fe0e 	bl	8014b20 <SUBGRF_ReadRegister>
 8013f04:	f040 0104 	orr.w	r1, r0, #4
 8013f08:	b2c9      	uxtb	r1, r1
 8013f0a:	f640 0089 	movw	r0, #2185	; 0x889
 8013f0e:	f000 fd15 	bl	801493c <SUBGRF_WriteRegister>
    switch( SubgRf.Modem )
 8013f12:	4b31      	ldr	r3, [pc, #196]	; (8013fd8 <RadioSend+0x114>)
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	2b03      	cmp	r3, #3
 8013f18:	d818      	bhi.n	8013f4c <RadioSend+0x88>
 8013f1a:	e8df f003 	tbb	[pc, r3]
 8013f1e:	0d22      	.short	0x0d22
 8013f20:	4d22      	.short	0x4d22
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8013f22:	f640 0089 	movw	r0, #2185	; 0x889
 8013f26:	f000 fdfb 	bl	8014b20 <SUBGRF_ReadRegister>
 8013f2a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8013f2e:	f640 0089 	movw	r0, #2185	; 0x889
 8013f32:	f000 fd03 	bl	801493c <SUBGRF_WriteRegister>
 8013f36:	e7ec      	b.n	8013f12 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8013f38:	4827      	ldr	r0, [pc, #156]	; (8013fd8 <RadioSend+0x114>)
 8013f3a:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013f3c:	300e      	adds	r0, #14
 8013f3e:	f000 ff73 	bl	8014e28 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8013f42:	2200      	movs	r2, #0
 8013f44:	4621      	mov	r1, r4
 8013f46:	4628      	mov	r0, r5
 8013f48:	f001 f83d 	bl	8014fc6 <SUBGRF_SendPayload>
    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8013f4c:	4c23      	ldr	r4, [pc, #140]	; (8013fdc <RadioSend+0x118>)
 8013f4e:	4b22      	ldr	r3, [pc, #136]	; (8013fd8 <RadioSend+0x114>)
 8013f50:	6859      	ldr	r1, [r3, #4]
 8013f52:	4620      	mov	r0, r4
 8013f54:	f001 fd4e 	bl	80159f4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f001 fd05 	bl	8015968 <UTIL_TIMER_Start>
}
 8013f5e:	b002      	add	sp, #8
 8013f60:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8013f62:	f001 f948 	bl	80151f6 <RFW_Is_Init>
 8013f66:	2801      	cmp	r0, #1
 8013f68:	d00a      	beq.n	8013f80 <RadioSend+0xbc>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8013f6a:	481b      	ldr	r0, [pc, #108]	; (8013fd8 <RadioSend+0x114>)
 8013f6c:	7584      	strb	r4, [r0, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013f6e:	300e      	adds	r0, #14
 8013f70:	f000 ff5a 	bl	8014e28 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8013f74:	2200      	movs	r2, #0
 8013f76:	4621      	mov	r1, r4
 8013f78:	4628      	mov	r0, r5
 8013f7a:	f001 f824 	bl	8014fc6 <SUBGRF_SendPayload>
 8013f7e:	e7e5      	b.n	8013f4c <RadioSend+0x88>
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8013f80:	f10d 0207 	add.w	r2, sp, #7
 8013f84:	4621      	mov	r1, r4
 8013f86:	4628      	mov	r0, r5
 8013f88:	f001 f93a 	bl	8015200 <RFW_TransmitInit>
 8013f8c:	b968      	cbnz	r0, 8013faa <RadioSend+0xe6>
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8013f8e:	4812      	ldr	r0, [pc, #72]	; (8013fd8 <RadioSend+0x114>)
 8013f90:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013f94:	7583      	strb	r3, [r0, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013f96:	300e      	adds	r0, #14
 8013f98:	f000 ff46 	bl	8014e28 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8013fa2:	4628      	mov	r0, r5
 8013fa4:	f001 f80f 	bl	8014fc6 <SUBGRF_SendPayload>
 8013fa8:	e7d0      	b.n	8013f4c <RadioSend+0x88>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8013faa:	4b0d      	ldr	r3, [pc, #52]	; (8013fe0 <RadioSend+0x11c>)
 8013fac:	2201      	movs	r2, #1
 8013fae:	2100      	movs	r1, #0
 8013fb0:	2002      	movs	r0, #2
 8013fb2:	f001 fa07 	bl	80153c4 <UTIL_ADV_TRACE_COND_FSend>
                return;
 8013fb6:	e7d2      	b.n	8013f5e <RadioSend+0x9a>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8013fb8:	4807      	ldr	r0, [pc, #28]	; (8013fd8 <RadioSend+0x114>)
 8013fba:	2302      	movs	r3, #2
 8013fbc:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8013fbe:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8013fc0:	300e      	adds	r0, #14
 8013fc2:	f000 ff31 	bl	8014e28 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	4621      	mov	r1, r4
 8013fca:	4628      	mov	r0, r5
 8013fcc:	f000 fffb 	bl	8014fc6 <SUBGRF_SendPayload>
            break;
 8013fd0:	e7bc      	b.n	8013f4c <RadioSend+0x88>
 8013fd2:	bf00      	nop
 8013fd4:	48000400 	.word	0x48000400
 8013fd8:	20003ea0 	.word	0x20003ea0
 8013fdc:	20003efc 	.word	0x20003efc
 8013fe0:	08016dac 	.word	0x08016dac

08013fe4 <RadioRandom>:
{
 8013fe4:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	461a      	mov	r2, r3
 8013fea:	4619      	mov	r1, r3
 8013fec:	4618      	mov	r0, r3
 8013fee:	f000 fbe2 	bl	80147b6 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8013ff2:	f000 ff9b 	bl	8014f2c <SUBGRF_GetRandom>
}
 8013ff6:	bd08      	pop	{r3, pc}

08013ff8 <RadioSetModem>:
{
 8013ff8:	b510      	push	{r4, lr}
 8013ffa:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8013ffc:	4b14      	ldr	r3, [pc, #80]	; (8014050 <RadioSetModem+0x58>)
 8013ffe:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8014000:	f001 f906 	bl	8015210 <RFW_SetRadioModem>
    switch( modem )
 8014004:	2c01      	cmp	r4, #1
 8014006:	d010      	beq.n	801402a <RadioSetModem+0x32>
 8014008:	2c03      	cmp	r4, #3
 801400a:	d01a      	beq.n	8014042 <RadioSetModem+0x4a>
 801400c:	b134      	cbz	r4, 801401c <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801400e:	2003      	movs	r0, #3
 8014010:	f000 fce4 	bl	80149dc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014014:	4b0e      	ldr	r3, [pc, #56]	; (8014050 <RadioSetModem+0x58>)
 8014016:	2200      	movs	r2, #0
 8014018:	735a      	strb	r2, [r3, #13]
}
 801401a:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801401c:	2000      	movs	r0, #0
 801401e:	f000 fcdd 	bl	80149dc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014022:	4b0b      	ldr	r3, [pc, #44]	; (8014050 <RadioSetModem+0x58>)
 8014024:	2200      	movs	r2, #0
 8014026:	735a      	strb	r2, [r3, #13]
        break;
 8014028:	e7f7      	b.n	801401a <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801402a:	2001      	movs	r0, #1
 801402c:	f000 fcd6 	bl	80149dc <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8014030:	4b07      	ldr	r3, [pc, #28]	; (8014050 <RadioSetModem+0x58>)
 8014032:	7b5a      	ldrb	r2, [r3, #13]
 8014034:	7b18      	ldrb	r0, [r3, #12]
 8014036:	4282      	cmp	r2, r0
 8014038:	d0ef      	beq.n	801401a <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801403a:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801403c:	f000 f80a 	bl	8014054 <RadioSetPublicNetwork>
 8014040:	e7eb      	b.n	801401a <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8014042:	2002      	movs	r0, #2
 8014044:	f000 fcca 	bl	80149dc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8014048:	4b01      	ldr	r3, [pc, #4]	; (8014050 <RadioSetModem+0x58>)
 801404a:	2200      	movs	r2, #0
 801404c:	735a      	strb	r2, [r3, #13]
}
 801404e:	e7e4      	b.n	801401a <RadioSetModem+0x22>
 8014050:	20003ea0 	.word	0x20003ea0

08014054 <RadioSetPublicNetwork>:
{
 8014054:	b510      	push	{r4, lr}
 8014056:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8014058:	4b0e      	ldr	r3, [pc, #56]	; (8014094 <RadioSetPublicNetwork+0x40>)
 801405a:	7318      	strb	r0, [r3, #12]
 801405c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 801405e:	2001      	movs	r0, #1
 8014060:	f7ff ffca 	bl	8013ff8 <RadioSetModem>
    if( enable == true )
 8014064:	b154      	cbz	r4, 801407c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8014066:	2134      	movs	r1, #52	; 0x34
 8014068:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801406c:	f000 fc66 	bl	801493c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8014070:	2144      	movs	r1, #68	; 0x44
 8014072:	f240 7041 	movw	r0, #1857	; 0x741
 8014076:	f000 fc61 	bl	801493c <SUBGRF_WriteRegister>
}
 801407a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801407c:	2114      	movs	r1, #20
 801407e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8014082:	f000 fc5b 	bl	801493c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8014086:	2124      	movs	r1, #36	; 0x24
 8014088:	f240 7041 	movw	r0, #1857	; 0x741
 801408c:	f000 fc56 	bl	801493c <SUBGRF_WriteRegister>
}
 8014090:	e7f3      	b.n	801407a <RadioSetPublicNetwork+0x26>
 8014092:	bf00      	nop
 8014094:	20003ea0 	.word	0x20003ea0

08014098 <RadioSetTxConfig>:
{
 8014098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801409c:	b083      	sub	sp, #12
 801409e:	4604      	mov	r4, r0
 80140a0:	460e      	mov	r6, r1
 80140a2:	4617      	mov	r7, r2
 80140a4:	461d      	mov	r5, r3
 80140a6:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 80140aa:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 80140ae:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80140b2:	f001 f89f 	bl	80151f4 <RFW_DeInit>
    switch( modem )
 80140b6:	b174      	cbz	r4, 80140d6 <RadioSetTxConfig+0x3e>
 80140b8:	2c01      	cmp	r4, #1
 80140ba:	d053      	beq.n	8014164 <RadioSetTxConfig+0xcc>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80140bc:	4630      	mov	r0, r6
 80140be:	f000 ffc9 	bl	8015054 <SUBGRF_SetRfTxPower>
 80140c2:	4c51      	ldr	r4, [pc, #324]	; (8014208 <RadioSetTxConfig+0x170>)
 80140c4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80140c8:	f001 f899 	bl	80151fe <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80140cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80140ce:	6063      	str	r3, [r4, #4]
}
 80140d0:	b003      	add	sp, #12
 80140d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80140d6:	4c4c      	ldr	r4, [pc, #304]	; (8014208 <RadioSetTxConfig+0x170>)
 80140d8:	f04f 0b00 	mov.w	fp, #0
 80140dc:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80140e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140e2:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80140e4:	230b      	movs	r3, #11
 80140e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80140ea:	4628      	mov	r0, r5
 80140ec:	f001 f820 	bl	8015130 <SUBGRF_GetFskBandwidthRegValue>
 80140f0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80140f4:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80140f6:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80140fa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80140fe:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8014102:	2304      	movs	r3, #4
 8014104:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8014106:	2318      	movs	r3, #24
 8014108:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801410a:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801410e:	f089 0901 	eor.w	r9, r9, #1
 8014112:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8014116:	f1ba 0f00 	cmp.w	sl, #0
 801411a:	d01f      	beq.n	801415c <RadioSetTxConfig+0xc4>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801411c:	22f2      	movs	r2, #242	; 0xf2
 801411e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8014120:	4c39      	ldr	r4, [pc, #228]	; (8014208 <RadioSetTxConfig+0x170>)
 8014122:	2301      	movs	r3, #1
 8014124:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8014126:	f7ff fc43 	bl	80139b0 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801412a:	2000      	movs	r0, #0
 801412c:	f7ff ff64 	bl	8013ff8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8014130:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8014134:	f000 fc6c 	bl	8014a10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014138:	f104 000e 	add.w	r0, r4, #14
 801413c:	f000 fe74 	bl	8014e28 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8014140:	4a32      	ldr	r2, [pc, #200]	; (801420c <RadioSetTxConfig+0x174>)
 8014142:	466b      	mov	r3, sp
 8014144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014148:	e883 0003 	stmia.w	r3, {r0, r1}
 801414c:	4618      	mov	r0, r3
 801414e:	f000 fe39 	bl	8014dc4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8014152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8014156:	f000 fd5d 	bl	8014c14 <SUBGRF_SetWhiteningSeed>
            break;
 801415a:	e7af      	b.n	80140bc <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801415c:	4b2a      	ldr	r3, [pc, #168]	; (8014208 <RadioSetTxConfig+0x170>)
 801415e:	2201      	movs	r2, #1
 8014160:	75da      	strb	r2, [r3, #23]
 8014162:	e7dd      	b.n	8014120 <RadioSetTxConfig+0x88>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8014164:	4a28      	ldr	r2, [pc, #160]	; (8014208 <RadioSetTxConfig+0x170>)
 8014166:	2301      	movs	r3, #1
 8014168:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801416c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801416e:	b2db      	uxtb	r3, r3
 8014170:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8014174:	4926      	ldr	r1, [pc, #152]	; (8014210 <RadioSetTxConfig+0x178>)
 8014176:	5d49      	ldrb	r1, [r1, r5]
 8014178:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801417c:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8014180:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8014184:	b91d      	cbnz	r5, 801418e <RadioSetTxConfig+0xf6>
 8014186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014188:	3a0b      	subs	r2, #11
 801418a:	2a01      	cmp	r2, #1
 801418c:	d92c      	bls.n	80141e8 <RadioSetTxConfig+0x150>
 801418e:	2d01      	cmp	r5, #1
 8014190:	d027      	beq.n	80141e2 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8014192:	4a1d      	ldr	r2, [pc, #116]	; (8014208 <RadioSetTxConfig+0x170>)
 8014194:	2100      	movs	r1, #0
 8014196:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801419a:	4a1b      	ldr	r2, [pc, #108]	; (8014208 <RadioSetTxConfig+0x170>)
 801419c:	2101      	movs	r1, #1
 801419e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80141a0:	3b05      	subs	r3, #5
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	428b      	cmp	r3, r1
 80141a6:	d924      	bls.n	80141f2 <RadioSetTxConfig+0x15a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80141a8:	4b17      	ldr	r3, [pc, #92]	; (8014208 <RadioSetTxConfig+0x170>)
 80141aa:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80141ae:	4c16      	ldr	r4, [pc, #88]	; (8014208 <RadioSetTxConfig+0x170>)
 80141b0:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80141b4:	4b17      	ldr	r3, [pc, #92]	; (8014214 <RadioSetTxConfig+0x17c>)
 80141b6:	781b      	ldrb	r3, [r3, #0]
 80141b8:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80141ba:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80141be:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80141c2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80141c6:	f7ff fbf3 	bl	80139b0 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80141ca:	2001      	movs	r0, #1
 80141cc:	f7ff ff14 	bl	8013ff8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80141d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80141d4:	f000 fc1c 	bl	8014a10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80141d8:	f104 000e 	add.w	r0, r4, #14
 80141dc:	f000 fe24 	bl	8014e28 <SUBGRF_SetPacketParams>
            break;
 80141e0:	e76c      	b.n	80140bc <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80141e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80141e4:	2a0c      	cmp	r2, #12
 80141e6:	d1d4      	bne.n	8014192 <RadioSetTxConfig+0xfa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80141e8:	4a07      	ldr	r2, [pc, #28]	; (8014208 <RadioSetTxConfig+0x170>)
 80141ea:	2101      	movs	r1, #1
 80141ec:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80141f0:	e7d3      	b.n	801419a <RadioSetTxConfig+0x102>
                if( preambleLen < 12 )
 80141f2:	f1b8 0f0b 	cmp.w	r8, #11
 80141f6:	d803      	bhi.n	8014200 <RadioSetTxConfig+0x168>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80141f8:	4613      	mov	r3, r2
 80141fa:	220c      	movs	r2, #12
 80141fc:	839a      	strh	r2, [r3, #28]
 80141fe:	e7d6      	b.n	80141ae <RadioSetTxConfig+0x116>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014200:	4b01      	ldr	r3, [pc, #4]	; (8014208 <RadioSetTxConfig+0x170>)
 8014202:	f8a3 801c 	strh.w	r8, [r3, #28]
 8014206:	e7d2      	b.n	80141ae <RadioSetTxConfig+0x116>
 8014208:	20003ea0 	.word	0x20003ea0
 801420c:	08015f6c 	.word	0x08015f6c
 8014210:	08016dc4 	.word	0x08016dc4
 8014214:	20000110 	.word	0x20000110

08014218 <RadioSetRxConfig>:
{
 8014218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801421c:	b085      	sub	sp, #20
 801421e:	4604      	mov	r4, r0
 8014220:	460d      	mov	r5, r1
 8014222:	4616      	mov	r6, r2
 8014224:	9301      	str	r3, [sp, #4]
 8014226:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 801422a:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 801422e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8014232:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 8014236:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 801423a:	4b6e      	ldr	r3, [pc, #440]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 801423c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8014240:	f000 ffd8 	bl	80151f4 <RFW_DeInit>
    if( rxContinuous == true )
 8014244:	f1b8 0f00 	cmp.w	r8, #0
 8014248:	d001      	beq.n	801424e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 801424a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 801424e:	b14f      	cbz	r7, 8014264 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8014250:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8014254:	4b68      	ldr	r3, [pc, #416]	; (80143f8 <RadioSetRxConfig+0x1e0>)
 8014256:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8014258:	b144      	cbz	r4, 801426c <RadioSetRxConfig+0x54>
 801425a:	2c01      	cmp	r4, #1
 801425c:	d057      	beq.n	801430e <RadioSetRxConfig+0xf6>
}
 801425e:	b005      	add	sp, #20
 8014260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8014264:	4b64      	ldr	r3, [pc, #400]	; (80143f8 <RadioSetRxConfig+0x1e0>)
 8014266:	22ff      	movs	r2, #255	; 0xff
 8014268:	701a      	strb	r2, [r3, #0]
 801426a:	e7f5      	b.n	8014258 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801426c:	2000      	movs	r0, #0
 801426e:	f000 fa05 	bl	801467c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8014272:	4c60      	ldr	r4, [pc, #384]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 8014274:	f04f 0800 	mov.w	r8, #0
 8014278:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801427c:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801427e:	230b      	movs	r3, #11
 8014280:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8014284:	4628      	mov	r0, r5
 8014286:	f000 ff53 	bl	8015130 <SUBGRF_GetFskBandwidthRegValue>
 801428a:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801428e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8014292:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8014296:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801429a:	2304      	movs	r3, #4
 801429c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801429e:	2318      	movs	r3, #24
 80142a0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80142a2:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80142a6:	f087 0701 	eor.w	r7, r7, #1
 80142aa:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80142ac:	4b52      	ldr	r3, [pc, #328]	; (80143f8 <RadioSetRxConfig+0x1e0>)
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80142b2:	f1bb 0f00 	cmp.w	fp, #0
 80142b6:	d026      	beq.n	8014306 <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80142b8:	22f2      	movs	r2, #242	; 0xf2
 80142ba:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80142bc:	4c4d      	ldr	r4, [pc, #308]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 80142be:	2301      	movs	r3, #1
 80142c0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80142c2:	f7ff fb75 	bl	80139b0 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80142c6:	2000      	movs	r0, #0
 80142c8:	f7ff fe96 	bl	8013ff8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80142cc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80142d0:	f000 fb9e 	bl	8014a10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80142d4:	f104 000e 	add.w	r0, r4, #14
 80142d8:	f000 fda6 	bl	8014e28 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80142dc:	4a47      	ldr	r2, [pc, #284]	; (80143fc <RadioSetRxConfig+0x1e4>)
 80142de:	ab02      	add	r3, sp, #8
 80142e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80142e8:	4618      	mov	r0, r3
 80142ea:	f000 fd6b 	bl	8014dc4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80142ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80142f2:	f000 fc8f 	bl	8014c14 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80142f6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80142fa:	fb02 fa0a 	mul.w	sl, r2, sl
 80142fe:	fbba f6f6 	udiv	r6, sl, r6
 8014302:	60a6      	str	r6, [r4, #8]
            break;
 8014304:	e7ab      	b.n	801425e <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8014306:	4b3b      	ldr	r3, [pc, #236]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 8014308:	2201      	movs	r2, #1
 801430a:	75da      	strb	r2, [r3, #23]
 801430c:	e7d6      	b.n	80142bc <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801430e:	2000      	movs	r0, #0
 8014310:	f000 f9b4 	bl	801467c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8014314:	4a37      	ldr	r2, [pc, #220]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 8014316:	2301      	movs	r3, #1
 8014318:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801431c:	b2f3      	uxtb	r3, r6
 801431e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8014322:	4937      	ldr	r1, [pc, #220]	; (8014400 <RadioSetRxConfig+0x1e8>)
 8014324:	5d49      	ldrb	r1, [r1, r5]
 8014326:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801432a:	9901      	ldr	r1, [sp, #4]
 801432c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8014330:	b91d      	cbnz	r5, 801433a <RadioSetRxConfig+0x122>
 8014332:	f1a6 020b 	sub.w	r2, r6, #11
 8014336:	2a01      	cmp	r2, #1
 8014338:	d941      	bls.n	80143be <RadioSetRxConfig+0x1a6>
 801433a:	2d01      	cmp	r5, #1
 801433c:	d03d      	beq.n	80143ba <RadioSetRxConfig+0x1a2>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801433e:	4a2d      	ldr	r2, [pc, #180]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 8014340:	2100      	movs	r1, #0
 8014342:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8014346:	4a2b      	ldr	r2, [pc, #172]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 8014348:	2101      	movs	r1, #1
 801434a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801434c:	3b05      	subs	r3, #5
 801434e:	b2db      	uxtb	r3, r3
 8014350:	428b      	cmp	r3, r1
 8014352:	d939      	bls.n	80143c8 <RadioSetRxConfig+0x1b0>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8014354:	4b27      	ldr	r3, [pc, #156]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 8014356:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801435a:	4c26      	ldr	r4, [pc, #152]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 801435c:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801435e:	4b26      	ldr	r3, [pc, #152]	; (80143f8 <RadioSetRxConfig+0x1e0>)
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8014364:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8014368:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801436c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8014370:	f7ff fb1e 	bl	80139b0 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8014374:	2001      	movs	r0, #1
 8014376:	f7ff fe3f 	bl	8013ff8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801437a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801437e:	f000 fb47 	bl	8014a10 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014382:	f104 000e 	add.w	r0, r4, #14
 8014386:	f000 fd4f 	bl	8014e28 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801438a:	fa5f f08a 	uxtb.w	r0, sl
 801438e:	f000 fb03 	bl	8014998 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8014392:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8014396:	2b01      	cmp	r3, #1
 8014398:	d021      	beq.n	80143de <RadioSetRxConfig+0x1c6>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801439a:	f240 7036 	movw	r0, #1846	; 0x736
 801439e:	f000 fbbf 	bl	8014b20 <SUBGRF_ReadRegister>
 80143a2:	f040 0104 	orr.w	r1, r0, #4
 80143a6:	b2c9      	uxtb	r1, r1
 80143a8:	f240 7036 	movw	r0, #1846	; 0x736
 80143ac:	f000 fac6 	bl	801493c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80143b0:	4b10      	ldr	r3, [pc, #64]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 80143b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143b6:	609a      	str	r2, [r3, #8]
}
 80143b8:	e751      	b.n	801425e <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80143ba:	2e0c      	cmp	r6, #12
 80143bc:	d1bf      	bne.n	801433e <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80143be:	4a0d      	ldr	r2, [pc, #52]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 80143c0:	2101      	movs	r1, #1
 80143c2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80143c6:	e7be      	b.n	8014346 <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 80143c8:	f1b9 0f0b 	cmp.w	r9, #11
 80143cc:	d803      	bhi.n	80143d6 <RadioSetRxConfig+0x1be>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80143ce:	4613      	mov	r3, r2
 80143d0:	220c      	movs	r2, #12
 80143d2:	839a      	strh	r2, [r3, #28]
 80143d4:	e7c1      	b.n	801435a <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80143d6:	4b07      	ldr	r3, [pc, #28]	; (80143f4 <RadioSetRxConfig+0x1dc>)
 80143d8:	f8a3 901c 	strh.w	r9, [r3, #28]
 80143dc:	e7bd      	b.n	801435a <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80143de:	f240 7036 	movw	r0, #1846	; 0x736
 80143e2:	f000 fb9d 	bl	8014b20 <SUBGRF_ReadRegister>
 80143e6:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80143ea:	f240 7036 	movw	r0, #1846	; 0x736
 80143ee:	f000 faa5 	bl	801493c <SUBGRF_WriteRegister>
 80143f2:	e7dd      	b.n	80143b0 <RadioSetRxConfig+0x198>
 80143f4:	20003ea0 	.word	0x20003ea0
 80143f8:	20000110 	.word	0x20000110
 80143fc:	08015f6c 	.word	0x08015f6c
 8014400:	08016dc4 	.word	0x08016dc4

08014404 <RadioIsChannelFree>:
{
 8014404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014406:	b08b      	sub	sp, #44	; 0x2c
 8014408:	4604      	mov	r4, r0
 801440a:	460f      	mov	r7, r1
 801440c:	4616      	mov	r6, r2
 801440e:	461d      	mov	r5, r3
    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8014410:	f7ff face 	bl	80139b0 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8014414:	2000      	movs	r0, #0
 8014416:	f7ff fdef 	bl	8013ff8 <RadioSetModem>
    RadioSetChannel( freq );
 801441a:	4620      	mov	r0, r4
 801441c:	f7ff fcf8 	bl	8013e10 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8014420:	2301      	movs	r3, #1
 8014422:	9309      	str	r3, [sp, #36]	; 0x24
 8014424:	2400      	movs	r4, #0
 8014426:	9408      	str	r4, [sp, #32]
 8014428:	9407      	str	r4, [sp, #28]
 801442a:	9406      	str	r4, [sp, #24]
 801442c:	9405      	str	r4, [sp, #20]
 801442e:	9404      	str	r4, [sp, #16]
 8014430:	9403      	str	r4, [sp, #12]
 8014432:	9402      	str	r4, [sp, #8]
 8014434:	2303      	movs	r3, #3
 8014436:	9301      	str	r3, [sp, #4]
 8014438:	9700      	str	r7, [sp, #0]
 801443a:	4623      	mov	r3, r4
 801443c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8014440:	4639      	mov	r1, r7
 8014442:	4620      	mov	r0, r4
 8014444:	f7ff fee8 	bl	8014218 <RadioSetRxConfig>
    RadioRx( 0 );
 8014448:	4620      	mov	r0, r4
 801444a:	f7ff fcf9 	bl	8013e40 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801444e:	f7ff fc93 	bl	8013d78 <RadioGetWakeupTime>
 8014452:	f7ed fe1d 	bl	8002090 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8014456:	f001 f9ed 	bl	8015834 <UTIL_TIMER_GetCurrentTime>
 801445a:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801445c:	4620      	mov	r0, r4
 801445e:	f001 f9f3 	bl	8015848 <UTIL_TIMER_GetElapsedTime>
 8014462:	42a8      	cmp	r0, r5
 8014464:	d206      	bcs.n	8014474 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8014466:	2000      	movs	r0, #0
 8014468:	f7ff fcb0 	bl	8013dcc <RadioRssi>
        if( rssi > rssiThresh )
 801446c:	42b0      	cmp	r0, r6
 801446e:	ddf5      	ble.n	801445c <RadioIsChannelFree+0x58>
            status = false;
 8014470:	2400      	movs	r4, #0
 8014472:	e000      	b.n	8014476 <RadioIsChannelFree+0x72>
    bool status = true;
 8014474:	2401      	movs	r4, #1
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8014476:	f7ff fa9b 	bl	80139b0 <RadioStandby>
}
 801447a:	4620      	mov	r0, r4
 801447c:	b00b      	add	sp, #44	; 0x2c
 801447e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014480 <RadioInit>:
{
 8014480:	b570      	push	{r4, r5, r6, lr}
 8014482:	b082      	sub	sp, #8
    RadioEvents = events;
 8014484:	4b1d      	ldr	r3, [pc, #116]	; (80144fc <RadioInit+0x7c>)
 8014486:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8014488:	4d1d      	ldr	r5, [pc, #116]	; (8014500 <RadioInit+0x80>)
 801448a:	2400      	movs	r4, #0
 801448c:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801448e:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8014490:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8014492:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8014494:	481b      	ldr	r0, [pc, #108]	; (8014504 <RadioInit+0x84>)
 8014496:	f000 fb67 	bl	8014b68 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 801449a:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 801449c:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801449e:	f000 f8fa 	bl	8014696 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80144a2:	4621      	mov	r1, r4
 80144a4:	4620      	mov	r0, r4
 80144a6:	f000 f9f1 	bl	801488c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80144aa:	2204      	movs	r2, #4
 80144ac:	4621      	mov	r1, r4
 80144ae:	2001      	movs	r0, #1
 80144b0:	f000 fbc9 	bl	8014c46 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80144b4:	4623      	mov	r3, r4
 80144b6:	4622      	mov	r2, r4
 80144b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80144bc:	4608      	mov	r0, r1
 80144be:	f000 f97a 	bl	80147b6 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 80144c2:	f7ff fcf5 	bl	8013eb0 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80144c6:	4e10      	ldr	r6, [pc, #64]	; (8014508 <RadioInit+0x88>)
 80144c8:	9400      	str	r4, [sp, #0]
 80144ca:	4b10      	ldr	r3, [pc, #64]	; (801450c <RadioInit+0x8c>)
 80144cc:	4622      	mov	r2, r4
 80144ce:	f04f 31ff 	mov.w	r1, #4294967295
 80144d2:	4630      	mov	r0, r6
 80144d4:	f001 f990 	bl	80157f8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80144d8:	4d0d      	ldr	r5, [pc, #52]	; (8014510 <RadioInit+0x90>)
 80144da:	9400      	str	r4, [sp, #0]
 80144dc:	4b0d      	ldr	r3, [pc, #52]	; (8014514 <RadioInit+0x94>)
 80144de:	4622      	mov	r2, r4
 80144e0:	f04f 31ff 	mov.w	r1, #4294967295
 80144e4:	4628      	mov	r0, r5
 80144e6:	f001 f987 	bl	80157f8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80144ea:	4630      	mov	r0, r6
 80144ec:	f001 f9e2 	bl	80158b4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80144f0:	4628      	mov	r0, r5
 80144f2:	f001 f9df 	bl	80158b4 <UTIL_TIMER_Stop>
}
 80144f6:	b002      	add	sp, #8
 80144f8:	bd70      	pop	{r4, r5, r6, pc}
 80144fa:	bf00      	nop
 80144fc:	20003e84 	.word	0x20003e84
 8014500:	20003ea0 	.word	0x20003ea0
 8014504:	08013d65 	.word	0x08013d65
 8014508:	20003efc 	.word	0x20003efc
 801450c:	080138bd 	.word	0x080138bd
 8014510:	20003e88 	.word	0x20003e88
 8014514:	080138e5 	.word	0x080138e5

08014518 <SUBGRF_WriteCommand>:
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8014518:	b510      	push	{r4, lr}
 801451a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801451c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014520:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8014522:	460a      	mov	r2, r1
 8014524:	4601      	mov	r1, r0
 8014526:	4803      	ldr	r0, [pc, #12]	; (8014534 <SUBGRF_WriteCommand+0x1c>)
 8014528:	f7f2 fdb4 	bl	8007094 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801452c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8014530:	bd10      	pop	{r4, pc}
 8014532:	bf00      	nop
 8014534:	20000364 	.word	0x20000364

08014538 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8014538:	b510      	push	{r4, lr}
 801453a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801453c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014540:	b672      	cpsid	i
    CRITICAL_SECTION_BEGIN();
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8014542:	460a      	mov	r2, r1
 8014544:	4601      	mov	r1, r0
 8014546:	4803      	ldr	r0, [pc, #12]	; (8014554 <SUBGRF_ReadCommand+0x1c>)
 8014548:	f7f2 fdfa 	bl	8007140 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801454c:	f384 8810 	msr	PRIMASK, r4
    CRITICAL_SECTION_END();
}
 8014550:	bd10      	pop	{r4, pc}
 8014552:	bf00      	nop
 8014554:	20000364 	.word	0x20000364

08014558 <SUBGRF_GetOperatingMode>:
}
 8014558:	4b01      	ldr	r3, [pc, #4]	; (8014560 <SUBGRF_GetOperatingMode+0x8>)
 801455a:	7818      	ldrb	r0, [r3, #0]
 801455c:	4770      	bx	lr
 801455e:	bf00      	nop
 8014560:	20003f1a 	.word	0x20003f1a

08014564 <SUBGRF_SetStandby>:
{
 8014564:	b500      	push	{lr}
 8014566:	b083      	sub	sp, #12
 8014568:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801456c:	2201      	movs	r2, #1
 801456e:	f10d 0107 	add.w	r1, sp, #7
 8014572:	2080      	movs	r0, #128	; 0x80
 8014574:	f7ff ffd0 	bl	8014518 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8014578:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801457c:	b92b      	cbnz	r3, 801458a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 801457e:	4b05      	ldr	r3, [pc, #20]	; (8014594 <SUBGRF_SetStandby+0x30>)
 8014580:	2201      	movs	r2, #1
 8014582:	701a      	strb	r2, [r3, #0]
}
 8014584:	b003      	add	sp, #12
 8014586:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801458a:	4b02      	ldr	r3, [pc, #8]	; (8014594 <SUBGRF_SetStandby+0x30>)
 801458c:	2202      	movs	r2, #2
 801458e:	701a      	strb	r2, [r3, #0]
}
 8014590:	e7f8      	b.n	8014584 <SUBGRF_SetStandby+0x20>
 8014592:	bf00      	nop
 8014594:	20003f1a 	.word	0x20003f1a

08014598 <SUBGRF_SetTx>:
{
 8014598:	b500      	push	{lr}
 801459a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 801459c:	4b0a      	ldr	r3, [pc, #40]	; (80145c8 <SUBGRF_SetTx+0x30>)
 801459e:	2204      	movs	r2, #4
 80145a0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80145a2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80145a6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80145aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80145ae:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80145b2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80145b6:	2203      	movs	r2, #3
 80145b8:	a901      	add	r1, sp, #4
 80145ba:	2083      	movs	r0, #131	; 0x83
 80145bc:	f7ff ffac 	bl	8014518 <SUBGRF_WriteCommand>
}
 80145c0:	b003      	add	sp, #12
 80145c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80145c6:	bf00      	nop
 80145c8:	20003f1a 	.word	0x20003f1a

080145cc <SUBGRF_SetRx>:
{
 80145cc:	b500      	push	{lr}
 80145ce:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80145d0:	4b0a      	ldr	r3, [pc, #40]	; (80145fc <SUBGRF_SetRx+0x30>)
 80145d2:	2205      	movs	r2, #5
 80145d4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80145d6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80145da:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80145de:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80145e2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80145e6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80145ea:	2203      	movs	r2, #3
 80145ec:	a901      	add	r1, sp, #4
 80145ee:	2082      	movs	r0, #130	; 0x82
 80145f0:	f7ff ff92 	bl	8014518 <SUBGRF_WriteCommand>
}
 80145f4:	b003      	add	sp, #12
 80145f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80145fa:	bf00      	nop
 80145fc:	20003f1a 	.word	0x20003f1a

08014600 <SUBGRF_SetRxDutyCycle>:
{
 8014600:	b500      	push	{lr}
 8014602:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8014604:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8014608:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801460c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014610:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8014614:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8014618:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801461c:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8014620:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8014624:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8014628:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801462c:	2206      	movs	r2, #6
 801462e:	4669      	mov	r1, sp
 8014630:	2094      	movs	r0, #148	; 0x94
 8014632:	f7ff ff71 	bl	8014518 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8014636:	4b03      	ldr	r3, [pc, #12]	; (8014644 <SUBGRF_SetRxDutyCycle+0x44>)
 8014638:	2206      	movs	r2, #6
 801463a:	701a      	strb	r2, [r3, #0]
}
 801463c:	b003      	add	sp, #12
 801463e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014642:	bf00      	nop
 8014644:	20003f1a 	.word	0x20003f1a

08014648 <SUBGRF_SetCad>:
{
 8014648:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801464a:	2200      	movs	r2, #0
 801464c:	4611      	mov	r1, r2
 801464e:	20c5      	movs	r0, #197	; 0xc5
 8014650:	f7ff ff62 	bl	8014518 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8014654:	4b01      	ldr	r3, [pc, #4]	; (801465c <SUBGRF_SetCad+0x14>)
 8014656:	2207      	movs	r2, #7
 8014658:	701a      	strb	r2, [r3, #0]
}
 801465a:	bd08      	pop	{r3, pc}
 801465c:	20003f1a 	.word	0x20003f1a

08014660 <SUBGRF_SetTxContinuousWave>:
{
 8014660:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8014662:	2200      	movs	r2, #0
 8014664:	4611      	mov	r1, r2
 8014666:	20d1      	movs	r0, #209	; 0xd1
 8014668:	f7ff ff56 	bl	8014518 <SUBGRF_WriteCommand>
}
 801466c:	bd08      	pop	{r3, pc}

0801466e <SUBGRF_SetTxInfinitePreamble>:
{
 801466e:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8014670:	2200      	movs	r2, #0
 8014672:	4611      	mov	r1, r2
 8014674:	20d2      	movs	r0, #210	; 0xd2
 8014676:	f7ff ff4f 	bl	8014518 <SUBGRF_WriteCommand>
}
 801467a:	bd08      	pop	{r3, pc}

0801467c <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 801467c:	b500      	push	{lr}
 801467e:	b083      	sub	sp, #12
 8014680:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8014684:	2201      	movs	r2, #1
 8014686:	f10d 0107 	add.w	r1, sp, #7
 801468a:	209f      	movs	r0, #159	; 0x9f
 801468c:	f7ff ff44 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014690:	b003      	add	sp, #12
 8014692:	f85d fb04 	ldr.w	pc, [sp], #4

08014696 <SUBGRF_SetRegulatorMode>:
{
 8014696:	b500      	push	{lr}
 8014698:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801469a:	f7ee fdab 	bl	80031f4 <RBI_IsDCDC>
 801469e:	2801      	cmp	r0, #1
 80146a0:	d00b      	beq.n	80146ba <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80146a2:	2300      	movs	r3, #0
 80146a4:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80146a8:	2201      	movs	r2, #1
 80146aa:	f10d 0107 	add.w	r1, sp, #7
 80146ae:	2096      	movs	r0, #150	; 0x96
 80146b0:	f7ff ff32 	bl	8014518 <SUBGRF_WriteCommand>
}
 80146b4:	b003      	add	sp, #12
 80146b6:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 80146ba:	2301      	movs	r3, #1
 80146bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80146c0:	e7f2      	b.n	80146a8 <SUBGRF_SetRegulatorMode+0x12>

080146c2 <SUBGRF_Calibrate>:
{
 80146c2:	b500      	push	{lr}
 80146c4:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80146c6:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80146ca:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80146ce:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80146d0:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80146d4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80146d6:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80146da:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80146dc:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80146e0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80146e2:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80146e6:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80146e8:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80146ec:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80146ee:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80146f2:	2201      	movs	r2, #1
 80146f4:	f10d 0107 	add.w	r1, sp, #7
 80146f8:	2089      	movs	r0, #137	; 0x89
 80146fa:	f7ff ff0d 	bl	8014518 <SUBGRF_WriteCommand>
}
 80146fe:	b003      	add	sp, #12
 8014700:	f85d fb04 	ldr.w	pc, [sp], #4

08014704 <SUBGRF_CalibrateImage>:
{
 8014704:	b500      	push	{lr}
 8014706:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8014708:	4b1c      	ldr	r3, [pc, #112]	; (801477c <SUBGRF_CalibrateImage+0x78>)
 801470a:	4298      	cmp	r0, r3
 801470c:	d90d      	bls.n	801472a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801470e:	23e1      	movs	r3, #225	; 0xe1
 8014710:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8014714:	23e9      	movs	r3, #233	; 0xe9
 8014716:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801471a:	2202      	movs	r2, #2
 801471c:	a901      	add	r1, sp, #4
 801471e:	2098      	movs	r0, #152	; 0x98
 8014720:	f7ff fefa 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014724:	b003      	add	sp, #12
 8014726:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 801472a:	4b15      	ldr	r3, [pc, #84]	; (8014780 <SUBGRF_CalibrateImage+0x7c>)
 801472c:	4298      	cmp	r0, r3
 801472e:	d906      	bls.n	801473e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8014730:	23d7      	movs	r3, #215	; 0xd7
 8014732:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8014736:	23db      	movs	r3, #219	; 0xdb
 8014738:	f88d 3005 	strb.w	r3, [sp, #5]
 801473c:	e7ed      	b.n	801471a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 801473e:	4b11      	ldr	r3, [pc, #68]	; (8014784 <SUBGRF_CalibrateImage+0x80>)
 8014740:	4298      	cmp	r0, r3
 8014742:	d906      	bls.n	8014752 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8014744:	23c1      	movs	r3, #193	; 0xc1
 8014746:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 801474a:	23c5      	movs	r3, #197	; 0xc5
 801474c:	f88d 3005 	strb.w	r3, [sp, #5]
 8014750:	e7e3      	b.n	801471a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8014752:	4b0d      	ldr	r3, [pc, #52]	; (8014788 <SUBGRF_CalibrateImage+0x84>)
 8014754:	4298      	cmp	r0, r3
 8014756:	d906      	bls.n	8014766 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8014758:	2375      	movs	r3, #117	; 0x75
 801475a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 801475e:	2381      	movs	r3, #129	; 0x81
 8014760:	f88d 3005 	strb.w	r3, [sp, #5]
 8014764:	e7d9      	b.n	801471a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8014766:	4b09      	ldr	r3, [pc, #36]	; (801478c <SUBGRF_CalibrateImage+0x88>)
 8014768:	4298      	cmp	r0, r3
 801476a:	d9d6      	bls.n	801471a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x6B;
 801476c:	236b      	movs	r3, #107	; 0x6b
 801476e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8014772:	236f      	movs	r3, #111	; 0x6f
 8014774:	f88d 3005 	strb.w	r3, [sp, #5]
 8014778:	e7cf      	b.n	801471a <SUBGRF_CalibrateImage+0x16>
 801477a:	bf00      	nop
 801477c:	35a4e900 	.word	0x35a4e900
 8014780:	32a9f880 	.word	0x32a9f880
 8014784:	2de54480 	.word	0x2de54480
 8014788:	1b6b0b00 	.word	0x1b6b0b00
 801478c:	1954fc40 	.word	0x1954fc40

08014790 <SUBGRF_SetPaConfig>:
{
 8014790:	b500      	push	{lr}
 8014792:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8014794:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8014798:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 801479c:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80147a0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80147a4:	2204      	movs	r2, #4
 80147a6:	eb0d 0102 	add.w	r1, sp, r2
 80147aa:	2095      	movs	r0, #149	; 0x95
 80147ac:	f7ff feb4 	bl	8014518 <SUBGRF_WriteCommand>
}
 80147b0:	b003      	add	sp, #12
 80147b2:	f85d fb04 	ldr.w	pc, [sp], #4

080147b6 <SUBGRF_SetDioIrqParams>:
{
 80147b6:	b500      	push	{lr}
 80147b8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80147ba:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80147be:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80147c2:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80147c6:	0a08      	lsrs	r0, r1, #8
 80147c8:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80147cc:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80147d0:	0a11      	lsrs	r1, r2, #8
 80147d2:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80147d6:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80147da:	0a1a      	lsrs	r2, r3, #8
 80147dc:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80147e0:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80147e4:	2208      	movs	r2, #8
 80147e6:	4669      	mov	r1, sp
 80147e8:	4610      	mov	r0, r2
 80147ea:	f7ff fe95 	bl	8014518 <SUBGRF_WriteCommand>
}
 80147ee:	b003      	add	sp, #12
 80147f0:	f85d fb04 	ldr.w	pc, [sp], #4

080147f4 <SUBGRF_SetTcxoMode>:
{
 80147f4:	b500      	push	{lr}
 80147f6:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 80147f8:	f000 0007 	and.w	r0, r0, #7
 80147fc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014800:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8014804:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8014808:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801480c:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8014810:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8014814:	2204      	movs	r2, #4
 8014816:	eb0d 0102 	add.w	r1, sp, r2
 801481a:	2097      	movs	r0, #151	; 0x97
 801481c:	f7ff fe7c 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014820:	b003      	add	sp, #12
 8014822:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08014828 <SUBGRF_SetRfFrequency>:
{
 8014828:	b510      	push	{r4, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 801482e:	4b12      	ldr	r3, [pc, #72]	; (8014878 <SUBGRF_SetRfFrequency+0x50>)
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	b1d3      	cbz	r3, 801486a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8014834:	4a11      	ldr	r2, [pc, #68]	; (801487c <SUBGRF_SetRfFrequency+0x54>)
 8014836:	2300      	movs	r3, #0
 8014838:	0660      	lsls	r0, r4, #25
 801483a:	09e1      	lsrs	r1, r4, #7
 801483c:	f7ec f9b8 	bl	8000bb0 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8014840:	0e03      	lsrs	r3, r0, #24
 8014842:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8014846:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801484a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801484e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8014852:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8014856:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801485a:	2204      	movs	r2, #4
 801485c:	eb0d 0102 	add.w	r1, sp, r2
 8014860:	2086      	movs	r0, #134	; 0x86
 8014862:	f7ff fe59 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014866:	b002      	add	sp, #8
 8014868:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 801486a:	f7ff ff4b 	bl	8014704 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801486e:	4b02      	ldr	r3, [pc, #8]	; (8014878 <SUBGRF_SetRfFrequency+0x50>)
 8014870:	2201      	movs	r2, #1
 8014872:	701a      	strb	r2, [r3, #0]
 8014874:	e7de      	b.n	8014834 <SUBGRF_SetRfFrequency+0xc>
 8014876:	bf00      	nop
 8014878:	20003f18 	.word	0x20003f18
 801487c:	01e84800 	.word	0x01e84800

08014880 <SUBGRF_GetPacketType>:
}
 8014880:	4b01      	ldr	r3, [pc, #4]	; (8014888 <SUBGRF_GetPacketType+0x8>)
 8014882:	7818      	ldrb	r0, [r3, #0]
 8014884:	4770      	bx	lr
 8014886:	bf00      	nop
 8014888:	20003f1b 	.word	0x20003f1b

0801488c <SUBGRF_SetBufferBaseAddress>:
{
 801488c:	b500      	push	{lr}
 801488e:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8014890:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8014894:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8014898:	2202      	movs	r2, #2
 801489a:	a901      	add	r1, sp, #4
 801489c:	208f      	movs	r0, #143	; 0x8f
 801489e:	f7ff fe3b 	bl	8014518 <SUBGRF_WriteCommand>
}
 80148a2:	b003      	add	sp, #12
 80148a4:	f85d fb04 	ldr.w	pc, [sp], #4

080148a8 <SUBGRF_GetRssiInst>:
{
 80148a8:	b500      	push	{lr}
 80148aa:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80148ac:	2201      	movs	r2, #1
 80148ae:	a901      	add	r1, sp, #4
 80148b0:	2015      	movs	r0, #21
 80148b2:	f7ff fe41 	bl	8014538 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80148b6:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80148ba:	4240      	negs	r0, r0
}
 80148bc:	1040      	asrs	r0, r0, #1
 80148be:	b003      	add	sp, #12
 80148c0:	f85d fb04 	ldr.w	pc, [sp], #4

080148c4 <SUBGRF_GetPacketStatus>:
{
 80148c4:	b510      	push	{r4, lr}
 80148c6:	b082      	sub	sp, #8
 80148c8:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80148ca:	2203      	movs	r2, #3
 80148cc:	a901      	add	r1, sp, #4
 80148ce:	2014      	movs	r0, #20
 80148d0:	f7ff fe32 	bl	8014538 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 80148d4:	f7ff ffd4 	bl	8014880 <SUBGRF_GetPacketType>
 80148d8:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 80148da:	b148      	cbz	r0, 80148f0 <SUBGRF_GetPacketStatus+0x2c>
 80148dc:	2801      	cmp	r0, #1
 80148de:	d018      	beq.n	8014912 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80148e0:	2214      	movs	r2, #20
 80148e2:	2100      	movs	r1, #0
 80148e4:	4620      	mov	r0, r4
 80148e6:	f000 fe8e 	bl	8015606 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80148ea:	230f      	movs	r3, #15
 80148ec:	7023      	strb	r3, [r4, #0]
}
 80148ee:	e00e      	b.n	801490e <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80148f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80148f4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80148f6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80148fa:	425b      	negs	r3, r3
 80148fc:	105b      	asrs	r3, r3, #1
 80148fe:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8014900:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014904:	425b      	negs	r3, r3
 8014906:	105b      	asrs	r3, r3, #1
 8014908:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801490a:	2300      	movs	r3, #0
 801490c:	60a3      	str	r3, [r4, #8]
}
 801490e:	b002      	add	sp, #8
 8014910:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8014912:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014916:	425b      	negs	r3, r3
 8014918:	105b      	asrs	r3, r3, #1
 801491a:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801491c:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8014920:	3302      	adds	r3, #2
 8014922:	109b      	asrs	r3, r3, #2
 8014924:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8014926:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801492a:	425b      	negs	r3, r3
 801492c:	105b      	asrs	r3, r3, #1
 801492e:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8014930:	4b01      	ldr	r3, [pc, #4]	; (8014938 <SUBGRF_GetPacketStatus+0x74>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	6123      	str	r3, [r4, #16]
            break;
 8014936:	e7ea      	b.n	801490e <SUBGRF_GetPacketStatus+0x4a>
 8014938:	20003f14 	.word	0x20003f14

0801493c <SUBGRF_WriteRegister>:
{
 801493c:	b500      	push	{lr}
 801493e:	b083      	sub	sp, #12
 8014940:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8014944:	2301      	movs	r3, #1
 8014946:	f10d 0207 	add.w	r2, sp, #7
 801494a:	4601      	mov	r1, r0
 801494c:	4802      	ldr	r0, [pc, #8]	; (8014958 <SUBGRF_WriteRegister+0x1c>)
 801494e:	f7f2 fafd 	bl	8006f4c <HAL_SUBGHZ_WriteRegisters>
}
 8014952:	b003      	add	sp, #12
 8014954:	f85d fb04 	ldr.w	pc, [sp], #4
 8014958:	20000364 	.word	0x20000364

0801495c <SUBGRF_SetRxBoosted>:
{
 801495c:	b510      	push	{r4, lr}
 801495e:	b082      	sub	sp, #8
 8014960:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8014962:	4b0c      	ldr	r3, [pc, #48]	; (8014994 <SUBGRF_SetRxBoosted+0x38>)
 8014964:	2205      	movs	r2, #5
 8014966:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8014968:	2197      	movs	r1, #151	; 0x97
 801496a:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801496e:	f7ff ffe5 	bl	801493c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8014972:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8014976:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801497a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 801497e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8014982:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8014986:	2203      	movs	r2, #3
 8014988:	a901      	add	r1, sp, #4
 801498a:	2082      	movs	r0, #130	; 0x82
 801498c:	f7ff fdc4 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014990:	b002      	add	sp, #8
 8014992:	bd10      	pop	{r4, pc}
 8014994:	20003f1a 	.word	0x20003f1a

08014998 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8014998:	b500      	push	{lr}
 801499a:	b083      	sub	sp, #12
 801499c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80149a0:	2201      	movs	r2, #1
 80149a2:	f10d 0107 	add.w	r1, sp, #7
 80149a6:	20a0      	movs	r0, #160	; 0xa0
 80149a8:	f7ff fdb6 	bl	8014518 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80149ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80149b0:	2b3f      	cmp	r3, #63	; 0x3f
 80149b2:	d90f      	bls.n	80149d4 <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80149b4:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80149b6:	2200      	movs	r2, #0
        while( mant > 31 )
 80149b8:	e002      	b.n	80149c0 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80149ba:	089b      	lsrs	r3, r3, #2
            exp++;
 80149bc:	1c51      	adds	r1, r2, #1
 80149be:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 80149c0:	2b1f      	cmp	r3, #31
 80149c2:	d8fa      	bhi.n	80149ba <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80149c4:	00d9      	lsls	r1, r3, #3
 80149c6:	b2c9      	uxtb	r1, r1
 80149c8:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80149ca:	b2c9      	uxtb	r1, r1
 80149cc:	f240 7006 	movw	r0, #1798	; 0x706
 80149d0:	f7ff ffb4 	bl	801493c <SUBGRF_WriteRegister>
}
 80149d4:	b003      	add	sp, #12
 80149d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080149dc <SUBGRF_SetPacketType>:
{
 80149dc:	b500      	push	{lr}
 80149de:	b083      	sub	sp, #12
 80149e0:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 80149e4:	b2c3      	uxtb	r3, r0
 80149e6:	4a09      	ldr	r2, [pc, #36]	; (8014a0c <SUBGRF_SetPacketType+0x30>)
 80149e8:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 80149ea:	b143      	cbz	r3, 80149fe <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80149ec:	2201      	movs	r2, #1
 80149ee:	f10d 0107 	add.w	r1, sp, #7
 80149f2:	208a      	movs	r0, #138	; 0x8a
 80149f4:	f7ff fd90 	bl	8014518 <SUBGRF_WriteCommand>
}
 80149f8:	b003      	add	sp, #12
 80149fa:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80149fe:	2100      	movs	r1, #0
 8014a00:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8014a04:	f7ff ff9a 	bl	801493c <SUBGRF_WriteRegister>
 8014a08:	e7f0      	b.n	80149ec <SUBGRF_SetPacketType+0x10>
 8014a0a:	bf00      	nop
 8014a0c:	20003f1b 	.word	0x20003f1b

08014a10 <SUBGRF_SetModulationParams>:
{
 8014a10:	b510      	push	{r4, lr}
 8014a12:	b082      	sub	sp, #8
 8014a14:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8014a16:	4b3e      	ldr	r3, [pc, #248]	; (8014b10 <SUBGRF_SetModulationParams+0x100>)
 8014a18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014a1c:	ab02      	add	r3, sp, #8
 8014a1e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8014a22:	7820      	ldrb	r0, [r4, #0]
 8014a24:	4b3b      	ldr	r3, [pc, #236]	; (8014b14 <SUBGRF_SetModulationParams+0x104>)
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	4298      	cmp	r0, r3
 8014a2a:	d106      	bne.n	8014a3a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8014a2c:	7823      	ldrb	r3, [r4, #0]
 8014a2e:	2b03      	cmp	r3, #3
 8014a30:	d82c      	bhi.n	8014a8c <SUBGRF_SetModulationParams+0x7c>
 8014a32:	e8df f003 	tbb	[pc, r3]
 8014a36:	4205      	.short	0x4205
 8014a38:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8014a3a:	f7ff ffcf 	bl	80149dc <SUBGRF_SetPacketType>
 8014a3e:	e7f5      	b.n	8014a2c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8014a40:	6862      	ldr	r2, [r4, #4]
 8014a42:	4b35      	ldr	r3, [pc, #212]	; (8014b18 <SUBGRF_SetModulationParams+0x108>)
 8014a44:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8014a48:	0c1a      	lsrs	r2, r3, #16
 8014a4a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8014a4e:	0a1a      	lsrs	r2, r3, #8
 8014a50:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8014a54:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8014a58:	7b23      	ldrb	r3, [r4, #12]
 8014a5a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8014a5e:	7b63      	ldrb	r3, [r4, #13]
 8014a60:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8014a64:	68a1      	ldr	r1, [r4, #8]
 8014a66:	4a2d      	ldr	r2, [pc, #180]	; (8014b1c <SUBGRF_SetModulationParams+0x10c>)
 8014a68:	2300      	movs	r3, #0
 8014a6a:	0648      	lsls	r0, r1, #25
 8014a6c:	09c9      	lsrs	r1, r1, #7
 8014a6e:	f7ec f89f 	bl	8000bb0 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8014a72:	0c03      	lsrs	r3, r0, #16
 8014a74:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8014a78:	0a03      	lsrs	r3, r0, #8
 8014a7a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8014a7e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014a82:	2208      	movs	r2, #8
 8014a84:	4669      	mov	r1, sp
 8014a86:	208b      	movs	r0, #139	; 0x8b
 8014a88:	f7ff fd46 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014a8c:	b002      	add	sp, #8
 8014a8e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8014a90:	6922      	ldr	r2, [r4, #16]
 8014a92:	4b21      	ldr	r3, [pc, #132]	; (8014b18 <SUBGRF_SetModulationParams+0x108>)
 8014a94:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8014a98:	0c1a      	lsrs	r2, r3, #16
 8014a9a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8014a9e:	0a1a      	lsrs	r2, r3, #8
 8014aa0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8014aa4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8014aa8:	7d23      	ldrb	r3, [r4, #20]
 8014aaa:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014aae:	2204      	movs	r2, #4
 8014ab0:	4669      	mov	r1, sp
 8014ab2:	208b      	movs	r0, #139	; 0x8b
 8014ab4:	f7ff fd30 	bl	8014518 <SUBGRF_WriteCommand>
        break;
 8014ab8:	e7e8      	b.n	8014a8c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8014aba:	7e23      	ldrb	r3, [r4, #24]
 8014abc:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8014ac0:	7e63      	ldrb	r3, [r4, #25]
 8014ac2:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8014ac6:	7ea3      	ldrb	r3, [r4, #26]
 8014ac8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8014acc:	7ee3      	ldrb	r3, [r4, #27]
 8014ace:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014ad2:	2204      	movs	r2, #4
 8014ad4:	4669      	mov	r1, sp
 8014ad6:	208b      	movs	r0, #139	; 0x8b
 8014ad8:	f7ff fd1e 	bl	8014518 <SUBGRF_WriteCommand>
        break;
 8014adc:	e7d6      	b.n	8014a8c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8014ade:	6862      	ldr	r2, [r4, #4]
 8014ae0:	4b0d      	ldr	r3, [pc, #52]	; (8014b18 <SUBGRF_SetModulationParams+0x108>)
 8014ae2:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8014ae6:	0c1a      	lsrs	r2, r3, #16
 8014ae8:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8014aec:	0a1a      	lsrs	r2, r3, #8
 8014aee:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8014af2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8014af6:	7b23      	ldrb	r3, [r4, #12]
 8014af8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8014afc:	7b63      	ldrb	r3, [r4, #13]
 8014afe:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8014b02:	2205      	movs	r2, #5
 8014b04:	4669      	mov	r1, sp
 8014b06:	208b      	movs	r0, #139	; 0x8b
 8014b08:	f7ff fd06 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014b0c:	e7be      	b.n	8014a8c <SUBGRF_SetModulationParams+0x7c>
 8014b0e:	bf00      	nop
 8014b10:	08015f74 	.word	0x08015f74
 8014b14:	20003f1b 	.word	0x20003f1b
 8014b18:	3d090000 	.word	0x3d090000
 8014b1c:	01e84800 	.word	0x01e84800

08014b20 <SUBGRF_ReadRegister>:
{
 8014b20:	b500      	push	{lr}
 8014b22:	b083      	sub	sp, #12
 8014b24:	4601      	mov	r1, r0
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8014b26:	2301      	movs	r3, #1
 8014b28:	f10d 0207 	add.w	r2, sp, #7
 8014b2c:	4803      	ldr	r0, [pc, #12]	; (8014b3c <SUBGRF_ReadRegister+0x1c>)
 8014b2e:	f7f2 fa5d 	bl	8006fec <HAL_SUBGHZ_ReadRegisters>
}
 8014b32:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8014b36:	b003      	add	sp, #12
 8014b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b3c:	20000364 	.word	0x20000364

08014b40 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8014b40:	b510      	push	{r4, lr}
 8014b42:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8014b44:	f7ee fb56 	bl	80031f4 <RBI_IsDCDC>
 8014b48:	2801      	cmp	r0, #1
 8014b4a:	d000      	beq.n	8014b4e <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8014b4c:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8014b4e:	f640 1023 	movw	r0, #2339	; 0x923
 8014b52:	f7ff ffe5 	bl	8014b20 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8014b56:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8014b5a:	4321      	orrs	r1, r4
 8014b5c:	f640 1023 	movw	r0, #2339	; 0x923
 8014b60:	f7ff feec 	bl	801493c <SUBGRF_WriteRegister>
}
 8014b64:	e7f2      	b.n	8014b4c <Radio_SMPS_Set+0xc>
	...

08014b68 <SUBGRF_Init>:
{
 8014b68:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8014b6a:	b108      	cbz	r0, 8014b70 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8014b6c:	4a16      	ldr	r2, [pc, #88]	; (8014bc8 <SUBGRF_Init+0x60>)
 8014b6e:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8014b70:	f7ed f986 	bl	8001e80 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8014b74:	2002      	movs	r0, #2
 8014b76:	f7ff ffe3 	bl	8014b40 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8014b7a:	2000      	movs	r0, #0
 8014b7c:	4b13      	ldr	r3, [pc, #76]	; (8014bcc <SUBGRF_Init+0x64>)
 8014b7e:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8014b80:	f7ff fcf0 	bl	8014564 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8014b84:	f7ee fb32 	bl	80031ec <RBI_IsTCXO>
 8014b88:	2801      	cmp	r0, #1
 8014b8a:	d00f      	beq.n	8014bac <SUBGRF_Init+0x44>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014b8c:	2120      	movs	r1, #32
 8014b8e:	f640 1011 	movw	r0, #2321	; 0x911
 8014b92:	f7ff fed3 	bl	801493c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8014b96:	2120      	movs	r1, #32
 8014b98:	f640 1012 	movw	r0, #2322	; 0x912
 8014b9c:	f7ff fece 	bl	801493c <SUBGRF_WriteRegister>
    RBI_Init();
 8014ba0:	f7ee fb18 	bl	80031d4 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8014ba4:	4b0a      	ldr	r3, [pc, #40]	; (8014bd0 <SUBGRF_Init+0x68>)
 8014ba6:	2201      	movs	r2, #1
 8014ba8:	701a      	strb	r2, [r3, #0]
}
 8014baa:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8014bac:	2140      	movs	r1, #64	; 0x40
 8014bae:	f7ff fe21 	bl	80147f4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8014bb2:	2100      	movs	r1, #0
 8014bb4:	f640 1011 	movw	r0, #2321	; 0x911
 8014bb8:	f7ff fec0 	bl	801493c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8014bbc:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8014bc0:	f7ff fd7f 	bl	80146c2 <SUBGRF_Calibrate>
 8014bc4:	e7ec      	b.n	8014ba0 <SUBGRF_Init+0x38>
 8014bc6:	bf00      	nop
 8014bc8:	20003f1c 	.word	0x20003f1c
 8014bcc:	20003f18 	.word	0x20003f18
 8014bd0:	20003f1a 	.word	0x20003f1a

08014bd4 <SUBGRF_SetSleep>:
{
 8014bd4:	b510      	push	{r4, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8014bda:	2000      	movs	r0, #0
 8014bdc:	f7ee fafe 	bl	80031dc <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8014be0:	2002      	movs	r0, #2
 8014be2:	f7ff ffad 	bl	8014b40 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014be6:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8014bea:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014bee:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8014bf0:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8014bf4:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8014bf6:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8014bfa:	2201      	movs	r2, #1
 8014bfc:	f10d 0107 	add.w	r1, sp, #7
 8014c00:	2084      	movs	r0, #132	; 0x84
 8014c02:	f7ff fc89 	bl	8014518 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8014c06:	4b02      	ldr	r3, [pc, #8]	; (8014c10 <SUBGRF_SetSleep+0x3c>)
 8014c08:	2200      	movs	r2, #0
 8014c0a:	701a      	strb	r2, [r3, #0]
}
 8014c0c:	b002      	add	sp, #8
 8014c0e:	bd10      	pop	{r4, pc}
 8014c10:	20003f1a 	.word	0x20003f1a

08014c14 <SUBGRF_SetWhiteningSeed>:
{
 8014c14:	b510      	push	{r4, lr}
 8014c16:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8014c18:	f7ff fe32 	bl	8014880 <SUBGRF_GetPacketType>
 8014c1c:	b100      	cbz	r0, 8014c20 <SUBGRF_SetWhiteningSeed+0xc>
}
 8014c1e:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8014c20:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8014c24:	f7ff ff7c 	bl	8014b20 <SUBGRF_ReadRegister>
 8014c28:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8014c2c:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8014c30:	4301      	orrs	r1, r0
 8014c32:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8014c36:	f7ff fe81 	bl	801493c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8014c3a:	b2e1      	uxtb	r1, r4
 8014c3c:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8014c40:	f7ff fe7c 	bl	801493c <SUBGRF_WriteRegister>
}
 8014c44:	e7eb      	b.n	8014c1e <SUBGRF_SetWhiteningSeed+0xa>

08014c46 <SUBGRF_SetTxParams>:
{
 8014c46:	b570      	push	{r4, r5, r6, lr}
 8014c48:	b082      	sub	sp, #8
 8014c4a:	460c      	mov	r4, r1
 8014c4c:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8014c4e:	2801      	cmp	r0, #1
 8014c50:	d035      	beq.n	8014cbe <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8014c52:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8014c56:	f7ff ff63 	bl	8014b20 <SUBGRF_ReadRegister>
 8014c5a:	f040 011e 	orr.w	r1, r0, #30
 8014c5e:	b2c9      	uxtb	r1, r1
 8014c60:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8014c64:	f7ff fe6a 	bl	801493c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8014c68:	2001      	movs	r0, #1
 8014c6a:	f7ee fac7 	bl	80031fc <RBI_GetRFOMaxPowerConfig>
 8014c6e:	4605      	mov	r5, r0
        if (power > max_power)
 8014c70:	4284      	cmp	r4, r0
 8014c72:	dd00      	ble.n	8014c76 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8014c74:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8014c76:	2d14      	cmp	r5, #20
 8014c78:	d054      	beq.n	8014d24 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8014c7a:	2d11      	cmp	r5, #17
 8014c7c:	d05c      	beq.n	8014d38 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8014c7e:	2d0e      	cmp	r5, #14
 8014c80:	d064      	beq.n	8014d4c <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8014c82:	2301      	movs	r3, #1
 8014c84:	2200      	movs	r2, #0
 8014c86:	2107      	movs	r1, #7
 8014c88:	2004      	movs	r0, #4
 8014c8a:	f7ff fd81 	bl	8014790 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8014c8e:	1b64      	subs	r4, r4, r5
 8014c90:	3416      	adds	r4, #22
 8014c92:	b264      	sxtb	r4, r4
        if (power < -9)
 8014c94:	f114 0f09 	cmn.w	r4, #9
 8014c98:	da01      	bge.n	8014c9e <SUBGRF_SetTxParams+0x58>
            power = -9;
 8014c9a:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8014c9e:	2138      	movs	r1, #56	; 0x38
 8014ca0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014ca4:	f7ff fe4a 	bl	801493c <SUBGRF_WriteRegister>
    buf[0] = power;
 8014ca8:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8014cac:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8014cb0:	2202      	movs	r2, #2
 8014cb2:	a901      	add	r1, sp, #4
 8014cb4:	208e      	movs	r0, #142	; 0x8e
 8014cb6:	f7ff fc2f 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014cba:	b002      	add	sp, #8
 8014cbc:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8014cbe:	2000      	movs	r0, #0
 8014cc0:	f7ee fa9c 	bl	80031fc <RBI_GetRFOMaxPowerConfig>
 8014cc4:	4605      	mov	r5, r0
        if (power >  max_power)
 8014cc6:	4284      	cmp	r4, r0
 8014cc8:	dd00      	ble.n	8014ccc <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8014cca:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8014ccc:	2d0e      	cmp	r5, #14
 8014cce:	d015      	beq.n	8014cfc <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8014cd0:	2d0a      	cmp	r5, #10
 8014cd2:	d01d      	beq.n	8014d10 <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	2100      	movs	r1, #0
 8014cda:	2006      	movs	r0, #6
 8014cdc:	f7ff fd58 	bl	8014790 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8014ce0:	1b64      	subs	r4, r4, r5
 8014ce2:	340e      	adds	r4, #14
 8014ce4:	b264      	sxtb	r4, r4
        if (power < -17)
 8014ce6:	f114 0f11 	cmn.w	r4, #17
 8014cea:	da01      	bge.n	8014cf0 <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8014cec:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8014cf0:	2118      	movs	r1, #24
 8014cf2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014cf6:	f7ff fe21 	bl	801493c <SUBGRF_WriteRegister>
 8014cfa:	e7d5      	b.n	8014ca8 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8014cfc:	2301      	movs	r3, #1
 8014cfe:	461a      	mov	r2, r3
 8014d00:	2100      	movs	r1, #0
 8014d02:	2004      	movs	r0, #4
 8014d04:	f7ff fd44 	bl	8014790 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8014d08:	1b64      	subs	r4, r4, r5
 8014d0a:	340e      	adds	r4, #14
 8014d0c:	b264      	sxtb	r4, r4
 8014d0e:	e7ea      	b.n	8014ce6 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8014d10:	2301      	movs	r3, #1
 8014d12:	461a      	mov	r2, r3
 8014d14:	2100      	movs	r1, #0
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7ff fd3a 	bl	8014790 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8014d1c:	1b64      	subs	r4, r4, r5
 8014d1e:	340d      	adds	r4, #13
 8014d20:	b264      	sxtb	r4, r4
 8014d22:	e7e0      	b.n	8014ce6 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8014d24:	2301      	movs	r3, #1
 8014d26:	2200      	movs	r2, #0
 8014d28:	2105      	movs	r1, #5
 8014d2a:	2003      	movs	r0, #3
 8014d2c:	f7ff fd30 	bl	8014790 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8014d30:	1b64      	subs	r4, r4, r5
 8014d32:	3416      	adds	r4, #22
 8014d34:	b264      	sxtb	r4, r4
 8014d36:	e7ad      	b.n	8014c94 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8014d38:	2301      	movs	r3, #1
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	2103      	movs	r1, #3
 8014d3e:	2002      	movs	r0, #2
 8014d40:	f7ff fd26 	bl	8014790 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8014d44:	1b64      	subs	r4, r4, r5
 8014d46:	3416      	adds	r4, #22
 8014d48:	b264      	sxtb	r4, r4
 8014d4a:	e7a3      	b.n	8014c94 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	2200      	movs	r2, #0
 8014d50:	2102      	movs	r1, #2
 8014d52:	4608      	mov	r0, r1
 8014d54:	f7ff fd1c 	bl	8014790 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8014d58:	1b64      	subs	r4, r4, r5
 8014d5a:	340e      	adds	r4, #14
 8014d5c:	b264      	sxtb	r4, r4
 8014d5e:	e799      	b.n	8014c94 <SUBGRF_SetTxParams+0x4e>

08014d60 <SUBGRF_GetRxBufferStatus>:
{
 8014d60:	b530      	push	{r4, r5, lr}
 8014d62:	b083      	sub	sp, #12
 8014d64:	4605      	mov	r5, r0
 8014d66:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8014d68:	2202      	movs	r2, #2
 8014d6a:	a901      	add	r1, sp, #4
 8014d6c:	2013      	movs	r0, #19
 8014d6e:	f7ff fbe3 	bl	8014538 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8014d72:	f7ff fd85 	bl	8014880 <SUBGRF_GetPacketType>
 8014d76:	2801      	cmp	r0, #1
 8014d78:	d007      	beq.n	8014d8a <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8014d7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014d7e:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8014d80:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014d84:	7023      	strb	r3, [r4, #0]
}
 8014d86:	b003      	add	sp, #12
 8014d88:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8014d8a:	4b05      	ldr	r3, [pc, #20]	; (8014da0 <SUBGRF_GetRxBufferStatus+0x40>)
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	b2db      	uxtb	r3, r3
 8014d90:	2b01      	cmp	r3, #1
 8014d92:	d1f2      	bne.n	8014d7a <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8014d94:	f240 7002 	movw	r0, #1794	; 0x702
 8014d98:	f7ff fec2 	bl	8014b20 <SUBGRF_ReadRegister>
 8014d9c:	7028      	strb	r0, [r5, #0]
 8014d9e:	e7ef      	b.n	8014d80 <SUBGRF_GetRxBufferStatus+0x20>
 8014da0:	20003f19 	.word	0x20003f19

08014da4 <SUBGRF_WriteRegisters>:
{
 8014da4:	b510      	push	{r4, lr}
 8014da6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014da8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014dac:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8014dae:	460a      	mov	r2, r1
 8014db0:	4601      	mov	r1, r0
 8014db2:	4803      	ldr	r0, [pc, #12]	; (8014dc0 <SUBGRF_WriteRegisters+0x1c>)
 8014db4:	f7f2 f8ca 	bl	8006f4c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014db8:	f384 8810 	msr	PRIMASK, r4
}
 8014dbc:	bd10      	pop	{r4, pc}
 8014dbe:	bf00      	nop
 8014dc0:	20000364 	.word	0x20000364

08014dc4 <SUBGRF_SetSyncWord>:
{
 8014dc4:	b508      	push	{r3, lr}
 8014dc6:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8014dc8:	2208      	movs	r2, #8
 8014dca:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8014dce:	f7ff ffe9 	bl	8014da4 <SUBGRF_WriteRegisters>
}
 8014dd2:	2000      	movs	r0, #0
 8014dd4:	bd08      	pop	{r3, pc}

08014dd6 <SUBGRF_SetCrcSeed>:
{
 8014dd6:	b500      	push	{lr}
 8014dd8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8014dda:	0a03      	lsrs	r3, r0, #8
 8014ddc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8014de0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8014de4:	f7ff fd4c 	bl	8014880 <SUBGRF_GetPacketType>
 8014de8:	b110      	cbz	r0, 8014df0 <SUBGRF_SetCrcSeed+0x1a>
}
 8014dea:	b003      	add	sp, #12
 8014dec:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8014df0:	2202      	movs	r2, #2
 8014df2:	a901      	add	r1, sp, #4
 8014df4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8014df8:	f7ff ffd4 	bl	8014da4 <SUBGRF_WriteRegisters>
}
 8014dfc:	e7f5      	b.n	8014dea <SUBGRF_SetCrcSeed+0x14>

08014dfe <SUBGRF_SetCrcPolynomial>:
{
 8014dfe:	b500      	push	{lr}
 8014e00:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8014e02:	0a03      	lsrs	r3, r0, #8
 8014e04:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8014e08:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8014e0c:	f7ff fd38 	bl	8014880 <SUBGRF_GetPacketType>
 8014e10:	b110      	cbz	r0, 8014e18 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8014e12:	b003      	add	sp, #12
 8014e14:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8014e18:	2202      	movs	r2, #2
 8014e1a:	a901      	add	r1, sp, #4
 8014e1c:	f240 60be 	movw	r0, #1726	; 0x6be
 8014e20:	f7ff ffc0 	bl	8014da4 <SUBGRF_WriteRegisters>
}
 8014e24:	e7f5      	b.n	8014e12 <SUBGRF_SetCrcPolynomial+0x14>
	...

08014e28 <SUBGRF_SetPacketParams>:
{
 8014e28:	b510      	push	{r4, lr}
 8014e2a:	b084      	sub	sp, #16
 8014e2c:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8014e2e:	ab01      	add	r3, sp, #4
 8014e30:	4a33      	ldr	r2, [pc, #204]	; (8014f00 <SUBGRF_SetPacketParams+0xd8>)
 8014e32:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e34:	c303      	stmia	r3!, {r0, r1}
 8014e36:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8014e38:	7820      	ldrb	r0, [r4, #0]
 8014e3a:	4b32      	ldr	r3, [pc, #200]	; (8014f04 <SUBGRF_SetPacketParams+0xdc>)
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	4298      	cmp	r0, r3
 8014e40:	d106      	bne.n	8014e50 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8014e42:	7823      	ldrb	r3, [r4, #0]
 8014e44:	2b03      	cmp	r3, #3
 8014e46:	d82a      	bhi.n	8014e9e <SUBGRF_SetPacketParams+0x76>
 8014e48:	e8df f003 	tbb	[pc, r3]
 8014e4c:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8014e50:	f7ff fdc4 	bl	80149dc <SUBGRF_SetPacketType>
 8014e54:	e7f5      	b.n	8014e42 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8014e56:	7a63      	ldrb	r3, [r4, #9]
 8014e58:	2bf1      	cmp	r3, #241	; 0xf1
 8014e5a:	d022      	beq.n	8014ea2 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8014e5c:	2bf2      	cmp	r3, #242	; 0xf2
 8014e5e:	d02a      	beq.n	8014eb6 <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8014e60:	8862      	ldrh	r2, [r4, #2]
 8014e62:	0a11      	lsrs	r1, r2, #8
 8014e64:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8014e68:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8014e6c:	7922      	ldrb	r2, [r4, #4]
 8014e6e:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8014e72:	7962      	ldrb	r2, [r4, #5]
 8014e74:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8014e78:	79a2      	ldrb	r2, [r4, #6]
 8014e7a:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8014e7e:	79e2      	ldrb	r2, [r4, #7]
 8014e80:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8014e84:	7a22      	ldrb	r2, [r4, #8]
 8014e86:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8014e8a:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8014e8e:	7aa3      	ldrb	r3, [r4, #10]
 8014e90:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8014e94:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8014e96:	a901      	add	r1, sp, #4
 8014e98:	208c      	movs	r0, #140	; 0x8c
 8014e9a:	f7ff fb3d 	bl	8014518 <SUBGRF_WriteCommand>
}
 8014e9e:	b004      	add	sp, #16
 8014ea0:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8014ea2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014ea6:	f7ff ff96 	bl	8014dd6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8014eaa:	f248 0005 	movw	r0, #32773	; 0x8005
 8014eae:	f7ff ffa6 	bl	8014dfe <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8014eb2:	2302      	movs	r3, #2
 8014eb4:	e7d4      	b.n	8014e60 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8014eb6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8014eba:	f7ff ff8c 	bl	8014dd6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8014ebe:	f241 0021 	movw	r0, #4129	; 0x1021
 8014ec2:	f7ff ff9c 	bl	8014dfe <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8014ec6:	2306      	movs	r3, #6
 8014ec8:	e7ca      	b.n	8014e60 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8014eca:	7b23      	ldrb	r3, [r4, #12]
 8014ecc:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8014ed0:	2201      	movs	r2, #1
        break;
 8014ed2:	e7e0      	b.n	8014e96 <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8014ed4:	89e3      	ldrh	r3, [r4, #14]
 8014ed6:	0a1a      	lsrs	r2, r3, #8
 8014ed8:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8014edc:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8014ee0:	7c23      	ldrb	r3, [r4, #16]
 8014ee2:	4a09      	ldr	r2, [pc, #36]	; (8014f08 <SUBGRF_SetPacketParams+0xe0>)
 8014ee4:	7013      	strb	r3, [r2, #0]
 8014ee6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8014eea:	7c63      	ldrb	r3, [r4, #17]
 8014eec:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8014ef0:	7ca3      	ldrb	r3, [r4, #18]
 8014ef2:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8014ef6:	7ce3      	ldrb	r3, [r4, #19]
 8014ef8:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8014efc:	2206      	movs	r2, #6
        break;
 8014efe:	e7ca      	b.n	8014e96 <SUBGRF_SetPacketParams+0x6e>
 8014f00:	08015f7c 	.word	0x08015f7c
 8014f04:	20003f1b 	.word	0x20003f1b
 8014f08:	20003f19 	.word	0x20003f19

08014f0c <SUBGRF_ReadRegisters>:
{
 8014f0c:	b510      	push	{r4, lr}
 8014f0e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f10:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014f14:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8014f16:	460a      	mov	r2, r1
 8014f18:	4601      	mov	r1, r0
 8014f1a:	4803      	ldr	r0, [pc, #12]	; (8014f28 <SUBGRF_ReadRegisters+0x1c>)
 8014f1c:	f7f2 f866 	bl	8006fec <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f20:	f384 8810 	msr	PRIMASK, r4
}
 8014f24:	bd10      	pop	{r4, pc}
 8014f26:	bf00      	nop
 8014f28:	20000364 	.word	0x20000364

08014f2c <SUBGRF_GetRandom>:
{
 8014f2c:	b570      	push	{r4, r5, r6, lr}
 8014f2e:	b082      	sub	sp, #8
    uint32_t number = 0;
 8014f30:	2600      	movs	r6, #0
 8014f32:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8014f34:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8014f38:	f7ff fdf2 	bl	8014b20 <SUBGRF_ReadRegister>
 8014f3c:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8014f3e:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8014f42:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8014f46:	f7ff fcf9 	bl	801493c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8014f4a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014f4e:	f7ff fde7 	bl	8014b20 <SUBGRF_ReadRegister>
 8014f52:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8014f54:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8014f58:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014f5c:	f7ff fcee 	bl	801493c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8014f60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014f64:	f7ff fb32 	bl	80145cc <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8014f68:	2204      	movs	r2, #4
 8014f6a:	eb0d 0102 	add.w	r1, sp, r2
 8014f6e:	f640 0019 	movw	r0, #2073	; 0x819
 8014f72:	f7ff ffcb 	bl	8014f0c <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8014f76:	4630      	mov	r0, r6
 8014f78:	f7ff faf4 	bl	8014564 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8014f7c:	4629      	mov	r1, r5
 8014f7e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8014f82:	f7ff fcdb 	bl	801493c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8014f86:	4621      	mov	r1, r4
 8014f88:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014f8c:	f7ff fcd6 	bl	801493c <SUBGRF_WriteRegister>
}
 8014f90:	9801      	ldr	r0, [sp, #4]
 8014f92:	b002      	add	sp, #8
 8014f94:	bd70      	pop	{r4, r5, r6, pc}
	...

08014f98 <SUBGRF_WriteBuffer>:
{
 8014f98:	b510      	push	{r4, lr}
 8014f9a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f9c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014fa0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8014fa2:	460a      	mov	r2, r1
 8014fa4:	4601      	mov	r1, r0
 8014fa6:	4803      	ldr	r0, [pc, #12]	; (8014fb4 <SUBGRF_WriteBuffer+0x1c>)
 8014fa8:	f7f2 f976 	bl	8007298 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fac:	f384 8810 	msr	PRIMASK, r4
}
 8014fb0:	bd10      	pop	{r4, pc}
 8014fb2:	bf00      	nop
 8014fb4:	20000364 	.word	0x20000364

08014fb8 <SUBGRF_SetPayload>:
{
 8014fb8:	b508      	push	{r3, lr}
 8014fba:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8014fbc:	4601      	mov	r1, r0
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	f7ff ffea 	bl	8014f98 <SUBGRF_WriteBuffer>
}
 8014fc4:	bd08      	pop	{r3, pc}

08014fc6 <SUBGRF_SendPayload>:
{
 8014fc6:	b510      	push	{r4, lr}
 8014fc8:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8014fca:	f7ff fff5 	bl	8014fb8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8014fce:	4620      	mov	r0, r4
 8014fd0:	f7ff fae2 	bl	8014598 <SUBGRF_SetTx>
}
 8014fd4:	bd10      	pop	{r4, pc}
	...

08014fd8 <SUBGRF_ReadBuffer>:
{
 8014fd8:	b510      	push	{r4, lr}
 8014fda:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fdc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8014fe0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8014fe2:	460a      	mov	r2, r1
 8014fe4:	4601      	mov	r1, r0
 8014fe6:	4803      	ldr	r0, [pc, #12]	; (8014ff4 <SUBGRF_ReadBuffer+0x1c>)
 8014fe8:	f7f2 f9a0 	bl	800732c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fec:	f384 8810 	msr	PRIMASK, r4
}
 8014ff0:	bd10      	pop	{r4, pc}
 8014ff2:	bf00      	nop
 8014ff4:	20000364 	.word	0x20000364

08014ff8 <SUBGRF_GetPayload>:
{
 8014ff8:	b570      	push	{r4, r5, r6, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	4606      	mov	r6, r0
 8014ffe:	460c      	mov	r4, r1
 8015000:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8015002:	2300      	movs	r3, #0
 8015004:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8015008:	f10d 0107 	add.w	r1, sp, #7
 801500c:	4620      	mov	r0, r4
 801500e:	f7ff fea7 	bl	8014d60 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8015012:	7822      	ldrb	r2, [r4, #0]
 8015014:	42aa      	cmp	r2, r5
 8015016:	d902      	bls.n	801501e <SUBGRF_GetPayload+0x26>
        return 1;
 8015018:	2001      	movs	r0, #1
}
 801501a:	b002      	add	sp, #8
 801501c:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801501e:	4631      	mov	r1, r6
 8015020:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8015024:	f7ff ffd8 	bl	8014fd8 <SUBGRF_ReadBuffer>
    return 0;
 8015028:	2000      	movs	r0, #0
 801502a:	e7f6      	b.n	801501a <SUBGRF_GetPayload+0x22>

0801502c <SUBGRF_SetSwitch>:
{
 801502c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 801502e:	2901      	cmp	r1, #1
 8015030:	d003      	beq.n	801503a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8015032:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8015034:	f7ee f8d2 	bl	80031dc <RBI_ConfigRFSwitch>
}
 8015038:	bd10      	pop	{r4, pc}
 801503a:	4604      	mov	r4, r0
 801503c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 801503e:	2c01      	cmp	r4, #1
 8015040:	d003      	beq.n	801504a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8015042:	2c02      	cmp	r4, #2
 8015044:	d1f6      	bne.n	8015034 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8015046:	2003      	movs	r0, #3
 8015048:	e7f4      	b.n	8015034 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801504a:	2004      	movs	r0, #4
 801504c:	f7ff fd78 	bl	8014b40 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8015050:	2002      	movs	r0, #2
 8015052:	e7f6      	b.n	8015042 <SUBGRF_SetSwitch+0x16>

08015054 <SUBGRF_SetRfTxPower>:
{
 8015054:	b538      	push	{r3, r4, r5, lr}
 8015056:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8015058:	f7ee f8c4 	bl	80031e4 <RBI_GetTxConfig>
    switch (TxConfig)
 801505c:	b148      	cbz	r0, 8015072 <SUBGRF_SetRfTxPower+0x1e>
 801505e:	2802      	cmp	r0, #2
 8015060:	d10d      	bne.n	801507e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8015062:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8015064:	2202      	movs	r2, #2
 8015066:	4621      	mov	r1, r4
 8015068:	4628      	mov	r0, r5
 801506a:	f7ff fdec 	bl	8014c46 <SUBGRF_SetTxParams>
}
 801506e:	4628      	mov	r0, r5
 8015070:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8015072:	2c0f      	cmp	r4, #15
 8015074:	dc01      	bgt.n	801507a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8015076:	2501      	movs	r5, #1
 8015078:	e7f4      	b.n	8015064 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 801507a:	2502      	movs	r5, #2
 801507c:	e7f2      	b.n	8015064 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801507e:	2501      	movs	r5, #1
 8015080:	e7f0      	b.n	8015064 <SUBGRF_SetRfTxPower+0x10>

08015082 <SUBGRF_GetRadioWakeUpTime>:
}
 8015082:	2001      	movs	r0, #1
 8015084:	4770      	bx	lr
	...

08015088 <HAL_SUBGHZ_TxCpltCallback>:
{
 8015088:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801508a:	4b02      	ldr	r3, [pc, #8]	; (8015094 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	2001      	movs	r0, #1
 8015090:	4798      	blx	r3
}
 8015092:	bd08      	pop	{r3, pc}
 8015094:	20003f1c 	.word	0x20003f1c

08015098 <HAL_SUBGHZ_RxCpltCallback>:
{
 8015098:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801509a:	4b02      	ldr	r3, [pc, #8]	; (80150a4 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	2002      	movs	r0, #2
 80150a0:	4798      	blx	r3
}
 80150a2:	bd08      	pop	{r3, pc}
 80150a4:	20003f1c 	.word	0x20003f1c

080150a8 <HAL_SUBGHZ_CRCErrorCallback>:
{
 80150a8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80150aa:	4b02      	ldr	r3, [pc, #8]	; (80150b4 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	2040      	movs	r0, #64	; 0x40
 80150b0:	4798      	blx	r3
}
 80150b2:	bd08      	pop	{r3, pc}
 80150b4:	20003f1c 	.word	0x20003f1c

080150b8 <HAL_SUBGHZ_CADStatusCallback>:
{
 80150b8:	b508      	push	{r3, lr}
    switch (cadstatus)
 80150ba:	b111      	cbz	r1, 80150c2 <HAL_SUBGHZ_CADStatusCallback+0xa>
 80150bc:	2901      	cmp	r1, #1
 80150be:	d005      	beq.n	80150cc <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 80150c0:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80150c2:	4b05      	ldr	r3, [pc, #20]	; (80150d8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	2080      	movs	r0, #128	; 0x80
 80150c8:	4798      	blx	r3
            break;
 80150ca:	e7f9      	b.n	80150c0 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80150cc:	4b02      	ldr	r3, [pc, #8]	; (80150d8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80150d4:	4798      	blx	r3
}
 80150d6:	e7f3      	b.n	80150c0 <HAL_SUBGHZ_CADStatusCallback+0x8>
 80150d8:	20003f1c 	.word	0x20003f1c

080150dc <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 80150dc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80150de:	4b03      	ldr	r3, [pc, #12]	; (80150ec <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80150e6:	4798      	blx	r3
}
 80150e8:	bd08      	pop	{r3, pc}
 80150ea:	bf00      	nop
 80150ec:	20003f1c 	.word	0x20003f1c

080150f0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 80150f0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80150f2:	4b02      	ldr	r3, [pc, #8]	; (80150fc <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	2020      	movs	r0, #32
 80150f8:	4798      	blx	r3
}
 80150fa:	bd08      	pop	{r3, pc}
 80150fc:	20003f1c 	.word	0x20003f1c

08015100 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8015100:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8015102:	4b02      	ldr	r3, [pc, #8]	; (801510c <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	2004      	movs	r0, #4
 8015108:	4798      	blx	r3
}
 801510a:	bd08      	pop	{r3, pc}
 801510c:	20003f1c 	.word	0x20003f1c

08015110 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8015110:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8015112:	4b02      	ldr	r3, [pc, #8]	; (801511c <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	2008      	movs	r0, #8
 8015118:	4798      	blx	r3
}
 801511a:	bd08      	pop	{r3, pc}
 801511c:	20003f1c 	.word	0x20003f1c

08015120 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8015120:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8015122:	4b02      	ldr	r3, [pc, #8]	; (801512c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	2010      	movs	r0, #16
 8015128:	4798      	blx	r3
}
 801512a:	bd08      	pop	{r3, pc}
 801512c:	20003f1c 	.word	0x20003f1c

08015130 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8015130:	4601      	mov	r1, r0
 8015132:	b188      	cbz	r0, 8015158 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8015134:	2300      	movs	r3, #0
 8015136:	2b15      	cmp	r3, #21
 8015138:	d80d      	bhi.n	8015156 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801513a:	4618      	mov	r0, r3
 801513c:	4a07      	ldr	r2, [pc, #28]	; (801515c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801513e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015142:	428a      	cmp	r2, r1
 8015144:	d802      	bhi.n	801514c <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8015146:	3301      	adds	r3, #1
 8015148:	b2db      	uxtb	r3, r3
 801514a:	e7f4      	b.n	8015136 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 801514c:	4b03      	ldr	r3, [pc, #12]	; (801515c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801514e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8015152:	7900      	ldrb	r0, [r0, #4]
 8015154:	4770      	bx	lr
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8015156:	e7fe      	b.n	8015156 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8015158:	201f      	movs	r0, #31
}
 801515a:	4770      	bx	lr
 801515c:	08016e4c 	.word	0x08016e4c

08015160 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8015160:	b570      	push	{r4, r5, r6, lr}
 8015162:	b082      	sub	sp, #8
 8015164:	4606      	mov	r6, r0
 8015166:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8015168:	4b1d      	ldr	r3, [pc, #116]	; (80151e0 <SUBGRF_GetCFO+0x80>)
 801516a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801516c:	f640 0007 	movw	r0, #2055	; 0x807
 8015170:	f7ff fcd6 	bl	8014b20 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8015174:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8015178:	3308      	adds	r3, #8
 801517a:	446b      	add	r3, sp
 801517c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8015180:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8015184:	3b01      	subs	r3, #1
 8015186:	fa05 f303 	lsl.w	r3, r5, r3
 801518a:	4d16      	ldr	r5, [pc, #88]	; (80151e4 <SUBGRF_GetCFO+0x84>)
 801518c:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8015190:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8015194:	2a07      	cmp	r2, #7
 8015196:	d921      	bls.n	80151dc <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8015198:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801519a:	fb00 f202 	mul.w	r2, r0, r2
 801519e:	2a03      	cmp	r2, #3
 80151a0:	d800      	bhi.n	80151a4 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 80151a2:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 80151a4:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 80151a8:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80151ac:	f7ff fcb8 	bl	8014b20 <SUBGRF_ReadRegister>
 80151b0:	0200      	lsls	r0, r0, #8
 80151b2:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80151b6:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80151ba:	f7ff fcb1 	bl	8014b20 <SUBGRF_ReadRegister>
 80151be:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80151c0:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80151c4:	d003      	beq.n	80151ce <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80151c6:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80151ca:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80151ce:	096d      	lsrs	r5, r5, #5
 80151d0:	fb05 f000 	mul.w	r0, r5, r0
 80151d4:	11c0      	asrs	r0, r0, #7
 80151d6:	6020      	str	r0, [r4, #0]
}
 80151d8:	b002      	add	sp, #8
 80151da:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80151dc:	2002      	movs	r0, #2
 80151de:	e7dc      	b.n	801519a <SUBGRF_GetCFO+0x3a>
 80151e0:	0c0a0804 	.word	0x0c0a0804
 80151e4:	01e84800 	.word	0x01e84800

080151e8 <RFW_TransmitLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80151e8:	f04f 30ff 	mov.w	r0, #4294967295
 80151ec:	4770      	bx	lr

080151ee <RFW_ReceiveLongPacket>:
  }
#else
  status= -1;
#endif
  return status;
}
 80151ee:	f04f 30ff 	mov.w	r0, #4294967295
 80151f2:	4770      	bx	lr

080151f4 <RFW_DeInit>:
void RFW_DeInit( void)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 80151f4:	4770      	bx	lr

080151f6 <RFW_Is_Init>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
#endif
}
 80151f6:	2000      	movs	r0, #0
 80151f8:	4770      	bx	lr

080151fa <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
#endif
}
 80151fa:	2000      	movs	r0, #0
 80151fc:	4770      	bx	lr

080151fe <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 80151fe:	4770      	bx	lr

08015200 <RFW_TransmitInit>:

    status= 0;
  }
#endif
  return status;
}
 8015200:	f04f 30ff 	mov.w	r0, #4294967295
 8015204:	4770      	bx	lr

08015206 <RFW_ReceiveInit>:
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
#endif
}
 8015206:	f04f 30ff 	mov.w	r0, #4294967295
 801520a:	4770      	bx	lr

0801520c <RFW_DeInit_TxLongPacket>:
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801520c:	4770      	bx	lr

0801520e <RFW_ReceivePayload>:
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801520e:	4770      	bx	lr

08015210 <RFW_SetRadioModem>:
void RFW_SetRadioModem(RadioModems_t Modem)
{
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8015210:	4770      	bx	lr
	...

08015214 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8015214:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015216:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801521a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801521c:	4b1e      	ldr	r3, [pc, #120]	; (8015298 <TRACE_AllocateBufer+0x84>)
 801521e:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8015222:	8a1a      	ldrh	r2, [r3, #16]
 8015224:	4594      	cmp	ip, r2
 8015226:	d011      	beq.n	801524c <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8015228:	4594      	cmp	ip, r2
 801522a:	d921      	bls.n	8015270 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801522c:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8015230:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8015232:	4283      	cmp	r3, r0
 8015234:	d81f      	bhi.n	8015276 <TRACE_AllocateBufer+0x62>
 8015236:	4282      	cmp	r2, r0
 8015238:	d91d      	bls.n	8015276 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801523a:	4b17      	ldr	r3, [pc, #92]	; (8015298 <TRACE_AllocateBufer+0x84>)
 801523c:	2401      	movs	r4, #1
 801523e:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8015240:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8015244:	2400      	movs	r4, #0
 8015246:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8015248:	4613      	mov	r3, r2
 801524a:	e014      	b.n	8015276 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801524c:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8015250:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8015252:	4298      	cmp	r0, r3
 8015254:	d30f      	bcc.n	8015276 <TRACE_AllocateBufer+0x62>
 8015256:	4282      	cmp	r2, r0
 8015258:	d90d      	bls.n	8015276 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801525a:	4b0f      	ldr	r3, [pc, #60]	; (8015298 <TRACE_AllocateBufer+0x84>)
 801525c:	2401      	movs	r4, #1
 801525e:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8015260:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8015264:	f04f 0c00 	mov.w	ip, #0
 8015268:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801526c:	4613      	mov	r3, r2
 801526e:	e002      	b.n	8015276 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8015270:	eba2 030c 	sub.w	r3, r2, ip
 8015274:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8015276:	4283      	cmp	r3, r0
 8015278:	d90a      	bls.n	8015290 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801527a:	4a07      	ldr	r2, [pc, #28]	; (8015298 <TRACE_AllocateBufer+0x84>)
 801527c:	8a53      	ldrh	r3, [r2, #18]
 801527e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8015280:	4403      	add	r3, r0
 8015282:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015286:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8015288:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801528a:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801528e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8015290:	f04f 30ff 	mov.w	r0, #4294967295
 8015294:	e7f9      	b.n	801528a <TRACE_AllocateBufer+0x76>
 8015296:	bf00      	nop
 8015298:	20004320 	.word	0x20004320

0801529c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801529c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80152a0:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 80152a2:	4a03      	ldr	r2, [pc, #12]	; (80152b0 <TRACE_Lock+0x14>)
 80152a4:	8ad3      	ldrh	r3, [r2, #22]
 80152a6:	3301      	adds	r3, #1
 80152a8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152aa:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80152ae:	4770      	bx	lr
 80152b0:	20004320 	.word	0x20004320

080152b4 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152b4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80152b8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80152ba:	4a03      	ldr	r2, [pc, #12]	; (80152c8 <TRACE_UnLock+0x14>)
 80152bc:	8ad3      	ldrh	r3, [r2, #22]
 80152be:	3b01      	subs	r3, #1
 80152c0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152c2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80152c6:	4770      	bx	lr
 80152c8:	20004320 	.word	0x20004320

080152cc <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80152cc:	4b02      	ldr	r3, [pc, #8]	; (80152d8 <TRACE_IsLocked+0xc>)
 80152ce:	8ad8      	ldrh	r0, [r3, #22]
}
 80152d0:	3800      	subs	r0, #0
 80152d2:	bf18      	it	ne
 80152d4:	2001      	movne	r0, #1
 80152d6:	4770      	bx	lr
 80152d8:	20004320 	.word	0x20004320

080152dc <UTIL_ADV_TRACE_Init>:
{
 80152dc:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80152de:	2218      	movs	r2, #24
 80152e0:	2100      	movs	r1, #0
 80152e2:	4807      	ldr	r0, [pc, #28]	; (8015300 <UTIL_ADV_TRACE_Init+0x24>)
 80152e4:	f000 f98f 	bl	8015606 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80152e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80152ec:	2100      	movs	r1, #0
 80152ee:	4805      	ldr	r0, [pc, #20]	; (8015304 <UTIL_ADV_TRACE_Init+0x28>)
 80152f0:	f000 f989 	bl	8015606 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80152f4:	4b04      	ldr	r3, [pc, #16]	; (8015308 <UTIL_ADV_TRACE_Init+0x2c>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	4804      	ldr	r0, [pc, #16]	; (801530c <UTIL_ADV_TRACE_Init+0x30>)
 80152fa:	4798      	blx	r3
}
 80152fc:	bd08      	pop	{r3, pc}
 80152fe:	bf00      	nop
 8015300:	20004320 	.word	0x20004320
 8015304:	20003f20 	.word	0x20003f20
 8015308:	08016060 	.word	0x08016060
 801530c:	08015491 	.word	0x08015491

08015310 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8015310:	4b01      	ldr	r3, [pc, #4]	; (8015318 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8015312:	6058      	str	r0, [r3, #4]
}
 8015314:	4770      	bx	lr
 8015316:	bf00      	nop
 8015318:	20004320 	.word	0x20004320

0801531c <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801531c:	4b01      	ldr	r3, [pc, #4]	; (8015324 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 801531e:	7218      	strb	r0, [r3, #8]
}
 8015320:	4770      	bx	lr
 8015322:	bf00      	nop
 8015324:	20004320 	.word	0x20004320

08015328 <TRACE_Send>:
{
 8015328:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801532a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801532e:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8015330:	f7ff ffcc 	bl	80152cc <TRACE_IsLocked>
 8015334:	b118      	cbz	r0, 801533e <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015336:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801533a:	2000      	movs	r0, #0
}
 801533c:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 801533e:	f7ff ffad 	bl	801529c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8015342:	4b1d      	ldr	r3, [pc, #116]	; (80153b8 <TRACE_Send+0x90>)
 8015344:	8a1a      	ldrh	r2, [r3, #16]
 8015346:	8a5b      	ldrh	r3, [r3, #18]
 8015348:	429a      	cmp	r2, r3
 801534a:	d02e      	beq.n	80153aa <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801534c:	491a      	ldr	r1, [pc, #104]	; (80153b8 <TRACE_Send+0x90>)
 801534e:	7889      	ldrb	r1, [r1, #2]
 8015350:	2901      	cmp	r1, #1
 8015352:	d017      	beq.n	8015384 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8015354:	4a18      	ldr	r2, [pc, #96]	; (80153b8 <TRACE_Send+0x90>)
 8015356:	7892      	ldrb	r2, [r2, #2]
 8015358:	b932      	cbnz	r2, 8015368 <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801535a:	4a17      	ldr	r2, [pc, #92]	; (80153b8 <TRACE_Send+0x90>)
 801535c:	8a12      	ldrh	r2, [r2, #16]
 801535e:	4293      	cmp	r3, r2
 8015360:	d91e      	bls.n	80153a0 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8015362:	1a9b      	subs	r3, r3, r2
 8015364:	4a14      	ldr	r2, [pc, #80]	; (80153b8 <TRACE_Send+0x90>)
 8015366:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8015368:	4e13      	ldr	r6, [pc, #76]	; (80153b8 <TRACE_Send+0x90>)
 801536a:	8a33      	ldrh	r3, [r6, #16]
 801536c:	4d13      	ldr	r5, [pc, #76]	; (80153bc <TRACE_Send+0x94>)
 801536e:	441d      	add	r5, r3
 8015370:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8015374:	f7ec fe72 	bl	800205c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8015378:	4b11      	ldr	r3, [pc, #68]	; (80153c0 <TRACE_Send+0x98>)
 801537a:	68db      	ldr	r3, [r3, #12]
 801537c:	8ab1      	ldrh	r1, [r6, #20]
 801537e:	4628      	mov	r0, r5
 8015380:	4798      	blx	r3
 8015382:	e7db      	b.n	801533c <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8015384:	480c      	ldr	r0, [pc, #48]	; (80153b8 <TRACE_Send+0x90>)
 8015386:	8801      	ldrh	r1, [r0, #0]
 8015388:	1a8a      	subs	r2, r1, r2
 801538a:	b292      	uxth	r2, r2
 801538c:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801538e:	2102      	movs	r1, #2
 8015390:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8015392:	2100      	movs	r1, #0
 8015394:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8015396:	2a00      	cmp	r2, #0
 8015398:	d1dc      	bne.n	8015354 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801539a:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801539c:	8201      	strh	r1, [r0, #16]
 801539e:	e7d9      	b.n	8015354 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80153a0:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 80153a4:	4a04      	ldr	r2, [pc, #16]	; (80153b8 <TRACE_Send+0x90>)
 80153a6:	8293      	strh	r3, [r2, #20]
 80153a8:	e7de      	b.n	8015368 <TRACE_Send+0x40>
      TRACE_UnLock();
 80153aa:	f7ff ff83 	bl	80152b4 <TRACE_UnLock>
 80153ae:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80153b2:	2000      	movs	r0, #0
}
 80153b4:	e7c2      	b.n	801533c <TRACE_Send+0x14>
 80153b6:	bf00      	nop
 80153b8:	20004320 	.word	0x20004320
 80153bc:	20003f20 	.word	0x20003f20
 80153c0:	08016060 	.word	0x08016060

080153c4 <UTIL_ADV_TRACE_COND_FSend>:
{
 80153c4:	b408      	push	{r3}
 80153c6:	b530      	push	{r4, r5, lr}
 80153c8:	b086      	sub	sp, #24
 80153ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80153cc:	2300      	movs	r3, #0
 80153ce:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80153d2:	4b2c      	ldr	r3, [pc, #176]	; (8015484 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80153d4:	7a1b      	ldrb	r3, [r3, #8]
 80153d6:	4283      	cmp	r3, r0
 80153d8:	d34d      	bcc.n	8015476 <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80153da:	4b2a      	ldr	r3, [pc, #168]	; (8015484 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80153dc:	68db      	ldr	r3, [r3, #12]
 80153de:	ea31 0303 	bics.w	r3, r1, r3
 80153e2:	d14b      	bne.n	801547c <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80153e4:	4b27      	ldr	r3, [pc, #156]	; (8015484 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80153e6:	685b      	ldr	r3, [r3, #4]
 80153e8:	b123      	cbz	r3, 80153f4 <UTIL_ADV_TRACE_COND_FSend+0x30>
 80153ea:	b11a      	cbz	r2, 80153f4 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80153ec:	f10d 0102 	add.w	r1, sp, #2
 80153f0:	a801      	add	r0, sp, #4
 80153f2:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80153f4:	ab0a      	add	r3, sp, #40	; 0x28
 80153f6:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80153f8:	4622      	mov	r2, r4
 80153fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80153fe:	4822      	ldr	r0, [pc, #136]	; (8015488 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8015400:	f000 fbf4 	bl	8015bec <tiny_vsnprintf_like>
 8015404:	b285      	uxth	r5, r0
  TRACE_Lock();
 8015406:	f7ff ff49 	bl	801529c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801540a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 801540e:	4428      	add	r0, r5
 8015410:	4669      	mov	r1, sp
 8015412:	b280      	uxth	r0, r0
 8015414:	f7ff fefe 	bl	8015214 <TRACE_AllocateBufer>
 8015418:	f1b0 3fff 	cmp.w	r0, #4294967295
 801541c:	d026      	beq.n	801546c <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 801541e:	2300      	movs	r3, #0
 8015420:	e00d      	b.n	801543e <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8015422:	f8bd 2000 	ldrh.w	r2, [sp]
 8015426:	f103 0118 	add.w	r1, r3, #24
 801542a:	4469      	add	r1, sp
 801542c:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8015430:	4916      	ldr	r1, [pc, #88]	; (801548c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8015432:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8015434:	3201      	adds	r2, #1
 8015436:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 801543a:	3301      	adds	r3, #1
 801543c:	b29b      	uxth	r3, r3
 801543e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015442:	429a      	cmp	r2, r3
 8015444:	d8ed      	bhi.n	8015422 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8015446:	f8bd 0000 	ldrh.w	r0, [sp]
 801544a:	9b05      	ldr	r3, [sp, #20]
 801544c:	4622      	mov	r2, r4
 801544e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015452:	4c0e      	ldr	r4, [pc, #56]	; (801548c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8015454:	4420      	add	r0, r4
 8015456:	f000 fbc9 	bl	8015bec <tiny_vsnprintf_like>
    TRACE_UnLock();
 801545a:	f7ff ff2b 	bl	80152b4 <TRACE_UnLock>
    return TRACE_Send();
 801545e:	f7ff ff63 	bl	8015328 <TRACE_Send>
}
 8015462:	b006      	add	sp, #24
 8015464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015468:	b001      	add	sp, #4
 801546a:	4770      	bx	lr
  TRACE_UnLock();
 801546c:	f7ff ff22 	bl	80152b4 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8015470:	f06f 0002 	mvn.w	r0, #2
 8015474:	e7f5      	b.n	8015462 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 8015476:	f06f 0004 	mvn.w	r0, #4
 801547a:	e7f2      	b.n	8015462 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801547c:	f06f 0005 	mvn.w	r0, #5
 8015480:	e7ef      	b.n	8015462 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8015482:	bf00      	nop
 8015484:	20004320 	.word	0x20004320
 8015488:	20004338 	.word	0x20004338
 801548c:	20003f20 	.word	0x20003f20

08015490 <TRACE_TxCpltCallback>:
{
 8015490:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015492:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015496:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8015498:	4b25      	ldr	r3, [pc, #148]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 801549a:	789b      	ldrb	r3, [r3, #2]
 801549c:	2b02      	cmp	r3, #2
 801549e:	d016      	beq.n	80154ce <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 80154a0:	4a23      	ldr	r2, [pc, #140]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154a2:	8a13      	ldrh	r3, [r2, #16]
 80154a4:	8a90      	ldrh	r0, [r2, #20]
 80154a6:	4403      	add	r3, r0
 80154a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80154ac:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80154ae:	4b20      	ldr	r3, [pc, #128]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154b0:	8a1a      	ldrh	r2, [r3, #16]
 80154b2:	8a5b      	ldrh	r3, [r3, #18]
 80154b4:	429a      	cmp	r2, r3
 80154b6:	d003      	beq.n	80154c0 <TRACE_TxCpltCallback+0x30>
 80154b8:	481d      	ldr	r0, [pc, #116]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154ba:	8ac0      	ldrh	r0, [r0, #22]
 80154bc:	2801      	cmp	r0, #1
 80154be:	d00b      	beq.n	80154d8 <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154c0:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80154c4:	f7ec fdd0 	bl	8002068 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80154c8:	f7ff fef4 	bl	80152b4 <TRACE_UnLock>
}
 80154cc:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80154ce:	4b18      	ldr	r3, [pc, #96]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154d0:	2200      	movs	r2, #0
 80154d2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80154d4:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80154d6:	e7ea      	b.n	80154ae <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80154d8:	4815      	ldr	r0, [pc, #84]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154da:	7880      	ldrb	r0, [r0, #2]
 80154dc:	2801      	cmp	r0, #1
 80154de:	d014      	beq.n	801550a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80154e0:	4a13      	ldr	r2, [pc, #76]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154e2:	7892      	ldrb	r2, [r2, #2]
 80154e4:	b932      	cbnz	r2, 80154f4 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80154e6:	4a12      	ldr	r2, [pc, #72]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154e8:	8a12      	ldrh	r2, [r2, #16]
 80154ea:	4293      	cmp	r3, r2
 80154ec:	d91b      	bls.n	8015526 <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80154ee:	1a9b      	subs	r3, r3, r2
 80154f0:	4a0f      	ldr	r2, [pc, #60]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154f2:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80154f4:	4b0e      	ldr	r3, [pc, #56]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 80154f6:	8a1a      	ldrh	r2, [r3, #16]
 80154f8:	480e      	ldr	r0, [pc, #56]	; (8015534 <TRACE_TxCpltCallback+0xa4>)
 80154fa:	4410      	add	r0, r2
 80154fc:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8015500:	4a0d      	ldr	r2, [pc, #52]	; (8015538 <TRACE_TxCpltCallback+0xa8>)
 8015502:	68d2      	ldr	r2, [r2, #12]
 8015504:	8a99      	ldrh	r1, [r3, #20]
 8015506:	4790      	blx	r2
 8015508:	e7e0      	b.n	80154cc <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801550a:	4c09      	ldr	r4, [pc, #36]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 801550c:	8820      	ldrh	r0, [r4, #0]
 801550e:	1a82      	subs	r2, r0, r2
 8015510:	b292      	uxth	r2, r2
 8015512:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8015514:	2002      	movs	r0, #2
 8015516:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8015518:	2000      	movs	r0, #0
 801551a:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801551c:	2a00      	cmp	r2, #0
 801551e:	d1df      	bne.n	80154e0 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8015520:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8015522:	8220      	strh	r0, [r4, #16]
 8015524:	e7dc      	b.n	80154e0 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8015526:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 801552a:	4a01      	ldr	r2, [pc, #4]	; (8015530 <TRACE_TxCpltCallback+0xa0>)
 801552c:	8293      	strh	r3, [r2, #20]
 801552e:	e7e1      	b.n	80154f4 <TRACE_TxCpltCallback+0x64>
 8015530:	20004320 	.word	0x20004320
 8015534:	20003f20 	.word	0x20003f20
 8015538:	08016060 	.word	0x08016060

0801553c <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801553c:	2300      	movs	r3, #0
 801553e:	4a02      	ldr	r2, [pc, #8]	; (8015548 <UTIL_LPM_Init+0xc>)
 8015540:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015542:	4a02      	ldr	r2, [pc, #8]	; (801554c <UTIL_LPM_Init+0x10>)
 8015544:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015546:	4770      	bx	lr
 8015548:	2000453c 	.word	0x2000453c
 801554c:	20004538 	.word	0x20004538

08015550 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015550:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015554:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8015556:	b141      	cbz	r1, 801556a <UTIL_LPM_SetStopMode+0x1a>
 8015558:	2901      	cmp	r1, #1
 801555a:	d103      	bne.n	8015564 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801555c:	4906      	ldr	r1, [pc, #24]	; (8015578 <UTIL_LPM_SetStopMode+0x28>)
 801555e:	680a      	ldr	r2, [r1, #0]
 8015560:	4310      	orrs	r0, r2
 8015562:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015564:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015568:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801556a:	4903      	ldr	r1, [pc, #12]	; (8015578 <UTIL_LPM_SetStopMode+0x28>)
 801556c:	680a      	ldr	r2, [r1, #0]
 801556e:	ea22 0000 	bic.w	r0, r2, r0
 8015572:	6008      	str	r0, [r1, #0]
      break;
 8015574:	e7f6      	b.n	8015564 <UTIL_LPM_SetStopMode+0x14>
 8015576:	bf00      	nop
 8015578:	2000453c 	.word	0x2000453c

0801557c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801557c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015580:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8015582:	b141      	cbz	r1, 8015596 <UTIL_LPM_SetOffMode+0x1a>
 8015584:	2901      	cmp	r1, #1
 8015586:	d103      	bne.n	8015590 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015588:	4906      	ldr	r1, [pc, #24]	; (80155a4 <UTIL_LPM_SetOffMode+0x28>)
 801558a:	680a      	ldr	r2, [r1, #0]
 801558c:	4310      	orrs	r0, r2
 801558e:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015590:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015594:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8015596:	4903      	ldr	r1, [pc, #12]	; (80155a4 <UTIL_LPM_SetOffMode+0x28>)
 8015598:	680a      	ldr	r2, [r1, #0]
 801559a:	ea22 0000 	bic.w	r0, r2, r0
 801559e:	6008      	str	r0, [r1, #0]
      break;
 80155a0:	e7f6      	b.n	8015590 <UTIL_LPM_SetOffMode+0x14>
 80155a2:	bf00      	nop
 80155a4:	20004538 	.word	0x20004538

080155a8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80155a8:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80155aa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80155ae:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80155b0:	4b0c      	ldr	r3, [pc, #48]	; (80155e4 <UTIL_LPM_EnterLowPower+0x3c>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	b13b      	cbz	r3, 80155c6 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80155b6:	4d0c      	ldr	r5, [pc, #48]	; (80155e8 <UTIL_LPM_EnterLowPower+0x40>)
 80155b8:	682b      	ldr	r3, [r5, #0]
 80155ba:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80155bc:	686b      	ldr	r3, [r5, #4]
 80155be:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155c0:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80155c4:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80155c6:	4b09      	ldr	r3, [pc, #36]	; (80155ec <UTIL_LPM_EnterLowPower+0x44>)
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	b12b      	cbz	r3, 80155d8 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80155cc:	4d06      	ldr	r5, [pc, #24]	; (80155e8 <UTIL_LPM_EnterLowPower+0x40>)
 80155ce:	68ab      	ldr	r3, [r5, #8]
 80155d0:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80155d2:	68eb      	ldr	r3, [r5, #12]
 80155d4:	4798      	blx	r3
 80155d6:	e7f3      	b.n	80155c0 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80155d8:	4d03      	ldr	r5, [pc, #12]	; (80155e8 <UTIL_LPM_EnterLowPower+0x40>)
 80155da:	692b      	ldr	r3, [r5, #16]
 80155dc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80155de:	696b      	ldr	r3, [r5, #20]
 80155e0:	4798      	blx	r3
 80155e2:	e7ed      	b.n	80155c0 <UTIL_LPM_EnterLowPower+0x18>
 80155e4:	2000453c 	.word	0x2000453c
 80155e8:	08015ffc 	.word	0x08015ffc
 80155ec:	20004538 	.word	0x20004538

080155f0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80155f0:	e004      	b.n	80155fc <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80155f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80155f6:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80155fa:	461a      	mov	r2, r3
 80155fc:	1e53      	subs	r3, r2, #1
 80155fe:	b29b      	uxth	r3, r3
 8015600:	2a00      	cmp	r2, #0
 8015602:	d1f6      	bne.n	80155f2 <UTIL_MEM_cpy_8+0x2>
    }
}
 8015604:	4770      	bx	lr

08015606 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8015606:	e002      	b.n	801560e <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8015608:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 801560c:	461a      	mov	r2, r3
 801560e:	1e53      	subs	r3, r2, #1
 8015610:	b29b      	uxth	r3, r3
 8015612:	2a00      	cmp	r2, #0
 8015614:	d1f8      	bne.n	8015608 <UTIL_MEM_set_8+0x2>
  }
}
 8015616:	4770      	bx	lr

08015618 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8015618:	b082      	sub	sp, #8
 801561a:	b082      	sub	sp, #8
 801561c:	f10d 0c08 	add.w	ip, sp, #8
 8015620:	e90c 0006 	stmdb	ip, {r1, r2}
 8015624:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8015626:	2200      	movs	r2, #0
 8015628:	6002      	str	r2, [r0, #0]
 801562a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 801562c:	440b      	add	r3, r1
 801562e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8015630:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015634:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015638:	440a      	add	r2, r1
 801563a:	b291      	uxth	r1, r2
 801563c:	b212      	sxth	r2, r2
 801563e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8015640:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8015644:	db04      	blt.n	8015650 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8015646:	3301      	adds	r3, #1
 8015648:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 801564a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 801564e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8015650:	b002      	add	sp, #8
 8015652:	b002      	add	sp, #8
 8015654:	4770      	bx	lr

08015656 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8015656:	b082      	sub	sp, #8
 8015658:	b082      	sub	sp, #8
 801565a:	f10d 0c08 	add.w	ip, sp, #8
 801565e:	e90c 0006 	stmdb	ip, {r1, r2}
 8015662:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8015664:	2200      	movs	r2, #0
 8015666:	6002      	str	r2, [r0, #0]
 8015668:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 801566a:	1acb      	subs	r3, r1, r3
 801566c:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801566e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8015672:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8015676:	1a52      	subs	r2, r2, r1
 8015678:	b291      	uxth	r1, r2
 801567a:	b212      	sxth	r2, r2
 801567c:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 801567e:	2a00      	cmp	r2, #0
 8015680:	db02      	blt.n	8015688 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 8015682:	b002      	add	sp, #8
 8015684:	b002      	add	sp, #8
 8015686:	4770      	bx	lr
    c.Seconds--;
 8015688:	3b01      	subs	r3, #1
 801568a:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 801568c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8015690:	8081      	strh	r1, [r0, #4]
  return c;
 8015692:	e7f6      	b.n	8015682 <SysTimeSub+0x2c>

08015694 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8015694:	b530      	push	{r4, r5, lr}
 8015696:	b089      	sub	sp, #36	; 0x24
 8015698:	ac02      	add	r4, sp, #8
 801569a:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801569e:	2300      	movs	r3, #0
 80156a0:	9304      	str	r3, [sp, #16]
 80156a2:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80156a6:	4d0b      	ldr	r5, [pc, #44]	; (80156d4 <SysTimeSet+0x40>)
 80156a8:	692b      	ldr	r3, [r5, #16]
 80156aa:	a805      	add	r0, sp, #20
 80156ac:	4798      	blx	r3
 80156ae:	4603      	mov	r3, r0
 80156b0:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 80156b2:	9a05      	ldr	r2, [sp, #20]
 80156b4:	9200      	str	r2, [sp, #0]
 80156b6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80156ba:	a806      	add	r0, sp, #24
 80156bc:	f7ff ffcb 	bl	8015656 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 80156c0:	682b      	ldr	r3, [r5, #0]
 80156c2:	9806      	ldr	r0, [sp, #24]
 80156c4:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 80156c6:	68ab      	ldr	r3, [r5, #8]
 80156c8:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80156cc:	4798      	blx	r3
}
 80156ce:	b009      	add	sp, #36	; 0x24
 80156d0:	bd30      	pop	{r4, r5, pc}
 80156d2:	bf00      	nop
 80156d4:	08016020 	.word	0x08016020

080156d8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80156d8:	b530      	push	{r4, r5, lr}
 80156da:	b087      	sub	sp, #28
 80156dc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80156de:	2300      	movs	r3, #0
 80156e0:	9304      	str	r3, [sp, #16]
 80156e2:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80156e6:	6003      	str	r3, [r0, #0]
 80156e8:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80156ea:	4d0b      	ldr	r5, [pc, #44]	; (8015718 <SysTimeGet+0x40>)
 80156ec:	692b      	ldr	r3, [r5, #16]
 80156ee:	a805      	add	r0, sp, #20
 80156f0:	4798      	blx	r3
 80156f2:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80156f4:	68eb      	ldr	r3, [r5, #12]
 80156f6:	4798      	blx	r3
 80156f8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80156fc:	686b      	ldr	r3, [r5, #4]
 80156fe:	4798      	blx	r3
 8015700:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8015702:	9b05      	ldr	r3, [sp, #20]
 8015704:	9300      	str	r3, [sp, #0]
 8015706:	9b04      	ldr	r3, [sp, #16]
 8015708:	aa02      	add	r2, sp, #8
 801570a:	ca06      	ldmia	r2, {r1, r2}
 801570c:	4620      	mov	r0, r4
 801570e:	f7ff ff83 	bl	8015618 <SysTimeAdd>

  return sysTime;
}
 8015712:	4620      	mov	r0, r4
 8015714:	b007      	add	sp, #28
 8015716:	bd30      	pop	{r4, r5, pc}
 8015718:	08016020 	.word	0x08016020

0801571c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801571c:	b530      	push	{r4, r5, lr}
 801571e:	b083      	sub	sp, #12
 8015720:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8015722:	2300      	movs	r3, #0
 8015724:	9300      	str	r3, [sp, #0]
 8015726:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801572a:	4b06      	ldr	r3, [pc, #24]	; (8015744 <SysTimeGetMcuTime+0x28>)
 801572c:	691b      	ldr	r3, [r3, #16]
 801572e:	466d      	mov	r5, sp
 8015730:	a801      	add	r0, sp, #4
 8015732:	4798      	blx	r3
 8015734:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8015736:	e895 0003 	ldmia.w	r5, {r0, r1}
 801573a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 801573e:	4620      	mov	r0, r4
 8015740:	b003      	add	sp, #12
 8015742:	bd30      	pop	{r4, r5, pc}
 8015744:	08016020 	.word	0x08016020

08015748 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8015748:	b530      	push	{r4, r5, lr}
 801574a:	b089      	sub	sp, #36	; 0x24
 801574c:	ac02      	add	r4, sp, #8
 801574e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8015752:	4d0c      	ldr	r5, [pc, #48]	; (8015784 <SysTimeToMs+0x3c>)
 8015754:	68eb      	ldr	r3, [r5, #12]
 8015756:	4798      	blx	r3
 8015758:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801575c:	686b      	ldr	r3, [r5, #4]
 801575e:	4798      	blx	r3
 8015760:	4603      	mov	r3, r0
 8015762:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8015764:	9a07      	ldr	r2, [sp, #28]
 8015766:	9200      	str	r2, [sp, #0]
 8015768:	e894 0006 	ldmia.w	r4, {r1, r2}
 801576c:	a804      	add	r0, sp, #16
 801576e:	f7ff ff72 	bl	8015656 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8015772:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8015776:	9a04      	ldr	r2, [sp, #16]
 8015778:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801577c:	fb00 3002 	mla	r0, r0, r2, r3
 8015780:	b009      	add	sp, #36	; 0x24
 8015782:	bd30      	pop	{r4, r5, pc}
 8015784:	08016020 	.word	0x08016020

08015788 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8015788:	b530      	push	{r4, r5, lr}
 801578a:	b087      	sub	sp, #28
 801578c:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 801578e:	4b12      	ldr	r3, [pc, #72]	; (80157d8 <SysTimeFromMs+0x50>)
 8015790:	fba3 2301 	umull	r2, r3, r3, r1
 8015794:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8015796:	9304      	str	r3, [sp, #16]
 8015798:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801579c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80157a0:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 80157a4:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 80157a8:	2300      	movs	r3, #0
 80157aa:	9302      	str	r3, [sp, #8]
 80157ac:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80157ae:	4d0b      	ldr	r5, [pc, #44]	; (80157dc <SysTimeFromMs+0x54>)
 80157b0:	68eb      	ldr	r3, [r5, #12]
 80157b2:	4798      	blx	r3
 80157b4:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80157b8:	686b      	ldr	r3, [r5, #4]
 80157ba:	4798      	blx	r3
 80157bc:	4603      	mov	r3, r0
 80157be:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 80157c0:	9a03      	ldr	r2, [sp, #12]
 80157c2:	9200      	str	r2, [sp, #0]
 80157c4:	aa06      	add	r2, sp, #24
 80157c6:	e912 0006 	ldmdb	r2, {r1, r2}
 80157ca:	4620      	mov	r0, r4
 80157cc:	f7ff ff24 	bl	8015618 <SysTimeAdd>
}
 80157d0:	4620      	mov	r0, r4
 80157d2:	b007      	add	sp, #28
 80157d4:	bd30      	pop	{r4, r5, pc}
 80157d6:	bf00      	nop
 80157d8:	10624dd3 	.word	0x10624dd3
 80157dc:	08016020 	.word	0x08016020

080157e0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80157e0:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80157e2:	4b03      	ldr	r3, [pc, #12]	; (80157f0 <UTIL_TIMER_Init+0x10>)
 80157e4:	2200      	movs	r2, #0
 80157e6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80157e8:	4b02      	ldr	r3, [pc, #8]	; (80157f4 <UTIL_TIMER_Init+0x14>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	4798      	blx	r3
}
 80157ee:	bd08      	pop	{r3, pc}
 80157f0:	20004540 	.word	0x20004540
 80157f4:	08016034 	.word	0x08016034

080157f8 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80157f8:	b1a8      	cbz	r0, 8015826 <UTIL_TIMER_Create+0x2e>
{
 80157fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157fc:	4617      	mov	r7, r2
 80157fe:	461e      	mov	r6, r3
 8015800:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8015802:	b193      	cbz	r3, 801582a <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8015804:	2500      	movs	r5, #0
 8015806:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8015808:	4b09      	ldr	r3, [pc, #36]	; (8015830 <UTIL_TIMER_Create+0x38>)
 801580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801580c:	4608      	mov	r0, r1
 801580e:	4798      	blx	r3
 8015810:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8015812:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8015814:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8015816:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8015818:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 801581a:	9b06      	ldr	r3, [sp, #24]
 801581c:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 801581e:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8015820:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8015822:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8015824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8015826:	2001      	movs	r0, #1
}
 8015828:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 801582a:	2001      	movs	r0, #1
 801582c:	e7fa      	b.n	8015824 <UTIL_TIMER_Create+0x2c>
 801582e:	bf00      	nop
 8015830:	08016034 	.word	0x08016034

08015834 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8015834:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8015836:	4c03      	ldr	r4, [pc, #12]	; (8015844 <UTIL_TIMER_GetCurrentTime+0x10>)
 8015838:	69e3      	ldr	r3, [r4, #28]
 801583a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 801583c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801583e:	4798      	blx	r3
}
 8015840:	bd10      	pop	{r4, pc}
 8015842:	bf00      	nop
 8015844:	08016034 	.word	0x08016034

08015848 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8015848:	b570      	push	{r4, r5, r6, lr}
 801584a:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801584c:	4d05      	ldr	r5, [pc, #20]	; (8015864 <UTIL_TIMER_GetElapsedTime+0x1c>)
 801584e:	69eb      	ldr	r3, [r5, #28]
 8015850:	4798      	blx	r3
 8015852:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8015854:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015856:	4630      	mov	r0, r6
 8015858:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801585a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801585c:	1a20      	subs	r0, r4, r0
 801585e:	4798      	blx	r3
}
 8015860:	bd70      	pop	{r4, r5, r6, pc}
 8015862:	bf00      	nop
 8015864:	08016034 	.word	0x08016034

08015868 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015868:	4b05      	ldr	r3, [pc, #20]	; (8015880 <TimerExists+0x18>)
 801586a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 801586c:	e000      	b.n	8015870 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 801586e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8015870:	b11b      	cbz	r3, 801587a <TimerExists+0x12>
    if( cur == TimerObject )
 8015872:	4283      	cmp	r3, r0
 8015874:	d1fb      	bne.n	801586e <TimerExists+0x6>
      return true;
 8015876:	2001      	movs	r0, #1
  }
  return false;
}
 8015878:	4770      	bx	lr
  return false;
 801587a:	2000      	movs	r0, #0
 801587c:	4770      	bx	lr
 801587e:	bf00      	nop
 8015880:	20004540 	.word	0x20004540

08015884 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8015884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015886:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8015888:	4e09      	ldr	r6, [pc, #36]	; (80158b0 <TimerSetTimeout+0x2c>)
 801588a:	6a33      	ldr	r3, [r6, #32]
 801588c:	4798      	blx	r3
 801588e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8015890:	2301      	movs	r3, #1
 8015892:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8015894:	6827      	ldr	r7, [r4, #0]
 8015896:	69b6      	ldr	r6, [r6, #24]
 8015898:	47b0      	blx	r6
 801589a:	4428      	add	r0, r5
 801589c:	4287      	cmp	r7, r0
 801589e:	d202      	bcs.n	80158a6 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 80158a0:	47b0      	blx	r6
 80158a2:	4405      	add	r5, r0
 80158a4:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 80158a6:	4b02      	ldr	r3, [pc, #8]	; (80158b0 <TimerSetTimeout+0x2c>)
 80158a8:	689b      	ldr	r3, [r3, #8]
 80158aa:	6820      	ldr	r0, [r4, #0]
 80158ac:	4798      	blx	r3
}
 80158ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158b0:	08016034 	.word	0x08016034

080158b4 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80158b4:	b368      	cbz	r0, 8015912 <UTIL_TIMER_Stop+0x5e>
{
 80158b6:	b510      	push	{r4, lr}
 80158b8:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80158ba:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80158be:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80158c0:	4b15      	ldr	r3, [pc, #84]	; (8015918 <UTIL_TIMER_Stop+0x64>)
 80158c2:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80158c4:	2301      	movs	r3, #1
 80158c6:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80158c8:	b1e1      	cbz	r1, 8015904 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80158ca:	2300      	movs	r3, #0
 80158cc:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80158ce:	4288      	cmp	r0, r1
 80158d0:	d006      	beq.n	80158e0 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80158d2:	460b      	mov	r3, r1
        while( cur != NULL )
 80158d4:	b1b3      	cbz	r3, 8015904 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d011      	beq.n	80158fe <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80158da:	4619      	mov	r1, r3
            cur = cur->Next;
 80158dc:	695b      	ldr	r3, [r3, #20]
 80158de:	e7f9      	b.n	80158d4 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80158e0:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80158e2:	6948      	ldr	r0, [r1, #20]
 80158e4:	b120      	cbz	r0, 80158f0 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80158e6:	4b0c      	ldr	r3, [pc, #48]	; (8015918 <UTIL_TIMER_Stop+0x64>)
 80158e8:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80158ea:	f7ff ffcb 	bl	8015884 <TimerSetTimeout>
 80158ee:	e009      	b.n	8015904 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80158f0:	4b0a      	ldr	r3, [pc, #40]	; (801591c <UTIL_TIMER_Stop+0x68>)
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	4798      	blx	r3
            TimerListHead = NULL;
 80158f6:	4b08      	ldr	r3, [pc, #32]	; (8015918 <UTIL_TIMER_Stop+0x64>)
 80158f8:	2200      	movs	r2, #0
 80158fa:	601a      	str	r2, [r3, #0]
 80158fc:	e002      	b.n	8015904 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80158fe:	695b      	ldr	r3, [r3, #20]
 8015900:	b123      	cbz	r3, 801590c <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8015902:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015904:	f384 8810 	msr	PRIMASK, r4
}
 8015908:	2000      	movs	r0, #0
}
 801590a:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 801590c:	2300      	movs	r3, #0
 801590e:	614b      	str	r3, [r1, #20]
 8015910:	e7f8      	b.n	8015904 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8015912:	2001      	movs	r0, #1
}
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop
 8015918:	20004540 	.word	0x20004540
 801591c:	08016034 	.word	0x08016034

08015920 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8015920:	4b09      	ldr	r3, [pc, #36]	; (8015948 <TimerInsertTimer+0x28>)
 8015922:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8015924:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8015926:	e001      	b.n	801592c <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8015928:	461a      	mov	r2, r3
        next = next->Next;
 801592a:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 801592c:	6951      	ldr	r1, [r2, #20]
 801592e:	b139      	cbz	r1, 8015940 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8015930:	6819      	ldr	r1, [r3, #0]
 8015932:	f8d0 c000 	ldr.w	ip, [r0]
 8015936:	458c      	cmp	ip, r1
 8015938:	d8f6      	bhi.n	8015928 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 801593a:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 801593c:	6143      	str	r3, [r0, #20]
        return;
 801593e:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8015940:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8015942:	2300      	movs	r3, #0
 8015944:	6143      	str	r3, [r0, #20]
}
 8015946:	4770      	bx	lr
 8015948:	20004540 	.word	0x20004540

0801594c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801594c:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801594e:	4b05      	ldr	r3, [pc, #20]	; (8015964 <TimerInsertNewHeadTimer+0x18>)
 8015950:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8015952:	b10b      	cbz	r3, 8015958 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8015954:	2200      	movs	r2, #0
 8015956:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8015958:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 801595a:	4b02      	ldr	r3, [pc, #8]	; (8015964 <TimerInsertNewHeadTimer+0x18>)
 801595c:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 801595e:	f7ff ff91 	bl	8015884 <TimerSetTimeout>
}
 8015962:	bd08      	pop	{r3, pc}
 8015964:	20004540 	.word	0x20004540

08015968 <UTIL_TIMER_Start>:
{
 8015968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801596a:	2800      	cmp	r0, #0
 801596c:	d036      	beq.n	80159dc <UTIL_TIMER_Start+0x74>
 801596e:	4604      	mov	r4, r0
 8015970:	f7ff ff7a 	bl	8015868 <TimerExists>
 8015974:	2800      	cmp	r0, #0
 8015976:	d134      	bne.n	80159e2 <UTIL_TIMER_Start+0x7a>
 8015978:	7a65      	ldrb	r5, [r4, #9]
 801597a:	2d00      	cmp	r5, #0
 801597c:	d133      	bne.n	80159e6 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801597e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015982:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8015984:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8015986:	4b19      	ldr	r3, [pc, #100]	; (80159ec <UTIL_TIMER_Start+0x84>)
 8015988:	6a1b      	ldr	r3, [r3, #32]
 801598a:	4798      	blx	r3
    if( ticks < minValue )
 801598c:	4287      	cmp	r7, r0
 801598e:	d300      	bcc.n	8015992 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8015990:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8015992:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8015994:	2300      	movs	r3, #0
 8015996:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8015998:	2201      	movs	r2, #1
 801599a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 801599c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 801599e:	4b14      	ldr	r3, [pc, #80]	; (80159f0 <UTIL_TIMER_Start+0x88>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	b183      	cbz	r3, 80159c6 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80159a4:	4b11      	ldr	r3, [pc, #68]	; (80159ec <UTIL_TIMER_Start+0x84>)
 80159a6:	699b      	ldr	r3, [r3, #24]
 80159a8:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 80159aa:	6823      	ldr	r3, [r4, #0]
 80159ac:	4418      	add	r0, r3
 80159ae:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80159b0:	4b0f      	ldr	r3, [pc, #60]	; (80159f0 <UTIL_TIMER_Start+0x88>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	4298      	cmp	r0, r3
 80159b8:	d20c      	bcs.n	80159d4 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80159ba:	4620      	mov	r0, r4
 80159bc:	f7ff ffc6 	bl	801594c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80159c0:	f386 8810 	msr	PRIMASK, r6
}
 80159c4:	e00b      	b.n	80159de <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80159c6:	4b09      	ldr	r3, [pc, #36]	; (80159ec <UTIL_TIMER_Start+0x84>)
 80159c8:	691b      	ldr	r3, [r3, #16]
 80159ca:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80159cc:	4620      	mov	r0, r4
 80159ce:	f7ff ffbd 	bl	801594c <TimerInsertNewHeadTimer>
 80159d2:	e7f5      	b.n	80159c0 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80159d4:	4620      	mov	r0, r4
 80159d6:	f7ff ffa3 	bl	8015920 <TimerInsertTimer>
 80159da:	e7f1      	b.n	80159c0 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80159dc:	2501      	movs	r5, #1
}
 80159de:	4628      	mov	r0, r5
 80159e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80159e2:	2501      	movs	r5, #1
 80159e4:	e7fb      	b.n	80159de <UTIL_TIMER_Start+0x76>
 80159e6:	2501      	movs	r5, #1
 80159e8:	e7f9      	b.n	80159de <UTIL_TIMER_Start+0x76>
 80159ea:	bf00      	nop
 80159ec:	08016034 	.word	0x08016034
 80159f0:	20004540 	.word	0x20004540

080159f4 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80159f4:	b198      	cbz	r0, 8015a1e <UTIL_TIMER_SetPeriod+0x2a>
{
 80159f6:	b510      	push	{r4, lr}
 80159f8:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80159fa:	4b0a      	ldr	r3, [pc, #40]	; (8015a24 <UTIL_TIMER_SetPeriod+0x30>)
 80159fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159fe:	4608      	mov	r0, r1
 8015a00:	4798      	blx	r3
 8015a02:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8015a04:	4620      	mov	r0, r4
 8015a06:	f7ff ff2f 	bl	8015868 <TimerExists>
 8015a0a:	b908      	cbnz	r0, 8015a10 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8015a0c:	2000      	movs	r0, #0
}
 8015a0e:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8015a10:	4620      	mov	r0, r4
 8015a12:	f7ff ff4f 	bl	80158b4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8015a16:	4620      	mov	r0, r4
 8015a18:	f7ff ffa6 	bl	8015968 <UTIL_TIMER_Start>
 8015a1c:	e7f7      	b.n	8015a0e <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8015a1e:	2001      	movs	r0, #1
}
 8015a20:	4770      	bx	lr
 8015a22:	bf00      	nop
 8015a24:	08016034 	.word	0x08016034

08015a28 <UTIL_TIMER_IRQ_Handler>:
{
 8015a28:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a2a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015a2e:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8015a30:	4c1e      	ldr	r4, [pc, #120]	; (8015aac <UTIL_TIMER_IRQ_Handler+0x84>)
 8015a32:	6963      	ldr	r3, [r4, #20]
 8015a34:	4798      	blx	r3
 8015a36:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8015a38:	6923      	ldr	r3, [r4, #16]
 8015a3a:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8015a3c:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8015a3e:	4b1c      	ldr	r3, [pc, #112]	; (8015ab0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	b923      	cbnz	r3, 8015a4e <UTIL_TIMER_IRQ_Handler+0x26>
 8015a44:	e018      	b.n	8015a78 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8015a46:	2200      	movs	r2, #0
 8015a48:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8015a4a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8015a4c:	b1a3      	cbz	r3, 8015a78 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8015a4e:	681a      	ldr	r2, [r3, #0]
 8015a50:	42a2      	cmp	r2, r4
 8015a52:	d9f8      	bls.n	8015a46 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8015a54:	1a31      	subs	r1, r6, r0
 8015a56:	440a      	add	r2, r1
 8015a58:	601a      	str	r2, [r3, #0]
 8015a5a:	e7f6      	b.n	8015a4a <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8015a5c:	4b14      	ldr	r3, [pc, #80]	; (8015ab0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015a5e:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8015a60:	6962      	ldr	r2, [r4, #20]
 8015a62:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8015a64:	2300      	movs	r3, #0
 8015a66:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8015a68:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8015a6a:	68e3      	ldr	r3, [r4, #12]
 8015a6c:	6920      	ldr	r0, [r4, #16]
 8015a6e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8015a70:	8963      	ldrh	r3, [r4, #10]
 8015a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a76:	d012      	beq.n	8015a9e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8015a78:	4b0d      	ldr	r3, [pc, #52]	; (8015ab0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	b13b      	cbz	r3, 8015a8e <UTIL_TIMER_IRQ_Handler+0x66>
 8015a7e:	681c      	ldr	r4, [r3, #0]
 8015a80:	2c00      	cmp	r4, #0
 8015a82:	d0eb      	beq.n	8015a5c <UTIL_TIMER_IRQ_Handler+0x34>
 8015a84:	4b09      	ldr	r3, [pc, #36]	; (8015aac <UTIL_TIMER_IRQ_Handler+0x84>)
 8015a86:	699b      	ldr	r3, [r3, #24]
 8015a88:	4798      	blx	r3
 8015a8a:	4284      	cmp	r4, r0
 8015a8c:	d3e6      	bcc.n	8015a5c <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8015a8e:	4b08      	ldr	r3, [pc, #32]	; (8015ab0 <UTIL_TIMER_IRQ_Handler+0x88>)
 8015a90:	6818      	ldr	r0, [r3, #0]
 8015a92:	b108      	cbz	r0, 8015a98 <UTIL_TIMER_IRQ_Handler+0x70>
 8015a94:	7a03      	ldrb	r3, [r0, #8]
 8015a96:	b133      	cbz	r3, 8015aa6 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a98:	f385 8810 	msr	PRIMASK, r5
}
 8015a9c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8015a9e:	4620      	mov	r0, r4
 8015aa0:	f7ff ff62 	bl	8015968 <UTIL_TIMER_Start>
 8015aa4:	e7e8      	b.n	8015a78 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8015aa6:	f7ff feed 	bl	8015884 <TimerSetTimeout>
 8015aaa:	e7f5      	b.n	8015a98 <UTIL_TIMER_IRQ_Handler+0x70>
 8015aac:	08016034 	.word	0x08016034
 8015ab0:	20004540 	.word	0x20004540

08015ab4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8015ab4:	4601      	mov	r1, r0
  int i = 0;
 8015ab6:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8015ab8:	e007      	b.n	8015aca <ee_skip_atoi+0x16>
 8015aba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8015abe:	1c53      	adds	r3, r2, #1
 8015ac0:	600b      	str	r3, [r1, #0]
 8015ac2:	7813      	ldrb	r3, [r2, #0]
 8015ac4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8015ac8:	3830      	subs	r0, #48	; 0x30
 8015aca:	680a      	ldr	r2, [r1, #0]
 8015acc:	7813      	ldrb	r3, [r2, #0]
 8015ace:	3b30      	subs	r3, #48	; 0x30
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	2b09      	cmp	r3, #9
 8015ad4:	d9f1      	bls.n	8015aba <ee_skip_atoi+0x6>
  return i;
}
 8015ad6:	4770      	bx	lr

08015ad8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8015ad8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8015adc:	b093      	sub	sp, #76	; 0x4c
 8015ade:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015ae0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8015ae2:	f016 0f40 	tst.w	r6, #64	; 0x40
 8015ae6:	d110      	bne.n	8015b0a <ee_number+0x32>
  char *dig = lower_digits;
 8015ae8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8015be4 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8015aec:	1e9f      	subs	r7, r3, #2
 8015aee:	2f22      	cmp	r7, #34	; 0x22
 8015af0:	d875      	bhi.n	8015bde <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8015af2:	f016 0401 	ands.w	r4, r6, #1
 8015af6:	d00b      	beq.n	8015b10 <ee_number+0x38>
 8015af8:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8015afc:	f016 0f02 	tst.w	r6, #2
 8015b00:	d00f      	beq.n	8015b22 <ee_number+0x4a>
  {
    if (num < 0)
 8015b02:	2a00      	cmp	r2, #0
 8015b04:	db07      	blt.n	8015b16 <ee_number+0x3e>
  sign = 0;
 8015b06:	2700      	movs	r7, #0
 8015b08:	e00c      	b.n	8015b24 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8015b0a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8015be8 <ee_number+0x110>
 8015b0e:	e7ed      	b.n	8015aec <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8015b10:	f04f 0e20 	mov.w	lr, #32
 8015b14:	e7f2      	b.n	8015afc <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8015b16:	4252      	negs	r2, r2
      size--;
 8015b18:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8015b1a:	3e01      	subs	r6, #1
 8015b1c:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8015b1e:	272d      	movs	r7, #45	; 0x2d
 8015b20:	e000      	b.n	8015b24 <ee_number+0x4c>
  sign = 0;
 8015b22:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8015b24:	bb5a      	cbnz	r2, 8015b7e <ee_number+0xa6>
    tmp[i++] = '0';
 8015b26:	2330      	movs	r3, #48	; 0x30
 8015b28:	f88d 3004 	strb.w	r3, [sp, #4]
 8015b2c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8015b30:	45ac      	cmp	ip, r5
 8015b32:	dd00      	ble.n	8015b36 <ee_number+0x5e>
 8015b34:	4665      	mov	r5, ip
  size -= precision;
 8015b36:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015b38:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8015b3a:	b31c      	cbz	r4, 8015b84 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8015b3c:	b11f      	cbz	r7, 8015b46 <ee_number+0x6e>
 8015b3e:	f800 7b01 	strb.w	r7, [r0], #1
 8015b42:	3901      	subs	r1, #1
 8015b44:	d007      	beq.n	8015b56 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	f103 33ff 	add.w	r3, r3, #4294967295
 8015b4c:	dd24      	ble.n	8015b98 <ee_number+0xc0>
 8015b4e:	f800 eb01 	strb.w	lr, [r0], #1
 8015b52:	3901      	subs	r1, #1
 8015b54:	d1f7      	bne.n	8015b46 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8015b56:	b013      	add	sp, #76	; 0x4c
 8015b58:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8015b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8015b60:	fb03 2216 	mls	r2, r3, r6, r2
 8015b64:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8015b68:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8015b6c:	446a      	add	r2, sp
 8015b6e:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8015b72:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8015b74:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8015b78:	2a00      	cmp	r2, #0
 8015b7a:	d1ef      	bne.n	8015b5c <ee_number+0x84>
 8015b7c:	e7d8      	b.n	8015b30 <ee_number+0x58>
  i = 0;
 8015b7e:	f04f 0c00 	mov.w	ip, #0
 8015b82:	e7f9      	b.n	8015b78 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	f103 33ff 	add.w	r3, r3, #4294967295
 8015b8a:	ddd7      	ble.n	8015b3c <ee_number+0x64>
 8015b8c:	2220      	movs	r2, #32
 8015b8e:	f800 2b01 	strb.w	r2, [r0], #1
 8015b92:	3901      	subs	r1, #1
 8015b94:	d1f6      	bne.n	8015b84 <ee_number+0xac>
 8015b96:	e7de      	b.n	8015b56 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8015b98:	4565      	cmp	r5, ip
 8015b9a:	f105 35ff 	add.w	r5, r5, #4294967295
 8015b9e:	dd05      	ble.n	8015bac <ee_number+0xd4>
 8015ba0:	2230      	movs	r2, #48	; 0x30
 8015ba2:	f800 2b01 	strb.w	r2, [r0], #1
 8015ba6:	3901      	subs	r1, #1
 8015ba8:	d1f6      	bne.n	8015b98 <ee_number+0xc0>
 8015baa:	e7d4      	b.n	8015b56 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8015bac:	4662      	mov	r2, ip
 8015bae:	2a00      	cmp	r2, #0
 8015bb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015bb4:	dd09      	ble.n	8015bca <ee_number+0xf2>
 8015bb6:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8015bba:	446a      	add	r2, sp
 8015bbc:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8015bc0:	f800 2b01 	strb.w	r2, [r0], #1
 8015bc4:	3901      	subs	r1, #1
 8015bc6:	d1f1      	bne.n	8015bac <ee_number+0xd4>
 8015bc8:	e7c5      	b.n	8015b56 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	f103 33ff 	add.w	r3, r3, #4294967295
 8015bd0:	ddc1      	ble.n	8015b56 <ee_number+0x7e>
 8015bd2:	2220      	movs	r2, #32
 8015bd4:	f800 2b01 	strb.w	r2, [r0], #1
 8015bd8:	3901      	subs	r1, #1
 8015bda:	d1f6      	bne.n	8015bca <ee_number+0xf2>
 8015bdc:	e7bb      	b.n	8015b56 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8015bde:	2000      	movs	r0, #0
 8015be0:	e7b9      	b.n	8015b56 <ee_number+0x7e>
 8015be2:	bf00      	nop
 8015be4:	08016f24 	.word	0x08016f24
 8015be8:	08016efc 	.word	0x08016efc

08015bec <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8015bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bf0:	b087      	sub	sp, #28
 8015bf2:	9205      	str	r2, [sp, #20]
 8015bf4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8015bf6:	1e0f      	subs	r7, r1, #0
 8015bf8:	f340 80b8 	ble.w	8015d6c <tiny_vsnprintf_like+0x180>
 8015bfc:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8015bfe:	4604      	mov	r4, r0
 8015c00:	e004      	b.n	8015c0c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8015c02:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8015c06:	9b05      	ldr	r3, [sp, #20]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	9305      	str	r3, [sp, #20]
 8015c0c:	9905      	ldr	r1, [sp, #20]
 8015c0e:	780a      	ldrb	r2, [r1, #0]
 8015c10:	b922      	cbnz	r2, 8015c1c <tiny_vsnprintf_like+0x30>
 8015c12:	1ba3      	subs	r3, r4, r6
 8015c14:	1e78      	subs	r0, r7, #1
 8015c16:	4283      	cmp	r3, r0
 8015c18:	f2c0 80a2 	blt.w	8015d60 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8015c1c:	1ba3      	subs	r3, r4, r6
 8015c1e:	f107 38ff 	add.w	r8, r7, #4294967295
 8015c22:	4543      	cmp	r3, r8
 8015c24:	f280 809c 	bge.w	8015d60 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8015c28:	2a25      	cmp	r2, #37	; 0x25
 8015c2a:	d1ea      	bne.n	8015c02 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8015c2c:	1c4b      	adds	r3, r1, #1
 8015c2e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8015c30:	784b      	ldrb	r3, [r1, #1]
 8015c32:	2b30      	cmp	r3, #48	; 0x30
 8015c34:	d020      	beq.n	8015c78 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8015c36:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8015c3a:	3b30      	subs	r3, #48	; 0x30
 8015c3c:	b2db      	uxtb	r3, r3
 8015c3e:	2b09      	cmp	r3, #9
 8015c40:	d91d      	bls.n	8015c7e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8015c42:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8015c46:	9b05      	ldr	r3, [sp, #20]
 8015c48:	781a      	ldrb	r2, [r3, #0]
 8015c4a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8015c4e:	2b20      	cmp	r3, #32
 8015c50:	d867      	bhi.n	8015d22 <tiny_vsnprintf_like+0x136>
 8015c52:	e8df f003 	tbb	[pc, r3]
 8015c56:	664a      	.short	0x664a
 8015c58:	66666666 	.word	0x66666666
 8015c5c:	66666666 	.word	0x66666666
 8015c60:	66621e66 	.word	0x66621e66
 8015c64:	62666666 	.word	0x62666666
 8015c68:	66666666 	.word	0x66666666
 8015c6c:	66666666 	.word	0x66666666
 8015c70:	19662866 	.word	0x19662866
 8015c74:	6666      	.short	0x6666
 8015c76:	7c          	.byte	0x7c
 8015c77:	00          	.byte	0x00
      flags |= ZEROPAD;
 8015c78:	f04f 0901 	mov.w	r9, #1
 8015c7c:	e7dd      	b.n	8015c3a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8015c7e:	a805      	add	r0, sp, #20
 8015c80:	f7ff ff18 	bl	8015ab4 <ee_skip_atoi>
 8015c84:	4605      	mov	r5, r0
 8015c86:	e7de      	b.n	8015c46 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8015c88:	230a      	movs	r3, #10
 8015c8a:	e031      	b.n	8015cf0 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8015c8c:	2320      	movs	r3, #32
 8015c8e:	f804 3b01 	strb.w	r3, [r4], #1
 8015c92:	3d01      	subs	r5, #1
 8015c94:	2d00      	cmp	r5, #0
 8015c96:	dcf9      	bgt.n	8015c8c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8015c98:	9b04      	ldr	r3, [sp, #16]
 8015c9a:	1d1a      	adds	r2, r3, #4
 8015c9c:	9204      	str	r2, [sp, #16]
 8015c9e:	781b      	ldrb	r3, [r3, #0]
 8015ca0:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8015ca4:	e7af      	b.n	8015c06 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8015ca6:	9b04      	ldr	r3, [sp, #16]
 8015ca8:	1d1a      	adds	r2, r3, #4
 8015caa:	9204      	str	r2, [sp, #16]
 8015cac:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8015cb0:	f1b8 0f00 	cmp.w	r8, #0
 8015cb4:	d003      	beq.n	8015cbe <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8015cb6:	4640      	mov	r0, r8
 8015cb8:	f7ea fa62 	bl	8000180 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8015cbc:	e006      	b.n	8015ccc <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8015cbe:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015d70 <tiny_vsnprintf_like+0x184>
 8015cc2:	e7f8      	b.n	8015cb6 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8015cc4:	2220      	movs	r2, #32
 8015cc6:	f804 2b01 	strb.w	r2, [r4], #1
 8015cca:	461d      	mov	r5, r3
 8015ccc:	1e6b      	subs	r3, r5, #1
 8015cce:	4285      	cmp	r5, r0
 8015cd0:	dcf8      	bgt.n	8015cc4 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	e006      	b.n	8015ce4 <tiny_vsnprintf_like+0xf8>
 8015cd6:	4643      	mov	r3, r8
 8015cd8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8015cdc:	f804 1b01 	strb.w	r1, [r4], #1
 8015ce0:	3201      	adds	r2, #1
 8015ce2:	4698      	mov	r8, r3
 8015ce4:	4282      	cmp	r2, r0
 8015ce6:	dbf6      	blt.n	8015cd6 <tiny_vsnprintf_like+0xea>
 8015ce8:	e78d      	b.n	8015c06 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8015cea:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8015cee:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8015cf0:	f019 0f02 	tst.w	r9, #2
 8015cf4:	d02f      	beq.n	8015d56 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8015cf6:	9a04      	ldr	r2, [sp, #16]
 8015cf8:	1d11      	adds	r1, r2, #4
 8015cfa:	9104      	str	r1, [sp, #16]
 8015cfc:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8015cfe:	1ba1      	subs	r1, r4, r6
 8015d00:	f8cd 9008 	str.w	r9, [sp, #8]
 8015d04:	f04f 30ff 	mov.w	r0, #4294967295
 8015d08:	9001      	str	r0, [sp, #4]
 8015d0a:	9500      	str	r5, [sp, #0]
 8015d0c:	eba8 0101 	sub.w	r1, r8, r1
 8015d10:	4620      	mov	r0, r4
 8015d12:	f7ff fee1 	bl	8015ad8 <ee_number>
 8015d16:	4604      	mov	r4, r0
 8015d18:	e775      	b.n	8015c06 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8015d1a:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8015d1e:	230a      	movs	r3, #10
 8015d20:	e7e6      	b.n	8015cf0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8015d22:	2a25      	cmp	r2, #37	; 0x25
 8015d24:	d002      	beq.n	8015d2c <tiny_vsnprintf_like+0x140>
 8015d26:	2325      	movs	r3, #37	; 0x25
 8015d28:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8015d2c:	1ba3      	subs	r3, r4, r6
 8015d2e:	4598      	cmp	r8, r3
 8015d30:	dd0f      	ble.n	8015d52 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8015d32:	9b05      	ldr	r3, [sp, #20]
 8015d34:	781a      	ldrb	r2, [r3, #0]
 8015d36:	b13a      	cbz	r2, 8015d48 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8015d38:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8015d3c:	1ba3      	subs	r3, r4, r6
 8015d3e:	4598      	cmp	r8, r3
 8015d40:	f73f af61 	bgt.w	8015c06 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8015d44:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8015d46:	e7d3      	b.n	8015cf0 <tiny_vsnprintf_like+0x104>
          --fmt;
 8015d48:	3b01      	subs	r3, #1
 8015d4a:	9305      	str	r3, [sp, #20]
 8015d4c:	e7f6      	b.n	8015d3c <tiny_vsnprintf_like+0x150>
        base = 16;
 8015d4e:	2310      	movs	r3, #16
 8015d50:	e7ce      	b.n	8015cf0 <tiny_vsnprintf_like+0x104>
    base = 10;
 8015d52:	230a      	movs	r3, #10
 8015d54:	e7cc      	b.n	8015cf0 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8015d56:	9a04      	ldr	r2, [sp, #16]
 8015d58:	1d11      	adds	r1, r2, #4
 8015d5a:	9104      	str	r1, [sp, #16]
 8015d5c:	6812      	ldr	r2, [r2, #0]
 8015d5e:	e7ce      	b.n	8015cfe <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8015d60:	2300      	movs	r3, #0
 8015d62:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8015d64:	1ba0      	subs	r0, r4, r6
}
 8015d66:	b007      	add	sp, #28
 8015d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8015d6c:	2000      	movs	r0, #0
 8015d6e:	e7fa      	b.n	8015d66 <tiny_vsnprintf_like+0x17a>
 8015d70:	08016f4c 	.word	0x08016f4c

08015d74 <__libc_init_array>:
 8015d74:	b570      	push	{r4, r5, r6, lr}
 8015d76:	4d0d      	ldr	r5, [pc, #52]	; (8015dac <__libc_init_array+0x38>)
 8015d78:	4c0d      	ldr	r4, [pc, #52]	; (8015db0 <__libc_init_array+0x3c>)
 8015d7a:	1b64      	subs	r4, r4, r5
 8015d7c:	10a4      	asrs	r4, r4, #2
 8015d7e:	2600      	movs	r6, #0
 8015d80:	42a6      	cmp	r6, r4
 8015d82:	d109      	bne.n	8015d98 <__libc_init_array+0x24>
 8015d84:	4d0b      	ldr	r5, [pc, #44]	; (8015db4 <__libc_init_array+0x40>)
 8015d86:	4c0c      	ldr	r4, [pc, #48]	; (8015db8 <__libc_init_array+0x44>)
 8015d88:	f000 f8ae 	bl	8015ee8 <_init>
 8015d8c:	1b64      	subs	r4, r4, r5
 8015d8e:	10a4      	asrs	r4, r4, #2
 8015d90:	2600      	movs	r6, #0
 8015d92:	42a6      	cmp	r6, r4
 8015d94:	d105      	bne.n	8015da2 <__libc_init_array+0x2e>
 8015d96:	bd70      	pop	{r4, r5, r6, pc}
 8015d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d9c:	4798      	blx	r3
 8015d9e:	3601      	adds	r6, #1
 8015da0:	e7ee      	b.n	8015d80 <__libc_init_array+0xc>
 8015da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8015da6:	4798      	blx	r3
 8015da8:	3601      	adds	r6, #1
 8015daa:	e7f2      	b.n	8015d92 <__libc_init_array+0x1e>
 8015dac:	08016f60 	.word	0x08016f60
 8015db0:	08016f60 	.word	0x08016f60
 8015db4:	08016f60 	.word	0x08016f60
 8015db8:	08016f64 	.word	0x08016f64

08015dbc <memcpy>:
 8015dbc:	440a      	add	r2, r1
 8015dbe:	4291      	cmp	r1, r2
 8015dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8015dc4:	d100      	bne.n	8015dc8 <memcpy+0xc>
 8015dc6:	4770      	bx	lr
 8015dc8:	b510      	push	{r4, lr}
 8015dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015dd2:	4291      	cmp	r1, r2
 8015dd4:	d1f9      	bne.n	8015dca <memcpy+0xe>
 8015dd6:	bd10      	pop	{r4, pc}

08015dd8 <memset>:
 8015dd8:	4402      	add	r2, r0
 8015dda:	4603      	mov	r3, r0
 8015ddc:	4293      	cmp	r3, r2
 8015dde:	d100      	bne.n	8015de2 <memset+0xa>
 8015de0:	4770      	bx	lr
 8015de2:	f803 1b01 	strb.w	r1, [r3], #1
 8015de6:	e7f9      	b.n	8015ddc <memset+0x4>

08015de8 <floor>:
 8015de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dec:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8015df0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8015df4:	2e13      	cmp	r6, #19
 8015df6:	4602      	mov	r2, r0
 8015df8:	460b      	mov	r3, r1
 8015dfa:	4607      	mov	r7, r0
 8015dfc:	460c      	mov	r4, r1
 8015dfe:	4605      	mov	r5, r0
 8015e00:	dc33      	bgt.n	8015e6a <floor+0x82>
 8015e02:	2e00      	cmp	r6, #0
 8015e04:	da14      	bge.n	8015e30 <floor+0x48>
 8015e06:	a334      	add	r3, pc, #208	; (adr r3, 8015ed8 <floor+0xf0>)
 8015e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e0c:	f7ea f9c6 	bl	800019c <__adddf3>
 8015e10:	2200      	movs	r2, #0
 8015e12:	2300      	movs	r3, #0
 8015e14:	f7ea fbf6 	bl	8000604 <__aeabi_dcmpgt>
 8015e18:	b138      	cbz	r0, 8015e2a <floor+0x42>
 8015e1a:	2c00      	cmp	r4, #0
 8015e1c:	da58      	bge.n	8015ed0 <floor+0xe8>
 8015e1e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015e22:	431d      	orrs	r5, r3
 8015e24:	d001      	beq.n	8015e2a <floor+0x42>
 8015e26:	4c2e      	ldr	r4, [pc, #184]	; (8015ee0 <floor+0xf8>)
 8015e28:	2500      	movs	r5, #0
 8015e2a:	4623      	mov	r3, r4
 8015e2c:	462f      	mov	r7, r5
 8015e2e:	e025      	b.n	8015e7c <floor+0x94>
 8015e30:	4a2c      	ldr	r2, [pc, #176]	; (8015ee4 <floor+0xfc>)
 8015e32:	fa42 f806 	asr.w	r8, r2, r6
 8015e36:	ea01 0208 	and.w	r2, r1, r8
 8015e3a:	4302      	orrs	r2, r0
 8015e3c:	d01e      	beq.n	8015e7c <floor+0x94>
 8015e3e:	a326      	add	r3, pc, #152	; (adr r3, 8015ed8 <floor+0xf0>)
 8015e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e44:	f7ea f9aa 	bl	800019c <__adddf3>
 8015e48:	2200      	movs	r2, #0
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	f7ea fbda 	bl	8000604 <__aeabi_dcmpgt>
 8015e50:	2800      	cmp	r0, #0
 8015e52:	d0ea      	beq.n	8015e2a <floor+0x42>
 8015e54:	2c00      	cmp	r4, #0
 8015e56:	bfbe      	ittt	lt
 8015e58:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015e5c:	fa43 f606 	asrlt.w	r6, r3, r6
 8015e60:	19a4      	addlt	r4, r4, r6
 8015e62:	ea24 0408 	bic.w	r4, r4, r8
 8015e66:	2500      	movs	r5, #0
 8015e68:	e7df      	b.n	8015e2a <floor+0x42>
 8015e6a:	2e33      	cmp	r6, #51	; 0x33
 8015e6c:	dd0a      	ble.n	8015e84 <floor+0x9c>
 8015e6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015e72:	d103      	bne.n	8015e7c <floor+0x94>
 8015e74:	f7ea f992 	bl	800019c <__adddf3>
 8015e78:	4607      	mov	r7, r0
 8015e7a:	460b      	mov	r3, r1
 8015e7c:	4638      	mov	r0, r7
 8015e7e:	4619      	mov	r1, r3
 8015e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e84:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8015e88:	f04f 32ff 	mov.w	r2, #4294967295
 8015e8c:	fa22 f808 	lsr.w	r8, r2, r8
 8015e90:	ea18 0f00 	tst.w	r8, r0
 8015e94:	d0f2      	beq.n	8015e7c <floor+0x94>
 8015e96:	a310      	add	r3, pc, #64	; (adr r3, 8015ed8 <floor+0xf0>)
 8015e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e9c:	f7ea f97e 	bl	800019c <__adddf3>
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	f7ea fbae 	bl	8000604 <__aeabi_dcmpgt>
 8015ea8:	2800      	cmp	r0, #0
 8015eaa:	d0be      	beq.n	8015e2a <floor+0x42>
 8015eac:	2c00      	cmp	r4, #0
 8015eae:	da02      	bge.n	8015eb6 <floor+0xce>
 8015eb0:	2e14      	cmp	r6, #20
 8015eb2:	d103      	bne.n	8015ebc <floor+0xd4>
 8015eb4:	3401      	adds	r4, #1
 8015eb6:	ea25 0508 	bic.w	r5, r5, r8
 8015eba:	e7b6      	b.n	8015e2a <floor+0x42>
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015ec2:	fa03 f606 	lsl.w	r6, r3, r6
 8015ec6:	4435      	add	r5, r6
 8015ec8:	42bd      	cmp	r5, r7
 8015eca:	bf38      	it	cc
 8015ecc:	18e4      	addcc	r4, r4, r3
 8015ece:	e7f2      	b.n	8015eb6 <floor+0xce>
 8015ed0:	2500      	movs	r5, #0
 8015ed2:	462c      	mov	r4, r5
 8015ed4:	e7a9      	b.n	8015e2a <floor+0x42>
 8015ed6:	bf00      	nop
 8015ed8:	8800759c 	.word	0x8800759c
 8015edc:	7e37e43c 	.word	0x7e37e43c
 8015ee0:	bff00000 	.word	0xbff00000
 8015ee4:	000fffff 	.word	0x000fffff

08015ee8 <_init>:
 8015ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eea:	bf00      	nop
 8015eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015eee:	bc08      	pop	{r3}
 8015ef0:	469e      	mov	lr, r3
 8015ef2:	4770      	bx	lr

08015ef4 <_fini>:
 8015ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ef6:	bf00      	nop
 8015ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015efa:	bc08      	pop	{r3}
 8015efc:	469e      	mov	lr, r3
 8015efe:	4770      	bx	lr
